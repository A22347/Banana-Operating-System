
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 30 66 01 00       	call   c0016650 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 24 4a 03 c0       	mov    eax,0xc0034a24
c0000025:	3d 24 4a 03 c0       	cmp    eax,0xc0034a24
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 24 4a 03 c0       	push   0xc0034a24
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 24 4a 03 c0       	mov    eax,0xc0034a24
c0000051:	2d 24 4a 03 c0       	sub    eax,0xc0034a24
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 24 4a 03 c0       	push   0xc0034a24
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c f5 02 c0       	mov    ebx,0xc002f57c
c0000097:	81 eb 78 f5 02 c0    	sub    ebx,0xc002f578
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 f5 02 c0       	mov    esi,0xc002f578
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 24 4a 03 c0       	push   0xc0034a24
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 24 4a 03 c0       	push   0xc0034a24
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 37 4a 02 00       	call   c0024ce4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 48 8f 01 00       	call   c001920d <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 15 4a 02 00       	call   c0024ce4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 22 4f 02 00       	call   c0025210 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 c5 53 02 00       	call   c00256bc <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ef 00 02 00       	jmp    c002046e <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 80 f5 02 c0 02 	test   BYTE PTR [edx-0x3ffd0a80],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 80 f5 02 c0 01 	test   BYTE PTR [edx-0x3ffd0a80],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 80 f5 02 c0 08 	test   BYTE PTR [edx-0x3ffd0a80],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 80 f5 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0a80],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 80 f5 02 c0 01 	test   BYTE PTR [edx-0x3ffd0a80],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	83 ec 0c             	sub    esp,0xc
c0000c3f:	83 ec 0c             	sub    esp,0xc
c0000c42:	68 84 f6 02 c0       	push   0xc002f684
c0000c47:	e8 78 13 02 00       	call   c0021fc4 <KeCPuts>
c0000c4c:	83 c4 10             	add    esp,0x10
c0000c4f:	90                   	nop
c0000c50:	83 c4 0c             	add    esp,0xc
c0000c53:	c3                   	ret    

c0000c54 <tcpip_callback_with_block>:
c0000c54:	83 ec 0c             	sub    esp,0xc
c0000c57:	83 ec 0c             	sub    esp,0xc
c0000c5a:	68 bf f6 02 c0       	push   0xc002f6bf
c0000c5f:	e8 48 13 02 00       	call   c0021fac <KeCPanic>
c0000c64:	83 c4 10             	add    esp,0x10
c0000c67:	90                   	nop
c0000c68:	83 c4 0c             	add    esp,0xc
c0000c6b:	c3                   	ret    

c0000c6c <sys_sem_new>:
c0000c6c:	83 ec 1c             	sub    esp,0x1c
c0000c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c7c:	83 ec 08             	sub    esp,0x8
c0000c7f:	50                   	push   eax
c0000c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c84:	e8 63 12 02 00       	call   c0021eec <KeNetCreateSemaphore>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	b0 00                	mov    al,0x0
c0000c8e:	83 c4 1c             	add    esp,0x1c
c0000c91:	c3                   	ret    
c0000c92:	66 90                	xchg   ax,ax

c0000c94 <sys_sem_free>:
c0000c94:	83 ec 0c             	sub    esp,0xc
c0000c97:	83 ec 0c             	sub    esp,0xc
c0000c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9e:	e8 8d 12 02 00       	call   c0021f30 <KeNetFreeSemaphore>
c0000ca3:	83 c4 10             	add    esp,0x10
c0000ca6:	90                   	nop
c0000ca7:	83 c4 0c             	add    esp,0xc
c0000caa:	c3                   	ret    
c0000cab:	90                   	nop

c0000cac <sys_sem_signal>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 91 12 02 00       	call   c0021f4c <KeNetSignalSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_arch_sem_wait>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ccb:	83 ec 08             	sub    esp,0x8
c0000cce:	50                   	push   eax
c0000ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd3:	e8 90 12 02 00       	call   c0021f68 <KeNetWaitSemaphore>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_mbox_new>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	68 d9 f6 02 c0       	push   0xc002f6d9
c0000ceb:	e8 bc 12 02 00       	call   c0021fac <KeCPanic>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	b0 00                	mov    al,0x0
c0000cf5:	83 c4 0c             	add    esp,0xc
c0000cf8:	c3                   	ret    
c0000cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0000cfc <sys_mbox_free>:
c0000cfc:	83 ec 0c             	sub    esp,0xc
c0000cff:	83 ec 0c             	sub    esp,0xc
c0000d02:	68 e6 f6 02 c0       	push   0xc002f6e6
c0000d07:	e8 a0 12 02 00       	call   c0021fac <KeCPanic>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	90                   	nop
c0000d10:	83 c4 0c             	add    esp,0xc
c0000d13:	c3                   	ret    

c0000d14 <sys_mbox_post>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 f4 f6 02 c0       	push   0xc002f6f4
c0000d1f:	e8 88 12 02 00       	call   c0021fac <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	90                   	nop
c0000d28:	83 c4 0c             	add    esp,0xc
c0000d2b:	c3                   	ret    

c0000d2c <sys_arch_mbox_fetch>:
c0000d2c:	83 ec 0c             	sub    esp,0xc
c0000d2f:	83 ec 0c             	sub    esp,0xc
c0000d32:	68 02 f7 02 c0       	push   0xc002f702
c0000d37:	e8 70 12 02 00       	call   c0021fac <KeCPanic>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	b8 00 00 00 00       	mov    eax,0x0
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_arch_mbox_tryfetch>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 16 f7 02 c0       	push   0xc002f716
c0000d53:	e8 54 12 02 00       	call   c0021fac <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	b8 00 00 00 00       	mov    eax,0x0
c0000d60:	83 c4 0c             	add    esp,0xc
c0000d63:	c3                   	ret    

c0000d64 <sys_mbox_trypost>:
c0000d64:	83 ec 0c             	sub    esp,0xc
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	68 2d f7 02 c0       	push   0xc002f72d
c0000d6f:	e8 38 12 02 00       	call   c0021fac <KeCPanic>
c0000d74:	83 c4 10             	add    esp,0x10
c0000d77:	90                   	nop
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_thread_new>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 08             	sub    esp,0x8
c0000d82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d8a:	e8 f9 11 02 00       	call   c0021f88 <KeNetCreateThread>
c0000d8f:	83 c4 10             	add    esp,0x10
c0000d92:	b8 00 00 00 00       	mov    eax,0x0
c0000d97:	83 c4 0c             	add    esp,0xc
c0000d9a:	c3                   	ret    
c0000d9b:	90                   	nop

c0000d9c <sys_init>:
c0000d9c:	90                   	nop
c0000d9d:	c3                   	ret    

c0000d9e <largebin_index>:
c0000d9e:	89 c2                	mov    edx,eax
c0000da0:	c1 ea 08             	shr    edx,0x8
c0000da3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000da9:	77 10                	ja     c0000dbb <largebin_index+0x1d>
c0000dab:	0f bd d2             	bsr    edx,edx
c0000dae:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000db1:	d3 e8                	shr    eax,cl
c0000db3:	83 e0 03             	and    eax,0x3
c0000db6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dba:	c3                   	ret    
c0000dbb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000dc0:	c3                   	ret    

c0000dc1 <malloc_init_state>:
c0000dc1:	53                   	push   ebx
c0000dc2:	8d 50 34             	lea    edx,[eax+0x34]
c0000dc5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000dcb:	89 d1                	mov    ecx,edx
c0000dcd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000dd0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000dd3:	83 c2 08             	add    edx,0x8
c0000dd6:	39 da                	cmp    edx,ebx
c0000dd8:	75 f3                	jne    c0000dcd <malloc_init_state+0xc>
c0000dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ddc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000de6:	83 e2 03             	and    edx,0x3
c0000de9:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000df3:	83 ca 48             	or     edx,0x48
c0000df6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e00:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e0a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e11:	89 10                	mov    DWORD PTR [eax],edx
c0000e13:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e16:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e20:	5b                   	pop    ebx
c0000e21:	c3                   	ret    

c0000e22 <malloc_consolidate>:
c0000e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e24:	85 d2                	test   edx,edx
c0000e26:	0f 84 d8 00 00 00    	je     c0000f04 <malloc_consolidate+0xe2>
c0000e2c:	55                   	push   ebp
c0000e2d:	83 e2 fd             	and    edx,0xfffffffd
c0000e30:	57                   	push   edi
c0000e31:	89 c5                	mov    ebp,eax
c0000e33:	56                   	push   esi
c0000e34:	8d 78 34             	lea    edi,[eax+0x34]
c0000e37:	53                   	push   ebx
c0000e38:	83 ec 10             	sub    esp,0x10
c0000e3b:	89 10                	mov    DWORD PTR [eax],edx
c0000e3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e41:	c1 ea 03             	shr    edx,0x3
c0000e44:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e4f:	85 d2                	test   edx,edx
c0000e51:	0f 84 98 00 00 00    	je     c0000eef <malloc_consolidate+0xcd>
c0000e57:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e5e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e61:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e68:	89 f9                	mov    ecx,edi
c0000e6a:	83 e1 fe             	and    ecx,0xfffffffe
c0000e6d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000e70:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000e73:	83 e3 fc             	and    ebx,0xfffffffc
c0000e76:	83 e7 01             	and    edi,0x1
c0000e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e7c:	75 14                	jne    c0000e92 <malloc_consolidate+0x70>
c0000e7e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e80:	29 fa                	sub    edx,edi
c0000e82:	01 f9                	add    ecx,edi
c0000e84:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e87:	89 fb                	mov    ebx,edi
c0000e89:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e8c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e8f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e92:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e95:	74 40                	je     c0000ed7 <malloc_consolidate+0xb5>
c0000e97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e9d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ea1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ea4:	83 e7 01             	and    edi,0x1
c0000ea7:	75 0e                	jne    c0000eb7 <malloc_consolidate+0x95>
c0000ea9:	01 d9                	add    ecx,ebx
c0000eab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000eae:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000eb1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000eb4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eb7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eba:	89 ce                	mov    esi,ecx
c0000ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ebf:	83 ce 01             	or     esi,0x1
c0000ec2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ec5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ec8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ecb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ecf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ed2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ed5:	eb 0c                	jmp    c0000ee3 <malloc_consolidate+0xc1>
c0000ed7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000eda:	83 c9 01             	or     ecx,0x1
c0000edd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ee7:	85 d2                	test   edx,edx
c0000ee9:	0f 85 6f ff ff ff    	jne    c0000e5e <malloc_consolidate+0x3c>
c0000eef:	83 c5 04             	add    ebp,0x4
c0000ef2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ef6:	0f 85 50 ff ff ff    	jne    c0000e4c <malloc_consolidate+0x2a>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    
c0000f04:	e9 b8 fe ff ff       	jmp    c0000dc1 <malloc_init_state>

c0000f09 <dlfree>:
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000f10:	85 c9                	test   ecx,ecx
c0000f12:	0f 84 01 01 00 00    	je     c0001019 <dlfree+0x110>
c0000f18:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000f1b:	8b 1d e0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368e0
c0000f21:	89 f0                	mov    eax,esi
c0000f23:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000f26:	83 e0 fc             	and    eax,0xfffffffc
c0000f29:	39 c3                	cmp    ebx,eax
c0000f2b:	72 24                	jb     c0000f51 <dlfree+0x48>
c0000f2d:	83 cb 03             	or     ebx,0x3
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f39:	83 e8 02             	sub    eax,0x2
c0000f3c:	8b 1c 85 e4 68 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc971c]
c0000f43:	89 19                	mov    DWORD PTR [ecx],ebx
c0000f45:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f4c:	e9 c8 00 00 00       	jmp    c0001019 <dlfree+0x110>
c0000f51:	83 e6 02             	and    esi,0x2
c0000f54:	0f 85 a0 00 00 00    	jne    c0000ffa <dlfree+0xf1>
c0000f5a:	83 cb 01             	or     ebx,0x1
c0000f5d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f60:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f66:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000f69:	83 e3 fc             	and    ebx,0xfffffffc
c0000f6c:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000f70:	75 13                	jne    c0000f85 <dlfree+0x7c>
c0000f72:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000f75:	29 ca                	sub    edx,ecx
c0000f77:	01 c8                	add    eax,ecx
c0000f79:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f7c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000f7f:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000f82:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000f85:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000f8b:	74 40                	je     c0000fcd <dlfree+0xc4>
c0000f8d:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000f91:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000f94:	80 e1 01             	and    cl,0x1
c0000f97:	75 0e                	jne    c0000fa7 <dlfree+0x9e>
c0000f99:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f9c:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000f9f:	01 d8                	add    eax,ebx
c0000fa1:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fa4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fa7:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fad:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fb4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000fb7:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000fbd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000fc0:	89 c1                	mov    ecx,eax
c0000fc2:	83 c9 01             	or     ecx,0x1
c0000fc5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fcb:	eb 10                	jmp    c0000fdd <dlfree+0xd4>
c0000fcd:	01 d8                	add    eax,ebx
c0000fcf:	89 c1                	mov    ecx,eax
c0000fd1:	83 c9 01             	or     ecx,0x1
c0000fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fd7:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000fdd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000fe2:	76 35                	jbe    c0001019 <dlfree+0x110>
c0000fe4:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000feb:	74 2c                	je     c0001019 <dlfree+0x110>
c0000fed:	5b                   	pop    ebx
c0000fee:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000ff3:	5e                   	pop    esi
c0000ff4:	5f                   	pop    edi
c0000ff5:	e9 28 fe ff ff       	jmp    c0000e22 <malloc_consolidate>
c0000ffa:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000ffd:	01 c8                	add    eax,ecx
c0000fff:	53                   	push   ebx
c0001000:	29 ca                	sub    edx,ecx
c0001002:	53                   	push   ebx
c0001003:	ff 0d 30 6c 03 c0    	dec    DWORD PTR ds:0xc0036c30
c0001009:	50                   	push   eax
c000100a:	29 05 44 6c 03 c0    	sub    DWORD PTR ds:0xc0036c44,eax
c0001010:	52                   	push   edx
c0001011:	e8 5f 55 01 00       	call   c0016575 <munmap>
c0001016:	83 c4 10             	add    esp,0x10
c0001019:	5b                   	pop    ebx
c000101a:	5e                   	pop    esi
c000101b:	5f                   	pop    edi
c000101c:	c3                   	ret    

c000101d <sYSMALLOc>:
c000101d:	55                   	push   ebp
c000101e:	57                   	push   edi
c000101f:	56                   	push   esi
c0001020:	53                   	push   ebx
c0001021:	89 d3                	mov    ebx,edx
c0001023:	83 ec 2c             	sub    esp,0x2c
c0001026:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000102a:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0001030:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001033:	8d 45 ff             	lea    eax,[ebp-0x1]
c0001036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000103a:	74 1f                	je     c000105b <sYSMALLOc+0x3e>
c000103c:	89 d0                	mov    eax,edx
c000103e:	e8 df fd ff ff       	call   c0000e22 <malloc_consolidate>
c0001043:	83 ec 0c             	sub    esp,0xc
c0001046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000104a:	83 e8 07             	sub    eax,0x7
c000104d:	50                   	push   eax
c000104e:	e8 7d 03 00 00       	call   c00013d0 <dlmalloc>
c0001053:	83 c4 10             	add    esp,0x10
c0001056:	e9 6d 03 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000105b:	f7 dd                	neg    ebp
c000105d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001061:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0001065:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c000106b:	0f 87 be 00 00 00    	ja     c000112f <sYSMALLOc+0x112>
c0001071:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0001077:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c000107d:	0f 8d ac 00 00 00    	jge    c000112f <sYSMALLOc+0x112>
c0001083:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0001087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000108b:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c000108f:	21 ee                	and    esi,ebp
c0001091:	39 fe                	cmp    esi,edi
c0001093:	0f 86 96 00 00 00    	jbe    c000112f <sYSMALLOc+0x112>
c0001099:	52                   	push   edx
c000109a:	52                   	push   edx
c000109b:	6a 00                	push   0x0
c000109d:	6a ff                	push   0xffffffff
c000109f:	6a 0c                	push   0xc
c00010a1:	6a 03                	push   0x3
c00010a3:	56                   	push   esi
c00010a4:	6a 00                	push   0x0
c00010a6:	e8 4a 54 01 00       	call   c00164f5 <mmap>
c00010ab:	83 c4 20             	add    esp,0x20
c00010ae:	83 f8 ff             	cmp    eax,0xffffffff
c00010b1:	74 7c                	je     c000112f <sYSMALLOc+0x112>
c00010b3:	89 c1                	mov    ecx,eax
c00010b5:	83 e1 07             	and    ecx,0x7
c00010b8:	74 13                	je     c00010cd <sYSMALLOc+0xb0>
c00010ba:	ba 08 00 00 00       	mov    edx,0x8
c00010bf:	29 ca                	sub    edx,ecx
c00010c1:	89 f1                	mov    ecx,esi
c00010c3:	01 d0                	add    eax,edx
c00010c5:	29 d1                	sub    ecx,edx
c00010c7:	89 10                	mov    DWORD PTR [eax],edx
c00010c9:	89 ca                	mov    edx,ecx
c00010cb:	eb 08                	jmp    c00010d5 <sYSMALLOc+0xb8>
c00010cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00010d3:	89 f2                	mov    edx,esi
c00010d5:	83 ca 02             	or     edx,0x2
c00010d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00010db:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c00010e1:	8d 57 01             	lea    edx,[edi+0x1]
c00010e4:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c00010ea:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c00010f0:	7e 06                	jle    c00010f8 <sYSMALLOc+0xdb>
c00010f2:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c00010f8:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c00010fe:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0001104:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c000110a:	76 06                	jbe    c0001112 <sYSMALLOc+0xf5>
c000110c:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0001112:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0001118:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c000111e:	0f 83 3f 01 00 00    	jae    c0001263 <sYSMALLOc+0x246>
c0001124:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c000112a:	e9 34 01 00 00       	jmp    c0001263 <sYSMALLOc+0x246>
c000112f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001132:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0001138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000113c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000113f:	83 e0 fc             	and    eax,0xfffffffc
c0001142:	89 04 24             	mov    DWORD PTR [esp],eax
c0001145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001149:	03 04 24             	add    eax,DWORD PTR [esp]
c000114c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001154:	83 c0 10             	add    eax,0x10
c0001157:	01 c5                	add    ebp,eax
c0001159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000115d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001164:	74 03                	je     c0001169 <sYSMALLOc+0x14c>
c0001166:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0001169:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c000116d:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0001171:	89 ee                	mov    esi,ebp
c0001173:	7f 18                	jg     c000118d <sYSMALLOc+0x170>
c0001175:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c000117c:	74 27                	je     c00011a5 <sYSMALLOc+0x188>
c000117e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001182:	03 34 24             	add    esi,DWORD PTR [esp]
c0001185:	01 ee                	add    esi,ebp
c0001187:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c000118b:	eb 18                	jmp    c00011a5 <sYSMALLOc+0x188>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	55                   	push   ebp
c0001191:	e8 29 53 01 00       	call   c00164bf <sbrk_thunk>
c0001196:	83 c4 10             	add    esp,0x10
c0001199:	89 c7                	mov    edi,eax
c000119b:	83 c8 ff             	or     eax,0xffffffff
c000119e:	83 ff ff             	cmp    edi,0xffffffff
c00011a1:	75 42                	jne    c00011e5 <sYSMALLOc+0x1c8>
c00011a3:	eb d0                	jmp    c0001175 <sYSMALLOc+0x158>
c00011a5:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c00011ab:	77 05                	ja     c00011b2 <sYSMALLOc+0x195>
c00011ad:	be 00 c0 00 00       	mov    esi,0xc000
c00011b2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00011b6:	77 07                	ja     c00011bf <sYSMALLOc+0x1a2>
c00011b8:	31 c0                	xor    eax,eax
c00011ba:	e9 09 02 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c00011bf:	50                   	push   eax
c00011c0:	50                   	push   eax
c00011c1:	6a 00                	push   0x0
c00011c3:	6a ff                	push   0xffffffff
c00011c5:	6a 0c                	push   0xc
c00011c7:	6a 03                	push   0x3
c00011c9:	56                   	push   esi
c00011ca:	6a 00                	push   0x0
c00011cc:	e8 24 53 01 00       	call   c00164f5 <mmap>
c00011d1:	83 c4 20             	add    esp,0x20
c00011d4:	89 c7                	mov    edi,eax
c00011d6:	83 f8 ff             	cmp    eax,0xffffffff
c00011d9:	74 dd                	je     c00011b8 <sYSMALLOc+0x19b>
c00011db:	8d 04 30             	lea    eax,[eax+esi*1]
c00011de:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00011e5:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c00011eb:	01 f5                	add    ebp,esi
c00011ed:	83 f8 ff             	cmp    eax,0xffffffff
c00011f0:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00011f6:	75 73                	jne    c000126b <sYSMALLOc+0x24e>
c00011f8:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00011fc:	75 6d                	jne    c000126b <sYSMALLOc+0x24e>
c00011fe:	03 34 24             	add    esi,DWORD PTR [esp]
c0001201:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001205:	83 ce 01             	or     esi,0x1
c0001208:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000120b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001211:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001217:	73 06                	jae    c000121f <sYSMALLOc+0x202>
c0001219:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000121f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001225:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000122b:	73 06                	jae    c0001233 <sYSMALLOc+0x216>
c000122d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001233:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001236:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001239:	83 e2 fc             	and    edx,0xfffffffc
c000123c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001240:	0f 82 72 ff ff ff    	jb     c00011b8 <sYSMALLOc+0x19b>
c0001246:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000124a:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c000124e:	01 c1                	add    ecx,eax
c0001250:	83 ca 01             	or     edx,0x1
c0001253:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001256:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000125a:	83 cb 01             	or     ebx,0x1
c000125d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001260:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001263:	83 c0 08             	add    eax,0x8
c0001266:	e9 5d 01 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000126b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0001271:	89 d1                	mov    ecx,edx
c0001273:	83 e1 01             	and    ecx,0x1
c0001276:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000127a:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c000127f:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c0001283:	74 14                	je     c0001299 <sYSMALLOc+0x27c>
c0001285:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001289:	76 0e                	jbe    c0001299 <sYSMALLOc+0x27c>
c000128b:	83 e2 fe             	and    edx,0xfffffffe
c000128e:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001294:	e9 89 00 00 00       	jmp    c0001322 <sYSMALLOc+0x305>
c0001299:	85 c9                	test   ecx,ecx
c000129b:	0f 84 81 00 00 00    	je     c0001322 <sYSMALLOc+0x305>
c00012a1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00012a5:	74 0e                	je     c00012b5 <sYSMALLOc+0x298>
c00012a7:	89 f8                	mov    eax,edi
c00012a9:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00012ad:	01 c5                	add    ebp,eax
c00012af:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00012b5:	89 fa                	mov    edx,edi
c00012b7:	83 e2 07             	and    edx,0x7
c00012ba:	74 0c                	je     c00012c8 <sYSMALLOc+0x2ab>
c00012bc:	b8 08 00 00 00       	mov    eax,0x8
c00012c1:	29 d0                	sub    eax,edx
c00012c3:	8d 14 07             	lea    edx,[edi+eax*1]
c00012c6:	eb 04                	jmp    c00012cc <sYSMALLOc+0x2af>
c00012c8:	89 fa                	mov    edx,edi
c00012ca:	31 c0                	xor    eax,eax
c00012cc:	03 04 24             	add    eax,DWORD PTR [esp]
c00012cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00012d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00012d7:	8d 0c 06             	lea    ecx,[esi+eax*1]
c00012da:	83 ec 0c             	sub    esp,0xc
c00012dd:	01 f9                	add    ecx,edi
c00012df:	01 cd                	add    ebp,ecx
c00012e1:	29 c8                	sub    eax,ecx
c00012e3:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c00012e7:	01 c5                	add    ebp,eax
c00012e9:	55                   	push   ebp
c00012ea:	e8 d0 51 01 00       	call   c00164bf <sbrk_thunk>
c00012ef:	83 c4 10             	add    esp,0x10
c00012f2:	83 f8 ff             	cmp    eax,0xffffffff
c00012f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00012f9:	75 17                	jne    c0001312 <sYSMALLOc+0x2f5>
c00012fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00012ff:	83 ec 0c             	sub    esp,0xc
c0001302:	6a 00                	push   0x0
c0001304:	e8 b6 51 01 00       	call   c00164bf <sbrk_thunk>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001310:	eb 32                	jmp    c0001344 <sYSMALLOc+0x327>
c0001312:	39 f8                	cmp    eax,edi
c0001314:	73 39                	jae    c000134f <sYSMALLOc+0x332>
c0001316:	8d 04 37             	lea    eax,[edi+esi*1]
c0001319:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001320:	eb 22                	jmp    c0001344 <sYSMALLOc+0x327>
c0001322:	89 fa                	mov    edx,edi
c0001324:	83 f8 ff             	cmp    eax,0xffffffff
c0001327:	75 24                	jne    c000134d <sYSMALLOc+0x330>
c0001329:	83 ec 0c             	sub    esp,0xc
c000132c:	6a 00                	push   0x0
c000132e:	e8 8c 51 01 00       	call   c00164bf <sbrk_thunk>
c0001333:	83 c4 10             	add    esp,0x10
c0001336:	89 c2                	mov    edx,eax
c0001338:	29 fa                	sub    edx,edi
c000133a:	29 f2                	sub    edx,esi
c000133c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001342:	89 fa                	mov    edx,edi
c0001344:	83 f8 ff             	cmp    eax,0xffffffff
c0001347:	0f 84 be fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000134d:	31 ed                	xor    ebp,ebp
c000134f:	29 d0                	sub    eax,edx
c0001351:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0001354:	01 e8                	add    eax,ebp
c0001356:	83 c8 01             	or     eax,0x1
c0001359:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000135c:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c0001362:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0001366:	0f 84 9f fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000136c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001370:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0001373:	83 ee 0c             	sub    esi,0xc
c0001376:	83 e6 f8             	and    esi,0xfffffff8
c0001379:	89 f0                	mov    eax,esi
c000137b:	83 c8 01             	or     eax,0x1
c000137e:	83 fe 0f             	cmp    esi,0xf
c0001381:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001384:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000138c:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001394:	0f 86 71 fe ff ff    	jbe    c000120b <sYSMALLOc+0x1ee>
c000139a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00013a0:	83 ec 0c             	sub    esp,0xc
c00013a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00013ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00013b1:	83 c0 08             	add    eax,0x8
c00013b4:	50                   	push   eax
c00013b5:	e8 4f fb ff ff       	call   c0000f09 <dlfree>
c00013ba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00013c0:	83 c4 10             	add    esp,0x10
c00013c3:	e9 43 fe ff ff       	jmp    c000120b <sYSMALLOc+0x1ee>
c00013c8:	83 c4 2c             	add    esp,0x2c
c00013cb:	5b                   	pop    ebx
c00013cc:	5e                   	pop    esi
c00013cd:	5f                   	pop    edi
c00013ce:	5d                   	pop    ebp
c00013cf:	c3                   	ret    

c00013d0 <dlmalloc>:
c00013d0:	55                   	push   ebp
c00013d1:	57                   	push   edi
c00013d2:	56                   	push   esi
c00013d3:	53                   	push   ebx
c00013d4:	83 ec 1c             	sub    esp,0x1c
c00013d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00013db:	83 f8 df             	cmp    eax,0xffffffdf
c00013de:	0f 87 70 03 00 00    	ja     c0001754 <dlmalloc+0x384>
c00013e4:	83 c0 0b             	add    eax,0xb
c00013e7:	be 10 00 00 00       	mov    esi,0x10
c00013ec:	83 f8 0f             	cmp    eax,0xf
c00013ef:	76 05                	jbe    c00013f6 <dlmalloc+0x26>
c00013f1:	83 e0 f8             	and    eax,0xfffffff8
c00013f4:	89 c6                	mov    esi,eax
c00013f6:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c00013fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0001402:	75 17                	jne    c000141b <dlmalloc+0x4b>
c0001404:	85 ff                	test   edi,edi
c0001406:	0f 85 05 03 00 00    	jne    c0001711 <dlmalloc+0x341>
c000140c:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001411:	e8 0c fa ff ff       	call   c0000e22 <malloc_consolidate>
c0001416:	e9 f6 02 00 00       	jmp    c0001711 <dlmalloc+0x341>
c000141b:	39 f7                	cmp    edi,esi
c000141d:	72 1f                	jb     c000143e <dlmalloc+0x6e>
c000141f:	89 f2                	mov    edx,esi
c0001421:	c1 ea 03             	shr    edx,0x3
c0001424:	83 ea 02             	sub    edx,0x2
c0001427:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c000142e:	85 c0                	test   eax,eax
c0001430:	74 0c                	je     c000143e <dlmalloc+0x6e>
c0001432:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001435:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c000143c:	eb 30                	jmp    c000146e <dlmalloc+0x9e>
c000143e:	89 f0                	mov    eax,esi
c0001440:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001446:	77 2e                	ja     c0001476 <dlmalloc+0xa6>
c0001448:	c1 e8 03             	shr    eax,0x3
c000144b:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001452:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001456:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001459:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000145c:	39 c3                	cmp    ebx,eax
c000145e:	74 2e                	je     c000148e <dlmalloc+0xbe>
c0001460:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001463:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001468:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000146b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000146e:	83 c0 08             	add    eax,0x8
c0001471:	e9 e0 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001476:	e8 23 f9 ff ff       	call   c0000d9e <largebin_index>
c000147b:	83 e7 02             	and    edi,0x2
c000147e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001482:	74 0a                	je     c000148e <dlmalloc+0xbe>
c0001484:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001489:	e8 94 f9 ff ff       	call   c0000e22 <malloc_consolidate>
c000148e:	8d 46 10             	lea    eax,[esi+0x10]
c0001491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001495:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c000149b:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c00014a1:	0f 84 13 01 00 00    	je     c00015ba <dlmalloc+0x1ea>
c00014a7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00014aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ad:	83 e7 fc             	and    edi,0xfffffffc
c00014b0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014b6:	77 4c                	ja     c0001504 <dlmalloc+0x134>
c00014b8:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c00014bd:	75 45                	jne    c0001504 <dlmalloc+0x134>
c00014bf:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c00014c5:	75 3d                	jne    c0001504 <dlmalloc+0x134>
c00014c7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00014cb:	73 37                	jae    c0001504 <dlmalloc+0x134>
c00014cd:	8d 04 33             	lea    eax,[ebx+esi*1]
c00014d0:	89 fa                	mov    edx,edi
c00014d2:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00014d7:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00014dc:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00014e1:	29 f2                	sub    edx,esi
c00014e3:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00014ea:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c00014f1:	83 ce 01             	or     esi,0x1
c00014f4:	89 d1                	mov    ecx,edx
c00014f6:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00014f9:	83 c9 01             	or     ecx,0x1
c00014fc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00014ff:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001502:	eb 15                	jmp    c0001519 <dlmalloc+0x149>
c0001504:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001509:	39 fe                	cmp    esi,edi
c000150b:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001512:	75 0d                	jne    c0001521 <dlmalloc+0x151>
c0001514:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001519:	8d 43 08             	lea    eax,[ebx+0x8]
c000151c:	e9 35 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001521:	89 f8                	mov    eax,edi
c0001523:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001529:	77 19                	ja     c0001544 <dlmalloc+0x174>
c000152b:	c1 e8 03             	shr    eax,0x3
c000152e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001531:	83 c2 0d             	add    edx,0xd
c0001534:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c000153b:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001542:	eb 46                	jmp    c000158a <dlmalloc+0x1ba>
c0001544:	e8 55 f8 ff ff       	call   c0000d9e <largebin_index>
c0001549:	8d 14 00             	lea    edx,[eax+eax*1]
c000154c:	83 c2 0d             	add    edx,0xd
c000154f:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001556:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000155d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001560:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001564:	89 d5                	mov    ebp,edx
c0001566:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000156a:	74 1e                	je     c000158a <dlmalloc+0x1ba>
c000156c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000156f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001572:	77 12                	ja     c0001586 <dlmalloc+0x1b6>
c0001574:	83 cf 01             	or     edi,0x1
c0001577:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000157a:	76 05                	jbe    c0001581 <dlmalloc+0x1b1>
c000157c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000157f:	eb f6                	jmp    c0001577 <dlmalloc+0x1a7>
c0001581:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001584:	eb 04                	jmp    c000158a <dlmalloc+0x1ba>
c0001586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000158a:	89 c7                	mov    edi,eax
c000158c:	88 c1                	mov    cl,al
c000158e:	c1 ff 05             	sar    edi,0x5
c0001591:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001595:	bf 01 00 00 00       	mov    edi,0x1
c000159a:	d3 e7                	shl    edi,cl
c000159c:	89 f8                	mov    eax,edi
c000159e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00015a2:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c00015a9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00015ac:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00015af:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00015b2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00015b5:	e9 db fe ff ff       	jmp    c0001495 <dlmalloc+0xc5>
c00015ba:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015c0:	76 78                	jbe    c000163a <dlmalloc+0x26a>
c00015c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00015c6:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00015cd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00015d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015d3:	39 ca                	cmp    edx,ecx
c00015d5:	74 63                	je     c000163a <dlmalloc+0x26a>
c00015d7:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00015da:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015dd:	83 e3 fc             	and    ebx,0xfffffffc
c00015e0:	39 de                	cmp    esi,ebx
c00015e2:	77 52                	ja     c0001636 <dlmalloc+0x266>
c00015e4:	89 df                	mov    edi,ebx
c00015e6:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00015e9:	29 f7                	sub    edi,esi
c00015eb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00015ee:	01 d3                	add    ebx,edx
c00015f0:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00015f3:	83 ff 0f             	cmp    edi,0xf
c00015f6:	8d 42 08             	lea    eax,[edx+0x8]
c00015f9:	77 09                	ja     c0001604 <dlmalloc+0x234>
c00015fb:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00015ff:	e9 52 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001604:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001607:	83 ce 01             	or     esi,0x1
c000160a:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c0001610:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c0001616:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c000161d:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c0001624:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001627:	89 fa                	mov    edx,edi
c0001629:	83 ca 01             	or     edx,0x1
c000162c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000162f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001631:	e9 20 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001636:	89 c2                	mov    edx,eax
c0001638:	eb 99                	jmp    c00015d3 <dlmalloc+0x203>
c000163a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000163e:	b8 01 00 00 00       	mov    eax,0x1
c0001643:	41                   	inc    ecx
c0001644:	89 cb                	mov    ebx,ecx
c0001646:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c000164d:	c1 eb 05             	shr    ebx,0x5
c0001650:	d3 e0                	shl    eax,cl
c0001652:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001659:	39 f8                	cmp    eax,edi
c000165b:	77 04                	ja     c0001661 <dlmalloc+0x291>
c000165d:	85 c0                	test   eax,eax
c000165f:	75 26                	jne    c0001687 <dlmalloc+0x2b7>
c0001661:	43                   	inc    ebx
c0001662:	83 fb 02             	cmp    ebx,0x2
c0001665:	0f 87 a6 00 00 00    	ja     c0001711 <dlmalloc+0x341>
c000166b:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001672:	85 ff                	test   edi,edi
c0001674:	74 eb                	je     c0001661 <dlmalloc+0x291>
c0001676:	89 d8                	mov    eax,ebx
c0001678:	c1 e0 06             	shl    eax,0x6
c000167b:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001682:	b8 01 00 00 00       	mov    eax,0x1
c0001687:	85 f8                	test   eax,edi
c0001689:	75 07                	jne    c0001692 <dlmalloc+0x2c2>
c000168b:	83 c2 08             	add    edx,0x8
c000168e:	01 c0                	add    eax,eax
c0001690:	eb f5                	jmp    c0001687 <dlmalloc+0x2b7>
c0001692:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001695:	39 ca                	cmp    edx,ecx
c0001697:	75 14                	jne    c00016ad <dlmalloc+0x2dd>
c0001699:	89 c1                	mov    ecx,eax
c000169b:	83 c2 08             	add    edx,0x8
c000169e:	f7 d1                	not    ecx
c00016a0:	01 c0                	add    eax,eax
c00016a2:	21 cf                	and    edi,ecx
c00016a4:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c00016ab:	eb ac                	jmp    c0001659 <dlmalloc+0x289>
c00016ad:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00016b0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00016b3:	83 e0 fc             	and    eax,0xfffffffc
c00016b6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00016b9:	89 c3                	mov    ebx,eax
c00016bb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00016be:	29 f3                	sub    ebx,esi
c00016c0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00016c3:	83 fb 0f             	cmp    ebx,0xf
c00016c6:	8d 41 08             	lea    eax,[ecx+0x8]
c00016c9:	77 09                	ja     c00016d4 <dlmalloc+0x304>
c00016cb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00016cf:	e9 82 00 00 00       	jmp    c0001756 <dlmalloc+0x386>
c00016d4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00016d7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00016dd:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00016e3:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00016e9:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00016f0:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c00016f7:	77 06                	ja     c00016ff <dlmalloc+0x32f>
c00016f9:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c00016ff:	83 ce 01             	or     esi,0x1
c0001702:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001705:	89 d9                	mov    ecx,ebx
c0001707:	83 c9 01             	or     ecx,0x1
c000170a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000170d:	89 1a                	mov    DWORD PTR [edx],ebx
c000170f:	eb 45                	jmp    c0001756 <dlmalloc+0x386>
c0001711:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001716:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001719:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000171c:	83 e2 fc             	and    edx,0xfffffffc
c000171f:	39 d1                	cmp    ecx,edx
c0001721:	77 1e                	ja     c0001741 <dlmalloc+0x371>
c0001723:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c000172e:	83 cb 01             	or     ebx,0x1
c0001731:	29 f2                	sub    edx,esi
c0001733:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001736:	83 ca 01             	or     edx,0x1
c0001739:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000173c:	e9 2d fd ff ff       	jmp    c000146e <dlmalloc+0x9e>
c0001741:	83 c4 1c             	add    esp,0x1c
c0001744:	89 f0                	mov    eax,esi
c0001746:	5b                   	pop    ebx
c0001747:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c000174c:	5e                   	pop    esi
c000174d:	5f                   	pop    edi
c000174e:	5d                   	pop    ebp
c000174f:	e9 c9 f8 ff ff       	jmp    c000101d <sYSMALLOc>
c0001754:	31 c0                	xor    eax,eax
c0001756:	83 c4 1c             	add    esp,0x1c
c0001759:	5b                   	pop    ebx
c000175a:	5e                   	pop    esi
c000175b:	5f                   	pop    edi
c000175c:	5d                   	pop    ebp
c000175d:	c3                   	ret    

c000175e <iALLOc>:
c000175e:	55                   	push   ebp
c000175f:	89 c5                	mov    ebp,eax
c0001761:	57                   	push   edi
c0001762:	56                   	push   esi
c0001763:	53                   	push   ebx
c0001764:	83 ec 2c             	sub    esp,0x2c
c0001767:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000176b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000176f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001773:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000177a:	75 12                	jne    c000178e <iALLOc+0x30>
c000177c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001780:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001785:	e8 98 f6 ff ff       	call   c0000e22 <malloc_consolidate>
c000178a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000178e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001793:	74 12                	je     c00017a7 <iALLOc+0x49>
c0001795:	85 ed                	test   ebp,ebp
c0001797:	0f 84 64 01 00 00    	je     c0001901 <iALLOc+0x1a3>
c000179d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00017a5:	eb 33                	jmp    c00017da <iALLOc+0x7c>
c00017a7:	85 ed                	test   ebp,ebp
c00017a9:	75 14                	jne    c00017bf <iALLOc+0x61>
c00017ab:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00017b3:	83 c4 2c             	add    esp,0x2c
c00017b6:	5b                   	pop    ebx
c00017b7:	5e                   	pop    esi
c00017b8:	5f                   	pop    edi
c00017b9:	5d                   	pop    ebp
c00017ba:	e9 11 fc ff ff       	jmp    c00013d0 <dlmalloc>
c00017bf:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00017c6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00017ce:	83 f8 0f             	cmp    eax,0xf
c00017d1:	76 07                	jbe    c00017da <iALLOc+0x7c>
c00017d3:	83 e0 f8             	and    eax,0xfffffff8
c00017d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00017da:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00017df:	75 09                	jne    c00017ea <iALLOc+0x8c>
c00017e1:	89 d0                	mov    eax,edx
c00017e3:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00017e6:	31 f6                	xor    esi,esi
c00017e8:	eb 3b                	jmp    c0001825 <iALLOc+0xc7>
c00017ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00017ec:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00017f4:	83 c0 0b             	add    eax,0xb
c00017f7:	83 f8 0f             	cmp    eax,0xf
c00017fa:	76 07                	jbe    c0001803 <iALLOc+0xa5>
c00017fc:	83 e0 f8             	and    eax,0xfffffff8
c00017ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001807:	0f af f5             	imul   esi,ebp
c000180a:	eb 25                	jmp    c0001831 <iALLOc+0xd3>
c000180c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000180e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001811:	bb 10 00 00 00       	mov    ebx,0x10
c0001816:	83 f9 0f             	cmp    ecx,0xf
c0001819:	76 05                	jbe    c0001820 <iALLOc+0xc2>
c000181b:	83 e1 f8             	and    ecx,0xfffffff8
c000181e:	89 cb                	mov    ebx,ecx
c0001820:	01 de                	add    esi,ebx
c0001822:	83 c0 04             	add    eax,0x4
c0001825:	39 c7                	cmp    edi,eax
c0001827:	75 e3                	jne    c000180c <iALLOc+0xae>
c0001829:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001831:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001835:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c000183b:	83 ec 0c             	sub    esp,0xc
c000183e:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000184c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001850:	50                   	push   eax
c0001851:	e8 7a fb ff ff       	call   c00013d0 <dlmalloc>
c0001856:	83 c4 10             	add    esp,0x10
c0001859:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000185f:	85 c0                	test   eax,eax
c0001861:	0f 84 92 00 00 00    	je     c00018f9 <iALLOc+0x19b>
c0001867:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000186a:	8d 78 f8             	lea    edi,[eax-0x8]
c000186d:	83 e3 fc             	and    ebx,0xfffffffc
c0001870:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001874:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001879:	74 1e                	je     c0001899 <iALLOc+0x13b>
c000187b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000187f:	89 d9                	mov    ecx,ebx
c0001881:	52                   	push   edx
c0001882:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001886:	83 e9 04             	sub    ecx,0x4
c0001889:	51                   	push   ecx
c000188a:	6a 00                	push   0x0
c000188c:	50                   	push   eax
c000188d:	e8 5e ec ff ff       	call   c00004f0 <memset>
c0001892:	83 c4 10             	add    esp,0x10
c0001895:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001899:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000189e:	75 14                	jne    c00018b4 <iALLOc+0x156>
c00018a0:	8d 04 37             	lea    eax,[edi+esi*1]
c00018a3:	29 f3                	sub    ebx,esi
c00018a5:	8d 48 08             	lea    ecx,[eax+0x8]
c00018a8:	83 cb 01             	or     ebx,0x1
c00018ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00018af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00018b2:	89 f3                	mov    ebx,esi
c00018b4:	31 c0                	xor    eax,eax
c00018b6:	4d                   	dec    ebp
c00018b7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	39 c5                	cmp    ebp,eax
c00018c0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00018c3:	74 2c                	je     c00018f1 <iALLOc+0x193>
c00018c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00018c9:	85 c9                	test   ecx,ecx
c00018cb:	75 15                	jne    c00018e2 <iALLOc+0x184>
c00018cd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00018d0:	8d 71 0b             	lea    esi,[ecx+0xb]
c00018d3:	b9 10 00 00 00       	mov    ecx,0x10
c00018d8:	83 fe 0f             	cmp    esi,0xf
c00018db:	76 05                	jbe    c00018e2 <iALLOc+0x184>
c00018dd:	83 e6 f8             	and    esi,0xfffffff8
c00018e0:	89 f1                	mov    ecx,esi
c00018e2:	89 ce                	mov    esi,ecx
c00018e4:	29 cb                	sub    ebx,ecx
c00018e6:	83 ce 01             	or     esi,0x1
c00018e9:	40                   	inc    eax
c00018ea:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00018ed:	01 cf                	add    edi,ecx
c00018ef:	eb c6                	jmp    c00018b7 <iALLOc+0x159>
c00018f1:	83 cb 01             	or     ebx,0x1
c00018f4:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00018f7:	eb 08                	jmp    c0001901 <iALLOc+0x1a3>
c00018f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001905:	83 c4 2c             	add    esp,0x2c
c0001908:	5b                   	pop    ebx
c0001909:	5e                   	pop    esi
c000190a:	5f                   	pop    edi
c000190b:	5d                   	pop    ebp
c000190c:	c3                   	ret    

c000190d <dlrealloc>:
c000190d:	55                   	push   ebp
c000190e:	57                   	push   edi
c000190f:	56                   	push   esi
c0001910:	53                   	push   ebx
c0001911:	83 ec 1c             	sub    esp,0x1c
c0001914:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000191c:	85 db                	test   ebx,ebx
c000191e:	75 10                	jne    c0001930 <dlrealloc+0x23>
c0001920:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001924:	83 c4 1c             	add    esp,0x1c
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	e9 a0 fa ff ff       	jmp    c00013d0 <dlmalloc>
c0001930:	83 f8 df             	cmp    eax,0xffffffdf
c0001933:	0f 87 a5 01 00 00    	ja     c0001ade <dlrealloc+0x1d1>
c0001939:	83 c0 0b             	add    eax,0xb
c000193c:	bd 10 00 00 00       	mov    ebp,0x10
c0001941:	83 f8 0f             	cmp    eax,0xf
c0001944:	76 05                	jbe    c000194b <dlrealloc+0x3e>
c0001946:	83 e0 f8             	and    eax,0xfffffff8
c0001949:	89 c5                	mov    ebp,eax
c000194b:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000194e:	89 c6                	mov    esi,eax
c0001950:	83 e6 fc             	and    esi,0xfffffffc
c0001953:	a8 02                	test   al,0x2
c0001955:	0f 85 4e 01 00 00    	jne    c0001aa9 <dlrealloc+0x19c>
c000195b:	8d 7b f8             	lea    edi,[ebx-0x8]
c000195e:	39 f5                	cmp    ebp,esi
c0001960:	0f 86 04 01 00 00    	jbe    c0001a6a <dlrealloc+0x15d>
c0001966:	8d 14 37             	lea    edx,[edi+esi*1]
c0001969:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000196c:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001972:	75 33                	jne    c00019a7 <dlrealloc+0x9a>
c0001974:	83 e1 fc             	and    ecx,0xfffffffc
c0001977:	01 f1                	add    ecx,esi
c0001979:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000197d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001980:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001984:	77 49                	ja     c00019cf <dlrealloc+0xc2>
c0001986:	01 ef                	add    edi,ebp
c0001988:	83 e0 01             	and    eax,0x1
c000198b:	09 e8                	or     eax,ebp
c000198d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001990:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000199a:	29 e8                	sub    eax,ebp
c000199c:	83 c8 01             	or     eax,0x1
c000199f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00019a2:	e9 39 01 00 00       	jmp    c0001ae0 <dlrealloc+0x1d3>
c00019a7:	89 c8                	mov    eax,ecx
c00019a9:	83 e0 fe             	and    eax,0xfffffffe
c00019ac:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00019b1:	75 1c                	jne    c00019cf <dlrealloc+0xc2>
c00019b3:	83 e1 fc             	and    ecx,0xfffffffc
c00019b6:	01 f1                	add    ecx,esi
c00019b8:	39 cd                	cmp    ebp,ecx
c00019ba:	77 13                	ja     c00019cf <dlrealloc+0xc2>
c00019bc:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00019bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00019c2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00019c5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00019c8:	89 ce                	mov    esi,ecx
c00019ca:	e9 9b 00 00 00       	jmp    c0001a6a <dlrealloc+0x15d>
c00019cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00019d3:	8d 45 f9             	lea    eax,[ebp-0x7]
c00019d6:	83 ec 0c             	sub    esp,0xc
c00019d9:	50                   	push   eax
c00019da:	e8 f1 f9 ff ff       	call   c00013d0 <dlmalloc>
c00019df:	83 c4 10             	add    esp,0x10
c00019e2:	85 c0                	test   eax,eax
c00019e4:	0f 84 f4 00 00 00    	je     c0001ade <dlrealloc+0x1d1>
c00019ea:	8d 48 f8             	lea    ecx,[eax-0x8]
c00019ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f1:	39 ca                	cmp    edx,ecx
c00019f3:	75 0a                	jne    c00019ff <dlrealloc+0xf2>
c00019f5:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00019f8:	83 e0 fc             	and    eax,0xfffffffc
c00019fb:	01 c6                	add    esi,eax
c00019fd:	eb 6b                	jmp    c0001a6a <dlrealloc+0x15d>
c00019ff:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001a02:	83 f9 27             	cmp    ecx,0x27
c0001a05:	76 08                	jbe    c0001a0f <dlrealloc+0x102>
c0001a07:	89 de                	mov    esi,ebx
c0001a09:	89 c7                	mov    edi,eax
c0001a0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0d:	eb 43                	jmp    c0001a52 <dlrealloc+0x145>
c0001a0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001a11:	83 f9 13             	cmp    ecx,0x13
c0001a14:	89 10                	mov    DWORD PTR [eax],edx
c0001a16:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001a19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001a1c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001a1f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001a22:	76 2e                	jbe    c0001a52 <dlrealloc+0x145>
c0001a24:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001a27:	83 f9 1b             	cmp    ecx,0x1b
c0001a2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001a2d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001a30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001a33:	76 1d                	jbe    c0001a52 <dlrealloc+0x145>
c0001a35:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001a38:	83 f9 23             	cmp    ecx,0x23
c0001a3b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001a3e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001a41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001a44:	76 0c                	jbe    c0001a52 <dlrealloc+0x145>
c0001a46:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001a49:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001a4c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001a4f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001a52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001a56:	83 ec 0c             	sub    esp,0xc
c0001a59:	53                   	push   ebx
c0001a5a:	e8 aa f4 ff ff       	call   c0000f09 <dlfree>
c0001a5f:	83 c4 10             	add    esp,0x10
c0001a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001a66:	89 c3                	mov    ebx,eax
c0001a68:	eb 76                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a6a:	89 f2                	mov    edx,esi
c0001a6c:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001a6f:	29 ea                	sub    edx,ebp
c0001a71:	83 e1 01             	and    ecx,0x1
c0001a74:	8d 04 37             	lea    eax,[edi+esi*1]
c0001a77:	83 fa 0f             	cmp    edx,0xf
c0001a7a:	77 0b                	ja     c0001a87 <dlrealloc+0x17a>
c0001a7c:	09 f1                	or     ecx,esi
c0001a7e:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001a81:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a85:	eb 59                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a87:	01 ef                	add    edi,ebp
c0001a89:	83 ec 0c             	sub    esp,0xc
c0001a8c:	09 cd                	or     ebp,ecx
c0001a8e:	83 ca 01             	or     edx,0x1
c0001a91:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001a94:	83 c7 08             	add    edi,0x8
c0001a97:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001a9a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a9e:	57                   	push   edi
c0001a9f:	e8 65 f4 ff ff       	call   c0000f09 <dlfree>
c0001aa4:	83 c4 10             	add    esp,0x10
c0001aa7:	eb 37                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001aa9:	8d 45 04             	lea    eax,[ebp+0x4]
c0001aac:	39 f0                	cmp    eax,esi
c0001aae:	76 30                	jbe    c0001ae0 <dlrealloc+0x1d3>
c0001ab0:	83 ec 0c             	sub    esp,0xc
c0001ab3:	83 ed 07             	sub    ebp,0x7
c0001ab6:	55                   	push   ebp
c0001ab7:	e8 14 f9 ff ff       	call   c00013d0 <dlmalloc>
c0001abc:	83 c4 10             	add    esp,0x10
c0001abf:	89 c5                	mov    ebp,eax
c0001ac1:	85 c0                	test   eax,eax
c0001ac3:	74 19                	je     c0001ade <dlrealloc+0x1d1>
c0001ac5:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001ac8:	89 c7                	mov    edi,eax
c0001aca:	89 de                	mov    esi,ebx
c0001acc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ace:	83 ec 0c             	sub    esp,0xc
c0001ad1:	53                   	push   ebx
c0001ad2:	89 eb                	mov    ebx,ebp
c0001ad4:	e8 30 f4 ff ff       	call   c0000f09 <dlfree>
c0001ad9:	83 c4 10             	add    esp,0x10
c0001adc:	eb 02                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001ade:	31 db                	xor    ebx,ebx
c0001ae0:	83 c4 1c             	add    esp,0x1c
c0001ae3:	89 d8                	mov    eax,ebx
c0001ae5:	5b                   	pop    ebx
c0001ae6:	5e                   	pop    esi
c0001ae7:	5f                   	pop    edi
c0001ae8:	5d                   	pop    ebp
c0001ae9:	c3                   	ret    

c0001aea <dlmemalign>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 0c             	sub    esp,0xc
c0001af1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001af9:	83 fa 08             	cmp    edx,0x8
c0001afc:	77 10                	ja     c0001b0e <dlmemalign+0x24>
c0001afe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001b02:	83 c4 0c             	add    esp,0xc
c0001b05:	5b                   	pop    ebx
c0001b06:	5e                   	pop    esi
c0001b07:	5f                   	pop    edi
c0001b08:	5d                   	pop    ebp
c0001b09:	e9 c2 f8 ff ff       	jmp    c00013d0 <dlmalloc>
c0001b0e:	bf 10 00 00 00       	mov    edi,0x10
c0001b13:	83 fa 0f             	cmp    edx,0xf
c0001b16:	76 13                	jbe    c0001b2b <dlmemalign+0x41>
c0001b18:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001b1b:	85 d1                	test   ecx,edx
c0001b1d:	75 04                	jne    c0001b23 <dlmemalign+0x39>
c0001b1f:	89 d7                	mov    edi,edx
c0001b21:	eb 08                	jmp    c0001b2b <dlmemalign+0x41>
c0001b23:	39 d7                	cmp    edi,edx
c0001b25:	73 04                	jae    c0001b2b <dlmemalign+0x41>
c0001b27:	01 ff                	add    edi,edi
c0001b29:	eb f8                	jmp    c0001b23 <dlmemalign+0x39>
c0001b2b:	83 f8 df             	cmp    eax,0xffffffdf
c0001b2e:	76 07                	jbe    c0001b37 <dlmemalign+0x4d>
c0001b30:	31 c0                	xor    eax,eax
c0001b32:	e9 ce 00 00 00       	jmp    c0001c05 <dlmemalign+0x11b>
c0001b37:	83 c0 0b             	add    eax,0xb
c0001b3a:	bd 10 00 00 00       	mov    ebp,0x10
c0001b3f:	83 f8 0f             	cmp    eax,0xf
c0001b42:	76 05                	jbe    c0001b49 <dlmemalign+0x5f>
c0001b44:	83 e0 f8             	and    eax,0xfffffff8
c0001b47:	89 c5                	mov    ebp,eax
c0001b49:	83 ec 0c             	sub    esp,0xc
c0001b4c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001b50:	50                   	push   eax
c0001b51:	e8 7a f8 ff ff       	call   c00013d0 <dlmalloc>
c0001b56:	83 c4 10             	add    esp,0x10
c0001b59:	89 c1                	mov    ecx,eax
c0001b5b:	85 c0                	test   eax,eax
c0001b5d:	74 d1                	je     c0001b30 <dlmemalign+0x46>
c0001b5f:	31 d2                	xor    edx,edx
c0001b61:	8d 70 f8             	lea    esi,[eax-0x8]
c0001b64:	f7 f7                	div    edi
c0001b66:	85 d2                	test   edx,edx
c0001b68:	74 62                	je     c0001bcc <dlmemalign+0xe2>
c0001b6a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001b6e:	89 f8                	mov    eax,edi
c0001b70:	f7 d8                	neg    eax
c0001b72:	21 c3                	and    ebx,eax
c0001b74:	83 eb 08             	sub    ebx,0x8
c0001b77:	89 d8                	mov    eax,ebx
c0001b79:	29 f0                	sub    eax,esi
c0001b7b:	83 f8 0f             	cmp    eax,0xf
c0001b7e:	77 02                	ja     c0001b82 <dlmemalign+0x98>
c0001b80:	01 fb                	add    ebx,edi
c0001b82:	89 d8                	mov    eax,ebx
c0001b84:	29 f0                	sub    eax,esi
c0001b86:	89 c6                	mov    esi,eax
c0001b88:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001b8b:	89 c2                	mov    edx,eax
c0001b8d:	83 e2 fc             	and    edx,0xfffffffc
c0001b90:	29 f2                	sub    edx,esi
c0001b92:	a8 02                	test   al,0x2
c0001b94:	74 10                	je     c0001ba6 <dlmemalign+0xbc>
c0001b96:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001b99:	83 ca 02             	or     edx,0x2
c0001b9c:	8d 43 08             	lea    eax,[ebx+0x8]
c0001b9f:	89 33                	mov    DWORD PTR [ebx],esi
c0001ba1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001ba4:	eb 5f                	jmp    c0001c05 <dlmemalign+0x11b>
c0001ba6:	83 ec 0c             	sub    esp,0xc
c0001ba9:	89 d0                	mov    eax,edx
c0001bab:	83 c8 01             	or     eax,0x1
c0001bae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001bb1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001bb6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001bb9:	83 e0 01             	and    eax,0x1
c0001bbc:	09 f0                	or     eax,esi
c0001bbe:	89 de                	mov    esi,ebx
c0001bc0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001bc3:	51                   	push   ecx
c0001bc4:	e8 40 f3 ff ff       	call   c0000f09 <dlfree>
c0001bc9:	83 c4 10             	add    esp,0x10
c0001bcc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bcf:	a8 02                	test   al,0x2
c0001bd1:	75 2f                	jne    c0001c02 <dlmemalign+0x118>
c0001bd3:	83 e0 fc             	and    eax,0xfffffffc
c0001bd6:	8d 55 10             	lea    edx,[ebp+0x10]
c0001bd9:	39 c2                	cmp    edx,eax
c0001bdb:	73 25                	jae    c0001c02 <dlmemalign+0x118>
c0001bdd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001be0:	83 ec 0c             	sub    esp,0xc
c0001be3:	29 e8                	sub    eax,ebp
c0001be5:	83 c2 08             	add    edx,0x8
c0001be8:	83 c8 01             	or     eax,0x1
c0001beb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001bee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bf1:	83 e0 01             	and    eax,0x1
c0001bf4:	09 c5                	or     ebp,eax
c0001bf6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001bf9:	52                   	push   edx
c0001bfa:	e8 0a f3 ff ff       	call   c0000f09 <dlfree>
c0001bff:	83 c4 10             	add    esp,0x10
c0001c02:	8d 46 08             	lea    eax,[esi+0x8]
c0001c05:	83 c4 0c             	add    esp,0xc
c0001c08:	5b                   	pop    ebx
c0001c09:	5e                   	pop    esi
c0001c0a:	5f                   	pop    edi
c0001c0b:	5d                   	pop    ebp
c0001c0c:	c3                   	ret    

c0001c0d <dlcalloc>:
c0001c0d:	53                   	push   ebx
c0001c0e:	83 ec 14             	sub    esp,0x14
c0001c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001c15:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001c1a:	50                   	push   eax
c0001c1b:	e8 b0 f7 ff ff       	call   c00013d0 <dlmalloc>
c0001c20:	83 c4 10             	add    esp,0x10
c0001c23:	89 c3                	mov    ebx,eax
c0001c25:	85 c0                	test   eax,eax
c0001c27:	74 6e                	je     c0001c97 <dlcalloc+0x8a>
c0001c29:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001c2c:	a8 02                	test   al,0x2
c0001c2e:	75 67                	jne    c0001c97 <dlcalloc+0x8a>
c0001c30:	83 e0 fc             	and    eax,0xfffffffc
c0001c33:	83 e8 04             	sub    eax,0x4
c0001c36:	83 f8 27             	cmp    eax,0x27
c0001c39:	76 0f                	jbe    c0001c4a <dlcalloc+0x3d>
c0001c3b:	52                   	push   edx
c0001c3c:	50                   	push   eax
c0001c3d:	6a 00                	push   0x0
c0001c3f:	53                   	push   ebx
c0001c40:	e8 ab e8 ff ff       	call   c00004f0 <memset>
c0001c45:	83 c4 10             	add    esp,0x10
c0001c48:	eb 4d                	jmp    c0001c97 <dlcalloc+0x8a>
c0001c4a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001c50:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001c5e:	83 f8 13             	cmp    eax,0x13
c0001c61:	76 34                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c63:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001c6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001c71:	83 f8 1b             	cmp    eax,0x1b
c0001c74:	76 21                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001c7d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001c84:	83 f8 23             	cmp    eax,0x23
c0001c87:	76 0e                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c89:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001c90:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001c97:	89 d8                	mov    eax,ebx
c0001c99:	83 c4 08             	add    esp,0x8
c0001c9c:	5b                   	pop    ebx
c0001c9d:	c3                   	ret    

c0001c9e <dlcfree>:
c0001c9e:	e9 66 f2 ff ff       	jmp    c0000f09 <dlfree>

c0001ca3 <dlindependent_calloc>:
c0001ca3:	83 ec 28             	sub    esp,0x28
c0001ca6:	b9 03 00 00 00       	mov    ecx,0x3
c0001cab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001caf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001cb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001cb7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001cbf:	e8 9a fa ff ff       	call   c000175e <iALLOc>
c0001cc4:	83 c4 2c             	add    esp,0x2c
c0001cc7:	c3                   	ret    

c0001cc8 <dlindependent_comalloc>:
c0001cc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001cd0:	31 c9                	xor    ecx,ecx
c0001cd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001cd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001cda:	e9 7f fa ff ff       	jmp    c000175e <iALLOc>

c0001cdf <dlvalloc>:
c0001cdf:	83 ec 0c             	sub    esp,0xc
c0001ce2:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001ce9:	75 0a                	jne    c0001cf5 <dlvalloc+0x16>
c0001ceb:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001cf0:	e8 2d f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001cf5:	50                   	push   eax
c0001cf6:	50                   	push   eax
c0001cf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001cfb:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001d01:	e8 e4 fd ff ff       	call   c0001aea <dlmemalign>
c0001d06:	83 c4 1c             	add    esp,0x1c
c0001d09:	c3                   	ret    

c0001d0a <dlpvalloc>:
c0001d0a:	83 ec 0c             	sub    esp,0xc
c0001d0d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001d14:	75 0a                	jne    c0001d20 <dlpvalloc+0x16>
c0001d16:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d1b:	e8 02 f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d20:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001d25:	89 c1                	mov    ecx,eax
c0001d27:	52                   	push   edx
c0001d28:	f7 d9                	neg    ecx
c0001d2a:	52                   	push   edx
c0001d2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001d2f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001d33:	21 ca                	and    edx,ecx
c0001d35:	52                   	push   edx
c0001d36:	50                   	push   eax
c0001d37:	e8 ae fd ff ff       	call   c0001aea <dlmemalign>
c0001d3c:	83 c4 1c             	add    esp,0x1c
c0001d3f:	c3                   	ret    

c0001d40 <dlmalloc_trim>:
c0001d40:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d45:	e8 d8 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d4a:	31 c0                	xor    eax,eax
c0001d4c:	c3                   	ret    

c0001d4d <dlmalloc_usable_size>:
c0001d4d:	53                   	push   ebx
c0001d4e:	31 c0                	xor    eax,eax
c0001d50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001d54:	85 c9                	test   ecx,ecx
c0001d56:	74 24                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d58:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001d5b:	f6 c2 02             	test   dl,0x2
c0001d5e:	74 08                	je     c0001d68 <dlmalloc_usable_size+0x1b>
c0001d60:	83 e2 fc             	and    edx,0xfffffffc
c0001d63:	8d 42 f8             	lea    eax,[edx-0x8]
c0001d66:	eb 14                	jmp    c0001d7c <dlmalloc_usable_size+0x2f>
c0001d68:	89 d3                	mov    ebx,edx
c0001d6a:	31 c0                	xor    eax,eax
c0001d6c:	83 e3 fe             	and    ebx,0xfffffffe
c0001d6f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001d74:	74 06                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d76:	83 e2 fc             	and    edx,0xfffffffc
c0001d79:	8d 42 fc             	lea    eax,[edx-0x4]
c0001d7c:	5b                   	pop    ebx
c0001d7d:	c3                   	ret    

c0001d7e <dlmallinfo>:
c0001d7e:	55                   	push   ebp
c0001d7f:	57                   	push   edi
c0001d80:	56                   	push   esi
c0001d81:	53                   	push   ebx
c0001d82:	83 ec 08             	sub    esp,0x8
c0001d85:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001d89:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001d90:	75 0a                	jne    c0001d9c <dlmallinfo+0x1e>
c0001d92:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d97:	e8 86 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d9c:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001da1:	31 ed                	xor    ebp,ebp
c0001da3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001da6:	31 c9                	xor    ecx,ecx
c0001da8:	83 e0 fc             	and    eax,0xfffffffc
c0001dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001daf:	31 c0                	xor    eax,eax
c0001db1:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001db8:	85 d2                	test   edx,edx
c0001dba:	74 0e                	je     c0001dca <dlmallinfo+0x4c>
c0001dbc:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001dbf:	45                   	inc    ebp
c0001dc0:	83 e6 fc             	and    esi,0xfffffffc
c0001dc3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001dc6:	01 f1                	add    ecx,esi
c0001dc8:	eb ee                	jmp    c0001db8 <dlmallinfo+0x3a>
c0001dca:	40                   	inc    eax
c0001dcb:	83 f8 0a             	cmp    eax,0xa
c0001dce:	75 e1                	jne    c0001db1 <dlmallinfo+0x33>
c0001dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001dd4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ddb:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001dde:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001de3:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001de6:	39 f0                	cmp    eax,esi
c0001de8:	74 10                	je     c0001dfa <dlmallinfo+0x7c>
c0001dea:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ded:	ff 04 24             	inc    DWORD PTR [esp]
c0001df0:	83 e7 fc             	and    edi,0xfffffffc
c0001df3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001df6:	01 fa                	add    edx,edi
c0001df8:	eb ec                	jmp    c0001de6 <dlmallinfo+0x68>
c0001dfa:	83 c0 08             	add    eax,0x8
c0001dfd:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001e02:	75 df                	jne    c0001de3 <dlmallinfo+0x65>
c0001e04:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001e07:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001e0a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001e0d:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001e12:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001e15:	89 03                	mov    DWORD PTR [ebx],eax
c0001e17:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001e1a:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001e20:	29 d0                	sub    eax,edx
c0001e22:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001e25:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001e28:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e32:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001e35:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001e38:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001e3e:	89 d8                	mov    eax,ebx
c0001e40:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001e43:	83 c4 08             	add    esp,0x8
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	5d                   	pop    ebp
c0001e4a:	c2 04 00             	ret    0x4

c0001e4d <dlmalloc_stats>:
c0001e4d:	83 ec 30             	sub    esp,0x30
c0001e50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001e54:	50                   	push   eax
c0001e55:	e8 24 ff ff ff       	call   c0001d7e <dlmallinfo>
c0001e5a:	83 c4 30             	add    esp,0x30
c0001e5d:	c3                   	ret    

c0001e5e <dlmallopt>:
c0001e5e:	56                   	push   esi
c0001e5f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001e64:	53                   	push   ebx
c0001e65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001e69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001e6d:	e8 b0 ef ff ff       	call   c0000e22 <malloc_consolidate>
c0001e72:	8d 46 04             	lea    eax,[esi+0x4]
c0001e75:	83 f8 05             	cmp    eax,0x5
c0001e78:	77 5d                	ja     c0001ed7 <dlmallopt+0x79>
c0001e7a:	ff 24 85 40 f7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd08c0]
c0001e81:	83 fb 50             	cmp    ebx,0x50
c0001e84:	77 51                	ja     c0001ed7 <dlmallopt+0x79>
c0001e86:	ba 08 00 00 00       	mov    edx,0x8
c0001e8b:	85 db                	test   ebx,ebx
c0001e8d:	74 12                	je     c0001ea1 <dlmallopt+0x43>
c0001e8f:	83 c3 0b             	add    ebx,0xb
c0001e92:	ba 10 00 00 00       	mov    edx,0x10
c0001e97:	83 fb 0f             	cmp    ebx,0xf
c0001e9a:	76 05                	jbe    c0001ea1 <dlmallopt+0x43>
c0001e9c:	89 da                	mov    edx,ebx
c0001e9e:	83 e2 f8             	and    edx,0xfffffff8
c0001ea1:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001ea6:	83 e0 03             	and    eax,0x3
c0001ea9:	09 d0                	or     eax,edx
c0001eab:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001eb0:	eb 27                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001eb2:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001eb8:	eb 16                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eba:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001ec0:	eb 0e                	jmp    c0001ed0 <dlmallopt+0x72>
c0001ec2:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001ec8:	eb 06                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eca:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c0001ed0:	be 01 00 00 00       	mov    esi,0x1
c0001ed5:	eb 02                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001ed7:	31 f6                	xor    esi,esi
c0001ed9:	89 f0                	mov    eax,esi
c0001edb:	5b                   	pop    ebx
c0001edc:	5e                   	pop    esi
c0001edd:	c3                   	ret    
c0001ede:	66 90                	xchg   ax,ax

c0001ee0 <isblank>:
c0001ee0:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ee5:	74 09                	je     c0001ef0 <isblank+0x10>
c0001ee7:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001eec:	75 0a                	jne    c0001ef8 <isblank+0x18>
c0001eee:	66 90                	xchg   ax,ax
c0001ef0:	b8 01 00 00 00       	mov    eax,0x1
c0001ef5:	c3                   	ret    
c0001ef6:	66 90                	xchg   ax,ax
c0001ef8:	b8 00 00 00 00       	mov    eax,0x0
c0001efd:	c3                   	ret    
c0001efe:	66 90                	xchg   ax,ax

c0001f00 <iscntrl>:
c0001f00:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001f05:	7e 09                	jle    c0001f10 <iscntrl+0x10>
c0001f07:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001f0c:	75 0a                	jne    c0001f18 <iscntrl+0x18>
c0001f0e:	66 90                	xchg   ax,ax
c0001f10:	b8 01 00 00 00       	mov    eax,0x1
c0001f15:	c3                   	ret    
c0001f16:	66 90                	xchg   ax,ax
c0001f18:	b8 00 00 00 00       	mov    eax,0x0
c0001f1d:	c3                   	ret    
c0001f1e:	66 90                	xchg   ax,ax

c0001f20 <isdigit>:
c0001f20:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001f25:	7e 0d                	jle    c0001f34 <isdigit+0x14>
c0001f27:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001f2c:	7f 06                	jg     c0001f34 <isdigit+0x14>
c0001f2e:	b8 01 00 00 00       	mov    eax,0x1
c0001f33:	c3                   	ret    
c0001f34:	b8 00 00 00 00       	mov    eax,0x0
c0001f39:	c3                   	ret    
c0001f3a:	66 90                	xchg   ax,ax

c0001f3c <islower>:
c0001f3c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f41:	7e 0d                	jle    c0001f50 <islower+0x14>
c0001f43:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001f48:	7f 06                	jg     c0001f50 <islower+0x14>
c0001f4a:	b8 01 00 00 00       	mov    eax,0x1
c0001f4f:	c3                   	ret    
c0001f50:	b8 00 00 00 00       	mov    eax,0x0
c0001f55:	c3                   	ret    
c0001f56:	66 90                	xchg   ax,ax

c0001f58 <isspace>:
c0001f58:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f5d:	7c 19                	jl     c0001f78 <isspace+0x20>
c0001f5f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001f64:	7e 0a                	jle    c0001f70 <isspace+0x18>
c0001f66:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f6b:	75 0b                	jne    c0001f78 <isspace+0x20>
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0001f70:	b8 01 00 00 00       	mov    eax,0x1
c0001f75:	c3                   	ret    
c0001f76:	66 90                	xchg   ax,ax
c0001f78:	b8 00 00 00 00       	mov    eax,0x0
c0001f7d:	c3                   	ret    
c0001f7e:	66 90                	xchg   ax,ax

c0001f80 <isupper>:
c0001f80:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f85:	7e 0d                	jle    c0001f94 <isupper+0x14>
c0001f87:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001f8c:	7f 06                	jg     c0001f94 <isupper+0x14>
c0001f8e:	b8 01 00 00 00       	mov    eax,0x1
c0001f93:	c3                   	ret    
c0001f94:	b8 00 00 00 00       	mov    eax,0x0
c0001f99:	c3                   	ret    
c0001f9a:	66 90                	xchg   ax,ax

c0001f9c <isalpha>:
c0001f9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fa0:	e8 db ff ff ff       	call   c0001f80 <isupper>
c0001fa5:	83 c4 04             	add    esp,0x4
c0001fa8:	85 c0                	test   eax,eax
c0001faa:	75 10                	jne    c0001fbc <isalpha+0x20>
c0001fac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fb0:	e8 87 ff ff ff       	call   c0001f3c <islower>
c0001fb5:	83 c4 04             	add    esp,0x4
c0001fb8:	85 c0                	test   eax,eax
c0001fba:	74 08                	je     c0001fc4 <isalpha+0x28>
c0001fbc:	b8 01 00 00 00       	mov    eax,0x1
c0001fc1:	c3                   	ret    
c0001fc2:	66 90                	xchg   ax,ax
c0001fc4:	b8 00 00 00 00       	mov    eax,0x0
c0001fc9:	c3                   	ret    
c0001fca:	66 90                	xchg   ax,ax

c0001fcc <isalnum>:
c0001fcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fd0:	e8 c7 ff ff ff       	call   c0001f9c <isalpha>
c0001fd5:	83 c4 04             	add    esp,0x4
c0001fd8:	85 c0                	test   eax,eax
c0001fda:	75 10                	jne    c0001fec <isalnum+0x20>
c0001fdc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fe0:	e8 3b ff ff ff       	call   c0001f20 <isdigit>
c0001fe5:	83 c4 04             	add    esp,0x4
c0001fe8:	85 c0                	test   eax,eax
c0001fea:	74 08                	je     c0001ff4 <isalnum+0x28>
c0001fec:	b8 01 00 00 00       	mov    eax,0x1
c0001ff1:	c3                   	ret    
c0001ff2:	66 90                	xchg   ax,ax
c0001ff4:	b8 00 00 00 00       	mov    eax,0x0
c0001ff9:	c3                   	ret    
c0001ffa:	66 90                	xchg   ax,ax

c0001ffc <ispunct>:
c0001ffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002000:	e8 c7 ff ff ff       	call   c0001fcc <isalnum>
c0002005:	83 c4 04             	add    esp,0x4
c0002008:	85 c0                	test   eax,eax
c000200a:	75 28                	jne    c0002034 <ispunct+0x38>
c000200c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002010:	e8 43 ff ff ff       	call   c0001f58 <isspace>
c0002015:	83 c4 04             	add    esp,0x4
c0002018:	85 c0                	test   eax,eax
c000201a:	75 18                	jne    c0002034 <ispunct+0x38>
c000201c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002020:	e8 db fe ff ff       	call   c0001f00 <iscntrl>
c0002025:	83 c4 04             	add    esp,0x4
c0002028:	85 c0                	test   eax,eax
c000202a:	75 08                	jne    c0002034 <ispunct+0x38>
c000202c:	b8 01 00 00 00       	mov    eax,0x1
c0002031:	c3                   	ret    
c0002032:	66 90                	xchg   ax,ax
c0002034:	b8 00 00 00 00       	mov    eax,0x0
c0002039:	c3                   	ret    
c000203a:	66 90                	xchg   ax,ax

c000203c <isgraph>:
c000203c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002040:	e8 87 ff ff ff       	call   c0001fcc <isalnum>
c0002045:	83 c4 04             	add    esp,0x4
c0002048:	85 c0                	test   eax,eax
c000204a:	75 10                	jne    c000205c <isgraph+0x20>
c000204c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002050:	e8 a7 ff ff ff       	call   c0001ffc <ispunct>
c0002055:	83 c4 04             	add    esp,0x4
c0002058:	85 c0                	test   eax,eax
c000205a:	74 08                	je     c0002064 <isgraph+0x28>
c000205c:	b8 01 00 00 00       	mov    eax,0x1
c0002061:	c3                   	ret    
c0002062:	66 90                	xchg   ax,ax
c0002064:	b8 00 00 00 00       	mov    eax,0x0
c0002069:	c3                   	ret    
c000206a:	66 90                	xchg   ax,ax

c000206c <isprint>:
c000206c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002070:	e8 c7 ff ff ff       	call   c000203c <isgraph>
c0002075:	83 c4 04             	add    esp,0x4
c0002078:	85 c0                	test   eax,eax
c000207a:	75 08                	jne    c0002084 <isprint+0x18>
c000207c:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0002081:	75 09                	jne    c000208c <isprint+0x20>
c0002083:	90                   	nop
c0002084:	b8 01 00 00 00       	mov    eax,0x1
c0002089:	c3                   	ret    
c000208a:	66 90                	xchg   ax,ax
c000208c:	b8 00 00 00 00       	mov    eax,0x0
c0002091:	c3                   	ret    
c0002092:	66 90                	xchg   ax,ax

c0002094 <isxdigit>:
c0002094:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002098:	e8 83 fe ff ff       	call   c0001f20 <isdigit>
c000209d:	83 c4 04             	add    esp,0x4
c00020a0:	85 c0                	test   eax,eax
c00020a2:	75 20                	jne    c00020c4 <isxdigit+0x30>
c00020a4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c00020a9:	7e 09                	jle    c00020b4 <isxdigit+0x20>
c00020ab:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c00020b0:	7e 12                	jle    c00020c4 <isxdigit+0x30>
c00020b2:	66 90                	xchg   ax,ax
c00020b4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c00020b9:	7e 11                	jle    c00020cc <isxdigit+0x38>
c00020bb:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c00020c0:	7f 0a                	jg     c00020cc <isxdigit+0x38>
c00020c2:	66 90                	xchg   ax,ax
c00020c4:	b8 01 00 00 00       	mov    eax,0x1
c00020c9:	c3                   	ret    
c00020ca:	66 90                	xchg   ax,ax
c00020cc:	b8 00 00 00 00       	mov    eax,0x0
c00020d1:	c3                   	ret    

c00020d2 <disk_status>:
c00020d2:	31 c0                	xor    eax,eax
c00020d4:	c3                   	ret    

c00020d5 <disk_initialize>:
c00020d5:	31 c0                	xor    eax,eax
c00020d7:	c3                   	ret    

c00020d8 <disk_read>:
c00020d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020dd:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c00020e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020e9:	e9 ea 6a 02 00       	jmp    c0028bd8 <fatWrapperReadDisk>

c00020ee <disk_write>:
c00020ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020f3:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c00020fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020ff:	e9 14 6b 02 00       	jmp    c0028c18 <fatWrapperWriteDisk>

c0002104 <disk_ioctl>:
c0002104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002109:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000210d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002112:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c000211a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000211e:	e9 35 6b 02 00       	jmp    c0028c58 <fatWrapperIoctl>

c0002123 <ld_word>:
c0002123:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	c1 e2 08             	shl    edx,0x8
c000212d:	09 d0                	or     eax,edx
c000212f:	c3                   	ret    

c0002130 <ld_dword>:
c0002130:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002134:	89 d1                	mov    ecx,edx
c0002136:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000213a:	c1 e1 08             	shl    ecx,0x8
c000213d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002140:	09 ca                	or     edx,ecx
c0002142:	c1 e2 08             	shl    edx,0x8
c0002145:	09 d0                	or     eax,edx
c0002147:	c3                   	ret    

c0002148 <st_word>:
c0002148:	66 89 10             	mov    WORD PTR [eax],dx
c000214b:	c3                   	ret    

c000214c <st_dword>:
c000214c:	89 10                	mov    DWORD PTR [eax],edx
c000214e:	c3                   	ret    

c000214f <mem_cpy>:
c000214f:	85 c9                	test   ecx,ecx
c0002151:	74 10                	je     c0002163 <mem_cpy+0x14>
c0002153:	57                   	push   edi
c0002154:	01 c1                	add    ecx,eax
c0002156:	56                   	push   esi
c0002157:	89 c7                	mov    edi,eax
c0002159:	89 d6                	mov    esi,edx
c000215b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000215c:	39 f9                	cmp    ecx,edi
c000215e:	75 fb                	jne    c000215b <mem_cpy+0xc>
c0002160:	5e                   	pop    esi
c0002161:	5f                   	pop    edi
c0002162:	c3                   	ret    
c0002163:	c3                   	ret    

c0002164 <mem_set>:
c0002164:	01 c1                	add    ecx,eax
c0002166:	40                   	inc    eax
c0002167:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c000216a:	39 c8                	cmp    eax,ecx
c000216c:	75 f8                	jne    c0002166 <mem_set+0x2>
c000216e:	c3                   	ret    

c000216f <mem_cmp>:
c000216f:	57                   	push   edi
c0002170:	56                   	push   esi
c0002171:	89 c6                	mov    esi,eax
c0002173:	53                   	push   ebx
c0002174:	46                   	inc    esi
c0002175:	42                   	inc    edx
c0002176:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000217a:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000217e:	29 fb                	sub    ebx,edi
c0002180:	89 cf                	mov    edi,ecx
c0002182:	29 f7                	sub    edi,esi
c0002184:	01 c7                	add    edi,eax
c0002186:	74 04                	je     c000218c <mem_cmp+0x1d>
c0002188:	85 db                	test   ebx,ebx
c000218a:	74 e8                	je     c0002174 <mem_cmp+0x5>
c000218c:	89 d8                	mov    eax,ebx
c000218e:	5b                   	pop    ebx
c000218f:	5e                   	pop    esi
c0002190:	5f                   	pop    edi
c0002191:	c3                   	ret    

c0002192 <chk_chr>:
c0002192:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002195:	85 c9                	test   ecx,ecx
c0002197:	74 07                	je     c00021a0 <chk_chr+0xe>
c0002199:	39 d1                	cmp    ecx,edx
c000219b:	74 03                	je     c00021a0 <chk_chr+0xe>
c000219d:	40                   	inc    eax
c000219e:	eb f2                	jmp    c0002192 <chk_chr>
c00021a0:	89 c8                	mov    eax,ecx
c00021a2:	c3                   	ret    

c00021a3 <dbc_1st>:
c00021a3:	31 c0                	xor    eax,eax
c00021a5:	c3                   	ret    

c00021a6 <dbc_2nd>:
c00021a6:	31 c0                	xor    eax,eax
c00021a8:	c3                   	ret    

c00021a9 <tchar2uni>:
c00021a9:	57                   	push   edi
c00021aa:	56                   	push   esi
c00021ab:	53                   	push   ebx
c00021ac:	8b 18                	mov    ebx,DWORD PTR [eax]
c00021ae:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00021b0:	8d 73 01             	lea    esi,[ebx+0x1]
c00021b3:	f6 c1 80             	test   cl,0x80
c00021b6:	75 0a                	jne    c00021c2 <tchar2uni+0x19>
c00021b8:	0f b6 d1             	movzx  edx,cl
c00021bb:	89 f3                	mov    ebx,esi
c00021bd:	e9 b2 00 00 00       	jmp    c0002274 <tchar2uni+0xcb>
c00021c2:	89 ca                	mov    edx,ecx
c00021c4:	81 e2 e0 00 00 00    	and    edx,0xe0
c00021ca:	81 fa c0 00 00 00    	cmp    edx,0xc0
c00021d0:	89 ca                	mov    edx,ecx
c00021d2:	75 0a                	jne    c00021de <tchar2uni+0x35>
c00021d4:	83 e2 1f             	and    edx,0x1f
c00021d7:	b9 01 00 00 00       	mov    ecx,0x1
c00021dc:	eb 37                	jmp    c0002215 <tchar2uni+0x6c>
c00021de:	81 e2 f0 00 00 00    	and    edx,0xf0
c00021e4:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00021ea:	75 0c                	jne    c00021f8 <tchar2uni+0x4f>
c00021ec:	89 ca                	mov    edx,ecx
c00021ee:	b9 02 00 00 00       	mov    ecx,0x2
c00021f3:	83 e2 0f             	and    edx,0xf
c00021f6:	eb 1d                	jmp    c0002215 <tchar2uni+0x6c>
c00021f8:	89 cf                	mov    edi,ecx
c00021fa:	83 ca ff             	or     edx,0xffffffff
c00021fd:	81 e7 f8 00 00 00    	and    edi,0xf8
c0002203:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002209:	75 70                	jne    c000227b <tchar2uni+0xd2>
c000220b:	89 ca                	mov    edx,ecx
c000220d:	b9 03 00 00 00       	mov    ecx,0x3
c0002212:	83 e2 07             	and    edx,0x7
c0002215:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002219:	46                   	inc    esi
c000221a:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c000221d:	89 cf                	mov    edi,ecx
c000221f:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002225:	83 c7 80             	add    edi,0xffffff80
c0002228:	75 4e                	jne    c0002278 <tchar2uni+0xcf>
c000222a:	c1 e2 06             	shl    edx,0x6
c000222d:	83 e1 3f             	and    ecx,0x3f
c0002230:	09 ca                	or     edx,ecx
c0002232:	39 de                	cmp    esi,ebx
c0002234:	75 e3                	jne    c0002219 <tchar2uni+0x70>
c0002236:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002239:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c000223f:	77 37                	ja     c0002278 <tchar2uni+0xcf>
c0002241:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002247:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000224d:	76 29                	jbe    c0002278 <tchar2uni+0xcf>
c000224f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002255:	76 1d                	jbe    c0002274 <tchar2uni+0xcb>
c0002257:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c000225d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002263:	c1 e1 06             	shl    ecx,0x6
c0002266:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000226c:	09 ca                	or     edx,ecx
c000226e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002274:	89 18                	mov    DWORD PTR [eax],ebx
c0002276:	eb 03                	jmp    c000227b <tchar2uni+0xd2>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	5b                   	pop    ebx
c000227c:	89 d0                	mov    eax,edx
c000227e:	5e                   	pop    esi
c000227f:	5f                   	pop    edi
c0002280:	c3                   	ret    

c0002281 <put_utf>:
c0002281:	53                   	push   ebx
c0002282:	83 f8 7f             	cmp    eax,0x7f
c0002285:	89 c3                	mov    ebx,eax
c0002287:	b0 00                	mov    al,0x0
c0002289:	77 11                	ja     c000229c <put_utf+0x1b>
c000228b:	85 c9                	test   ecx,ecx
c000228d:	0f 84 e5 00 00 00    	je     c0002378 <put_utf+0xf7>
c0002293:	88 1a                	mov    BYTE PTR [edx],bl
c0002295:	b0 01                	mov    al,0x1
c0002297:	e9 dc 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c000229c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00022a2:	77 23                	ja     c00022c7 <put_utf+0x46>
c00022a4:	83 f9 01             	cmp    ecx,0x1
c00022a7:	0f 86 cb 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ad:	89 d8                	mov    eax,ebx
c00022af:	83 e3 3f             	and    ebx,0x3f
c00022b2:	c1 e8 06             	shr    eax,0x6
c00022b5:	83 cb 80             	or     ebx,0xffffff80
c00022b8:	83 c8 c0             	or     eax,0xffffffc0
c00022bb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00022be:	88 02                	mov    BYTE PTR [edx],al
c00022c0:	b0 02                	mov    al,0x2
c00022c2:	e9 b1 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c00022c7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00022cd:	77 40                	ja     c000230f <put_utf+0x8e>
c00022cf:	83 f9 02             	cmp    ecx,0x2
c00022d2:	0f 86 a0 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022d8:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00022de:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00022e4:	0f 86 8e 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ea:	89 d8                	mov    eax,ebx
c00022ec:	c1 e8 0c             	shr    eax,0xc
c00022ef:	83 c8 e0             	or     eax,0xffffffe0
c00022f2:	88 02                	mov    BYTE PTR [edx],al
c00022f4:	89 d8                	mov    eax,ebx
c00022f6:	83 e3 3f             	and    ebx,0x3f
c00022f9:	c1 e8 06             	shr    eax,0x6
c00022fc:	83 cb 80             	or     ebx,0xffffff80
c00022ff:	83 e0 3f             	and    eax,0x3f
c0002302:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002305:	83 c8 80             	or     eax,0xffffff80
c0002308:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000230b:	b0 03                	mov    al,0x3
c000230d:	eb 69                	jmp    c0002378 <put_utf+0xf7>
c000230f:	83 f9 03             	cmp    ecx,0x3
c0002312:	76 64                	jbe    c0002378 <put_utf+0xf7>
c0002314:	89 d9                	mov    ecx,ebx
c0002316:	0f b7 c3             	movzx  eax,bx
c0002319:	66 31 c9             	xor    cx,cx
c000231c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0002322:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002328:	c1 e9 06             	shr    ecx,0x6
c000232b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002331:	77 43                	ja     c0002376 <put_utf+0xf5>
c0002333:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002339:	77 3b                	ja     c0002376 <put_utf+0xf5>
c000233b:	09 cb                	or     ebx,ecx
c000233d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002343:	89 d8                	mov    eax,ebx
c0002345:	c1 e8 12             	shr    eax,0x12
c0002348:	83 c8 f0             	or     eax,0xfffffff0
c000234b:	88 02                	mov    BYTE PTR [edx],al
c000234d:	89 d8                	mov    eax,ebx
c000234f:	c1 e8 0c             	shr    eax,0xc
c0002352:	83 e0 3f             	and    eax,0x3f
c0002355:	83 c8 80             	or     eax,0xffffff80
c0002358:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000235b:	89 d8                	mov    eax,ebx
c000235d:	83 e3 3f             	and    ebx,0x3f
c0002360:	c1 e8 06             	shr    eax,0x6
c0002363:	83 cb 80             	or     ebx,0xffffff80
c0002366:	83 e0 3f             	and    eax,0x3f
c0002369:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000236c:	83 c8 80             	or     eax,0xffffff80
c000236f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002372:	b0 04                	mov    al,0x4
c0002374:	eb 02                	jmp    c0002378 <put_utf+0xf7>
c0002376:	31 c0                	xor    eax,eax
c0002378:	5b                   	pop    ebx
c0002379:	c3                   	ret    

c000237a <clst2sect>:
c000237a:	8d 4a fe             	lea    ecx,[edx-0x2]
c000237d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002380:	83 ea 02             	sub    edx,0x2
c0002383:	39 ca                	cmp    edx,ecx
c0002385:	76 0d                	jbe    c0002394 <clst2sect+0x1a>
c0002387:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000238b:	0f af d1             	imul   edx,ecx
c000238e:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002391:	89 d0                	mov    eax,edx
c0002393:	c3                   	ret    
c0002394:	31 c0                	xor    eax,eax
c0002396:	c3                   	ret    

c0002397 <pick_lfn>:
c0002397:	55                   	push   ebp
c0002398:	57                   	push   edi
c0002399:	89 c7                	mov    edi,eax
c000239b:	56                   	push   esi
c000239c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000239f:	53                   	push   ebx
c00023a0:	89 d3                	mov    ebx,edx
c00023a2:	e8 7c fd ff ff       	call   c0002123 <ld_word>
c00023a7:	66 85 c0             	test   ax,ax
c00023aa:	74 04                	je     c00023b0 <pick_lfn+0x19>
c00023ac:	31 c0                	xor    eax,eax
c00023ae:	eb 62                	jmp    c0002412 <pick_lfn+0x7b>
c00023b0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00023b3:	bd 01 00 00 00       	mov    ebp,0x1
c00023b8:	83 e1 bf             	and    ecx,0xffffffbf
c00023bb:	31 f6                	xor    esi,esi
c00023bd:	49                   	dec    ecx
c00023be:	6b c9 0d             	imul   ecx,ecx,0xd
c00023c1:	0f b6 86 a0 f8 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0760]
c00023c8:	01 d8                	add    eax,ebx
c00023ca:	e8 54 fd ff ff       	call   c0002123 <ld_word>
c00023cf:	66 85 ed             	test   bp,bp
c00023d2:	74 11                	je     c00023e5 <pick_lfn+0x4e>
c00023d4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00023da:	77 d0                	ja     c00023ac <pick_lfn+0x15>
c00023dc:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00023e0:	89 c5                	mov    ebp,eax
c00023e2:	41                   	inc    ecx
c00023e3:	eb 0a                	jmp    c00023ef <pick_lfn+0x58>
c00023e5:	0f b7 c0             	movzx  eax,ax
c00023e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00023ed:	75 bd                	jne    c00023ac <pick_lfn+0x15>
c00023ef:	46                   	inc    esi
c00023f0:	83 fe 0d             	cmp    esi,0xd
c00023f3:	75 cc                	jne    c00023c1 <pick_lfn+0x2a>
c00023f5:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00023f8:	74 13                	je     c000240d <pick_lfn+0x76>
c00023fa:	66 85 ed             	test   bp,bp
c00023fd:	74 0e                	je     c000240d <pick_lfn+0x76>
c00023ff:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002405:	77 a5                	ja     c00023ac <pick_lfn+0x15>
c0002407:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c000240d:	b8 01 00 00 00       	mov    eax,0x1
c0002412:	5b                   	pop    ebx
c0002413:	5e                   	pop    esi
c0002414:	5f                   	pop    edi
c0002415:	5d                   	pop    ebp
c0002416:	c3                   	ret    

c0002417 <put_lfn>:
c0002417:	55                   	push   ebp
c0002418:	57                   	push   edi
c0002419:	89 d7                	mov    edi,edx
c000241b:	56                   	push   esi
c000241c:	31 f6                	xor    esi,esi
c000241e:	53                   	push   ebx
c000241f:	83 ec 0c             	sub    esp,0xc
c0002422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002426:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000242a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000242e:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002434:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002437:	8d 42 1a             	lea    eax,[edx+0x1a]
c000243a:	31 d2                	xor    edx,edx
c000243c:	e8 07 fd ff ff       	call   c0002148 <st_word>
c0002441:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002448:	0f b6 d9             	movzx  ebx,cl
c000244b:	4b                   	dec    ebx
c000244c:	6b db 0d             	imul   ebx,ebx,0xd
c000244f:	0f b7 c6             	movzx  eax,si
c0002452:	3d ff ff 00 00       	cmp    eax,0xffff
c0002457:	74 09                	je     c0002462 <put_lfn+0x4b>
c0002459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000245d:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002461:	43                   	inc    ebx
c0002462:	0f b7 ee             	movzx  ebp,si
c0002465:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002468:	89 ea                	mov    edx,ebp
c000246a:	0f b6 80 a0 f8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0760]
c0002471:	01 f8                	add    eax,edi
c0002473:	e8 d0 fc ff ff       	call   c0002148 <st_word>
c0002478:	85 ed                	test   ebp,ebp
c000247a:	75 05                	jne    c0002481 <put_lfn+0x6a>
c000247c:	be ff ff 00 00       	mov    esi,0xffff
c0002481:	ff 04 24             	inc    DWORD PTR [esp]
c0002484:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002488:	75 c5                	jne    c000244f <put_lfn+0x38>
c000248a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002490:	74 0b                	je     c000249d <put_lfn+0x86>
c0002492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002496:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000249b:	75 07                	jne    c00024a4 <put_lfn+0x8d>
c000249d:	83 c9 40             	or     ecx,0x40
c00024a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00024a8:	88 07                	mov    BYTE PTR [edi],al
c00024aa:	83 c4 0c             	add    esp,0xc
c00024ad:	5b                   	pop    ebx
c00024ae:	5e                   	pop    esi
c00024af:	5f                   	pop    edi
c00024b0:	5d                   	pop    ebp
c00024b1:	c3                   	ret    

c00024b2 <gen_numname>:
c00024b2:	57                   	push   edi
c00024b3:	89 cf                	mov    edi,ecx
c00024b5:	56                   	push   esi
c00024b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00024bb:	53                   	push   ebx
c00024bc:	89 c6                	mov    esi,eax
c00024be:	83 ec 10             	sub    esp,0x10
c00024c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00024c5:	e8 85 fc ff ff       	call   c000214f <mem_cpy>
c00024ca:	83 fb 05             	cmp    ebx,0x5
c00024cd:	76 30                	jbe    c00024ff <gen_numname+0x4d>
c00024cf:	66 8b 07             	mov    ax,WORD PTR [edi]
c00024d2:	66 85 c0             	test   ax,ax
c00024d5:	74 28                	je     c00024ff <gen_numname+0x4d>
c00024d7:	83 c7 02             	add    edi,0x2
c00024da:	ba 10 00 00 00       	mov    edx,0x10
c00024df:	01 db                	add    ebx,ebx
c00024e1:	89 c1                	mov    ecx,eax
c00024e3:	c1 e0 10             	shl    eax,0x10
c00024e6:	83 e1 01             	and    ecx,0x1
c00024e9:	c1 e8 11             	shr    eax,0x11
c00024ec:	01 cb                	add    ebx,ecx
c00024ee:	0f ba e3 10          	bt     ebx,0x10
c00024f2:	73 06                	jae    c00024fa <gen_numname+0x48>
c00024f4:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00024fa:	4a                   	dec    edx
c00024fb:	75 e2                	jne    c00024df <gen_numname+0x2d>
c00024fd:	eb d0                	jmp    c00024cf <gen_numname+0x1d>
c00024ff:	b8 07 00 00 00       	mov    eax,0x7
c0002504:	89 d9                	mov    ecx,ebx
c0002506:	83 e1 0f             	and    ecx,0xf
c0002509:	8d 79 30             	lea    edi,[ecx+0x30]
c000250c:	89 fa                	mov    edx,edi
c000250e:	83 ff 39             	cmp    edi,0x39
c0002511:	76 03                	jbe    c0002516 <gen_numname+0x64>
c0002513:	8d 51 37             	lea    edx,[ecx+0x37]
c0002516:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002519:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000251d:	89 da                	mov    edx,ebx
c000251f:	c1 ea 04             	shr    edx,0x4
c0002522:	83 fb 0f             	cmp    ebx,0xf
c0002525:	76 06                	jbe    c000252d <gen_numname+0x7b>
c0002527:	89 c8                	mov    eax,ecx
c0002529:	89 d3                	mov    ebx,edx
c000252b:	eb d7                	jmp    c0002504 <gen_numname+0x52>
c000252d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002532:	31 d2                	xor    edx,edx
c0002534:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002537:	8d 04 16             	lea    eax,[esi+edx*1]
c000253a:	39 ca                	cmp    edx,ecx
c000253c:	73 19                	jae    c0002557 <gen_numname+0xa5>
c000253e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002541:	83 f8 20             	cmp    eax,0x20
c0002544:	74 11                	je     c0002557 <gen_numname+0xa5>
c0002546:	e8 58 fc ff ff       	call   c00021a3 <dbc_1st>
c000254b:	85 c0                	test   eax,eax
c000254d:	74 05                	je     c0002554 <gen_numname+0xa2>
c000254f:	39 d3                	cmp    ebx,edx
c0002551:	74 04                	je     c0002557 <gen_numname+0xa5>
c0002553:	42                   	inc    edx
c0002554:	42                   	inc    edx
c0002555:	eb e0                	jmp    c0002537 <gen_numname+0x85>
c0002557:	b0 20                	mov    al,0x20
c0002559:	83 f9 07             	cmp    ecx,0x7
c000255c:	77 05                	ja     c0002563 <gen_numname+0xb1>
c000255e:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002562:	41                   	inc    ecx
c0002563:	42                   	inc    edx
c0002564:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002568:	83 fa 07             	cmp    edx,0x7
c000256b:	76 ea                	jbe    c0002557 <gen_numname+0xa5>
c000256d:	83 c4 10             	add    esp,0x10
c0002570:	5b                   	pop    ebx
c0002571:	5e                   	pop    esi
c0002572:	5f                   	pop    edi
c0002573:	c3                   	ret    

c0002574 <sum_sfn>:
c0002574:	53                   	push   ebx
c0002575:	31 c9                	xor    ecx,ecx
c0002577:	31 db                	xor    ebx,ebx
c0002579:	0f b6 d1             	movzx  edx,cl
c000257c:	c1 e1 07             	shl    ecx,0x7
c000257f:	d1 ea                	shr    edx,1
c0002581:	09 ca                	or     edx,ecx
c0002583:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002586:	43                   	inc    ebx
c0002587:	01 ca                	add    edx,ecx
c0002589:	83 fb 0b             	cmp    ebx,0xb
c000258c:	88 d1                	mov    cl,dl
c000258e:	75 e9                	jne    c0002579 <sum_sfn+0x5>
c0002590:	88 d0                	mov    al,dl
c0002592:	5b                   	pop    ebx
c0002593:	c3                   	ret    

c0002594 <get_ldnumber>:
c0002594:	8b 10                	mov    edx,DWORD PTR [eax]
c0002596:	85 d2                	test   edx,edx
c0002598:	74 14                	je     c00025ae <get_ldnumber+0x1a>
c000259a:	56                   	push   esi
c000259b:	53                   	push   ebx
c000259c:	89 d3                	mov    ebx,edx
c000259e:	43                   	inc    ebx
c000259f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c00025a2:	80 f9 1f             	cmp    cl,0x1f
c00025a5:	76 0d                	jbe    c00025b4 <get_ldnumber+0x20>
c00025a7:	80 f9 3a             	cmp    cl,0x3a
c00025aa:	75 f2                	jne    c000259e <get_ldnumber+0xa>
c00025ac:	eb 0a                	jmp    c00025b8 <get_ldnumber+0x24>
c00025ae:	83 c9 ff             	or     ecx,0xffffffff
c00025b1:	89 c8                	mov    eax,ecx
c00025b3:	c3                   	ret    
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	eb 24                	jmp    c00025dc <get_ldnumber+0x48>
c00025b8:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00025bb:	8d 4e d0             	lea    ecx,[esi-0x30]
c00025be:	80 f9 09             	cmp    cl,0x9
c00025c1:	77 16                	ja     c00025d9 <get_ldnumber+0x45>
c00025c3:	83 c2 02             	add    edx,0x2
c00025c6:	83 c9 ff             	or     ecx,0xffffffff
c00025c9:	39 d3                	cmp    ebx,edx
c00025cb:	75 0f                	jne    c00025dc <get_ldnumber+0x48>
c00025cd:	89 f2                	mov    edx,esi
c00025cf:	89 18                	mov    DWORD PTR [eax],ebx
c00025d1:	0f be ca             	movsx  ecx,dl
c00025d4:	83 e9 30             	sub    ecx,0x30
c00025d7:	eb 03                	jmp    c00025dc <get_ldnumber+0x48>
c00025d9:	83 c9 ff             	or     ecx,0xffffffff
c00025dc:	89 c8                	mov    eax,ecx
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	c3                   	ret    

c00025e1 <validate>:
c00025e1:	56                   	push   esi
c00025e2:	53                   	push   ebx
c00025e3:	89 d6                	mov    esi,edx
c00025e5:	51                   	push   ecx
c00025e6:	85 c0                	test   eax,eax
c00025e8:	75 09                	jne    c00025f3 <validate+0x12>
c00025ea:	b8 09 00 00 00       	mov    eax,0x9
c00025ef:	31 c9                	xor    ecx,ecx
c00025f1:	eb 2e                	jmp    c0002621 <validate+0x40>
c00025f3:	89 c3                	mov    ebx,eax
c00025f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00025f7:	85 c0                	test   eax,eax
c00025f9:	74 ef                	je     c00025ea <validate+0x9>
c00025fb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00025fe:	74 ea                	je     c00025ea <validate+0x9>
c0002600:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002603:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c0002607:	75 e1                	jne    c00025ea <validate+0x9>
c0002609:	83 ec 0c             	sub    esp,0xc
c000260c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002610:	50                   	push   eax
c0002611:	e8 bc fa ff ff       	call   c00020d2 <disk_status>
c0002616:	83 c4 10             	add    esp,0x10
c0002619:	a8 01                	test   al,0x1
c000261b:	75 cd                	jne    c00025ea <validate+0x9>
c000261d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000261f:	31 c0                	xor    eax,eax
c0002621:	89 0e                	mov    DWORD PTR [esi],ecx
c0002623:	5a                   	pop    edx
c0002624:	5b                   	pop    ebx
c0002625:	5e                   	pop    esi
c0002626:	c3                   	ret    

c0002627 <sync_window>:
c0002627:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000262b:	74 58                	je     c0002685 <sync_window+0x5e>
c000262d:	56                   	push   esi
c000262e:	53                   	push   ebx
c000262f:	8d 70 34             	lea    esi,[eax+0x34]
c0002632:	51                   	push   ecx
c0002633:	89 c3                	mov    ebx,eax
c0002635:	6a 01                	push   0x1
c0002637:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000263a:	56                   	push   esi
c000263b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000263f:	50                   	push   eax
c0002640:	e8 a9 fa ff ff       	call   c00020ee <disk_write>
c0002645:	83 c4 10             	add    esp,0x10
c0002648:	ba 01 00 00 00       	mov    edx,0x1
c000264d:	85 c0                	test   eax,eax
c000264f:	75 2e                	jne    c000267f <sync_window+0x58>
c0002651:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002654:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002657:	89 c1                	mov    ecx,eax
c0002659:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000265d:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002660:	39 d1                	cmp    ecx,edx
c0002662:	73 19                	jae    c000267d <sync_window+0x56>
c0002664:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002668:	75 13                	jne    c000267d <sync_window+0x56>
c000266a:	6a 01                	push   0x1
c000266c:	01 d0                	add    eax,edx
c000266e:	50                   	push   eax
c000266f:	56                   	push   esi
c0002670:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002674:	50                   	push   eax
c0002675:	e8 74 fa ff ff       	call   c00020ee <disk_write>
c000267a:	83 c4 10             	add    esp,0x10
c000267d:	31 d2                	xor    edx,edx
c000267f:	89 d0                	mov    eax,edx
c0002681:	5a                   	pop    edx
c0002682:	5b                   	pop    ebx
c0002683:	5e                   	pop    esi
c0002684:	c3                   	ret    
c0002685:	31 d2                	xor    edx,edx
c0002687:	89 d0                	mov    eax,edx
c0002689:	c3                   	ret    

c000268a <move_window>:
c000268a:	57                   	push   edi
c000268b:	56                   	push   esi
c000268c:	31 f6                	xor    esi,esi
c000268e:	53                   	push   ebx
c000268f:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002692:	74 32                	je     c00026c6 <move_window+0x3c>
c0002694:	89 c3                	mov    ebx,eax
c0002696:	89 d7                	mov    edi,edx
c0002698:	e8 8a ff ff ff       	call   c0002627 <sync_window>
c000269d:	89 c6                	mov    esi,eax
c000269f:	85 c0                	test   eax,eax
c00026a1:	75 23                	jne    c00026c6 <move_window+0x3c>
c00026a3:	6a 01                	push   0x1
c00026a5:	8d 43 34             	lea    eax,[ebx+0x34]
c00026a8:	57                   	push   edi
c00026a9:	50                   	push   eax
c00026aa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026ae:	50                   	push   eax
c00026af:	e8 24 fa ff ff       	call   c00020d8 <disk_read>
c00026b4:	83 c4 10             	add    esp,0x10
c00026b7:	85 c0                	test   eax,eax
c00026b9:	74 08                	je     c00026c3 <move_window+0x39>
c00026bb:	be 01 00 00 00       	mov    esi,0x1
c00026c0:	83 cf ff             	or     edi,0xffffffff
c00026c3:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00026c6:	89 f0                	mov    eax,esi
c00026c8:	5b                   	pop    ebx
c00026c9:	5e                   	pop    esi
c00026ca:	5f                   	pop    edi
c00026cb:	c3                   	ret    

c00026cc <check_fs>:
c00026cc:	53                   	push   ebx
c00026cd:	89 c3                	mov    ebx,eax
c00026cf:	83 ec 08             	sub    esp,0x8
c00026d2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00026d6:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00026dd:	e8 a8 ff ff ff       	call   c000268a <move_window>
c00026e2:	ba 04 00 00 00       	mov    edx,0x4
c00026e7:	85 c0                	test   eax,eax
c00026e9:	75 68                	jne    c0002753 <check_fs+0x87>
c00026eb:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00026f1:	e8 2d fa ff ff       	call   c0002123 <ld_word>
c00026f6:	ba 03 00 00 00       	mov    edx,0x3
c00026fb:	66 3d 55 aa          	cmp    ax,0xaa55
c00026ff:	75 52                	jne    c0002753 <check_fs+0x87>
c0002701:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002704:	8d 50 18             	lea    edx,[eax+0x18]
c0002707:	80 fa 01             	cmp    dl,0x1
c000270a:	76 09                	jbe    c0002715 <check_fs+0x49>
c000270c:	ba 02 00 00 00       	mov    edx,0x2
c0002711:	3c eb                	cmp    al,0xeb
c0002713:	75 3e                	jne    c0002753 <check_fs+0x87>
c0002715:	ba 20 36 03 c0       	mov    edx,0xc0033620
c000271a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000271d:	b9 03 00 00 00       	mov    ecx,0x3
c0002722:	e8 48 fa ff ff       	call   c000216f <mem_cmp>
c0002727:	31 d2                	xor    edx,edx
c0002729:	85 c0                	test   eax,eax
c000272b:	74 26                	je     c0002753 <check_fs+0x87>
c000272d:	ba 58 f7 02 c0       	mov    edx,0xc002f758
c0002732:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002738:	b9 05 00 00 00       	mov    ecx,0x5
c000273d:	e8 2d fa ff ff       	call   c000216f <mem_cmp>
c0002742:	31 d2                	xor    edx,edx
c0002744:	85 c0                	test   eax,eax
c0002746:	74 0b                	je     c0002753 <check_fs+0x87>
c0002748:	31 d2                	xor    edx,edx
c000274a:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000274e:	0f 95 c2             	setne  dl
c0002751:	01 d2                	add    edx,edx
c0002753:	89 d0                	mov    eax,edx
c0002755:	83 c4 08             	add    esp,0x8
c0002758:	5b                   	pop    ebx
c0002759:	c3                   	ret    

c000275a <find_volume>:
c000275a:	55                   	push   ebp
c000275b:	57                   	push   edi
c000275c:	56                   	push   esi
c000275d:	89 c6                	mov    esi,eax
c000275f:	53                   	push   ebx
c0002760:	89 d3                	mov    ebx,edx
c0002762:	83 ec 2c             	sub    esp,0x2c
c0002765:	31 d2                	xor    edx,edx
c0002767:	e8 60 ff ff ff       	call   c00026cc <check_fs>
c000276c:	83 f8 02             	cmp    eax,0x2
c000276f:	74 06                	je     c0002777 <find_volume+0x1d>
c0002771:	77 62                	ja     c00027d5 <find_volume+0x7b>
c0002773:	85 db                	test   ebx,ebx
c0002775:	74 5e                	je     c00027d5 <find_volume+0x7b>
c0002777:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000277b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002781:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000278b:	89 cf                	mov    edi,ecx
c000278d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002791:	89 e8                	mov    eax,ebp
c0002793:	83 c5 10             	add    ebp,0x10
c0002796:	e8 95 f9 ff ff       	call   c0002130 <ld_dword>
c000279b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279f:	89 01                	mov    DWORD PTR [ecx],eax
c00027a1:	83 c1 04             	add    ecx,0x4
c00027a4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00027a8:	75 e3                	jne    c000278d <find_volume+0x33>
c00027aa:	31 ed                	xor    ebp,ebp
c00027ac:	85 db                	test   ebx,ebx
c00027ae:	74 03                	je     c00027b3 <find_volume+0x59>
c00027b0:	8d 6b ff             	lea    ebp,[ebx-0x1]
c00027b3:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c00027b6:	b8 03 00 00 00       	mov    eax,0x3
c00027bb:	85 d2                	test   edx,edx
c00027bd:	74 0c                	je     c00027cb <find_volume+0x71>
c00027bf:	89 f0                	mov    eax,esi
c00027c1:	e8 06 ff ff ff       	call   c00026cc <check_fs>
c00027c6:	83 f8 01             	cmp    eax,0x1
c00027c9:	76 0a                	jbe    c00027d5 <find_volume+0x7b>
c00027cb:	85 db                	test   ebx,ebx
c00027cd:	75 06                	jne    c00027d5 <find_volume+0x7b>
c00027cf:	45                   	inc    ebp
c00027d0:	83 fd 03             	cmp    ebp,0x3
c00027d3:	76 de                	jbe    c00027b3 <find_volume+0x59>
c00027d5:	83 c4 2c             	add    esp,0x2c
c00027d8:	5b                   	pop    ebx
c00027d9:	5e                   	pop    esi
c00027da:	5f                   	pop    edi
c00027db:	5d                   	pop    ebp
c00027dc:	c3                   	ret    

c00027dd <mount_volume>:
c00027dd:	55                   	push   ebp
c00027de:	89 d5                	mov    ebp,edx
c00027e0:	57                   	push   edi
c00027e1:	89 cf                	mov    edi,ecx
c00027e3:	56                   	push   esi
c00027e4:	53                   	push   ebx
c00027e5:	bb 0b 00 00 00       	mov    ebx,0xb
c00027ea:	83 ec 1c             	sub    esp,0x1c
c00027ed:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00027f3:	e8 9c fd ff ff       	call   c0002594 <get_ldnumber>
c00027f8:	85 c0                	test   eax,eax
c00027fa:	0f 88 c4 02 00 00    	js     c0002ac4 <mount_volume+0x2e7>
c0002800:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c0002807:	89 c2                	mov    edx,eax
c0002809:	bb 0c 00 00 00       	mov    ebx,0xc
c000280e:	85 f6                	test   esi,esi
c0002810:	0f 84 ae 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002816:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002819:	83 e7 fe             	and    edi,0xfffffffe
c000281c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000281f:	74 3a                	je     c000285b <mount_volume+0x7e>
c0002821:	89 04 24             	mov    DWORD PTR [esp],eax
c0002824:	83 ec 0c             	sub    esp,0xc
c0002827:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000282b:	50                   	push   eax
c000282c:	e8 a1 f8 ff ff       	call   c00020d2 <disk_status>
c0002831:	83 c4 10             	add    esp,0x10
c0002834:	a8 01                	test   al,0x1
c0002836:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0002839:	75 20                	jne    c000285b <mount_volume+0x7e>
c000283b:	31 db                	xor    ebx,ebx
c000283d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002843:	0f 84 7b 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002849:	a8 04                	test   al,0x4
c000284b:	0f 84 73 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002851:	bb 0a 00 00 00       	mov    ebx,0xa
c0002856:	e9 69 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c000285b:	83 ec 0c             	sub    esp,0xc
c000285e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002861:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002864:	0f b6 c2             	movzx  eax,dl
c0002867:	bb 03 00 00 00       	mov    ebx,0x3
c000286c:	50                   	push   eax
c000286d:	e8 63 f8 ff ff       	call   c00020d5 <disk_initialize>
c0002872:	83 c4 10             	add    esp,0x10
c0002875:	a8 01                	test   al,0x1
c0002877:	0f 85 47 02 00 00    	jne    c0002ac4 <mount_volume+0x2e7>
c000287d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002883:	74 04                	je     c0002889 <mount_volume+0xac>
c0002885:	a8 04                	test   al,0x4
c0002887:	75 c8                	jne    c0002851 <mount_volume+0x74>
c0002889:	31 d2                	xor    edx,edx
c000288b:	89 f0                	mov    eax,esi
c000288d:	bb 01 00 00 00       	mov    ebx,0x1
c0002892:	e8 c3 fe ff ff       	call   c000275a <find_volume>
c0002897:	83 f8 04             	cmp    eax,0x4
c000289a:	0f 84 24 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c00028a0:	83 f8 01             	cmp    eax,0x1
c00028a3:	76 0a                	jbe    c00028af <mount_volume+0xd2>
c00028a5:	bb 0d 00 00 00       	mov    ebx,0xd
c00028aa:	e9 15 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c00028af:	8d 46 3f             	lea    eax,[esi+0x3f]
c00028b2:	e8 6c f8 ff ff       	call   c0002123 <ld_word>
c00028b7:	66 3d 00 02          	cmp    ax,0x200
c00028bb:	75 e8                	jne    c00028a5 <mount_volume+0xc8>
c00028bd:	8d 46 4a             	lea    eax,[esi+0x4a]
c00028c0:	e8 5e f8 ff ff       	call   c0002123 <ld_word>
c00028c5:	0f b7 c0             	movzx  eax,ax
c00028c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00028cb:	85 c0                	test   eax,eax
c00028cd:	75 0b                	jne    c00028da <mount_volume+0xfd>
c00028cf:	8d 46 58             	lea    eax,[esi+0x58]
c00028d2:	e8 59 f8 ff ff       	call   c0002130 <ld_dword>
c00028d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00028da:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00028dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00028e4:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00028e7:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c00028ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00028ee:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00028f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f5:	48                   	dec    eax
c00028f6:	3c 01                	cmp    al,0x1
c00028f8:	77 ab                	ja     c00028a5 <mount_volume+0xc8>
c00028fa:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00028fe:	89 c3                	mov    ebx,eax
c0002900:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c0002904:	66 85 c0             	test   ax,ax
c0002907:	74 9c                	je     c00028a5 <mount_volume+0xc8>
c0002909:	8d 40 ff             	lea    eax,[eax-0x1]
c000290c:	85 d8                	test   eax,ebx
c000290e:	75 95                	jne    c00028a5 <mount_volume+0xc8>
c0002910:	8d 46 45             	lea    eax,[esi+0x45]
c0002913:	e8 0b f8 ff ff       	call   c0002123 <ld_word>
c0002918:	89 c7                	mov    edi,eax
c000291a:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c000291e:	a8 0f                	test   al,0xf
c0002920:	75 83                	jne    c00028a5 <mount_volume+0xc8>
c0002922:	8d 46 47             	lea    eax,[esi+0x47]
c0002925:	e8 f9 f7 ff ff       	call   c0002123 <ld_word>
c000292a:	0f b7 e8             	movzx  ebp,ax
c000292d:	85 ed                	test   ebp,ebp
c000292f:	75 0a                	jne    c000293b <mount_volume+0x15e>
c0002931:	8d 46 54             	lea    eax,[esi+0x54]
c0002934:	e8 f7 f7 ff ff       	call   c0002130 <ld_dword>
c0002939:	89 c5                	mov    ebp,eax
c000293b:	8d 46 42             	lea    eax,[esi+0x42]
c000293e:	e8 e0 f7 ff ff       	call   c0002123 <ld_word>
c0002943:	0f b7 c8             	movzx  ecx,ax
c0002946:	85 c9                	test   ecx,ecx
c0002948:	0f 84 57 ff ff ff    	je     c00028a5 <mount_volume+0xc8>
c000294e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002953:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c0002957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295b:	0f b7 c7             	movzx  eax,di
c000295e:	c1 e8 04             	shr    eax,0x4
c0002961:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002965:	01 c8                	add    eax,ecx
c0002967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000296b:	39 c5                	cmp    ebp,eax
c000296d:	0f 82 32 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002973:	29 c5                	sub    ebp,eax
c0002975:	31 d2                	xor    edx,edx
c0002977:	89 e8                	mov    eax,ebp
c0002979:	f7 f3                	div    ebx
c000297b:	39 dd                	cmp    ebp,ebx
c000297d:	0f 82 22 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002983:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002988:	0f 87 17 ff ff ff    	ja     c00028a5 <mount_volume+0xc8>
c000298e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002993:	0f 86 1c 01 00 00    	jbe    c0002ab5 <mount_volume+0x2d8>
c0002999:	bb 03 00 00 00       	mov    ebx,0x3
c000299e:	8d 68 02             	lea    ebp,[eax+0x2]
c00029a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029a9:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c00029ad:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00029b0:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00029b3:	01 c8                	add    eax,ecx
c00029b5:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00029b8:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00029bb:	83 fb 03             	cmp    ebx,0x3
c00029be:	75 23                	jne    c00029e3 <mount_volume+0x206>
c00029c0:	8d 46 5e             	lea    eax,[esi+0x5e]
c00029c3:	e8 5b f7 ff ff       	call   c0002123 <ld_word>
c00029c8:	09 c7                	or     edi,eax
c00029ca:	66 85 ff             	test   di,di
c00029cd:	0f 85 d2 fe ff ff    	jne    c00028a5 <mount_volume+0xc8>
c00029d3:	8d 46 60             	lea    eax,[esi+0x60]
c00029d6:	c1 e5 02             	shl    ebp,0x2
c00029d9:	e8 52 f7 ff ff       	call   c0002130 <ld_dword>
c00029de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029e1:	eb 24                	jmp    c0002a07 <mount_volume+0x22a>
c00029e3:	66 85 ff             	test   di,di
c00029e6:	0f 84 b9 fe ff ff    	je     c00028a5 <mount_volume+0xc8>
c00029ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00029f0:	83 fb 02             	cmp    ebx,0x2
c00029f3:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029f6:	75 04                	jne    c00029fc <mount_volume+0x21f>
c00029f8:	01 ed                	add    ebp,ebp
c00029fa:	eb 0b                	jmp    c0002a07 <mount_volume+0x22a>
c00029fc:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002a00:	83 e5 01             	and    ebp,0x1
c0002a03:	d1 e8                	shr    eax,1
c0002a05:	01 c5                	add    ebp,eax
c0002a07:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002a0d:	c1 ed 09             	shr    ebp,0x9
c0002a10:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0002a13:	0f 87 8c fe ff ff    	ja     c00028a5 <mount_volume+0xc8>
c0002a19:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002a20:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002a27:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002a2b:	83 fb 03             	cmp    ebx,0x3
c0002a2e:	75 6e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a30:	8d 46 64             	lea    eax,[esi+0x64]
c0002a33:	e8 eb f6 ff ff       	call   c0002123 <ld_word>
c0002a38:	66 48                	dec    ax
c0002a3a:	75 62                	jne    c0002a9e <mount_volume+0x2c1>
c0002a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0002a40:	89 f0                	mov    eax,esi
c0002a42:	42                   	inc    edx
c0002a43:	e8 42 fc ff ff       	call   c000268a <move_window>
c0002a48:	85 c0                	test   eax,eax
c0002a4a:	75 52                	jne    c0002a9e <mount_volume+0x2c1>
c0002a4c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002a50:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002a56:	e8 c8 f6 ff ff       	call   c0002123 <ld_word>
c0002a5b:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a5f:	75 3d                	jne    c0002a9e <mount_volume+0x2c1>
c0002a61:	8d 46 34             	lea    eax,[esi+0x34]
c0002a64:	e8 c7 f6 ff ff       	call   c0002130 <ld_dword>
c0002a69:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a6e:	75 2e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a70:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002a76:	e8 b5 f6 ff ff       	call   c0002130 <ld_dword>
c0002a7b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a80:	75 1c                	jne    c0002a9e <mount_volume+0x2c1>
c0002a82:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002a88:	e8 a3 f6 ff ff       	call   c0002130 <ld_dword>
c0002a8d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002a90:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002a96:	e8 95 f6 ff ff       	call   c0002130 <ld_dword>
c0002a9b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002a9e:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c0002aa4:	88 1e                	mov    BYTE PTR [esi],bl
c0002aa6:	40                   	inc    eax
c0002aa7:	31 db                	xor    ebx,ebx
c0002aa9:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002aaf:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002ab3:	eb 0f                	jmp    c0002ac4 <mount_volume+0x2e7>
c0002ab5:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002aba:	19 db                	sbb    ebx,ebx
c0002abc:	83 c3 02             	add    ebx,0x2
c0002abf:	e9 da fe ff ff       	jmp    c000299e <mount_volume+0x1c1>
c0002ac4:	83 c4 1c             	add    esp,0x1c
c0002ac7:	89 d8                	mov    eax,ebx
c0002ac9:	5b                   	pop    ebx
c0002aca:	5e                   	pop    esi
c0002acb:	5f                   	pop    edi
c0002acc:	5d                   	pop    ebp
c0002acd:	c3                   	ret    

c0002ace <put_fat>:
c0002ace:	55                   	push   ebp
c0002acf:	bd 02 00 00 00       	mov    ebp,0x2
c0002ad4:	57                   	push   edi
c0002ad5:	56                   	push   esi
c0002ad6:	53                   	push   ebx
c0002ad7:	83 ec 1c             	sub    esp,0x1c
c0002ada:	83 fa 01             	cmp    edx,0x1
c0002add:	0f 86 38 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002ae3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002ae6:	0f 86 2f 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002aec:	89 c6                	mov    esi,eax
c0002aee:	89 cf                	mov    edi,ecx
c0002af0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 f8 02             	cmp    eax,0x2
c0002af8:	0f 84 b1 00 00 00    	je     c0002baf <put_fat+0xe1>
c0002afe:	83 f8 03             	cmp    eax,0x3
c0002b01:	0f 84 d5 00 00 00    	je     c0002bdc <put_fat+0x10e>
c0002b07:	48                   	dec    eax
c0002b08:	0f 85 0d 01 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b0e:	89 d1                	mov    ecx,edx
c0002b10:	89 f0                	mov    eax,esi
c0002b12:	d1 e9                	shr    ecx,1
c0002b14:	01 d1                	add    ecx,edx
c0002b16:	89 ca                	mov    edx,ecx
c0002b18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b1c:	c1 ea 09             	shr    edx,0x9
c0002b1f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b22:	e8 63 fb ff ff       	call   c000268a <move_window>
c0002b27:	89 c5                	mov    ebp,eax
c0002b29:	85 c0                	test   eax,eax
c0002b2b:	0f 85 ea 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b35:	8d 46 34             	lea    eax,[esi+0x34]
c0002b38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b3c:	8d 41 01             	lea    eax,[ecx+0x1]
c0002b3f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b49:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b4d:	89 f8                	mov    eax,edi
c0002b4f:	83 e3 01             	and    ebx,0x1
c0002b52:	74 11                	je     c0002b65 <put_fat+0x97>
c0002b54:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002b56:	89 f8                	mov    eax,edi
c0002b58:	83 e2 0f             	and    edx,0xf
c0002b5b:	c1 e0 04             	shl    eax,0x4
c0002b5e:	25 f0 0f 00 00       	and    eax,0xff0
c0002b63:	09 d0                	or     eax,edx
c0002b65:	88 01                	mov    BYTE PTR [ecx],al
c0002b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b6b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b6f:	c1 ea 09             	shr    edx,0x9
c0002b72:	89 f0                	mov    eax,esi
c0002b74:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b77:	e8 0e fb ff ff       	call   c000268a <move_window>
c0002b7c:	89 c5                	mov    ebp,eax
c0002b7e:	85 c0                	test   eax,eax
c0002b80:	0f 85 95 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b8a:	25 ff 01 00 00       	and    eax,0x1ff
c0002b8f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b93:	85 db                	test   ebx,ebx
c0002b95:	74 07                	je     c0002b9e <put_fat+0xd0>
c0002b97:	c1 ef 04             	shr    edi,0x4
c0002b9a:	89 f9                	mov    ecx,edi
c0002b9c:	eb 0d                	jmp    c0002bab <put_fat+0xdd>
c0002b9e:	8a 08                	mov    cl,BYTE PTR [eax]
c0002ba0:	c1 ef 08             	shr    edi,0x8
c0002ba3:	83 e1 f0             	and    ecx,0xfffffff0
c0002ba6:	83 e7 0f             	and    edi,0xf
c0002ba9:	09 f9                	or     ecx,edi
c0002bab:	88 08                	mov    BYTE PTR [eax],cl
c0002bad:	eb 27                	jmp    c0002bd6 <put_fat+0x108>
c0002baf:	c1 ea 08             	shr    edx,0x8
c0002bb2:	89 f0                	mov    eax,esi
c0002bb4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bb7:	e8 ce fa ff ff       	call   c000268a <move_window>
c0002bbc:	89 c5                	mov    ebp,eax
c0002bbe:	85 c0                	test   eax,eax
c0002bc0:	75 59                	jne    c0002c1b <put_fat+0x14d>
c0002bc2:	01 db                	add    ebx,ebx
c0002bc4:	0f b7 d7             	movzx  edx,di
c0002bc7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bcd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002bd1:	e8 72 f5 ff ff       	call   c0002148 <st_word>
c0002bd6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bda:	eb 3f                	jmp    c0002c1b <put_fat+0x14d>
c0002bdc:	c1 ea 07             	shr    edx,0x7
c0002bdf:	89 f0                	mov    eax,esi
c0002be1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002be4:	e8 a1 fa ff ff       	call   c000268a <move_window>
c0002be9:	89 c5                	mov    ebp,eax
c0002beb:	85 c0                	test   eax,eax
c0002bed:	75 2c                	jne    c0002c1b <put_fat+0x14d>
c0002bef:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002bf5:	c1 e3 02             	shl    ebx,0x2
c0002bf8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002bfe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002c02:	89 d8                	mov    eax,ebx
c0002c04:	e8 27 f5 ff ff       	call   c0002130 <ld_dword>
c0002c09:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c0e:	09 f8                	or     eax,edi
c0002c10:	89 c2                	mov    edx,eax
c0002c12:	89 d8                	mov    eax,ebx
c0002c14:	e8 33 f5 ff ff       	call   c000214c <st_dword>
c0002c19:	eb bb                	jmp    c0002bd6 <put_fat+0x108>
c0002c1b:	83 c4 1c             	add    esp,0x1c
c0002c1e:	89 e8                	mov    eax,ebp
c0002c20:	5b                   	pop    ebx
c0002c21:	5e                   	pop    esi
c0002c22:	5f                   	pop    edi
c0002c23:	5d                   	pop    ebp
c0002c24:	c3                   	ret    

c0002c25 <dir_clear>:
c0002c25:	55                   	push   ebp
c0002c26:	57                   	push   edi
c0002c27:	56                   	push   esi
c0002c28:	89 c6                	mov    esi,eax
c0002c2a:	53                   	push   ebx
c0002c2b:	83 ec 1c             	sub    esp,0x1c
c0002c2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002c32:	e8 f0 f9 ff ff       	call   c0002627 <sync_window>
c0002c37:	85 c0                	test   eax,eax
c0002c39:	0f 85 c0 00 00 00    	jne    c0002cff <dir_clear+0xda>
c0002c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c43:	89 f0                	mov    eax,esi
c0002c45:	e8 30 f7 ff ff       	call   c000237a <clst2sect>
c0002c4a:	31 d2                	xor    edx,edx
c0002c4c:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002c4f:	89 c5                	mov    ebp,eax
c0002c51:	b9 00 02 00 00       	mov    ecx,0x200
c0002c56:	8d 46 34             	lea    eax,[esi+0x34]
c0002c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c5d:	e8 02 f5 ff ff       	call   c0002164 <mem_set>
c0002c62:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002c66:	c1 e3 09             	shl    ebx,0x9
c0002c69:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002c6f:	76 1b                	jbe    c0002c8c <dir_clear+0x67>
c0002c71:	bb 00 80 00 00       	mov    ebx,0x8000
c0002c76:	eb 14                	jmp    c0002c8c <dir_clear+0x67>
c0002c78:	83 ec 0c             	sub    esp,0xc
c0002c7b:	53                   	push   ebx
c0002c7c:	e8 eb 32 00 00       	call   c0005f6c <ff_memalloc>
c0002c81:	83 c4 10             	add    esp,0x10
c0002c84:	89 c7                	mov    edi,eax
c0002c86:	85 c0                	test   eax,eax
c0002c88:	75 7c                	jne    c0002d06 <dir_clear+0xe1>
c0002c8a:	d1 eb                	shr    ebx,1
c0002c8c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c92:	77 e4                	ja     c0002c78 <dir_clear+0x53>
c0002c94:	31 db                	xor    ebx,ebx
c0002c96:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002c9a:	39 d8                	cmp    eax,ebx
c0002c9c:	76 53                	jbe    c0002cf1 <dir_clear+0xcc>
c0002c9e:	6a 01                	push   0x1
c0002ca0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ca3:	50                   	push   eax
c0002ca4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002cac:	50                   	push   eax
c0002cad:	e8 3c f4 ff ff       	call   c00020ee <disk_write>
c0002cb2:	83 c4 10             	add    esp,0x10
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 38                	jne    c0002cf1 <dir_clear+0xcc>
c0002cb9:	43                   	inc    ebx
c0002cba:	eb da                	jmp    c0002c96 <dir_clear+0x71>
c0002cbc:	52                   	push   edx
c0002cbd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002cc0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002cc4:	50                   	push   eax
c0002cc5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002cc9:	57                   	push   edi
c0002cca:	50                   	push   eax
c0002ccb:	e8 1e f4 ff ff       	call   c00020ee <disk_write>
c0002cd0:	83 c4 10             	add    esp,0x10
c0002cd3:	85 c0                	test   eax,eax
c0002cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002cd9:	75 0a                	jne    c0002ce5 <dir_clear+0xc0>
c0002cdb:	01 d3                	add    ebx,edx
c0002cdd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002ce1:	39 d8                	cmp    eax,ebx
c0002ce3:	77 d7                	ja     c0002cbc <dir_clear+0x97>
c0002ce5:	83 ec 0c             	sub    esp,0xc
c0002ce8:	57                   	push   edi
c0002ce9:	e8 96 32 00 00       	call   c0005f84 <ff_memfree>
c0002cee:	83 c4 10             	add    esp,0x10
c0002cf1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002cf5:	39 d8                	cmp    eax,ebx
c0002cf7:	0f 95 c0             	setne  al
c0002cfa:	0f b6 c0             	movzx  eax,al
c0002cfd:	eb 19                	jmp    c0002d18 <dir_clear+0xf3>
c0002cff:	b8 01 00 00 00       	mov    eax,0x1
c0002d04:	eb 12                	jmp    c0002d18 <dir_clear+0xf3>
c0002d06:	89 d9                	mov    ecx,ebx
c0002d08:	31 d2                	xor    edx,edx
c0002d0a:	e8 55 f4 ff ff       	call   c0002164 <mem_set>
c0002d0f:	89 da                	mov    edx,ebx
c0002d11:	31 db                	xor    ebx,ebx
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	eb c5                	jmp    c0002cdd <dir_clear+0xb8>
c0002d18:	83 c4 1c             	add    esp,0x1c
c0002d1b:	5b                   	pop    ebx
c0002d1c:	5e                   	pop    esi
c0002d1d:	5f                   	pop    edi
c0002d1e:	5d                   	pop    ebp
c0002d1f:	c3                   	ret    

c0002d20 <create_name>:
c0002d20:	55                   	push   ebp
c0002d21:	57                   	push   edi
c0002d22:	89 d7                	mov    edi,edx
c0002d24:	56                   	push   esi
c0002d25:	31 f6                	xor    esi,esi
c0002d27:	53                   	push   ebx
c0002d28:	83 ec 3c             	sub    esp,0x3c
c0002d2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d2f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002d31:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0002d3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d42:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002d46:	e8 5e f4 ff ff       	call   c00021a9 <tchar2uni>
c0002d4b:	89 c3                	mov    ebx,eax
c0002d4d:	83 f8 ff             	cmp    eax,0xffffffff
c0002d50:	75 0a                	jne    c0002d5c <create_name+0x3c>
c0002d52:	b8 06 00 00 00       	mov    eax,0x6
c0002d57:	e9 93 02 00 00       	jmp    c0002fef <create_name+0x2cf>
c0002d5c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002d61:	76 0c                	jbe    c0002d6f <create_name+0x4f>
c0002d63:	c1 e8 10             	shr    eax,0x10
c0002d66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6a:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002d6e:	46                   	inc    esi
c0002d6f:	0f b7 d3             	movzx  edx,bx
c0002d72:	83 fa 1f             	cmp    edx,0x1f
c0002d75:	76 4a                	jbe    c0002dc1 <create_name+0xa1>
c0002d77:	83 fa 5c             	cmp    edx,0x5c
c0002d7a:	74 30                	je     c0002dac <create_name+0x8c>
c0002d7c:	83 fa 2f             	cmp    edx,0x2f
c0002d7f:	74 2b                	je     c0002dac <create_name+0x8c>
c0002d81:	83 fa 7f             	cmp    edx,0x7f
c0002d84:	77 0e                	ja     c0002d94 <create_name+0x74>
c0002d86:	b8 5e f7 02 c0       	mov    eax,0xc002f75e
c0002d8b:	e8 02 f4 ff ff       	call   c0002192 <chk_chr>
c0002d90:	85 c0                	test   eax,eax
c0002d92:	75 be                	jne    c0002d52 <create_name+0x32>
c0002d94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002d9a:	77 b6                	ja     c0002d52 <create_name+0x32>
c0002d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002da0:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002da4:	46                   	inc    esi
c0002da5:	eb 9b                	jmp    c0002d42 <create_name+0x22>
c0002da7:	40                   	inc    eax
c0002da8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002dac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002db0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002db3:	83 fa 2f             	cmp    edx,0x2f
c0002db6:	74 ef                	je     c0002da7 <create_name+0x87>
c0002db8:	83 fa 5c             	cmp    edx,0x5c
c0002dbb:	74 ea                	je     c0002da7 <create_name+0x87>
c0002dbd:	31 db                	xor    ebx,ebx
c0002dbf:	eb 02                	jmp    c0002dc3 <create_name+0xa3>
c0002dc1:	b3 04                	mov    bl,0x4
c0002dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dc7:	89 07                	mov    DWORD PTR [edi],eax
c0002dc9:	85 f6                	test   esi,esi
c0002dcb:	74 16                	je     c0002de3 <create_name+0xc3>
c0002dcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dd1:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002dd6:	83 f8 20             	cmp    eax,0x20
c0002dd9:	74 05                	je     c0002de0 <create_name+0xc0>
c0002ddb:	83 f8 2e             	cmp    eax,0x2e
c0002dde:	75 03                	jne    c0002de3 <create_name+0xc3>
c0002de0:	4e                   	dec    esi
c0002de1:	eb e6                	jmp    c0002dc9 <create_name+0xa9>
c0002de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002de7:	31 ff                	xor    edi,edi
c0002de9:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002def:	85 f6                	test   esi,esi
c0002df1:	0f 84 5b ff ff ff    	je     c0002d52 <create_name+0x32>
c0002df7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dfb:	8d 57 01             	lea    edx,[edi+0x1]
c0002dfe:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e02:	83 f8 20             	cmp    eax,0x20
c0002e05:	75 04                	jne    c0002e0b <create_name+0xeb>
c0002e07:	89 d7                	mov    edi,edx
c0002e09:	eb ec                	jmp    c0002df7 <create_name+0xd7>
c0002e0b:	85 ff                	test   edi,edi
c0002e0d:	75 05                	jne    c0002e14 <create_name+0xf4>
c0002e0f:	83 f8 2e             	cmp    eax,0x2e
c0002e12:	75 08                	jne    c0002e1c <create_name+0xfc>
c0002e14:	83 cb 03             	or     ebx,0x3
c0002e17:	eb 03                	jmp    c0002e1c <create_name+0xfc>
c0002e19:	4e                   	dec    esi
c0002e1a:	74 0c                	je     c0002e28 <create_name+0x108>
c0002e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e20:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002e26:	75 f1                	jne    c0002e19 <create_name+0xf9>
c0002e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e31:	83 c0 20             	add    eax,0x20
c0002e34:	ba 20 00 00 00       	mov    edx,0x20
c0002e39:	31 ed                	xor    ebp,ebp
c0002e3b:	e8 24 f3 ff ff       	call   c0002164 <mem_set>
c0002e40:	b9 08 00 00 00       	mov    ecx,0x8
c0002e45:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002e4a:	8d 47 01             	lea    eax,[edi+0x1]
c0002e4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e55:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e59:	89 c7                	mov    edi,eax
c0002e5b:	85 c0                	test   eax,eax
c0002e5d:	0f 84 25 01 00 00    	je     c0002f88 <create_name+0x268>
c0002e63:	83 f8 20             	cmp    eax,0x20
c0002e66:	74 0f                	je     c0002e77 <create_name+0x157>
c0002e68:	83 f8 2e             	cmp    eax,0x2e
c0002e6b:	75 13                	jne    c0002e80 <create_name+0x160>
c0002e6d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e71:	0f 84 6a 01 00 00    	je     c0002fe1 <create_name+0x2c1>
c0002e77:	83 cb 03             	or     ebx,0x3
c0002e7a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002e7e:	eb ca                	jmp    c0002e4a <create_name+0x12a>
c0002e80:	39 cd                	cmp    ebp,ecx
c0002e82:	73 0b                	jae    c0002e8f <create_name+0x16f>
c0002e84:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e88:	75 3f                	jne    c0002ec9 <create_name+0x1a9>
c0002e8a:	e9 52 01 00 00       	jmp    c0002fe1 <create_name+0x2c1>
c0002e8f:	83 f9 0b             	cmp    ecx,0xb
c0002e92:	75 0d                	jne    c0002ea1 <create_name+0x181>
c0002e94:	83 cb 03             	or     ebx,0x3
c0002e97:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e9c:	e9 e7 00 00 00       	jmp    c0002f88 <create_name+0x268>
c0002ea1:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002ea5:	74 0d                	je     c0002eb4 <create_name+0x194>
c0002ea7:	83 cb 03             	or     ebx,0x3
c0002eaa:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002eae:	0f 87 d4 00 00 00    	ja     c0002f88 <create_name+0x268>
c0002eb4:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002eb9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002ebd:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ec2:	bd 08 00 00 00       	mov    ebp,0x8
c0002ec7:	eb b1                	jmp    c0002e7a <create_name+0x15a>
c0002ec9:	83 f8 7f             	cmp    eax,0x7f
c0002ecc:	76 66                	jbe    c0002f34 <create_name+0x214>
c0002ece:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ed2:	89 d9                	mov    ecx,ebx
c0002ed4:	83 c9 02             	or     ecx,0x2
c0002ed7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002edb:	52                   	push   edx
c0002edc:	52                   	push   edx
c0002edd:	68 b5 01 00 00       	push   0x1b5
c0002ee2:	50                   	push   eax
c0002ee3:	e8 b4 30 00 00       	call   c0005f9c <ff_uni2oem>
c0002ee8:	83 c4 10             	add    esp,0x10
c0002eeb:	89 c7                	mov    edi,eax
c0002eed:	a8 80                	test   al,0x80
c0002eef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ef3:	74 0c                	je     c0002f01 <create_name+0x1e1>
c0002ef5:	83 e7 7f             	and    edi,0x7f
c0002ef8:	0f b6 bf 20 f8 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd07e0]
c0002eff:	eb 2a                	jmp    c0002f2b <create_name+0x20b>
c0002f01:	0f b7 c0             	movzx  eax,ax
c0002f04:	3d ff 00 00 00       	cmp    eax,0xff
c0002f09:	76 20                	jbe    c0002f2b <create_name+0x20b>
c0002f0b:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002f0e:	39 ea                	cmp    edx,ebp
c0002f10:	77 0a                	ja     c0002f1c <create_name+0x1fc>
c0002f12:	83 cb 03             	or     ebx,0x3
c0002f15:	89 cd                	mov    ebp,ecx
c0002f17:	e9 5e ff ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002f20:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002f24:	45                   	inc    ebp
c0002f25:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f29:	eb 4d                	jmp    c0002f78 <create_name+0x258>
c0002f2b:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f2f:	66 85 ff             	test   di,di
c0002f32:	74 19                	je     c0002f4d <create_name+0x22d>
c0002f34:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f38:	0f b7 d7             	movzx  edx,di
c0002f3b:	b8 67 f7 02 c0       	mov    eax,0xc002f767
c0002f40:	e8 4d f2 ff ff       	call   c0002192 <chk_chr>
c0002f45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002f49:	85 c0                	test   eax,eax
c0002f4b:	74 0a                	je     c0002f57 <create_name+0x237>
c0002f4d:	83 cb 03             	or     ebx,0x3
c0002f50:	bf 5f 00 00 00       	mov    edi,0x5f
c0002f55:	eb 21                	jmp    c0002f78 <create_name+0x258>
c0002f57:	8d 47 bf             	lea    eax,[edi-0x41]
c0002f5a:	66 83 f8 19          	cmp    ax,0x19
c0002f5e:	77 07                	ja     c0002f67 <create_name+0x247>
c0002f60:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002f65:	eb 11                	jmp    c0002f78 <create_name+0x258>
c0002f67:	8d 47 9f             	lea    eax,[edi-0x61]
c0002f6a:	66 83 f8 19          	cmp    ax,0x19
c0002f6e:	77 08                	ja     c0002f78 <create_name+0x258>
c0002f70:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002f75:	83 ef 20             	sub    edi,0x20
c0002f78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002f7c:	89 f8                	mov    eax,edi
c0002f7e:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002f82:	45                   	inc    ebp
c0002f83:	e9 f2 fe ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f8c:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002f90:	75 04                	jne    c0002f96 <create_name+0x276>
c0002f92:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002f96:	83 f9 08             	cmp    ecx,0x8
c0002f99:	75 05                	jne    c0002fa0 <create_name+0x280>
c0002f9b:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fa4:	83 e0 0c             	and    eax,0xc
c0002fa7:	83 f8 0c             	cmp    eax,0xc
c0002faa:	74 0c                	je     c0002fb8 <create_name+0x298>
c0002fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fb0:	83 e0 03             	and    eax,0x3
c0002fb3:	83 f8 03             	cmp    eax,0x3
c0002fb6:	75 05                	jne    c0002fbd <create_name+0x29d>
c0002fb8:	83 cb 02             	or     ebx,0x2
c0002fbb:	eb 19                	jmp    c0002fd6 <create_name+0x2b6>
c0002fbd:	f6 c3 02             	test   bl,0x2
c0002fc0:	75 14                	jne    c0002fd6 <create_name+0x2b6>
c0002fc2:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002fc7:	74 03                	je     c0002fcc <create_name+0x2ac>
c0002fc9:	83 cb 10             	or     ebx,0x10
c0002fcc:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002fd1:	74 03                	je     c0002fd6 <create_name+0x2b6>
c0002fd3:	83 cb 08             	or     ebx,0x8
c0002fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002fda:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002fdd:	31 c0                	xor    eax,eax
c0002fdf:	eb 0e                	jmp    c0002fef <create_name+0x2cf>
c0002fe1:	83 f9 0b             	cmp    ecx,0xb
c0002fe4:	0f 85 ca fe ff ff    	jne    c0002eb4 <create_name+0x194>
c0002fea:	e9 a5 fe ff ff       	jmp    c0002e94 <create_name+0x174>
c0002fef:	83 c4 3c             	add    esp,0x3c
c0002ff2:	5b                   	pop    ebx
c0002ff3:	5e                   	pop    esi
c0002ff4:	5f                   	pop    edi
c0002ff5:	5d                   	pop    ebp
c0002ff6:	c3                   	ret    

c0002ff7 <cmp_lfn>:
c0002ff7:	55                   	push   ebp
c0002ff8:	57                   	push   edi
c0002ff9:	89 d7                	mov    edi,edx
c0002ffb:	56                   	push   esi
c0002ffc:	53                   	push   ebx
c0002ffd:	83 ec 1c             	sub    esp,0x1c
c0003000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003004:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003007:	e8 17 f1 ff ff       	call   c0002123 <ld_word>
c000300c:	66 85 c0             	test   ax,ax
c000300f:	74 07                	je     c0003018 <cmp_lfn+0x21>
c0003011:	31 c0                	xor    eax,eax
c0003013:	e9 a1 00 00 00       	jmp    c00030b9 <cmp_lfn+0xc2>
c0003018:	8a 1f                	mov    bl,BYTE PTR [edi]
c000301a:	bd 01 00 00 00       	mov    ebp,0x1
c000301f:	83 e3 3f             	and    ebx,0x3f
c0003022:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000302a:	4b                   	dec    ebx
c000302b:	6b db 0d             	imul   ebx,ebx,0xd
c000302e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003032:	0f b6 80 a0 f8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0760]
c0003039:	01 f8                	add    eax,edi
c000303b:	e8 e3 f0 ff ff       	call   c0002123 <ld_word>
c0003040:	66 85 ed             	test   bp,bp
c0003043:	89 c6                	mov    esi,eax
c0003045:	74 3c                	je     c0003083 <cmp_lfn+0x8c>
c0003047:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000304d:	77 c2                	ja     c0003011 <cmp_lfn+0x1a>
c000304f:	83 ec 0c             	sub    esp,0xc
c0003052:	0f b7 c0             	movzx  eax,ax
c0003055:	50                   	push   eax
c0003056:	e8 59 30 00 00       	call   c00060b4 <ff_wtoupper>
c000305b:	89 c5                	mov    ebp,eax
c000305d:	8d 43 01             	lea    eax,[ebx+0x1]
c0003060:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003064:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003068:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000306c:	89 04 24             	mov    DWORD PTR [esp],eax
c000306f:	e8 40 30 00 00       	call   c00060b4 <ff_wtoupper>
c0003074:	83 c4 10             	add    esp,0x10
c0003077:	39 c5                	cmp    ebp,eax
c0003079:	75 96                	jne    c0003011 <cmp_lfn+0x1a>
c000307b:	89 f5                	mov    ebp,esi
c000307d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003081:	eb 0b                	jmp    c000308e <cmp_lfn+0x97>
c0003083:	0f b7 c8             	movzx  ecx,ax
c0003086:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c000308c:	75 83                	jne    c0003011 <cmp_lfn+0x1a>
c000308e:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003092:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003097:	75 95                	jne    c000302e <cmp_lfn+0x37>
c0003099:	f6 07 40             	test   BYTE PTR [edi],0x40
c000309c:	74 16                	je     c00030b4 <cmp_lfn+0xbd>
c000309e:	66 85 ed             	test   bp,bp
c00030a1:	74 11                	je     c00030b4 <cmp_lfn+0xbd>
c00030a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030a7:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00030ac:	0f 94 c0             	sete   al
c00030af:	0f b6 c0             	movzx  eax,al
c00030b2:	eb 05                	jmp    c00030b9 <cmp_lfn+0xc2>
c00030b4:	b8 01 00 00 00       	mov    eax,0x1
c00030b9:	83 c4 1c             	add    esp,0x1c
c00030bc:	5b                   	pop    ebx
c00030bd:	5e                   	pop    esi
c00030be:	5f                   	pop    edi
c00030bf:	5d                   	pop    ebp
c00030c0:	c3                   	ret    

c00030c1 <sync_fs>:
c00030c1:	56                   	push   esi
c00030c2:	53                   	push   ebx
c00030c3:	53                   	push   ebx
c00030c4:	89 c3                	mov    ebx,eax
c00030c6:	e8 5c f5 ff ff       	call   c0002627 <sync_window>
c00030cb:	85 c0                	test   eax,eax
c00030cd:	0f 85 9a 00 00 00    	jne    c000316d <sync_fs+0xac>
c00030d3:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00030d6:	75 7b                	jne    c0003153 <sync_fs+0x92>
c00030d8:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00030dc:	75 75                	jne    c0003153 <sync_fs+0x92>
c00030de:	b9 00 02 00 00       	mov    ecx,0x200
c00030e3:	8d 73 34             	lea    esi,[ebx+0x34]
c00030e6:	31 d2                	xor    edx,edx
c00030e8:	89 f0                	mov    eax,esi
c00030ea:	e8 75 f0 ff ff       	call   c0002164 <mem_set>
c00030ef:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00030f5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030fa:	e8 49 f0 ff ff       	call   c0002148 <st_word>
c00030ff:	ba 52 52 61 41       	mov    edx,0x41615252
c0003104:	89 f0                	mov    eax,esi
c0003106:	e8 41 f0 ff ff       	call   c000214c <st_dword>
c000310b:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0003111:	ba 72 72 41 61       	mov    edx,0x61417272
c0003116:	e8 31 f0 ff ff       	call   c000214c <st_dword>
c000311b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000311e:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0003124:	e8 23 f0 ff ff       	call   c000214c <st_dword>
c0003129:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000312c:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0003132:	e8 15 f0 ff ff       	call   c000214c <st_dword>
c0003137:	6a 01                	push   0x1
c0003139:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000313c:	40                   	inc    eax
c000313d:	50                   	push   eax
c000313e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003141:	56                   	push   esi
c0003142:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003146:	50                   	push   eax
c0003147:	e8 a2 ef ff ff       	call   c00020ee <disk_write>
c000314c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0003150:	83 c4 10             	add    esp,0x10
c0003153:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003157:	51                   	push   ecx
c0003158:	6a 00                	push   0x0
c000315a:	6a 00                	push   0x0
c000315c:	50                   	push   eax
c000315d:	e8 a2 ef ff ff       	call   c0002104 <disk_ioctl>
c0003162:	83 c4 10             	add    esp,0x10
c0003165:	85 c0                	test   eax,eax
c0003167:	0f 95 c0             	setne  al
c000316a:	0f b6 c0             	movzx  eax,al
c000316d:	5a                   	pop    edx
c000316e:	5b                   	pop    ebx
c000316f:	5e                   	pop    esi
c0003170:	c3                   	ret    

c0003171 <create_partition>:
c0003171:	55                   	push   ebp
c0003172:	0f b6 c0             	movzx  eax,al
c0003175:	57                   	push   edi
c0003176:	56                   	push   esi
c0003177:	53                   	push   ebx
c0003178:	83 ec 40             	sub    esp,0x40
c000317b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000317f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003183:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003187:	8d 44 24 30          	lea    eax,[esp+0x30]
c000318b:	50                   	push   eax
c000318c:	6a 01                	push   0x1
c000318e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003192:	e8 6d ef ff ff       	call   c0002104 <disk_ioctl>
c0003197:	83 c4 10             	add    esp,0x10
c000319a:	85 c0                	test   eax,eax
c000319c:	0f 85 6a 01 00 00    	jne    c000330c <create_partition+0x19b>
c00031a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00031a6:	b9 05 00 00 00       	mov    ecx,0x5
c00031ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00031af:	be 08 00 00 00       	mov    esi,0x8
c00031b4:	89 f0                	mov    eax,esi
c00031b6:	31 d2                	xor    edx,edx
c00031b8:	0f b6 d8             	movzx  ebx,al
c00031bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031bf:	f7 f3                	div    ebx
c00031c1:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00031c6:	76 0a                	jbe    c00031d2 <create_partition+0x61>
c00031c8:	d1 e6                	shl    esi,1
c00031ca:	49                   	dec    ecx
c00031cb:	75 e7                	jne    c00031b4 <create_partition+0x43>
c00031cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00031d2:	b9 00 02 00 00       	mov    ecx,0x200
c00031d7:	31 d2                	xor    edx,edx
c00031d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031dd:	e8 82 ef ff ff       	call   c0002164 <mem_set>
c00031e2:	b9 64 00 00 00       	mov    ecx,0x64
c00031e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031eb:	31 d2                	xor    edx,edx
c00031ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00031f5:	f7 f1                	div    ecx
c00031f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00031fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003200:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003204:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c000320a:	89 f0                	mov    eax,esi
c000320c:	0f b6 c0             	movzx  eax,al
c000320f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003213:	85 c9                	test   ecx,ecx
c0003215:	75 34                	jne    c000324b <create_partition+0xda>
c0003217:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000321b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003220:	05 fe 01 00 00       	add    eax,0x1fe
c0003225:	e8 1e ef ff ff       	call   c0002148 <st_word>
c000322a:	6a 01                	push   0x1
c000322c:	6a 00                	push   0x0
c000322e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003236:	e8 b3 ee ff ff       	call   c00020ee <disk_write>
c000323b:	83 c4 10             	add    esp,0x10
c000323e:	85 c0                	test   eax,eax
c0003240:	0f 95 c0             	setne  al
c0003243:	0f b6 c0             	movzx  eax,al
c0003246:	e9 c6 00 00 00       	jmp    c0003311 <create_partition+0x1a0>
c000324b:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000324f:	76 c6                	jbe    c0003217 <create_partition+0xa6>
c0003251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003255:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003259:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c000325c:	83 fe 64             	cmp    esi,0x64
c000325f:	77 0d                	ja     c000326e <create_partition+0xfd>
c0003261:	74 07                	je     c000326a <create_partition+0xf9>
c0003263:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003268:	eb 04                	jmp    c000326e <create_partition+0xfd>
c000326a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000326e:	31 c0                	xor    eax,eax
c0003270:	89 f2                	mov    edx,esi
c0003272:	01 ca                	add    edx,ecx
c0003274:	0f 92 c0             	setb   al
c0003277:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c000327b:	77 04                	ja     c0003281 <create_partition+0x110>
c000327d:	85 c0                	test   eax,eax
c000327f:	74 08                	je     c0003289 <create_partition+0x118>
c0003281:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003285:	29 ce                	sub    esi,ecx
c0003287:	eb 04                	jmp    c000328d <create_partition+0x11c>
c0003289:	85 f6                	test   esi,esi
c000328b:	74 8a                	je     c0003217 <create_partition+0xa6>
c000328d:	89 ca                	mov    edx,ecx
c000328f:	89 d8                	mov    eax,ebx
c0003291:	bf 3f 00 00 00       	mov    edi,0x3f
c0003296:	e8 b1 ee ff ff       	call   c000214c <st_dword>
c000329b:	8d 43 04             	lea    eax,[ebx+0x4]
c000329e:	89 f2                	mov    edx,esi
c00032a0:	83 c3 10             	add    ebx,0x10
c00032a3:	e8 a4 ee ff ff       	call   c000214c <st_dword>
c00032a8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00032ac:	31 d2                	xor    edx,edx
c00032ae:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c00032b1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00032b5:	89 c8                	mov    eax,ecx
c00032b7:	01 f1                	add    ecx,esi
c00032b9:	f7 f7                	div    edi
c00032bb:	89 d5                	mov    ebp,edx
c00032bd:	31 d2                	xor    edx,edx
c00032bf:	45                   	inc    ebp
c00032c0:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032c4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c00032c7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c00032ca:	89 c2                	mov    edx,eax
c00032cc:	8d 41 ff             	lea    eax,[ecx-0x1]
c00032cf:	c1 ea 02             	shr    edx,0x2
c00032d2:	83 e2 c0             	and    edx,0xffffffc0
c00032d5:	09 ea                	or     edx,ebp
c00032d7:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00032da:	31 d2                	xor    edx,edx
c00032dc:	f7 f7                	div    edi
c00032de:	89 d6                	mov    esi,edx
c00032e0:	31 d2                	xor    edx,edx
c00032e2:	46                   	inc    esi
c00032e3:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032e7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00032ea:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00032ed:	89 c7                	mov    edi,eax
c00032ef:	c1 ef 02             	shr    edi,0x2
c00032f2:	83 e7 c0             	and    edi,0xffffffc0
c00032f5:	09 fe                	or     esi,edi
c00032f7:	89 f2                	mov    edx,esi
c00032f9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00032fc:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003301:	0f 85 0c ff ff ff    	jne    c0003213 <create_partition+0xa2>
c0003307:	e9 0b ff ff ff       	jmp    c0003217 <create_partition+0xa6>
c000330c:	b8 01 00 00 00       	mov    eax,0x1
c0003311:	83 c4 3c             	add    esp,0x3c
c0003314:	5b                   	pop    ebx
c0003315:	5e                   	pop    esi
c0003316:	5f                   	pop    edi
c0003317:	5d                   	pop    ebp
c0003318:	c3                   	ret    

c0003319 <get_fileinfo>:
c0003319:	55                   	push   ebp
c000331a:	57                   	push   edi
c000331b:	56                   	push   esi
c000331c:	53                   	push   ebx
c000331d:	83 ec 1c             	sub    esp,0x1c
c0003320:	8b 30                	mov    esi,DWORD PTR [eax]
c0003322:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003326:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000332a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c000332e:	0f 84 d3 01 00 00    	je     c0003507 <get_fileinfo+0x1ee>
c0003334:	89 d3                	mov    ebx,edx
c0003336:	89 c6                	mov    esi,eax
c0003338:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000333c:	74 72                	je     c00033b0 <get_fileinfo+0x97>
c000333e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003346:	31 ed                	xor    ebp,ebp
c0003348:	31 ff                	xor    edi,edi
c000334a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000334e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003352:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003355:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003359:	89 c2                	mov    edx,eax
c000335b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335f:	85 c0                	test   eax,eax
c0003361:	74 41                	je     c00033a4 <get_fileinfo+0x8b>
c0003363:	0f b7 c5             	movzx  eax,bp
c0003366:	85 c0                	test   eax,eax
c0003368:	75 0d                	jne    c0003377 <get_fileinfo+0x5e>
c000336a:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003370:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003375:	76 22                	jbe    c0003399 <get_fileinfo+0x80>
c0003377:	c1 e0 10             	shl    eax,0x10
c000337a:	b9 ff 00 00 00       	mov    ecx,0xff
c000337f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003383:	29 f9                	sub    ecx,edi
c0003385:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003389:	e8 f3 ee ff ff       	call   c0002281 <put_utf>
c000338e:	0f b6 c0             	movzx  eax,al
c0003391:	85 c0                	test   eax,eax
c0003393:	74 0d                	je     c00033a2 <get_fileinfo+0x89>
c0003395:	01 c7                	add    edi,eax
c0003397:	31 d2                	xor    edx,edx
c0003399:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000339e:	89 d5                	mov    ebp,edx
c00033a0:	eb a8                	jmp    c000334a <get_fileinfo+0x31>
c00033a2:	31 ff                	xor    edi,edi
c00033a4:	66 85 ed             	test   bp,bp
c00033a7:	74 02                	je     c00033ab <get_fileinfo+0x92>
c00033a9:	31 ff                	xor    edi,edi
c00033ab:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00033b0:	31 ff                	xor    edi,edi
c00033b2:	31 c9                	xor    ecx,ecx
c00033b4:	83 f9 0a             	cmp    ecx,0xa
c00033b7:	0f 87 ac 00 00 00    	ja     c0003469 <get_fileinfo+0x150>
c00033bd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033c0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00033c3:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00033c7:	89 c2                	mov    edx,eax
c00033c9:	83 f8 20             	cmp    eax,0x20
c00033cc:	0f 84 90 00 00 00    	je     c0003462 <get_fileinfo+0x149>
c00033d2:	83 f8 05             	cmp    eax,0x5
c00033d5:	75 05                	jne    c00033dc <get_fileinfo+0xc3>
c00033d7:	ba e5 00 00 00       	mov    edx,0xe5
c00033dc:	83 ff 0b             	cmp    edi,0xb
c00033df:	77 0b                	ja     c00033ec <get_fileinfo+0xd3>
c00033e1:	83 fd 09             	cmp    ebp,0x9
c00033e4:	75 06                	jne    c00033ec <get_fileinfo+0xd3>
c00033e6:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00033eb:	47                   	inc    edi
c00033ec:	0f b7 c2             	movzx  eax,dx
c00033ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033f3:	e8 ab ed ff ff       	call   c00021a3 <dbc_1st>
c00033f8:	85 c0                	test   eax,eax
c00033fa:	74 2f                	je     c000342b <get_fileinfo+0x112>
c00033fc:	83 fd 08             	cmp    ebp,0x8
c00033ff:	74 2a                	je     c000342b <get_fileinfo+0x112>
c0003401:	83 fd 0b             	cmp    ebp,0xb
c0003404:	74 25                	je     c000342b <get_fileinfo+0x112>
c0003406:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003409:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000340d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003411:	e8 90 ed ff ff       	call   c00021a6 <dbc_2nd>
c0003416:	85 c0                	test   eax,eax
c0003418:	74 11                	je     c000342b <get_fileinfo+0x112>
c000341a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000341e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0003423:	c1 e0 08             	shl    eax,0x8
c0003426:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003429:	09 c2                	or     edx,eax
c000342b:	0f b7 d2             	movzx  edx,dx
c000342e:	50                   	push   eax
c000342f:	50                   	push   eax
c0003430:	68 b5 01 00 00       	push   0x1b5
c0003435:	52                   	push   edx
c0003436:	e8 01 2c 00 00       	call   c000603c <ff_oem2uni>
c000343b:	83 c4 10             	add    esp,0x10
c000343e:	0f b7 c0             	movzx  eax,ax
c0003441:	85 c0                	test   eax,eax
c0003443:	75 04                	jne    c0003449 <get_fileinfo+0x130>
c0003445:	31 ff                	xor    edi,edi
c0003447:	eb 20                	jmp    c0003469 <get_fileinfo+0x150>
c0003449:	b9 0c 00 00 00       	mov    ecx,0xc
c000344e:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003452:	29 f9                	sub    ecx,edi
c0003454:	e8 28 ee ff ff       	call   c0002281 <put_utf>
c0003459:	0f b6 c0             	movzx  eax,al
c000345c:	85 c0                	test   eax,eax
c000345e:	74 e5                	je     c0003445 <get_fileinfo+0x12c>
c0003460:	01 c7                	add    edi,eax
c0003462:	89 e9                	mov    ecx,ebp
c0003464:	e9 4b ff ff ff       	jmp    c00033b4 <get_fileinfo+0x9b>
c0003469:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000346e:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003472:	75 5f                	jne    c00034d3 <get_fileinfo+0x1ba>
c0003474:	85 ff                	test   edi,edi
c0003476:	75 0b                	jne    c0003483 <get_fileinfo+0x16a>
c0003478:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000347c:	ba 01 00 00 00       	mov    edx,0x1
c0003481:	eb 3e                	jmp    c00034c1 <get_fileinfo+0x1a8>
c0003483:	bf 08 00 00 00       	mov    edi,0x8
c0003488:	31 d2                	xor    edx,edx
c000348a:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003490:	84 c0                	test   al,al
c0003492:	74 2d                	je     c00034c1 <get_fileinfo+0x1a8>
c0003494:	66 83 f8 2e          	cmp    ax,0x2e
c0003498:	74 1b                	je     c00034b5 <get_fileinfo+0x19c>
c000349a:	8d 48 bf             	lea    ecx,[eax-0x41]
c000349d:	66 83 f9 19          	cmp    cx,0x19
c00034a1:	77 17                	ja     c00034ba <get_fileinfo+0x1a1>
c00034a3:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00034a6:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00034a9:	21 f9                	and    ecx,edi
c00034ab:	80 e1 18             	and    cl,0x18
c00034ae:	74 0a                	je     c00034ba <get_fileinfo+0x1a1>
c00034b0:	83 c0 20             	add    eax,0x20
c00034b3:	eb 05                	jmp    c00034ba <get_fileinfo+0x1a1>
c00034b5:	bf 10 00 00 00       	mov    edi,0x10
c00034ba:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00034be:	42                   	inc    edx
c00034bf:	eb c9                	jmp    c000348a <get_fileinfo+0x171>
c00034c1:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00034c6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034c9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00034cd:	75 04                	jne    c00034d3 <get_fileinfo+0x1ba>
c00034cf:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00034d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034d6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00034d9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00034dc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034df:	83 c0 1c             	add    eax,0x1c
c00034e2:	e8 49 ec ff ff       	call   c0002130 <ld_dword>
c00034e7:	89 03                	mov    DWORD PTR [ebx],eax
c00034e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034ec:	83 c0 16             	add    eax,0x16
c00034ef:	e8 2f ec ff ff       	call   c0002123 <ld_word>
c00034f4:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00034f8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034fb:	83 c0 18             	add    eax,0x18
c00034fe:	e8 20 ec ff ff       	call   c0002123 <ld_word>
c0003503:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003507:	83 c4 1c             	add    esp,0x1c
c000350a:	5b                   	pop    ebx
c000350b:	5e                   	pop    esi
c000350c:	5f                   	pop    edi
c000350d:	5d                   	pop    ebp
c000350e:	c3                   	ret    

c000350f <ld_clust.isra.0>:
c000350f:	56                   	push   esi
c0003510:	89 c6                	mov    esi,eax
c0003512:	53                   	push   ebx
c0003513:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003516:	89 d3                	mov    ebx,edx
c0003518:	e8 06 ec ff ff       	call   c0002123 <ld_word>
c000351d:	0f b7 c8             	movzx  ecx,ax
c0003520:	89 f0                	mov    eax,esi
c0003522:	3c 03                	cmp    al,0x3
c0003524:	75 0d                	jne    c0003533 <ld_clust.isra.0+0x24>
c0003526:	8d 43 14             	lea    eax,[ebx+0x14]
c0003529:	e8 f5 eb ff ff       	call   c0002123 <ld_word>
c000352e:	c1 e0 10             	shl    eax,0x10
c0003531:	09 c1                	or     ecx,eax
c0003533:	89 c8                	mov    eax,ecx
c0003535:	5b                   	pop    ebx
c0003536:	5e                   	pop    esi
c0003537:	c3                   	ret    

c0003538 <st_clust.isra.1>:
c0003538:	56                   	push   esi
c0003539:	89 c6                	mov    esi,eax
c000353b:	53                   	push   ebx
c000353c:	89 d3                	mov    ebx,edx
c000353e:	0f b7 d1             	movzx  edx,cx
c0003541:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003544:	e8 ff eb ff ff       	call   c0002148 <st_word>
c0003549:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000354c:	75 0f                	jne    c000355d <st_clust.isra.1+0x25>
c000354e:	c1 e9 10             	shr    ecx,0x10
c0003551:	8d 43 14             	lea    eax,[ebx+0x14]
c0003554:	89 ca                	mov    edx,ecx
c0003556:	5b                   	pop    ebx
c0003557:	5e                   	pop    esi
c0003558:	e9 eb eb ff ff       	jmp    c0002148 <st_word>
c000355d:	5b                   	pop    ebx
c000355e:	5e                   	pop    esi
c000355f:	c3                   	ret    

c0003560 <get_fat.isra.2>:
c0003560:	b9 01 00 00 00       	mov    ecx,0x1
c0003565:	83 fa 01             	cmp    edx,0x1
c0003568:	0f 86 f3 00 00 00    	jbe    c0003661 <get_fat.isra.2+0x101>
c000356e:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003571:	0f 83 ea 00 00 00    	jae    c0003661 <get_fat.isra.2+0x101>
c0003577:	55                   	push   ebp
c0003578:	57                   	push   edi
c0003579:	89 c7                	mov    edi,eax
c000357b:	56                   	push   esi
c000357c:	89 d6                	mov    esi,edx
c000357e:	53                   	push   ebx
c000357f:	83 ec 0c             	sub    esp,0xc
c0003582:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003585:	83 f8 02             	cmp    eax,0x2
c0003588:	74 78                	je     c0003602 <get_fat.isra.2+0xa2>
c000358a:	83 f8 03             	cmp    eax,0x3
c000358d:	0f 84 96 00 00 00    	je     c0003629 <get_fat.isra.2+0xc9>
c0003593:	48                   	dec    eax
c0003594:	0f 85 bd 00 00 00    	jne    c0003657 <get_fat.isra.2+0xf7>
c000359a:	89 d3                	mov    ebx,edx
c000359c:	89 f8                	mov    eax,edi
c000359e:	d1 eb                	shr    ebx,1
c00035a0:	01 d3                	add    ebx,edx
c00035a2:	89 da                	mov    edx,ebx
c00035a4:	c1 ea 09             	shr    edx,0x9
c00035a7:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035aa:	e8 db f0 ff ff       	call   c000268a <move_window>
c00035af:	85 c0                	test   eax,eax
c00035b1:	74 08                	je     c00035bb <get_fat.isra.2+0x5b>
c00035b3:	83 c9 ff             	or     ecx,0xffffffff
c00035b6:	e9 9c 00 00 00       	jmp    c0003657 <get_fat.isra.2+0xf7>
c00035bb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00035be:	89 f8                	mov    eax,edi
c00035c0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035c6:	89 ea                	mov    edx,ebp
c00035c8:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c00035cc:	c1 ea 09             	shr    edx,0x9
c00035cf:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035d2:	e8 b3 f0 ff ff       	call   c000268a <move_window>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 d8                	jne    c00035b3 <get_fat.isra.2+0x53>
c00035db:	0f b6 c3             	movzx  eax,bl
c00035de:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00035e4:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00035e9:	c1 e3 08             	shl    ebx,0x8
c00035ec:	09 c3                	or     ebx,eax
c00035ee:	89 d9                	mov    ecx,ebx
c00035f0:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00035f6:	83 e6 01             	and    esi,0x1
c00035f9:	74 5c                	je     c0003657 <get_fat.isra.2+0xf7>
c00035fb:	89 d9                	mov    ecx,ebx
c00035fd:	c1 e9 04             	shr    ecx,0x4
c0003600:	eb 55                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003602:	c1 ea 08             	shr    edx,0x8
c0003605:	89 f8                	mov    eax,edi
c0003607:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000360a:	e8 7b f0 ff ff       	call   c000268a <move_window>
c000360f:	85 c0                	test   eax,eax
c0003611:	75 a0                	jne    c00035b3 <get_fat.isra.2+0x53>
c0003613:	01 f6                	add    esi,esi
c0003615:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000361b:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000361f:	e8 ff ea ff ff       	call   c0002123 <ld_word>
c0003624:	0f b7 c8             	movzx  ecx,ax
c0003627:	eb 2e                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003629:	c1 ea 07             	shr    edx,0x7
c000362c:	89 f8                	mov    eax,edi
c000362e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003631:	e8 54 f0 ff ff       	call   c000268a <move_window>
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 75 ff ff ff    	jne    c00035b3 <get_fat.isra.2+0x53>
c000363e:	c1 e6 02             	shl    esi,0x2
c0003641:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003647:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000364b:	e8 e0 ea ff ff       	call   c0002130 <ld_dword>
c0003650:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003655:	89 c1                	mov    ecx,eax
c0003657:	83 c4 0c             	add    esp,0xc
c000365a:	89 c8                	mov    eax,ecx
c000365c:	5b                   	pop    ebx
c000365d:	5e                   	pop    esi
c000365e:	5f                   	pop    edi
c000365f:	5d                   	pop    ebp
c0003660:	c3                   	ret    
c0003661:	89 c8                	mov    eax,ecx
c0003663:	c3                   	ret    

c0003664 <dir_sdi>:
c0003664:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000366a:	0f 87 b6 00 00 00    	ja     c0003726 <dir_sdi+0xc2>
c0003670:	55                   	push   ebp
c0003671:	57                   	push   edi
c0003672:	56                   	push   esi
c0003673:	53                   	push   ebx
c0003674:	89 d3                	mov    ebx,edx
c0003676:	83 ec 1c             	sub    esp,0x1c
c0003679:	f6 c2 1f             	test   dl,0x1f
c000367c:	74 0a                	je     c0003688 <dir_sdi+0x24>
c000367e:	b8 02 00 00 00       	mov    eax,0x2
c0003683:	e9 96 00 00 00       	jmp    c000371e <dir_sdi+0xba>
c0003688:	89 c6                	mov    esi,eax
c000368a:	8b 38                	mov    edi,DWORD PTR [eax]
c000368c:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000368f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003692:	85 c9                	test   ecx,ecx
c0003694:	75 23                	jne    c00036b9 <dir_sdi+0x55>
c0003696:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003699:	76 07                	jbe    c00036a2 <dir_sdi+0x3e>
c000369b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000369e:	85 c0                	test   eax,eax
c00036a0:	75 15                	jne    c00036b7 <dir_sdi+0x53>
c00036a2:	89 da                	mov    edx,ebx
c00036a4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00036a8:	c1 ea 05             	shr    edx,0x5
c00036ab:	39 c2                	cmp    edx,eax
c00036ad:	73 cf                	jae    c000367e <dir_sdi+0x1a>
c00036af:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c00036b2:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036b5:	eb 3d                	jmp    c00036f4 <dir_sdi+0x90>
c00036b7:	89 c1                	mov    ecx,eax
c00036b9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00036bd:	c1 e5 09             	shl    ebp,0x9
c00036c0:	89 ca                	mov    edx,ecx
c00036c2:	39 eb                	cmp    ebx,ebp
c00036c4:	72 1c                	jb     c00036e2 <dir_sdi+0x7e>
c00036c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c8:	e8 93 fe ff ff       	call   c0003560 <get_fat.isra.2>
c00036cd:	89 c1                	mov    ecx,eax
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	74 45                	je     c0003719 <dir_sdi+0xb5>
c00036d4:	83 f8 01             	cmp    eax,0x1
c00036d7:	76 a5                	jbe    c000367e <dir_sdi+0x1a>
c00036d9:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00036dc:	76 a0                	jbe    c000367e <dir_sdi+0x1a>
c00036de:	29 eb                	sub    ebx,ebp
c00036e0:	eb de                	jmp    c00036c0 <dir_sdi+0x5c>
c00036e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036e6:	89 f8                	mov    eax,edi
c00036e8:	e8 8d ec ff ff       	call   c000237a <clst2sect>
c00036ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036f1:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036f4:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00036f7:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00036fa:	85 d2                	test   edx,edx
c00036fc:	74 80                	je     c000367e <dir_sdi+0x1a>
c00036fe:	89 d8                	mov    eax,ebx
c0003700:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003706:	c1 e8 09             	shr    eax,0x9
c0003709:	01 d0                	add    eax,edx
c000370b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000370e:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0003712:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003715:	31 c0                	xor    eax,eax
c0003717:	eb 05                	jmp    c000371e <dir_sdi+0xba>
c0003719:	b8 01 00 00 00       	mov    eax,0x1
c000371e:	83 c4 1c             	add    esp,0x1c
c0003721:	5b                   	pop    ebx
c0003722:	5e                   	pop    esi
c0003723:	5f                   	pop    edi
c0003724:	5d                   	pop    ebp
c0003725:	c3                   	ret    
c0003726:	b8 02 00 00 00       	mov    eax,0x2
c000372b:	c3                   	ret    

c000372c <create_chain>:
c000372c:	55                   	push   ebp
c000372d:	89 c5                	mov    ebp,eax
c000372f:	57                   	push   edi
c0003730:	89 d7                	mov    edi,edx
c0003732:	56                   	push   esi
c0003733:	53                   	push   ebx
c0003734:	83 ec 1c             	sub    esp,0x1c
c0003737:	85 d2                	test   edx,edx
c0003739:	8b 30                	mov    esi,DWORD PTR [eax]
c000373b:	75 0e                	jne    c000374b <create_chain+0x1f>
c000373d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003740:	85 c9                	test   ecx,ecx
c0003742:	74 34                	je     c0003778 <create_chain+0x4c>
c0003744:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003747:	77 34                	ja     c000377d <create_chain+0x51>
c0003749:	eb 2d                	jmp    c0003778 <create_chain+0x4c>
c000374b:	89 f0                	mov    eax,esi
c000374d:	e8 0e fe ff ff       	call   c0003560 <get_fat.isra.2>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	83 f8 01             	cmp    eax,0x1
c0003757:	77 0a                	ja     c0003763 <create_chain+0x37>
c0003759:	bb 01 00 00 00       	mov    ebx,0x1
c000375e:	e9 fe 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003763:	83 f8 ff             	cmp    eax,0xffffffff
c0003766:	0f 84 f2 00 00 00    	je     c000385e <create_chain+0x132>
c000376c:	89 f9                	mov    ecx,edi
c000376e:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003771:	76 0a                	jbe    c000377d <create_chain+0x51>
c0003773:	e9 e9 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003778:	b9 01 00 00 00       	mov    ecx,0x1
c000377d:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003781:	75 07                	jne    c000378a <create_chain+0x5e>
c0003783:	31 db                	xor    ebx,ebx
c0003785:	e9 d7 00 00 00       	jmp    c0003861 <create_chain+0x135>
c000378a:	39 f9                	cmp    ecx,edi
c000378c:	75 46                	jne    c00037d4 <create_chain+0xa8>
c000378e:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003791:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003794:	77 05                	ja     c000379b <create_chain+0x6f>
c0003796:	bb 02 00 00 00       	mov    ebx,0x2
c000379b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000379f:	89 da                	mov    edx,ebx
c00037a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037a4:	e8 b7 fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037a9:	83 f8 01             	cmp    eax,0x1
c00037ac:	74 ab                	je     c0003759 <create_chain+0x2d>
c00037ae:	83 f8 ff             	cmp    eax,0xffffffff
c00037b1:	0f 84 a7 00 00 00    	je     c000385e <create_chain+0x132>
c00037b7:	85 c0                	test   eax,eax
c00037b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037bd:	74 11                	je     c00037d0 <create_chain+0xa4>
c00037bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00037c2:	83 f8 01             	cmp    eax,0x1
c00037c5:	76 0d                	jbe    c00037d4 <create_chain+0xa8>
c00037c7:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00037ca:	73 08                	jae    c00037d4 <create_chain+0xa8>
c00037cc:	89 c1                	mov    ecx,eax
c00037ce:	eb 04                	jmp    c00037d4 <create_chain+0xa8>
c00037d0:	85 db                	test   ebx,ebx
c00037d2:	75 3d                	jne    c0003811 <create_chain+0xe5>
c00037d4:	89 cb                	mov    ebx,ecx
c00037d6:	43                   	inc    ebx
c00037d7:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00037da:	77 0a                	ja     c00037e6 <create_chain+0xba>
c00037dc:	83 f9 01             	cmp    ecx,0x1
c00037df:	76 a2                	jbe    c0003783 <create_chain+0x57>
c00037e1:	bb 02 00 00 00       	mov    ebx,0x2
c00037e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037ea:	89 da                	mov    edx,ebx
c00037ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037ef:	e8 6c fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037f4:	85 c0                	test   eax,eax
c00037f6:	74 19                	je     c0003811 <create_chain+0xe5>
c00037f8:	83 f8 01             	cmp    eax,0x1
c00037fb:	0f 84 58 ff ff ff    	je     c0003759 <create_chain+0x2d>
c0003801:	40                   	inc    eax
c0003802:	74 5a                	je     c000385e <create_chain+0x132>
c0003804:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003808:	39 cb                	cmp    ebx,ecx
c000380a:	75 ca                	jne    c00037d6 <create_chain+0xaa>
c000380c:	e9 72 ff ff ff       	jmp    c0003783 <create_chain+0x57>
c0003811:	83 c9 ff             	or     ecx,0xffffffff
c0003814:	89 da                	mov    edx,ebx
c0003816:	89 f0                	mov    eax,esi
c0003818:	e8 b1 f2 ff ff       	call   c0002ace <put_fat>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 36                	jne    c0003857 <create_chain+0x12b>
c0003821:	85 ff                	test   edi,edi
c0003823:	75 16                	jne    c000383b <create_chain+0x10f>
c0003825:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003828:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000382b:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000382e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003831:	39 d0                	cmp    eax,edx
c0003833:	77 17                	ja     c000384c <create_chain+0x120>
c0003835:	48                   	dec    eax
c0003836:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003839:	eb 11                	jmp    c000384c <create_chain+0x120>
c000383b:	89 d9                	mov    ecx,ebx
c000383d:	89 fa                	mov    edx,edi
c000383f:	89 f0                	mov    eax,esi
c0003841:	e8 88 f2 ff ff       	call   c0002ace <put_fat>
c0003846:	85 c0                	test   eax,eax
c0003848:	74 db                	je     c0003825 <create_chain+0xf9>
c000384a:	eb 0b                	jmp    c0003857 <create_chain+0x12b>
c000384c:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c000384f:	83 c8 01             	or     eax,0x1
c0003852:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003855:	eb 0a                	jmp    c0003861 <create_chain+0x135>
c0003857:	48                   	dec    eax
c0003858:	0f 85 fb fe ff ff    	jne    c0003759 <create_chain+0x2d>
c000385e:	83 cb ff             	or     ebx,0xffffffff
c0003861:	83 c4 1c             	add    esp,0x1c
c0003864:	89 d8                	mov    eax,ebx
c0003866:	5b                   	pop    ebx
c0003867:	5e                   	pop    esi
c0003868:	5f                   	pop    edi
c0003869:	5d                   	pop    ebp
c000386a:	c3                   	ret    

c000386b <remove_chain>:
c000386b:	55                   	push   ebp
c000386c:	57                   	push   edi
c000386d:	56                   	push   esi
c000386e:	89 d6                	mov    esi,edx
c0003870:	53                   	push   ebx
c0003871:	83 ec 0c             	sub    esp,0xc
c0003874:	83 fa 01             	cmp    edx,0x1
c0003877:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003879:	76 6a                	jbe    c00038e5 <remove_chain+0x7a>
c000387b:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000387e:	76 65                	jbe    c00038e5 <remove_chain+0x7a>
c0003880:	89 c5                	mov    ebp,eax
c0003882:	89 ca                	mov    edx,ecx
c0003884:	85 c9                	test   ecx,ecx
c0003886:	74 0e                	je     c0003896 <remove_chain+0x2b>
c0003888:	83 c9 ff             	or     ecx,0xffffffff
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 3c f2 ff ff       	call   c0002ace <put_fat>
c0003892:	85 c0                	test   eax,eax
c0003894:	75 5b                	jne    c00038f1 <remove_chain+0x86>
c0003896:	89 f2                	mov    edx,esi
c0003898:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000389b:	e8 c0 fc ff ff       	call   c0003560 <get_fat.isra.2>
c00038a0:	89 c7                	mov    edi,eax
c00038a2:	85 c0                	test   eax,eax
c00038a4:	75 04                	jne    c00038aa <remove_chain+0x3f>
c00038a6:	31 c0                	xor    eax,eax
c00038a8:	eb 47                	jmp    c00038f1 <remove_chain+0x86>
c00038aa:	83 f8 01             	cmp    eax,0x1
c00038ad:	74 36                	je     c00038e5 <remove_chain+0x7a>
c00038af:	83 f8 ff             	cmp    eax,0xffffffff
c00038b2:	74 38                	je     c00038ec <remove_chain+0x81>
c00038b4:	31 c9                	xor    ecx,ecx
c00038b6:	89 f2                	mov    edx,esi
c00038b8:	89 d8                	mov    eax,ebx
c00038ba:	e8 0f f2 ff ff       	call   c0002ace <put_fat>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2e                	jne    c00038f1 <remove_chain+0x86>
c00038c3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00038c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c9:	8d 4a fe             	lea    ecx,[edx-0x2]
c00038cc:	39 c8                	cmp    eax,ecx
c00038ce:	73 0d                	jae    c00038dd <remove_chain+0x72>
c00038d0:	40                   	inc    eax
c00038d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00038d4:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00038d7:	83 c8 01             	or     eax,0x1
c00038da:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00038dd:	89 fe                	mov    esi,edi
c00038df:	39 fa                	cmp    edx,edi
c00038e1:	77 b3                	ja     c0003896 <remove_chain+0x2b>
c00038e3:	eb c1                	jmp    c00038a6 <remove_chain+0x3b>
c00038e5:	b8 02 00 00 00       	mov    eax,0x2
c00038ea:	eb 05                	jmp    c00038f1 <remove_chain+0x86>
c00038ec:	b8 01 00 00 00       	mov    eax,0x1
c00038f1:	83 c4 0c             	add    esp,0xc
c00038f4:	5b                   	pop    ebx
c00038f5:	5e                   	pop    esi
c00038f6:	5f                   	pop    edi
c00038f7:	5d                   	pop    ebp
c00038f8:	c3                   	ret    

c00038f9 <dir_next>:
c00038f9:	55                   	push   ebp
c00038fa:	57                   	push   edi
c00038fb:	56                   	push   esi
c00038fc:	53                   	push   ebx
c00038fd:	83 ec 1c             	sub    esp,0x1c
c0003900:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003903:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003905:	83 c7 20             	add    edi,0x20
c0003908:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c000390e:	76 07                	jbe    c0003917 <dir_next+0x1e>
c0003910:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003917:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000391a:	b9 04 00 00 00       	mov    ecx,0x4
c000391f:	85 f6                	test   esi,esi
c0003921:	0f 84 cd 00 00 00    	je     c00039f4 <dir_next+0xfb>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	89 d1                	mov    ecx,edx
c000392b:	89 f8                	mov    eax,edi
c000392d:	25 ff 01 00 00       	and    eax,0x1ff
c0003932:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003936:	0f 85 a8 00 00 00    	jne    c00039e4 <dir_next+0xeb>
c000393c:	46                   	inc    esi
c000393d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003940:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003943:	85 d2                	test   edx,edx
c0003945:	75 22                	jne    c0003969 <dir_next+0x70>
c0003947:	89 fa                	mov    edx,edi
c0003949:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000394d:	c1 ea 05             	shr    edx,0x5
c0003950:	39 c2                	cmp    edx,eax
c0003952:	0f 82 8c 00 00 00    	jb     c00039e4 <dir_next+0xeb>
c0003958:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000395f:	b9 04 00 00 00       	mov    ecx,0x4
c0003964:	e9 8b 00 00 00       	jmp    c00039f4 <dir_next+0xfb>
c0003969:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000396d:	89 fe                	mov    esi,edi
c000396f:	48                   	dec    eax
c0003970:	c1 ee 09             	shr    esi,0x9
c0003973:	85 f0                	test   eax,esi
c0003975:	75 6d                	jne    c00039e4 <dir_next+0xeb>
c0003977:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000397b:	89 e8                	mov    eax,ebp
c000397d:	e8 de fb ff ff       	call   c0003560 <get_fat.isra.2>
c0003982:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003986:	89 c6                	mov    esi,eax
c0003988:	83 f8 01             	cmp    eax,0x1
c000398b:	77 07                	ja     c0003994 <dir_next+0x9b>
c000398d:	b9 02 00 00 00       	mov    ecx,0x2
c0003992:	eb 60                	jmp    c00039f4 <dir_next+0xfb>
c0003994:	83 f8 ff             	cmp    eax,0xffffffff
c0003997:	75 07                	jne    c00039a0 <dir_next+0xa7>
c0003999:	b9 01 00 00 00       	mov    ecx,0x1
c000399e:	eb 54                	jmp    c00039f4 <dir_next+0xfb>
c00039a0:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00039a3:	77 30                	ja     c00039d5 <dir_next+0xdc>
c00039a5:	85 c9                	test   ecx,ecx
c00039a7:	74 af                	je     c0003958 <dir_next+0x5f>
c00039a9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	e8 79 fd ff ff       	call   c000372c <create_chain>
c00039b3:	b9 07 00 00 00       	mov    ecx,0x7
c00039b8:	89 c6                	mov    esi,eax
c00039ba:	85 c0                	test   eax,eax
c00039bc:	74 36                	je     c00039f4 <dir_next+0xfb>
c00039be:	83 f8 01             	cmp    eax,0x1
c00039c1:	74 ca                	je     c000398d <dir_next+0x94>
c00039c3:	83 f8 ff             	cmp    eax,0xffffffff
c00039c6:	74 d1                	je     c0003999 <dir_next+0xa0>
c00039c8:	89 c2                	mov    edx,eax
c00039ca:	89 e8                	mov    eax,ebp
c00039cc:	e8 54 f2 ff ff       	call   c0002c25 <dir_clear>
c00039d1:	85 c0                	test   eax,eax
c00039d3:	75 c4                	jne    c0003999 <dir_next+0xa0>
c00039d5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00039d8:	89 f2                	mov    edx,esi
c00039da:	89 e8                	mov    eax,ebp
c00039dc:	e8 99 e9 ff ff       	call   c000237a <clst2sect>
c00039e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00039e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00039e8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00039eb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00039ef:	31 c9                	xor    ecx,ecx
c00039f1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00039f4:	83 c4 1c             	add    esp,0x1c
c00039f7:	89 c8                	mov    eax,ecx
c00039f9:	5b                   	pop    ebx
c00039fa:	5e                   	pop    esi
c00039fb:	5f                   	pop    edi
c00039fc:	5d                   	pop    ebp
c00039fd:	c3                   	ret    

c00039fe <dir_alloc>:
c00039fe:	55                   	push   ebp
c00039ff:	89 c5                	mov    ebp,eax
c0003a01:	57                   	push   edi
c0003a02:	89 d7                	mov    edi,edx
c0003a04:	56                   	push   esi
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	53                   	push   ebx
c0003a08:	83 ec 0c             	sub    esp,0xc
c0003a0b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a0d:	e8 52 fc ff ff       	call   c0003664 <dir_sdi>
c0003a12:	85 c0                	test   eax,eax
c0003a14:	75 3b                	jne    c0003a51 <dir_alloc+0x53>
c0003a16:	31 db                	xor    ebx,ebx
c0003a18:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003a1b:	89 f0                	mov    eax,esi
c0003a1d:	e8 68 ec ff ff       	call   c000268a <move_window>
c0003a22:	85 c0                	test   eax,eax
c0003a24:	75 2b                	jne    c0003a51 <dir_alloc+0x53>
c0003a26:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003a29:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003a2c:	85 d2                	test   edx,edx
c0003a2e:	74 08                	je     c0003a38 <dir_alloc+0x3a>
c0003a30:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a36:	75 07                	jne    c0003a3f <dir_alloc+0x41>
c0003a38:	43                   	inc    ebx
c0003a39:	39 fb                	cmp    ebx,edi
c0003a3b:	75 04                	jne    c0003a41 <dir_alloc+0x43>
c0003a3d:	eb 1c                	jmp    c0003a5b <dir_alloc+0x5d>
c0003a3f:	31 db                	xor    ebx,ebx
c0003a41:	ba 01 00 00 00       	mov    edx,0x1
c0003a46:	89 e8                	mov    eax,ebp
c0003a48:	e8 ac fe ff ff       	call   c00038f9 <dir_next>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	74 c7                	je     c0003a18 <dir_alloc+0x1a>
c0003a51:	83 f8 04             	cmp    eax,0x4
c0003a54:	75 05                	jne    c0003a5b <dir_alloc+0x5d>
c0003a56:	b8 07 00 00 00       	mov    eax,0x7
c0003a5b:	83 c4 0c             	add    esp,0xc
c0003a5e:	5b                   	pop    ebx
c0003a5f:	5e                   	pop    esi
c0003a60:	5f                   	pop    edi
c0003a61:	5d                   	pop    ebp
c0003a62:	c3                   	ret    

c0003a63 <dir_read>:
c0003a63:	55                   	push   ebp
c0003a64:	57                   	push   edi
c0003a65:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a6a:	56                   	push   esi
c0003a6b:	be 04 00 00 00       	mov    esi,0x4
c0003a70:	53                   	push   ebx
c0003a71:	89 c3                	mov    ebx,eax
c0003a73:	83 ec 1c             	sub    esp,0x1c
c0003a76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a7a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003a7c:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a81:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a84:	85 d2                	test   edx,edx
c0003a86:	0f 84 e3 00 00 00    	je     c0003b6f <dir_read+0x10c>
c0003a8c:	89 e8                	mov    eax,ebp
c0003a8e:	e8 f7 eb ff ff       	call   c000268a <move_window>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 dd 00 00 00    	jne    c0003b7a <dir_read+0x117>
c0003a9d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa0:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003aa3:	88 04 24             	mov    BYTE PTR [esp],al
c0003aa6:	85 c0                	test   eax,eax
c0003aa8:	0f 84 c7 00 00 00    	je     c0003b75 <dir_read+0x112>
c0003aae:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003ab1:	83 e1 3f             	and    ecx,0x3f
c0003ab4:	83 f8 2e             	cmp    eax,0x2e
c0003ab7:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003aba:	0f 84 95 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003ac0:	3d e5 00 00 00       	cmp    eax,0xe5
c0003ac5:	0f 84 8a 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003acb:	0f b6 c9             	movzx  ecx,cl
c0003ace:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003ad2:	83 e1 df             	and    ecx,0xffffffdf
c0003ad5:	83 f9 08             	cmp    ecx,0x8
c0003ad8:	0f 94 c1             	sete   cl
c0003adb:	0f b6 c9             	movzx  ecx,cl
c0003ade:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003ae2:	75 71                	jne    c0003b55 <dir_read+0xf2>
c0003ae4:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003ae9:	75 4a                	jne    c0003b35 <dir_read+0xd2>
c0003aeb:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003aef:	74 16                	je     c0003b07 <dir_read+0xa4>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003afb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003aff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b02:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b05:	eb 0e                	jmp    c0003b15 <dir_read+0xb2>
c0003b07:	89 f9                	mov    ecx,edi
c0003b09:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b0e:	0f b6 c9             	movzx  ecx,cl
c0003b11:	39 c1                	cmp    ecx,eax
c0003b13:	75 45                	jne    c0003b5a <dir_read+0xf7>
c0003b15:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b19:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b1e:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003b21:	75 37                	jne    c0003b5a <dir_read+0xf7>
c0003b23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003b26:	e8 6c e8 ff ff       	call   c0002397 <pick_lfn>
c0003b2b:	85 c0                	test   eax,eax
c0003b2d:	74 2b                	je     c0003b5a <dir_read+0xf7>
c0003b2f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003b32:	4f                   	dec    edi
c0003b33:	eb 25                	jmp    c0003b5a <dir_read+0xf7>
c0003b35:	89 f8                	mov    eax,edi
c0003b37:	84 c0                	test   al,al
c0003b39:	75 11                	jne    c0003b4c <dir_read+0xe9>
c0003b3b:	89 d0                	mov    eax,edx
c0003b3d:	e8 32 ea ff ff       	call   c0002574 <sum_sfn>
c0003b42:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b46:	75 04                	jne    c0003b4c <dir_read+0xe9>
c0003b48:	31 f6                	xor    esi,esi
c0003b4a:	eb 35                	jmp    c0003b81 <dir_read+0x11e>
c0003b4c:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b53:	eb 2c                	jmp    c0003b81 <dir_read+0x11e>
c0003b55:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b5a:	31 d2                	xor    edx,edx
c0003b5c:	89 d8                	mov    eax,ebx
c0003b5e:	e8 96 fd ff ff       	call   c00038f9 <dir_next>
c0003b63:	89 c6                	mov    esi,eax
c0003b65:	85 c0                	test   eax,eax
c0003b67:	0f 84 14 ff ff ff    	je     c0003a81 <dir_read+0x1e>
c0003b6d:	eb 0b                	jmp    c0003b7a <dir_read+0x117>
c0003b6f:	85 f6                	test   esi,esi
c0003b71:	74 d5                	je     c0003b48 <dir_read+0xe5>
c0003b73:	eb 05                	jmp    c0003b7a <dir_read+0x117>
c0003b75:	be 04 00 00 00       	mov    esi,0x4
c0003b7a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003b81:	83 c4 1c             	add    esp,0x1c
c0003b84:	89 f0                	mov    eax,esi
c0003b86:	5b                   	pop    ebx
c0003b87:	5e                   	pop    esi
c0003b88:	5f                   	pop    edi
c0003b89:	5d                   	pop    ebp
c0003b8a:	c3                   	ret    

c0003b8b <dir_remove>:
c0003b8b:	57                   	push   edi
c0003b8c:	56                   	push   esi
c0003b8d:	53                   	push   ebx
c0003b8e:	89 c3                	mov    ebx,eax
c0003b90:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003b93:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b95:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003b98:	83 fa ff             	cmp    edx,0xffffffff
c0003b9b:	74 09                	je     c0003ba6 <dir_remove+0x1b>
c0003b9d:	e8 c2 fa ff ff       	call   c0003664 <dir_sdi>
c0003ba2:	85 c0                	test   eax,eax
c0003ba4:	75 34                	jne    c0003bda <dir_remove+0x4f>
c0003ba6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ba9:	89 f0                	mov    eax,esi
c0003bab:	e8 da ea ff ff       	call   c000268a <move_window>
c0003bb0:	85 c0                	test   eax,eax
c0003bb2:	75 1c                	jne    c0003bd0 <dir_remove+0x45>
c0003bb4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bb7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003bba:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bbe:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003bc1:	73 17                	jae    c0003bda <dir_remove+0x4f>
c0003bc3:	31 d2                	xor    edx,edx
c0003bc5:	89 d8                	mov    eax,ebx
c0003bc7:	e8 2d fd ff ff       	call   c00038f9 <dir_next>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	74 d6                	je     c0003ba6 <dir_remove+0x1b>
c0003bd0:	83 f8 04             	cmp    eax,0x4
c0003bd3:	75 05                	jne    c0003bda <dir_remove+0x4f>
c0003bd5:	b8 02 00 00 00       	mov    eax,0x2
c0003bda:	5b                   	pop    ebx
c0003bdb:	5e                   	pop    esi
c0003bdc:	5f                   	pop    edi
c0003bdd:	c3                   	ret    

c0003bde <dir_find>:
c0003bde:	55                   	push   ebp
c0003bdf:	31 d2                	xor    edx,edx
c0003be1:	57                   	push   edi
c0003be2:	56                   	push   esi
c0003be3:	53                   	push   ebx
c0003be4:	89 c3                	mov    ebx,eax
c0003be6:	83 ec 1c             	sub    esp,0x1c
c0003be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0003beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bef:	89 d8                	mov    eax,ebx
c0003bf1:	e8 6e fa ff ff       	call   c0003664 <dir_sdi>
c0003bf6:	89 c6                	mov    esi,eax
c0003bf8:	85 c0                	test   eax,eax
c0003bfa:	0f 85 1d 01 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c00:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003c07:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003c0c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c11:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c18:	e8 6d ea ff ff       	call   c000268a <move_window>
c0003c1d:	89 c6                	mov    esi,eax
c0003c1f:	85 c0                	test   eax,eax
c0003c21:	0f 85 f6 00 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c27:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003c2a:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003c2e:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003c32:	85 c9                	test   ecx,ecx
c0003c34:	0f 84 de 00 00 00    	je     c0003d18 <dir_find+0x13a>
c0003c3a:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003c3d:	89 d0                	mov    eax,edx
c0003c3f:	83 e0 3f             	and    eax,0x3f
c0003c42:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003c48:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003c4b:	0f 84 a6 00 00 00    	je     c0003cf7 <dir_find+0x119>
c0003c51:	80 e2 08             	and    dl,0x8
c0003c54:	0f b6 c0             	movzx  eax,al
c0003c57:	74 0b                	je     c0003c64 <dir_find+0x86>
c0003c59:	83 f8 0f             	cmp    eax,0xf
c0003c5c:	0f 85 95 00 00 00    	jne    c0003cf7 <dir_find+0x119>
c0003c62:	eb 05                	jmp    c0003c69 <dir_find+0x8b>
c0003c64:	83 f8 0f             	cmp    eax,0xf
c0003c67:	75 62                	jne    c0003ccb <dir_find+0xed>
c0003c69:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003c6d:	0f 85 90 00 00 00    	jne    c0003d03 <dir_find+0x125>
c0003c73:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003c78:	74 17                	je     c0003c91 <dir_find+0xb3>
c0003c7a:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003c7d:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003c85:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003c89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003c8f:	eb 13                	jmp    c0003ca4 <dir_find+0xc6>
c0003c91:	89 f8                	mov    eax,edi
c0003c93:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c98:	0f b6 d0             	movzx  edx,al
c0003c9b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003ca0:	39 c2                	cmp    edx,eax
c0003ca2:	75 5f                	jne    c0003d03 <dir_find+0x125>
c0003ca4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003ca8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003cad:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003cb0:	75 51                	jne    c0003d03 <dir_find+0x125>
c0003cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cb6:	89 ea                	mov    edx,ebp
c0003cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbb:	e8 37 f3 ff ff       	call   c0002ff7 <cmp_lfn>
c0003cc0:	85 c0                	test   eax,eax
c0003cc2:	74 3f                	je     c0003d03 <dir_find+0x125>
c0003cc4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003cc8:	4f                   	dec    edi
c0003cc9:	eb 38                	jmp    c0003d03 <dir_find+0x125>
c0003ccb:	89 f8                	mov    eax,edi
c0003ccd:	84 c0                	test   al,al
c0003ccf:	75 0d                	jne    c0003cde <dir_find+0x100>
c0003cd1:	89 e8                	mov    eax,ebp
c0003cd3:	e8 9c e8 ff ff       	call   c0002574 <sum_sfn>
c0003cd8:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003cdc:	74 3f                	je     c0003d1d <dir_find+0x13f>
c0003cde:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003ce2:	75 13                	jne    c0003cf7 <dir_find+0x119>
c0003ce4:	8d 53 20             	lea    edx,[ebx+0x20]
c0003ce7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cec:	89 e8                	mov    eax,ebp
c0003cee:	e8 7c e4 ff ff       	call   c000216f <mem_cmp>
c0003cf3:	85 c0                	test   eax,eax
c0003cf5:	74 26                	je     c0003d1d <dir_find+0x13f>
c0003cf7:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003cfe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	89 d8                	mov    eax,ebx
c0003d07:	e8 ed fb ff ff       	call   c00038f9 <dir_next>
c0003d0c:	89 c6                	mov    esi,eax
c0003d0e:	85 c0                	test   eax,eax
c0003d10:	0f 84 fb fe ff ff    	je     c0003c11 <dir_find+0x33>
c0003d16:	eb 05                	jmp    c0003d1d <dir_find+0x13f>
c0003d18:	be 04 00 00 00       	mov    esi,0x4
c0003d1d:	83 c4 1c             	add    esp,0x1c
c0003d20:	89 f0                	mov    eax,esi
c0003d22:	5b                   	pop    ebx
c0003d23:	5e                   	pop    esi
c0003d24:	5f                   	pop    edi
c0003d25:	5d                   	pop    ebp
c0003d26:	c3                   	ret    

c0003d27 <follow_path>:
c0003d27:	56                   	push   esi
c0003d28:	53                   	push   ebx
c0003d29:	89 c3                	mov    ebx,eax
c0003d2b:	83 ec 14             	sub    esp,0x14
c0003d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003d32:	8b 30                	mov    esi,DWORD PTR [eax]
c0003d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d38:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003d3b:	83 fa 5c             	cmp    edx,0x5c
c0003d3e:	75 07                	jne    c0003d47 <follow_path+0x20>
c0003d40:	40                   	inc    eax
c0003d41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d45:	eb ed                	jmp    c0003d34 <follow_path+0xd>
c0003d47:	83 fa 2f             	cmp    edx,0x2f
c0003d4a:	74 f4                	je     c0003d40 <follow_path+0x19>
c0003d4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003d53:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003d56:	77 3e                	ja     c0003d96 <follow_path+0x6f>
c0003d58:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003d5c:	31 d2                	xor    edx,edx
c0003d5e:	89 d8                	mov    eax,ebx
c0003d60:	e8 ff f8 ff ff       	call   c0003664 <dir_sdi>
c0003d65:	eb 4f                	jmp    c0003db6 <follow_path+0x8f>
c0003d67:	89 d8                	mov    eax,ebx
c0003d69:	e8 70 fe ff ff       	call   c0003bde <dir_find>
c0003d6e:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003d71:	85 c0                	test   eax,eax
c0003d73:	75 32                	jne    c0003da7 <follow_path+0x80>
c0003d75:	80 e2 04             	and    dl,0x4
c0003d78:	75 3c                	jne    c0003db6 <follow_path+0x8f>
c0003d7a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003d7e:	74 31                	je     c0003db1 <follow_path+0x8a>
c0003d80:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003d83:	25 ff 01 00 00       	and    eax,0x1ff
c0003d88:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003d8c:	8a 06                	mov    al,BYTE PTR [esi]
c0003d8e:	e8 7c f7 ff ff       	call   c000350f <ld_clust.isra.0>
c0003d93:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d96:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003d9a:	89 d8                	mov    eax,ebx
c0003d9c:	e8 7f ef ff ff       	call   c0002d20 <create_name>
c0003da1:	85 c0                	test   eax,eax
c0003da3:	74 c2                	je     c0003d67 <follow_path+0x40>
c0003da5:	eb 0f                	jmp    c0003db6 <follow_path+0x8f>
c0003da7:	83 f8 04             	cmp    eax,0x4
c0003daa:	75 0a                	jne    c0003db6 <follow_path+0x8f>
c0003dac:	80 e2 04             	and    dl,0x4
c0003daf:	75 05                	jne    c0003db6 <follow_path+0x8f>
c0003db1:	b8 05 00 00 00       	mov    eax,0x5
c0003db6:	83 c4 14             	add    esp,0x14
c0003db9:	5b                   	pop    ebx
c0003dba:	5e                   	pop    esi
c0003dbb:	c3                   	ret    

c0003dbc <dir_register>:
c0003dbc:	55                   	push   ebp
c0003dbd:	57                   	push   edi
c0003dbe:	56                   	push   esi
c0003dbf:	be 06 00 00 00       	mov    esi,0x6
c0003dc4:	53                   	push   ebx
c0003dc5:	83 ec 2c             	sub    esp,0x2c
c0003dc8:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003dcb:	80 e2 a0             	and    dl,0xa0
c0003dce:	0f 85 66 01 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003dd4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003dd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003dde:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003de5:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003dea:	74 06                	je     c0003df2 <dir_register+0x36>
c0003dec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003df0:	eb ef                	jmp    c0003de1 <dir_register+0x25>
c0003df2:	89 c3                	mov    ebx,eax
c0003df4:	b9 0c 00 00 00       	mov    ecx,0xc
c0003df9:	8d 40 20             	lea    eax,[eax+0x20]
c0003dfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e00:	89 c2                	mov    edx,eax
c0003e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003e06:	e8 44 e3 ff ff       	call   c000214f <mem_cpy>
c0003e0b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003e10:	74 48                	je     c0003e5a <dir_register+0x9e>
c0003e12:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003e16:	bd 01 00 00 00       	mov    ebp,0x1
c0003e1b:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003e1e:	55                   	push   ebp
c0003e1f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003e23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e27:	e8 86 e6 ff ff       	call   c00024b2 <gen_numname>
c0003e2c:	58                   	pop    eax
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 aa fd ff ff       	call   c0003bde <dir_find>
c0003e34:	89 c6                	mov    esi,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	75 10                	jne    c0003e4a <dir_register+0x8e>
c0003e3a:	45                   	inc    ebp
c0003e3b:	83 fd 64             	cmp    ebp,0x64
c0003e3e:	75 db                	jne    c0003e1b <dir_register+0x5f>
c0003e40:	be 07 00 00 00       	mov    esi,0x7
c0003e45:	e9 f0 00 00 00       	jmp    c0003f3a <dir_register+0x17e>
c0003e4a:	83 f8 04             	cmp    eax,0x4
c0003e4d:	0f 85 e7 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e53:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003e57:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003e5a:	bd 01 00 00 00       	mov    ebp,0x1
c0003e5f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003e64:	74 13                	je     c0003e79 <dir_register+0xbd>
c0003e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e6a:	b9 0d 00 00 00       	mov    ecx,0xd
c0003e6f:	83 c0 0c             	add    eax,0xc
c0003e72:	31 d2                	xor    edx,edx
c0003e74:	f7 f1                	div    ecx
c0003e76:	8d 68 01             	lea    ebp,[eax+0x1]
c0003e79:	89 ea                	mov    edx,ebp
c0003e7b:	89 d8                	mov    eax,ebx
c0003e7d:	e8 7c fb ff ff       	call   c00039fe <dir_alloc>
c0003e82:	89 c6                	mov    esi,eax
c0003e84:	85 c0                	test   eax,eax
c0003e86:	0f 85 ae 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e8c:	4d                   	dec    ebp
c0003e8d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003e91:	74 67                	je     c0003efa <dir_register+0x13e>
c0003e93:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003e96:	89 e8                	mov    eax,ebp
c0003e98:	c1 e0 05             	shl    eax,0x5
c0003e9b:	29 c2                	sub    edx,eax
c0003e9d:	89 d8                	mov    eax,ebx
c0003e9f:	e8 c0 f7 ff ff       	call   c0003664 <dir_sdi>
c0003ea4:	89 c6                	mov    esi,eax
c0003ea6:	85 c0                	test   eax,eax
c0003ea8:	0f 85 8c 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb2:	e8 bd e6 ff ff       	call   c0002574 <sum_sfn>
c0003eb7:	0f b6 e8             	movzx  ebp,al
c0003eba:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ebd:	89 f8                	mov    eax,edi
c0003ebf:	e8 c6 e7 ff ff       	call   c000268a <move_window>
c0003ec4:	89 c6                	mov    esi,eax
c0003ec6:	85 c0                	test   eax,eax
c0003ec8:	75 70                	jne    c0003f3a <dir_register+0x17e>
c0003eca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003ecf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ed2:	83 ec 0c             	sub    esp,0xc
c0003ed5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ed8:	55                   	push   ebp
c0003ed9:	e8 39 e5 ff ff       	call   c0002417 <put_lfn>
c0003ede:	31 d2                	xor    edx,edx
c0003ee0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ee4:	89 d8                	mov    eax,ebx
c0003ee6:	e8 0e fa ff ff       	call   c00038f9 <dir_next>
c0003eeb:	83 c4 10             	add    esp,0x10
c0003eee:	89 c6                	mov    esi,eax
c0003ef0:	85 c0                	test   eax,eax
c0003ef2:	75 46                	jne    c0003f3a <dir_register+0x17e>
c0003ef4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003ef8:	75 c0                	jne    c0003eba <dir_register+0xfe>
c0003efa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003efd:	89 f8                	mov    eax,edi
c0003eff:	e8 86 e7 ff ff       	call   c000268a <move_window>
c0003f04:	89 c6                	mov    esi,eax
c0003f06:	85 c0                	test   eax,eax
c0003f08:	75 30                	jne    c0003f3a <dir_register+0x17e>
c0003f0a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f0d:	b9 20 00 00 00       	mov    ecx,0x20
c0003f12:	31 d2                	xor    edx,edx
c0003f14:	e8 4b e2 ff ff       	call   c0002164 <mem_set>
c0003f19:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f20:	b9 0b 00 00 00       	mov    ecx,0xb
c0003f25:	e8 25 e2 ff ff       	call   c000214f <mem_cpy>
c0003f2a:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003f2d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f30:	83 e0 18             	and    eax,0x18
c0003f33:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003f36:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f3a:	83 c4 2c             	add    esp,0x2c
c0003f3d:	89 f0                	mov    eax,esi
c0003f3f:	5b                   	pop    ebx
c0003f40:	5e                   	pop    esi
c0003f41:	5f                   	pop    edi
c0003f42:	5d                   	pop    ebp
c0003f43:	c3                   	ret    

c0003f44 <f_mount>:
c0003f44:	53                   	push   ebx
c0003f45:	83 ec 18             	sub    esp,0x18
c0003f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003f4c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003f50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003f58:	e8 37 e6 ff ff       	call   c0002594 <get_ldnumber>
c0003f5d:	89 c2                	mov    edx,eax
c0003f5f:	b8 0b 00 00 00       	mov    eax,0xb
c0003f64:	85 d2                	test   edx,edx
c0003f66:	78 39                	js     c0003fa1 <f_mount+0x5d>
c0003f68:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003f6f:	85 c0                	test   eax,eax
c0003f71:	74 03                	je     c0003f76 <f_mount+0x32>
c0003f73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f7a:	85 c0                	test   eax,eax
c0003f7c:	74 03                	je     c0003f81 <f_mount+0x3d>
c0003f7e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f85:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003f8c:	31 c0                	xor    eax,eax
c0003f8e:	84 db                	test   bl,bl
c0003f90:	74 0f                	je     c0003fa1 <f_mount+0x5d>
c0003f92:	31 c9                	xor    ecx,ecx
c0003f94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003f98:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003f9c:	e8 3c e8 ff ff       	call   c00027dd <mount_volume>
c0003fa1:	83 c4 18             	add    esp,0x18
c0003fa4:	5b                   	pop    ebx
c0003fa5:	c3                   	ret    

c0003fa6 <f_open>:
c0003fa6:	55                   	push   ebp
c0003fa7:	b8 09 00 00 00       	mov    eax,0x9
c0003fac:	57                   	push   edi
c0003fad:	56                   	push   esi
c0003fae:	53                   	push   ebx
c0003faf:	83 ec 5c             	sub    esp,0x5c
c0003fb2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003fb6:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003fba:	85 db                	test   ebx,ebx
c0003fbc:	0f 84 9f 02 00 00    	je     c0004261 <f_open+0x2bb>
c0003fc2:	89 fd                	mov    ebp,edi
c0003fc4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fc8:	83 e5 3f             	and    ebp,0x3f
c0003fcb:	89 e8                	mov    eax,ebp
c0003fcd:	89 ee                	mov    esi,ebp
c0003fcf:	0f b6 c8             	movzx  ecx,al
c0003fd2:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003fd6:	e8 02 e8 ff ff       	call   c00027dd <mount_volume>
c0003fdb:	85 c0                	test   eax,eax
c0003fdd:	0f 85 78 02 00 00    	jne    c000425b <f_open+0x2b5>
c0003fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe7:	83 ec 0c             	sub    esp,0xc
c0003fea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003fee:	68 00 02 00 00       	push   0x200
c0003ff3:	e8 74 1f 00 00       	call   c0005f6c <ff_memalloc>
c0003ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ffc:	83 c4 10             	add    esp,0x10
c0003fff:	b8 11 00 00 00       	mov    eax,0x11
c0004004:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004009:	0f 84 52 02 00 00    	je     c0004261 <f_open+0x2bb>
c000400f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004013:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004017:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000401b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000401e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004022:	e8 00 fd ff ff       	call   c0003d27 <follow_path>
c0004027:	85 c0                	test   eax,eax
c0004029:	75 0c                	jne    c0004037 <f_open+0x91>
c000402b:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004030:	74 05                	je     c0004037 <f_open+0x91>
c0004032:	b8 06 00 00 00       	mov    eax,0x6
c0004037:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000403d:	0f 84 d5 00 00 00    	je     c0004118 <f_open+0x172>
c0004043:	85 c0                	test   eax,eax
c0004045:	74 21                	je     c0004068 <f_open+0xc2>
c0004047:	83 f8 04             	cmp    eax,0x4
c000404a:	0f 85 f0 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004050:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004054:	e8 63 fd ff ff       	call   c0003dbc <dir_register>
c0004059:	85 c0                	test   eax,eax
c000405b:	0f 85 df 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004061:	83 cd 08             	or     ebp,0x8
c0004064:	89 ee                	mov    esi,ebp
c0004066:	eb 2c                	jmp    c0004094 <f_open+0xee>
c0004068:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c000406c:	b8 07 00 00 00       	mov    eax,0x7
c0004071:	80 e2 11             	and    dl,0x11
c0004074:	0f 85 c6 01 00 00    	jne    c0004240 <f_open+0x29a>
c000407a:	b8 08 00 00 00       	mov    eax,0x8
c000407f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004085:	0f 85 b5 01 00 00    	jne    c0004240 <f_open+0x29a>
c000408b:	83 e7 08             	and    edi,0x8
c000408e:	0f 84 b1 00 00 00    	je     c0004145 <f_open+0x19f>
c0004094:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000409c:	89 ea                	mov    edx,ebp
c000409e:	8a 00                	mov    al,BYTE PTR [eax]
c00040a0:	e8 6a f4 ff ff       	call   c000350f <ld_clust.isra.0>
c00040a5:	ba 00 00 21 50       	mov    edx,0x50210000
c00040aa:	89 c7                	mov    edi,eax
c00040ac:	8d 45 0e             	lea    eax,[ebp+0xe]
c00040af:	e8 98 e0 ff ff       	call   c000214c <st_dword>
c00040b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040b8:	31 c9                	xor    ecx,ecx
c00040ba:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00040be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00040c6:	e8 6d f4 ff ff       	call   c0003538 <st_clust.isra.1>
c00040cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040cf:	31 d2                	xor    edx,edx
c00040d1:	83 c0 1c             	add    eax,0x1c
c00040d4:	e8 73 e0 ff ff       	call   c000214c <st_dword>
c00040d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040dd:	85 ff                	test   edi,edi
c00040df:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040e3:	74 60                	je     c0004145 <f_open+0x19f>
c00040e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040e9:	31 c9                	xor    ecx,ecx
c00040eb:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c00040ee:	89 fa                	mov    edx,edi
c00040f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00040f4:	e8 72 f7 ff ff       	call   c000386b <remove_chain>
c00040f9:	85 c0                	test   eax,eax
c00040fb:	0f 85 3f 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004101:	89 ea                	mov    edx,ebp
c0004103:	4f                   	dec    edi
c0004104:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004108:	e8 7d e5 ff ff       	call   c000268a <move_window>
c000410d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004111:	85 c0                	test   eax,eax
c0004113:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0004116:	eb 27                	jmp    c000413f <f_open+0x199>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 20 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004120:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004124:	b8 04 00 00 00       	mov    eax,0x4
c0004129:	f6 c2 10             	test   dl,0x10
c000412c:	0f 85 0e 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004132:	83 e7 02             	and    edi,0x2
c0004135:	74 0e                	je     c0004145 <f_open+0x19f>
c0004137:	b8 07 00 00 00       	mov    eax,0x7
c000413c:	80 e2 01             	and    dl,0x1
c000413f:	0f 85 fb 00 00 00    	jne    c0004240 <f_open+0x29a>
c0004145:	f7 c6 08 00 00 00    	test   esi,0x8
c000414b:	74 03                	je     c0004150 <f_open+0x1aa>
c000414d:	83 ce 40             	or     esi,0x40
c0004150:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004154:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004158:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000415b:	89 fa                	mov    edx,edi
c000415d:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0004160:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004163:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004166:	e8 a4 f3 ff ff       	call   c000350f <ld_clust.isra.0>
c000416b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000416e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004171:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004174:	e8 b7 df ff ff       	call   c0002130 <ld_dword>
c0004179:	89 2b                	mov    DWORD PTR [ebx],ebp
c000417b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000417e:	31 d2                	xor    edx,edx
c0004180:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004184:	b9 00 02 00 00       	mov    ecx,0x200
c0004189:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000418d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004191:	89 f0                	mov    eax,esi
c0004193:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000419a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000419d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00041a4:	89 f8                	mov    eax,edi
c00041a6:	e8 b9 df ff ff       	call   c0002164 <mem_set>
c00041ab:	83 e6 20             	and    esi,0x20
c00041ae:	75 07                	jne    c00041b7 <f_open+0x211>
c00041b0:	31 c0                	xor    eax,eax
c00041b2:	e9 89 00 00 00       	jmp    c0004240 <f_open+0x29a>
c00041b7:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00041ba:	85 ed                	test   ebp,ebp
c00041bc:	74 f2                	je     c00041b0 <f_open+0x20a>
c00041be:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c00041c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00041c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00041c8:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c00041cc:	c1 e6 09             	shl    esi,0x9
c00041cf:	39 ee                	cmp    esi,ebp
c00041d1:	73 1c                	jae    c00041ef <f_open+0x249>
c00041d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d5:	29 f5                	sub    ebp,esi
c00041d7:	e8 84 f3 ff ff       	call   c0003560 <get_fat.isra.2>
c00041dc:	89 c2                	mov    edx,eax
c00041de:	83 f8 01             	cmp    eax,0x1
c00041e1:	76 10                	jbe    c00041f3 <f_open+0x24d>
c00041e3:	83 f8 ff             	cmp    eax,0xffffffff
c00041e6:	75 e7                	jne    c00041cf <f_open+0x229>
c00041e8:	b8 01 00 00 00       	mov    eax,0x1
c00041ed:	eb 09                	jmp    c00041f8 <f_open+0x252>
c00041ef:	31 c0                	xor    eax,eax
c00041f1:	eb 05                	jmp    c00041f8 <f_open+0x252>
c00041f3:	b8 02 00 00 00       	mov    eax,0x2
c00041f8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00041fb:	85 c0                	test   eax,eax
c00041fd:	75 41                	jne    c0004240 <f_open+0x29a>
c00041ff:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0004205:	74 a9                	je     c00041b0 <f_open+0x20a>
c0004207:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000420b:	89 f0                	mov    eax,esi
c000420d:	e8 68 e1 ff ff       	call   c000237a <clst2sect>
c0004212:	89 c2                	mov    edx,eax
c0004214:	b8 02 00 00 00       	mov    eax,0x2
c0004219:	85 d2                	test   edx,edx
c000421b:	74 23                	je     c0004240 <f_open+0x29a>
c000421d:	c1 ed 09             	shr    ebp,0x9
c0004220:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0004224:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004227:	6a 01                	push   0x1
c0004229:	50                   	push   eax
c000422a:	57                   	push   edi
c000422b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000422f:	50                   	push   eax
c0004230:	e8 a3 de ff ff       	call   c00020d8 <disk_read>
c0004235:	83 c4 10             	add    esp,0x10
c0004238:	85 c0                	test   eax,eax
c000423a:	0f 95 c0             	setne  al
c000423d:	0f b6 c0             	movzx  eax,al
c0004240:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004244:	83 ec 0c             	sub    esp,0xc
c0004247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000424b:	e8 34 1d 00 00       	call   c0005f84 <ff_memfree>
c0004250:	83 c4 10             	add    esp,0x10
c0004253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004257:	85 c0                	test   eax,eax
c0004259:	74 06                	je     c0004261 <f_open+0x2bb>
c000425b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004261:	83 c4 5c             	add    esp,0x5c
c0004264:	5b                   	pop    ebx
c0004265:	5e                   	pop    esi
c0004266:	5f                   	pop    edi
c0004267:	5d                   	pop    ebp
c0004268:	c3                   	ret    

c0004269 <f_read>:
c0004269:	55                   	push   ebp
c000426a:	57                   	push   edi
c000426b:	56                   	push   esi
c000426c:	53                   	push   ebx
c000426d:	83 ec 2c             	sub    esp,0x2c
c0004270:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004274:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004278:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000427e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004282:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004286:	89 d8                	mov    eax,ebx
c0004288:	e8 54 e3 ff ff       	call   c00025e1 <validate>
c000428d:	89 c5                	mov    ebp,eax
c000428f:	85 c0                	test   eax,eax
c0004291:	0f 85 c7 01 00 00    	jne    c000445e <f_read+0x1f5>
c0004297:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000429b:	85 ed                	test   ebp,ebp
c000429d:	0f 85 bb 01 00 00    	jne    c000445e <f_read+0x1f5>
c00042a3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00042a7:	0f 84 ac 01 00 00    	je     c0004459 <f_read+0x1f0>
c00042ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042b0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00042b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042b7:	39 f0                	cmp    eax,esi
c00042b9:	0f 86 b0 00 00 00    	jbe    c000436f <f_read+0x106>
c00042bf:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00042c3:	e9 a7 00 00 00       	jmp    c000436f <f_read+0x106>
c00042c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cb:	a9 ff 01 00 00       	test   eax,0x1ff
c00042d0:	0f 85 56 01 00 00    	jne    c000442c <f_read+0x1c3>
c00042d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00042da:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c00042de:	89 c2                	mov    edx,eax
c00042e0:	4f                   	dec    edi
c00042e1:	c1 ea 09             	shr    edx,0x9
c00042e4:	21 d7                	and    edi,edx
c00042e6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00042ea:	0f 84 8f 00 00 00    	je     c000437f <f_read+0x116>
c00042f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042f4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042f7:	89 c8                	mov    eax,ecx
c00042f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042fd:	e8 78 e0 ff ff       	call   c000237a <clst2sect>
c0004302:	85 c0                	test   eax,eax
c0004304:	0f 84 8d 00 00 00    	je     c0004397 <f_read+0x12e>
c000430a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000430e:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0004316:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0004319:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000431d:	0f 86 bf 00 00 00    	jbe    c00043e2 <f_read+0x179>
c0004323:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0004327:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000432b:	c1 ee 09             	shr    esi,0x9
c000432e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004332:	01 f2                	add    edx,esi
c0004334:	39 c2                	cmp    edx,eax
c0004336:	76 06                	jbe    c000433e <f_read+0xd5>
c0004338:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000433c:	89 c6                	mov    esi,eax
c000433e:	56                   	push   esi
c000433f:	57                   	push   edi
c0004340:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004344:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004348:	50                   	push   eax
c0004349:	e8 8a dd ff ff       	call   c00020d8 <disk_read>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	85 c0                	test   eax,eax
c0004353:	75 55                	jne    c00043aa <f_read+0x141>
c0004355:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004359:	75 65                	jne    c00043c0 <f_read+0x157>
c000435b:	c1 e6 09             	shl    esi,0x9
c000435e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004362:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004366:	01 30                	add    DWORD PTR [eax],esi
c0004368:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000436c:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000436f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004374:	0f 85 4e ff ff ff    	jne    c00042c8 <f_read+0x5f>
c000437a:	e9 df 00 00 00       	jmp    c000445e <f_read+0x1f5>
c000437f:	85 c0                	test   eax,eax
c0004381:	75 05                	jne    c0004388 <f_read+0x11f>
c0004383:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004386:	eb 0a                	jmp    c0004392 <f_read+0x129>
c0004388:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000438d:	e8 ce f1 ff ff       	call   c0003560 <get_fat.isra.2>
c0004392:	83 f8 01             	cmp    eax,0x1
c0004395:	77 0e                	ja     c00043a5 <f_read+0x13c>
c0004397:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000439b:	bd 02 00 00 00       	mov    ebp,0x2
c00043a0:	e9 b9 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043a5:	83 f8 ff             	cmp    eax,0xffffffff
c00043a8:	75 0e                	jne    c00043b8 <f_read+0x14f>
c00043aa:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043ae:	bd 01 00 00 00       	mov    ebp,0x1
c00043b3:	e9 a6 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043b8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043bb:	e9 30 ff ff ff       	jmp    c00042f0 <f_read+0x87>
c00043c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043c3:	29 f8                	sub    eax,edi
c00043c5:	39 f0                	cmp    eax,esi
c00043c7:	73 92                	jae    c000435b <f_read+0xf2>
c00043c9:	c1 e0 09             	shl    eax,0x9
c00043cc:	8d 53 28             	lea    edx,[ebx+0x28]
c00043cf:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00043d3:	b9 00 02 00 00       	mov    ecx,0x200
c00043d8:	e8 72 dd ff ff       	call   c000214f <mem_cpy>
c00043dd:	e9 79 ff ff ff       	jmp    c000435b <f_read+0xf2>
c00043e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043e5:	39 f8                	cmp    eax,edi
c00043e7:	74 40                	je     c0004429 <f_read+0x1c0>
c00043e9:	8d 73 28             	lea    esi,[ebx+0x28]
c00043ec:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043f0:	74 1e                	je     c0004410 <f_read+0x1a7>
c00043f2:	6a 01                	push   0x1
c00043f4:	50                   	push   eax
c00043f5:	56                   	push   esi
c00043f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043fa:	50                   	push   eax
c00043fb:	e8 ee dc ff ff       	call   c00020ee <disk_write>
c0004400:	83 c4 10             	add    esp,0x10
c0004403:	85 c0                	test   eax,eax
c0004405:	75 a3                	jne    c00043aa <f_read+0x141>
c0004407:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000440a:	83 e0 7f             	and    eax,0x7f
c000440d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004410:	6a 01                	push   0x1
c0004412:	57                   	push   edi
c0004413:	56                   	push   esi
c0004414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004418:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000441c:	50                   	push   eax
c000441d:	e8 b6 dc ff ff       	call   c00020d8 <disk_read>
c0004422:	83 c4 10             	add    esp,0x10
c0004425:	85 c0                	test   eax,eax
c0004427:	75 81                	jne    c00043aa <f_read+0x141>
c0004429:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000442c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000442f:	ba 00 02 00 00       	mov    edx,0x200
c0004434:	25 ff 01 00 00       	and    eax,0x1ff
c0004439:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000443d:	29 c2                	sub    edx,eax
c000443f:	39 d6                	cmp    esi,edx
c0004441:	76 02                	jbe    c0004445 <f_read+0x1dc>
c0004443:	89 d6                	mov    esi,edx
c0004445:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004449:	89 f1                	mov    ecx,esi
c000444b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000444f:	e8 fb dc ff ff       	call   c000214f <mem_cpy>
c0004454:	e9 05 ff ff ff       	jmp    c000435e <f_read+0xf5>
c0004459:	bd 07 00 00 00       	mov    ebp,0x7
c000445e:	83 c4 2c             	add    esp,0x2c
c0004461:	89 e8                	mov    eax,ebp
c0004463:	5b                   	pop    ebx
c0004464:	5e                   	pop    esi
c0004465:	5f                   	pop    edi
c0004466:	5d                   	pop    ebp
c0004467:	c3                   	ret    

c0004468 <f_write>:
c0004468:	55                   	push   ebp
c0004469:	57                   	push   edi
c000446a:	56                   	push   esi
c000446b:	53                   	push   ebx
c000446c:	83 ec 2c             	sub    esp,0x2c
c000446f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000447d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004481:	89 d8                	mov    eax,ebx
c0004483:	e8 59 e1 ff ff       	call   c00025e1 <validate>
c0004488:	89 c5                	mov    ebp,eax
c000448a:	85 c0                	test   eax,eax
c000448c:	0f 85 14 02 00 00    	jne    c00046a6 <f_write+0x23e>
c0004492:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004496:	85 ed                	test   ebp,ebp
c0004498:	0f 85 08 02 00 00    	jne    c00046a6 <f_write+0x23e>
c000449e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a2:	0f 84 f9 01 00 00    	je     c00046a1 <f_write+0x239>
c00044a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044ab:	89 c7                	mov    edi,eax
c00044ad:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c00044b1:	0f 83 ef 00 00 00    	jae    c00045a6 <f_write+0x13e>
c00044b7:	f7 d0                	not    eax
c00044b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00044bd:	e9 e4 00 00 00       	jmp    c00045a6 <f_write+0x13e>
c00044c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044c5:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c00044cb:	0f 85 9a 01 00 00    	jne    c000466b <f_write+0x203>
c00044d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d5:	89 d1                	mov    ecx,edx
c00044d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00044db:	c1 e9 09             	shr    ecx,0x9
c00044de:	48                   	dec    eax
c00044df:	21 c8                	and    eax,ecx
c00044e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00044e5:	0f 84 c8 00 00 00    	je     c00045b3 <f_write+0x14b>
c00044eb:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00044ef:	0f 85 22 01 00 00    	jne    c0004617 <f_write+0x1af>
c00044f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00044f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044fc:	89 c8                	mov    eax,ecx
c00044fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004502:	e8 73 de ff ff       	call   c000237a <clst2sect>
c0004507:	85 c0                	test   eax,eax
c0004509:	0f 84 d2 00 00 00    	je     c00045e1 <f_write+0x179>
c000450f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004513:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004517:	01 c7                	add    edi,eax
c0004519:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004521:	0f 86 1c 01 00 00    	jbe    c0004643 <f_write+0x1db>
c0004527:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000452b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000452f:	c1 ee 09             	shr    esi,0x9
c0004532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004536:	01 f2                	add    edx,esi
c0004538:	39 c2                	cmp    edx,eax
c000453a:	76 06                	jbe    c0004542 <f_write+0xda>
c000453c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004540:	89 c6                	mov    esi,eax
c0004542:	56                   	push   esi
c0004543:	57                   	push   edi
c0004544:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004548:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000454c:	50                   	push   eax
c000454d:	e8 9c db ff ff       	call   c00020ee <disk_write>
c0004552:	83 c4 10             	add    esp,0x10
c0004555:	85 c0                	test   eax,eax
c0004557:	0f 85 97 00 00 00    	jne    c00045f4 <f_write+0x18c>
c000455d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004560:	29 fa                	sub    edx,edi
c0004562:	39 f2                	cmp    edx,esi
c0004564:	73 1d                	jae    c0004583 <f_write+0x11b>
c0004566:	8d 43 28             	lea    eax,[ebx+0x28]
c0004569:	c1 e2 09             	shl    edx,0x9
c000456c:	b9 00 02 00 00       	mov    ecx,0x200
c0004571:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004575:	e8 d5 db ff ff       	call   c000214f <mem_cpy>
c000457a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000457d:	83 e0 7f             	and    eax,0x7f
c0004580:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004583:	c1 e6 09             	shl    esi,0x9
c0004586:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000458a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000458e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004592:	01 30                	add    DWORD PTR [eax],esi
c0004594:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004597:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000459a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000459d:	39 f0                	cmp    eax,esi
c000459f:	73 02                	jae    c00045a3 <f_write+0x13b>
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045a6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00045ab:	0f 85 11 ff ff ff    	jne    c00044c2 <f_write+0x5a>
c00045b1:	eb 1b                	jmp    c00045ce <f_write+0x166>
c00045b3:	85 d2                	test   edx,edx
c00045b5:	75 09                	jne    c00045c0 <f_write+0x158>
c00045b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045ba:	85 c0                	test   eax,eax
c00045bc:	75 1e                	jne    c00045dc <f_write+0x174>
c00045be:	eb 03                	jmp    c00045c3 <f_write+0x15b>
c00045c0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045c3:	89 d8                	mov    eax,ebx
c00045c5:	e8 62 f1 ff ff       	call   c000372c <create_chain>
c00045ca:	85 c0                	test   eax,eax
c00045cc:	75 0e                	jne    c00045dc <f_write+0x174>
c00045ce:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d1:	83 c8 40             	or     eax,0x40
c00045d4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045d7:	e9 ca 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045dc:	83 f8 01             	cmp    eax,0x1
c00045df:	75 0e                	jne    c00045ef <f_write+0x187>
c00045e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00045e5:	bd 02 00 00 00       	mov    ebp,0x2
c00045ea:	e9 b7 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045ef:	83 f8 ff             	cmp    eax,0xffffffff
c00045f2:	75 0e                	jne    c0004602 <f_write+0x19a>
c00045f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00045f8:	bd 01 00 00 00       	mov    ebp,0x1
c00045fd:	e9 a4 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c0004602:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004605:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004609:	0f 85 dc fe ff ff    	jne    c00044eb <f_write+0x83>
c000460f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004612:	e9 d4 fe ff ff       	jmp    c00044eb <f_write+0x83>
c0004617:	6a 01                	push   0x1
c0004619:	8d 43 28             	lea    eax,[ebx+0x28]
c000461c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000461f:	50                   	push   eax
c0004620:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004624:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004628:	50                   	push   eax
c0004629:	e8 c0 da ff ff       	call   c00020ee <disk_write>
c000462e:	83 c4 10             	add    esp,0x10
c0004631:	85 c0                	test   eax,eax
c0004633:	75 bf                	jne    c00045f4 <f_write+0x18c>
c0004635:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004638:	83 e0 7f             	and    eax,0x7f
c000463b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000463e:	e9 b2 fe ff ff       	jmp    c00044f5 <f_write+0x8d>
c0004643:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0004646:	74 20                	je     c0004668 <f_write+0x200>
c0004648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000464b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000464e:	76 18                	jbe    c0004668 <f_write+0x200>
c0004650:	6a 01                	push   0x1
c0004652:	8d 43 28             	lea    eax,[ebx+0x28]
c0004655:	57                   	push   edi
c0004656:	50                   	push   eax
c0004657:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000465b:	50                   	push   eax
c000465c:	e8 77 da ff ff       	call   c00020d8 <disk_read>
c0004661:	83 c4 10             	add    esp,0x10
c0004664:	85 c0                	test   eax,eax
c0004666:	75 8c                	jne    c00045f4 <f_write+0x18c>
c0004668:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000466b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466e:	ba 00 02 00 00       	mov    edx,0x200
c0004673:	25 ff 01 00 00       	and    eax,0x1ff
c0004678:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000467c:	29 c2                	sub    edx,eax
c000467e:	39 d6                	cmp    esi,edx
c0004680:	76 02                	jbe    c0004684 <f_write+0x21c>
c0004682:	89 d6                	mov    esi,edx
c0004684:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004688:	89 f1                	mov    ecx,esi
c000468a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000468e:	e8 bc da ff ff       	call   c000214f <mem_cpy>
c0004693:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004696:	83 c8 80             	or     eax,0xffffff80
c0004699:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000469c:	e9 e5 fe ff ff       	jmp    c0004586 <f_write+0x11e>
c00046a1:	bd 07 00 00 00       	mov    ebp,0x7
c00046a6:	83 c4 2c             	add    esp,0x2c
c00046a9:	89 e8                	mov    eax,ebp
c00046ab:	5b                   	pop    ebx
c00046ac:	5e                   	pop    esi
c00046ad:	5f                   	pop    edi
c00046ae:	5d                   	pop    ebp
c00046af:	c3                   	ret    

c00046b0 <f_sync>:
c00046b0:	56                   	push   esi
c00046b1:	53                   	push   ebx
c00046b2:	83 ec 14             	sub    esp,0x14
c00046b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046bd:	89 d8                	mov    eax,ebx
c00046bf:	e8 1d df ff ff       	call   c00025e1 <validate>
c00046c4:	85 c0                	test   eax,eax
c00046c6:	0f 85 a3 00 00 00    	jne    c000476f <f_sync+0xbf>
c00046cc:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046cf:	f6 c2 40             	test   dl,0x40
c00046d2:	0f 84 97 00 00 00    	je     c000476f <f_sync+0xbf>
c00046d8:	80 e2 80             	and    dl,0x80
c00046db:	74 2e                	je     c000470b <f_sync+0x5b>
c00046dd:	6a 01                	push   0x1
c00046df:	8d 43 28             	lea    eax,[ebx+0x28]
c00046e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00046e5:	50                   	push   eax
c00046e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046ea:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046ee:	50                   	push   eax
c00046ef:	e8 fa d9 ff ff       	call   c00020ee <disk_write>
c00046f4:	83 c4 10             	add    esp,0x10
c00046f7:	89 c2                	mov    edx,eax
c00046f9:	b8 01 00 00 00       	mov    eax,0x1
c00046fe:	85 d2                	test   edx,edx
c0004700:	75 6d                	jne    c000476f <f_sync+0xbf>
c0004702:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004705:	83 e0 7f             	and    eax,0x7f
c0004708:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000470b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000470e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004712:	e8 73 df ff ff       	call   c000268a <move_window>
c0004717:	85 c0                	test   eax,eax
c0004719:	75 54                	jne    c000476f <f_sync+0xbf>
c000471b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000471e:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004721:	89 f2                	mov    edx,esi
c0004723:	83 c8 20             	or     eax,0x20
c0004726:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004729:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000472c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000472e:	e8 05 ee ff ff       	call   c0003538 <st_clust.isra.1>
c0004733:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004736:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004739:	e8 0e da ff ff       	call   c000214c <st_dword>
c000473e:	8d 46 16             	lea    eax,[esi+0x16]
c0004741:	ba 00 00 21 50       	mov    edx,0x50210000
c0004746:	e8 01 da ff ff       	call   c000214c <st_dword>
c000474b:	31 d2                	xor    edx,edx
c000474d:	8d 46 12             	lea    eax,[esi+0x12]
c0004750:	e8 f3 d9 ff ff       	call   c0002148 <st_word>
c0004755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004759:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000475d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004761:	e8 5b e9 ff ff       	call   c00030c1 <sync_fs>
c0004766:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004769:	83 e2 bf             	and    edx,0xffffffbf
c000476c:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000476f:	83 c4 14             	add    esp,0x14
c0004772:	5b                   	pop    ebx
c0004773:	5e                   	pop    esi
c0004774:	c3                   	ret    

c0004775 <f_close>:
c0004775:	53                   	push   ebx
c0004776:	83 ec 24             	sub    esp,0x24
c0004779:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000477d:	53                   	push   ebx
c000477e:	e8 2d ff ff ff       	call   c00046b0 <f_sync>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	85 c0                	test   eax,eax
c0004788:	75 15                	jne    c000479f <f_close+0x2a>
c000478a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000478e:	89 d8                	mov    eax,ebx
c0004790:	e8 4c de ff ff       	call   c00025e1 <validate>
c0004795:	85 c0                	test   eax,eax
c0004797:	75 06                	jne    c000479f <f_close+0x2a>
c0004799:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000479f:	83 c4 18             	add    esp,0x18
c00047a2:	5b                   	pop    ebx
c00047a3:	c3                   	ret    

c00047a4 <f_lseek>:
c00047a4:	55                   	push   ebp
c00047a5:	57                   	push   edi
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 2c             	sub    esp,0x2c
c00047ab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00047af:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00047b3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047b7:	89 d8                	mov    eax,ebx
c00047b9:	e8 23 de ff ff       	call   c00025e1 <validate>
c00047be:	89 c5                	mov    ebp,eax
c00047c0:	85 c0                	test   eax,eax
c00047c2:	0f 85 83 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047c8:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00047cc:	85 ed                	test   ebp,ebp
c00047ce:	0f 85 77 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00047d7:	39 f0                	cmp    eax,esi
c00047d9:	73 08                	jae    c00047e3 <f_lseek+0x3f>
c00047db:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047df:	75 02                	jne    c00047e3 <f_lseek+0x3f>
c00047e1:	89 c6                	mov    esi,eax
c00047e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00047e6:	85 f6                	test   esi,esi
c00047e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00047ef:	75 07                	jne    c00047f8 <f_lseek+0x54>
c00047f1:	31 f6                	xor    esi,esi
c00047f3:	e9 e2 00 00 00       	jmp    c00048da <f_lseek+0x136>
c00047f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047fc:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004800:	c1 e7 09             	shl    edi,0x9
c0004803:	85 c9                	test   ecx,ecx
c0004805:	74 28                	je     c000482f <f_lseek+0x8b>
c0004807:	49                   	dec    ecx
c0004808:	31 d2                	xor    edx,edx
c000480a:	8d 46 ff             	lea    eax,[esi-0x1]
c000480d:	f7 f7                	div    edi
c000480f:	31 d2                	xor    edx,edx
c0004811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004815:	89 c8                	mov    eax,ecx
c0004817:	f7 f7                	div    edi
c0004819:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000481d:	72 10                	jb     c000482f <f_lseek+0x8b>
c000481f:	89 f8                	mov    eax,edi
c0004821:	f7 d8                	neg    eax
c0004823:	21 c1                	and    ecx,eax
c0004825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004828:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000482b:	29 ce                	sub    esi,ecx
c000482d:	eb 3c                	jmp    c000486b <f_lseek+0xc7>
c000482f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004832:	85 c0                	test   eax,eax
c0004834:	75 32                	jne    c0004868 <f_lseek+0xc4>
c0004836:	31 d2                	xor    edx,edx
c0004838:	89 d8                	mov    eax,ebx
c000483a:	e8 ed ee ff ff       	call   c000372c <create_chain>
c000483f:	83 f8 01             	cmp    eax,0x1
c0004842:	75 0e                	jne    c0004852 <f_lseek+0xae>
c0004844:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004848:	bd 02 00 00 00       	mov    ebp,0x2
c000484d:	e9 f9 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004852:	83 f8 ff             	cmp    eax,0xffffffff
c0004855:	75 0e                	jne    c0004865 <f_lseek+0xc1>
c0004857:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000485b:	bd 01 00 00 00       	mov    ebp,0x1
c0004860:	e9 e6 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004865:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004868:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000486b:	85 c0                	test   eax,eax
c000486d:	74 82                	je     c00047f1 <f_lseek+0x4d>
c000486f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004872:	39 fe                	cmp    esi,edi
c0004874:	76 3d                	jbe    c00048b3 <f_lseek+0x10f>
c0004876:	01 fa                	add    edx,edi
c0004878:	29 fe                	sub    esi,edi
c000487a:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000487d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004881:	89 c2                	mov    edx,eax
c0004883:	74 0d                	je     c0004892 <f_lseek+0xee>
c0004885:	89 d8                	mov    eax,ebx
c0004887:	e8 a0 ee ff ff       	call   c000372c <create_chain>
c000488c:	85 c0                	test   eax,eax
c000488e:	75 09                	jne    c0004899 <f_lseek+0xf5>
c0004890:	eb 1f                	jmp    c00048b1 <f_lseek+0x10d>
c0004892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004894:	e8 c7 ec ff ff       	call   c0003560 <get_fat.isra.2>
c0004899:	83 f8 ff             	cmp    eax,0xffffffff
c000489c:	74 b9                	je     c0004857 <f_lseek+0xb3>
c000489e:	83 f8 01             	cmp    eax,0x1
c00048a1:	76 a1                	jbe    c0004844 <f_lseek+0xa0>
c00048a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00048a7:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00048aa:	76 98                	jbe    c0004844 <f_lseek+0xa0>
c00048ac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00048af:	eb be                	jmp    c000486f <f_lseek+0xcb>
c00048b1:	31 f6                	xor    esi,esi
c00048b3:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00048b6:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00048bc:	0f 84 2f ff ff ff    	je     c00047f1 <f_lseek+0x4d>
c00048c2:	89 c2                	mov    edx,eax
c00048c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048c8:	e8 ad da ff ff       	call   c000237a <clst2sect>
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 84 6f ff ff ff    	je     c0004844 <f_lseek+0xa0>
c00048d5:	c1 ee 09             	shr    esi,0x9
c00048d8:	01 c6                	add    esi,eax
c00048da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048e0:	76 0c                	jbe    c00048ee <f_lseek+0x14a>
c00048e2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00048e5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00048e8:	83 ca 40             	or     edx,0x40
c00048eb:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00048ee:	a9 ff 01 00 00       	test   eax,0x1ff
c00048f3:	74 56                	je     c000494b <f_lseek+0x1a7>
c00048f5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00048f8:	39 f0                	cmp    eax,esi
c00048fa:	74 4f                	je     c000494b <f_lseek+0x1a7>
c00048fc:	8d 7b 28             	lea    edi,[ebx+0x28]
c00048ff:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004903:	74 26                	je     c000492b <f_lseek+0x187>
c0004905:	6a 01                	push   0x1
c0004907:	50                   	push   eax
c0004908:	57                   	push   edi
c0004909:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000490d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004911:	50                   	push   eax
c0004912:	e8 d7 d7 ff ff       	call   c00020ee <disk_write>
c0004917:	83 c4 10             	add    esp,0x10
c000491a:	85 c0                	test   eax,eax
c000491c:	0f 85 35 ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004922:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004925:	83 e0 7f             	and    eax,0x7f
c0004928:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000492b:	6a 01                	push   0x1
c000492d:	56                   	push   esi
c000492e:	57                   	push   edi
c000492f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004933:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004937:	50                   	push   eax
c0004938:	e8 9b d7 ff ff       	call   c00020d8 <disk_read>
c000493d:	83 c4 10             	add    esp,0x10
c0004940:	85 c0                	test   eax,eax
c0004942:	0f 85 0f ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004948:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000494b:	83 c4 2c             	add    esp,0x2c
c000494e:	89 e8                	mov    eax,ebp
c0004950:	5b                   	pop    ebx
c0004951:	5e                   	pop    esi
c0004952:	5f                   	pop    edi
c0004953:	5d                   	pop    ebp
c0004954:	c3                   	ret    

c0004955 <f_opendir>:
c0004955:	56                   	push   esi
c0004956:	b8 09 00 00 00       	mov    eax,0x9
c000495b:	53                   	push   ebx
c000495c:	83 ec 24             	sub    esp,0x24
c000495f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004963:	85 db                	test   ebx,ebx
c0004965:	0f 84 af 00 00 00    	je     c0004a1a <f_opendir+0xc5>
c000496b:	31 c9                	xor    ecx,ecx
c000496d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004971:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004975:	e8 63 de ff ff       	call   c00027dd <mount_volume>
c000497a:	85 c0                	test   eax,eax
c000497c:	0f 85 92 00 00 00    	jne    c0004a14 <f_opendir+0xbf>
c0004982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004986:	83 ec 0c             	sub    esp,0xc
c0004989:	89 03                	mov    DWORD PTR [ebx],eax
c000498b:	68 00 02 00 00       	push   0x200
c0004990:	e8 d7 15 00 00       	call   c0005f6c <ff_memalloc>
c0004995:	83 c4 10             	add    esp,0x10
c0004998:	89 c6                	mov    esi,eax
c000499a:	b8 11 00 00 00       	mov    eax,0x11
c000499f:	85 f6                	test   esi,esi
c00049a1:	74 77                	je     c0004a1a <f_opendir+0xc5>
c00049a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00049ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049ae:	89 d8                	mov    eax,ebx
c00049b0:	e8 72 f3 ff ff       	call   c0003d27 <follow_path>
c00049b5:	85 c0                	test   eax,eax
c00049b7:	75 37                	jne    c00049f0 <f_opendir+0x9b>
c00049b9:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c00049bd:	75 1c                	jne    c00049db <f_opendir+0x86>
c00049bf:	b8 05 00 00 00       	mov    eax,0x5
c00049c4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00049c8:	74 26                	je     c00049f0 <f_opendir+0x9b>
c00049ca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8a 00                	mov    al,BYTE PTR [eax]
c00049d3:	e8 37 eb ff ff       	call   c000350f <ld_clust.isra.0>
c00049d8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00049db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049df:	31 d2                	xor    edx,edx
c00049e1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00049e5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00049e9:	89 d8                	mov    eax,ebx
c00049eb:	e8 74 ec ff ff       	call   c0003664 <dir_sdi>
c00049f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f4:	83 ec 0c             	sub    esp,0xc
c00049f7:	56                   	push   esi
c00049f8:	e8 87 15 00 00       	call   c0005f84 <ff_memfree>
c00049fd:	83 c4 10             	add    esp,0x10
c0004a00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a04:	83 f8 04             	cmp    eax,0x4
c0004a07:	74 06                	je     c0004a0f <f_opendir+0xba>
c0004a09:	85 c0                	test   eax,eax
c0004a0b:	74 0d                	je     c0004a1a <f_opendir+0xc5>
c0004a0d:	eb 05                	jmp    c0004a14 <f_opendir+0xbf>
c0004a0f:	b8 05 00 00 00       	mov    eax,0x5
c0004a14:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a1a:	83 c4 24             	add    esp,0x24
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_closedir>:
c0004a20:	53                   	push   ebx
c0004a21:	83 ec 18             	sub    esp,0x18
c0004a24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a28:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a2c:	89 d8                	mov    eax,ebx
c0004a2e:	e8 ae db ff ff       	call   c00025e1 <validate>
c0004a33:	85 c0                	test   eax,eax
c0004a35:	75 06                	jne    c0004a3d <f_closedir+0x1d>
c0004a37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a3d:	83 c4 18             	add    esp,0x18
c0004a40:	5b                   	pop    ebx
c0004a41:	c3                   	ret    

c0004a42 <f_readdir>:
c0004a42:	57                   	push   edi
c0004a43:	56                   	push   esi
c0004a44:	53                   	push   ebx
c0004a45:	83 ec 20             	sub    esp,0x20
c0004a48:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004a4c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004a50:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a54:	89 d8                	mov    eax,ebx
c0004a56:	e8 86 db ff ff       	call   c00025e1 <validate>
c0004a5b:	85 c0                	test   eax,eax
c0004a5d:	75 6e                	jne    c0004acd <f_readdir+0x8b>
c0004a5f:	85 ff                	test   edi,edi
c0004a61:	75 0b                	jne    c0004a6e <f_readdir+0x2c>
c0004a63:	31 d2                	xor    edx,edx
c0004a65:	89 d8                	mov    eax,ebx
c0004a67:	e8 f8 eb ff ff       	call   c0003664 <dir_sdi>
c0004a6c:	eb 5f                	jmp    c0004acd <f_readdir+0x8b>
c0004a6e:	83 ec 0c             	sub    esp,0xc
c0004a71:	68 00 02 00 00       	push   0x200
c0004a76:	e8 f1 14 00 00       	call   c0005f6c <ff_memalloc>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	89 c6                	mov    esi,eax
c0004a80:	b8 11 00 00 00       	mov    eax,0x11
c0004a85:	85 f6                	test   esi,esi
c0004a87:	74 44                	je     c0004acd <f_readdir+0x8b>
c0004a89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a8d:	31 d2                	xor    edx,edx
c0004a8f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a92:	89 d8                	mov    eax,ebx
c0004a94:	e8 ca ef ff ff       	call   c0003a63 <dir_read>
c0004a99:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004a9e:	75 19                	jne    c0004ab9 <f_readdir+0x77>
c0004aa0:	89 fa                	mov    edx,edi
c0004aa2:	89 d8                	mov    eax,ebx
c0004aa4:	e8 70 e8 ff ff       	call   c0003319 <get_fileinfo>
c0004aa9:	31 d2                	xor    edx,edx
c0004aab:	89 d8                	mov    eax,ebx
c0004aad:	e8 47 ee ff ff       	call   c00038f9 <dir_next>
c0004ab2:	83 f8 04             	cmp    eax,0x4
c0004ab5:	75 02                	jne    c0004ab9 <f_readdir+0x77>
c0004ab7:	31 c0                	xor    eax,eax
c0004ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004abd:	83 ec 0c             	sub    esp,0xc
c0004ac0:	56                   	push   esi
c0004ac1:	e8 be 14 00 00       	call   c0005f84 <ff_memfree>
c0004ac6:	83 c4 10             	add    esp,0x10
c0004ac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004acd:	83 c4 20             	add    esp,0x20
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	c3                   	ret    

c0004ad4 <f_stat>:
c0004ad4:	57                   	push   edi
c0004ad5:	31 c9                	xor    ecx,ecx
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 30             	sub    esp,0x30
c0004adc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004ae0:	89 e2                	mov    edx,esp
c0004ae2:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ae6:	e8 f2 dc ff ff       	call   c00027dd <mount_volume>
c0004aeb:	89 c3                	mov    ebx,eax
c0004aed:	85 c0                	test   eax,eax
c0004aef:	75 59                	jne    c0004b4a <f_stat+0x76>
c0004af1:	83 ec 0c             	sub    esp,0xc
c0004af4:	bb 11 00 00 00       	mov    ebx,0x11
c0004af9:	68 00 02 00 00       	push   0x200
c0004afe:	e8 69 14 00 00       	call   c0005f6c <ff_memalloc>
c0004b03:	83 c4 10             	add    esp,0x10
c0004b06:	89 c6                	mov    esi,eax
c0004b08:	85 c0                	test   eax,eax
c0004b0a:	74 3e                	je     c0004b4a <f_stat+0x76>
c0004b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b0f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004b13:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b16:	89 e0                	mov    eax,esp
c0004b18:	e8 0a f2 ff ff       	call   c0003d27 <follow_path>
c0004b1d:	89 c3                	mov    ebx,eax
c0004b1f:	85 c0                	test   eax,eax
c0004b21:	75 1b                	jne    c0004b3e <f_stat+0x6a>
c0004b23:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004b28:	75 0f                	jne    c0004b39 <f_stat+0x65>
c0004b2a:	85 ff                	test   edi,edi
c0004b2c:	74 10                	je     c0004b3e <f_stat+0x6a>
c0004b2e:	89 fa                	mov    edx,edi
c0004b30:	89 e0                	mov    eax,esp
c0004b32:	e8 e2 e7 ff ff       	call   c0003319 <get_fileinfo>
c0004b37:	eb 05                	jmp    c0004b3e <f_stat+0x6a>
c0004b39:	bb 06 00 00 00       	mov    ebx,0x6
c0004b3e:	83 ec 0c             	sub    esp,0xc
c0004b41:	56                   	push   esi
c0004b42:	e8 3d 14 00 00       	call   c0005f84 <ff_memfree>
c0004b47:	83 c4 10             	add    esp,0x10
c0004b4a:	83 c4 30             	add    esp,0x30
c0004b4d:	89 d8                	mov    eax,ebx
c0004b4f:	5b                   	pop    ebx
c0004b50:	5e                   	pop    esi
c0004b51:	5f                   	pop    edi
c0004b52:	c3                   	ret    

c0004b53 <f_getfree>:
c0004b53:	55                   	push   ebp
c0004b54:	31 c9                	xor    ecx,ecx
c0004b56:	57                   	push   edi
c0004b57:	56                   	push   esi
c0004b58:	53                   	push   ebx
c0004b59:	83 ec 2c             	sub    esp,0x2c
c0004b5c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b60:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b64:	e8 74 dc ff ff       	call   c00027dd <mount_volume>
c0004b69:	89 c7                	mov    edi,eax
c0004b6b:	85 c0                	test   eax,eax
c0004b6d:	0f 85 df 00 00 00    	jne    c0004c52 <f_getfree+0xff>
c0004b73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004b77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b7b:	89 30                	mov    DWORD PTR [eax],esi
c0004b7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004b80:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004b83:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004b86:	39 d0                	cmp    eax,edx
c0004b88:	77 0b                	ja     c0004b95 <f_getfree+0x42>
c0004b8a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004b8e:	89 01                	mov    DWORD PTR [ecx],eax
c0004b90:	e9 bd 00 00 00       	jmp    c0004c52 <f_getfree+0xff>
c0004b95:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004b98:	75 29                	jne    c0004bc3 <f_getfree+0x70>
c0004b9a:	bd 02 00 00 00       	mov    ebp,0x2
c0004b9f:	31 db                	xor    ebx,ebx
c0004ba1:	89 ea                	mov    edx,ebp
c0004ba3:	89 f0                	mov    eax,esi
c0004ba5:	e8 b6 e9 ff ff       	call   c0003560 <get_fat.isra.2>
c0004baa:	83 f8 ff             	cmp    eax,0xffffffff
c0004bad:	74 7d                	je     c0004c2c <f_getfree+0xd9>
c0004baf:	83 f8 01             	cmp    eax,0x1
c0004bb2:	74 7f                	je     c0004c33 <f_getfree+0xe0>
c0004bb4:	83 d3 00             	adc    ebx,0x0
c0004bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bbb:	45                   	inc    ebp
c0004bbc:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004bbf:	77 e0                	ja     c0004ba1 <f_getfree+0x4e>
c0004bc1:	eb 79                	jmp    c0004c3c <f_getfree+0xe9>
c0004bc3:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004bc6:	31 db                	xor    ebx,ebx
c0004bc8:	31 f6                	xor    esi,esi
c0004bca:	85 f6                	test   esi,esi
c0004bcc:	75 18                	jne    c0004be6 <f_getfree+0x93>
c0004bce:	8d 42 01             	lea    eax,[edx+0x1]
c0004bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd9:	e8 ac da ff ff       	call   c000268a <move_window>
c0004bde:	85 c0                	test   eax,eax
c0004be0:	75 58                	jne    c0004c3a <f_getfree+0xe7>
c0004be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004bea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004bee:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004bf2:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004bf5:	75 13                	jne    c0004c0a <f_getfree+0xb7>
c0004bf7:	e8 27 d5 ff ff       	call   c0002123 <ld_word>
c0004bfc:	0f b7 c0             	movzx  eax,ax
c0004bff:	83 f8 01             	cmp    eax,0x1
c0004c02:	83 d3 00             	adc    ebx,0x0
c0004c05:	83 c6 02             	add    esi,0x2
c0004c08:	eb 13                	jmp    c0004c1d <f_getfree+0xca>
c0004c0a:	e8 21 d5 ff ff       	call   c0002130 <ld_dword>
c0004c0f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004c14:	83 f8 01             	cmp    eax,0x1
c0004c17:	83 d3 00             	adc    ebx,0x0
c0004c1a:	83 c6 04             	add    esi,0x4
c0004c1d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004c23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c27:	4d                   	dec    ebp
c0004c28:	75 a0                	jne    c0004bca <f_getfree+0x77>
c0004c2a:	eb 10                	jmp    c0004c3c <f_getfree+0xe9>
c0004c2c:	bf 01 00 00 00       	mov    edi,0x1
c0004c31:	eb 09                	jmp    c0004c3c <f_getfree+0xe9>
c0004c33:	bf 02 00 00 00       	mov    edi,0x2
c0004c38:	eb 02                	jmp    c0004c3c <f_getfree+0xe9>
c0004c3a:	89 c7                	mov    edi,eax
c0004c3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c40:	89 18                	mov    DWORD PTR [eax],ebx
c0004c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c46:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004c49:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004c4c:	83 ca 01             	or     edx,0x1
c0004c4f:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004c52:	83 c4 2c             	add    esp,0x2c
c0004c55:	89 f8                	mov    eax,edi
c0004c57:	5b                   	pop    ebx
c0004c58:	5e                   	pop    esi
c0004c59:	5f                   	pop    edi
c0004c5a:	5d                   	pop    ebp
c0004c5b:	c3                   	ret    

c0004c5c <f_truncate>:
c0004c5c:	56                   	push   esi
c0004c5d:	53                   	push   ebx
c0004c5e:	83 ec 14             	sub    esp,0x14
c0004c61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004c65:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c69:	89 d8                	mov    eax,ebx
c0004c6b:	e8 71 d9 ff ff       	call   c00025e1 <validate>
c0004c70:	89 c6                	mov    esi,eax
c0004c72:	85 c0                	test   eax,eax
c0004c74:	0f 85 c4 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c7a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004c7e:	85 f6                	test   esi,esi
c0004c80:	0f 85 b8 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c86:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004c8a:	0f 84 a9 00 00 00    	je     c0004d39 <f_truncate+0xdd>
c0004c90:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004c93:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004c96:	0f 83 a2 00 00 00    	jae    c0004d3e <f_truncate+0xe2>
c0004c9c:	85 c0                	test   eax,eax
c0004c9e:	75 15                	jne    c0004cb5 <f_truncate+0x59>
c0004ca0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ca3:	31 c9                	xor    ecx,ecx
c0004ca5:	89 d8                	mov    eax,ebx
c0004ca7:	e8 bf eb ff ff       	call   c000386b <remove_chain>
c0004cac:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004cb3:	eb 35                	jmp    c0004cea <f_truncate+0x8e>
c0004cb5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004cb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004cba:	e8 a1 e8 ff ff       	call   c0003560 <get_fat.isra.2>
c0004cbf:	89 c2                	mov    edx,eax
c0004cc1:	b8 01 00 00 00       	mov    eax,0x1
c0004cc6:	83 fa ff             	cmp    edx,0xffffffff
c0004cc9:	74 1f                	je     c0004cea <f_truncate+0x8e>
c0004ccb:	b8 02 00 00 00       	mov    eax,0x2
c0004cd0:	83 fa 01             	cmp    edx,0x1
c0004cd3:	74 15                	je     c0004cea <f_truncate+0x8e>
c0004cd5:	31 c0                	xor    eax,eax
c0004cd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004cdb:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004cde:	76 0a                	jbe    c0004cea <f_truncate+0x8e>
c0004ce0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004ce3:	89 d8                	mov    eax,ebx
c0004ce5:	e8 81 eb ff ff       	call   c000386b <remove_chain>
c0004cea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ced:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004cf0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004cf3:	83 ca 40             	or     edx,0x40
c0004cf6:	85 c0                	test   eax,eax
c0004cf8:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004cfb:	75 35                	jne    c0004d32 <f_truncate+0xd6>
c0004cfd:	80 e2 80             	and    dl,0x80
c0004d00:	74 3c                	je     c0004d3e <f_truncate+0xe2>
c0004d02:	6a 01                	push   0x1
c0004d04:	8d 43 28             	lea    eax,[ebx+0x28]
c0004d07:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004d0a:	50                   	push   eax
c0004d0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004d0f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004d13:	50                   	push   eax
c0004d14:	e8 d5 d3 ff ff       	call   c00020ee <disk_write>
c0004d19:	83 c4 10             	add    esp,0x10
c0004d1c:	85 c0                	test   eax,eax
c0004d1e:	75 0d                	jne    c0004d2d <f_truncate+0xd1>
c0004d20:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004d23:	31 f6                	xor    esi,esi
c0004d25:	83 e0 7f             	and    eax,0x7f
c0004d28:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004d2b:	eb 11                	jmp    c0004d3e <f_truncate+0xe2>
c0004d2d:	b8 01 00 00 00       	mov    eax,0x1
c0004d32:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004d35:	89 c6                	mov    esi,eax
c0004d37:	eb 05                	jmp    c0004d3e <f_truncate+0xe2>
c0004d39:	be 07 00 00 00       	mov    esi,0x7
c0004d3e:	89 f0                	mov    eax,esi
c0004d40:	83 c4 14             	add    esp,0x14
c0004d43:	5b                   	pop    ebx
c0004d44:	5e                   	pop    esi
c0004d45:	c3                   	ret    

c0004d46 <f_unlink>:
c0004d46:	55                   	push   ebp
c0004d47:	b9 02 00 00 00       	mov    ecx,0x2
c0004d4c:	57                   	push   edi
c0004d4d:	56                   	push   esi
c0004d4e:	53                   	push   ebx
c0004d4f:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004d55:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d59:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004d60:	e8 78 da ff ff       	call   c00027dd <mount_volume>
c0004d65:	85 c0                	test   eax,eax
c0004d67:	0f 85 f0 00 00 00    	jne    c0004e5d <f_unlink+0x117>
c0004d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d71:	83 ec 0c             	sub    esp,0xc
c0004d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d78:	68 00 02 00 00       	push   0x200
c0004d7d:	e8 ea 11 00 00       	call   c0005f6c <ff_memalloc>
c0004d82:	83 c4 10             	add    esp,0x10
c0004d85:	89 c3                	mov    ebx,eax
c0004d87:	b8 11 00 00 00       	mov    eax,0x11
c0004d8c:	85 db                	test   ebx,ebx
c0004d8e:	0f 84 c9 00 00 00    	je     c0004e5d <f_unlink+0x117>
c0004d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d98:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004d9f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004da2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004da6:	e8 7c ef ff ff       	call   c0003d27 <follow_path>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 96 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004db3:	b8 06 00 00 00       	mov    eax,0x6
c0004db8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004dbd:	0f 85 86 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004dc3:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004dc8:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004dce:	74 07                	je     c0004dd7 <f_unlink+0x91>
c0004dd0:	b8 07 00 00 00       	mov    eax,0x7
c0004dd5:	eb 72                	jmp    c0004e49 <f_unlink+0x103>
c0004dd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ddb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ddf:	8a 07                	mov    al,BYTE PTR [edi]
c0004de1:	e8 29 e7 ff ff       	call   c000350f <ld_clust.isra.0>
c0004de6:	83 e5 10             	and    ebp,0x10
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	75 0f                	jne    c0004dfc <f_unlink+0xb6>
c0004ded:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004df1:	e8 95 ed ff ff       	call   c0003b8b <dir_remove>
c0004df6:	85 c0                	test   eax,eax
c0004df8:	74 2f                	je     c0004e29 <f_unlink+0xe3>
c0004dfa:	eb 4d                	jmp    c0004e49 <f_unlink+0x103>
c0004dfc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004e00:	31 d2                	xor    edx,edx
c0004e02:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004e06:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e0a:	e8 55 e8 ff ff       	call   c0003664 <dir_sdi>
c0004e0f:	85 c0                	test   eax,eax
c0004e11:	75 36                	jne    c0004e49 <f_unlink+0x103>
c0004e13:	31 d2                	xor    edx,edx
c0004e15:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e19:	e8 45 ec ff ff       	call   c0003a63 <dir_read>
c0004e1e:	85 c0                	test   eax,eax
c0004e20:	74 ae                	je     c0004dd0 <f_unlink+0x8a>
c0004e22:	83 f8 04             	cmp    eax,0x4
c0004e25:	75 22                	jne    c0004e49 <f_unlink+0x103>
c0004e27:	eb c4                	jmp    c0004ded <f_unlink+0xa7>
c0004e29:	85 f6                	test   esi,esi
c0004e2b:	75 0b                	jne    c0004e38 <f_unlink+0xf2>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	e8 8b e2 ff ff       	call   c00030c1 <sync_fs>
c0004e36:	eb 11                	jmp    c0004e49 <f_unlink+0x103>
c0004e38:	31 c9                	xor    ecx,ecx
c0004e3a:	89 f2                	mov    edx,esi
c0004e3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e40:	e8 26 ea ff ff       	call   c000386b <remove_chain>
c0004e45:	85 c0                	test   eax,eax
c0004e47:	74 e4                	je     c0004e2d <f_unlink+0xe7>
c0004e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4d:	83 ec 0c             	sub    esp,0xc
c0004e50:	53                   	push   ebx
c0004e51:	e8 2e 11 00 00       	call   c0005f84 <ff_memfree>
c0004e56:	83 c4 10             	add    esp,0x10
c0004e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5d:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004e63:	5b                   	pop    ebx
c0004e64:	5e                   	pop    esi
c0004e65:	5f                   	pop    edi
c0004e66:	5d                   	pop    ebp
c0004e67:	c3                   	ret    

c0004e68 <f_mkdir>:
c0004e68:	57                   	push   edi
c0004e69:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6e:	56                   	push   esi
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 50             	sub    esp,0x50
c0004e73:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e7b:	e8 5d d9 ff ff       	call   c00027dd <mount_volume>
c0004e80:	89 c3                	mov    ebx,eax
c0004e82:	85 c0                	test   eax,eax
c0004e84:	0f 85 70 01 00 00    	jne    c0004ffa <f_mkdir+0x192>
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	bb 11 00 00 00       	mov    ebx,0x11
c0004e93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e97:	83 ec 0c             	sub    esp,0xc
c0004e9a:	68 00 02 00 00       	push   0x200
c0004e9f:	e8 c8 10 00 00       	call   c0005f6c <ff_memalloc>
c0004ea4:	83 c4 10             	add    esp,0x10
c0004ea7:	89 c7                	mov    edi,eax
c0004ea9:	85 c0                	test   eax,eax
c0004eab:	0f 84 49 01 00 00    	je     c0004ffa <f_mkdir+0x192>
c0004eb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eb5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004eb9:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ebc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec0:	e8 62 ee ff ff       	call   c0003d27 <follow_path>
c0004ec5:	89 c3                	mov    ebx,eax
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	74 3e                	je     c0004f09 <f_mkdir+0xa1>
c0004ecb:	83 f8 04             	cmp    eax,0x4
c0004ece:	75 3e                	jne    c0004f0e <f_mkdir+0xa6>
c0004ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed4:	31 d2                	xor    edx,edx
c0004ed6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004eda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004ede:	e8 49 e8 ff ff       	call   c000372c <create_chain>
c0004ee3:	89 c6                	mov    esi,eax
c0004ee5:	85 c0                	test   eax,eax
c0004ee7:	74 0c                	je     c0004ef5 <f_mkdir+0x8d>
c0004ee9:	bb 02 00 00 00       	mov    ebx,0x2
c0004eee:	83 f8 01             	cmp    eax,0x1
c0004ef1:	74 07                	je     c0004efa <f_mkdir+0x92>
c0004ef3:	eb 2a                	jmp    c0004f1f <f_mkdir+0xb7>
c0004ef5:	bb 07 00 00 00       	mov    ebx,0x7
c0004efa:	31 c9                	xor    ecx,ecx
c0004efc:	89 f2                	mov    edx,esi
c0004efe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004f02:	e8 64 e9 ff ff       	call   c000386b <remove_chain>
c0004f07:	eb 05                	jmp    c0004f0e <f_mkdir+0xa6>
c0004f09:	bb 08 00 00 00       	mov    ebx,0x8
c0004f0e:	83 ec 0c             	sub    esp,0xc
c0004f11:	57                   	push   edi
c0004f12:	e8 6d 10 00 00       	call   c0005f84 <ff_memfree>
c0004f17:	83 c4 10             	add    esp,0x10
c0004f1a:	e9 db 00 00 00       	jmp    c0004ffa <f_mkdir+0x192>
c0004f1f:	bb 01 00 00 00       	mov    ebx,0x1
c0004f24:	83 f8 ff             	cmp    eax,0xffffffff
c0004f27:	74 d1                	je     c0004efa <f_mkdir+0x92>
c0004f29:	89 f2                	mov    edx,esi
c0004f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f2f:	e8 f1 dc ff ff       	call   c0002c25 <dir_clear>
c0004f34:	89 c3                	mov    ebx,eax
c0004f36:	85 c0                	test   eax,eax
c0004f38:	75 c0                	jne    c0004efa <f_mkdir+0x92>
c0004f3a:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f43:	ba 20 00 00 00       	mov    edx,0x20
c0004f48:	83 c0 34             	add    eax,0x34
c0004f4b:	e8 14 d2 ff ff       	call   c0002164 <mem_set>
c0004f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f54:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f59:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004f5d:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004f61:	83 c0 4a             	add    eax,0x4a
c0004f64:	e8 e3 d1 ff ff       	call   c000214c <st_dword>
c0004f69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f6d:	89 f1                	mov    ecx,esi
c0004f6f:	8d 50 34             	lea    edx,[eax+0x34]
c0004f72:	e8 c1 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f7b:	b9 20 00 00 00       	mov    ecx,0x20
c0004f80:	8d 50 34             	lea    edx,[eax+0x34]
c0004f83:	83 c0 54             	add    eax,0x54
c0004f86:	e8 c4 d1 ff ff       	call   c000214f <mem_cpy>
c0004f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004f93:	8d 50 54             	lea    edx,[eax+0x54]
c0004f96:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004f9a:	e8 99 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fa3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fab:	e8 0c ee ff ff       	call   c0003dbc <dir_register>
c0004fb0:	89 c3                	mov    ebx,eax
c0004fb2:	85 c0                	test   eax,eax
c0004fb4:	0f 85 40 ff ff ff    	jne    c0004efa <f_mkdir+0x92>
c0004fba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fbe:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fc3:	83 c0 16             	add    eax,0x16
c0004fc6:	e8 81 d1 ff ff       	call   c000214c <st_dword>
c0004fcb:	89 f1                	mov    ecx,esi
c0004fcd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fd5:	e8 5e e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004fda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fde:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fe6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fee:	e8 ce e0 ff ff       	call   c00030c1 <sync_fs>
c0004ff3:	89 c3                	mov    ebx,eax
c0004ff5:	e9 14 ff ff ff       	jmp    c0004f0e <f_mkdir+0xa6>
c0004ffa:	83 c4 50             	add    esp,0x50
c0004ffd:	89 d8                	mov    eax,ebx
c0004fff:	5b                   	pop    ebx
c0005000:	5e                   	pop    esi
c0005001:	5f                   	pop    edi
c0005002:	c3                   	ret    

c0005003 <f_rename>:
c0005003:	57                   	push   edi
c0005004:	56                   	push   esi
c0005005:	53                   	push   ebx
c0005006:	81 ec a0 00 00 00    	sub    esp,0xa0
c000500c:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0005013:	e8 7c d5 ff ff       	call   c0002594 <get_ldnumber>
c0005018:	b9 02 00 00 00       	mov    ecx,0x2
c000501d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005021:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0005028:	e8 b0 d7 ff ff       	call   c00027dd <mount_volume>
c000502d:	85 c0                	test   eax,eax
c000502f:	0f 85 7c 01 00 00    	jne    c00051b1 <f_rename+0x1ae>
c0005035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005039:	83 ec 0c             	sub    esp,0xc
c000503c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0005040:	68 00 02 00 00       	push   0x200
c0005045:	e8 22 0f 00 00       	call   c0005f6c <ff_memalloc>
c000504a:	83 c4 10             	add    esp,0x10
c000504d:	89 c6                	mov    esi,eax
c000504f:	b8 11 00 00 00       	mov    eax,0x11
c0005054:	85 f6                	test   esi,esi
c0005056:	0f 84 55 01 00 00    	je     c00051b1 <f_rename+0x1ae>
c000505c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005060:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0005067:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000506a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000506e:	e8 b4 ec ff ff       	call   c0003d27 <follow_path>
c0005073:	85 c0                	test   eax,eax
c0005075:	0f 85 22 01 00 00    	jne    c000519d <f_rename+0x19a>
c000507b:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c000507f:	b8 06 00 00 00       	mov    eax,0x6
c0005084:	80 e2 a0             	and    dl,0xa0
c0005087:	0f 85 10 01 00 00    	jne    c000519d <f_rename+0x19a>
c000508d:	b9 20 00 00 00       	mov    ecx,0x20
c0005092:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005096:	8d 44 24 20          	lea    eax,[esp+0x20]
c000509a:	e8 b0 d0 ff ff       	call   c000214f <mem_cpy>
c000509f:	b9 30 00 00 00       	mov    ecx,0x30
c00050a4:	8d 54 24 40          	lea    edx,[esp+0x40]
c00050a8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050ac:	e8 9e d0 ff ff       	call   c000214f <mem_cpy>
c00050b1:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00050b8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050bc:	e8 66 ec ff ff       	call   c0003d27 <follow_path>
c00050c1:	85 c0                	test   eax,eax
c00050c3:	75 20                	jne    c00050e5 <f_rename+0xe2>
c00050c5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00050c9:	b8 08 00 00 00       	mov    eax,0x8
c00050ce:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c00050d2:	0f 85 c5 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050d8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00050dc:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c00050e3:	eb 03                	jmp    c00050e8 <f_rename+0xe5>
c00050e5:	83 f8 04             	cmp    eax,0x4
c00050e8:	0f 85 af 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ee:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050f2:	e8 c5 ec ff ff       	call   c0003dbc <dir_register>
c00050f7:	85 c0                	test   eax,eax
c00050f9:	0f 85 9e 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ff:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0005106:	b9 13 00 00 00       	mov    ecx,0x13
c000510b:	8d 43 0d             	lea    eax,[ebx+0xd]
c000510e:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0005112:	e8 38 d0 ff ff       	call   c000214f <mem_cpy>
c0005117:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c000511b:	a8 10                	test   al,0x10
c000511d:	75 03                	jne    c0005122 <f_rename+0x11f>
c000511f:	83 c8 20             	or     eax,0x20
c0005122:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0005125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005129:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000512d:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0005131:	74 54                	je     c0005187 <f_rename+0x184>
c0005133:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005137:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c000513b:	74 4a                	je     c0005187 <f_rename+0x184>
c000513d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005141:	89 da                	mov    edx,ebx
c0005143:	8a 07                	mov    al,BYTE PTR [edi]
c0005145:	e8 c5 e3 ff ff       	call   c000350f <ld_clust.isra.0>
c000514a:	89 c2                	mov    edx,eax
c000514c:	89 f8                	mov    eax,edi
c000514e:	e8 27 d2 ff ff       	call   c000237a <clst2sect>
c0005153:	89 c2                	mov    edx,eax
c0005155:	b8 02 00 00 00       	mov    eax,0x2
c000515a:	85 d2                	test   edx,edx
c000515c:	74 3f                	je     c000519d <f_rename+0x19a>
c000515e:	89 f8                	mov    eax,edi
c0005160:	e8 25 d5 ff ff       	call   c000268a <move_window>
c0005165:	85 c0                	test   eax,eax
c0005167:	75 34                	jne    c000519d <f_rename+0x19a>
c0005169:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516d:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0005171:	75 14                	jne    c0005187 <f_rename+0x184>
c0005173:	8d 50 54             	lea    edx,[eax+0x54]
c0005176:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000517a:	e8 b9 e3 ff ff       	call   c0003538 <st_clust.isra.1>
c000517f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005183:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005187:	8d 44 24 40          	lea    eax,[esp+0x40]
c000518b:	e8 fb e9 ff ff       	call   c0003b8b <dir_remove>
c0005190:	85 c0                	test   eax,eax
c0005192:	75 09                	jne    c000519d <f_rename+0x19a>
c0005194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005198:	e8 24 df ff ff       	call   c00030c1 <sync_fs>
c000519d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	56                   	push   esi
c00051a5:	e8 da 0d 00 00       	call   c0005f84 <ff_memfree>
c00051aa:	83 c4 10             	add    esp,0x10
c00051ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b1:	81 c4 a0 00 00 00    	add    esp,0xa0
c00051b7:	5b                   	pop    ebx
c00051b8:	5e                   	pop    esi
c00051b9:	5f                   	pop    edi
c00051ba:	c3                   	ret    

c00051bb <f_chmod>:
c00051bb:	57                   	push   edi
c00051bc:	b9 02 00 00 00       	mov    ecx,0x2
c00051c1:	56                   	push   esi
c00051c2:	53                   	push   ebx
c00051c3:	83 ec 50             	sub    esp,0x50
c00051c6:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00051ca:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00051ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051d6:	e8 02 d6 ff ff       	call   c00027dd <mount_volume>
c00051db:	85 c0                	test   eax,eax
c00051dd:	0f 85 81 00 00 00    	jne    c0005264 <f_chmod+0xa9>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	83 ec 0c             	sub    esp,0xc
c00051ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00051ee:	68 00 02 00 00       	push   0x200
c00051f3:	e8 74 0d 00 00       	call   c0005f6c <ff_memalloc>
c00051f8:	83 c4 10             	add    esp,0x10
c00051fb:	89 c6                	mov    esi,eax
c00051fd:	b8 11 00 00 00       	mov    eax,0x11
c0005202:	85 f6                	test   esi,esi
c0005204:	74 5e                	je     c0005264 <f_chmod+0xa9>
c0005206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000520e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005211:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005215:	e8 0d eb ff ff       	call   c0003d27 <follow_path>
c000521a:	85 c0                	test   eax,eax
c000521c:	75 32                	jne    c0005250 <f_chmod+0x95>
c000521e:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005222:	b8 06 00 00 00       	mov    eax,0x6
c0005227:	80 e2 a0             	and    dl,0xa0
c000522a:	75 24                	jne    c0005250 <f_chmod+0x95>
c000522c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005230:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0005233:	31 d7                	xor    edi,edx
c0005235:	21 fb                	and    ebx,edi
c0005237:	83 e3 27             	and    ebx,0x27
c000523a:	31 d3                	xor    ebx,edx
c000523c:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000523f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005243:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000524b:	e8 71 de ff ff       	call   c00030c1 <sync_fs>
c0005250:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005254:	83 ec 0c             	sub    esp,0xc
c0005257:	56                   	push   esi
c0005258:	e8 27 0d 00 00       	call   c0005f84 <ff_memfree>
c000525d:	83 c4 10             	add    esp,0x10
c0005260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005264:	83 c4 50             	add    esp,0x50
c0005267:	5b                   	pop    ebx
c0005268:	5e                   	pop    esi
c0005269:	5f                   	pop    edi
c000526a:	c3                   	ret    

c000526b <f_utime>:
c000526b:	56                   	push   esi
c000526c:	b9 02 00 00 00       	mov    ecx,0x2
c0005271:	53                   	push   ebx
c0005272:	83 ec 54             	sub    esp,0x54
c0005275:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005279:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000527d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005281:	e8 57 d5 ff ff       	call   c00027dd <mount_volume>
c0005286:	85 c0                	test   eax,eax
c0005288:	0f 85 87 00 00 00    	jne    c0005315 <f_utime+0xaa>
c000528e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005292:	83 ec 0c             	sub    esp,0xc
c0005295:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005299:	68 00 02 00 00       	push   0x200
c000529e:	e8 c9 0c 00 00       	call   c0005f6c <ff_memalloc>
c00052a3:	83 c4 10             	add    esp,0x10
c00052a6:	89 c3                	mov    ebx,eax
c00052a8:	b8 11 00 00 00       	mov    eax,0x11
c00052ad:	85 db                	test   ebx,ebx
c00052af:	74 64                	je     c0005315 <f_utime+0xaa>
c00052b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052b5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00052b9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00052bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052c0:	e8 62 ea ff ff       	call   c0003d27 <follow_path>
c00052c5:	85 c0                	test   eax,eax
c00052c7:	75 38                	jne    c0005301 <f_utime+0x96>
c00052c9:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00052cd:	b8 06 00 00 00       	mov    eax,0x6
c00052d2:	80 e2 a0             	and    dl,0xa0
c00052d5:	75 2a                	jne    c0005301 <f_utime+0x96>
c00052d7:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00052db:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00052df:	c1 e2 10             	shl    edx,0x10
c00052e2:	09 c2                	or     edx,eax
c00052e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00052e8:	83 c0 16             	add    eax,0x16
c00052eb:	e8 5c ce ff ff       	call   c000214c <st_dword>
c00052f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00052f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052fc:	e8 c0 dd ff ff       	call   c00030c1 <sync_fs>
c0005301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	53                   	push   ebx
c0005309:	e8 76 0c 00 00       	call   c0005f84 <ff_memfree>
c000530e:	83 c4 10             	add    esp,0x10
c0005311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005315:	83 c4 54             	add    esp,0x54
c0005318:	5b                   	pop    ebx
c0005319:	5e                   	pop    esi
c000531a:	c3                   	ret    

c000531b <f_getlabel>:
c000531b:	55                   	push   ebp
c000531c:	31 c9                	xor    ecx,ecx
c000531e:	57                   	push   edi
c000531f:	56                   	push   esi
c0005320:	53                   	push   ebx
c0005321:	83 ec 5c             	sub    esp,0x5c
c0005324:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005328:	8d 44 24 70          	lea    eax,[esp+0x70]
c000532c:	e8 ac d4 ff ff       	call   c00027dd <mount_volume>
c0005331:	89 c6                	mov    esi,eax
c0005333:	85 c0                	test   eax,eax
c0005335:	0f 85 27 01 00 00    	jne    c0005462 <f_getlabel+0x147>
c000533b:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0005340:	0f 84 d0 00 00 00    	je     c0005416 <f_getlabel+0xfb>
c0005346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000534a:	31 d2                	xor    edx,edx
c000534c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005350:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005358:	8d 44 24 20          	lea    eax,[esp+0x20]
c000535c:	e8 03 e3 ff ff       	call   c0003664 <dir_sdi>
c0005361:	85 c0                	test   eax,eax
c0005363:	0f 85 a1 00 00 00    	jne    c000540a <f_getlabel+0xef>
c0005369:	ba 01 00 00 00       	mov    edx,0x1
c000536e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005372:	e8 ec e6 ff ff       	call   c0003a63 <dir_read>
c0005377:	85 c0                	test   eax,eax
c0005379:	0f 85 8b 00 00 00    	jne    c000540a <f_getlabel+0xef>
c000537f:	31 db                	xor    ebx,ebx
c0005381:	31 c9                	xor    ecx,ecx
c0005383:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005387:	8d 79 01             	lea    edi,[ecx+0x1]
c000538a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000538f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005398:	e8 06 ce ff ff       	call   c00021a3 <dbc_1st>
c000539d:	85 c0                	test   eax,eax
c000539f:	74 16                	je     c00053b7 <f_getlabel+0x9c>
c00053a1:	83 ff 0b             	cmp    edi,0xb
c00053a4:	74 11                	je     c00053b7 <f_getlabel+0x9c>
c00053a6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c00053ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00053af:	8d 79 02             	lea    edi,[ecx+0x2]
c00053b2:	c1 e0 08             	shl    eax,0x8
c00053b5:	09 c2                	or     edx,eax
c00053b7:	0f b7 d2             	movzx  edx,dx
c00053ba:	50                   	push   eax
c00053bb:	50                   	push   eax
c00053bc:	68 b5 01 00 00       	push   0x1b5
c00053c1:	52                   	push   edx
c00053c2:	e8 75 0c 00 00       	call   c000603c <ff_oem2uni>
c00053c7:	83 c4 10             	add    esp,0x10
c00053ca:	0f b7 c0             	movzx  eax,ax
c00053cd:	85 c0                	test   eax,eax
c00053cf:	74 22                	je     c00053f3 <f_getlabel+0xd8>
c00053d1:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00053d5:	b9 04 00 00 00       	mov    ecx,0x4
c00053da:	01 da                	add    edx,ebx
c00053dc:	e8 a0 ce ff ff       	call   c0002281 <put_utf>
c00053e1:	0f b6 c0             	movzx  eax,al
c00053e4:	85 c0                	test   eax,eax
c00053e6:	74 0b                	je     c00053f3 <f_getlabel+0xd8>
c00053e8:	01 c3                	add    ebx,eax
c00053ea:	83 ff 0b             	cmp    edi,0xb
c00053ed:	74 06                	je     c00053f5 <f_getlabel+0xda>
c00053ef:	89 f9                	mov    ecx,edi
c00053f1:	eb 90                	jmp    c0005383 <f_getlabel+0x68>
c00053f3:	31 db                	xor    ebx,ebx
c00053f5:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00053f9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00053fc:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005400:	74 14                	je     c0005416 <f_getlabel+0xfb>
c0005402:	4b                   	dec    ebx
c0005403:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0005406:	74 f1                	je     c00053f9 <f_getlabel+0xde>
c0005408:	eb 0c                	jmp    c0005416 <f_getlabel+0xfb>
c000540a:	83 f8 04             	cmp    eax,0x4
c000540d:	75 51                	jne    c0005460 <f_getlabel+0x145>
c000540f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005413:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005416:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000541b:	74 45                	je     c0005462 <f_getlabel+0x147>
c000541d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005421:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005424:	e8 61 d2 ff ff       	call   c000268a <move_window>
c0005429:	89 c6                	mov    esi,eax
c000542b:	85 c0                	test   eax,eax
c000542d:	75 33                	jne    c0005462 <f_getlabel+0x147>
c000542f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005433:	b8 43 00 00 00       	mov    eax,0x43
c0005438:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000543b:	83 f9 03             	cmp    ecx,0x3
c000543e:	74 0f                	je     c000544f <f_getlabel+0x134>
c0005440:	31 c0                	xor    eax,eax
c0005442:	83 f9 04             	cmp    ecx,0x4
c0005445:	0f 94 c0             	sete   al
c0005448:	48                   	dec    eax
c0005449:	83 e0 c3             	and    eax,0xffffffc3
c000544c:	83 c0 64             	add    eax,0x64
c000544f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005453:	e8 d8 cc ff ff       	call   c0002130 <ld_dword>
c0005458:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000545c:	89 07                	mov    DWORD PTR [edi],eax
c000545e:	eb 02                	jmp    c0005462 <f_getlabel+0x147>
c0005460:	89 c6                	mov    esi,eax
c0005462:	83 c4 5c             	add    esp,0x5c
c0005465:	89 f0                	mov    eax,esi
c0005467:	5b                   	pop    ebx
c0005468:	5e                   	pop    esi
c0005469:	5f                   	pop    edi
c000546a:	5d                   	pop    ebp
c000546b:	c3                   	ret    

c000546c <f_setlabel>:
c000546c:	57                   	push   edi
c000546d:	b9 02 00 00 00       	mov    ecx,0x2
c0005472:	56                   	push   esi
c0005473:	53                   	push   ebx
c0005474:	83 ec 50             	sub    esp,0x50
c0005477:	8d 54 24 04          	lea    edx,[esp+0x4]
c000547b:	8d 44 24 60          	lea    eax,[esp+0x60]
c000547f:	e8 59 d3 ff ff       	call   c00027dd <mount_volume>
c0005484:	89 c6                	mov    esi,eax
c0005486:	85 c0                	test   eax,eax
c0005488:	0f 85 65 01 00 00    	jne    c00055f3 <f_setlabel+0x187>
c000548e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005493:	ba 20 00 00 00       	mov    edx,0x20
c0005498:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000549c:	31 db                	xor    ebx,ebx
c000549e:	e8 c1 cc ff ff       	call   c0002164 <mem_set>
c00054a3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00054a7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00054aa:	76 5d                	jbe    c0005509 <f_setlabel+0x9d>
c00054ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c00054b0:	e8 f4 cc ff ff       	call   c00021a9 <tchar2uni>
c00054b5:	3d ff ff 00 00       	cmp    eax,0xffff
c00054ba:	76 0a                	jbe    c00054c6 <f_setlabel+0x5a>
c00054bc:	be 06 00 00 00       	mov    esi,0x6
c00054c1:	e9 2d 01 00 00       	jmp    c00055f3 <f_setlabel+0x187>
c00054c6:	83 ec 0c             	sub    esp,0xc
c00054c9:	50                   	push   eax
c00054ca:	e8 e5 0b 00 00       	call   c00060b4 <ff_wtoupper>
c00054cf:	5a                   	pop    edx
c00054d0:	59                   	pop    ecx
c00054d1:	68 b5 01 00 00       	push   0x1b5
c00054d6:	50                   	push   eax
c00054d7:	e8 c0 0a 00 00       	call   c0005f9c <ff_uni2oem>
c00054dc:	83 c4 10             	add    esp,0x10
c00054df:	0f b7 f0             	movzx  esi,ax
c00054e2:	89 f7                	mov    edi,esi
c00054e4:	85 f6                	test   esi,esi
c00054e6:	74 d4                	je     c00054bc <f_setlabel+0x50>
c00054e8:	89 f2                	mov    edx,esi
c00054ea:	b8 f0 f7 02 c0       	mov    eax,0xc002f7f0
c00054ef:	e8 9e cc ff ff       	call   c0002192 <chk_chr>
c00054f4:	85 c0                	test   eax,eax
c00054f6:	75 c4                	jne    c00054bc <f_setlabel+0x50>
c00054f8:	81 fe ff 00 00 00    	cmp    esi,0xff
c00054fe:	0f 87 c9 00 00 00    	ja     c00055cd <f_setlabel+0x161>
c0005504:	e9 e0 00 00 00       	jmp    c00055e9 <f_setlabel+0x17d>
c0005509:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000550e:	74 ac                	je     c00054bc <f_setlabel+0x50>
c0005510:	85 db                	test   ebx,ebx
c0005512:	74 0e                	je     c0005522 <f_setlabel+0xb6>
c0005514:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005517:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c000551c:	75 04                	jne    c0005522 <f_setlabel+0xb6>
c000551e:	89 c3                	mov    ebx,eax
c0005520:	eb ee                	jmp    c0005510 <f_setlabel+0xa4>
c0005522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005526:	31 d2                	xor    edx,edx
c0005528:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000552c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005534:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005538:	e8 27 e1 ff ff       	call   c0003664 <dir_sdi>
c000553d:	89 c6                	mov    esi,eax
c000553f:	85 c0                	test   eax,eax
c0005541:	0f 85 ac 00 00 00    	jne    c00055f3 <f_setlabel+0x187>
c0005547:	ba 01 00 00 00       	mov    edx,0x1
c000554c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005550:	e8 0e e5 ff ff       	call   c0003a63 <dir_read>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 18                	jne    c0005571 <f_setlabel+0x105>
c0005559:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000555d:	85 db                	test   ebx,ebx
c000555f:	74 0b                	je     c000556c <f_setlabel+0x100>
c0005561:	b9 0b 00 00 00       	mov    ecx,0xb
c0005566:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000556a:	eb 47                	jmp    c00055b3 <f_setlabel+0x147>
c000556c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000556f:	eb 47                	jmp    c00055b8 <f_setlabel+0x14c>
c0005571:	83 f8 04             	cmp    eax,0x4
c0005574:	75 53                	jne    c00055c9 <f_setlabel+0x15d>
c0005576:	85 db                	test   ebx,ebx
c0005578:	74 79                	je     c00055f3 <f_setlabel+0x187>
c000557a:	ba 01 00 00 00       	mov    edx,0x1
c000557f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005583:	e8 76 e4 ff ff       	call   c00039fe <dir_alloc>
c0005588:	89 c6                	mov    esi,eax
c000558a:	85 c0                	test   eax,eax
c000558c:	75 65                	jne    c00055f3 <f_setlabel+0x187>
c000558e:	b9 20 00 00 00       	mov    ecx,0x20
c0005593:	31 d2                	xor    edx,edx
c0005595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005599:	e8 c6 cb ff ff       	call   c0002164 <mem_set>
c000559e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055a2:	b9 0b 00 00 00       	mov    ecx,0xb
c00055a7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00055ab:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00055af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055b3:	e8 97 cb ff ff       	call   c000214f <mem_cpy>
c00055b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055bc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00055c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055c4:	e8 f8 da ff ff       	call   c00030c1 <sync_fs>
c00055c9:	89 c6                	mov    esi,eax
c00055cb:	eb 26                	jmp    c00055f3 <f_setlabel+0x187>
c00055cd:	83 fb 09             	cmp    ebx,0x9
c00055d0:	0f 87 e6 fe ff ff    	ja     c00054bc <f_setlabel+0x50>
c00055d6:	89 f0                	mov    eax,esi
c00055d8:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00055dc:	43                   	inc    ebx
c00055dd:	89 f8                	mov    eax,edi
c00055df:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00055e3:	43                   	inc    ebx
c00055e4:	e9 ba fe ff ff       	jmp    c00054a3 <f_setlabel+0x37>
c00055e9:	83 fb 0a             	cmp    ebx,0xa
c00055ec:	76 ef                	jbe    c00055dd <f_setlabel+0x171>
c00055ee:	e9 c9 fe ff ff       	jmp    c00054bc <f_setlabel+0x50>
c00055f3:	83 c4 50             	add    esp,0x50
c00055f6:	89 f0                	mov    eax,esi
c00055f8:	5b                   	pop    ebx
c00055f9:	5e                   	pop    esi
c00055fa:	5f                   	pop    edi
c00055fb:	c3                   	ret    

c00055fc <f_expand>:
c00055fc:	55                   	push   ebp
c00055fd:	57                   	push   edi
c00055fe:	56                   	push   esi
c00055ff:	53                   	push   ebx
c0005600:	83 ec 2c             	sub    esp,0x2c
c0005603:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005607:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000560b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000560f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005613:	89 d8                	mov    eax,ebx
c0005615:	e8 c7 cf ff ff       	call   c00025e1 <validate>
c000561a:	89 c6                	mov    esi,eax
c000561c:	85 c0                	test   eax,eax
c000561e:	0f 85 3b 01 00 00    	jne    c000575f <f_expand+0x163>
c0005624:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005628:	85 f6                	test   esi,esi
c000562a:	0f 85 2f 01 00 00    	jne    c000575f <f_expand+0x163>
c0005630:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005635:	75 0a                	jne    c0005641 <f_expand+0x45>
c0005637:	be 07 00 00 00       	mov    esi,0x7
c000563c:	e9 1e 01 00 00       	jmp    c000575f <f_expand+0x163>
c0005641:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005645:	75 f0                	jne    c0005637 <f_expand+0x3b>
c0005647:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000564b:	74 ea                	je     c0005637 <f_expand+0x3b>
c000564d:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005651:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005655:	c1 e1 09             	shl    ecx,0x9
c0005658:	8d 41 ff             	lea    eax,[ecx-0x1]
c000565b:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000565f:	0f 95 c0             	setne  al
c0005662:	31 d2                	xor    edx,edx
c0005664:	0f b6 c0             	movzx  eax,al
c0005667:	89 c7                	mov    edi,eax
c0005669:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000566d:	f7 f1                	div    ecx
c000566f:	01 f8                	add    eax,edi
c0005671:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005674:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005678:	83 ff 01             	cmp    edi,0x1
c000567b:	76 05                	jbe    c0005682 <f_expand+0x86>
c000567d:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005680:	77 05                	ja     c0005687 <f_expand+0x8b>
c0005682:	bf 02 00 00 00       	mov    edi,0x2
c0005687:	89 3c 24             	mov    DWORD PTR [esp],edi
c000568a:	89 fd                	mov    ebp,edi
c000568c:	31 c9                	xor    ecx,ecx
c000568e:	89 ea                	mov    edx,ebp
c0005690:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005694:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005696:	45                   	inc    ebp
c0005697:	e8 c4 de ff ff       	call   c0003560 <get_fat.isra.2>
c000569c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00056a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00056a4:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00056a7:	77 05                	ja     c00056ae <f_expand+0xb2>
c00056a9:	bd 02 00 00 00       	mov    ebp,0x2
c00056ae:	83 f8 01             	cmp    eax,0x1
c00056b1:	74 20                	je     c00056d3 <f_expand+0xd7>
c00056b3:	83 f8 ff             	cmp    eax,0xffffffff
c00056b6:	74 25                	je     c00056dd <f_expand+0xe1>
c00056b8:	85 c0                	test   eax,eax
c00056ba:	75 09                	jne    c00056c5 <f_expand+0xc9>
c00056bc:	41                   	inc    ecx
c00056bd:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00056c1:	75 07                	jne    c00056ca <f_expand+0xce>
c00056c3:	eb 1f                	jmp    c00056e4 <f_expand+0xe8>
c00056c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00056c8:	31 c9                	xor    ecx,ecx
c00056ca:	39 fd                	cmp    ebp,edi
c00056cc:	75 c0                	jne    c000568e <f_expand+0x92>
c00056ce:	e9 64 ff ff ff       	jmp    c0005637 <f_expand+0x3b>
c00056d3:	be 02 00 00 00       	mov    esi,0x2
c00056d8:	e9 82 00 00 00       	jmp    c000575f <f_expand+0x163>
c00056dd:	be 01 00 00 00       	mov    esi,0x1
c00056e2:	eb 7b                	jmp    c000575f <f_expand+0x163>
c00056e4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00056e9:	74 2b                	je     c0005716 <f_expand+0x11a>
c00056eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00056ee:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00056f2:	85 ed                	test   ebp,ebp
c00056f4:	74 24                	je     c000571a <f_expand+0x11e>
c00056f6:	83 c9 ff             	or     ecx,0xffffffff
c00056f9:	83 fd 01             	cmp    ebp,0x1
c00056fc:	74 03                	je     c0005701 <f_expand+0x105>
c00056fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005701:	89 fa                	mov    edx,edi
c0005703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005707:	e8 c2 d3 ff ff       	call   c0002ace <put_fat>
c000570c:	85 c0                	test   eax,eax
c000570e:	75 4d                	jne    c000575d <f_expand+0x161>
c0005710:	89 f8                	mov    eax,edi
c0005712:	4d                   	dec    ebp
c0005713:	47                   	inc    edi
c0005714:	eb dc                	jmp    c00056f2 <f_expand+0xf6>
c0005716:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005719:	48                   	dec    eax
c000571a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000571e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005723:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005726:	74 37                	je     c000575f <f_expand+0x163>
c0005728:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000572b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000572e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005732:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005735:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005738:	83 c8 40             	or     eax,0x40
c000573b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000573e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005741:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005744:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005747:	39 c8                	cmp    eax,ecx
c0005749:	77 14                	ja     c000575f <f_expand+0x163>
c000574b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000574f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005752:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005755:	83 c8 01             	or     eax,0x1
c0005758:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000575b:	eb 02                	jmp    c000575f <f_expand+0x163>
c000575d:	89 c6                	mov    esi,eax
c000575f:	83 c4 2c             	add    esp,0x2c
c0005762:	89 f0                	mov    eax,esi
c0005764:	5b                   	pop    ebx
c0005765:	5e                   	pop    esi
c0005766:	5f                   	pop    edi
c0005767:	5d                   	pop    ebp
c0005768:	c3                   	ret    

c0005769 <f_mkfs>:
c0005769:	55                   	push   ebp
c000576a:	57                   	push   edi
c000576b:	56                   	push   esi
c000576c:	be 0b 00 00 00       	mov    esi,0xb
c0005771:	53                   	push   ebx
c0005772:	83 ec 5c             	sub    esp,0x5c
c0005775:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005779:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000577d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005781:	e8 0e ce ff ff       	call   c0002594 <get_ldnumber>
c0005786:	85 c0                	test   eax,eax
c0005788:	0f 88 d1 07 00 00    	js     c0005f5f <f_mkfs+0x7f6>
c000578e:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c0005795:	85 d2                	test   edx,edx
c0005797:	74 03                	je     c000579c <f_mkfs+0x33>
c0005799:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000579c:	85 db                	test   ebx,ebx
c000579e:	75 05                	jne    c00057a5 <f_mkfs+0x3c>
c00057a0:	bb e0 f7 02 c0       	mov    ebx,0xc002f7e0
c00057a5:	83 ec 0c             	sub    esp,0xc
c00057a8:	0f b6 c0             	movzx  eax,al
c00057ab:	be 03 00 00 00       	mov    esi,0x3
c00057b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057b8:	e8 18 c9 ff ff       	call   c00020d5 <disk_initialize>
c00057bd:	83 c4 10             	add    esp,0x10
c00057c0:	a8 01                	test   al,0x1
c00057c2:	0f 85 97 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057c8:	be 0a 00 00 00       	mov    esi,0xa
c00057cd:	a8 04                	test   al,0x4
c00057cf:	0f 85 8a 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00057d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00057dc:	85 c0                	test   eax,eax
c00057de:	75 20                	jne    c0005800 <f_mkfs+0x97>
c00057e0:	51                   	push   ecx
c00057e1:	8d 44 24 44          	lea    eax,[esp+0x44]
c00057e5:	50                   	push   eax
c00057e6:	6a 03                	push   0x3
c00057e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057ec:	e8 13 c9 ff ff       	call   c0002104 <disk_ioctl>
c00057f1:	83 c4 10             	add    esp,0x10
c00057f4:	85 c0                	test   eax,eax
c00057f6:	74 08                	je     c0005800 <f_mkfs+0x97>
c00057f8:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005800:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005804:	8d 42 ff             	lea    eax,[edx-0x1]
c0005807:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000580c:	77 04                	ja     c0005812 <f_mkfs+0xa9>
c000580e:	85 c2                	test   edx,eax
c0005810:	74 08                	je     c000581a <f_mkfs+0xb1>
c0005812:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000581a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000581d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005821:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005825:	48                   	dec    eax
c0005826:	3c 01                	cmp    al,0x1
c0005828:	76 05                	jbe    c000582f <f_mkfs+0xc6>
c000582a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000582f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005832:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005836:	48                   	dec    eax
c0005837:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000583c:	77 07                	ja     c0005845 <f_mkfs+0xdc>
c000583e:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c0005843:	74 08                	je     c000584d <f_mkfs+0xe4>
c0005845:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c000584d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005850:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005856:	77 07                	ja     c000585f <f_mkfs+0xf6>
c0005858:	8d 47 ff             	lea    eax,[edi-0x1]
c000585b:	85 f8                	test   eax,edi
c000585d:	74 02                	je     c0005861 <f_mkfs+0xf8>
c000585f:	31 ff                	xor    edi,edi
c0005861:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005869:	77 0a                	ja     c0005875 <f_mkfs+0x10c>
c000586b:	be 11 00 00 00       	mov    esi,0x11
c0005870:	e9 ea 06 00 00       	jmp    c0005f5f <f_mkfs+0x7f6>
c0005875:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005877:	85 ed                	test   ebp,ebp
c0005879:	89 eb                	mov    ebx,ebp
c000587b:	75 1e                	jne    c000589b <f_mkfs+0x132>
c000587d:	83 ec 0c             	sub    esp,0xc
c0005880:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005887:	25 00 fe ff ff       	and    eax,0xfffffe00
c000588c:	50                   	push   eax
c000588d:	e8 da 06 00 00       	call   c0005f6c <ff_memalloc>
c0005892:	83 c4 10             	add    esp,0x10
c0005895:	89 c3                	mov    ebx,eax
c0005897:	85 c0                	test   eax,eax
c0005899:	74 d0                	je     c000586b <f_mkfs+0x102>
c000589b:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c00058a3:	52                   	push   edx
c00058a4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00058a8:	50                   	push   eax
c00058a9:	6a 01                	push   0x1
c00058ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00058af:	e8 50 c8 ff ff       	call   c0002104 <disk_ioctl>
c00058b4:	83 c4 10             	add    esp,0x10
c00058b7:	85 c0                	test   eax,eax
c00058b9:	0f 85 49 06 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c00058bf:	89 f0                	mov    eax,esi
c00058c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00058c9:	83 e0 08             	and    eax,0x8
c00058cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00058d0:	75 18                	jne    c00058ea <f_mkfs+0x181>
c00058d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058d6:	83 f8 3f             	cmp    eax,0x3f
c00058d9:	76 0f                	jbe    c00058ea <f_mkfs+0x181>
c00058db:	83 e8 3f             	sub    eax,0x3f
c00058de:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00058e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00058ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00058f2:	83 f8 7f             	cmp    eax,0x7f
c00058f5:	0f 86 5b 02 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c00058fb:	b9 80 00 00 00       	mov    ecx,0x80
c0005900:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005906:	77 05                	ja     c000590d <f_mkfs+0x1a4>
c0005908:	c1 ef 09             	shr    edi,0x9
c000590b:	89 f9                	mov    ecx,edi
c000590d:	89 f0                	mov    eax,esi
c000590f:	89 f7                	mov    edi,esi
c0005911:	83 e0 01             	and    eax,0x1
c0005914:	83 e7 02             	and    edi,0x2
c0005917:	0f b6 c0             	movzx  eax,al
c000591a:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000591e:	74 0a                	je     c000592a <f_mkfs+0x1c1>
c0005920:	85 c0                	test   eax,eax
c0005922:	0f 84 4f 01 00 00    	je     c0005a77 <f_mkfs+0x30e>
c0005928:	eb 37                	jmp    c0005961 <f_mkfs+0x1f8>
c000592a:	be 13 00 00 00       	mov    esi,0x13
c000592f:	85 c0                	test   eax,eax
c0005931:	75 2e                	jne    c0005961 <f_mkfs+0x1f8>
c0005933:	e9 e7 05 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005938:	83 f8 02             	cmp    eax,0x2
c000593b:	0f 85 0d 02 00 00    	jne    c0005b4e <f_mkfs+0x3e5>
c0005941:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005947:	0f 86 e4 01 00 00    	jbe    c0005b31 <f_mkfs+0x3c8>
c000594d:	85 c9                	test   ecx,ecx
c000594f:	0f 85 dc 05 00 00    	jne    c0005f31 <f_mkfs+0x7c8>
c0005955:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005958:	83 f9 40             	cmp    ecx,0x40
c000595b:	0f 87 e0 05 00 00    	ja     c0005f41 <f_mkfs+0x7d8>
c0005961:	89 cf                	mov    edi,ecx
c0005963:	85 c9                	test   ecx,ecx
c0005965:	75 1c                	jne    c0005983 <f_mkfs+0x21a>
c0005967:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000596b:	b8 c0 f7 02 c0       	mov    eax,0xc002f7c0
c0005970:	c1 ee 0c             	shr    esi,0xc
c0005973:	bf 01 00 00 00       	mov    edi,0x1
c0005978:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000597b:	85 d2                	test   edx,edx
c000597d:	0f 85 63 01 00 00    	jne    c0005ae6 <f_mkfs+0x37d>
c0005983:	31 d2                	xor    edx,edx
c0005985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005989:	f7 f7                	div    edi
c000598b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005990:	0f 86 62 01 00 00    	jbe    c0005af8 <f_mkfs+0x38f>
c0005996:	83 c0 02             	add    eax,0x2
c0005999:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000599e:	01 c0                	add    eax,eax
c00059a0:	05 ff 01 00 00       	add    eax,0x1ff
c00059a5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00059ad:	c1 e8 09             	shr    eax,0x9
c00059b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059b8:	c1 e0 05             	shl    eax,0x5
c00059bb:	c1 e8 09             	shr    eax,0x9
c00059be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00059c2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00059c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00059cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059cf:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00059d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00059d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059db:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00059e0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00059e4:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00059e8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00059ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00059f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00059f4:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00059f8:	f7 d8                	neg    eax
c00059fa:	21 c6                	and    esi,eax
c00059fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a01:	29 d6                	sub    esi,edx
c0005a03:	83 f8 03             	cmp    eax,0x3
c0005a06:	0f 85 ff 00 00 00    	jne    c0005b0b <f_mkfs+0x3a2>
c0005a0c:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005a10:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005a14:	89 f8                	mov    eax,edi
c0005a16:	c1 e0 04             	shl    eax,0x4
c0005a19:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005a1d:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005a21:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005a25:	0f 82 2b 01 00 00    	jb     c0005b56 <f_mkfs+0x3ed>
c0005a2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a33:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005a37:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c0005a3c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005a40:	29 d0                	sub    eax,edx
c0005a42:	31 d2                	xor    edx,edx
c0005a44:	f7 f7                	div    edi
c0005a46:	89 c6                	mov    esi,eax
c0005a48:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4d:	83 f8 03             	cmp    eax,0x3
c0005a50:	0f 85 e2 fe ff ff    	jne    c0005938 <f_mkfs+0x1cf>
c0005a56:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005a5c:	0f 87 03 01 00 00    	ja     c0005b65 <f_mkfs+0x3fc>
c0005a62:	85 c9                	test   ecx,ecx
c0005a64:	0f 85 ec 00 00 00    	jne    c0005b56 <f_mkfs+0x3ed>
c0005a6a:	83 ff 01             	cmp    edi,0x1
c0005a6d:	0f 86 e3 00 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c0005a73:	d1 ef                	shr    edi,1
c0005a75:	89 f9                	mov    ecx,edi
c0005a77:	89 ce                	mov    esi,ecx
c0005a79:	85 c9                	test   ecx,ecx
c0005a7b:	75 25                	jne    c0005aa2 <f_mkfs+0x339>
c0005a7d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005a81:	b8 d0 f7 02 c0       	mov    eax,0xc002f7d0
c0005a86:	c1 ee 11             	shr    esi,0x11
c0005a89:	b9 01 00 00 00       	mov    ecx,0x1
c0005a8e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005a91:	85 d2                	test   edx,edx
c0005a93:	74 0b                	je     c0005aa0 <f_mkfs+0x337>
c0005a95:	83 c0 02             	add    eax,0x2
c0005a98:	39 f2                	cmp    edx,esi
c0005a9a:	77 04                	ja     c0005aa0 <f_mkfs+0x337>
c0005a9c:	01 c9                	add    ecx,ecx
c0005a9e:	eb ee                	jmp    c0005a8e <f_mkfs+0x325>
c0005aa0:	31 f6                	xor    esi,esi
c0005aa2:	31 d2                	xor    edx,edx
c0005aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa8:	f7 f1                	div    ecx
c0005aaa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005ab1:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005ab6:	c1 ea 09             	shr    edx,0x9
c0005ab9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005abe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005ac2:	0f 87 8e 00 00 00    	ja     c0005b56 <f_mkfs+0x3ed>
c0005ac8:	89 cf                	mov    edi,ecx
c0005aca:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005ad2:	89 f1                	mov    ecx,esi
c0005ad4:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005adc:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005ae1:	e9 dc fe ff ff       	jmp    c00059c2 <f_mkfs+0x259>
c0005ae6:	83 c0 02             	add    eax,0x2
c0005ae9:	39 f2                	cmp    edx,esi
c0005aeb:	0f 87 92 fe ff ff    	ja     c0005983 <f_mkfs+0x21a>
c0005af1:	01 ff                	add    edi,edi
c0005af3:	e9 80 fe ff ff       	jmp    c0005978 <f_mkfs+0x20f>
c0005af8:	8d 04 40             	lea    eax,[eax+eax*2]
c0005afb:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b00:	40                   	inc    eax
c0005b01:	d1 e8                	shr    eax,1
c0005b03:	83 c0 03             	add    eax,0x3
c0005b06:	e9 95 fe ff ff       	jmp    c00059a0 <f_mkfs+0x237>
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	89 f0                	mov    eax,esi
c0005b0f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b13:	85 d2                	test   edx,edx
c0005b15:	74 09                	je     c0005b20 <f_mkfs+0x3b7>
c0005b17:	4e                   	dec    esi
c0005b18:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005b1c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005b20:	89 f0                	mov    eax,esi
c0005b22:	31 d2                	xor    edx,edx
c0005b24:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b28:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005b2c:	e9 e3 fe ff ff       	jmp    c0005a14 <f_mkfs+0x2ab>
c0005b31:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b37:	77 2c                	ja     c0005b65 <f_mkfs+0x3fc>
c0005b39:	85 c9                	test   ecx,ecx
c0005b3b:	75 19                	jne    c0005b56 <f_mkfs+0x3ed>
c0005b3d:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005b40:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b46:	0f 86 15 fe ff ff    	jbe    c0005961 <f_mkfs+0x1f8>
c0005b4c:	eb 08                	jmp    c0005b56 <f_mkfs+0x3ed>
c0005b4e:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b54:	76 0a                	jbe    c0005b60 <f_mkfs+0x3f7>
c0005b56:	be 0e 00 00 00       	mov    esi,0xe
c0005b5b:	e9 bf 03 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005b60:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b65:	31 d2                	xor    edx,edx
c0005b67:	b9 00 02 00 00       	mov    ecx,0x200
c0005b6c:	89 d8                	mov    eax,ebx
c0005b6e:	e8 f1 c5 ff ff       	call   c0002164 <mem_set>
c0005b73:	b9 0b 00 00 00       	mov    ecx,0xb
c0005b78:	ba 6e f7 02 c0       	mov    edx,0xc002f76e
c0005b7d:	89 d8                	mov    eax,ebx
c0005b7f:	e8 cb c5 ff ff       	call   c000214f <mem_cpy>
c0005b84:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005b87:	ba 00 02 00 00       	mov    edx,0x200
c0005b8c:	e8 b7 c5 ff ff       	call   c0002148 <st_word>
c0005b91:	89 f8                	mov    eax,edi
c0005b93:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005b98:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005b9b:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005b9e:	e8 a5 c5 ff ff       	call   c0002148 <st_word>
c0005ba3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005ba7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005baa:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005baf:	83 f8 03             	cmp    eax,0x3
c0005bb2:	75 08                	jne    c0005bbc <f_mkfs+0x453>
c0005bb4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005bc0:	8d 43 11             	lea    eax,[ebx+0x11]
c0005bc3:	e8 80 c5 ff ff       	call   c0002148 <st_word>
c0005bc8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005bcc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005bd2:	77 0a                	ja     c0005bde <f_mkfs+0x475>
c0005bd4:	8d 43 13             	lea    eax,[ebx+0x13]
c0005bd7:	e8 6c c5 ff ff       	call   c0002148 <st_word>
c0005bdc:	eb 08                	jmp    c0005be6 <f_mkfs+0x47d>
c0005bde:	8d 43 20             	lea    eax,[ebx+0x20]
c0005be1:	e8 66 c5 ff ff       	call   c000214c <st_dword>
c0005be6:	8d 43 18             	lea    eax,[ebx+0x18]
c0005be9:	ba 3f 00 00 00       	mov    edx,0x3f
c0005bee:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005bf2:	e8 51 c5 ff ff       	call   c0002148 <st_word>
c0005bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005bfa:	ba ff 00 00 00       	mov    edx,0xff
c0005bff:	e8 44 c5 ff ff       	call   c0002148 <st_word>
c0005c04:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005c0b:	e8 3c c5 ff ff       	call   c000214c <st_dword>
c0005c10:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c15:	83 f8 03             	cmp    eax,0x3
c0005c18:	75 57                	jne    c0005c71 <f_mkfs+0x508>
c0005c1a:	8d 43 43             	lea    eax,[ebx+0x43]
c0005c1d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c22:	e8 25 c5 ff ff       	call   c000214c <st_dword>
c0005c27:	8d 43 24             	lea    eax,[ebx+0x24]
c0005c2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005c2e:	e8 19 c5 ff ff       	call   c000214c <st_dword>
c0005c33:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005c36:	ba 02 00 00 00       	mov    edx,0x2
c0005c3b:	e8 0c c5 ff ff       	call   c000214c <st_dword>
c0005c40:	8d 43 30             	lea    eax,[ebx+0x30]
c0005c43:	ba 01 00 00 00       	mov    edx,0x1
c0005c48:	e8 fb c4 ff ff       	call   c0002148 <st_word>
c0005c4d:	8d 43 32             	lea    eax,[ebx+0x32]
c0005c50:	ba 06 00 00 00       	mov    edx,0x6
c0005c55:	e8 ee c4 ff ff       	call   c0002148 <st_word>
c0005c5a:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005c5e:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005c62:	8d 43 47             	lea    eax,[ebx+0x47]
c0005c65:	b9 13 00 00 00       	mov    ecx,0x13
c0005c6a:	ba 7a f7 02 c0       	mov    edx,0xc002f77a
c0005c6f:	eb 2f                	jmp    c0005ca0 <f_mkfs+0x537>
c0005c71:	8d 43 27             	lea    eax,[ebx+0x27]
c0005c74:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c79:	e8 ce c4 ff ff       	call   c000214c <st_dword>
c0005c7e:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005c83:	8d 43 16             	lea    eax,[ebx+0x16]
c0005c86:	e8 bd c4 ff ff       	call   c0002148 <st_word>
c0005c8b:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005c8f:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005c93:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005c96:	b9 13 00 00 00       	mov    ecx,0x13
c0005c9b:	ba 8e f7 02 c0       	mov    edx,0xc002f78e
c0005ca0:	e8 aa c4 ff ff       	call   c000214f <mem_cpy>
c0005ca5:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005cab:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005cb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cb4:	e8 8f c4 ff ff       	call   c0002148 <st_word>
c0005cb9:	6a 01                	push   0x1
c0005cbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbf:	53                   	push   ebx
c0005cc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cc4:	e8 25 c4 ff ff       	call   c00020ee <disk_write>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	85 c0                	test   eax,eax
c0005cce:	0f 85 34 02 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005cd4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cd9:	83 f8 03             	cmp    eax,0x3
c0005cdc:	0f 85 98 00 00 00    	jne    c0005d7a <f_mkfs+0x611>
c0005ce2:	6a 01                	push   0x1
c0005ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005ce8:	83 c0 06             	add    eax,0x6
c0005ceb:	50                   	push   eax
c0005cec:	53                   	push   ebx
c0005ced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cf1:	e8 f8 c3 ff ff       	call   c00020ee <disk_write>
c0005cf6:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfb:	31 d2                	xor    edx,edx
c0005cfd:	89 d8                	mov    eax,ebx
c0005cff:	e8 60 c4 ff ff       	call   c0002164 <mem_set>
c0005d04:	ba 52 52 61 41       	mov    edx,0x41615252
c0005d09:	89 d8                	mov    eax,ebx
c0005d0b:	e8 3c c4 ff ff       	call   c000214c <st_dword>
c0005d10:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005d16:	ba 72 72 41 61       	mov    edx,0x61417272
c0005d1b:	e8 2c c4 ff ff       	call   c000214c <st_dword>
c0005d20:	8d 56 ff             	lea    edx,[esi-0x1]
c0005d23:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005d29:	e8 1e c4 ff ff       	call   c000214c <st_dword>
c0005d2e:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005d34:	ba 02 00 00 00       	mov    edx,0x2
c0005d39:	e8 0e c4 ff ff       	call   c000214c <st_dword>
c0005d3e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005d43:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005d49:	e8 fa c3 ff ff       	call   c0002148 <st_word>
c0005d4e:	6a 01                	push   0x1
c0005d50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005d54:	83 c0 07             	add    eax,0x7
c0005d57:	50                   	push   eax
c0005d58:	53                   	push   ebx
c0005d59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005d5d:	e8 8c c3 ff ff       	call   c00020ee <disk_write>
c0005d62:	83 c4 20             	add    esp,0x20
c0005d65:	6a 01                	push   0x1
c0005d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d6b:	40                   	inc    eax
c0005d6c:	50                   	push   eax
c0005d6d:	53                   	push   ebx
c0005d6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d72:	e8 77 c3 ff ff       	call   c00020ee <disk_write>
c0005d77:	83 c4 10             	add    esp,0x10
c0005d7a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005d7e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005d82:	c1 e8 09             	shr    eax,0x9
c0005d85:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005d8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d8f:	31 d2                	xor    edx,edx
c0005d91:	89 d8                	mov    eax,ebx
c0005d93:	e8 cc c3 ff ff       	call   c0002164 <mem_set>
c0005d98:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d9d:	31 c9                	xor    ecx,ecx
c0005d9f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005da7:	83 f8 01             	cmp    eax,0x1
c0005daa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005dae:	0f 94 c1             	sete   cl
c0005db1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005db5:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005db9:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005dc1:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005dc9:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005dce:	75 21                	jne    c0005df1 <f_mkfs+0x688>
c0005dd0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005dd5:	89 d8                	mov    eax,ebx
c0005dd7:	e8 70 c3 ff ff       	call   c000214c <st_dword>
c0005ddc:	8d 43 04             	lea    eax,[ebx+0x4]
c0005ddf:	83 ca ff             	or     edx,0xffffffff
c0005de2:	e8 65 c3 ff ff       	call   c000214c <st_dword>
c0005de7:	8d 43 08             	lea    eax,[ebx+0x8]
c0005dea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005def:	eb 06                	jmp    c0005df7 <f_mkfs+0x68e>
c0005df1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 50 c3 ff ff       	call   c000214c <st_dword>
c0005dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005e04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005e08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005e0c:	39 ce                	cmp    esi,ecx
c0005e0e:	76 02                	jbe    c0005e12 <f_mkfs+0x6a9>
c0005e10:	89 ce                	mov    esi,ecx
c0005e12:	56                   	push   esi
c0005e13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e17:	53                   	push   ebx
c0005e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e1c:	e8 cd c2 ff ff       	call   c00020ee <disk_write>
c0005e21:	83 c4 10             	add    esp,0x10
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 85 dc 00 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	b9 00 02 00 00       	mov    ecx,0x200
c0005e33:	89 d8                	mov    eax,ebx
c0005e35:	e8 2a c3 ff ff       	call   c0002164 <mem_set>
c0005e3a:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e3e:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005e42:	75 c0                	jne    c0005e04 <f_mkfs+0x69b>
c0005e44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005e48:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005e50:	40                   	inc    eax
c0005e51:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005e55:	0f 87 6e ff ff ff    	ja     c0005dc9 <f_mkfs+0x660>
c0005e5b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e60:	83 f8 03             	cmp    eax,0x3
c0005e63:	74 04                	je     c0005e69 <f_mkfs+0x700>
c0005e65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005e69:	89 fe                	mov    esi,edi
c0005e6b:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005e6f:	76 04                	jbe    c0005e75 <f_mkfs+0x70c>
c0005e71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e75:	56                   	push   esi
c0005e76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e7a:	53                   	push   ebx
c0005e7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e7f:	e8 6a c2 ff ff       	call   c00020ee <disk_write>
c0005e84:	83 c4 10             	add    esp,0x10
c0005e87:	85 c0                	test   eax,eax
c0005e89:	75 7d                	jne    c0005f08 <f_mkfs+0x79f>
c0005e8b:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e8f:	29 f7                	sub    edi,esi
c0005e91:	75 d6                	jne    c0005e69 <f_mkfs+0x700>
c0005e93:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e98:	b9 0c 00 00 00       	mov    ecx,0xc
c0005e9d:	83 f8 03             	cmp    eax,0x3
c0005ea0:	74 1e                	je     c0005ec0 <f_mkfs+0x757>
c0005ea2:	b9 06 00 00 00       	mov    ecx,0x6
c0005ea7:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005eaf:	77 0f                	ja     c0005ec0 <f_mkfs+0x757>
c0005eb1:	b9 04 00 00 00       	mov    ecx,0x4
c0005eb6:	83 f8 02             	cmp    eax,0x2
c0005eb9:	74 05                	je     c0005ec0 <f_mkfs+0x757>
c0005ebb:	b9 01 00 00 00       	mov    ecx,0x1
c0005ec0:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005ec5:	75 2a                	jne    c0005ef1 <f_mkfs+0x788>
c0005ec7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005ecb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005ed3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005ed7:	83 ec 0c             	sub    esp,0xc
c0005eda:	53                   	push   ebx
c0005edb:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005edf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee3:	e8 89 d2 ff ff       	call   c0003171 <create_partition>
c0005ee8:	83 c4 10             	add    esp,0x10
c0005eeb:	89 c6                	mov    esi,eax
c0005eed:	85 c0                	test   eax,eax
c0005eef:	75 2e                	jne    c0005f1f <f_mkfs+0x7b6>
c0005ef1:	31 f6                	xor    esi,esi
c0005ef3:	50                   	push   eax
c0005ef4:	6a 00                	push   0x0
c0005ef6:	6a 00                	push   0x0
c0005ef8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005efc:	e8 03 c2 ff ff       	call   c0002104 <disk_ioctl>
c0005f01:	83 c4 10             	add    esp,0x10
c0005f04:	85 c0                	test   eax,eax
c0005f06:	74 17                	je     c0005f1f <f_mkfs+0x7b6>
c0005f08:	85 ed                	test   ebp,ebp
c0005f0a:	75 0c                	jne    c0005f18 <f_mkfs+0x7af>
c0005f0c:	83 ec 0c             	sub    esp,0xc
c0005f0f:	53                   	push   ebx
c0005f10:	e8 6f 00 00 00       	call   c0005f84 <ff_memfree>
c0005f15:	83 c4 10             	add    esp,0x10
c0005f18:	be 01 00 00 00       	mov    esi,0x1
c0005f1d:	eb 40                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f1f:	85 ed                	test   ebp,ebp
c0005f21:	75 3c                	jne    c0005f5f <f_mkfs+0x7f6>
c0005f23:	83 ec 0c             	sub    esp,0xc
c0005f26:	53                   	push   ebx
c0005f27:	e8 58 00 00 00       	call   c0005f84 <ff_memfree>
c0005f2c:	83 c4 10             	add    esp,0x10
c0005f2f:	eb 2e                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f31:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f36:	0f 85 3b fb ff ff    	jne    c0005a77 <f_mkfs+0x30e>
c0005f3c:	e9 15 fc ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f41:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f46:	0f 85 31 fb ff ff    	jne    c0005a7d <f_mkfs+0x314>
c0005f4c:	89 cf                	mov    edi,ecx
c0005f4e:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005f54:	0f 86 29 fa ff ff    	jbe    c0005983 <f_mkfs+0x21a>
c0005f5a:	e9 f7 fb ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f5f:	83 c4 5c             	add    esp,0x5c
c0005f62:	89 f0                	mov    eax,esi
c0005f64:	5b                   	pop    ebx
c0005f65:	5e                   	pop    esi
c0005f66:	5f                   	pop    edi
c0005f67:	5d                   	pop    ebp
c0005f68:	c3                   	ret    
c0005f69:	66 90                	xchg   ax,ax
c0005f6b:	90                   	nop

c0005f6c <ff_memalloc>:
c0005f6c:	83 ec 0c             	sub    esp,0xc
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	e8 7b 06 01 00       	call   c00165f6 <malloc>
c0005f7b:	83 c4 10             	add    esp,0x10
c0005f7e:	83 c4 0c             	add    esp,0xc
c0005f81:	c3                   	ret    
c0005f82:	66 90                	xchg   ax,ax

c0005f84 <ff_memfree>:
c0005f84:	83 ec 0c             	sub    esp,0xc
c0005f87:	83 ec 0c             	sub    esp,0xc
c0005f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8e:	e8 73 06 01 00       	call   c0016606 <free>
c0005f93:	83 c4 10             	add    esp,0x10
c0005f96:	90                   	nop
c0005f97:	83 c4 0c             	add    esp,0xc
c0005f9a:	c3                   	ret    
c0005f9b:	90                   	nop

c0005f9c <ff_uni2oem>:
c0005f9c:	83 ec 14             	sub    esp,0x14
c0005f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005fa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fae:	c7 44 24 0c c0 fb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002fbc0
c0005fb6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005fbb:	77 0b                	ja     c0005fc8 <ff_uni2oem+0x2c>
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005fc6:	eb 68                	jmp    c0006030 <ff_uni2oem+0x94>
c0005fc8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005fd0:	77 5e                	ja     c0006030 <ff_uni2oem+0x94>
c0005fd2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005fd6:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005fdb:	75 53                	jne    c0006030 <ff_uni2oem+0x94>
c0005fdd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fe4:	eb 12                	jmp    c0005ff8 <ff_uni2oem+0x5c>
c0005fe6:	66 90                	xchg   ax,ax
c0005fe8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005fed:	83 c0 01             	add    eax,0x1
c0005ff0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ff8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ffd:	83 f8 7f             	cmp    eax,0x7f
c0006000:	77 1e                	ja     c0006020 <ff_uni2oem+0x84>
c0006002:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006007:	01 c0                	add    eax,eax
c0006009:	89 c2                	mov    edx,eax
c000600b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000600f:	01 d0                	add    eax,edx
c0006011:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006014:	0f b7 c0             	movzx  eax,ax
c0006017:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000601b:	75 cb                	jne    c0005fe8 <ff_uni2oem+0x4c>
c000601d:	8d 76 00             	lea    esi,[esi+0x0]
c0006020:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006025:	83 e8 80             	sub    eax,0xffffff80
c0006028:	0f b6 c0             	movzx  eax,al
c000602b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006030:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006035:	83 c4 14             	add    esp,0x14
c0006038:	c3                   	ret    
c0006039:	8d 76 00             	lea    esi,[esi+0x0]

c000603c <ff_oem2uni>:
c000603c:	83 ec 18             	sub    esp,0x18
c000603f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006047:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000604c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0006050:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0006057:	c7 44 24 10 c0 fb 02 c0 	mov    DWORD PTR [esp+0x10],0xc002fbc0
c000605f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006064:	83 f8 7f             	cmp    eax,0x7f
c0006067:	77 0b                	ja     c0006074 <ff_oem2uni+0x38>
c0006069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000606d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0006072:	eb 34                	jmp    c00060a8 <ff_oem2uni+0x6c>
c0006074:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0006078:	3d b5 01 00 00       	cmp    eax,0x1b5
c000607d:	75 29                	jne    c00060a8 <ff_oem2uni+0x6c>
c000607f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006084:	3d ff 00 00 00       	cmp    eax,0xff
c0006089:	77 1d                	ja     c00060a8 <ff_oem2uni+0x6c>
c000608b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006090:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0006095:	01 c0                	add    eax,eax
c0006097:	89 c2                	mov    edx,eax
c0006099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000609d:	01 d0                	add    eax,edx
c000609f:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00060ad:	83 c4 18             	add    esp,0x18
c00060b0:	c3                   	ret    
c00060b1:	8d 76 00             	lea    esi,[esi+0x0]

c00060b4 <ff_wtoupper>:
c00060b4:	83 ec 10             	sub    esp,0x10
c00060b7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00060bf:	0f 87 ab 01 00 00    	ja     c0006270 <ff_wtoupper+0x1bc>
c00060c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060c9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060ce:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060d3:	3d ff 0f 00 00       	cmp    eax,0xfff
c00060d8:	77 0a                	ja     c00060e4 <ff_wtoupper+0x30>
c00060da:	b8 c0 f9 02 c0       	mov    eax,0xc002f9c0
c00060df:	eb 0b                	jmp    c00060ec <ff_wtoupper+0x38>
c00060e1:	8d 76 00             	lea    esi,[esi+0x0]
c00060e4:	b8 00 f9 02 c0       	mov    eax,0xc002f900
c00060e9:	8d 76 00             	lea    esi,[esi+0x0]
c00060ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f4:	8d 50 02             	lea    edx,[eax+0x2]
c00060f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0006103:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006108:	85 c0                	test   eax,eax
c000610a:	0f 84 54 01 00 00    	je     c0006264 <ff_wtoupper+0x1b0>
c0006110:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006115:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000611a:	39 c2                	cmp    edx,eax
c000611c:	0f 82 42 01 00 00    	jb     c0006264 <ff_wtoupper+0x1b0>
c0006122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006126:	8d 50 02             	lea    edx,[eax+0x2]
c0006129:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000612d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006130:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006135:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000613a:	c1 e8 08             	shr    eax,0x8
c000613d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006142:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0006147:	0f b6 c0             	movzx  eax,al
c000614a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000614f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006154:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0006159:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000615e:	01 ca                	add    edx,ecx
c0006160:	39 d0                	cmp    eax,edx
c0006162:	0f 8d d8 00 00 00    	jge    c0006240 <ff_wtoupper+0x18c>
c0006168:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000616d:	83 f8 08             	cmp    eax,0x8
c0006170:	0f 87 ea 00 00 00    	ja     c0006260 <ff_wtoupper+0x1ac>
c0006176:	8b 04 85 c0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0740]
c000617d:	ff e0                	jmp    eax
c000617f:	90                   	nop
c0006180:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006185:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000618a:	29 c2                	sub    edx,eax
c000618c:	89 d0                	mov    eax,edx
c000618e:	01 c0                	add    eax,eax
c0006190:	89 c2                	mov    edx,eax
c0006192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006196:	01 d0                	add    eax,edx
c0006198:	66 8b 00             	mov    ax,WORD PTR [eax]
c000619b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061a0:	e9 97 00 00 00       	jmp    c000623c <ff_wtoupper+0x188>
c00061a5:	8d 76 00             	lea    esi,[esi+0x0]
c00061a8:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00061ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061b1:	89 d1                	mov    ecx,edx
c00061b3:	29 c1                	sub    ecx,eax
c00061b5:	89 c8                	mov    eax,ecx
c00061b7:	83 e0 01             	and    eax,0x1
c00061ba:	89 c2                	mov    edx,eax
c00061bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061c1:	29 d0                	sub    eax,edx
c00061c3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061c8:	eb 72                	jmp    c000623c <ff_wtoupper+0x188>
c00061ca:	66 90                	xchg   ax,ax
c00061cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061d1:	83 e8 10             	sub    eax,0x10
c00061d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061d9:	eb 61                	jmp    c000623c <ff_wtoupper+0x188>
c00061db:	90                   	nop
c00061dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061e1:	83 e8 20             	sub    eax,0x20
c00061e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061e9:	eb 51                	jmp    c000623c <ff_wtoupper+0x188>
c00061eb:	90                   	nop
c00061ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061f1:	83 e8 30             	sub    eax,0x30
c00061f4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061f9:	eb 41                	jmp    c000623c <ff_wtoupper+0x188>
c00061fb:	90                   	nop
c00061fc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006201:	83 e8 1a             	sub    eax,0x1a
c0006204:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006209:	eb 31                	jmp    c000623c <ff_wtoupper+0x188>
c000620b:	90                   	nop
c000620c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006211:	83 c0 08             	add    eax,0x8
c0006214:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006219:	eb 21                	jmp    c000623c <ff_wtoupper+0x188>
c000621b:	90                   	nop
c000621c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006221:	83 e8 50             	sub    eax,0x50
c0006224:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006229:	eb 11                	jmp    c000623c <ff_wtoupper+0x188>
c000622b:	90                   	nop
c000622c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006231:	2d 60 1c 00 00       	sub    eax,0x1c60
c0006236:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000623b:	90                   	nop
c000623c:	eb 22                	jmp    c0006260 <ff_wtoupper+0x1ac>
c000623e:	66 90                	xchg   ax,ax
c0006240:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006245:	85 c0                	test   eax,eax
c0006247:	0f 85 a3 fe ff ff    	jne    c00060f0 <ff_wtoupper+0x3c>
c000624d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006252:	01 c0                	add    eax,eax
c0006254:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006258:	e9 93 fe ff ff       	jmp    c00060f0 <ff_wtoupper+0x3c>
c000625d:	8d 76 00             	lea    esi,[esi+0x0]
c0006260:	90                   	nop
c0006261:	8d 76 00             	lea    esi,[esi+0x0]
c0006264:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006269:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000626d:	8d 76 00             	lea    esi,[esi+0x0]
c0006270:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006274:	83 c4 10             	add    esp,0x10
c0006277:	c3                   	ret    

c0006278 <utf2ucs>:
c0006278:	57                   	push   edi
c0006279:	31 c9                	xor    ecx,ecx
c000627b:	56                   	push   esi
c000627c:	89 d7                	mov    edi,edx
c000627e:	53                   	push   ebx
c000627f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006283:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006287:	89 de                	mov    esi,ebx
c0006289:	c1 fe 08             	sar    esi,0x8
c000628c:	89 f2                	mov    edx,esi
c000628e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006291:	41                   	inc    ecx
c0006292:	85 db                	test   ebx,ebx
c0006294:	75 e9                	jne    c000627f <utf2ucs+0x7>
c0006296:	5b                   	pop    ebx
c0006297:	5e                   	pop    esi
c0006298:	5f                   	pop    edi
c0006299:	c3                   	ret    

c000629a <ucs2utfn>:
c000629a:	83 e1 fe             	and    ecx,0xfffffffe
c000629d:	01 d1                	add    ecx,edx
c000629f:	39 d1                	cmp    ecx,edx
c00062a1:	75 04                	jne    c00062a7 <ucs2utfn+0xd>
c00062a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00062a6:	c3                   	ret    
c00062a7:	57                   	push   edi
c00062a8:	56                   	push   esi
c00062a9:	53                   	push   ebx
c00062aa:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c00062ad:	83 c2 02             	add    edx,0x2
c00062b0:	89 de                	mov    esi,ebx
c00062b2:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c00062b6:	c1 e6 08             	shl    esi,0x8
c00062b9:	09 f3                	or     ebx,esi
c00062bb:	83 fb 3b             	cmp    ebx,0x3b
c00062be:	74 50                	je     c0006310 <ucs2utfn+0x76>
c00062c0:	83 fb 7f             	cmp    ebx,0x7f
c00062c3:	7f 05                	jg     c00062ca <ucs2utfn+0x30>
c00062c5:	88 18                	mov    BYTE PTR [eax],bl
c00062c7:	40                   	inc    eax
c00062c8:	eb 42                	jmp    c000630c <ucs2utfn+0x72>
c00062ca:	89 de                	mov    esi,ebx
c00062cc:	89 df                	mov    edi,ebx
c00062ce:	c1 fe 06             	sar    esi,0x6
c00062d1:	83 e7 3f             	and    edi,0x3f
c00062d4:	83 cf 80             	or     edi,0xffffff80
c00062d7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00062dd:	7f 12                	jg     c00062f1 <ucs2utfn+0x57>
c00062df:	83 ce c0             	or     esi,0xffffffc0
c00062e2:	83 c0 02             	add    eax,0x2
c00062e5:	89 f3                	mov    ebx,esi
c00062e7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00062ea:	89 fb                	mov    ebx,edi
c00062ec:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00062ef:	eb 1b                	jmp    c000630c <ucs2utfn+0x72>
c00062f1:	c1 fb 0c             	sar    ebx,0xc
c00062f4:	83 e6 3f             	and    esi,0x3f
c00062f7:	83 cb e0             	or     ebx,0xffffffe0
c00062fa:	83 ce 80             	or     esi,0xffffff80
c00062fd:	88 18                	mov    BYTE PTR [eax],bl
c00062ff:	89 f3                	mov    ebx,esi
c0006301:	83 c0 03             	add    eax,0x3
c0006304:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006307:	89 fb                	mov    ebx,edi
c0006309:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000630c:	39 d1                	cmp    ecx,edx
c000630e:	75 9a                	jne    c00062aa <ucs2utfn+0x10>
c0006310:	5b                   	pop    ebx
c0006311:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006314:	5e                   	pop    esi
c0006315:	5f                   	pop    edi
c0006316:	c3                   	ret    

c0006317 <isjoliet>:
c0006317:	31 d2                	xor    edx,edx
c0006319:	80 38 25             	cmp    BYTE PTR [eax],0x25
c000631c:	75 26                	jne    c0006344 <isjoliet+0x2d>
c000631e:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006322:	75 20                	jne    c0006344 <isjoliet+0x2d>
c0006324:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006328:	ba 02 00 00 00       	mov    edx,0x2
c000632d:	83 f8 43             	cmp    eax,0x43
c0006330:	74 12                	je     c0006344 <isjoliet+0x2d>
c0006332:	ba 03 00 00 00       	mov    edx,0x3
c0006337:	83 f8 45             	cmp    eax,0x45
c000633a:	74 08                	je     c0006344 <isjoliet+0x2d>
c000633c:	31 d2                	xor    edx,edx
c000633e:	83 f8 40             	cmp    eax,0x40
c0006341:	0f 94 c2             	sete   dl
c0006344:	89 d0                	mov    eax,edx
c0006346:	c3                   	ret    

c0006347 <htohl_32>:
c0006347:	8b 00                	mov    eax,DWORD PTR [eax]
c0006349:	c3                   	ret    

c000634a <iso_733>:
c000634a:	eb fb                	jmp    c0006347 <htohl_32>

c000634c <bgrad_cache>:
c000634c:	83 fa 0e             	cmp    edx,0xe
c000634f:	77 16                	ja     c0006367 <bgrad_cache+0x1b>
c0006351:	53                   	push   ebx
c0006352:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006355:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006359:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000635c:	42                   	inc    edx
c000635d:	83 fa 0f             	cmp    edx,0xf
c0006360:	75 f3                	jne    c0006355 <bgrad_cache+0x9>
c0006362:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006365:	5b                   	pop    ebx
c0006366:	c3                   	ret    
c0006367:	c3                   	ret    

c0006368 <ucscompare>:
c0006368:	55                   	push   ebp
c0006369:	57                   	push   edi
c000636a:	89 c7                	mov    edi,eax
c000636c:	56                   	push   esi
c000636d:	89 d6                	mov    esi,edx
c000636f:	53                   	push   ebx
c0006370:	31 d2                	xor    edx,edx
c0006372:	83 ec 1c             	sub    esp,0x1c
c0006375:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006379:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000637e:	c1 e3 08             	shl    ebx,0x8
c0006381:	09 c3                	or     ebx,eax
c0006383:	39 ca                	cmp    edx,ecx
c0006385:	7d 42                	jge    c00063c9 <ucscompare+0x61>
c0006387:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000638b:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006390:	c1 e0 08             	shl    eax,0x8
c0006393:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006397:	09 e8                	or     eax,ebp
c0006399:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000639d:	83 f8 3b             	cmp    eax,0x3b
c00063a0:	74 27                	je     c00063c9 <ucscompare+0x61>
c00063a2:	83 ec 0c             	sub    esp,0xc
c00063a5:	50                   	push   eax
c00063a6:	e8 a5 a5 ff ff       	call   c0000950 <tolower>
c00063ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00063ae:	89 c5                	mov    ebp,eax
c00063b0:	e8 9b a5 ff ff       	call   c0000950 <tolower>
c00063b5:	83 c4 10             	add    esp,0x10
c00063b8:	39 c5                	cmp    ebp,eax
c00063ba:	75 20                	jne    c00063dc <ucscompare+0x74>
c00063bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063c4:	83 c2 02             	add    edx,0x2
c00063c7:	eb ac                	jmp    c0006375 <ucscompare+0xd>
c00063c9:	85 db                	test   ebx,ebx
c00063cb:	0f 95 c2             	setne  dl
c00063ce:	31 c0                	xor    eax,eax
c00063d0:	83 fb 2f             	cmp    ebx,0x2f
c00063d3:	0f 95 c0             	setne  al
c00063d6:	21 d0                	and    eax,edx
c00063d8:	f7 d8                	neg    eax
c00063da:	eb 03                	jmp    c00063df <ucscompare+0x77>
c00063dc:	83 c8 ff             	or     eax,0xffffffff
c00063df:	83 c4 1c             	add    esp,0x1c
c00063e2:	5b                   	pop    ebx
c00063e3:	5e                   	pop    esi
c00063e4:	5f                   	pop    edi
c00063e5:	5d                   	pop    ebp
c00063e6:	c3                   	ret    

c00063e7 <fncompare>:
c00063e7:	55                   	push   ebp
c00063e8:	57                   	push   edi
c00063e9:	89 c7                	mov    edi,eax
c00063eb:	56                   	push   esi
c00063ec:	89 ce                	mov    esi,ecx
c00063ee:	53                   	push   ebx
c00063ef:	31 db                	xor    ebx,ebx
c00063f1:	83 ec 1c             	sub    esp,0x1c
c00063f4:	39 d3                	cmp    ebx,edx
c00063f6:	7d 45                	jge    c000643d <fncompare+0x56>
c00063f8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00063fc:	83 f8 3b             	cmp    eax,0x3b
c00063ff:	74 3c                	je     c000643d <fncompare+0x56>
c0006401:	83 f8 2e             	cmp    eax,0x2e
c0006404:	75 0e                	jne    c0006414 <fncompare+0x2d>
c0006406:	8d 4a ff             	lea    ecx,[edx-0x1]
c0006409:	39 d9                	cmp    ecx,ebx
c000640b:	74 30                	je     c000643d <fncompare+0x56>
c000640d:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006412:	74 29                	je     c000643d <fncompare+0x56>
c0006414:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006418:	83 ec 0c             	sub    esp,0xc
c000641b:	50                   	push   eax
c000641c:	e8 2f a5 ff ff       	call   c0000950 <tolower>
c0006421:	89 c5                	mov    ebp,eax
c0006423:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006427:	89 04 24             	mov    DWORD PTR [esp],eax
c000642a:	e8 21 a5 ff ff       	call   c0000950 <tolower>
c000642f:	83 c4 10             	add    esp,0x10
c0006432:	39 c5                	cmp    ebp,eax
c0006434:	75 1e                	jne    c0006454 <fncompare+0x6d>
c0006436:	43                   	inc    ebx
c0006437:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000643b:	eb b7                	jmp    c00063f4 <fncompare+0xd>
c000643d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	0f 95 c1             	setne  cl
c0006446:	31 c0                	xor    eax,eax
c0006448:	83 fa 2f             	cmp    edx,0x2f
c000644b:	0f 95 c0             	setne  al
c000644e:	21 c8                	and    eax,ecx
c0006450:	f7 d8                	neg    eax
c0006452:	eb 03                	jmp    c0006457 <fncompare+0x70>
c0006454:	83 c8 ff             	or     eax,0xffffffff
c0006457:	83 c4 1c             	add    esp,0x1c
c000645a:	5b                   	pop    ebx
c000645b:	5e                   	pop    esi
c000645c:	5f                   	pop    edi
c000645d:	5d                   	pop    ebp
c000645e:	c3                   	ret    

c000645f <bclear_cache>:
c000645f:	83 ec 18             	sub    esp,0x18
c0006462:	68 c0 fc 02 c0       	push   0xc002fcc0
c0006467:	e8 08 31 02 00       	call   c0029574 <iso_kprintf>
c000646c:	83 c4 10             	add    esp,0x10
c000646f:	31 c0                	xor    eax,eax
c0006471:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006478:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000647e:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c0006485:	40                   	inc    eax
c0006486:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000648c:	83 f8 10             	cmp    eax,0x10
c000648f:	75 e0                	jne    c0006471 <bclear_cache+0x12>
c0006491:	83 c4 0c             	add    esp,0xc
c0006494:	c3                   	ret    

c0006495 <bclear>:
c0006495:	eb c8                	jmp    c000645f <bclear_cache>

c0006497 <iso_break_all>:
c0006497:	83 ec 18             	sub    esp,0x18
c000649a:	68 ce fc 02 c0       	push   0xc002fcce
c000649f:	e8 d0 30 02 00       	call   c0029574 <iso_kprintf>
c00064a4:	83 c4 10             	add    esp,0x10
c00064a7:	31 c0                	xor    eax,eax
c00064a9:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c00064b3:	05 94 00 00 00       	add    eax,0x94
c00064b8:	3d 40 09 00 00       	cmp    eax,0x940
c00064bd:	75 ea                	jne    c00064a9 <iso_break_all+0x12>
c00064bf:	83 c4 0c             	add    esp,0xc
c00064c2:	c3                   	ret    

c00064c3 <isoReadDiscSector>:
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c00064cd:	50                   	push   eax
c00064ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064da:	e8 39 30 02 00       	call   c0029518 <isoReadDiscSectorHelper>
c00064df:	83 c4 1c             	add    esp,0x1c
c00064e2:	c3                   	ret    

c00064e3 <bread_cache>:
c00064e3:	55                   	push   ebp
c00064e4:	57                   	push   edi
c00064e5:	89 d7                	mov    edi,edx
c00064e7:	56                   	push   esi
c00064e8:	ba 0f 00 00 00       	mov    edx,0xf
c00064ed:	53                   	push   ebx
c00064ee:	89 c6                	mov    esi,eax
c00064f0:	83 ec 0c             	sub    esp,0xc
c00064f3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00064f6:	39 38                	cmp    DWORD PTR [eax],edi
c00064f8:	74 3c                	je     c0006536 <bread_cache+0x53>
c00064fa:	4a                   	dec    edx
c00064fb:	83 fa ff             	cmp    edx,0xffffffff
c00064fe:	75 f3                	jne    c00064f3 <bread_cache+0x10>
c0006500:	31 db                	xor    ebx,ebx
c0006502:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006505:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0006508:	74 08                	je     c0006512 <bread_cache+0x2f>
c000650a:	43                   	inc    ebx
c000650b:	83 fb 10             	cmp    ebx,0x10
c000650e:	75 f2                	jne    c0006502 <bread_cache+0x1f>
c0006510:	31 db                	xor    ebx,ebx
c0006512:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0006515:	50                   	push   eax
c0006516:	6a 01                	push   0x1
c0006518:	57                   	push   edi
c0006519:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000651c:	83 c0 04             	add    eax,0x4
c000651f:	50                   	push   eax
c0006520:	e8 9e ff ff ff       	call   c00064c3 <isoReadDiscSector>
c0006525:	83 c4 10             	add    esp,0x10
c0006528:	83 c9 ff             	or     ecx,0xffffffff
c000652b:	85 c0                	test   eax,eax
c000652d:	78 13                	js     c0006542 <bread_cache+0x5f>
c000652f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006532:	89 da                	mov    edx,ebx
c0006534:	89 38                	mov    DWORD PTR [eax],edi
c0006536:	89 f0                	mov    eax,esi
c0006538:	e8 0f fe ff ff       	call   c000634c <bgrad_cache>
c000653d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006542:	83 c4 0c             	add    esp,0xc
c0006545:	89 c8                	mov    eax,ecx
c0006547:	5b                   	pop    ebx
c0006548:	5e                   	pop    esi
c0006549:	5f                   	pop    edi
c000654a:	5d                   	pop    ebp
c000654b:	c3                   	ret    

c000654c <biread>:
c000654c:	89 c2                	mov    edx,eax
c000654e:	b8 80 60 03 c0       	mov    eax,0xc0036080
c0006553:	eb 8e                	jmp    c00064e3 <bread_cache>

c0006555 <bdread>:
c0006555:	89 c2                	mov    edx,eax
c0006557:	b8 20 60 03 c0       	mov    eax,0xc0036020
c000655c:	eb 85                	jmp    c00064e3 <bread_cache>

c000655e <strnicmp>:
c000655e:	55                   	push   ebp
c000655f:	57                   	push   edi
c0006560:	31 ff                	xor    edi,edi
c0006562:	56                   	push   esi
c0006563:	53                   	push   ebx
c0006564:	83 ec 0c             	sub    esp,0xc
c0006567:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000656b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000656f:	74 43                	je     c00065b4 <strnicmp+0x56>
c0006571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006575:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006579:	85 c0                	test   eax,eax
c000657b:	74 37                	je     c00065b4 <strnicmp+0x56>
c000657d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006581:	85 d2                	test   edx,edx
c0006583:	74 2f                	je     c00065b4 <strnicmp+0x56>
c0006585:	39 d0                	cmp    eax,edx
c0006587:	8d 6f 01             	lea    ebp,[edi+0x1]
c000658a:	75 04                	jne    c0006590 <strnicmp+0x32>
c000658c:	89 ef                	mov    edi,ebp
c000658e:	eb db                	jmp    c000656b <strnicmp+0xd>
c0006590:	83 ec 0c             	sub    esp,0xc
c0006593:	50                   	push   eax
c0006594:	e8 b7 a3 ff ff       	call   c0000950 <tolower>
c0006599:	89 c3                	mov    ebx,eax
c000659b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000659f:	89 ef                	mov    edi,ebp
c00065a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00065a4:	e8 a7 a3 ff ff       	call   c0000950 <tolower>
c00065a9:	83 c4 10             	add    esp,0x10
c00065ac:	29 c3                	sub    ebx,eax
c00065ae:	89 d8                	mov    eax,ebx
c00065b0:	74 b9                	je     c000656b <strnicmp+0xd>
c00065b2:	eb 02                	jmp    c00065b6 <strnicmp+0x58>
c00065b4:	31 c0                	xor    eax,eax
c00065b6:	83 c4 0c             	add    esp,0xc
c00065b9:	5b                   	pop    ebx
c00065ba:	5e                   	pop    esi
c00065bb:	5f                   	pop    edi
c00065bc:	5d                   	pop    ebp
c00065bd:	c3                   	ret    

c00065be <find_object>:
c00065be:	55                   	push   ebp
c00065bf:	57                   	push   edi
c00065c0:	89 c7                	mov    edi,eax
c00065c2:	56                   	push   esi
c00065c3:	53                   	push   ebx
c00065c4:	89 d3                	mov    ebx,edx
c00065c6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00065cc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00065d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00065d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065db:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c00065e2:	74 0b                	je     c00065ef <find_object+0x31>
c00065e4:	89 fa                	mov    edx,edi
c00065e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065ea:	e8 89 fc ff ff       	call   c0006278 <utf2ucs>
c00065ef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00065f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00065f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00065fb:	7e 11                	jle    c000660e <find_object+0x50>
c00065fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006601:	e8 46 ff ff ff       	call   c000654c <biread>
c0006606:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000660a:	85 c0                	test   eax,eax
c000660c:	79 07                	jns    c0006615 <find_object+0x57>
c000660e:	31 db                	xor    ebx,ebx
c0006610:	e9 56 01 00 00       	jmp    c000676b <find_object+0x1ad>
c0006615:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000661d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006625:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c000662c:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006630:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006633:	85 f6                	test   esi,esi
c0006635:	75 0e                	jne    c0006645 <find_object+0x87>
c0006637:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000663b:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c0006643:	eb b1                	jmp    c00065f6 <find_object+0x38>
c0006645:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c000664b:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c000664f:	85 ed                	test   ebp,ebp
c0006651:	89 c8                	mov    eax,ecx
c0006653:	74 2b                	je     c0006680 <find_object+0xc2>
c0006655:	8d 43 21             	lea    eax,[ebx+0x21]
c0006658:	8d 54 24 20          	lea    edx,[esp+0x20]
c000665c:	e8 07 fd ff ff       	call   c0006368 <ucscompare>
c0006661:	85 c0                	test   eax,eax
c0006663:	0f 84 bf 00 00 00    	je     c0006728 <find_object+0x16a>
c0006669:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000666c:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006670:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006678:	0f 8e da 00 00 00    	jle    c0006758 <find_object+0x19a>
c000667e:	eb b7                	jmp    c0006637 <find_object+0x79>
c0006680:	29 ce                	sub    esi,ecx
c0006682:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006686:	a8 01                	test   al,0x1
c0006688:	74 05                	je     c000668f <find_object+0xd1>
c000668a:	83 ee 21             	sub    esi,0x21
c000668d:	eb 5a                	jmp    c00066e9 <find_object+0x12b>
c000668f:	42                   	inc    edx
c0006690:	83 ee 22             	sub    esi,0x22
c0006693:	eb 54                	jmp    c00066e9 <find_object+0x12b>
c0006695:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006698:	48                   	dec    eax
c0006699:	3c 01                	cmp    al,0x1
c000669b:	77 51                	ja     c00066ee <find_object+0x130>
c000669d:	50                   	push   eax
c000669e:	6a 02                	push   0x2
c00066a0:	68 dd fc 02 c0       	push   0xc002fcdd
c00066a5:	52                   	push   edx
c00066a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00066aa:	e8 31 a1 ff ff       	call   c00007e0 <strncmp>
c00066af:	83 c4 10             	add    esp,0x10
c00066b2:	85 c0                	test   eax,eax
c00066b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066b8:	75 27                	jne    c00066e1 <find_object+0x123>
c00066ba:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066be:	8d 68 fb             	lea    ebp,[eax-0x5]
c00066c1:	50                   	push   eax
c00066c2:	8d 42 05             	lea    eax,[edx+0x5]
c00066c5:	55                   	push   ebp
c00066c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00066ca:	50                   	push   eax
c00066cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00066cf:	50                   	push   eax
c00066d0:	e8 ab 9f ff ff       	call   c0000680 <strncpy>
c00066d5:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c00066da:	83 c4 10             	add    esp,0x10
c00066dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066e1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066e5:	29 c6                	sub    esi,eax
c00066e7:	01 c2                	add    edx,eax
c00066e9:	83 fe 03             	cmp    esi,0x3
c00066ec:	7f a7                	jg     c0006695 <find_object+0xd7>
c00066ee:	85 ed                	test   ebp,ebp
c00066f0:	7e 40                	jle    c0006732 <find_object+0x174>
c00066f2:	51                   	push   ecx
c00066f3:	51                   	push   ecx
c00066f4:	6a 2f                	push   0x2f
c00066f6:	57                   	push   edi
c00066f7:	e8 a4 a0 ff ff       	call   c00007a0 <strchr>
c00066fc:	83 c4 10             	add    esp,0x10
c00066ff:	85 c0                	test   eax,eax
c0006701:	74 04                	je     c0006707 <find_object+0x149>
c0006703:	29 f8                	sub    eax,edi
c0006705:	eb 0c                	jmp    c0006713 <find_object+0x155>
c0006707:	83 ec 0c             	sub    esp,0xc
c000670a:	57                   	push   edi
c000670b:	e8 60 9e ff ff       	call   c0000570 <strlen>
c0006710:	83 c4 10             	add    esp,0x10
c0006713:	52                   	push   edx
c0006714:	50                   	push   eax
c0006715:	57                   	push   edi
c0006716:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000671a:	50                   	push   eax
c000671b:	e8 3e fe ff ff       	call   c000655e <strnicmp>
c0006720:	83 c4 10             	add    esp,0x10
c0006723:	e9 39 ff ff ff       	jmp    c0006661 <find_object+0xa3>
c0006728:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000672c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006730:	eb 1e                	jmp    c0006750 <find_object+0x192>
c0006732:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006736:	8d 43 21             	lea    eax,[ebx+0x21]
c0006739:	89 f9                	mov    ecx,edi
c000673b:	e8 a7 fc ff ff       	call   c00063e7 <fncompare>
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 21 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006748:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000674c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006750:	0f 85 13 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006756:	eb 13                	jmp    c000676b <find_object+0x1ad>
c0006758:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000675c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006760:	0f 8f b7 fe ff ff    	jg     c000661d <find_object+0x5f>
c0006766:	e9 cc fe ff ff       	jmp    c0006637 <find_object+0x79>
c000676b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006771:	89 d8                	mov    eax,ebx
c0006773:	5b                   	pop    ebx
c0006774:	5e                   	pop    esi
c0006775:	5f                   	pop    edi
c0006776:	5d                   	pop    ebp
c0006777:	c3                   	ret    

c0006778 <find_object_path>:
c0006778:	55                   	push   ebp
c0006779:	57                   	push   edi
c000677a:	89 d7                	mov    edi,edx
c000677c:	56                   	push   esi
c000677d:	89 c6                	mov    esi,eax
c000677f:	53                   	push   ebx
c0006780:	89 cb                	mov    ebx,ecx
c0006782:	83 ec 0c             	sub    esp,0xc
c0006785:	50                   	push   eax
c0006786:	50                   	push   eax
c0006787:	6a 2f                	push   0x2f
c0006789:	56                   	push   esi
c000678a:	e8 11 a0 ff ff       	call   c00007a0 <strchr>
c000678f:	83 c4 10             	add    esp,0x10
c0006792:	89 c5                	mov    ebp,eax
c0006794:	85 c0                	test   eax,eax
c0006796:	74 3a                	je     c00067d2 <find_object_path+0x5a>
c0006798:	39 ee                	cmp    esi,ebp
c000679a:	74 31                	je     c00067cd <find_object_path+0x55>
c000679c:	8d 43 0a             	lea    eax,[ebx+0xa]
c000679f:	e8 a6 fb ff ff       	call   c000634a <iso_733>
c00067a4:	89 c2                	mov    edx,eax
c00067a6:	8d 43 02             	lea    eax,[ebx+0x2]
c00067a9:	e8 9c fb ff ff       	call   c000634a <iso_733>
c00067ae:	83 ec 0c             	sub    esp,0xc
c00067b1:	89 c1                	mov    ecx,eax
c00067b3:	52                   	push   edx
c00067b4:	89 f0                	mov    eax,esi
c00067b6:	ba 01 00 00 00       	mov    edx,0x1
c00067bb:	e8 fe fd ff ff       	call   c00065be <find_object>
c00067c0:	83 c4 10             	add    esp,0x10
c00067c3:	89 c3                	mov    ebx,eax
c00067c5:	85 c0                	test   eax,eax
c00067c7:	75 04                	jne    c00067cd <find_object_path+0x55>
c00067c9:	31 db                	xor    ebx,ebx
c00067cb:	eb 36                	jmp    c0006803 <find_object_path+0x8b>
c00067cd:	8d 75 01             	lea    esi,[ebp+0x1]
c00067d0:	eb b3                	jmp    c0006785 <find_object_path+0xd>
c00067d2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067d5:	74 28                	je     c00067ff <find_object_path+0x87>
c00067d7:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067da:	e8 6b fb ff ff       	call   c000634a <iso_733>
c00067df:	89 c2                	mov    edx,eax
c00067e1:	8d 43 02             	lea    eax,[ebx+0x2]
c00067e4:	e8 61 fb ff ff       	call   c000634a <iso_733>
c00067e9:	83 ec 0c             	sub    esp,0xc
c00067ec:	89 c1                	mov    ecx,eax
c00067ee:	52                   	push   edx
c00067ef:	89 f0                	mov    eax,esi
c00067f1:	89 fa                	mov    edx,edi
c00067f3:	e8 c6 fd ff ff       	call   c00065be <find_object>
c00067f8:	83 c4 10             	add    esp,0x10
c00067fb:	89 c3                	mov    ebx,eax
c00067fd:	eb 04                	jmp    c0006803 <find_object_path+0x8b>
c00067ff:	85 ff                	test   edi,edi
c0006801:	74 c6                	je     c00067c9 <find_object_path+0x51>
c0006803:	83 c4 0c             	add    esp,0xc
c0006806:	89 d8                	mov    eax,ebx
c0006808:	5b                   	pop    ebx
c0006809:	5e                   	pop    esi
c000680a:	5f                   	pop    edi
c000680b:	5d                   	pop    ebp
c000680c:	c3                   	ret    

c000680d <stricmp>:
c000680d:	57                   	push   edi
c000680e:	56                   	push   esi
c000680f:	31 f6                	xor    esi,esi
c0006811:	53                   	push   ebx
c0006812:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006816:	83 ec 0c             	sub    esp,0xc
c0006819:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c000681d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006821:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c0006825:	50                   	push   eax
c0006826:	e8 05 a1 ff ff       	call   c0000930 <toupper>
c000682b:	89 04 24             	mov    DWORD PTR [esp],eax
c000682e:	e8 1d a1 ff ff       	call   c0000950 <tolower>
c0006833:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006836:	89 c3                	mov    ebx,eax
c0006838:	e8 f3 a0 ff ff       	call   c0000930 <toupper>
c000683d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006840:	e8 0b a1 ff ff       	call   c0000950 <tolower>
c0006845:	83 c4 10             	add    esp,0x10
c0006848:	39 c3                	cmp    ebx,eax
c000684a:	75 05                	jne    c0006851 <stricmp+0x44>
c000684c:	46                   	inc    esi
c000684d:	85 db                	test   ebx,ebx
c000684f:	75 c1                	jne    c0006812 <stricmp+0x5>
c0006851:	29 c3                	sub    ebx,eax
c0006853:	89 d8                	mov    eax,ebx
c0006855:	5b                   	pop    ebx
c0006856:	5e                   	pop    esi
c0006857:	5f                   	pop    edi
c0006858:	c3                   	ret    

c0006859 <iso_open>:
c0006859:	57                   	push   edi
c000685a:	31 c0                	xor    eax,eax
c000685c:	56                   	push   esi
c000685d:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c0006862:	53                   	push   ebx
c0006863:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006868:	0f 95 c0             	setne  al
c000686b:	89 c2                	mov    edx,eax
c000686d:	89 c6                	mov    esi,eax
c000686f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006873:	e8 00 ff ff ff       	call   c0006778 <find_object_path>
c0006878:	83 ca ff             	or     edx,0xffffffff
c000687b:	85 c0                	test   eax,eax
c000687d:	74 5e                	je     c00068dd <iso_open+0x84>
c000687f:	89 c1                	mov    ecx,eax
c0006881:	31 d2                	xor    edx,edx
c0006883:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006889:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c0006890:	75 42                	jne    c00068d4 <iso_open+0x7b>
c0006892:	8d 41 02             	lea    eax,[ecx+0x2]
c0006895:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c000689f:	e8 a6 fa ff ff       	call   c000634a <iso_733>
c00068a4:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c00068aa:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c00068b0:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c00068ba:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068bd:	e8 88 fa ff ff       	call   c000634a <iso_733>
c00068c2:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c00068cc:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c00068d2:	eb 09                	jmp    c00068dd <iso_open+0x84>
c00068d4:	42                   	inc    edx
c00068d5:	83 fa 10             	cmp    edx,0x10
c00068d8:	75 a9                	jne    c0006883 <iso_open+0x2a>
c00068da:	83 ca ff             	or     edx,0xffffffff
c00068dd:	5b                   	pop    ebx
c00068de:	89 d0                	mov    eax,edx
c00068e0:	5e                   	pop    esi
c00068e1:	5f                   	pop    edi
c00068e2:	c3                   	ret    

c00068e3 <iso_close>:
c00068e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e7:	83 f8 0f             	cmp    eax,0xf
c00068ea:	7f 10                	jg     c00068fc <iso_close+0x19>
c00068ec:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00068f2:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c00068fc:	e9 5e fb ff ff       	jmp    c000645f <bclear_cache>

c0006901 <iso_read>:
c0006901:	55                   	push   ebp
c0006902:	57                   	push   edi
c0006903:	56                   	push   esi
c0006904:	53                   	push   ebx
c0006905:	83 ec 1c             	sub    esp,0x1c
c0006908:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000690c:	83 fd 0f             	cmp    ebp,0xf
c000690f:	7e 0a                	jle    c000691b <iso_read+0x1a>
c0006911:	83 c8 ff             	or     eax,0xffffffff
c0006914:	89 c2                	mov    edx,eax
c0006916:	e9 f4 00 00 00       	jmp    c0006a0f <iso_read+0x10e>
c000691b:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006921:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006928:	74 e7                	je     c0006911 <iso_read+0x10>
c000692a:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006930:	85 d2                	test   edx,edx
c0006932:	75 dd                	jne    c0006911 <iso_read+0x10>
c0006934:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006939:	0f 84 cd 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000693f:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c0006945:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c000694b:	29 c1                	sub    ecx,eax
c000694d:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006951:	76 04                	jbe    c0006957 <iso_read+0x56>
c0006953:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006957:	85 c9                	test   ecx,ecx
c0006959:	0f 84 ad 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000695f:	89 c6                	mov    esi,eax
c0006961:	bb 00 08 00 00       	mov    ebx,0x800
c0006966:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000696c:	c1 e8 0b             	shr    eax,0xb
c000696f:	29 f3                	sub    ebx,esi
c0006971:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c0006977:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000697d:	7e 3f                	jle    c00069be <iso_read+0xbd>
c000697f:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006985:	75 37                	jne    c00069be <iso_read+0xbd>
c0006987:	be 20 00 00 00       	mov    esi,0x20
c000698c:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006992:	7f 05                	jg     c0006999 <iso_read+0x98>
c0006994:	89 ce                	mov    esi,ecx
c0006996:	c1 fe 0b             	sar    esi,0xb
c0006999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000699d:	89 f3                	mov    ebx,esi
c000699f:	c1 e3 0b             	shl    ebx,0xb
c00069a2:	52                   	push   edx
c00069a3:	56                   	push   esi
c00069a4:	50                   	push   eax
c00069a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00069a9:	e8 15 fb ff ff       	call   c00064c3 <isoReadDiscSector>
c00069ae:	83 c4 10             	add    esp,0x10
c00069b1:	85 c0                	test   eax,eax
c00069b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069b7:	7f 3e                	jg     c00069f7 <iso_read+0xf6>
c00069b9:	e9 53 ff ff ff       	jmp    c0006911 <iso_read+0x10>
c00069be:	39 cb                	cmp    ebx,ecx
c00069c0:	7e 02                	jle    c00069c4 <iso_read+0xc3>
c00069c2:	89 cb                	mov    ebx,ecx
c00069c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069c8:	e8 88 fb ff ff       	call   c0006555 <bdread>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	0f 88 3c ff ff ff    	js     c0006911 <iso_read+0x10>
c00069d5:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c00069dc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00069e0:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00069e6:	25 ff 07 00 00       	and    eax,0x7ff
c00069eb:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00069ef:	89 d9                	mov    ecx,ebx
c00069f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00069f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069f7:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00069fb:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006a01:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006a05:	01 da                	add    edx,ebx
c0006a07:	e9 28 ff ff ff       	jmp    c0006934 <iso_read+0x33>
c0006a0c:	89 d0                	mov    eax,edx
c0006a0e:	99                   	cdq    
c0006a0f:	83 c4 1c             	add    esp,0x1c
c0006a12:	5b                   	pop    ebx
c0006a13:	5e                   	pop    esi
c0006a14:	5f                   	pop    edi
c0006a15:	5d                   	pop    ebp
c0006a16:	c3                   	ret    

c0006a17 <iso_seek>:
c0006a17:	55                   	push   ebp
c0006a18:	83 c8 ff             	or     eax,0xffffffff
c0006a1b:	57                   	push   edi
c0006a1c:	89 c2                	mov    edx,eax
c0006a1e:	56                   	push   esi
c0006a1f:	53                   	push   ebx
c0006a20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006a28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a2c:	83 fe 0f             	cmp    esi,0xf
c0006a2f:	7f 65                	jg     c0006a96 <iso_seek+0x7f>
c0006a31:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006a37:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c0006a3d:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006a44:	74 50                	je     c0006a96 <iso_seek+0x7f>
c0006a46:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006a4d:	75 47                	jne    c0006a96 <iso_seek+0x7f>
c0006a4f:	83 fb 01             	cmp    ebx,0x1
c0006a52:	74 0e                	je     c0006a62 <iso_seek+0x4b>
c0006a54:	83 fb 02             	cmp    ebx,0x2
c0006a57:	74 0e                	je     c0006a67 <iso_seek+0x50>
c0006a59:	85 db                	test   ebx,ebx
c0006a5b:	75 39                	jne    c0006a96 <iso_seek+0x7f>
c0006a5d:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006a60:	eb 0d                	jmp    c0006a6f <iso_seek+0x58>
c0006a62:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006a65:	eb 08                	jmp    c0006a6f <iso_seek+0x58>
c0006a67:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006a6a:	01 f8                	add    eax,edi
c0006a6c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006a6f:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006a75:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006a7b:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006a80:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006a83:	76 03                	jbe    c0006a88 <iso_seek+0x71>
c0006a85:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006a88:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006a8e:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c0006a94:	31 d2                	xor    edx,edx
c0006a96:	5b                   	pop    ebx
c0006a97:	5e                   	pop    esi
c0006a98:	5f                   	pop    edi
c0006a99:	5d                   	pop    ebp
c0006a9a:	c3                   	ret    

c0006a9b <iso_tell>:
c0006a9b:	83 c8 ff             	or     eax,0xffffffff
c0006a9e:	53                   	push   ebx
c0006a9f:	89 c2                	mov    edx,eax
c0006aa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006aa5:	83 f9 0f             	cmp    ecx,0xf
c0006aa8:	7f 20                	jg     c0006aca <iso_tell+0x2f>
c0006aaa:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006ab0:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006ab7:	74 11                	je     c0006aca <iso_tell+0x2f>
c0006ab9:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006ac0:	75 08                	jne    c0006aca <iso_tell+0x2f>
c0006ac2:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006ac8:	31 d2                	xor    edx,edx
c0006aca:	5b                   	pop    ebx
c0006acb:	c3                   	ret    

c0006acc <iso_total>:
c0006acc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ad0:	83 c8 ff             	or     eax,0xffffffff
c0006ad3:	83 fa 0f             	cmp    edx,0xf
c0006ad6:	7f 1e                	jg     c0006af6 <iso_total+0x2a>
c0006ad8:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006ade:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c0006ae5:	74 0f                	je     c0006af6 <iso_total+0x2a>
c0006ae7:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006aee:	75 06                	jne    c0006af6 <iso_total+0x2a>
c0006af0:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c0006af6:	c3                   	ret    

c0006af7 <fn_postprocess>:
c0006af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006afb:	89 d0                	mov    eax,edx
c0006afd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006b00:	83 f9 3b             	cmp    ecx,0x3b
c0006b03:	74 07                	je     c0006b0c <fn_postprocess+0x15>
c0006b05:	85 c9                	test   ecx,ecx
c0006b07:	74 03                	je     c0006b0c <fn_postprocess+0x15>
c0006b09:	40                   	inc    eax
c0006b0a:	eb f1                	jmp    c0006afd <fn_postprocess+0x6>
c0006b0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006b0f:	39 d0                	cmp    eax,edx
c0006b11:	76 0a                	jbe    c0006b1d <fn_postprocess+0x26>
c0006b13:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c0006b17:	75 04                	jne    c0006b1d <fn_postprocess+0x26>
c0006b19:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006b1d:	c3                   	ret    

c0006b1e <iso_readdir>:
c0006b1e:	55                   	push   ebp
c0006b1f:	57                   	push   edi
c0006b20:	56                   	push   esi
c0006b21:	53                   	push   ebx
c0006b22:	83 ec 1c             	sub    esp,0x1c
c0006b25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006b29:	83 fb 0f             	cmp    ebx,0xf
c0006b2c:	7f 28                	jg     c0006b56 <iso_readdir+0x38>
c0006b2e:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b34:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c0006b3a:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c0006b41:	74 13                	je     c0006b56 <iso_readdir+0x38>
c0006b43:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006b47:	74 0d                	je     c0006b56 <iso_readdir+0x38>
c0006b49:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006b50:	0f 84 b1 00 00 00    	je     c0006c07 <iso_readdir+0xe9>
c0006b56:	83 ec 0c             	sub    esp,0xc
c0006b59:	68 e0 fc 02 c0       	push   0xc002fce0
c0006b5e:	e8 11 2a 02 00       	call   c0029574 <iso_kprintf>
c0006b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b66:	e8 25 2a 02 00       	call   c0029590 <iso_kprintfd>
c0006b6b:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b71:	c7 04 24 e5 fc 02 c0 	mov    DWORD PTR [esp],0xc002fce5
c0006b78:	e8 f7 29 02 00       	call   c0029574 <iso_kprintf>
c0006b7d:	5d                   	pop    ebp
c0006b7e:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006b84:	e8 07 2a 02 00       	call   c0029590 <iso_kprintfd>
c0006b89:	c7 04 24 eb fc 02 c0 	mov    DWORD PTR [esp],0xc002fceb
c0006b90:	e8 df 29 02 00       	call   c0029574 <iso_kprintf>
c0006b95:	58                   	pop    eax
c0006b96:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006b9c:	e8 ef 29 02 00       	call   c0029590 <iso_kprintfd>
c0006ba1:	c7 04 24 f1 fc 02 c0 	mov    DWORD PTR [esp],0xc002fcf1
c0006ba8:	e8 c7 29 02 00       	call   c0029574 <iso_kprintf>
c0006bad:	58                   	pop    eax
c0006bae:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006bb4:	e8 d7 29 02 00       	call   c0029590 <iso_kprintfd>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	eb 42                	jmp    c0006c00 <iso_readdir+0xe2>
c0006bbe:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006bc1:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006bc8:	89 d1                	mov    ecx,edx
c0006bca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006bd0:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006bd4:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006bd7:	75 35                	jne    c0006c0e <iso_readdir+0xf0>
c0006bd9:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006bdf:	81 c2 00 08 00 00    	add    edx,0x800
c0006be5:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006be8:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006beb:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006bee:	73 1e                	jae    c0006c0e <iso_readdir+0xf0>
c0006bf0:	c1 ea 0b             	shr    edx,0xb
c0006bf3:	8b 07                	mov    eax,DWORD PTR [edi]
c0006bf5:	01 d0                	add    eax,edx
c0006bf7:	e8 50 f9 ff ff       	call   c000654c <biread>
c0006bfc:	85 c0                	test   eax,eax
c0006bfe:	79 be                	jns    c0006bbe <iso_readdir+0xa0>
c0006c00:	31 c0                	xor    eax,eax
c0006c02:	e9 66 01 00 00       	jmp    c0006d6d <iso_readdir+0x24f>
c0006c07:	31 f6                	xor    esi,esi
c0006c09:	83 c8 ff             	or     eax,0xffffffff
c0006c0c:	eb da                	jmp    c0006be8 <iso_readdir+0xca>
c0006c0e:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006c14:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006c1a:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006c20:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006c23:	73 db                	jae    c0006c00 <iso_readdir+0xe2>
c0006c25:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006c29:	75 34                	jne    c0006c5f <iso_readdir+0x141>
c0006c2b:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006c2f:	75 2e                	jne    c0006c5f <iso_readdir+0x141>
c0006c31:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006c34:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006c3b:	01 f9                	add    ecx,edi
c0006c3d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006c40:	89 c8                	mov    eax,ecx
c0006c42:	25 ff 07 00 00       	and    eax,0x7ff
c0006c47:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006c4c:	01 c8                	add    eax,ecx
c0006c4e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006c51:	25 ff 07 00 00       	and    eax,0x7ff
c0006c56:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006c5a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006c5d:	74 a1                	je     c0006c00 <iso_readdir+0xe2>
c0006c5f:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006c65:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006c69:	8d 56 21             	lea    edx,[esi+0x21]
c0006c6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c70:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c0006c76:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c7d:	74 0c                	je     c0006c8b <iso_readdir+0x16d>
c0006c7f:	89 e8                	mov    eax,ebp
c0006c81:	e8 14 f6 ff ff       	call   c000629a <ucs2utfn>
c0006c86:	e9 a6 00 00 00       	jmp    c0006d31 <iso_readdir+0x213>
c0006c8b:	57                   	push   edi
c0006c8c:	51                   	push   ecx
c0006c8d:	52                   	push   edx
c0006c8e:	55                   	push   ebp
c0006c8f:	e8 ec 99 ff ff       	call   c0000680 <strncpy>
c0006c94:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006c98:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006c9e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006ca1:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006ca9:	e8 49 fe ff ff       	call   c0006af7 <fn_postprocess>
c0006cae:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006cb2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006cb5:	83 c4 10             	add    esp,0x10
c0006cb8:	29 d0                	sub    eax,edx
c0006cba:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006cbe:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006cc2:	74 05                	je     c0006cc9 <iso_readdir+0x1ab>
c0006cc4:	83 e8 21             	sub    eax,0x21
c0006cc7:	eb 04                	jmp    c0006ccd <iso_readdir+0x1af>
c0006cc9:	47                   	inc    edi
c0006cca:	83 e8 22             	sub    eax,0x22
c0006ccd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd1:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006cd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cdb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006ce0:	7e 4f                	jle    c0006d31 <iso_readdir+0x213>
c0006ce2:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006ce5:	48                   	dec    eax
c0006ce6:	3c 01                	cmp    al,0x1
c0006ce8:	77 47                	ja     c0006d31 <iso_readdir+0x213>
c0006cea:	52                   	push   edx
c0006ceb:	6a 02                	push   0x2
c0006ced:	68 dd fc 02 c0       	push   0xc002fcdd
c0006cf2:	57                   	push   edi
c0006cf3:	e8 e8 9a ff ff       	call   c00007e0 <strncmp>
c0006cf8:	83 c4 10             	add    esp,0x10
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 26                	jne    c0006d25 <iso_readdir+0x207>
c0006cff:	50                   	push   eax
c0006d00:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d04:	83 e8 05             	sub    eax,0x5
c0006d07:	50                   	push   eax
c0006d08:	8d 47 05             	lea    eax,[edi+0x5]
c0006d0b:	50                   	push   eax
c0006d0c:	55                   	push   ebp
c0006d0d:	e8 6e 99 ff ff       	call   c0000680 <strncpy>
c0006d12:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006d16:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d1a:	83 c4 10             	add    esp,0x10
c0006d1d:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006d25:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d29:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006d2d:	01 c7                	add    edi,eax
c0006d2f:	eb aa                	jmp    c0006cdb <iso_readdir+0x1bd>
c0006d31:	83 c8 ff             	or     eax,0xffffffff
c0006d34:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006d38:	89 c2                	mov    edx,eax
c0006d3a:	75 0a                	jne    c0006d46 <iso_readdir+0x228>
c0006d3c:	8d 46 0a             	lea    eax,[esi+0xa]
c0006d3f:	e8 06 f6 ff ff       	call   c000634a <iso_733>
c0006d44:	31 d2                	xor    edx,edx
c0006d46:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006d4c:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006d52:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006d58:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006d5e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006d61:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d68:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006d6d:	83 c4 1c             	add    esp,0x1c
c0006d70:	5b                   	pop    ebx
c0006d71:	5e                   	pop    esi
c0006d72:	5f                   	pop    edi
c0006d73:	5d                   	pop    ebp
c0006d74:	c3                   	ret    

c0006d75 <iso_reset>:
c0006d75:	83 ec 18             	sub    esp,0x18
c0006d78:	68 fa fc 02 c0       	push   0xc002fcfa
c0006d7d:	e8 f2 27 02 00       	call   c0029574 <iso_kprintf>
c0006d82:	e8 10 f7 ff ff       	call   c0006497 <iso_break_all>
c0006d87:	e8 09 f7 ff ff       	call   c0006495 <bclear>
c0006d8c:	31 c0                	xor    eax,eax
c0006d8e:	83 c4 1c             	add    esp,0x1c
c0006d91:	c3                   	ret    

c0006d92 <init_percd>:
c0006d92:	57                   	push   edi
c0006d93:	56                   	push   esi
c0006d94:	53                   	push   ebx
c0006d95:	bb 01 00 00 00       	mov    ebx,0x1
c0006d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d9e:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006da3:	e8 cd ff ff ff       	call   c0006d75 <iso_reset>
c0006da8:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006db2:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006db7:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006dbb:	e8 8c f7 ff ff       	call   c000654c <biread>
c0006dc0:	89 c6                	mov    esi,eax
c0006dc2:	85 c0                	test   eax,eax
c0006dc4:	0f 88 ba 00 00 00    	js     c0006e84 <init_percd+0xf2>
c0006dca:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006dd1:	83 c0 04             	add    eax,0x4
c0006dd4:	52                   	push   edx
c0006dd5:	6a 06                	push   0x6
c0006dd7:	68 05 fd 02 c0       	push   0xc002fd05
c0006ddc:	50                   	push   eax
c0006ddd:	e8 9e 95 ff ff       	call   c0000380 <memcmp>
c0006de2:	83 c4 10             	add    esp,0x10
c0006de5:	85 c0                	test   eax,eax
c0006de7:	74 08                	je     c0006df1 <init_percd+0x5f>
c0006de9:	43                   	inc    ebx
c0006dea:	83 fb 04             	cmp    ebx,0x4
c0006ded:	75 c3                	jne    c0006db2 <init_percd+0x20>
c0006def:	eb 1a                	jmp    c0006e0b <init_percd+0x79>
c0006df1:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006df8:	83 c0 5c             	add    eax,0x5c
c0006dfb:	e8 17 f5 ff ff       	call   c0006317 <isjoliet>
c0006e00:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006e05:	85 c0                	test   eax,eax
c0006e07:	74 e0                	je     c0006de9 <init_percd+0x57>
c0006e09:	eb 3e                	jmp    c0006e49 <init_percd+0xb7>
c0006e0b:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006e12:	75 35                	jne    c0006e49 <init_percd+0xb7>
c0006e14:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006e19:	83 c0 10             	add    eax,0x10
c0006e1c:	e8 2b f7 ff ff       	call   c000654c <biread>
c0006e21:	89 c6                	mov    esi,eax
c0006e23:	85 c0                	test   eax,eax
c0006e25:	78 5f                	js     c0006e86 <init_percd+0xf4>
c0006e27:	83 cb ff             	or     ebx,0xffffffff
c0006e2a:	50                   	push   eax
c0006e2b:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006e32:	6a 06                	push   0x6
c0006e34:	83 c0 04             	add    eax,0x4
c0006e37:	68 0c fd 02 c0       	push   0xc002fd0c
c0006e3c:	50                   	push   eax
c0006e3d:	e8 3e 95 ff ff       	call   c0000380 <memcmp>
c0006e42:	83 c4 10             	add    esp,0x10
c0006e45:	85 c0                	test   eax,eax
c0006e47:	75 3d                	jne    c0006e86 <init_percd+0xf4>
c0006e49:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006e50:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006e55:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006e5b:	b9 22 00 00 00       	mov    ecx,0x22
c0006e60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e62:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006e67:	31 db                	xor    ebx,ebx
c0006e69:	e8 dc f4 ff ff       	call   c000634a <iso_733>
c0006e6e:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006e73:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006e78:	e8 cd f4 ff ff       	call   c000634a <iso_733>
c0006e7d:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006e82:	eb 02                	jmp    c0006e86 <init_percd+0xf4>
c0006e84:	89 c3                	mov    ebx,eax
c0006e86:	89 d8                	mov    eax,ebx
c0006e88:	5b                   	pop    ebx
c0006e89:	5e                   	pop    esi
c0006e8a:	5f                   	pop    edi
c0006e8b:	c3                   	ret    

c0006e8c <iso_ioctl>:
c0006e8c:	83 ec 18             	sub    esp,0x18
c0006e8f:	68 13 fd 02 c0       	push   0xc002fd13
c0006e94:	e8 db 26 02 00       	call   c0029574 <iso_kprintf>
c0006e99:	e8 d7 fe ff ff       	call   c0006d75 <iso_reset>
c0006e9e:	31 c0                	xor    eax,eax
c0006ea0:	83 c4 1c             	add    esp,0x1c
c0006ea3:	c3                   	ret    

c0006ea4 <fs_iso9660_init>:
c0006ea4:	53                   	push   ebx
c0006ea5:	31 db                	xor    ebx,ebx
c0006ea7:	83 ec 14             	sub    esp,0x14
c0006eaa:	68 1e fd 02 c0       	push   0xc002fd1e
c0006eaf:	e8 c0 26 02 00       	call   c0029574 <iso_kprintf>
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	68 40 09 00 00       	push   0x940
c0006ebc:	6a 00                	push   0x0
c0006ebe:	68 20 6d 03 c0       	push   0xc0036d20
c0006ec3:	e8 28 96 ff ff       	call   c00004f0 <memset>
c0006ec8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ecf:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006ed9:	e8 18 f7 00 00       	call   c00165f6 <malloc>
c0006ede:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ee5:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006eea:	e8 07 f7 00 00       	call   c00165f6 <malloc>
c0006eef:	83 c4 10             	add    esp,0x10
c0006ef2:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006ef7:	83 ec 0c             	sub    esp,0xc
c0006efa:	68 04 08 00 00       	push   0x804
c0006eff:	e8 f2 f6 00 00       	call   c00165f6 <malloc>
c0006f04:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006f0b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f11:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006f18:	e8 d9 f6 00 00       	call   c00165f6 <malloc>
c0006f1d:	83 c4 10             	add    esp,0x10
c0006f20:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006f27:	43                   	inc    ebx
c0006f28:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f2e:	83 fb 10             	cmp    ebx,0x10
c0006f31:	75 c4                	jne    c0006ef7 <fs_iso9660_init+0x53>
c0006f33:	31 c0                	xor    eax,eax
c0006f35:	83 c4 08             	add    esp,0x8
c0006f38:	5b                   	pop    ebx
c0006f39:	c3                   	ret    

c0006f3a <fs_iso9660_shutdown>:
c0006f3a:	53                   	push   ebx
c0006f3b:	31 db                	xor    ebx,ebx
c0006f3d:	83 ec 08             	sub    esp,0x8
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006f4a:	e8 b7 f6 00 00       	call   c0016606 <free>
c0006f4f:	58                   	pop    eax
c0006f50:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006f57:	43                   	inc    ebx
c0006f58:	e8 a9 f6 00 00       	call   c0016606 <free>
c0006f5d:	83 c4 10             	add    esp,0x10
c0006f60:	83 fb 10             	cmp    ebx,0x10
c0006f63:	75 db                	jne    c0006f40 <fs_iso9660_shutdown+0x6>
c0006f65:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006f6a:	85 c0                	test   eax,eax
c0006f6c:	74 0c                	je     c0006f7a <fs_iso9660_shutdown+0x40>
c0006f6e:	83 ec 0c             	sub    esp,0xc
c0006f71:	50                   	push   eax
c0006f72:	e8 8f f6 00 00       	call   c0016606 <free>
c0006f77:	83 c4 10             	add    esp,0x10
c0006f7a:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	74 0c                	je     c0006f8f <fs_iso9660_shutdown+0x55>
c0006f83:	83 ec 0c             	sub    esp,0xc
c0006f86:	50                   	push   eax
c0006f87:	e8 7a f6 00 00       	call   c0016606 <free>
c0006f8c:	83 c4 10             	add    esp,0x10
c0006f8f:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006f99:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006fa3:	31 c0                	xor    eax,eax
c0006fa5:	83 c4 08             	add    esp,0x8
c0006fa8:	5b                   	pop    ebx
c0006fa9:	c3                   	ret    
c0006faa:	66 90                	xchg   ax,ax

c0006fac <lwip_init>:
c0006fac:	83 ec 0c             	sub    esp,0xc
c0006faf:	e8 48 2c 00 00       	call   c0009bfc <stats_init>
c0006fb4:	e8 e3 9d ff ff       	call   c0000d9c <sys_init>
c0006fb9:	e8 ae 01 00 00       	call   c000716c <mem_init>
c0006fbe:	e8 05 0a 00 00       	call   c00079c8 <memp_init>
c0006fc3:	e8 e8 0c 00 00       	call   c0007cb0 <netif_init>
c0006fc8:	e8 6f 9c ff ff       	call   c0000c3c <lwip_socket_init>
c0006fcd:	e8 76 9d 00 00       	call   c0010d48 <sys_timeouts_init>
c0006fd2:	90                   	nop
c0006fd3:	83 c4 0c             	add    esp,0xc
c0006fd6:	c3                   	ret    
c0006fd7:	90                   	nop

c0006fd8 <plug_holes>:
c0006fd8:	83 ec 1c             	sub    esp,0x1c
c0006fdb:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fe0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fe4:	73 16                	jae    c0006ffc <plug_holes+0x24>
c0006fe6:	83 ec 08             	sub    esp,0x8
c0006fe9:	68 2f fd 02 c0       	push   0xc002fd2f
c0006fee:	68 46 fd 02 c0       	push   0xc002fd46
c0006ff3:	e8 d4 8d 01 00       	call   c001fdcc <CPrintf>
c0006ff8:	83 c4 10             	add    esp,0x10
c0006ffb:	90                   	nop
c0006ffc:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007001:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007005:	72 15                	jb     c000701c <plug_holes+0x44>
c0007007:	83 ec 08             	sub    esp,0x8
c000700a:	68 53 fd 02 c0       	push   0xc002fd53
c000700f:	68 46 fd 02 c0       	push   0xc002fd46
c0007014:	e8 b3 8d 01 00       	call   c001fdcc <CPrintf>
c0007019:	83 c4 10             	add    esp,0x10
c000701c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007020:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007023:	0f b6 c0             	movzx  eax,al
c0007026:	85 c0                	test   eax,eax
c0007028:	74 16                	je     c0007040 <plug_holes+0x68>
c000702a:	83 ec 08             	sub    esp,0x8
c000702d:	68 6d fd 02 c0       	push   0xc002fd6d
c0007032:	68 46 fd 02 c0       	push   0xc002fd46
c0007037:	e8 90 8d 01 00       	call   c001fdcc <CPrintf>
c000703c:	83 c4 10             	add    esp,0x10
c000703f:	90                   	nop
c0007040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007044:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007047:	0f b7 c0             	movzx  eax,ax
c000704a:	3d 40 06 00 00       	cmp    eax,0x640
c000704f:	76 17                	jbe    c0007068 <plug_holes+0x90>
c0007051:	83 ec 08             	sub    esp,0x8
c0007054:	68 00 fe 02 c0       	push   0xc002fe00
c0007059:	68 46 fd 02 c0       	push   0xc002fd46
c000705e:	e8 69 8d 01 00       	call   c001fdcc <CPrintf>
c0007063:	83 c4 10             	add    esp,0x10
c0007066:	66 90                	xchg   ax,ax
c0007068:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007072:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007075:	0f b7 c0             	movzx  eax,ax
c0007078:	01 d0                	add    eax,edx
c000707a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007082:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007086:	74 64                	je     c00070ec <plug_holes+0x114>
c0007088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000708c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000708f:	0f b6 c0             	movzx  eax,al
c0007092:	85 c0                	test   eax,eax
c0007094:	75 56                	jne    c00070ec <plug_holes+0x114>
c0007096:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000709b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000709f:	74 4b                	je     c00070ec <plug_holes+0x114>
c00070a1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00070a6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070aa:	75 0c                	jne    c00070b8 <plug_holes+0xe0>
c00070ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070b0:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00070b5:	8d 76 00             	lea    esi,[esi+0x0]
c00070b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070c3:	66 89 02             	mov    WORD PTR [edx],ax
c00070c6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070cf:	29 c2                	sub    edx,eax
c00070d1:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c00070d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070db:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070de:	0f b7 c0             	movzx  eax,ax
c00070e1:	01 c1                	add    ecx,eax
c00070e3:	89 d0                	mov    eax,edx
c00070e5:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c00070e9:	8d 76 00             	lea    esi,[esi+0x0]
c00070ec:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00070f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00070fa:	0f b7 c0             	movzx  eax,ax
c00070fd:	01 d0                	add    eax,edx
c00070ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007103:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007107:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000710b:	74 57                	je     c0007164 <plug_holes+0x18c>
c000710d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007111:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007114:	0f b6 c0             	movzx  eax,al
c0007117:	85 c0                	test   eax,eax
c0007119:	75 49                	jne    c0007164 <plug_holes+0x18c>
c000711b:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007120:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007124:	75 0a                	jne    c0007130 <plug_holes+0x158>
c0007126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000712a:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000712f:	90                   	nop
c0007130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007134:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007137:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713b:	66 89 02             	mov    WORD PTR [edx],ax
c000713e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007147:	29 c2                	sub    edx,eax
c0007149:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c000714f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007153:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007156:	0f b7 c0             	movzx  eax,ax
c0007159:	01 c1                	add    ecx,eax
c000715b:	89 d0                	mov    eax,edx
c000715d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0007161:	8d 76 00             	lea    esi,[esi+0x0]
c0007164:	90                   	nop
c0007165:	83 c4 1c             	add    esp,0x1c
c0007168:	c3                   	ret    
c0007169:	8d 76 00             	lea    esi,[esi+0x0]

c000716c <mem_init>:
c000716c:	83 ec 1c             	sub    esp,0x1c
c000716f:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0007179:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000717e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007186:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c000718b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000718f:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0007195:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007199:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000719d:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071a2:	05 40 06 00 00       	add    eax,0x640
c00071a7:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c00071ac:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071b1:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00071b5:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071ba:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071bf:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071c4:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c00071ca:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071cf:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00071d4:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	6a 01                	push   0x1
c00071e2:	68 98 76 03 c0       	push   0xc0037698
c00071e7:	e8 80 9a ff ff       	call   c0000c6c <sys_sem_new>
c00071ec:	83 c4 10             	add    esp,0x10
c00071ef:	0f be c0             	movsx  eax,al
c00071f2:	85 c0                	test   eax,eax
c00071f4:	74 16                	je     c000720c <mem_init+0xa0>
c00071f6:	83 ec 08             	sub    esp,0x8
c00071f9:	68 88 fd 02 c0       	push   0xc002fd88
c00071fe:	68 46 fd 02 c0       	push   0xc002fd46
c0007203:	e8 c4 8b 01 00       	call   c001fdcc <CPrintf>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	90                   	nop
c000720d:	83 c4 1c             	add    esp,0x1c
c0007210:	c3                   	ret    
c0007211:	8d 76 00             	lea    esi,[esi+0x0]

c0007214 <mem_free>:
c0007214:	83 ec 1c             	sub    esp,0x1c
c0007217:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000721c:	0f 84 0e 01 00 00    	je     c0007330 <mem_free+0x11c>
c0007222:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007227:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000722b:	72 0b                	jb     c0007238 <mem_free+0x24>
c000722d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007232:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007236:	72 18                	jb     c0007250 <mem_free+0x3c>
c0007238:	83 ec 08             	sub    esp,0x8
c000723b:	68 a3 fd 02 c0       	push   0xc002fda3
c0007240:	68 46 fd 02 c0       	push   0xc002fd46
c0007245:	e8 82 8b 01 00       	call   c001fdcc <CPrintf>
c000724a:	83 c4 10             	add    esp,0x10
c000724d:	8d 76 00             	lea    esi,[esi+0x0]
c0007250:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007255:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007259:	72 0d                	jb     c0007268 <mem_free+0x54>
c000725b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007260:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007264:	72 22                	jb     c0007288 <mem_free+0x74>
c0007266:	66 90                	xchg   ax,ax
c0007268:	e8 4f 8b 01 00       	call   c001fdbc <CLockScheduler>
c000726d:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c0007273:	83 c0 01             	add    eax,0x1
c0007276:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c000727c:	e8 1f 8b 01 00       	call   c001fda0 <CUnlockScheduler>
c0007281:	e9 ae 00 00 00       	jmp    c0007334 <mem_free+0x120>
c0007286:	66 90                	xchg   ax,ax
c0007288:	83 ec 08             	sub    esp,0x8
c000728b:	6a 00                	push   0x0
c000728d:	68 98 76 03 c0       	push   0xc0037698
c0007292:	e8 2d 9a ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007297:	83 c4 10             	add    esp,0x10
c000729a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000729e:	83 e8 06             	sub    eax,0x6
c00072a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072a9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072ac:	0f b6 c0             	movzx  eax,al
c00072af:	85 c0                	test   eax,eax
c00072b1:	75 15                	jne    c00072c8 <mem_free+0xb4>
c00072b3:	83 ec 08             	sub    esp,0x8
c00072b6:	68 ba fd 02 c0       	push   0xc002fdba
c00072bb:	68 46 fd 02 c0       	push   0xc002fd46
c00072c0:	e8 07 8b 01 00       	call   c001fdcc <CPrintf>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072cc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072d0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00072d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00072d9:	73 09                	jae    c00072e4 <mem_free+0xd0>
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00072e4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00072ea:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072f4:	29 d1                	sub    ecx,edx
c00072f6:	89 ca                	mov    edx,ecx
c00072f8:	89 d1                	mov    ecx,edx
c00072fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072fe:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007301:	29 d1                	sub    ecx,edx
c0007303:	89 ca                	mov    edx,ecx
c0007305:	01 d0                	add    eax,edx
c0007307:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000730d:	83 ec 0c             	sub    esp,0xc
c0007310:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007314:	e8 bf fc ff ff       	call   c0006fd8 <plug_holes>
c0007319:	83 c4 10             	add    esp,0x10
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	68 98 76 03 c0       	push   0xc0037698
c0007324:	e8 83 99 ff ff       	call   c0000cac <sys_sem_signal>
c0007329:	83 c4 10             	add    esp,0x10
c000732c:	eb 06                	jmp    c0007334 <mem_free+0x120>
c000732e:	66 90                	xchg   ax,ax
c0007330:	90                   	nop
c0007331:	8d 76 00             	lea    esi,[esi+0x0]
c0007334:	83 c4 1c             	add    esp,0x1c
c0007337:	c3                   	ret    

c0007338 <mem_trim>:
c0007338:	83 ec 2c             	sub    esp,0x2c
c000733b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000733f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007344:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007349:	83 f8 0b             	cmp    eax,0xb
c000734c:	77 0a                	ja     c0007358 <mem_trim+0x20>
c000734e:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007355:	8d 76 00             	lea    esi,[esi+0x0]
c0007358:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000735d:	3d 40 06 00 00       	cmp    eax,0x640
c0007362:	76 0c                	jbe    c0007370 <mem_trim+0x38>
c0007364:	b8 00 00 00 00       	mov    eax,0x0
c0007369:	e9 d6 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c000736e:	66 90                	xchg   ax,ax
c0007370:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007375:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007379:	72 0d                	jb     c0007388 <mem_trim+0x50>
c000737b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007380:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007384:	72 1a                	jb     c00073a0 <mem_trim+0x68>
c0007386:	66 90                	xchg   ax,ax
c0007388:	83 ec 08             	sub    esp,0x8
c000738b:	68 ce fd 02 c0       	push   0xc002fdce
c0007390:	68 46 fd 02 c0       	push   0xc002fd46
c0007395:	e8 32 8a 01 00       	call   c001fdcc <CPrintf>
c000739a:	83 c4 10             	add    esp,0x10
c000739d:	8d 76 00             	lea    esi,[esi+0x0]
c00073a0:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00073a5:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073a9:	72 0d                	jb     c00073b8 <mem_trim+0x80>
c00073ab:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00073b0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073b4:	72 26                	jb     c00073dc <mem_trim+0xa4>
c00073b6:	66 90                	xchg   ax,ax
c00073b8:	e8 ff 89 01 00       	call   c001fdbc <CLockScheduler>
c00073bd:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00073c3:	83 c0 01             	add    eax,0x1
c00073c6:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00073cc:	e8 cf 89 01 00       	call   c001fda0 <CUnlockScheduler>
c00073d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073d5:	e9 6a 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c00073da:	66 90                	xchg   ax,ax
c00073dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073e0:	83 e8 06             	sub    eax,0x6
c00073e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073e7:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00073ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00073f0:	29 c2                	sub    edx,eax
c00073f2:	89 d0                	mov    eax,edx
c00073f4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00073f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073fd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007400:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007405:	89 d1                	mov    ecx,edx
c0007407:	29 c1                	sub    ecx,eax
c0007409:	89 c8                	mov    eax,ecx
c000740b:	83 e8 06             	sub    eax,0x6
c000740e:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0007413:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007418:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000741d:	39 c2                	cmp    edx,eax
c000741f:	76 17                	jbe    c0007438 <mem_trim+0x100>
c0007421:	83 ec 08             	sub    esp,0x8
c0007424:	68 2c fe 02 c0       	push   0xc002fe2c
c0007429:	68 46 fd 02 c0       	push   0xc002fd46
c000742e:	e8 99 89 01 00       	call   c001fdcc <CPrintf>
c0007433:	83 c4 10             	add    esp,0x10
c0007436:	66 90                	xchg   ax,ax
c0007438:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000743d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007442:	39 c2                	cmp    edx,eax
c0007444:	76 0a                	jbe    c0007450 <mem_trim+0x118>
c0007446:	b8 00 00 00 00       	mov    eax,0x0
c000744b:	e9 f4 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007450:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007455:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000745a:	39 c2                	cmp    edx,eax
c000745c:	75 0a                	jne    c0007468 <mem_trim+0x130>
c000745e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007462:	e9 dd 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007467:	90                   	nop
c0007468:	83 ec 08             	sub    esp,0x8
c000746b:	6a 00                	push   0x0
c000746d:	68 98 76 03 c0       	push   0xc0037698
c0007472:	e8 4d 98 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007477:	83 c4 10             	add    esp,0x10
c000747a:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007484:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007487:	0f b7 c0             	movzx  eax,ax
c000748a:	01 d0                	add    eax,edx
c000748c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007490:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007494:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007497:	0f b6 c0             	movzx  eax,al
c000749a:	85 c0                	test   eax,eax
c000749c:	0f 85 c6 00 00 00    	jne    c0007568 <mem_trim+0x230>
c00074a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074a6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074a9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00074ae:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00074b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b7:	01 d0                	add    eax,edx
c00074b9:	83 c0 06             	add    eax,0x6
c00074bc:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00074c1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00074c6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00074ca:	75 14                	jne    c00074e0 <mem_trim+0x1a8>
c00074cc:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074d2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074d7:	01 d0                	add    eax,edx
c00074d9:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00074de:	66 90                	xchg   ax,ax
c00074e0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074e6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074eb:	01 d0                	add    eax,edx
c00074ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00074f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074f5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00074fd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0007502:	66 89 02             	mov    WORD PTR [edx],ax
c0007505:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007509:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000750e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007512:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751a:	66 89 02             	mov    WORD PTR [edx],ax
c000751d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007521:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007524:	0f b7 c0             	movzx  eax,ax
c0007527:	3d 40 06 00 00       	cmp    eax,0x640
c000752c:	74 1a                	je     c0007548 <mem_trim+0x210>
c000752e:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007534:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007538:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753b:	0f b7 c0             	movzx  eax,ax
c000753e:	01 c2                	add    edx,eax
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007548:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000754e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007556:	29 d1                	sub    ecx,edx
c0007558:	89 ca                	mov    edx,ecx
c000755a:	01 d0                	add    eax,edx
c000755c:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007562:	e9 c9 00 00 00       	jmp    c0007630 <mem_trim+0x2f8>
c0007567:	90                   	nop
c0007568:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000756d:	8d 50 12             	lea    edx,[eax+0x12]
c0007570:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007575:	39 c2                	cmp    edx,eax
c0007577:	0f 87 b3 00 00 00    	ja     c0007630 <mem_trim+0x2f8>
c000757d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007586:	01 d0                	add    eax,edx
c0007588:	83 c0 06             	add    eax,0x6
c000758b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007590:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007596:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000759b:	01 d0                	add    eax,edx
c000759d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00075a1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075a6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00075aa:	73 0c                	jae    c00075b8 <mem_trim+0x280>
c00075ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075b0:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00075b5:	8d 76 00             	lea    esi,[esi+0x0]
c00075b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075cb:	66 89 02             	mov    WORD PTR [edx],ax
c00075ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00075d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00075db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00075df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075e3:	66 89 02             	mov    WORD PTR [edx],ax
c00075e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075ea:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075ed:	0f b7 c0             	movzx  eax,ax
c00075f0:	3d 40 06 00 00       	cmp    eax,0x640
c00075f5:	74 1d                	je     c0007614 <mem_trim+0x2dc>
c00075f7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007601:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	01 c2                	add    edx,eax
c0007609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000760d:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007611:	8d 76 00             	lea    esi,[esi+0x0]
c0007614:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000761a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000761e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007622:	29 d1                	sub    ecx,edx
c0007624:	89 ca                	mov    edx,ecx
c0007626:	01 d0                	add    eax,edx
c0007628:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000762e:	66 90                	xchg   ax,ax
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	68 98 76 03 c0       	push   0xc0037698
c0007638:	e8 6f 96 ff ff       	call   c0000cac <sys_sem_signal>
c000763d:	83 c4 10             	add    esp,0x10
c0007640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007644:	83 c4 2c             	add    esp,0x2c
c0007647:	c3                   	ret    

c0007648 <mem_malloc>:
c0007648:	53                   	push   ebx
c0007649:	83 ec 28             	sub    esp,0x28
c000764c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007650:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007655:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000765a:	85 c0                	test   eax,eax
c000765c:	75 0a                	jne    c0007668 <mem_malloc+0x20>
c000765e:	b8 00 00 00 00       	mov    eax,0x0
c0007663:	e9 f4 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007668:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000766d:	83 f8 0b             	cmp    eax,0xb
c0007670:	77 0a                	ja     c000767c <mem_malloc+0x34>
c0007672:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007679:	8d 76 00             	lea    esi,[esi+0x0]
c000767c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007681:	3d 40 06 00 00       	cmp    eax,0x640
c0007686:	76 0c                	jbe    c0007694 <mem_malloc+0x4c>
c0007688:	b8 00 00 00 00       	mov    eax,0x0
c000768d:	e9 ca 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007692:	66 90                	xchg   ax,ax
c0007694:	83 ec 08             	sub    esp,0x8
c0007697:	6a 00                	push   0x0
c0007699:	68 98 76 03 c0       	push   0xc0037698
c000769e:	e8 21 96 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00076a3:	83 c4 10             	add    esp,0x10
c00076a6:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076ac:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00076b1:	29 c2                	sub    edx,eax
c00076b3:	89 d0                	mov    eax,edx
c00076b5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076ba:	e9 5d 02 00 00       	jmp    c000791c <mem_malloc+0x2d4>
c00076bf:	90                   	nop
c00076c0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076c6:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076cb:	01 d0                	add    eax,edx
c00076cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00076d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076d8:	0f b6 c0             	movzx  eax,al
c00076db:	85 c0                	test   eax,eax
c00076dd:	0f 85 21 02 00 00    	jne    c0007904 <mem_malloc+0x2bc>
c00076e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076ea:	0f b7 d0             	movzx  edx,ax
c00076ed:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076f2:	29 c2                	sub    edx,eax
c00076f4:	89 d0                	mov    eax,edx
c00076f6:	8d 50 fa             	lea    edx,[eax-0x6]
c00076f9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00076fe:	39 c2                	cmp    edx,eax
c0007700:	0f 82 fe 01 00 00    	jb     c0007904 <mem_malloc+0x2bc>
c0007706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000770d:	0f b7 d0             	movzx  edx,ax
c0007710:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007715:	29 c2                	sub    edx,eax
c0007717:	89 d0                	mov    eax,edx
c0007719:	8d 50 fa             	lea    edx,[eax-0x6]
c000771c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007721:	83 c0 12             	add    eax,0x12
c0007724:	39 c2                	cmp    edx,eax
c0007726:	0f 82 c4 00 00 00    	jb     c00077f0 <mem_malloc+0x1a8>
c000772c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007735:	01 d0                	add    eax,edx
c0007737:	83 c0 06             	add    eax,0x6
c000773a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000773f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000774a:	01 d0                	add    eax,edx
c000774c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007754:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007758:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000775c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000775f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007763:	66 89 02             	mov    WORD PTR [edx],ax
c0007766:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000776a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000776f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007773:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007777:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000777c:	66 89 02             	mov    WORD PTR [edx],ax
c000777f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007783:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000778b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000778e:	0f b7 c0             	movzx  eax,ax
c0007791:	3d 40 06 00 00       	cmp    eax,0x640
c0007796:	74 1c                	je     c00077b4 <mem_malloc+0x16c>
c0007798:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000779e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a5:	0f b7 c0             	movzx  eax,ax
c00077a8:	01 c2                	add    edx,eax
c00077aa:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00077af:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00077b3:	90                   	nop
c00077b4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077be:	01 d0                	add    eax,edx
c00077c0:	83 c0 06             	add    eax,0x6
c00077c3:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00077c9:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00077d0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077d6:	0f b7 d2             	movzx  edx,dx
c00077d9:	0f b7 c0             	movzx  eax,ax
c00077dc:	39 c2                	cmp    edx,eax
c00077de:	73 60                	jae    c0007840 <mem_malloc+0x1f8>
c00077e0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077e6:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00077ec:	eb 52                	jmp    c0007840 <mem_malloc+0x1f8>
c00077ee:	66 90                	xchg   ax,ax
c00077f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00077f4:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00077f8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007802:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007805:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c000780b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000780f:	29 cb                	sub    ebx,ecx
c0007811:	89 d9                	mov    ecx,ebx
c0007813:	29 ca                	sub    edx,ecx
c0007815:	01 d0                	add    eax,edx
c0007817:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000781d:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007824:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000782a:	0f b7 d2             	movzx  edx,dx
c000782d:	0f b7 c0             	movzx  eax,ax
c0007830:	39 c2                	cmp    edx,eax
c0007832:	73 0c                	jae    c0007840 <mem_malloc+0x1f8>
c0007834:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000783a:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007840:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007845:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007849:	75 71                	jne    c00078bc <mem_malloc+0x274>
c000784b:	eb 1b                	jmp    c0007868 <mem_malloc+0x220>
c000784d:	8d 76 00             	lea    esi,[esi+0x0]
c0007850:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007856:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000785b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000785e:	0f b7 c0             	movzx  eax,ax
c0007861:	01 d0                	add    eax,edx
c0007863:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007868:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000786d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007870:	0f b6 c0             	movzx  eax,al
c0007873:	85 c0                	test   eax,eax
c0007875:	74 11                	je     c0007888 <mem_malloc+0x240>
c0007877:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000787d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007882:	39 c2                	cmp    edx,eax
c0007884:	75 ca                	jne    c0007850 <mem_malloc+0x208>
c0007886:	66 90                	xchg   ax,ax
c0007888:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000788e:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007893:	39 c2                	cmp    edx,eax
c0007895:	74 25                	je     c00078bc <mem_malloc+0x274>
c0007897:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000789c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000789f:	0f b6 c0             	movzx  eax,al
c00078a2:	85 c0                	test   eax,eax
c00078a4:	74 16                	je     c00078bc <mem_malloc+0x274>
c00078a6:	83 ec 08             	sub    esp,0x8
c00078a9:	68 e5 fd 02 c0       	push   0xc002fde5
c00078ae:	68 46 fd 02 c0       	push   0xc002fd46
c00078b3:	e8 14 85 01 00       	call   c001fdcc <CPrintf>
c00078b8:	83 c4 10             	add    esp,0x10
c00078bb:	90                   	nop
c00078bc:	83 ec 0c             	sub    esp,0xc
c00078bf:	68 98 76 03 c0       	push   0xc0037698
c00078c4:	e8 e3 93 ff ff       	call   c0000cac <sys_sem_signal>
c00078c9:	83 c4 10             	add    esp,0x10
c00078cc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00078d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d5:	01 d0                	add    eax,edx
c00078d7:	8d 50 06             	lea    edx,[eax+0x6]
c00078da:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00078df:	39 c2                	cmp    edx,eax
c00078e1:	76 15                	jbe    c00078f8 <mem_malloc+0x2b0>
c00078e3:	83 ec 08             	sub    esp,0x8
c00078e6:	68 4c fe 02 c0       	push   0xc002fe4c
c00078eb:	68 46 fd 02 c0       	push   0xc002fd46
c00078f0:	e8 d7 84 01 00       	call   c001fdcc <CPrintf>
c00078f5:	83 c4 10             	add    esp,0x10
c00078f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078fc:	83 c0 06             	add    eax,0x6
c00078ff:	eb 5b                	jmp    c000795c <mem_malloc+0x314>
c0007901:	8d 76 00             	lea    esi,[esi+0x0]
c0007904:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000790a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000790f:	01 d0                	add    eax,edx
c0007911:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007914:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007919:	8d 76 00             	lea    esi,[esi+0x0]
c000791c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007921:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007926:	b9 40 06 00 00       	mov    ecx,0x640
c000792b:	29 d1                	sub    ecx,edx
c000792d:	89 ca                	mov    edx,ecx
c000792f:	39 d0                	cmp    eax,edx
c0007931:	0f 8c 89 fd ff ff    	jl     c00076c0 <mem_malloc+0x78>
c0007937:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c000793d:	83 c0 01             	add    eax,0x1
c0007940:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c0007946:	83 ec 0c             	sub    esp,0xc
c0007949:	68 98 76 03 c0       	push   0xc0037698
c000794e:	e8 59 93 ff ff       	call   c0000cac <sys_sem_signal>
c0007953:	83 c4 10             	add    esp,0x10
c0007956:	b8 00 00 00 00       	mov    eax,0x0
c000795b:	90                   	nop
c000795c:	83 c4 28             	add    esp,0x28
c000795f:	5b                   	pop    ebx
c0007960:	c3                   	ret    
c0007961:	8d 76 00             	lea    esi,[esi+0x0]

c0007964 <mem_calloc>:
c0007964:	83 ec 2c             	sub    esp,0x2c
c0007967:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000796b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000796f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007974:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007979:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000797d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007981:	0f af c2             	imul   eax,edx
c0007984:	0f b7 c0             	movzx  eax,ax
c0007987:	83 ec 0c             	sub    esp,0xc
c000798a:	50                   	push   eax
c000798b:	e8 b8 fc ff ff       	call   c0007648 <mem_malloc>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007997:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000799c:	74 22                	je     c00079c0 <mem_calloc+0x5c>
c000799e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00079a3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00079a8:	0f af c2             	imul   eax,edx
c00079ab:	83 ec 04             	sub    esp,0x4
c00079ae:	50                   	push   eax
c00079af:	6a 00                	push   0x0
c00079b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b5:	e8 36 8b ff ff       	call   c00004f0 <memset>
c00079ba:	83 c4 10             	add    esp,0x10
c00079bd:	8d 76 00             	lea    esi,[esi+0x0]
c00079c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00079c4:	83 c4 2c             	add    esp,0x2c
c00079c7:	c3                   	ret    

c00079c8 <memp_init>:
c00079c8:	83 ec 10             	sub    esp,0x10
c00079cb:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00079d2:	eb 78                	jmp    c0007a4c <memp_init+0x84>
c00079d4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079d9:	89 d0                	mov    eax,edx
c00079db:	c1 e0 02             	shl    eax,0x2
c00079de:	01 d0                	add    eax,edx
c00079e0:	01 c0                	add    eax,eax
c00079e2:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079e7:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00079ec:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079f1:	89 d0                	mov    eax,edx
c00079f3:	c1 e0 02             	shl    eax,0x2
c00079f6:	01 d0                	add    eax,edx
c00079f8:	01 c0                	add    eax,eax
c00079fa:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00079ff:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a04:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a09:	89 d0                	mov    eax,edx
c0007a0b:	c1 e0 02             	shl    eax,0x2
c0007a0e:	01 d0                	add    eax,edx
c0007a10:	01 c0                	add    eax,eax
c0007a12:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a17:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a1c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a21:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c0007a26:	66 8b 94 00 9c fe 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd0164]
c0007a2e:	89 c8                	mov    eax,ecx
c0007a30:	c1 e0 02             	shl    eax,0x2
c0007a33:	01 c8                	add    eax,ecx
c0007a35:	01 c0                	add    eax,eax
c0007a37:	05 d2 67 03 c0       	add    eax,0xc00367d2
c0007a3c:	66 89 10             	mov    WORD PTR [eax],dx
c0007a3f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007a44:	83 c0 01             	add    eax,0x1
c0007a47:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007a4c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a51:	83 f8 0d             	cmp    eax,0xd
c0007a54:	0f 86 7a ff ff ff    	jbe    c00079d4 <memp_init+0xc>
c0007a5a:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c0007a62:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007a69:	e9 8a 00 00 00       	jmp    c0007af8 <memp_init+0x130>
c0007a6e:	66 90                	xchg   ax,ax
c0007a70:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a75:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007a80:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007a87:	eb 47                	jmp    c0007ad0 <memp_init+0x108>
c0007a89:	8d 76 00             	lea    esi,[esi+0x0]
c0007a8c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a91:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a9c:	89 10                	mov    DWORD PTR [eax],edx
c0007a9e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007aa3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007aa7:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007aae:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ab3:	66 8b 84 00 b8 fe 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0148]
c0007abb:	0f b7 c0             	movzx  eax,ax
c0007abe:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007ac2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ac6:	83 c0 01             	add    eax,0x1
c0007ac9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007ace:	66 90                	xchg   ax,ax
c0007ad0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ad5:	66 8b 84 00 9c fe 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0164]
c0007add:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007ae2:	0f b7 c0             	movzx  eax,ax
c0007ae5:	39 c2                	cmp    edx,eax
c0007ae7:	72 a3                	jb     c0007a8c <memp_init+0xc4>
c0007ae9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007aee:	83 c0 01             	add    eax,0x1
c0007af1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007af6:	66 90                	xchg   ax,ax
c0007af8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007afd:	83 f8 0d             	cmp    eax,0xd
c0007b00:	0f 86 6a ff ff ff    	jbe    c0007a70 <memp_init+0xa8>
c0007b06:	90                   	nop
c0007b07:	83 c4 10             	add    esp,0x10
c0007b0a:	c3                   	ret    
c0007b0b:	90                   	nop

c0007b0c <memp_malloc>:
c0007b0c:	83 ec 1c             	sub    esp,0x1c
c0007b0f:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007b14:	76 22                	jbe    c0007b38 <memp_malloc+0x2c>
c0007b16:	83 ec 08             	sub    esp,0x8
c0007b19:	68 7c fe 02 c0       	push   0xc002fe7c
c0007b1e:	68 46 fd 02 c0       	push   0xc002fd46
c0007b23:	e8 a4 82 01 00       	call   c001fdcc <CPrintf>
c0007b28:	83 c4 10             	add    esp,0x10
c0007b2b:	b8 00 00 00 00       	mov    eax,0x0
c0007b30:	e9 ff 00 00 00       	jmp    c0007c34 <memp_malloc+0x128>
c0007b35:	8d 76 00             	lea    esi,[esi+0x0]
c0007b38:	e8 7f 82 01 00       	call   c001fdbc <CLockScheduler>
c0007b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b41:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c0007b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b51:	0f 84 a1 00 00 00    	je     c0007bf8 <memp_malloc+0xec>
c0007b57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b61:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b6c:	89 d0                	mov    eax,edx
c0007b6e:	c1 e0 02             	shl    eax,0x2
c0007b71:	01 d0                	add    eax,edx
c0007b73:	01 c0                	add    eax,eax
c0007b75:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b7a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007b7d:	83 c0 01             	add    eax,0x1
c0007b80:	89 c2                	mov    edx,eax
c0007b82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b86:	89 c8                	mov    eax,ecx
c0007b88:	c1 e0 02             	shl    eax,0x2
c0007b8b:	01 c8                	add    eax,ecx
c0007b8d:	01 c0                	add    eax,eax
c0007b8f:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b94:	66 89 10             	mov    WORD PTR [eax],dx
c0007b97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b9b:	89 d0                	mov    eax,edx
c0007b9d:	c1 e0 02             	shl    eax,0x2
c0007ba0:	01 d0                	add    eax,edx
c0007ba2:	01 c0                	add    eax,eax
c0007ba4:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007ba9:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007bac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bb0:	89 c8                	mov    eax,ecx
c0007bb2:	c1 e0 02             	shl    eax,0x2
c0007bb5:	01 c8                	add    eax,ecx
c0007bb7:	01 c0                	add    eax,eax
c0007bb9:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bbe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007bc1:	0f b7 d2             	movzx  edx,dx
c0007bc4:	0f b7 c0             	movzx  eax,ax
c0007bc7:	39 c2                	cmp    edx,eax
c0007bc9:	73 5d                	jae    c0007c28 <memp_malloc+0x11c>
c0007bcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bcf:	89 d0                	mov    eax,edx
c0007bd1:	c1 e0 02             	shl    eax,0x2
c0007bd4:	01 d0                	add    eax,edx
c0007bd6:	01 c0                	add    eax,eax
c0007bd8:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bdd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007be0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007be4:	89 c8                	mov    eax,ecx
c0007be6:	c1 e0 02             	shl    eax,0x2
c0007be9:	01 c8                	add    eax,ecx
c0007beb:	01 c0                	add    eax,eax
c0007bed:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007bf2:	66 89 10             	mov    WORD PTR [eax],dx
c0007bf5:	eb 31                	jmp    c0007c28 <memp_malloc+0x11c>
c0007bf7:	90                   	nop
c0007bf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bfc:	89 d0                	mov    eax,edx
c0007bfe:	c1 e0 02             	shl    eax,0x2
c0007c01:	01 d0                	add    eax,edx
c0007c03:	01 c0                	add    eax,eax
c0007c05:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c0d:	83 c0 01             	add    eax,0x1
c0007c10:	89 c2                	mov    edx,eax
c0007c12:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c16:	89 c8                	mov    eax,ecx
c0007c18:	c1 e0 02             	shl    eax,0x2
c0007c1b:	01 c8                	add    eax,ecx
c0007c1d:	01 c0                	add    eax,eax
c0007c1f:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c24:	66 89 10             	mov    WORD PTR [eax],dx
c0007c27:	90                   	nop
c0007c28:	e8 73 81 01 00       	call   c001fda0 <CUnlockScheduler>
c0007c2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c31:	8d 76 00             	lea    esi,[esi+0x0]
c0007c34:	83 c4 1c             	add    esp,0x1c
c0007c37:	c3                   	ret    

c0007c38 <memp_free>:
c0007c38:	83 ec 1c             	sub    esp,0x1c
c0007c3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c40:	74 66                	je     c0007ca8 <memp_free+0x70>
c0007c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c4a:	e8 6d 81 01 00       	call   c001fdbc <CLockScheduler>
c0007c4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c53:	89 d0                	mov    eax,edx
c0007c55:	c1 e0 02             	shl    eax,0x2
c0007c58:	01 d0                	add    eax,edx
c0007c5a:	01 c0                	add    eax,eax
c0007c5c:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c61:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c64:	83 e8 01             	sub    eax,0x1
c0007c67:	89 c2                	mov    edx,eax
c0007c69:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c6d:	89 c8                	mov    eax,ecx
c0007c6f:	c1 e0 02             	shl    eax,0x2
c0007c72:	01 c8                	add    eax,ecx
c0007c74:	01 c0                	add    eax,eax
c0007c76:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c7b:	66 89 10             	mov    WORD PTR [eax],dx
c0007c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c82:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c8d:	89 10                	mov    DWORD PTR [eax],edx
c0007c8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c97:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007c9e:	e8 fd 80 01 00       	call   c001fda0 <CUnlockScheduler>
c0007ca3:	eb 07                	jmp    c0007cac <memp_free+0x74>
c0007ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ca8:	90                   	nop
c0007ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0007cac:	83 c4 1c             	add    esp,0x1c
c0007caf:	c3                   	ret    

c0007cb0 <netif_init>:
c0007cb0:	90                   	nop
c0007cb1:	c3                   	ret    
c0007cb2:	66 90                	xchg   ax,ax

c0007cb4 <netif_find>:
c0007cb4:	83 ec 10             	sub    esp,0x10
c0007cb7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007cbc:	75 0a                	jne    c0007cc8 <netif_find+0x14>
c0007cbe:	b8 00 00 00 00       	mov    eax,0x0
c0007cc3:	e9 80 00 00 00       	jmp    c0007d48 <netif_find+0x94>
c0007cc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ccc:	83 c0 02             	add    eax,0x2
c0007ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0007cd1:	83 e8 30             	sub    eax,0x30
c0007cd4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007cd8:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ce1:	eb 59                	jmp    c0007d3c <netif_find+0x88>
c0007ce3:	90                   	nop
c0007ce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ce8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007ceb:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007cf0:	0f b6 c0             	movzx  eax,al
c0007cf3:	39 c2                	cmp    edx,eax
c0007cf5:	75 39                	jne    c0007d30 <netif_find+0x7c>
c0007cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cfb:	8a 10                	mov    dl,BYTE PTR [eax]
c0007cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d01:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007d04:	0f be d2             	movsx  edx,dl
c0007d07:	0f be c0             	movsx  eax,al
c0007d0a:	39 c2                	cmp    edx,eax
c0007d0c:	75 22                	jne    c0007d30 <netif_find+0x7c>
c0007d0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d12:	83 c0 01             	add    eax,0x1
c0007d15:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d1b:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007d1e:	0f be d2             	movsx  edx,dl
c0007d21:	0f be c0             	movsx  eax,al
c0007d24:	39 c2                	cmp    edx,eax
c0007d26:	75 08                	jne    c0007d30 <netif_find+0x7c>
c0007d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d2c:	eb 1a                	jmp    c0007d48 <netif_find+0x94>
c0007d2e:	66 90                	xchg   ax,ax
c0007d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d3a:	66 90                	xchg   ax,ax
c0007d3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007d41:	75 a1                	jne    c0007ce4 <netif_find+0x30>
c0007d43:	b8 00 00 00 00       	mov    eax,0x0
c0007d48:	83 c4 10             	add    esp,0x10
c0007d4b:	c3                   	ret    

c0007d4c <netif_set_ipaddr>:
c0007d4c:	83 ec 1c             	sub    esp,0x1c
c0007d4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d5c:	39 c2                	cmp    edx,eax
c0007d5e:	0f 84 bc 00 00 00    	je     c0007e20 <netif_set_ipaddr+0xd4>
c0007d64:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007d69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d6d:	eb 45                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007d6f:	90                   	nop
c0007d70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d74:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d7d:	39 c2                	cmp    edx,eax
c0007d7f:	75 27                	jne    c0007da8 <netif_set_ipaddr+0x5c>
c0007d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007d88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007d93:	e8 7c 36 00 00       	call   c000b414 <tcp_abort>
c0007d98:	83 c4 10             	add    esp,0x10
c0007d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007da3:	eb 0f                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007da5:	8d 76 00             	lea    esi,[esi+0x0]
c0007da8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007daf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007db3:	90                   	nop
c0007db4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007db9:	75 b5                	jne    c0007d70 <netif_set_ipaddr+0x24>
c0007dbb:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	eb 52                	jmp    c0007e18 <netif_set_ipaddr+0xcc>
c0007dc6:	66 90                	xchg   ax,ax
c0007dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dcc:	85 c0                	test   eax,eax
c0007dce:	74 3c                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0007dd6:	85 c0                	test   eax,eax
c0007dd8:	74 32                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dde:	8b 10                	mov    edx,DWORD PTR [eax]
c0007de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007de7:	39 c2                	cmp    edx,eax
c0007de9:	75 21                	jne    c0007e0c <netif_set_ipaddr+0xc0>
c0007deb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007df0:	74 0a                	je     c0007dfc <netif_set_ipaddr+0xb0>
c0007df2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007df6:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df8:	eb 0a                	jmp    c0007e04 <netif_set_ipaddr+0xb8>
c0007dfa:	66 90                	xchg   ax,ax
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	8d 76 00             	lea    esi,[esi+0x0]
c0007e04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e08:	89 02                	mov    DWORD PTR [edx],eax
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e17:	90                   	nop
c0007e18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e1d:	75 a9                	jne    c0007dc8 <netif_set_ipaddr+0x7c>
c0007e1f:	90                   	nop
c0007e20:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e25:	74 09                	je     c0007e30 <netif_set_ipaddr+0xe4>
c0007e27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e2d:	eb 09                	jmp    c0007e38 <netif_set_ipaddr+0xec>
c0007e2f:	90                   	nop
c0007e30:	b8 00 00 00 00       	mov    eax,0x0
c0007e35:	8d 76 00             	lea    esi,[esi+0x0]
c0007e38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007e3c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007e3f:	90                   	nop
c0007e40:	83 c4 1c             	add    esp,0x1c
c0007e43:	c3                   	ret    

c0007e44 <netif_set_gw>:
c0007e44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e49:	74 09                	je     c0007e54 <netif_set_gw+0x10>
c0007e4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e51:	eb 09                	jmp    c0007e5c <netif_set_gw+0x18>
c0007e53:	90                   	nop
c0007e54:	b8 00 00 00 00       	mov    eax,0x0
c0007e59:	8d 76 00             	lea    esi,[esi+0x0]
c0007e5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e60:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007e63:	90                   	nop
c0007e64:	c3                   	ret    
c0007e65:	8d 76 00             	lea    esi,[esi+0x0]

c0007e68 <netif_set_netmask>:
c0007e68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e6d:	74 09                	je     c0007e78 <netif_set_netmask+0x10>
c0007e6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e75:	eb 09                	jmp    c0007e80 <netif_set_netmask+0x18>
c0007e77:	90                   	nop
c0007e78:	b8 00 00 00 00       	mov    eax,0x0
c0007e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e84:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007e87:	90                   	nop
c0007e88:	c3                   	ret    
c0007e89:	8d 76 00             	lea    esi,[esi+0x0]

c0007e8c <netif_set_addr>:
c0007e8c:	83 ec 0c             	sub    esp,0xc
c0007e8f:	83 ec 08             	sub    esp,0x8
c0007e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e9a:	e8 ad fe ff ff       	call   c0007d4c <netif_set_ipaddr>
c0007e9f:	83 c4 10             	add    esp,0x10
c0007ea2:	83 ec 08             	sub    esp,0x8
c0007ea5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007ea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ead:	e8 b6 ff ff ff       	call   c0007e68 <netif_set_netmask>
c0007eb2:	83 c4 10             	add    esp,0x10
c0007eb5:	83 ec 08             	sub    esp,0x8
c0007eb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ec0:	e8 7f ff ff ff       	call   c0007e44 <netif_set_gw>
c0007ec5:	83 c4 10             	add    esp,0x10
c0007ec8:	90                   	nop
c0007ec9:	83 c4 0c             	add    esp,0xc
c0007ecc:	c3                   	ret    
c0007ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0007ed0 <netif_add>:
c0007ed0:	83 ec 0c             	sub    esp,0xc
c0007ed3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ed8:	75 16                	jne    c0007ef0 <netif_add+0x20>
c0007eda:	83 ec 08             	sub    esp,0x8
c0007edd:	68 d4 fe 02 c0       	push   0xc002fed4
c0007ee2:	68 46 fd 02 c0       	push   0xc002fd46
c0007ee7:	e8 e0 7e 01 00       	call   c001fdcc <CPrintf>
c0007eec:	83 c4 10             	add    esp,0x10
c0007eef:	90                   	nop
c0007ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ef4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f0a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f15:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007f21:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007f24:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007f29:	8d 50 01             	lea    edx,[eax+0x1]
c0007f2c:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007f32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f36:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007f41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f54:	e8 33 ff ff ff       	call   c0007e8c <netif_set_addr>
c0007f59:	83 c4 10             	add    esp,0x10
c0007f5c:	83 ec 0c             	sub    esp,0xc
c0007f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f67:	ff d0                	call   eax
c0007f69:	83 c4 10             	add    esp,0x10
c0007f6c:	0f be c0             	movsx  eax,al
c0007f6f:	85 c0                	test   eax,eax
c0007f71:	74 09                	je     c0007f7c <netif_add+0xac>
c0007f73:	b8 00 00 00 00       	mov    eax,0x0
c0007f78:	eb 1e                	jmp    c0007f98 <netif_add+0xc8>
c0007f7a:	66 90                	xchg   ax,ax
c0007f7c:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f86:	89 10                	mov    DWORD PTR [eax],edx
c0007f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f8c:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f95:	8d 76 00             	lea    esi,[esi+0x0]
c0007f98:	83 c4 0c             	add    esp,0xc
c0007f9b:	c3                   	ret    

c0007f9c <netif_set_default>:
c0007f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fa0:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007fa5:	90                   	nop
c0007fa6:	c3                   	ret    
c0007fa7:	90                   	nop

c0007fa8 <netif_set_up>:
c0007fa8:	83 ec 0c             	sub    esp,0xc
c0007fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007faf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fb2:	0f b6 c0             	movzx  eax,al
c0007fb5:	83 e0 01             	and    eax,0x1
c0007fb8:	75 4a                	jne    c0008004 <netif_set_up+0x5c>
c0007fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fbe:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fc1:	83 c8 01             	or     eax,0x1
c0007fc4:	88 c2                	mov    dl,al
c0007fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fca:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fd1:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fd4:	0f b6 c0             	movzx  eax,al
c0007fd7:	83 e0 10             	and    eax,0x10
c0007fda:	74 28                	je     c0008004 <netif_set_up+0x5c>
c0007fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fe3:	0f b6 c0             	movzx  eax,al
c0007fe6:	83 e0 20             	and    eax,0x20
c0007fe9:	74 19                	je     c0008004 <netif_set_up+0x5c>
c0007feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fef:	83 c0 04             	add    eax,0x4
c0007ff2:	83 ec 08             	sub    esp,0x8
c0007ff5:	50                   	push   eax
c0007ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ffa:	e8 bd a5 00 00       	call   c00125bc <etharp_request>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	66 90                	xchg   ax,ax
c0008004:	90                   	nop
c0008005:	83 c4 0c             	add    esp,0xc
c0008008:	c3                   	ret    
c0008009:	8d 76 00             	lea    esi,[esi+0x0]

c000800c <netif_set_down>:
c000800c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008010:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008013:	0f b6 c0             	movzx  eax,al
c0008016:	83 e0 01             	and    eax,0x1
c0008019:	74 15                	je     c0008030 <netif_set_down+0x24>
c000801b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000801f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008022:	83 e0 fe             	and    eax,0xfffffffe
c0008025:	88 c2                	mov    dl,al
c0008027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802b:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c000802e:	66 90                	xchg   ax,ax
c0008030:	90                   	nop
c0008031:	c3                   	ret    
c0008032:	66 90                	xchg   ax,ax

c0008034 <netif_remove>:
c0008034:	83 ec 10             	sub    esp,0x10
c0008037:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000803c:	0f 84 92 00 00 00    	je     c00080d4 <netif_remove+0xa0>
c0008042:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008046:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008049:	83 e0 01             	and    eax,0x1
c000804c:	0f b6 c0             	movzx  eax,al
c000804f:	85 c0                	test   eax,eax
c0008051:	74 0d                	je     c0008060 <netif_remove+0x2c>
c0008053:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008057:	e8 b0 ff ff ff       	call   c000800c <netif_set_down>
c000805c:	83 c4 04             	add    esp,0x4
c000805f:	90                   	nop
c0008060:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0008065:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0008069:	75 0d                	jne    c0008078 <netif_remove+0x44>
c000806b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000806f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008071:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0008076:	eb 44                	jmp    c00080bc <netif_remove+0x88>
c0008078:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c000807d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008081:	eb 29                	jmp    c00080ac <netif_remove+0x78>
c0008083:	90                   	nop
c0008084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008088:	8b 00                	mov    eax,DWORD PTR [eax]
c000808a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000808e:	75 10                	jne    c00080a0 <netif_remove+0x6c>
c0008090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008094:	8b 10                	mov    edx,DWORD PTR [eax]
c0008096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000809a:	89 10                	mov    DWORD PTR [eax],edx
c000809c:	eb 16                	jmp    c00080b4 <netif_remove+0x80>
c000809e:	66 90                	xchg   ax,ax
c00080a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00080a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080aa:	66 90                	xchg   ax,ax
c00080ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b1:	75 d1                	jne    c0008084 <netif_remove+0x50>
c00080b3:	90                   	nop
c00080b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b9:	74 1d                	je     c00080d8 <netif_remove+0xa4>
c00080bb:	90                   	nop
c00080bc:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00080c1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080c5:	75 15                	jne    c00080dc <netif_remove+0xa8>
c00080c7:	6a 00                	push   0x0
c00080c9:	e8 ce fe ff ff       	call   c0007f9c <netif_set_default>
c00080ce:	83 c4 04             	add    esp,0x4
c00080d1:	eb 09                	jmp    c00080dc <netif_remove+0xa8>
c00080d3:	90                   	nop
c00080d4:	90                   	nop
c00080d5:	eb 05                	jmp    c00080dc <netif_remove+0xa8>
c00080d7:	90                   	nop
c00080d8:	90                   	nop
c00080d9:	8d 76 00             	lea    esi,[esi+0x0]
c00080dc:	83 c4 10             	add    esp,0x10
c00080df:	c3                   	ret    

c00080e0 <netif_set_link_up>:
c00080e0:	83 ec 0c             	sub    esp,0xc
c00080e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080ea:	0f b6 c0             	movzx  eax,al
c00080ed:	83 e0 10             	and    eax,0x10
c00080f0:	75 4a                	jne    c000813c <netif_set_link_up+0x5c>
c00080f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f6:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080f9:	83 c8 10             	or     eax,0x10
c00080fc:	88 c2                	mov    dl,al
c00080fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008102:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008109:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000810c:	0f b6 c0             	movzx  eax,al
c000810f:	83 e0 01             	and    eax,0x1
c0008112:	74 28                	je     c000813c <netif_set_link_up+0x5c>
c0008114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008118:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000811b:	0f b6 c0             	movzx  eax,al
c000811e:	83 e0 20             	and    eax,0x20
c0008121:	74 19                	je     c000813c <netif_set_link_up+0x5c>
c0008123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008127:	83 c0 04             	add    eax,0x4
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	50                   	push   eax
c000812e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008132:	e8 85 a4 00 00       	call   c00125bc <etharp_request>
c0008137:	83 c4 10             	add    esp,0x10
c000813a:	66 90                	xchg   ax,ax
c000813c:	90                   	nop
c000813d:	83 c4 0c             	add    esp,0xc
c0008140:	c3                   	ret    
c0008141:	8d 76 00             	lea    esi,[esi+0x0]

c0008144 <netif_set_link_down>:
c0008144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008148:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000814b:	0f b6 c0             	movzx  eax,al
c000814e:	83 e0 10             	and    eax,0x10
c0008151:	74 15                	je     c0008168 <netif_set_link_down+0x24>
c0008153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008157:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000815a:	83 e0 ef             	and    eax,0xffffffef
c000815d:	88 c2                	mov    dl,al
c000815f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008163:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008166:	66 90                	xchg   ax,ax
c0008168:	90                   	nop
c0008169:	c3                   	ret    
c000816a:	66 90                	xchg   ax,ax

c000816c <pbuf_free_ooseq>:
c000816c:	83 ec 1c             	sub    esp,0x1c
c000816f:	e8 48 7c 01 00       	call   c001fdbc <CLockScheduler>
c0008174:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c000817b:	e8 20 7c 01 00       	call   c001fda0 <CUnlockScheduler>
c0008180:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0008185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008189:	eb 41                	jmp    c00081cc <pbuf_free_ooseq+0x60>
c000818b:	90                   	nop
c000818c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008190:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008196:	85 c0                	test   eax,eax
c0008198:	74 26                	je     c00081c0 <pbuf_free_ooseq+0x54>
c000819a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000819e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081a4:	83 ec 0c             	sub    esp,0xc
c00081a7:	50                   	push   eax
c00081a8:	e8 03 20 00 00       	call   c000a1b0 <tcp_segs_free>
c00081ad:	83 c4 10             	add    esp,0x10
c00081b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081b4:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c00081be:	eb 14                	jmp    c00081d4 <pbuf_free_ooseq+0x68>
c00081c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00081c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081cb:	90                   	nop
c00081cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00081d1:	75 b9                	jne    c000818c <pbuf_free_ooseq+0x20>
c00081d3:	90                   	nop
c00081d4:	83 c4 1c             	add    esp,0x1c
c00081d7:	c3                   	ret    

c00081d8 <pbuf_pool_is_empty>:
c00081d8:	83 ec 1c             	sub    esp,0x1c
c00081db:	e8 dc 7b 01 00       	call   c001fdbc <CLockScheduler>
c00081e0:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c00081e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00081e9:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c00081f0:	e8 ab 7b 01 00       	call   c001fda0 <CUnlockScheduler>
c00081f5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00081fa:	85 c0                	test   eax,eax
c00081fc:	75 2e                	jne    c000822c <pbuf_pool_is_empty+0x54>
c00081fe:	83 ec 04             	sub    esp,0x4
c0008201:	6a 00                	push   0x0
c0008203:	6a 00                	push   0x0
c0008205:	68 6c 81 00 c0       	push   0xc000816c
c000820a:	e8 45 8a ff ff       	call   c0000c54 <tcpip_callback_with_block>
c000820f:	83 c4 10             	add    esp,0x10
c0008212:	0f be c0             	movsx  eax,al
c0008215:	85 c0                	test   eax,eax
c0008217:	74 13                	je     c000822c <pbuf_pool_is_empty+0x54>
c0008219:	e8 9e 7b 01 00       	call   c001fdbc <CLockScheduler>
c000821e:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0008225:	e8 76 7b 01 00       	call   c001fda0 <CUnlockScheduler>
c000822a:	66 90                	xchg   ax,ax
c000822c:	90                   	nop
c000822d:	83 c4 1c             	add    esp,0x1c
c0008230:	c3                   	ret    
c0008231:	8d 76 00             	lea    esi,[esi+0x0]

c0008234 <pbuf_alloced_custom>:
c0008234:	83 ec 2c             	sub    esp,0x2c
c0008237:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000823b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000823f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008244:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008249:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0008250:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008255:	74 29                	je     c0008280 <pbuf_alloced_custom+0x4c>
c0008257:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000825c:	74 12                	je     c0008270 <pbuf_alloced_custom+0x3c>
c000825e:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0008263:	74 2b                	je     c0008290 <pbuf_alloced_custom+0x5c>
c0008265:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c000826a:	74 54                	je     c00082c0 <pbuf_alloced_custom+0x8c>
c000826c:	eb 32                	jmp    c00082a0 <pbuf_alloced_custom+0x6c>
c000826e:	66 90                	xchg   ax,ax
c0008270:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008275:	83 c0 14             	add    eax,0x14
c0008278:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000827d:	8d 76 00             	lea    esi,[esi+0x0]
c0008280:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008285:	83 c0 14             	add    eax,0x14
c0008288:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000828d:	8d 76 00             	lea    esi,[esi+0x0]
c0008290:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008295:	83 c0 0e             	add    eax,0xe
c0008298:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000829d:	eb 25                	jmp    c00082c4 <pbuf_alloced_custom+0x90>
c000829f:	90                   	nop
c00082a0:	83 ec 08             	sub    esp,0x8
c00082a3:	68 ec fe 02 c0       	push   0xc002feec
c00082a8:	68 46 fd 02 c0       	push   0xc002fd46
c00082ad:	e8 1a 7b 01 00       	call   c001fdcc <CPrintf>
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	b8 00 00 00 00       	mov    eax,0x0
c00082ba:	e9 95 00 00 00       	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082bf:	90                   	nop
c00082c0:	90                   	nop
c00082c1:	8d 76 00             	lea    esi,[esi+0x0]
c00082c4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082c9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00082ce:	01 c2                	add    edx,eax
c00082d0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00082d5:	39 c2                	cmp    edx,eax
c00082d7:	7d 07                	jge    c00082e0 <pbuf_alloced_custom+0xac>
c00082d9:	b8 00 00 00 00       	mov    eax,0x0
c00082de:	eb 74                	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00082e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00082ea:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082ef:	74 17                	je     c0008308 <pbuf_alloced_custom+0xd4>
c00082f1:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082fa:	01 c2                	add    edx,eax
c00082fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008300:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008303:	eb 0f                	jmp    c0008314 <pbuf_alloced_custom+0xe0>
c0008305:	8d 76 00             	lea    esi,[esi+0x0]
c0008308:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000830c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008313:	90                   	nop
c0008314:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008318:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c000831c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008324:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008328:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000832c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000832f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008333:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008337:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000833b:	88 c2                	mov    dl,al
c000833d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008341:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008348:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000834e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008352:	66 90                	xchg   ax,ax
c0008354:	83 c4 2c             	add    esp,0x2c
c0008357:	c3                   	ret    

c0008358 <pbuf_header>:
c0008358:	83 ec 2c             	sub    esp,0x2c
c000835b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000835f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008364:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008369:	75 15                	jne    c0008380 <pbuf_header+0x28>
c000836b:	83 ec 08             	sub    esp,0x8
c000836e:	68 76 01 03 c0       	push   0xc0030176
c0008373:	68 46 fd 02 c0       	push   0xc002fd46
c0008378:	e8 4f 7a 01 00       	call   c001fdcc <CPrintf>
c000837d:	83 c4 10             	add    esp,0x10
c0008380:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008385:	85 c0                	test   eax,eax
c0008387:	74 07                	je     c0008390 <pbuf_header+0x38>
c0008389:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000838e:	75 08                	jne    c0008398 <pbuf_header+0x40>
c0008390:	b0 00                	mov    al,0x0
c0008392:	e9 59 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008397:	90                   	nop
c0008398:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000839d:	85 c0                	test   eax,eax
c000839f:	79 3b                	jns    c00083dc <pbuf_header+0x84>
c00083a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a5:	f7 d8                	neg    eax
c00083a7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083b0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00083b4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00083b9:	0f b7 c0             	movzx  eax,ax
c00083bc:	39 c2                	cmp    edx,eax
c00083be:	76 28                	jbe    c00083e8 <pbuf_header+0x90>
c00083c0:	83 ec 08             	sub    esp,0x8
c00083c3:	68 c7 00 03 c0       	push   0xc00300c7
c00083c8:	68 46 fd 02 c0       	push   0xc002fd46
c00083cd:	e8 fa 79 01 00       	call   c001fdcc <CPrintf>
c00083d2:	83 c4 10             	add    esp,0x10
c00083d5:	b0 01                	mov    al,0x1
c00083d7:	e9 14 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c00083dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083e5:	8d 76 00             	lea    esi,[esi+0x0]
c00083e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083ef:	0f b6 c0             	movzx  eax,al
c00083f2:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00083f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00083fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008402:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008407:	85 c0                	test   eax,eax
c0008409:	74 0d                	je     c0008418 <pbuf_header+0xc0>
c000840b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008410:	83 f8 03             	cmp    eax,0x3
c0008413:	75 3f                	jne    c0008454 <pbuf_header+0xfc>
c0008415:	8d 76 00             	lea    esi,[esi+0x0]
c0008418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000841c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000841f:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008424:	f7 da                	neg    edx
c0008426:	01 c2                	add    edx,eax
c0008428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000842c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000842f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008436:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000843a:	83 c2 10             	add    edx,0x10
c000843d:	39 d0                	cmp    eax,edx
c000843f:	73 7f                	jae    c00084c0 <pbuf_header+0x168>
c0008441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008449:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000844c:	b0 01                	mov    al,0x1
c000844e:	e9 9d 00 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008453:	90                   	nop
c0008454:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008459:	83 f8 02             	cmp    eax,0x2
c000845c:	74 0a                	je     c0008468 <pbuf_header+0x110>
c000845e:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008463:	83 f8 01             	cmp    eax,0x1
c0008466:	75 3c                	jne    c00084a4 <pbuf_header+0x14c>
c0008468:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000846d:	85 c0                	test   eax,eax
c000846f:	79 2f                	jns    c00084a0 <pbuf_header+0x148>
c0008471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008475:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008479:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000847e:	0f b7 c0             	movzx  eax,ax
c0008481:	39 c2                	cmp    edx,eax
c0008483:	77 1b                	ja     c00084a0 <pbuf_header+0x148>
c0008485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000848c:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008491:	f7 da                	neg    edx
c0008493:	01 c2                	add    edx,eax
c0008495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000849c:	eb 22                	jmp    c00084c0 <pbuf_header+0x168>
c000849e:	66 90                	xchg   ax,ax
c00084a0:	b0 01                	mov    al,0x1
c00084a2:	eb 4c                	jmp    c00084f0 <pbuf_header+0x198>
c00084a4:	83 ec 08             	sub    esp,0x8
c00084a7:	68 e5 00 03 c0       	push   0xc00300e5
c00084ac:	68 46 fd 02 c0       	push   0xc002fd46
c00084b1:	e8 16 79 01 00       	call   c001fdcc <CPrintf>
c00084b6:	83 c4 10             	add    esp,0x10
c00084b9:	b0 01                	mov    al,0x1
c00084bb:	eb 33                	jmp    c00084f0 <pbuf_header+0x198>
c00084bd:	8d 76 00             	lea    esi,[esi+0x0]
c00084c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084c4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00084c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084cc:	01 d0                	add    eax,edx
c00084ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084d2:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00084d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084da:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00084dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084e1:	01 d0                	add    eax,edx
c00084e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00084eb:	b0 00                	mov    al,0x0
c00084ed:	8d 76 00             	lea    esi,[esi+0x0]
c00084f0:	83 c4 2c             	add    esp,0x2c
c00084f3:	c3                   	ret    

c00084f4 <pbuf_free>:
c00084f4:	83 ec 1c             	sub    esp,0x1c
c00084f7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00084fc:	75 26                	jne    c0008524 <pbuf_free+0x30>
c00084fe:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008503:	75 17                	jne    c000851c <pbuf_free+0x28>
c0008505:	83 ec 08             	sub    esp,0x8
c0008508:	68 76 01 03 c0       	push   0xc0030176
c000850d:	68 46 fd 02 c0       	push   0xc002fd46
c0008512:	e8 b5 78 01 00       	call   c001fdcc <CPrintf>
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	66 90                	xchg   ax,ax
c000851c:	b0 00                	mov    al,0x0
c000851e:	e9 a5 01 00 00       	jmp    c00086c8 <pbuf_free+0x1d4>
c0008523:	90                   	nop
c0008524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008528:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000852b:	0f b6 c0             	movzx  eax,al
c000852e:	85 c0                	test   eax,eax
c0008530:	74 42                	je     c0008574 <pbuf_free+0x80>
c0008532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008536:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008539:	0f b6 c0             	movzx  eax,al
c000853c:	83 f8 01             	cmp    eax,0x1
c000853f:	74 33                	je     c0008574 <pbuf_free+0x80>
c0008541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008545:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008548:	0f b6 c0             	movzx  eax,al
c000854b:	83 f8 02             	cmp    eax,0x2
c000854e:	74 24                	je     c0008574 <pbuf_free+0x80>
c0008550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008554:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008557:	0f b6 c0             	movzx  eax,al
c000855a:	83 f8 03             	cmp    eax,0x3
c000855d:	74 15                	je     c0008574 <pbuf_free+0x80>
c000855f:	83 ec 08             	sub    esp,0x8
c0008562:	68 f3 00 03 c0       	push   0xc00300f3
c0008567:	68 46 fd 02 c0       	push   0xc002fd46
c000856c:	e8 5b 78 01 00       	call   c001fdcc <CPrintf>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008579:	e9 3a 01 00 00       	jmp    c00086b8 <pbuf_free+0x1c4>
c000857e:	66 90                	xchg   ax,ax
c0008580:	e8 37 78 01 00       	call   c001fdbc <CLockScheduler>
c0008585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008589:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000858d:	0f b7 c0             	movzx  eax,ax
c0008590:	85 c0                	test   eax,eax
c0008592:	75 18                	jne    c00085ac <pbuf_free+0xb8>
c0008594:	83 ec 08             	sub    esp,0x8
c0008597:	68 08 01 03 c0       	push   0xc0030108
c000859c:	68 46 fd 02 c0       	push   0xc002fd46
c00085a1:	e8 26 78 01 00       	call   c001fdcc <CPrintf>
c00085a6:	83 c4 10             	add    esp,0x10
c00085a9:	8d 76 00             	lea    esi,[esi+0x0]
c00085ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085b0:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085b4:	83 e8 01             	sub    eax,0x1
c00085b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085bb:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c00085bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085c3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00085cc:	e8 cf 77 01 00       	call   c001fda0 <CUnlockScheduler>
c00085d1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085d6:	85 c0                	test   eax,eax
c00085d8:	0f 85 d2 00 00 00    	jne    c00086b0 <pbuf_free+0x1bc>
c00085de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00085e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00085ef:	0f b6 c0             	movzx  eax,al
c00085f2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085fb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00085fe:	0f b6 c0             	movzx  eax,al
c0008601:	83 e0 02             	and    eax,0x2
c0008604:	74 3a                	je     c0008640 <pbuf_free+0x14c>
c0008606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860a:	89 04 24             	mov    DWORD PTR [esp],eax
c000860d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008610:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008613:	85 c0                	test   eax,eax
c0008615:	75 15                	jne    c000862c <pbuf_free+0x138>
c0008617:	83 ec 08             	sub    esp,0x8
c000861a:	68 10 ff 02 c0       	push   0xc002ff10
c000861f:	68 46 fd 02 c0       	push   0xc002fd46
c0008624:	e8 a3 77 01 00       	call   c001fdcc <CPrintf>
c0008629:	83 c4 10             	add    esp,0x10
c000862c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000862f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008632:	83 ec 0c             	sub    esp,0xc
c0008635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008639:	ff d0                	call   eax
c000863b:	83 c4 10             	add    esp,0x10
c000863e:	eb 58                	jmp    c0008698 <pbuf_free+0x1a4>
c0008640:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008645:	83 f8 03             	cmp    eax,0x3
c0008648:	75 16                	jne    c0008660 <pbuf_free+0x16c>
c000864a:	83 ec 08             	sub    esp,0x8
c000864d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008651:	6a 0d                	push   0xd
c0008653:	e8 e0 f5 ff ff       	call   c0007c38 <memp_free>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	eb 3b                	jmp    c0008698 <pbuf_free+0x1a4>
c000865d:	8d 76 00             	lea    esi,[esi+0x0]
c0008660:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008665:	83 f8 01             	cmp    eax,0x1
c0008668:	74 0a                	je     c0008674 <pbuf_free+0x180>
c000866a:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000866f:	83 f8 02             	cmp    eax,0x2
c0008672:	75 14                	jne    c0008688 <pbuf_free+0x194>
c0008674:	83 ec 08             	sub    esp,0x8
c0008677:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000867b:	6a 0c                	push   0xc
c000867d:	e8 b6 f5 ff ff       	call   c0007c38 <memp_free>
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	eb 11                	jmp    c0008698 <pbuf_free+0x1a4>
c0008687:	90                   	nop
c0008688:	83 ec 0c             	sub    esp,0xc
c000868b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000868f:	e8 80 eb ff ff       	call   c0007214 <mem_free>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	90                   	nop
c0008698:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000869c:	83 c0 01             	add    eax,0x1
c000869f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00086a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086ab:	eb 0b                	jmp    c00086b8 <pbuf_free+0x1c4>
c00086ad:	8d 76 00             	lea    esi,[esi+0x0]
c00086b0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00086b8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00086bd:	0f 85 bd fe ff ff    	jne    c0008580 <pbuf_free+0x8c>
c00086c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086c7:	90                   	nop
c00086c8:	83 c4 1c             	add    esp,0x1c
c00086cb:	c3                   	ret    

c00086cc <pbuf_alloc>:
c00086cc:	83 ec 3c             	sub    esp,0x3c
c00086cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00086d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00086d8:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00086df:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c00086e4:	74 2a                	je     c0008710 <pbuf_alloc+0x44>
c00086e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00086eb:	74 13                	je     c0008700 <pbuf_alloc+0x34>
c00086ed:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c00086f2:	74 2c                	je     c0008720 <pbuf_alloc+0x54>
c00086f4:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00086f9:	74 55                	je     c0008750 <pbuf_alloc+0x84>
c00086fb:	eb 33                	jmp    c0008730 <pbuf_alloc+0x64>
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]
c0008700:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008705:	83 c0 14             	add    eax,0x14
c0008708:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000870d:	8d 76 00             	lea    esi,[esi+0x0]
c0008710:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008715:	83 c0 14             	add    eax,0x14
c0008718:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000871d:	8d 76 00             	lea    esi,[esi+0x0]
c0008720:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008725:	83 c0 0e             	add    eax,0xe
c0008728:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000872d:	eb 25                	jmp    c0008754 <pbuf_alloc+0x88>
c000872f:	90                   	nop
c0008730:	83 ec 08             	sub    esp,0x8
c0008733:	68 1e 01 03 c0       	push   0xc003011e
c0008738:	68 46 fd 02 c0       	push   0xc002fd46
c000873d:	e8 8a 76 01 00       	call   c001fdcc <CPrintf>
c0008742:	83 c4 10             	add    esp,0x10
c0008745:	b8 00 00 00 00       	mov    eax,0x0
c000874a:	e9 71 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000874f:	90                   	nop
c0008750:	90                   	nop
c0008751:	8d 76 00             	lea    esi,[esi+0x0]
c0008754:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c0008759:	77 11                	ja     c000876c <pbuf_alloc+0xa0>
c000875b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008760:	0f 85 c6 02 00 00    	jne    c0008a2c <pbuf_alloc+0x360>
c0008766:	e9 41 02 00 00       	jmp    c00089ac <pbuf_alloc+0x2e0>
c000876b:	90                   	nop
c000876c:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008771:	0f 85 15 03 00 00    	jne    c0008a8c <pbuf_alloc+0x3c0>
c0008777:	83 ec 0c             	sub    esp,0xc
c000877a:	6a 0d                	push   0xd
c000877c:	e8 8b f3 ff ff       	call   c0007b0c <memp_malloc>
c0008781:	83 c4 10             	add    esp,0x10
c0008784:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008788:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000878d:	75 11                	jne    c00087a0 <pbuf_alloc+0xd4>
c000878f:	e8 44 fa ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c0008794:	b8 00 00 00 00       	mov    eax,0x0
c0008799:	e9 22 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000879e:	66 90                	xchg   ax,ax
c00087a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087a4:	88 c2                	mov    dl,al
c00087a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087aa:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087b7:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087bc:	8d 50 10             	lea    edx,[eax+0x10]
c00087bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c3:	01 c2                	add    edx,eax
c00087c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00087d8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087dd:	ba 4e 02 00 00       	mov    edx,0x24e
c00087e2:	29 c2                	sub    edx,eax
c00087e4:	89 d0                	mov    eax,edx
c00087e6:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00087eb:	39 d0                	cmp    eax,edx
c00087ed:	7e 05                	jle    c00087f4 <pbuf_alloc+0x128>
c00087ef:	89 d0                	mov    eax,edx
c00087f1:	8d 76 00             	lea    esi,[esi+0x0]
c00087f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087f8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008800:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008803:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008807:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000880b:	0f b7 c0             	movzx  eax,ax
c000880e:	01 c2                	add    edx,eax
c0008810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008814:	05 5e 02 00 00       	add    eax,0x25e
c0008819:	39 c2                	cmp    edx,eax
c000881b:	76 17                	jbe    c0008834 <pbuf_alloc+0x168>
c000881d:	83 ec 08             	sub    esp,0x8
c0008820:	68 34 ff 02 c0       	push   0xc002ff34
c0008825:	68 46 fd 02 c0       	push   0xc002fd46
c000882a:	e8 9d 75 01 00       	call   c001fdcc <CPrintf>
c000882f:	83 c4 10             	add    esp,0x10
c0008832:	66 90                	xchg   ax,ax
c0008834:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008839:	ba 4e 02 00 00       	mov    edx,0x24e
c000883e:	29 c2                	sub    edx,eax
c0008840:	89 d0                	mov    eax,edx
c0008842:	85 c0                	test   eax,eax
c0008844:	7f 16                	jg     c000885c <pbuf_alloc+0x190>
c0008846:	83 ec 08             	sub    esp,0x8
c0008849:	68 68 ff 02 c0       	push   0xc002ff68
c000884e:	68 46 fd 02 c0       	push   0xc002fd46
c0008853:	e8 74 75 01 00       	call   c001fdcc <CPrintf>
c0008858:	83 c4 10             	add    esp,0x10
c000885b:	90                   	nop
c000885c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008860:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000886e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008873:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008877:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000887b:	0f b7 c0             	movzx  eax,ax
c000887e:	29 c2                	sub    edx,eax
c0008880:	89 d0                	mov    eax,edx
c0008882:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008886:	e9 11 01 00 00       	jmp    c000899c <pbuf_alloc+0x2d0>
c000888b:	90                   	nop
c000888c:	83 ec 0c             	sub    esp,0xc
c000888f:	6a 0d                	push   0xd
c0008891:	e8 76 f2 ff ff       	call   c0007b0c <memp_malloc>
c0008896:	83 c4 10             	add    esp,0x10
c0008899:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000889d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00088a2:	75 20                	jne    c00088c4 <pbuf_alloc+0x1f8>
c00088a4:	e8 2f f9 ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c00088a9:	83 ec 0c             	sub    esp,0xc
c00088ac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00088b0:	e8 3f fc ff ff       	call   c00084f4 <pbuf_free>
c00088b5:	83 c4 10             	add    esp,0x10
c00088b8:	b8 00 00 00 00       	mov    eax,0x0
c00088bd:	e9 fe 01 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00088c2:	66 90                	xchg   ax,ax
c00088c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088c8:	88 c2                	mov    dl,al
c00088ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088ce:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088d5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00088d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00088e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00088eb:	89 10                	mov    DWORD PTR [eax],edx
c00088ed:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00088f5:	7e 15                	jle    c000890c <pbuf_alloc+0x240>
c00088f7:	83 ec 08             	sub    esp,0x8
c00088fa:	68 39 01 03 c0       	push   0xc0030139
c00088ff:	68 46 fd 02 c0       	push   0xc002fd46
c0008904:	e8 c3 74 01 00       	call   c001fdcc <CPrintf>
c0008909:	83 c4 10             	add    esp,0x10
c000890c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008914:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000891c:	0f b7 d0             	movzx  edx,ax
c000891f:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008925:	76 05                	jbe    c000892c <pbuf_alloc+0x260>
c0008927:	b8 4e 02 00 00       	mov    eax,0x24e
c000892c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008930:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008938:	8d 50 10             	lea    edx,[eax+0x10]
c000893b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000893f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008946:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008949:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000894d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008951:	0f b7 c0             	movzx  eax,ax
c0008954:	01 c2                	add    edx,eax
c0008956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000895a:	05 5e 02 00 00       	add    eax,0x25e
c000895f:	39 c2                	cmp    edx,eax
c0008961:	76 15                	jbe    c0008978 <pbuf_alloc+0x2ac>
c0008963:	83 ec 08             	sub    esp,0x8
c0008966:	68 34 ff 02 c0       	push   0xc002ff34
c000896b:	68 46 fd 02 c0       	push   0xc002fd46
c0008970:	e8 57 74 01 00       	call   c001fdcc <CPrintf>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008986:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000898a:	0f b7 c0             	movzx  eax,ax
c000898d:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008995:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008999:	8d 76 00             	lea    esi,[esi+0x0]
c000899c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00089a1:	0f 8f e5 fe ff ff    	jg     c000888c <pbuf_alloc+0x1c0>
c00089a7:	e9 fc 00 00 00       	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c00089ac:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c00089b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089b5:	01 d0                	add    eax,edx
c00089b7:	83 c0 10             	add    eax,0x10
c00089ba:	0f b7 c0             	movzx  eax,ax
c00089bd:	83 ec 0c             	sub    esp,0xc
c00089c0:	50                   	push   eax
c00089c1:	e8 82 ec ff ff       	call   c0007648 <mem_malloc>
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00089cd:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00089d2:	75 0c                	jne    c00089e0 <pbuf_alloc+0x314>
c00089d4:	b8 00 00 00 00       	mov    eax,0x0
c00089d9:	e9 e2 00 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00089de:	66 90                	xchg   ax,ax
c00089e0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00089e5:	8d 50 10             	lea    edx,[eax+0x10]
c00089e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089ec:	01 c2                	add    edx,eax
c00089ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00089f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00089f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089fd:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a0c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a1e:	88 c2                	mov    dl,al
c0008a20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a24:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a27:	eb 7f                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a29:	8d 76 00             	lea    esi,[esi+0x0]
c0008a2c:	83 ec 0c             	sub    esp,0xc
c0008a2f:	6a 0c                	push   0xc
c0008a31:	e8 d6 f0 ff ff       	call   c0007b0c <memp_malloc>
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008a3d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008a42:	75 08                	jne    c0008a4c <pbuf_alloc+0x380>
c0008a44:	b8 00 00 00 00       	mov    eax,0x0
c0008a49:	eb 75                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008a4b:	90                   	nop
c0008a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a5f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a6e:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a7c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a80:	88 c2                	mov    dl,al
c0008a82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a86:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a89:	eb 1d                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a8b:	90                   	nop
c0008a8c:	83 ec 08             	sub    esp,0x8
c0008a8f:	68 4d 01 03 c0       	push   0xc003014d
c0008a94:	68 46 fd 02 c0       	push   0xc002fd46
c0008a99:	e8 2e 73 01 00       	call   c001fdcc <CPrintf>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	b8 00 00 00 00       	mov    eax,0x0
c0008aa6:	eb 18                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008aa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008aac:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008ab2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ab6:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008aba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008abe:	66 90                	xchg   ax,ax
c0008ac0:	83 c4 3c             	add    esp,0x3c
c0008ac3:	c3                   	ret    

c0008ac4 <pbuf_realloc>:
c0008ac4:	83 ec 2c             	sub    esp,0x2c
c0008ac7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008acb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008ad0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008ad5:	75 15                	jne    c0008aec <pbuf_realloc+0x28>
c0008ad7:	83 ec 08             	sub    esp,0x8
c0008ada:	68 68 01 03 c0       	push   0xc0030168
c0008adf:	68 46 fd 02 c0       	push   0xc002fd46
c0008ae4:	e8 e3 72 01 00       	call   c001fdcc <CPrintf>
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008af3:	0f b6 c0             	movzx  eax,al
c0008af6:	83 f8 03             	cmp    eax,0x3
c0008af9:	74 41                	je     c0008b3c <pbuf_realloc+0x78>
c0008afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008aff:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b02:	0f b6 c0             	movzx  eax,al
c0008b05:	83 f8 01             	cmp    eax,0x1
c0008b08:	74 32                	je     c0008b3c <pbuf_realloc+0x78>
c0008b0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b11:	0f b6 c0             	movzx  eax,al
c0008b14:	85 c0                	test   eax,eax
c0008b16:	74 24                	je     c0008b3c <pbuf_realloc+0x78>
c0008b18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b1c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b1f:	0f b6 c0             	movzx  eax,al
c0008b22:	83 f8 02             	cmp    eax,0x2
c0008b25:	74 15                	je     c0008b3c <pbuf_realloc+0x78>
c0008b27:	83 ec 08             	sub    esp,0x8
c0008b2a:	68 80 01 03 c0       	push   0xc0030180
c0008b2f:	68 46 fd 02 c0       	push   0xc002fd46
c0008b34:	e8 93 72 01 00       	call   c001fdcc <CPrintf>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b43:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b48:	0f b7 c0             	movzx  eax,ax
c0008b4b:	39 c2                	cmp    edx,eax
c0008b4d:	0f 83 6d 01 00 00    	jae    c0008cc0 <pbuf_realloc+0x1fc>
c0008b53:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b5f:	0f b7 c0             	movzx  eax,ax
c0008b62:	29 c2                	sub    edx,eax
c0008b64:	89 d0                	mov    eax,edx
c0008b66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b6e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b7b:	eb 77                	jmp    c0008bf4 <pbuf_realloc+0x130>
c0008b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b84:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b88:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008b8d:	89 d1                	mov    ecx,edx
c0008b8f:	29 c1                	sub    ecx,eax
c0008b91:	89 c8                	mov    eax,ecx
c0008b93:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b98:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008ba0:	7e 16                	jle    c0008bb8 <pbuf_realloc+0xf4>
c0008ba2:	83 ec 08             	sub    esp,0x8
c0008ba5:	68 9b 01 03 c0       	push   0xc003019b
c0008baa:	68 46 fd 02 c0       	push   0xc002fd46
c0008baf:	e8 18 72 01 00       	call   c001fdcc <CPrintf>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	90                   	nop
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008bc3:	01 d0                	add    eax,edx
c0008bc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008bc9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008bcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bd7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008bdc:	75 16                	jne    c0008bf4 <pbuf_realloc+0x130>
c0008bde:	83 ec 08             	sub    esp,0x8
c0008be1:	68 ac 01 03 c0       	push   0xc00301ac
c0008be6:	68 46 fd 02 c0       	push   0xc002fd46
c0008beb:	e8 dc 71 01 00       	call   c001fdcc <CPrintf>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	90                   	nop
c0008bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bfc:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c01:	0f b7 c0             	movzx  eax,ax
c0008c04:	39 c2                	cmp    edx,eax
c0008c06:	0f 87 74 ff ff ff    	ja     c0008b80 <pbuf_realloc+0xbc>
c0008c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c10:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008c13:	0f b6 c0             	movzx  eax,al
c0008c16:	85 c0                	test   eax,eax
c0008c18:	75 5e                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c22:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c27:	0f b7 c0             	movzx  eax,ax
c0008c2a:	39 c2                	cmp    edx,eax
c0008c2c:	74 4a                	je     c0008c78 <pbuf_realloc+0x1b4>
c0008c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c35:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008c39:	89 c2                	mov    edx,eax
c0008c3b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c40:	01 d0                	add    eax,edx
c0008c42:	0f b7 c0             	movzx  eax,ax
c0008c45:	83 ec 08             	sub    esp,0x8
c0008c48:	50                   	push   eax
c0008c49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c4d:	e8 e6 e6 ff ff       	call   c0007338 <mem_trim>
c0008c52:	83 c4 10             	add    esp,0x10
c0008c55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c59:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c5e:	75 18                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c60:	83 ec 08             	sub    esp,0x8
c0008c63:	68 c4 01 03 c0       	push   0xc00301c4
c0008c68:	68 46 fd 02 c0       	push   0xc002fd46
c0008c6d:	e8 5a 71 01 00       	call   c001fdcc <CPrintf>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	8d 76 00             	lea    esi,[esi+0x0]
c0008c78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c7c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c81:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008c85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c89:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c91:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c9b:	85 c0                	test   eax,eax
c0008c9d:	74 15                	je     c0008cb4 <pbuf_realloc+0x1f0>
c0008c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ca5:	83 ec 0c             	sub    esp,0xc
c0008ca8:	50                   	push   eax
c0008ca9:	e8 46 f8 ff ff       	call   c00084f4 <pbuf_free>
c0008cae:	83 c4 10             	add    esp,0x10
c0008cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008cbe:	eb 04                	jmp    c0008cc4 <pbuf_realloc+0x200>
c0008cc0:	90                   	nop
c0008cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cc4:	83 c4 2c             	add    esp,0x2c
c0008cc7:	c3                   	ret    

c0008cc8 <pbuf_clen>:
c0008cc8:	83 ec 10             	sub    esp,0x10
c0008ccb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008cd0:	eb 1a                	jmp    c0008cec <pbuf_clen+0x24>
c0008cd2:	66 90                	xchg   ax,ax
c0008cd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cd8:	83 c0 01             	add    eax,0x1
c0008cdb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008cf1:	75 e1                	jne    c0008cd4 <pbuf_clen+0xc>
c0008cf3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cf7:	83 c4 10             	add    esp,0x10
c0008cfa:	c3                   	ret    
c0008cfb:	90                   	nop

c0008cfc <pbuf_ref>:
c0008cfc:	83 ec 0c             	sub    esp,0xc
c0008cff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008d04:	74 1e                	je     c0008d24 <pbuf_ref+0x28>
c0008d06:	e8 b1 70 01 00       	call   c001fdbc <CLockScheduler>
c0008d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008d13:	83 c0 01             	add    eax,0x1
c0008d16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d1a:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008d1e:	e8 7d 70 01 00       	call   c001fda0 <CUnlockScheduler>
c0008d23:	90                   	nop
c0008d24:	90                   	nop
c0008d25:	83 c4 0c             	add    esp,0xc
c0008d28:	c3                   	ret    
c0008d29:	8d 76 00             	lea    esi,[esi+0x0]

c0008d2c <pbuf_cat>:
c0008d2c:	83 ec 1c             	sub    esp,0x1c
c0008d2f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d34:	74 0a                	je     c0008d40 <pbuf_cat+0x14>
c0008d36:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d3b:	75 1f                	jne    c0008d5c <pbuf_cat+0x30>
c0008d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d40:	83 ec 08             	sub    esp,0x8
c0008d43:	68 9c ff 02 c0       	push   0xc002ff9c
c0008d48:	68 46 fd 02 c0       	push   0xc002fd46
c0008d4d:	e8 7a 70 01 00       	call   c001fdcc <CPrintf>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	e9 ae 00 00 00       	jmp    c0008e08 <pbuf_cat+0xdc>
c0008d5a:	66 90                	xchg   ax,ax
c0008d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d64:	eb 26                	jmp    c0008d8c <pbuf_cat+0x60>
c0008d66:	66 90                	xchg   ax,ax
c0008d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d6c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d76:	01 d0                	add    eax,edx
c0008d78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008d7c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d8a:	66 90                	xchg   ax,ax
c0008d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d92:	85 c0                	test   eax,eax
c0008d94:	75 d2                	jne    c0008d68 <pbuf_cat+0x3c>
c0008d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008da5:	0f b7 d2             	movzx  edx,dx
c0008da8:	0f b7 c0             	movzx  eax,ax
c0008dab:	39 c2                	cmp    edx,eax
c0008dad:	74 15                	je     c0008dc4 <pbuf_cat+0x98>
c0008daf:	83 ec 08             	sub    esp,0x8
c0008db2:	68 d4 ff 02 c0       	push   0xc002ffd4
c0008db7:	68 46 fd 02 c0       	push   0xc002fd46
c0008dbc:	e8 0b 70 01 00       	call   c001fdcc <CPrintf>
c0008dc1:	83 c4 10             	add    esp,0x10
c0008dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008dca:	85 c0                	test   eax,eax
c0008dcc:	74 16                	je     c0008de4 <pbuf_cat+0xb8>
c0008dce:	83 ec 08             	sub    esp,0x8
c0008dd1:	68 e0 01 03 c0       	push   0xc00301e0
c0008dd6:	68 46 fd 02 c0       	push   0xc002fd46
c0008ddb:	e8 ec 6f 01 00       	call   c001fdcc <CPrintf>
c0008de0:	83 c4 10             	add    esp,0x10
c0008de3:	90                   	nop
c0008de4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008de8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008deb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008def:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008df2:	01 d0                	add    eax,edx
c0008df4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008df8:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008dfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e00:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e04:	89 10                	mov    DWORD PTR [eax],edx
c0008e06:	66 90                	xchg   ax,ax
c0008e08:	83 c4 1c             	add    esp,0x1c
c0008e0b:	c3                   	ret    

c0008e0c <pbuf_chain>:
c0008e0c:	83 ec 0c             	sub    esp,0xc
c0008e0f:	83 ec 08             	sub    esp,0x8
c0008e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e1a:	e8 0d ff ff ff       	call   c0008d2c <pbuf_cat>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e29:	e8 ce fe ff ff       	call   c0008cfc <pbuf_ref>
c0008e2e:	83 c4 10             	add    esp,0x10
c0008e31:	90                   	nop
c0008e32:	83 c4 0c             	add    esp,0xc
c0008e35:	c3                   	ret    
c0008e36:	66 90                	xchg   ax,ax

c0008e38 <pbuf_dechain>:
c0008e38:	83 ec 1c             	sub    esp,0x1c
c0008e3b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008e4f:	0f 84 8b 00 00 00    	je     c0008ee0 <pbuf_dechain+0xa8>
c0008e55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e5c:	0f b7 d0             	movzx  edx,ax
c0008e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e66:	0f b7 c8             	movzx  ecx,ax
c0008e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e6d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e71:	0f b7 c0             	movzx  eax,ax
c0008e74:	29 c1                	sub    ecx,eax
c0008e76:	89 c8                	mov    eax,ecx
c0008e78:	39 c2                	cmp    edx,eax
c0008e7a:	74 18                	je     c0008e94 <pbuf_dechain+0x5c>
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	68 04 00 03 c0       	push   0xc0030004
c0008e84:	68 46 fd 02 c0       	push   0xc002fd46
c0008e89:	e8 3e 6f 01 00       	call   c001fdcc <CPrintf>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	8d 76 00             	lea    esi,[esi+0x0]
c0008e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e9f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ea3:	89 d1                	mov    ecx,edx
c0008ea5:	29 c1                	sub    ecx,eax
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ead:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ebf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008ec7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008ecb:	83 ec 0c             	sub    esp,0xc
c0008ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed2:	e8 1d f6 ff ff       	call   c00084f4 <pbuf_free>
c0008ed7:	83 c4 10             	add    esp,0x10
c0008eda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008ede:	66 90                	xchg   ax,ax
c0008ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eeb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008eef:	0f b7 d2             	movzx  edx,dx
c0008ef2:	0f b7 c0             	movzx  eax,ax
c0008ef5:	39 c2                	cmp    edx,eax
c0008ef7:	74 17                	je     c0008f10 <pbuf_dechain+0xd8>
c0008ef9:	83 ec 08             	sub    esp,0x8
c0008efc:	68 f0 01 03 c0       	push   0xc00301f0
c0008f01:	68 46 fd 02 c0       	push   0xc002fd46
c0008f06:	e8 c1 6e 01 00       	call   c001fdcc <CPrintf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	66 90                	xchg   ax,ax
c0008f10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008f15:	85 c0                	test   eax,eax
c0008f17:	75 07                	jne    c0008f20 <pbuf_dechain+0xe8>
c0008f19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008f1d:	eb 09                	jmp    c0008f28 <pbuf_dechain+0xf0>
c0008f1f:	90                   	nop
c0008f20:	b8 00 00 00 00       	mov    eax,0x0
c0008f25:	8d 76 00             	lea    esi,[esi+0x0]
c0008f28:	83 c4 1c             	add    esp,0x1c
c0008f2b:	c3                   	ret    

c0008f2c <pbuf_copy>:
c0008f2c:	53                   	push   ebx
c0008f2d:	83 ec 18             	sub    esp,0x18
c0008f30:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f37:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f3e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f43:	74 1f                	je     c0008f64 <pbuf_copy+0x38>
c0008f45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f4a:	74 18                	je     c0008f64 <pbuf_copy+0x38>
c0008f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f5a:	0f b7 d2             	movzx  edx,dx
c0008f5d:	0f b7 c0             	movzx  eax,ax
c0008f60:	39 c2                	cmp    edx,eax
c0008f62:	73 1c                	jae    c0008f80 <pbuf_copy+0x54>
c0008f64:	83 ec 08             	sub    esp,0x8
c0008f67:	68 28 00 03 c0       	push   0xc0030028
c0008f6c:	68 46 fd 02 c0       	push   0xc002fd46
c0008f71:	e8 56 6e 01 00       	call   c001fdcc <CPrintf>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	b0 f2                	mov    al,0xf2
c0008f7b:	e9 0c 02 00 00       	jmp    c000918c <pbuf_copy+0x260>
c0008f80:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f85:	75 15                	jne    c0008f9c <pbuf_copy+0x70>
c0008f87:	83 ec 08             	sub    esp,0x8
c0008f8a:	68 05 02 03 c0       	push   0xc0030205
c0008f8f:	68 46 fd 02 c0       	push   0xc002fd46
c0008f94:	e8 33 6e 01 00       	call   c001fdcc <CPrintf>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fa0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fa4:	0f b7 d0             	movzx  edx,ax
c0008fa7:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008fac:	89 d1                	mov    ecx,edx
c0008fae:	29 c1                	sub    ecx,eax
c0008fb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fb4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fb8:	0f b7 d0             	movzx  edx,ax
c0008fbb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008fc0:	29 c2                	sub    edx,eax
c0008fc2:	89 d0                	mov    eax,edx
c0008fc4:	39 c1                	cmp    ecx,eax
c0008fc6:	7c 1c                	jl     c0008fe4 <pbuf_copy+0xb8>
c0008fc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fcc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fd4:	89 d3                	mov    ebx,edx
c0008fd6:	29 c3                	sub    ebx,eax
c0008fd8:	89 d8                	mov    eax,ebx
c0008fda:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008fdf:	eb 1b                	jmp    c0008ffc <pbuf_copy+0xd0>
c0008fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0008fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fec:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008ff1:	89 d3                	mov    ebx,edx
c0008ff3:	29 c3                	sub    ebx,eax
c0008ff5:	89 d8                	mov    eax,ebx
c0008ff7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008ffc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0009001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009005:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009008:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000900d:	01 d1                	add    ecx,edx
c000900f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009013:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0009016:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000901b:	01 da                	add    edx,ebx
c000901d:	83 ec 04             	sub    esp,0x4
c0009020:	50                   	push   eax
c0009021:	51                   	push   ecx
c0009022:	52                   	push   edx
c0009023:	e8 52 73 ff ff       	call   c000037a <memcpy>
c0009028:	83 c4 10             	add    esp,0x10
c000902b:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0009030:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009035:	01 d0                	add    eax,edx
c0009037:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000903c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009040:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009045:	01 d0                	add    eax,edx
c0009047:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000904c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009050:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009054:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009059:	0f b7 c0             	movzx  eax,ax
c000905c:	39 c2                	cmp    edx,eax
c000905e:	76 18                	jbe    c0009078 <pbuf_copy+0x14c>
c0009060:	83 ec 08             	sub    esp,0x8
c0009063:	68 12 02 03 c0       	push   0xc0030212
c0009068:	68 46 fd 02 c0       	push   0xc002fd46
c000906d:	e8 5a 6d 01 00       	call   c001fdcc <CPrintf>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	8d 76 00             	lea    esi,[esi+0x0]
c0009078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000907c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009080:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009085:	0f b7 c0             	movzx  eax,ax
c0009088:	39 c2                	cmp    edx,eax
c000908a:	75 14                	jne    c00090a0 <pbuf_copy+0x174>
c000908c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009097:	8b 00                	mov    eax,DWORD PTR [eax]
c0009099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000909d:	8d 76 00             	lea    esi,[esi+0x0]
c00090a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090a8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090ad:	0f b7 c0             	movzx  eax,ax
c00090b0:	39 c2                	cmp    edx,eax
c00090b2:	76 18                	jbe    c00090cc <pbuf_copy+0x1a0>
c00090b4:	83 ec 08             	sub    esp,0x8
c00090b7:	68 29 02 03 c0       	push   0xc0030229
c00090bc:	68 46 fd 02 c0       	push   0xc002fd46
c00090c1:	e8 06 6d 01 00       	call   c001fdcc <CPrintf>
c00090c6:	83 c4 10             	add    esp,0x10
c00090c9:	8d 76 00             	lea    esi,[esi+0x0]
c00090cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090d4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090d9:	0f b7 c0             	movzx  eax,ax
c00090dc:	39 c2                	cmp    edx,eax
c00090de:	72 14                	jb     c00090f4 <pbuf_copy+0x1c8>
c00090e0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c00090e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00090f1:	8d 76 00             	lea    esi,[esi+0x0]
c00090f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00090f9:	74 3d                	je     c0009138 <pbuf_copy+0x20c>
c00090fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090ff:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009107:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000910a:	0f b7 d2             	movzx  edx,dx
c000910d:	0f b7 c0             	movzx  eax,ax
c0009110:	39 c2                	cmp    edx,eax
c0009112:	75 24                	jne    c0009138 <pbuf_copy+0x20c>
c0009114:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009118:	8b 00                	mov    eax,DWORD PTR [eax]
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1a                	je     c0009138 <pbuf_copy+0x20c>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	68 58 00 03 c0       	push   0xc0030058
c0009126:	68 46 fd 02 c0       	push   0xc002fd46
c000912b:	e8 9c 6c 01 00       	call   c001fdcc <CPrintf>
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	b0 fa                	mov    al,0xfa
c0009135:	eb 55                	jmp    c000918c <pbuf_copy+0x260>
c0009137:	90                   	nop
c0009138:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000913d:	74 3d                	je     c000917c <pbuf_copy+0x250>
c000913f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009143:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000914b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000914e:	0f b7 d2             	movzx  edx,dx
c0009151:	0f b7 c0             	movzx  eax,ax
c0009154:	39 c2                	cmp    edx,eax
c0009156:	75 24                	jne    c000917c <pbuf_copy+0x250>
c0009158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000915c:	8b 00                	mov    eax,DWORD PTR [eax]
c000915e:	85 c0                	test   eax,eax
c0009160:	74 1a                	je     c000917c <pbuf_copy+0x250>
c0009162:	83 ec 08             	sub    esp,0x8
c0009165:	68 58 00 03 c0       	push   0xc0030058
c000916a:	68 46 fd 02 c0       	push   0xc002fd46
c000916f:	e8 58 6c 01 00       	call   c001fdcc <CPrintf>
c0009174:	83 c4 10             	add    esp,0x10
c0009177:	b0 fa                	mov    al,0xfa
c0009179:	eb 11                	jmp    c000918c <pbuf_copy+0x260>
c000917b:	90                   	nop
c000917c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009181:	0f 85 f9 fd ff ff    	jne    c0008f80 <pbuf_copy+0x54>
c0009187:	b0 00                	mov    al,0x0
c0009189:	8d 76 00             	lea    esi,[esi+0x0]
c000918c:	83 c4 18             	add    esp,0x18
c000918f:	5b                   	pop    ebx
c0009190:	c3                   	ret    
c0009191:	8d 76 00             	lea    esi,[esi+0x0]

c0009194 <pbuf_copy_partial>:
c0009194:	53                   	push   ebx
c0009195:	83 ec 28             	sub    esp,0x28
c0009198:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000919c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00091a0:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00091a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00091aa:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091b1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091b6:	75 20                	jne    c00091d8 <pbuf_copy_partial+0x44>
c00091b8:	83 ec 08             	sub    esp,0x8
c00091bb:	68 84 00 03 c0       	push   0xc0030084
c00091c0:	68 46 fd 02 c0       	push   0xc002fd46
c00091c5:	e8 02 6c 01 00       	call   c001fdcc <CPrintf>
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	b8 00 00 00 00       	mov    eax,0x0
c00091d2:	e9 59 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091d7:	90                   	nop
c00091d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00091dd:	75 21                	jne    c0009200 <pbuf_copy_partial+0x6c>
c00091df:	83 ec 08             	sub    esp,0x8
c00091e2:	68 a4 00 03 c0       	push   0xc00300a4
c00091e7:	68 46 fd 02 c0       	push   0xc002fd46
c00091ec:	e8 db 6b 01 00       	call   c001fdcc <CPrintf>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	b8 00 00 00 00       	mov    eax,0x0
c00091f9:	e9 32 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091fe:	66 90                	xchg   ax,ax
c0009200:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0009207:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000920c:	74 0a                	je     c0009218 <pbuf_copy_partial+0x84>
c000920e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009213:	75 0f                	jne    c0009224 <pbuf_copy_partial+0x90>
c0009215:	8d 76 00             	lea    esi,[esi+0x0]
c0009218:	b8 00 00 00 00       	mov    eax,0x0
c000921d:	e9 0e 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c0009222:	66 90                	xchg   ax,ax
c0009224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009228:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000922c:	e9 e3 00 00 00       	jmp    c0009314 <pbuf_copy_partial+0x180>
c0009231:	8d 76 00             	lea    esi,[esi+0x0]
c0009234:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009239:	85 c0                	test   eax,eax
c000923b:	74 33                	je     c0009270 <pbuf_copy_partial+0xdc>
c000923d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009241:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009245:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000924a:	0f b7 c0             	movzx  eax,ax
c000924d:	39 c2                	cmp    edx,eax
c000924f:	72 1f                	jb     c0009270 <pbuf_copy_partial+0xdc>
c0009251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009255:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009259:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000925d:	89 d3                	mov    ebx,edx
c000925f:	29 c3                	sub    ebx,eax
c0009261:	89 d8                	mov    eax,ebx
c0009263:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009268:	e9 9b 00 00 00       	jmp    c0009308 <pbuf_copy_partial+0x174>
c000926d:	8d 76 00             	lea    esi,[esi+0x0]
c0009270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009274:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000927c:	89 d1                	mov    ecx,edx
c000927e:	29 c1                	sub    ecx,eax
c0009280:	89 c8                	mov    eax,ecx
c0009282:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009287:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000928c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009291:	39 c2                	cmp    edx,eax
c0009293:	76 0b                	jbe    c00092a0 <pbuf_copy_partial+0x10c>
c0009295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009299:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000929e:	66 90                	xchg   ax,ax
c00092a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00092ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00092b1:	01 d1                	add    ecx,edx
c00092b3:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00092b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092bc:	01 da                	add    edx,ebx
c00092be:	83 ec 04             	sub    esp,0x4
c00092c1:	50                   	push   eax
c00092c2:	51                   	push   ecx
c00092c3:	52                   	push   edx
c00092c4:	e8 b1 70 ff ff       	call   c000037a <memcpy>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092d5:	01 d0                	add    eax,edx
c00092d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00092dc:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00092e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00092ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00092f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092f4:	89 d3                	mov    ebx,edx
c00092f6:	29 c3                	sub    ebx,eax
c00092f8:	89 d8                	mov    eax,ebx
c00092fa:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00092ff:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009306:	66 90                	xchg   ax,ax
c0009308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930c:	8b 00                	mov    eax,DWORD PTR [eax]
c000930e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009312:	66 90                	xchg   ax,ax
c0009314:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009319:	85 c0                	test   eax,eax
c000931b:	74 0b                	je     c0009328 <pbuf_copy_partial+0x194>
c000931d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009322:	0f 85 0c ff ff ff    	jne    c0009234 <pbuf_copy_partial+0xa0>
c0009328:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000932d:	8d 76 00             	lea    esi,[esi+0x0]
c0009330:	83 c4 28             	add    esp,0x28
c0009333:	5b                   	pop    ebx
c0009334:	c3                   	ret    
c0009335:	8d 76 00             	lea    esi,[esi+0x0]

c0009338 <pbuf_take>:
c0009338:	83 ec 2c             	sub    esp,0x2c
c000933b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000933f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009348:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000934d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009354:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009359:	75 1d                	jne    c0009378 <pbuf_take+0x40>
c000935b:	83 ec 08             	sub    esp,0x8
c000935e:	68 44 02 03 c0       	push   0xc0030244
c0009363:	68 46 fd 02 c0       	push   0xc002fd46
c0009368:	e8 5f 6a 01 00       	call   c001fdcc <CPrintf>
c000936d:	83 c4 10             	add    esp,0x10
c0009370:	b0 00                	mov    al,0x0
c0009372:	e9 3d 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c0009377:	90                   	nop
c0009378:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000937d:	75 1d                	jne    c000939c <pbuf_take+0x64>
c000937f:	83 ec 08             	sub    esp,0x8
c0009382:	68 5b 02 03 c0       	push   0xc003025b
c0009387:	68 46 fd 02 c0       	push   0xc002fd46
c000938c:	e8 3b 6a 01 00       	call   c001fdcc <CPrintf>
c0009391:	83 c4 10             	add    esp,0x10
c0009394:	b0 00                	mov    al,0x0
c0009396:	e9 19 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c000939b:	90                   	nop
c000939c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00093a1:	74 1d                	je     c00093c0 <pbuf_take+0x88>
c00093a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093a8:	74 16                	je     c00093c0 <pbuf_take+0x88>
c00093aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00093b1:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00093b6:	0f b7 c0             	movzx  eax,ax
c00093b9:	39 c2                	cmp    edx,eax
c00093bb:	76 0b                	jbe    c00093c8 <pbuf_take+0x90>
c00093bd:	8d 76 00             	lea    esi,[esi+0x0]
c00093c0:	b0 f2                	mov    al,0xf2
c00093c2:	e9 ed 00 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c00093c7:	90                   	nop
c00093c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093d0:	e9 9f 00 00 00       	jmp    c0009474 <pbuf_take+0x13c>
c00093d5:	8d 76 00             	lea    esi,[esi+0x0]
c00093d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00093dd:	75 15                	jne    c00093f4 <pbuf_take+0xbc>
c00093df:	83 ec 08             	sub    esp,0x8
c00093e2:	68 76 02 03 c0       	push   0xc0030276
c00093e7:	68 46 fd 02 c0       	push   0xc002fd46
c00093ec:	e8 db 69 01 00       	call   c001fdcc <CPrintf>
c00093f1:	83 c4 10             	add    esp,0x10
c00093f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093f8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00093fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009401:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009405:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000940a:	0f b7 c0             	movzx  eax,ax
c000940d:	39 c2                	cmp    edx,eax
c000940f:	76 0f                	jbe    c0009420 <pbuf_take+0xe8>
c0009411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009415:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009419:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000941e:	66 90                	xchg   ax,ax
c0009420:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009425:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c000942a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000942e:	01 c1                	add    ecx,eax
c0009430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009437:	83 ec 04             	sub    esp,0x4
c000943a:	52                   	push   edx
c000943b:	51                   	push   ecx
c000943c:	50                   	push   eax
c000943d:	e8 38 6f ff ff       	call   c000037a <memcpy>
c0009442:	83 c4 10             	add    esp,0x10
c0009445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009449:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000944e:	89 d1                	mov    ecx,edx
c0009450:	29 c1                	sub    ecx,eax
c0009452:	89 c8                	mov    eax,ecx
c0009454:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009459:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000945e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009463:	01 d0                	add    eax,edx
c0009465:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000946a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000946e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009470:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009474:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009479:	85 c0                	test   eax,eax
c000947b:	0f 85 57 ff ff ff    	jne    c00093d8 <pbuf_take+0xa0>
c0009481:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009486:	85 c0                	test   eax,eax
c0009488:	75 0e                	jne    c0009498 <pbuf_take+0x160>
c000948a:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000948f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009494:	39 c2                	cmp    edx,eax
c0009496:	74 18                	je     c00094b0 <pbuf_take+0x178>
c0009498:	83 ec 08             	sub    esp,0x8
c000949b:	68 8e 02 03 c0       	push   0xc003028e
c00094a0:	68 46 fd 02 c0       	push   0xc002fd46
c00094a5:	e8 22 69 01 00       	call   c001fdcc <CPrintf>
c00094aa:	83 c4 10             	add    esp,0x10
c00094ad:	8d 76 00             	lea    esi,[esi+0x0]
c00094b0:	b0 00                	mov    al,0x0
c00094b2:	66 90                	xchg   ax,ax
c00094b4:	83 c4 2c             	add    esp,0x2c
c00094b7:	c3                   	ret    

c00094b8 <pbuf_coalesce>:
c00094b8:	83 ec 1c             	sub    esp,0x1c
c00094bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 07                	jne    c00094cc <pbuf_coalesce+0x14>
c00094c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094c9:	eb 7d                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094cb:	90                   	nop
c00094cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094d3:	0f b7 c0             	movzx  eax,ax
c00094d6:	83 ec 04             	sub    esp,0x4
c00094d9:	6a 00                	push   0x0
c00094db:	50                   	push   eax
c00094dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00094e0:	e8 e7 f1 ff ff       	call   c00086cc <pbuf_alloc>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00094ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00094f1:	75 09                	jne    c00094fc <pbuf_coalesce+0x44>
c00094f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f7:	eb 4f                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094f9:	8d 76 00             	lea    esi,[esi+0x0]
c00094fc:	83 ec 08             	sub    esp,0x8
c00094ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009503:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009507:	e8 20 fa ff ff       	call   c0008f2c <pbuf_copy>
c000950c:	83 c4 10             	add    esp,0x10
c000950f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009513:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009518:	85 c0                	test   eax,eax
c000951a:	74 18                	je     c0009534 <pbuf_coalesce+0x7c>
c000951c:	83 ec 08             	sub    esp,0x8
c000951f:	68 a4 02 03 c0       	push   0xc00302a4
c0009524:	68 46 fd 02 c0       	push   0xc002fd46
c0009529:	e8 9e 68 01 00       	call   c001fdcc <CPrintf>
c000952e:	83 c4 10             	add    esp,0x10
c0009531:	8d 76 00             	lea    esi,[esi+0x0]
c0009534:	83 ec 0c             	sub    esp,0xc
c0009537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000953b:	e8 b4 ef ff ff       	call   c00084f4 <pbuf_free>
c0009540:	83 c4 10             	add    esp,0x10
c0009543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009547:	90                   	nop
c0009548:	83 c4 1c             	add    esp,0x1c
c000954b:	c3                   	ret    

c000954c <pbuf_get_at>:
c000954c:	83 ec 14             	sub    esp,0x14
c000954f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009553:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009557:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000955a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000955f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009563:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009567:	eb 27                	jmp    c0009590 <pbuf_get_at+0x44>
c0009569:	8d 76 00             	lea    esi,[esi+0x0]
c000956c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009570:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009574:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009579:	89 d1                	mov    ecx,edx
c000957b:	29 c1                	sub    ecx,eax
c000957d:	89 c8                	mov    eax,ecx
c000957f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009588:	8b 00                	mov    eax,DWORD PTR [eax]
c000958a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000958e:	66 90                	xchg   ax,ax
c0009590:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009595:	74 15                	je     c00095ac <pbuf_get_at+0x60>
c0009597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000959f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095a4:	0f b7 c0             	movzx  eax,ax
c00095a7:	39 c2                	cmp    edx,eax
c00095a9:	73 c1                	jae    c000956c <pbuf_get_at+0x20>
c00095ab:	90                   	nop
c00095ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095b1:	74 29                	je     c00095dc <pbuf_get_at+0x90>
c00095b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095bb:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095c0:	0f b7 c0             	movzx  eax,ax
c00095c3:	39 c2                	cmp    edx,eax
c00095c5:	73 15                	jae    c00095dc <pbuf_get_at+0x90>
c00095c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00095ce:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095d3:	01 d0                	add    eax,edx
c00095d5:	8a 00                	mov    al,BYTE PTR [eax]
c00095d7:	eb 07                	jmp    c00095e0 <pbuf_get_at+0x94>
c00095d9:	8d 76 00             	lea    esi,[esi+0x0]
c00095dc:	b0 00                	mov    al,0x0
c00095de:	66 90                	xchg   ax,ax
c00095e0:	83 c4 14             	add    esp,0x14
c00095e3:	c3                   	ret    

c00095e4 <pbuf_memcmp>:
c00095e4:	83 ec 18             	sub    esp,0x18
c00095e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00095eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095ef:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00095f4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00095f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009601:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009609:	eb 25                	jmp    c0009630 <pbuf_memcmp+0x4c>
c000960b:	90                   	nop
c000960c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009610:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009614:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009619:	89 d1                	mov    ecx,edx
c000961b:	29 c1                	sub    ecx,eax
c000961d:	89 c8                	mov    eax,ecx
c000961f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009628:	8b 00                	mov    eax,DWORD PTR [eax]
c000962a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000962e:	66 90                	xchg   ax,ax
c0009630:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009635:	74 15                	je     c000964c <pbuf_memcmp+0x68>
c0009637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000963f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009644:	0f b7 c0             	movzx  eax,ax
c0009647:	39 c2                	cmp    edx,eax
c0009649:	73 c1                	jae    c000960c <pbuf_memcmp+0x28>
c000964b:	90                   	nop
c000964c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009651:	0f 84 8d 00 00 00    	je     c00096e4 <pbuf_memcmp+0x100>
c0009657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000965b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000965f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009664:	0f b7 c0             	movzx  eax,ax
c0009667:	39 c2                	cmp    edx,eax
c0009669:	73 79                	jae    c00096e4 <pbuf_memcmp+0x100>
c000966b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009672:	eb 5c                	jmp    c00096d0 <pbuf_memcmp+0xec>
c0009674:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009679:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000967e:	01 d0                	add    eax,edx
c0009680:	0f b7 c0             	movzx  eax,ax
c0009683:	50                   	push   eax
c0009684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009688:	e8 bf fe ff ff       	call   c000954c <pbuf_get_at>
c000968d:	83 c4 08             	add    esp,0x8
c0009690:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009694:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009699:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000969d:	01 d0                	add    eax,edx
c000969f:	8a 00                	mov    al,BYTE PTR [eax]
c00096a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00096a5:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c00096aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00096af:	39 c2                	cmp    edx,eax
c00096b1:	74 0d                	je     c00096c0 <pbuf_memcmp+0xdc>
c00096b3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096b8:	83 c0 01             	add    eax,0x1
c00096bb:	eb 2f                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096bd:	8d 76 00             	lea    esi,[esi+0x0]
c00096c0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096c5:	83 c0 01             	add    eax,0x1
c00096c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096cd:	8d 76 00             	lea    esi,[esi+0x0]
c00096d0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00096d5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00096d9:	39 c2                	cmp    edx,eax
c00096db:	72 97                	jb     c0009674 <pbuf_memcmp+0x90>
c00096dd:	b8 00 00 00 00       	mov    eax,0x0
c00096e2:	eb 08                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096e9:	8d 76 00             	lea    esi,[esi+0x0]
c00096ec:	83 c4 18             	add    esp,0x18
c00096ef:	c3                   	ret    

c00096f0 <pbuf_memfind>:
c00096f0:	83 ec 18             	sub    esp,0x18
c00096f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00096f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00096fb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009700:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009708:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000970b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000970f:	89 d1                	mov    ecx,edx
c0009711:	29 c1                	sub    ecx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000971a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000971e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009721:	0f b7 c0             	movzx  eax,ax
c0009724:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009729:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c000972d:	01 ca                	add    edx,ecx
c000972f:	39 d0                	cmp    eax,edx
c0009731:	7c 65                	jl     c0009798 <pbuf_memfind+0xa8>
c0009733:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009736:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000973b:	eb 4b                	jmp    c0009788 <pbuf_memfind+0x98>
c000973d:	8d 76 00             	lea    esi,[esi+0x0]
c0009740:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000974a:	52                   	push   edx
c000974b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000974f:	50                   	push   eax
c0009750:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009754:	e8 8b fe ff ff       	call   c00095e4 <pbuf_memcmp>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009761:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009766:	85 c0                	test   eax,eax
c0009768:	75 0a                	jne    c0009774 <pbuf_memfind+0x84>
c000976a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000976f:	eb 2f                	jmp    c00097a0 <pbuf_memfind+0xb0>
c0009771:	8d 76 00             	lea    esi,[esi+0x0]
c0009774:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009779:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000977e:	01 d0                	add    eax,edx
c0009780:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009785:	8d 76 00             	lea    esi,[esi+0x0]
c0009788:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000978d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009792:	39 c2                	cmp    edx,eax
c0009794:	76 aa                	jbe    c0009740 <pbuf_memfind+0x50>
c0009796:	66 90                	xchg   ax,ax
c0009798:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000979d:	8d 76 00             	lea    esi,[esi+0x0]
c00097a0:	83 c4 18             	add    esp,0x18
c00097a3:	c3                   	ret    

c00097a4 <pbuf_strstr>:
c00097a4:	83 ec 1c             	sub    esp,0x1c
c00097a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00097ac:	74 1e                	je     c00097cc <pbuf_strstr+0x28>
c00097ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097b2:	8a 00                	mov    al,BYTE PTR [eax]
c00097b4:	0f be c0             	movsx  eax,al
c00097b7:	85 c0                	test   eax,eax
c00097b9:	74 11                	je     c00097cc <pbuf_strstr+0x28>
c00097bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097c2:	0f b7 c0             	movzx  eax,ax
c00097c5:	3d ff ff 00 00       	cmp    eax,0xffff
c00097ca:	75 08                	jne    c00097d4 <pbuf_strstr+0x30>
c00097cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097d1:	eb 41                	jmp    c0009814 <pbuf_strstr+0x70>
c00097d3:	90                   	nop
c00097d4:	83 ec 0c             	sub    esp,0xc
c00097d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097db:	e8 90 6d ff ff       	call   c0000570 <strlen>
c00097e0:	83 c4 10             	add    esp,0x10
c00097e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097e7:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c00097ef:	76 07                	jbe    c00097f8 <pbuf_strstr+0x54>
c00097f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097f6:	eb 1c                	jmp    c0009814 <pbuf_strstr+0x70>
c00097f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097fc:	0f b7 c0             	movzx  eax,ax
c00097ff:	6a 00                	push   0x0
c0009801:	50                   	push   eax
c0009802:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009806:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000980a:	e8 e1 fe ff ff       	call   c00096f0 <pbuf_memfind>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	66 90                	xchg   ax,ax
c0009814:	83 c4 1c             	add    esp,0x1c
c0009817:	c3                   	ret    

c0009818 <raw_input>:
c0009818:	83 ec 2c             	sub    esp,0x2c
c000981b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000982b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000982f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009832:	0f b6 c0             	movzx  eax,al
c0009835:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000983a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009842:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009847:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000984b:	e9 b8 00 00 00       	jmp    c0009908 <raw_input+0xf0>
c0009850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009854:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009857:	0f b6 d0             	movzx  edx,al
c000985a:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000985f:	39 c2                	cmp    edx,eax
c0009861:	0f 85 8d 00 00 00    	jne    c00098f4 <raw_input+0xdc>
c0009867:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000986b:	85 c0                	test   eax,eax
c000986d:	74 19                	je     c0009888 <raw_input+0x70>
c000986f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009873:	8b 00                	mov    eax,DWORD PTR [eax]
c0009875:	85 c0                	test   eax,eax
c0009877:	74 0f                	je     c0009888 <raw_input+0x70>
c0009879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000987d:	8b 10                	mov    edx,DWORD PTR [eax]
c000987f:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009884:	39 c2                	cmp    edx,eax
c0009886:	75 6c                	jne    c00098f4 <raw_input+0xdc>
c0009888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000988c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000988f:	85 c0                	test   eax,eax
c0009891:	74 61                	je     c00098f4 <raw_input+0xdc>
c0009893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009897:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000989a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000989e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c00098a1:	68 90 68 03 c0       	push   0xc0036890
c00098a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ae:	52                   	push   edx
c00098af:	ff d0                	call   eax
c00098b1:	83 c4 10             	add    esp,0x10
c00098b4:	0f b6 c0             	movzx  eax,al
c00098b7:	85 c0                	test   eax,eax
c00098b9:	74 39                	je     c00098f4 <raw_input+0xdc>
c00098bb:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00098c3:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00098c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00098cd:	74 25                	je     c00098f4 <raw_input+0xdc>
c00098cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00098d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098dd:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c00098e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098ee:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00098f3:	90                   	nop
c00098f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009903:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009907:	90                   	nop
c0009908:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000990d:	85 c0                	test   eax,eax
c000990f:	75 0b                	jne    c000991c <raw_input+0x104>
c0009911:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009916:	0f 85 34 ff ff ff    	jne    c0009850 <raw_input+0x38>
c000991c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <raw_bind>:
c0009924:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009929:	74 09                	je     c0009934 <raw_bind+0x10>
c000992b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000992f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009931:	eb 09                	jmp    c000993c <raw_bind+0x18>
c0009933:	90                   	nop
c0009934:	b8 00 00 00 00       	mov    eax,0x0
c0009939:	8d 76 00             	lea    esi,[esi+0x0]
c000993c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009940:	89 02                	mov    DWORD PTR [edx],eax
c0009942:	b0 00                	mov    al,0x0
c0009944:	c3                   	ret    
c0009945:	8d 76 00             	lea    esi,[esi+0x0]

c0009948 <raw_connect>:
c0009948:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000994d:	74 09                	je     c0009958 <raw_connect+0x10>
c000994f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009953:	8b 00                	mov    eax,DWORD PTR [eax]
c0009955:	eb 09                	jmp    c0009960 <raw_connect+0x18>
c0009957:	90                   	nop
c0009958:	b8 00 00 00 00       	mov    eax,0x0
c000995d:	8d 76 00             	lea    esi,[esi+0x0]
c0009960:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009964:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009967:	b0 00                	mov    al,0x0
c0009969:	c3                   	ret    
c000996a:	66 90                	xchg   ax,ax

c000996c <raw_recv>:
c000996c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000997b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000997f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009982:	90                   	nop
c0009983:	c3                   	ret    

c0009984 <raw_sendto>:
c0009984:	83 ec 1c             	sub    esp,0x1c
c0009987:	83 ec 08             	sub    esp,0x8
c000998a:	6a 14                	push   0x14
c000998c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009990:	e8 c3 e9 ff ff       	call   c0008358 <pbuf_header>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	0f b6 c0             	movzx  eax,al
c000999b:	85 c0                	test   eax,eax
c000999d:	74 49                	je     c00099e8 <raw_sendto+0x64>
c000999f:	83 ec 04             	sub    esp,0x4
c00099a2:	6a 00                	push   0x0
c00099a4:	6a 00                	push   0x0
c00099a6:	6a 01                	push   0x1
c00099a8:	e8 1f ed ff ff       	call   c00086cc <pbuf_alloc>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00099b9:	75 09                	jne    c00099c4 <raw_sendto+0x40>
c00099bb:	b0 ff                	mov    al,0xff
c00099bd:	e9 2a 01 00 00       	jmp    c0009aec <raw_sendto+0x168>
c00099c2:	66 90                	xchg   ax,ax
c00099c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00099cb:	0f b7 c0             	movzx  eax,ax
c00099ce:	85 c0                	test   eax,eax
c00099d0:	74 52                	je     c0009a24 <raw_sendto+0xa0>
c00099d2:	83 ec 08             	sub    esp,0x8
c00099d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099dd:	e8 2a f4 ff ff       	call   c0008e0c <pbuf_chain>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	eb 3d                	jmp    c0009a24 <raw_sendto+0xa0>
c00099e7:	90                   	nop
c00099e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099f0:	83 ec 08             	sub    esp,0x8
c00099f3:	6a ec                	push   0xffffffec
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	e8 5a e9 ff ff       	call   c0008358 <pbuf_header>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	0f b6 c0             	movzx  eax,al
c0009a04:	85 c0                	test   eax,eax
c0009a06:	74 1c                	je     c0009a24 <raw_sendto+0xa0>
c0009a08:	83 ec 08             	sub    esp,0x8
c0009a0b:	68 b8 02 03 c0       	push   0xc00302b8
c0009a10:	68 46 fd 02 c0       	push   0xc002fd46
c0009a15:	e8 b2 63 01 00       	call   c001fdcc <CPrintf>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	b0 ff                	mov    al,0xff
c0009a1f:	e9 c8 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a24:	83 ec 0c             	sub    esp,0xc
c0009a27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a2b:	e8 6c 9d 00 00       	call   c001379c <ip_route>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a37:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009a3c:	75 22                	jne    c0009a60 <raw_sendto+0xdc>
c0009a3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a42:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009a46:	74 10                	je     c0009a58 <raw_sendto+0xd4>
c0009a48:	83 ec 0c             	sub    esp,0xc
c0009a4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a4f:	e8 a0 ea ff ff       	call   c00084f4 <pbuf_free>
c0009a54:	83 c4 10             	add    esp,0x10
c0009a57:	90                   	nop
c0009a58:	b0 fc                	mov    al,0xfc
c0009a5a:	e9 8d 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a5f:	90                   	nop
c0009a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a64:	85 c0                	test   eax,eax
c0009a66:	74 0c                	je     c0009a74 <raw_sendto+0xf0>
c0009a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a6e:	85 c0                	test   eax,eax
c0009a70:	75 12                	jne    c0009a84 <raw_sendto+0x100>
c0009a72:	66 90                	xchg   ax,ax
c0009a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a78:	83 c0 04             	add    eax,0x4
c0009a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a7f:	eb 0b                	jmp    c0009a8c <raw_sendto+0x108>
c0009a81:	8d 76 00             	lea    esi,[esi+0x0]
c0009a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a90:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009a93:	0f b6 c8             	movzx  ecx,al
c0009a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a9a:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009a9d:	0f b6 d0             	movzx  edx,al
c0009aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009aa4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009aa7:	0f b6 c0             	movzx  eax,al
c0009aaa:	83 ec 04             	sub    esp,0x4
c0009aad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009ab1:	51                   	push   ecx
c0009ab2:	52                   	push   edx
c0009ab3:	50                   	push   eax
c0009ab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009abc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac0:	e8 af a1 00 00       	call   c0013c74 <ip_output_if>
c0009ac5:	83 c4 20             	add    esp,0x20
c0009ac8:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad0:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009ad4:	74 12                	je     c0009ae8 <raw_sendto+0x164>
c0009ad6:	83 ec 0c             	sub    esp,0xc
c0009ad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009add:	e8 12 ea ff ff       	call   c00084f4 <pbuf_free>
c0009ae2:	83 c4 10             	add    esp,0x10
c0009ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ae8:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009aec:	83 c4 1c             	add    esp,0x1c
c0009aef:	c3                   	ret    

c0009af0 <raw_send>:
c0009af0:	83 ec 0c             	sub    esp,0xc
c0009af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009af7:	83 c0 04             	add    eax,0x4
c0009afa:	83 ec 04             	sub    esp,0x4
c0009afd:	50                   	push   eax
c0009afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b06:	e8 79 fe ff ff       	call   c0009984 <raw_sendto>
c0009b0b:	83 c4 10             	add    esp,0x10
c0009b0e:	83 c4 0c             	add    esp,0xc
c0009b11:	c3                   	ret    
c0009b12:	66 90                	xchg   ax,ax

c0009b14 <raw_remove>:
c0009b14:	83 ec 1c             	sub    esp,0x1c
c0009b17:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b1c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b20:	75 12                	jne    c0009b34 <raw_remove+0x20>
c0009b22:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b2a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009b2f:	eb 4b                	jmp    c0009b7c <raw_remove+0x68>
c0009b31:	8d 76 00             	lea    esi,[esi+0x0]
c0009b34:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b3d:	eb 35                	jmp    c0009b74 <raw_remove+0x60>
c0009b3f:	90                   	nop
c0009b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b47:	85 c0                	test   eax,eax
c0009b49:	74 1d                	je     c0009b68 <raw_remove+0x54>
c0009b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b52:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b56:	75 10                	jne    c0009b68 <raw_remove+0x54>
c0009b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b66:	66 90                	xchg   ax,ax
c0009b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b73:	90                   	nop
c0009b74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009b79:	75 c5                	jne    c0009b40 <raw_remove+0x2c>
c0009b7b:	90                   	nop
c0009b7c:	83 ec 08             	sub    esp,0x8
c0009b7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009b83:	6a 00                	push   0x0
c0009b85:	e8 ae e0 ff ff       	call   c0007c38 <memp_free>
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	90                   	nop
c0009b8e:	83 c4 1c             	add    esp,0x1c
c0009b91:	c3                   	ret    
c0009b92:	66 90                	xchg   ax,ax

c0009b94 <raw_new>:
c0009b94:	83 ec 2c             	sub    esp,0x2c
c0009b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009b9f:	83 ec 0c             	sub    esp,0xc
c0009ba2:	6a 00                	push   0x0
c0009ba4:	e8 63 df ff ff       	call   c0007b0c <memp_malloc>
c0009ba9:	83 c4 10             	add    esp,0x10
c0009bac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bb0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009bb5:	74 3d                	je     c0009bf4 <raw_new+0x60>
c0009bb7:	83 ec 04             	sub    esp,0x4
c0009bba:	6a 1c                	push   0x1c
c0009bbc:	6a 00                	push   0x0
c0009bbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009bc2:	e8 29 69 ff ff       	call   c00004f0 <memset>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009bd2:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd9:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009bdd:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009be3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009bea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bee:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009bf3:	90                   	nop
c0009bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf8:	83 c4 2c             	add    esp,0x2c
c0009bfb:	c3                   	ret    

c0009bfc <stats_init>:
c0009bfc:	90                   	nop
c0009bfd:	c3                   	ret    
c0009bfe:	66 90                	xchg   ax,ax

c0009c00 <sys_msleep>:
c0009c00:	83 ec 1c             	sub    esp,0x1c
c0009c03:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009c08:	74 46                	je     c0009c50 <sys_msleep+0x50>
c0009c0a:	83 ec 08             	sub    esp,0x8
c0009c0d:	6a 00                	push   0x0
c0009c0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c13:	50                   	push   eax
c0009c14:	e8 53 70 ff ff       	call   c0000c6c <sys_sem_new>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c20:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009c25:	85 c0                	test   eax,eax
c0009c27:	75 27                	jne    c0009c50 <sys_msleep+0x50>
c0009c29:	83 ec 08             	sub    esp,0x8
c0009c2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009c30:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c34:	50                   	push   eax
c0009c35:	e8 8a 70 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	83 ec 0c             	sub    esp,0xc
c0009c40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c44:	50                   	push   eax
c0009c45:	e8 4a 70 ff ff       	call   c0000c94 <sys_sem_free>
c0009c4a:	83 c4 10             	add    esp,0x10
c0009c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c50:	90                   	nop
c0009c51:	83 c4 1c             	add    esp,0x1c
c0009c54:	c3                   	ret    
c0009c55:	66 90                	xchg   ax,ax
c0009c57:	90                   	nop

c0009c58 <tcp_accept_null>:
c0009c58:	83 ec 04             	sub    esp,0x4
c0009c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5f:	88 04 24             	mov    BYTE PTR [esp],al
c0009c62:	b0 f6                	mov    al,0xf6
c0009c64:	83 c4 04             	add    esp,0x4
c0009c67:	c3                   	ret    

c0009c68 <tcp_listen_with_backlog>:
c0009c68:	83 ec 2c             	sub    esp,0x2c
c0009c6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009c7a:	85 c0                	test   eax,eax
c0009c7c:	74 22                	je     c0009ca0 <tcp_listen_with_backlog+0x38>
c0009c7e:	83 ec 08             	sub    esp,0x8
c0009c81:	68 e0 02 03 c0       	push   0xc00302e0
c0009c86:	68 46 fd 02 c0       	push   0xc002fd46
c0009c8b:	e8 3c 61 01 00       	call   c001fdcc <CPrintf>
c0009c90:	83 c4 10             	add    esp,0x10
c0009c93:	b8 00 00 00 00       	mov    eax,0x0
c0009c98:	e9 77 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0009ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca7:	83 f8 01             	cmp    eax,0x1
c0009caa:	75 0c                	jne    c0009cb8 <tcp_listen_with_backlog+0x50>
c0009cac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb0:	e9 5f 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	6a 03                	push   0x3
c0009cbd:	e8 4a de ff ff       	call   c0007b0c <memp_malloc>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cc9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009cce:	75 0c                	jne    c0009cdc <tcp_listen_with_backlog+0x74>
c0009cd0:	b8 00 00 00 00       	mov    eax,0x0
c0009cd5:	e9 3a 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cda:	66 90                	xchg   ax,ax
c0009cdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ce7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009cea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009cf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cf5:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfd:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d08:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009d0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d0f:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009d12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d16:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009d19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d1d:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d24:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009d27:	83 c8 02             	or     eax,0x2
c0009d2a:	88 c2                	mov    dl,al
c0009d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d30:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d37:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d3e:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d45:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d4c:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d59:	89 10                	mov    DWORD PTR [eax],edx
c0009d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009d62:	0f b7 c0             	movzx  eax,ax
c0009d65:	85 c0                	test   eax,eax
c0009d67:	74 6f                	je     c0009dd8 <tcp_listen_with_backlog+0x170>
c0009d69:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d6e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d72:	75 10                	jne    c0009d84 <tcp_listen_with_backlog+0x11c>
c0009d74:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d7c:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009d81:	eb 49                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009d83:	90                   	nop
c0009d84:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d89:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009d8e:	eb 30                	jmp    c0009dc0 <tcp_listen_with_backlog+0x158>
c0009d90:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009d95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d98:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d9c:	75 12                	jne    c0009db0 <tcp_listen_with_backlog+0x148>
c0009d9e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009da3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009da7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009daa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dad:	eb 1d                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009daf:	90                   	nop
c0009db0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009db5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009db8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0009dc0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009dc5:	85 c0                	test   eax,eax
c0009dc7:	75 c7                	jne    c0009d90 <tcp_listen_with_backlog+0x128>
c0009dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009dd7:	90                   	nop
c0009dd8:	83 ec 08             	sub    esp,0x8
c0009ddb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009ddf:	6a 02                	push   0x2
c0009de1:	e8 52 de ff ff       	call   c0007c38 <memp_free>
c0009de6:	83 c4 10             	add    esp,0x10
c0009de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ded:	c7 40 1c 58 9c 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009c58
c0009df4:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009dfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e05:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009e0a:	e8 a5 6e 00 00       	call   c0010cb4 <tcp_timer_needed>
c0009e0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e13:	90                   	nop
c0009e14:	83 c4 2c             	add    esp,0x2c
c0009e17:	c3                   	ret    

c0009e18 <tcp_update_rcv_ann_wnd>:
c0009e18:	83 ec 1c             	sub    esp,0x1c
c0009e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e1f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e26:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e29:	0f b7 c0             	movzx  eax,ax
c0009e2c:	01 d0                	add    eax,edx
c0009e2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e36:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e3d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e40:	0f b7 c8             	movzx  ecx,ax
c0009e43:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009e49:	76 05                	jbe    c0009e50 <tcp_update_rcv_ann_wnd+0x38>
c0009e4b:	b8 30 04 00 00       	mov    eax,0x430
c0009e50:	0f b7 c0             	movzx  eax,ax
c0009e53:	01 c2                	add    edx,eax
c0009e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e59:	29 d0                	sub    eax,edx
c0009e5b:	78 23                	js     c0009e80 <tcp_update_rcv_ann_wnd+0x68>
c0009e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009e68:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e70:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e77:	29 c2                	sub    edx,eax
c0009e79:	89 d0                	mov    eax,edx
c0009e7b:	eb 73                	jmp    c0009ef0 <tcp_update_rcv_ann_wnd+0xd8>
c0009e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0009e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e84:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e8b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e8e:	29 c2                	sub    edx,eax
c0009e90:	89 d0                	mov    eax,edx
c0009e92:	85 c0                	test   eax,eax
c0009e94:	7e 0e                	jle    c0009ea4 <tcp_update_rcv_ann_wnd+0x8c>
c0009e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e9a:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009ea0:	eb 46                	jmp    c0009ee8 <tcp_update_rcv_ann_wnd+0xd0>
c0009ea2:	66 90                	xchg   ax,ax
c0009ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eaf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009eb2:	29 c2                	sub    edx,eax
c0009eb4:	89 d0                	mov    eax,edx
c0009eb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eba:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009ec2:	76 18                	jbe    c0009edc <tcp_update_rcv_ann_wnd+0xc4>
c0009ec4:	83 ec 08             	sub    esp,0x8
c0009ec7:	68 14 05 03 c0       	push   0xc0030514
c0009ecc:	68 46 fd 02 c0       	push   0xc002fd46
c0009ed1:	e8 f6 5e 01 00       	call   c001fdcc <CPrintf>
c0009ed6:	83 c4 10             	add    esp,0x10
c0009ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0009edc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ee0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009ee4:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009ee8:	b8 00 00 00 00       	mov    eax,0x0
c0009eed:	8d 76 00             	lea    esi,[esi+0x0]
c0009ef0:	83 c4 1c             	add    esp,0x1c
c0009ef3:	c3                   	ret    

c0009ef4 <tcp_recved>:
c0009ef4:	83 ec 2c             	sub    esp,0x2c
c0009ef7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009efb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f00:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f09:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f0c:	0f b7 c0             	movzx  eax,ax
c0009f0f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009f14:	29 c1                	sub    ecx,eax
c0009f16:	89 c8                	mov    eax,ecx
c0009f18:	39 c2                	cmp    edx,eax
c0009f1a:	7e 18                	jle    c0009f34 <tcp_recved+0x40>
c0009f1c:	83 ec 08             	sub    esp,0x8
c0009f1f:	68 04 03 03 c0       	push   0xc0030304
c0009f24:	68 46 fd 02 c0       	push   0xc002fd46
c0009f29:	e8 9e 5e 01 00       	call   c001fdcc <CPrintf>
c0009f2e:	83 c4 10             	add    esp,0x10
c0009f31:	8d 76 00             	lea    esi,[esi+0x0]
c0009f34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f38:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f3f:	01 d0                	add    eax,edx
c0009f41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f45:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f50:	0f b7 c0             	movzx  eax,ax
c0009f53:	3d 60 08 00 00       	cmp    eax,0x860
c0009f58:	76 0a                	jbe    c0009f64 <tcp_recved+0x70>
c0009f5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f5e:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009f64:	83 ec 0c             	sub    esp,0xc
c0009f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f6b:	e8 a8 fe ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f77:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009f7f:	7e 23                	jle    c0009fa4 <tcp_recved+0xb0>
c0009f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f85:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009f88:	83 c8 02             	or     eax,0x2
c0009f8b:	88 c2                	mov    dl,al
c0009f8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f91:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009f94:	83 ec 0c             	sub    esp,0xc
c0009f97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f9b:	e8 84 60 00 00       	call   c0010024 <tcp_output>
c0009fa0:	83 c4 10             	add    esp,0x10
c0009fa3:	90                   	nop
c0009fa4:	90                   	nop
c0009fa5:	83 c4 2c             	add    esp,0x2c
c0009fa8:	c3                   	ret    
c0009fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0009fac <tcp_new_port>:
c0009fac:	83 ec 10             	sub    esp,0x10
c0009faf:	90                   	nop
c0009fb0:	66 a1 60 3e 03 c0    	mov    ax,ds:0xc0033e60
c0009fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0009fb9:	66 89 15 60 3e 03 c0 	mov    WORD PTR ds:0xc0033e60,dx
c0009fc0:	0f b7 c0             	movzx  eax,ax
c0009fc3:	3d ff ff 00 00       	cmp    eax,0xffff
c0009fc8:	75 0a                	jne    c0009fd4 <tcp_new_port+0x28>
c0009fca:	66 c7 05 60 3e 03 c0 00 c0 	mov    WORD PTR ds:0xc0033e60,0xc000
c0009fd3:	90                   	nop
c0009fd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009fdc:	eb 4a                	jmp    c000a028 <tcp_new_port+0x7c>
c0009fde:	66 90                	xchg   ax,ax
c0009fe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fe4:	8b 04 85 20 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf9e0]
c0009feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ff1:	eb 29                	jmp    c000a01c <tcp_new_port+0x70>
c0009ff3:	90                   	nop
c0009ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ff8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009ffb:	66 a1 60 3e 03 c0    	mov    ax,ds:0xc0033e60
c000a001:	0f b7 d2             	movzx  edx,dx
c000a004:	0f b7 c0             	movzx  eax,ax
c000a007:	39 c2                	cmp    edx,eax
c000a009:	75 05                	jne    c000a010 <tcp_new_port+0x64>
c000a00b:	eb a3                	jmp    c0009fb0 <tcp_new_port+0x4>
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a014:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a01b:	90                   	nop
c000a01c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000a021:	75 d1                	jne    c0009ff4 <tcp_new_port+0x48>
c000a023:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000a028:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c000a02d:	7e b1                	jle    c0009fe0 <tcp_new_port+0x34>
c000a02f:	66 a1 60 3e 03 c0    	mov    ax,ds:0xc0033e60
c000a035:	83 c4 10             	add    esp,0x10
c000a038:	c3                   	ret    
c000a039:	8d 76 00             	lea    esi,[esi+0x0]

c000a03c <tcp_bind>:
c000a03c:	83 ec 2c             	sub    esp,0x2c
c000a03f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a043:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a048:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000a050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a057:	85 c0                	test   eax,eax
c000a059:	74 1d                	je     c000a078 <tcp_bind+0x3c>
c000a05b:	83 ec 08             	sub    esp,0x8
c000a05e:	68 28 03 03 c0       	push   0xc0030328
c000a063:	68 46 fd 02 c0       	push   0xc002fd46
c000a068:	e8 5f 5d 01 00       	call   c001fdcc <CPrintf>
c000a06d:	83 c4 10             	add    esp,0x10
c000a070:	b0 fa                	mov    al,0xfa
c000a072:	e9 f1 00 00 00       	jmp    c000a168 <tcp_bind+0x12c>
c000a077:	90                   	nop
c000a078:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000a07d:	85 c0                	test   eax,eax
c000a07f:	75 0b                	jne    c000a08c <tcp_bind+0x50>
c000a081:	e8 26 ff ff ff       	call   c0009fac <tcp_new_port>
c000a086:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a08b:	90                   	nop
c000a08c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a094:	eb 7a                	jmp    c000a110 <tcp_bind+0xd4>
c000a096:	66 90                	xchg   ax,ax
c000a098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a09c:	8b 04 85 20 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf9e0]
c000a0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0a9:	eb 59                	jmp    c000a104 <tcp_bind+0xc8>
c000a0ab:	90                   	nop
c000a0ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a0b3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000a0b8:	0f b7 c0             	movzx  eax,ax
c000a0bb:	39 c2                	cmp    edx,eax
c000a0bd:	75 39                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0c3:	85 c0                	test   eax,eax
c000a0c5:	74 2d                	je     c000a0f4 <tcp_bind+0xb8>
c000a0c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0cd:	85 c0                	test   eax,eax
c000a0cf:	74 23                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a0d6:	74 1c                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0de:	85 c0                	test   eax,eax
c000a0e0:	74 12                	je     c000a0f4 <tcp_bind+0xb8>
c000a0e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0ee:	39 c2                	cmp    edx,eax
c000a0f0:	75 06                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0f2:	66 90                	xchg   ax,ax
c000a0f4:	b0 f8                	mov    al,0xf8
c000a0f6:	eb 70                	jmp    c000a168 <tcp_bind+0x12c>
c000a0f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a103:	90                   	nop
c000a104:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a109:	75 a1                	jne    c000a0ac <tcp_bind+0x70>
c000a10b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a114:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c000a118:	0f 8c 7a ff ff ff    	jl     c000a098 <tcp_bind+0x5c>
c000a11e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a123:	74 17                	je     c000a13c <tcp_bind+0x100>
c000a125:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a129:	8b 00                	mov    eax,DWORD PTR [eax]
c000a12b:	85 c0                	test   eax,eax
c000a12d:	74 0d                	je     c000a13c <tcp_bind+0x100>
c000a12f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a133:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a137:	8b 12                	mov    edx,DWORD PTR [edx]
c000a139:	89 10                	mov    DWORD PTR [eax],edx
c000a13b:	90                   	nop
c000a13c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a144:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000a148:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c000a14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a159:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000a15e:	e8 51 6b 00 00       	call   c0010cb4 <tcp_timer_needed>
c000a163:	b0 00                	mov    al,0x0
c000a165:	8d 76 00             	lea    esi,[esi+0x0]
c000a168:	83 c4 2c             	add    esp,0x2c
c000a16b:	c3                   	ret    

c000a16c <tcp_seg_free>:
c000a16c:	83 ec 0c             	sub    esp,0xc
c000a16f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a174:	74 32                	je     c000a1a8 <tcp_seg_free+0x3c>
c000a176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a17d:	85 c0                	test   eax,eax
c000a17f:	74 13                	je     c000a194 <tcp_seg_free+0x28>
c000a181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a188:	83 ec 0c             	sub    esp,0xc
c000a18b:	50                   	push   eax
c000a18c:	e8 63 e3 ff ff       	call   c00084f4 <pbuf_free>
c000a191:	83 c4 10             	add    esp,0x10
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a19b:	6a 04                	push   0x4
c000a19d:	e8 96 da ff ff       	call   c0007c38 <memp_free>
c000a1a2:	83 c4 10             	add    esp,0x10
c000a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1a8:	90                   	nop
c000a1a9:	83 c4 0c             	add    esp,0xc
c000a1ac:	c3                   	ret    
c000a1ad:	8d 76 00             	lea    esi,[esi+0x0]

c000a1b0 <tcp_segs_free>:
c000a1b0:	83 ec 1c             	sub    esp,0x1c
c000a1b3:	eb 27                	jmp    c000a1dc <tcp_segs_free+0x2c>
c000a1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a1be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1c2:	83 ec 0c             	sub    esp,0xc
c000a1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c9:	e8 9e ff ff ff       	call   c000a16c <tcp_seg_free>
c000a1ce:	83 c4 10             	add    esp,0x10
c000a1d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a1e1:	75 d5                	jne    c000a1b8 <tcp_segs_free+0x8>
c000a1e3:	90                   	nop
c000a1e4:	83 c4 1c             	add    esp,0x1c
c000a1e7:	c3                   	ret    

c000a1e8 <tcp_setprio>:
c000a1e8:	83 ec 04             	sub    esp,0x4
c000a1eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1ef:	88 04 24             	mov    BYTE PTR [esp],al
c000a1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a1f6:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a1f9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a1fc:	90                   	nop
c000a1fd:	83 c4 04             	add    esp,0x4
c000a200:	c3                   	ret    
c000a201:	8d 76 00             	lea    esi,[esi+0x0]

c000a204 <tcp_seg_copy>:
c000a204:	83 ec 1c             	sub    esp,0x1c
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	6a 04                	push   0x4
c000a20c:	e8 fb d8 ff ff       	call   c0007b0c <memp_malloc>
c000a211:	83 c4 10             	add    esp,0x10
c000a214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a218:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a21d:	75 09                	jne    c000a228 <tcp_seg_copy+0x24>
c000a21f:	b8 00 00 00 00       	mov    eax,0x0
c000a224:	eb 2e                	jmp    c000a254 <tcp_seg_copy+0x50>
c000a226:	66 90                	xchg   ax,ax
c000a228:	83 ec 04             	sub    esp,0x4
c000a22b:	6a 10                	push   0x10
c000a22d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a231:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a235:	e8 40 61 ff ff       	call   c000037a <memcpy>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a241:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a244:	83 ec 0c             	sub    esp,0xc
c000a247:	50                   	push   eax
c000a248:	e8 af ea ff ff       	call   c0008cfc <pbuf_ref>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a254:	83 c4 1c             	add    esp,0x1c
c000a257:	c3                   	ret    

c000a258 <tcp_arg>:
c000a258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a25c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a260:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a263:	90                   	nop
c000a264:	c3                   	ret    
c000a265:	8d 76 00             	lea    esi,[esi+0x0]

c000a268 <tcp_recv>:
c000a268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a26c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a270:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a276:	90                   	nop
c000a277:	c3                   	ret    

c000a278 <tcp_sent>:
c000a278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a27c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a280:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a286:	90                   	nop
c000a287:	c3                   	ret    

c000a288 <tcp_err>:
c000a288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a28c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a290:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a296:	90                   	nop
c000a297:	c3                   	ret    

c000a298 <tcp_accept>:
c000a298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a29c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2a0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a2a3:	90                   	nop
c000a2a4:	c3                   	ret    
c000a2a5:	8d 76 00             	lea    esi,[esi+0x0]

c000a2a8 <tcp_poll>:
c000a2a8:	83 ec 04             	sub    esp,0x4
c000a2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2af:	88 04 24             	mov    BYTE PTR [esp],al
c000a2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ba:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a2c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2c4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a2c7:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a2ca:	90                   	nop
c000a2cb:	83 c4 04             	add    esp,0x4
c000a2ce:	c3                   	ret    
c000a2cf:	90                   	nop

c000a2d0 <tcp_pcb_purge>:
c000a2d0:	83 ec 0c             	sub    esp,0xc
c000a2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2da:	85 c0                	test   eax,eax
c000a2dc:	0f 84 ca 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2e9:	83 f8 0a             	cmp    eax,0xa
c000a2ec:	0f 84 ba 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2f9:	83 f8 01             	cmp    eax,0x1
c000a2fc:	0f 84 aa 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a306:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a30c:	85 c0                	test   eax,eax
c000a30e:	74 24                	je     c000a334 <tcp_pcb_purge+0x64>
c000a310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a314:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a31a:	83 ec 0c             	sub    esp,0xc
c000a31d:	50                   	push   eax
c000a31e:	e8 d1 e1 ff ff       	call   c00084f4 <pbuf_free>
c000a323:	83 c4 10             	add    esp,0x10
c000a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32a:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a338:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a33e:	83 ec 0c             	sub    esp,0xc
c000a341:	50                   	push   eax
c000a342:	e8 69 fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a347:	83 c4 10             	add    esp,0x10
c000a34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a34e:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a35c:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a366:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a369:	83 ec 0c             	sub    esp,0xc
c000a36c:	50                   	push   eax
c000a36d:	e8 3e fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a372:	83 c4 10             	add    esp,0x10
c000a375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a379:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a37c:	83 ec 0c             	sub    esp,0xc
c000a37f:	50                   	push   eax
c000a380:	e8 2b fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a385:	83 c4 10             	add    esp,0x10
c000a388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a38c:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a397:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39e:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3a5:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a3ab:	90                   	nop
c000a3ac:	90                   	nop
c000a3ad:	83 c4 0c             	add    esp,0xc
c000a3b0:	c3                   	ret    
c000a3b1:	8d 76 00             	lea    esi,[esi+0x0]

c000a3b4 <tcp_slowtmr>:
c000a3b4:	57                   	push   edi
c000a3b5:	56                   	push   esi
c000a3b6:	53                   	push   ebx
c000a3b7:	83 ec 20             	sub    esp,0x20
c000a3ba:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a3bf:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a3c4:	83 c0 01             	add    eax,0x1
c000a3c7:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a3cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a3d4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a3d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a3dd:	e9 16 06 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a3e2:	66 90                	xchg   ax,ax
c000a3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a3eb:	85 c0                	test   eax,eax
c000a3ed:	75 15                	jne    c000a404 <tcp_slowtmr+0x50>
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	68 50 03 03 c0       	push   0xc0030350
c000a3f7:	68 46 fd 02 c0       	push   0xc002fd46
c000a3fc:	e8 cb 59 01 00       	call   c001fdcc <CPrintf>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a40b:	83 f8 01             	cmp    eax,0x1
c000a40e:	75 18                	jne    c000a428 <tcp_slowtmr+0x74>
c000a410:	83 ec 08             	sub    esp,0x8
c000a413:	68 7c 03 03 c0       	push   0xc003037c
c000a418:	68 46 fd 02 c0       	push   0xc002fd46
c000a41d:	e8 aa 59 01 00       	call   c001fdcc <CPrintf>
c000a422:	83 c4 10             	add    esp,0x10
c000a425:	8d 76 00             	lea    esi,[esi+0x0]
c000a428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a42f:	83 f8 0a             	cmp    eax,0xa
c000a432:	75 18                	jne    c000a44c <tcp_slowtmr+0x98>
c000a434:	83 ec 08             	sub    esp,0x8
c000a437:	68 a8 03 03 c0       	push   0xc00303a8
c000a43c:	68 46 fd 02 c0       	push   0xc002fd46
c000a441:	e8 86 59 01 00       	call   c001fdcc <CPrintf>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	8d 76 00             	lea    esi,[esi+0x0]
c000a44c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a451:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a45d:	83 f8 02             	cmp    eax,0x2
c000a460:	75 22                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a466:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a469:	0f b6 c0             	movzx  eax,al
c000a46c:	83 f8 06             	cmp    eax,0x6
c000a46f:	75 13                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a471:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a475:	83 c0 01             	add    eax,0x1
c000a478:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a47c:	e9 df 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a481:	8d 76 00             	lea    esi,[esi+0x0]
c000a484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a488:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a48b:	0f b6 c0             	movzx  eax,al
c000a48e:	83 f8 0c             	cmp    eax,0xc
c000a491:	75 11                	jne    c000a4a4 <tcp_slowtmr+0xf0>
c000a493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a497:	83 c0 01             	add    eax,0x1
c000a49a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a49e:	e9 bd 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a4a3:	90                   	nop
c000a4a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a8:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4ae:	0f b6 c0             	movzx  eax,al
c000a4b1:	85 c0                	test   eax,eax
c000a4b3:	0f 84 8f 00 00 00    	je     c000a548 <tcp_slowtmr+0x194>
c000a4b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4bd:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a4c3:	8d 50 01             	lea    edx,[eax+0x1]
c000a4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ca:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d4:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4e4:	0f b6 c0             	movzx  eax,al
c000a4e7:	83 e8 01             	sub    eax,0x1
c000a4ea:	8a 80 30 06 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf9d0]
c000a4f0:	0f b6 c0             	movzx  eax,al
c000a4f3:	39 c2                	cmp    edx,eax
c000a4f5:	0f 82 65 01 00 00    	jb     c000a660 <tcp_slowtmr+0x2ac>
c000a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ff:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a513:	0f b6 c0             	movzx  eax,al
c000a516:	83 f8 06             	cmp    eax,0x6
c000a519:	77 19                	ja     c000a534 <tcp_slowtmr+0x180>
c000a51b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a525:	83 c0 01             	add    eax,0x1
c000a528:	88 c2                	mov    dl,al
c000a52a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a52e:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a534:	83 ec 0c             	sub    esp,0xc
c000a537:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a53b:	e8 e8 63 00 00       	call   c0010928 <tcp_zero_window_probe>
c000a540:	83 c4 10             	add    esp,0x10
c000a543:	e9 18 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a54c:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a550:	98                   	cwde   
c000a551:	85 c0                	test   eax,eax
c000a553:	78 13                	js     c000a568 <tcp_slowtmr+0x1b4>
c000a555:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a559:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a55d:	83 c0 01             	add    eax,0x1
c000a560:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a564:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a568:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a56c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a56f:	85 c0                	test   eax,eax
c000a571:	0f 84 e9 00 00 00    	je     c000a660 <tcp_slowtmr+0x2ac>
c000a577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57b:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a57f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a583:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a586:	0f bf d2             	movsx  edx,dx
c000a589:	98                   	cwde   
c000a58a:	39 c2                	cmp    edx,eax
c000a58c:	0f 8c ce 00 00 00    	jl     c000a660 <tcp_slowtmr+0x2ac>
c000a592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a596:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a599:	83 f8 02             	cmp    eax,0x2
c000a59c:	74 3a                	je     c000a5d8 <tcp_slowtmr+0x224>
c000a59e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a2:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a5a5:	98                   	cwde   
c000a5a6:	c1 f8 03             	sar    eax,0x3
c000a5a9:	0f bf d0             	movsx  edx,ax
c000a5ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a5b4:	98                   	cwde   
c000a5b5:	01 c2                	add    edx,eax
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a5be:	0f b6 c0             	movzx  eax,al
c000a5c1:	8a 80 38 06 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf9c8]
c000a5c7:	0f b6 c0             	movzx  eax,al
c000a5ca:	88 c1                	mov    cl,al
c000a5cc:	d3 e2                	shl    edx,cl
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5d4:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a5d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5dc:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a5e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e6:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a5e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5ed:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a5f1:	0f b7 d8             	movzx  ebx,ax
c000a5f4:	0f b7 ca             	movzx  ecx,dx
c000a5f7:	39 cb                	cmp    ebx,ecx
c000a5f9:	76 05                	jbe    c000a600 <tcp_slowtmr+0x24c>
c000a5fb:	89 d0                	mov    eax,edx
c000a5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a600:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a605:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a60a:	d1 e8                	shr    eax,1
c000a60c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a610:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a61b:	0f b7 d0             	movzx  edx,ax
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a625:	0f b7 c0             	movzx  eax,ax
c000a628:	01 c0                	add    eax,eax
c000a62a:	39 c2                	cmp    edx,eax
c000a62c:	7d 12                	jge    c000a640 <tcp_slowtmr+0x28c>
c000a62e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a632:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a635:	d1 e0                	shl    eax,1
c000a637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a63b:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a63f:	90                   	nop
c000a640:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a644:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a647:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a64b:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a64f:	83 ec 0c             	sub    esp,0xc
c000a652:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a656:	e8 c9 5f 00 00       	call   c0010624 <tcp_rexmit_rto>
c000a65b:	83 c4 10             	add    esp,0x10
c000a65e:	66 90                	xchg   ax,ax
c000a660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a664:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a667:	83 f8 06             	cmp    eax,0x6
c000a66a:	75 24                	jne    c000a690 <tcp_slowtmr+0x2dc>
c000a66c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a676:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a679:	29 c2                	sub    edx,eax
c000a67b:	89 d0                	mov    eax,edx
c000a67d:	83 f8 28             	cmp    eax,0x28
c000a680:	76 0e                	jbe    c000a690 <tcp_slowtmr+0x2dc>
c000a682:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a686:	83 c0 01             	add    eax,0x1
c000a689:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a68d:	8d 76 00             	lea    esi,[esi+0x0]
c000a690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a694:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a697:	0f b6 c0             	movzx  eax,al
c000a69a:	83 e0 08             	and    eax,0x8
c000a69d:	0f 84 e1 00 00 00    	je     c000a784 <tcp_slowtmr+0x3d0>
c000a6a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6aa:	83 f8 04             	cmp    eax,0x4
c000a6ad:	74 11                	je     c000a6c0 <tcp_slowtmr+0x30c>
c000a6af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6b6:	83 f8 07             	cmp    eax,0x7
c000a6b9:	0f 85 c5 00 00 00    	jne    c000a784 <tcp_slowtmr+0x3d0>
c000a6bf:	90                   	nop
c000a6c0:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a6c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6cd:	89 d1                	mov    ecx,edx
c000a6cf:	29 c1                	sub    ecx,eax
c000a6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d5:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a6db:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a6e0:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a6e5:	f7 e2                	mul    edx
c000a6e7:	89 d0                	mov    eax,edx
c000a6e9:	c1 e8 05             	shr    eax,0x5
c000a6ec:	39 c1                	cmp    ecx,eax
c000a6ee:	76 18                	jbe    c000a708 <tcp_slowtmr+0x354>
c000a6f0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6f4:	83 c0 01             	add    eax,0x1
c000a6f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6fb:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a6ff:	83 c0 01             	add    eax,0x1
c000a702:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a706:	eb 7c                	jmp    c000a784 <tcp_slowtmr+0x3d0>
c000a708:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a70e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a712:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a715:	89 d3                	mov    ebx,edx
c000a717:	29 c3                	sub    ebx,eax
c000a719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a71d:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a723:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a727:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a72d:	0f b6 d0             	movzx  edx,al
c000a730:	89 d0                	mov    eax,edx
c000a732:	c1 e0 03             	shl    eax,0x3
c000a735:	01 d0                	add    eax,edx
c000a737:	c1 e0 03             	shl    eax,0x3
c000a73a:	01 d0                	add    eax,edx
c000a73c:	c1 e0 02             	shl    eax,0x2
c000a73f:	01 d0                	add    eax,edx
c000a741:	c1 e0 05             	shl    eax,0x5
c000a744:	29 d0                	sub    eax,edx
c000a746:	c1 e0 03             	shl    eax,0x3
c000a749:	01 c8                	add    eax,ecx
c000a74b:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a750:	f7 e2                	mul    edx
c000a752:	89 d0                	mov    eax,edx
c000a754:	c1 e8 05             	shr    eax,0x5
c000a757:	39 c3                	cmp    ebx,eax
c000a759:	76 29                	jbe    c000a784 <tcp_slowtmr+0x3d0>
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a762:	e8 f9 60 00 00       	call   c0010860 <tcp_keepalive>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a76e:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a774:	83 c0 01             	add    eax,0x1
c000a777:	88 c2                	mov    dl,al
c000a779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a77d:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a783:	90                   	nop
c000a784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a788:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a78e:	85 c0                	test   eax,eax
c000a790:	74 4e                	je     c000a7e0 <tcp_slowtmr+0x42c>
c000a792:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a798:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a79c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a79f:	89 d1                	mov    ecx,edx
c000a7a1:	29 c1                	sub    ecx,eax
c000a7a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a7:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a7aa:	0f bf d0             	movsx  edx,ax
c000a7ad:	89 d0                	mov    eax,edx
c000a7af:	01 c0                	add    eax,eax
c000a7b1:	01 d0                	add    eax,edx
c000a7b3:	01 c0                	add    eax,eax
c000a7b5:	39 c1                	cmp    ecx,eax
c000a7b7:	72 27                	jb     c000a7e0 <tcp_slowtmr+0x42c>
c000a7b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7bd:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7c3:	83 ec 0c             	sub    esp,0xc
c000a7c6:	50                   	push   eax
c000a7c7:	e8 e4 f9 ff ff       	call   c000a1b0 <tcp_segs_free>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d3:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a7e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a7e7:	83 f8 03             	cmp    eax,0x3
c000a7ea:	75 24                	jne    c000a810 <tcp_slowtmr+0x45c>
c000a7ec:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7f6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7f9:	29 c2                	sub    edx,eax
c000a7fb:	89 d0                	mov    eax,edx
c000a7fd:	83 f8 28             	cmp    eax,0x28
c000a800:	76 0e                	jbe    c000a810 <tcp_slowtmr+0x45c>
c000a802:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a806:	83 c0 01             	add    eax,0x1
c000a809:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a80d:	8d 76 00             	lea    esi,[esi+0x0]
c000a810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a814:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a817:	83 f8 09             	cmp    eax,0x9
c000a81a:	75 24                	jne    c000a840 <tcp_slowtmr+0x48c>
c000a81c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a826:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a829:	29 c2                	sub    edx,eax
c000a82b:	89 d0                	mov    eax,edx
c000a82d:	3d f0 00 00 00       	cmp    eax,0xf0
c000a832:	76 0c                	jbe    c000a840 <tcp_slowtmr+0x48c>
c000a834:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a838:	83 c0 01             	add    eax,0x1
c000a83b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a83f:	90                   	nop
c000a840:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a845:	85 c0                	test   eax,eax
c000a847:	0f 84 13 01 00 00    	je     c000a960 <tcp_slowtmr+0x5ac>
c000a84d:	83 ec 0c             	sub    esp,0xc
c000a850:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a854:	e8 77 fa ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a861:	74 31                	je     c000a894 <tcp_slowtmr+0x4e0>
c000a863:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a868:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a86c:	75 16                	jne    c000a884 <tcp_slowtmr+0x4d0>
c000a86e:	83 ec 08             	sub    esp,0x8
c000a871:	68 d8 03 03 c0       	push   0xc00303d8
c000a876:	68 46 fd 02 c0       	push   0xc002fd46
c000a87b:	e8 4c 55 01 00       	call   c001fdcc <CPrintf>
c000a880:	83 c4 10             	add    esp,0x10
c000a883:	90                   	nop
c000a884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a888:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a88b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a88f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a892:	eb 2c                	jmp    c000a8c0 <tcp_slowtmr+0x50c>
c000a894:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a899:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a89d:	74 15                	je     c000a8b4 <tcp_slowtmr+0x500>
c000a89f:	83 ec 08             	sub    esp,0x8
c000a8a2:	68 04 04 03 c0       	push   0xc0030404
c000a8a7:	68 46 fd 02 c0       	push   0xc002fd46
c000a8ac:	e8 1b 55 01 00       	call   c001fdcc <CPrintf>
c000a8b1:	83 c4 10             	add    esp,0x10
c000a8b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8bb:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c4:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8ca:	85 c0                	test   eax,eax
c000a8cc:	74 1e                	je     c000a8ec <tcp_slowtmr+0x538>
c000a8ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d2:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8dc:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a8df:	83 ec 08             	sub    esp,0x8
c000a8e2:	6a f6                	push   0xfffffff6
c000a8e4:	52                   	push   edx
c000a8e5:	ff d0                	call   eax
c000a8e7:	83 c4 10             	add    esp,0x10
c000a8ea:	66 90                	xchg   ax,ax
c000a8ec:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a8f1:	85 c0                	test   eax,eax
c000a8f3:	74 3f                	je     c000a934 <tcp_slowtmr+0x580>
c000a8f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f9:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a8fd:	0f b7 f0             	movzx  esi,ax
c000a900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a904:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a907:	0f b7 d8             	movzx  ebx,ax
c000a90a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a90e:	8d 78 04             	lea    edi,[eax+0x4]
c000a911:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a915:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a919:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a91c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a920:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a923:	83 ec 08             	sub    esp,0x8
c000a926:	56                   	push   esi
c000a927:	53                   	push   ebx
c000a928:	57                   	push   edi
c000a929:	51                   	push   ecx
c000a92a:	52                   	push   edx
c000a92b:	50                   	push   eax
c000a92c:	e8 7f 5b 00 00       	call   c00104b0 <tcp_rst>
c000a931:	83 c4 20             	add    esp,0x20
c000a934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a947:	83 ec 08             	sub    esp,0x8
c000a94a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a94e:	6a 02                	push   0x2
c000a950:	e8 e3 d2 ff ff       	call   c0007c38 <memp_free>
c000a955:	83 c4 10             	add    esp,0x10
c000a958:	e9 9b 00 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a95d:	8d 76 00             	lea    esi,[esi+0x0]
c000a960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a96f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a977:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a97a:	83 c0 01             	add    eax,0x1
c000a97d:	88 c2                	mov    dl,al
c000a97f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a983:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a986:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a98a:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a98d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a991:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a994:	0f b6 d2             	movzx  edx,dl
c000a997:	0f b6 c0             	movzx  eax,al
c000a99a:	39 c2                	cmp    edx,eax
c000a99c:	72 5a                	jb     c000a9f8 <tcp_slowtmr+0x644>
c000a99e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a2:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a9a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9aa:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9b0:	85 c0                	test   eax,eax
c000a9b2:	74 24                	je     c000a9d8 <tcp_slowtmr+0x624>
c000a9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9b8:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9c2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a9c5:	83 ec 08             	sub    esp,0x8
c000a9c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9cc:	52                   	push   edx
c000a9cd:	ff d0                	call   eax
c000a9cf:	83 c4 10             	add    esp,0x10
c000a9d2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a9d6:	eb 08                	jmp    c000a9e0 <tcp_slowtmr+0x62c>
c000a9d8:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a9e0:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a9e5:	85 c0                	test   eax,eax
c000a9e7:	75 0f                	jne    c000a9f8 <tcp_slowtmr+0x644>
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a9f0:	e8 2f 56 00 00       	call   c0010024 <tcp_output>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a9fd:	0f 85 e1 f9 ff ff    	jne    c000a3e4 <tcp_slowtmr+0x30>
c000aa03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aa0b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aa10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa14:	e9 0b 01 00 00       	jmp    c000ab24 <tcp_slowtmr+0x770>
c000aa19:	8d 76 00             	lea    esi,[esi+0x0]
c000aa1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa23:	83 f8 0a             	cmp    eax,0xa
c000aa26:	74 18                	je     c000aa40 <tcp_slowtmr+0x68c>
c000aa28:	83 ec 08             	sub    esp,0x8
c000aa2b:	68 30 04 03 c0       	push   0xc0030430
c000aa30:	68 46 fd 02 c0       	push   0xc002fd46
c000aa35:	e8 92 53 01 00       	call   c001fdcc <CPrintf>
c000aa3a:	83 c4 10             	add    esp,0x10
c000aa3d:	8d 76 00             	lea    esi,[esi+0x0]
c000aa40:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aa45:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000aa4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa4f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000aa52:	29 c2                	sub    edx,eax
c000aa54:	89 d0                	mov    eax,edx
c000aa56:	3d f0 00 00 00       	cmp    eax,0xf0
c000aa5b:	76 0b                	jbe    c000aa68 <tcp_slowtmr+0x6b4>
c000aa5d:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000aa61:	83 c0 01             	add    eax,0x1
c000aa64:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000aa68:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000aa6d:	85 c0                	test   eax,eax
c000aa6f:	0f 84 9b 00 00 00    	je     c000ab10 <tcp_slowtmr+0x75c>
c000aa75:	83 ec 0c             	sub    esp,0xc
c000aa78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7c:	e8 4f f8 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aa89:	74 31                	je     c000aabc <tcp_slowtmr+0x708>
c000aa8b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aa90:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aa94:	75 16                	jne    c000aaac <tcp_slowtmr+0x6f8>
c000aa96:	83 ec 08             	sub    esp,0x8
c000aa99:	68 60 04 03 c0       	push   0xc0030460
c000aa9e:	68 46 fd 02 c0       	push   0xc002fd46
c000aaa3:	e8 24 53 01 00       	call   c001fdcc <CPrintf>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	90                   	nop
c000aaac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aab0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aab7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aaba:	eb 2c                	jmp    c000aae8 <tcp_slowtmr+0x734>
c000aabc:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aac1:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aac5:	74 15                	je     c000aadc <tcp_slowtmr+0x728>
c000aac7:	83 ec 08             	sub    esp,0x8
c000aaca:	68 88 04 03 c0       	push   0xc0030488
c000aacf:	68 46 fd 02 c0       	push   0xc002fd46
c000aad4:	e8 f3 52 01 00       	call   c001fdcc <CPrintf>
c000aad9:	83 c4 10             	add    esp,0x10
c000aadc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aae0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aae3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000aae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aaf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab02:	6a 02                	push   0x2
c000ab04:	e8 2f d1 ff ff       	call   c0007c38 <memp_free>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	eb 16                	jmp    c000ab24 <tcp_slowtmr+0x770>
c000ab0e:	66 90                	xchg   ax,ax
c000ab10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab23:	90                   	nop
c000ab24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ab29:	0f 85 ed fe ff ff    	jne    c000aa1c <tcp_slowtmr+0x668>
c000ab2f:	90                   	nop
c000ab30:	83 c4 20             	add    esp,0x20
c000ab33:	5b                   	pop    ebx
c000ab34:	5e                   	pop    esi
c000ab35:	5f                   	pop    edi
c000ab36:	c3                   	ret    
c000ab37:	90                   	nop

c000ab38 <tcp_pcb_remove>:
c000ab38:	83 ec 0c             	sub    esp,0xc
c000ab3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab41:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab45:	75 11                	jne    c000ab58 <tcp_pcb_remove+0x20>
c000ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab4d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ab50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab54:	89 10                	mov    DWORD PTR [eax],edx
c000ab56:	eb 4c                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab5e:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab63:	eb 33                	jmp    c000ab98 <tcp_pcb_remove+0x60>
c000ab65:	8d 76 00             	lea    esi,[esi+0x0]
c000ab68:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab70:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab74:	75 12                	jne    c000ab88 <tcp_pcb_remove+0x50>
c000ab76:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab85:	eb 1d                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab87:	90                   	nop
c000ab88:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab90:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab95:	8d 76 00             	lea    esi,[esi+0x0]
c000ab98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab9d:	85 c0                	test   eax,eax
c000ab9f:	75 c7                	jne    c000ab68 <tcp_pcb_remove+0x30>
c000aba1:	8d 76 00             	lea    esi,[esi+0x0]
c000aba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abaf:	83 ec 0c             	sub    esp,0xc
c000abb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abb6:	e8 15 f7 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abc5:	83 f8 0a             	cmp    eax,0xa
c000abc8:	74 3e                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abd1:	83 f8 01             	cmp    eax,0x1
c000abd4:	74 32                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abda:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abdd:	0f b6 c0             	movzx  eax,al
c000abe0:	83 e0 01             	and    eax,0x1
c000abe3:	74 23                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abe9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abec:	83 c8 02             	or     eax,0x2
c000abef:	88 c2                	mov    dl,al
c000abf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abf5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000abf8:	83 ec 0c             	sub    esp,0xc
c000abfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abff:	e8 20 54 00 00       	call   c0010024 <tcp_output>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac0f:	83 f8 01             	cmp    eax,0x1
c000ac12:	74 64                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac18:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ac1b:	85 c0                	test   eax,eax
c000ac1d:	74 15                	je     c000ac34 <tcp_pcb_remove+0xfc>
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	68 2e 05 03 c0       	push   0xc003052e
c000ac27:	68 46 fd 02 c0       	push   0xc002fd46
c000ac2c:	e8 9b 51 01 00       	call   c001fdcc <CPrintf>
c000ac31:	83 c4 10             	add    esp,0x10
c000ac34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac38:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ac3b:	85 c0                	test   eax,eax
c000ac3d:	74 15                	je     c000ac54 <tcp_pcb_remove+0x11c>
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	68 46 05 03 c0       	push   0xc0030546
c000ac47:	68 46 fd 02 c0       	push   0xc002fd46
c000ac4c:	e8 7b 51 01 00       	call   c001fdcc <CPrintf>
c000ac51:	83 c4 10             	add    esp,0x10
c000ac54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac58:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ac5e:	85 c0                	test   eax,eax
c000ac60:	74 16                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac62:	83 ec 08             	sub    esp,0x8
c000ac65:	68 5f 05 03 c0       	push   0xc003055f
c000ac6a:	68 46 fd 02 c0       	push   0xc002fd46
c000ac6f:	e8 58 51 01 00       	call   c001fdcc <CPrintf>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	90                   	nop
c000ac78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac7c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ac83:	90                   	nop
c000ac84:	83 c4 0c             	add    esp,0xc
c000ac87:	c3                   	ret    

c000ac88 <tcp_close_shutdown>:
c000ac88:	57                   	push   edi
c000ac89:	56                   	push   esi
c000ac8a:	53                   	push   ebx
c000ac8b:	83 ec 20             	sub    esp,0x20
c000ac8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ac96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ac9b:	85 c0                	test   eax,eax
c000ac9d:	0f 84 41 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000aca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aca7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000acaa:	83 f8 01             	cmp    eax,0x1
c000acad:	0f 84 31 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acb7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	75 17                	jne    c000acd8 <tcp_close_shutdown+0x50>
c000acc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acc5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000acc8:	0f b7 c0             	movzx  eax,ax
c000accb:	3d 60 08 00 00       	cmp    eax,0x860
c000acd0:	0f 84 0e 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acd6:	66 90                	xchg   ax,ax
c000acd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acdc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000acdf:	0f b6 c0             	movzx  eax,al
c000ace2:	83 e0 10             	and    eax,0x10
c000ace5:	75 15                	jne    c000acfc <tcp_close_shutdown+0x74>
c000ace7:	83 ec 08             	sub    esp,0x8
c000acea:	68 76 05 03 c0       	push   0xc0030576
c000acef:	68 46 fd 02 c0       	push   0xc002fd46
c000acf4:	e8 d3 50 01 00       	call   c001fdcc <CPrintf>
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad00:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ad04:	0f b7 f0             	movzx  esi,ax
c000ad07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad0e:	0f b7 d8             	movzx  ebx,ax
c000ad11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad15:	8d 78 04             	lea    edi,[eax+0x4]
c000ad18:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ad1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad20:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ad23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad27:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ad2a:	83 ec 08             	sub    esp,0x8
c000ad2d:	56                   	push   esi
c000ad2e:	53                   	push   ebx
c000ad2f:	57                   	push   edi
c000ad30:	51                   	push   ecx
c000ad31:	52                   	push   edx
c000ad32:	50                   	push   eax
c000ad33:	e8 78 57 00 00       	call   c00104b0 <tcp_rst>
c000ad38:	83 c4 20             	add    esp,0x20
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad42:	e8 89 f5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad4f:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad53:	75 0f                	jne    c000ad64 <tcp_close_shutdown+0xdc>
c000ad55:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad5d:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ad62:	eb 48                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad64:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad69:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad6e:	eb 30                	jmp    c000ada0 <tcp_close_shutdown+0x118>
c000ad70:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad78:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad7c:	75 12                	jne    c000ad90 <tcp_close_shutdown+0x108>
c000ad7e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ad87:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ad8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ad8d:	eb 1d                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad8f:	90                   	nop
c000ad90:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad98:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c000ada0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ada5:	85 c0                	test   eax,eax
c000ada7:	75 c7                	jne    c000ad70 <tcp_close_shutdown+0xe8>
c000ada9:	8d 76 00             	lea    esi,[esi+0x0]
c000adac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adb0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000adb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adbb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000adc2:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000adc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adcc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000add3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000add8:	e8 d7 5e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000addd:	b0 00                	mov    al,0x0
c000addf:	e9 f4 01 00 00       	jmp    c000afd8 <tcp_close_shutdown+0x350>
c000ade4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ade8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000adeb:	83 f8 07             	cmp    eax,0x7
c000adee:	0f 87 a4 01 00 00    	ja     c000af98 <tcp_close_shutdown+0x310>
c000adf4:	8b 04 85 00 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa00]
c000adfb:	ff e0                	jmp    eax
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ae0c:	0f b7 c0             	movzx  eax,ax
c000ae0f:	85 c0                	test   eax,eax
c000ae11:	74 71                	je     c000ae84 <tcp_close_shutdown+0x1fc>
c000ae13:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae18:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae1c:	75 12                	jne    c000ae30 <tcp_close_shutdown+0x1a8>
c000ae1e:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae26:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ae2b:	eb 4b                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae30:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae35:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae3a:	eb 30                	jmp    c000ae6c <tcp_close_shutdown+0x1e4>
c000ae3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae48:	75 12                	jne    c000ae5c <tcp_close_shutdown+0x1d4>
c000ae4a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae53:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ae56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae59:	eb 1d                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae5b:	90                   	nop
c000ae5c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae64:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae69:	8d 76 00             	lea    esi,[esi+0x0]
c000ae6c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae71:	85 c0                	test   eax,eax
c000ae73:	75 c7                	jne    c000ae3c <tcp_close_shutdown+0x1b4>
c000ae75:	8d 76 00             	lea    esi,[esi+0x0]
c000ae78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae7c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ae83:	90                   	nop
c000ae84:	83 ec 08             	sub    esp,0x8
c000ae87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ae8b:	6a 02                	push   0x2
c000ae8d:	e8 a6 cd ff ff       	call   c0007c38 <memp_free>
c000ae92:	83 c4 10             	add    esp,0x10
c000ae95:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae9d:	e9 12 01 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aea2:	66 90                	xchg   ax,ax
c000aea4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aeb0:	68 78 68 03 c0       	push   0xc0036878
c000aeb5:	e8 7e fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aeba:	83 c4 10             	add    esp,0x10
c000aebd:	83 ec 08             	sub    esp,0x8
c000aec0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aec4:	6a 03                	push   0x3
c000aec6:	e8 6d cd ff ff       	call   c0007c38 <memp_free>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aed6:	e9 d9 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aedb:	90                   	nop
c000aedc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aee1:	83 ec 08             	sub    esp,0x8
c000aee4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aee8:	68 70 68 03 c0       	push   0xc0036870
c000aeed:	e8 46 fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	83 ec 08             	sub    esp,0x8
c000aef8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aefc:	6a 02                	push   0x2
c000aefe:	e8 35 cd ff ff       	call   c0007c38 <memp_free>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af0e:	e9 a1 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000af13:	90                   	nop
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af1b:	e8 54 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af20:	83 c4 10             	add    esp,0x10
c000af23:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af27:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af2c:	85 c0                	test   eax,eax
c000af2e:	75 78                	jne    c000afa8 <tcp_close_shutdown+0x320>
c000af30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af34:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af3b:	eb 6b                	jmp    c000afa8 <tcp_close_shutdown+0x320>
c000af3d:	8d 76 00             	lea    esi,[esi+0x0]
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af47:	e8 28 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af58:	85 c0                	test   eax,eax
c000af5a:	75 50                	jne    c000afac <tcp_close_shutdown+0x324>
c000af5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af60:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af67:	eb 43                	jmp    c000afac <tcp_close_shutdown+0x324>
c000af69:	8d 76 00             	lea    esi,[esi+0x0]
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af73:	e8 fc 4c 00 00       	call   c000fc74 <tcp_send_fin>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af7f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af84:	85 c0                	test   eax,eax
c000af86:	75 28                	jne    c000afb0 <tcp_close_shutdown+0x328>
c000af88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8c:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000af93:	eb 1b                	jmp    c000afb0 <tcp_close_shutdown+0x328>
c000af95:	8d 76 00             	lea    esi,[esi+0x0]
c000af98:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af9d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000afa5:	eb 0d                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afa7:	90                   	nop
c000afa8:	90                   	nop
c000afa9:	eb 09                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afab:	90                   	nop
c000afac:	90                   	nop
c000afad:	eb 05                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afaf:	90                   	nop
c000afb0:	90                   	nop
c000afb1:	8d 76 00             	lea    esi,[esi+0x0]
c000afb4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000afb9:	74 19                	je     c000afd4 <tcp_close_shutdown+0x34c>
c000afbb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afc0:	85 c0                	test   eax,eax
c000afc2:	75 10                	jne    c000afd4 <tcp_close_shutdown+0x34c>
c000afc4:	83 ec 0c             	sub    esp,0xc
c000afc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000afcb:	e8 54 50 00 00       	call   c0010024 <tcp_output>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	90                   	nop
c000afd4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000afd8:	83 c4 20             	add    esp,0x20
c000afdb:	5b                   	pop    ebx
c000afdc:	5e                   	pop    esi
c000afdd:	5f                   	pop    edi
c000afde:	c3                   	ret    
c000afdf:	90                   	nop

c000afe0 <tcp_close>:
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afea:	83 f8 01             	cmp    eax,0x1
c000afed:	74 15                	je     c000b004 <tcp_close+0x24>
c000afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aff6:	83 c8 10             	or     eax,0x10
c000aff9:	88 c2                	mov    dl,al
c000affb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afff:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b002:	66 90                	xchg   ax,ax
c000b004:	83 ec 08             	sub    esp,0x8
c000b007:	6a 01                	push   0x1
c000b009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00d:	e8 76 fc ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	83 c4 0c             	add    esp,0xc
c000b018:	c3                   	ret    
c000b019:	8d 76 00             	lea    esi,[esi+0x0]

c000b01c <tcp_recv_null>:
c000b01c:	83 ec 1c             	sub    esp,0x1c
c000b01f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b023:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b027:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b02c:	74 2e                	je     c000b05c <tcp_recv_null+0x40>
c000b02e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b032:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b035:	0f b7 c0             	movzx  eax,ax
c000b038:	83 ec 08             	sub    esp,0x8
c000b03b:	50                   	push   eax
c000b03c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b040:	e8 af ee ff ff       	call   c0009ef4 <tcp_recved>
c000b045:	83 c4 10             	add    esp,0x10
c000b048:	83 ec 0c             	sub    esp,0xc
c000b04b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b04f:	e8 a0 d4 ff ff       	call   c00084f4 <pbuf_free>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 1f                	jmp    c000b078 <tcp_recv_null+0x5c>
c000b059:	8d 76 00             	lea    esi,[esi+0x0]
c000b05c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000b061:	85 c0                	test   eax,eax
c000b063:	75 13                	jne    c000b078 <tcp_recv_null+0x5c>
c000b065:	83 ec 0c             	sub    esp,0xc
c000b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b06c:	e8 6f ff ff ff       	call   c000afe0 <tcp_close>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	eb 06                	jmp    c000b07c <tcp_recv_null+0x60>
c000b076:	66 90                	xchg   ax,ax
c000b078:	b0 00                	mov    al,0x0
c000b07a:	66 90                	xchg   ax,ax
c000b07c:	83 c4 1c             	add    esp,0x1c
c000b07f:	c3                   	ret    

c000b080 <tcp_fasttmr>:
c000b080:	83 ec 1c             	sub    esp,0x1c
c000b083:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b08c:	e9 03 01 00 00       	jmp    c000b194 <tcp_fasttmr+0x114>
c000b091:	8d 76 00             	lea    esi,[esi+0x0]
c000b094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b098:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b09b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0a9:	85 c0                	test   eax,eax
c000b0ab:	0f 84 8f 00 00 00    	je     c000b140 <tcp_fasttmr+0xc0>
c000b0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0b5:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0bb:	85 c0                	test   eax,eax
c000b0bd:	74 31                	je     c000b0f0 <tcp_fasttmr+0x70>
c000b0bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c3:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0cd:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000b0d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0d7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000b0da:	6a 00                	push   0x0
c000b0dc:	51                   	push   ecx
c000b0dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e1:	52                   	push   edx
c000b0e2:	ff d0                	call   eax
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b0eb:	eb 23                	jmp    c000b110 <tcp_fasttmr+0x90>
c000b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b0f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0f4:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0fa:	6a 00                	push   0x0
c000b0fc:	50                   	push   eax
c000b0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b101:	6a 00                	push   0x0
c000b103:	e8 14 ff ff ff       	call   c000b01c <tcp_recv_null>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b10f:	90                   	nop
c000b110:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b115:	85 c0                	test   eax,eax
c000b117:	75 13                	jne    c000b12c <tcp_fasttmr+0xac>
c000b119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b11d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b127:	eb 17                	jmp    c000b140 <tcp_fasttmr+0xc0>
c000b129:	8d 76 00             	lea    esi,[esi+0x0]
c000b12c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b131:	83 f8 f6             	cmp    eax,0xfffffff6
c000b134:	75 0a                	jne    c000b140 <tcp_fasttmr+0xc0>
c000b136:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b13e:	66 90                	xchg   ax,ax
c000b140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b145:	74 45                	je     c000b18c <tcp_fasttmr+0x10c>
c000b147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b14b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b14e:	0f b6 c0             	movzx  eax,al
c000b151:	83 e0 01             	and    eax,0x1
c000b154:	74 36                	je     c000b18c <tcp_fasttmr+0x10c>
c000b156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b15a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b15d:	83 c8 02             	or     eax,0x2
c000b160:	88 c2                	mov    dl,al
c000b162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b166:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b169:	83 ec 0c             	sub    esp,0xc
c000b16c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b170:	e8 af 4e 00 00       	call   c0010024 <tcp_output>
c000b175:	83 c4 10             	add    esp,0x10
c000b178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b17c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b17f:	83 e0 fc             	and    eax,0xfffffffc
c000b182:	88 c2                	mov    dl,al
c000b184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b188:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b18b:	90                   	nop
c000b18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b199:	0f 85 f5 fe ff ff    	jne    c000b094 <tcp_fasttmr+0x14>
c000b19f:	90                   	nop
c000b1a0:	83 c4 1c             	add    esp,0x1c
c000b1a3:	c3                   	ret    

c000b1a4 <tcp_tmr>:
c000b1a4:	83 ec 0c             	sub    esp,0xc
c000b1a7:	e8 d4 fe ff ff       	call   c000b080 <tcp_fasttmr>
c000b1ac:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1b1:	83 c0 01             	add    eax,0x1
c000b1b4:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b1b9:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1be:	0f b6 c0             	movzx  eax,al
c000b1c1:	83 e0 01             	and    eax,0x1
c000b1c4:	74 06                	je     c000b1cc <tcp_tmr+0x28>
c000b1c6:	e8 e9 f1 ff ff       	call   c000a3b4 <tcp_slowtmr>
c000b1cb:	90                   	nop
c000b1cc:	90                   	nop
c000b1cd:	83 c4 0c             	add    esp,0xc
c000b1d0:	c3                   	ret    
c000b1d1:	8d 76 00             	lea    esi,[esi+0x0]

c000b1d4 <tcp_shutdown>:
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b1de:	83 f8 01             	cmp    eax,0x1
c000b1e1:	75 09                	jne    c000b1ec <tcp_shutdown+0x18>
c000b1e3:	b0 f3                	mov    al,0xf3
c000b1e5:	e9 92 00 00 00       	jmp    c000b27c <tcp_shutdown+0xa8>
c000b1ea:	66 90                	xchg   ax,ax
c000b1ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b1f1:	74 49                	je     c000b23c <tcp_shutdown+0x68>
c000b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b1fd:	85 c0                	test   eax,eax
c000b1ff:	74 27                	je     c000b228 <tcp_shutdown+0x54>
c000b201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b205:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b20b:	83 ec 0c             	sub    esp,0xc
c000b20e:	50                   	push   eax
c000b20f:	e8 e0 d2 ff ff       	call   c00084f4 <pbuf_free>
c000b214:	83 c4 10             	add    esp,0x10
c000b217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21b:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b225:	8d 76 00             	lea    esi,[esi+0x0]
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b22f:	83 c8 10             	or     eax,0x10
c000b232:	88 c2                	mov    dl,al
c000b234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b238:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b23b:	90                   	nop
c000b23c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b241:	74 2d                	je     c000b270 <tcp_shutdown+0x9c>
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b24a:	83 f8 03             	cmp    eax,0x3
c000b24d:	72 25                	jb     c000b274 <tcp_shutdown+0xa0>
c000b24f:	83 f8 04             	cmp    eax,0x4
c000b252:	76 08                	jbe    c000b25c <tcp_shutdown+0x88>
c000b254:	83 f8 07             	cmp    eax,0x7
c000b257:	75 1b                	jne    c000b274 <tcp_shutdown+0xa0>
c000b259:	8d 76 00             	lea    esi,[esi+0x0]
c000b25c:	83 ec 08             	sub    esp,0x8
c000b25f:	6a 00                	push   0x0
c000b261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b265:	e8 1e fa ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	eb 0d                	jmp    c000b27c <tcp_shutdown+0xa8>
c000b26f:	90                   	nop
c000b270:	90                   	nop
c000b271:	eb 05                	jmp    c000b278 <tcp_shutdown+0xa4>
c000b273:	90                   	nop
c000b274:	90                   	nop
c000b275:	8d 76 00             	lea    esi,[esi+0x0]
c000b278:	b0 00                	mov    al,0x0
c000b27a:	66 90                	xchg   ax,ax
c000b27c:	83 c4 0c             	add    esp,0xc
c000b27f:	c3                   	ret    

c000b280 <tcp_abandon>:
c000b280:	83 ec 2c             	sub    esp,0x2c
c000b283:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b287:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b28a:	83 f8 01             	cmp    eax,0x1
c000b28d:	75 15                	jne    c000b2a4 <tcp_abandon+0x24>
c000b28f:	83 ec 08             	sub    esp,0x8
c000b292:	68 b0 04 03 c0       	push   0xc00304b0
c000b297:	68 46 fd 02 c0       	push   0xc002fd46
c000b29c:	e8 2b 4b 01 00       	call   c001fdcc <CPrintf>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2ab:	83 f8 0a             	cmp    eax,0xa
c000b2ae:	75 2c                	jne    c000b2dc <tcp_abandon+0x5c>
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2b7:	68 84 68 03 c0       	push   0xc0036884
c000b2bc:	e8 77 f8 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	83 ec 08             	sub    esp,0x8
c000b2c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2cb:	6a 02                	push   0x2
c000b2cd:	e8 66 c9 ff ff       	call   c0007c38 <memp_free>
c000b2d2:	83 c4 10             	add    esp,0x10
c000b2d5:	e9 32 01 00 00       	jmp    c000b40c <tcp_abandon+0x18c>
c000b2da:	66 90                	xchg   ax,ax
c000b2dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2e0:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b2e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2eb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b2ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b2f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000b2f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b307:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b30e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b317:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b31b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b324:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b332:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b339:	83 ec 08             	sub    esp,0x8
c000b33c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b340:	68 70 68 03 c0       	push   0xc0036870
c000b345:	e8 ee f7 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b351:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b354:	85 c0                	test   eax,eax
c000b356:	74 14                	je     c000b36c <tcp_abandon+0xec>
c000b358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b35c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b35f:	83 ec 0c             	sub    esp,0xc
c000b362:	50                   	push   eax
c000b363:	e8 48 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	90                   	nop
c000b36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b370:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b373:	85 c0                	test   eax,eax
c000b375:	74 15                	je     c000b38c <tcp_abandon+0x10c>
c000b377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b37b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	50                   	push   eax
c000b382:	e8 29 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	66 90                	xchg   ax,ax
c000b38c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b390:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b396:	85 c0                	test   eax,eax
c000b398:	74 16                	je     c000b3b0 <tcp_abandon+0x130>
c000b39a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b39e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 03 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	83 ec 08             	sub    esp,0x8
c000b3b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b3b7:	6a 02                	push   0x2
c000b3b9:	e8 7a c8 ff ff       	call   c0007c38 <memp_free>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b3c6:	74 14                	je     c000b3dc <tcp_abandon+0x15c>
c000b3c8:	83 ec 08             	sub    esp,0x8
c000b3cb:	6a f6                	push   0xfffffff6
c000b3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3d5:	ff d0                	call   eax
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	66 90                	xchg   ax,ax
c000b3dc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b3e1:	74 29                	je     c000b40c <tcp_abandon+0x18c>
c000b3e3:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b3e8:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b3ed:	83 ec 08             	sub    esp,0x8
c000b3f0:	52                   	push   edx
c000b3f1:	50                   	push   eax
c000b3f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3f6:	50                   	push   eax
c000b3f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3fb:	50                   	push   eax
c000b3fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b400:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b404:	e8 a7 50 00 00       	call   c00104b0 <tcp_rst>
c000b409:	83 c4 20             	add    esp,0x20
c000b40c:	90                   	nop
c000b40d:	83 c4 2c             	add    esp,0x2c
c000b410:	c3                   	ret    
c000b411:	8d 76 00             	lea    esi,[esi+0x0]

c000b414 <tcp_abort>:
c000b414:	83 ec 0c             	sub    esp,0xc
c000b417:	83 ec 08             	sub    esp,0x8
c000b41a:	6a 01                	push   0x1
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 5b fe ff ff       	call   c000b280 <tcp_abandon>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	90                   	nop
c000b429:	83 c4 0c             	add    esp,0xc
c000b42c:	c3                   	ret    
c000b42d:	8d 76 00             	lea    esi,[esi+0x0]

c000b430 <tcp_kill_prio>:
c000b430:	83 ec 2c             	sub    esp,0x2c
c000b433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b437:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b43b:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b440:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b448:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b450:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b455:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b459:	eb 75                	jmp    c000b4d0 <tcp_kill_prio+0xa0>
c000b45b:	90                   	nop
c000b45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b460:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b463:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b468:	0f b6 c0             	movzx  eax,al
c000b46b:	39 c2                	cmp    edx,eax
c000b46d:	72 55                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b46f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b473:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b476:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b47b:	0f b6 c0             	movzx  eax,al
c000b47e:	39 c2                	cmp    edx,eax
c000b480:	72 42                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b482:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b48f:	29 c2                	sub    edx,eax
c000b491:	89 d0                	mov    eax,edx
c000b493:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b497:	77 2b                	ja     c000b4c4 <tcp_kill_prio+0x94>
c000b499:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b49f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4a6:	29 c2                	sub    edx,eax
c000b4a8:	89 d0                	mov    eax,edx
c000b4aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ba:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4bd:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4cf:	90                   	nop
c000b4d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4d5:	75 85                	jne    c000b45c <tcp_kill_prio+0x2c>
c000b4d7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b4dc:	74 12                	je     c000b4f0 <tcp_kill_prio+0xc0>
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b4e5:	e8 2a ff ff ff       	call   c000b414 <tcp_abort>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	90                   	nop
c000b4f1:	83 c4 2c             	add    esp,0x2c
c000b4f4:	c3                   	ret    
c000b4f5:	8d 76 00             	lea    esi,[esi+0x0]

c000b4f8 <tcp_kill_timewait>:
c000b4f8:	83 ec 1c             	sub    esp,0x1c
c000b4fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b503:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b50b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b514:	eb 42                	jmp    c000b558 <tcp_kill_timewait+0x60>
c000b516:	66 90                	xchg   ax,ax
c000b518:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b51e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b522:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b525:	29 c2                	sub    edx,eax
c000b527:	89 d0                	mov    eax,edx
c000b529:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b52d:	77 1d                	ja     c000b54c <tcp_kill_timewait+0x54>
c000b52f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b539:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b53c:	29 c2                	sub    edx,eax
c000b53e:	89 d0                	mov    eax,edx
c000b540:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b548:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b550:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b557:	90                   	nop
c000b558:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b55d:	75 b9                	jne    c000b518 <tcp_kill_timewait+0x20>
c000b55f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b564:	74 12                	je     c000b578 <tcp_kill_timewait+0x80>
c000b566:	83 ec 0c             	sub    esp,0xc
c000b569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56d:	e8 a2 fe ff ff       	call   c000b414 <tcp_abort>
c000b572:	83 c4 10             	add    esp,0x10
c000b575:	8d 76 00             	lea    esi,[esi+0x0]
c000b578:	90                   	nop
c000b579:	83 c4 1c             	add    esp,0x1c
c000b57c:	c3                   	ret    
c000b57d:	8d 76 00             	lea    esi,[esi+0x0]

c000b580 <tcp_next_iss>:
c000b580:	8b 15 5c 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e5c
c000b586:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b58b:	01 d0                	add    eax,edx
c000b58d:	a3 5c 3e 03 c0       	mov    ds:0xc0033e5c,eax
c000b592:	a1 5c 3e 03 c0       	mov    eax,ds:0xc0033e5c
c000b597:	c3                   	ret    

c000b598 <tcp_alloc>:
c000b598:	83 ec 2c             	sub    esp,0x2c
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b5a3:	83 ec 0c             	sub    esp,0xc
c000b5a6:	6a 02                	push   0x2
c000b5a8:	e8 5f c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5b9:	75 6d                	jne    c000b628 <tcp_alloc+0x90>
c000b5bb:	e8 38 ff ff ff       	call   c000b4f8 <tcp_kill_timewait>
c000b5c0:	83 ec 0c             	sub    esp,0xc
c000b5c3:	6a 02                	push   0x2
c000b5c5:	e8 42 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5d6:	75 38                	jne    c000b610 <tcp_alloc+0x78>
c000b5d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b5dd:	83 ec 0c             	sub    esp,0xc
c000b5e0:	50                   	push   eax
c000b5e1:	e8 4a fe ff ff       	call   c000b430 <tcp_kill_prio>
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	83 ec 0c             	sub    esp,0xc
c000b5ec:	6a 02                	push   0x2
c000b5ee:	e8 19 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5ff:	74 0f                	je     c000b610 <tcp_alloc+0x78>
c000b601:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b607:	83 e8 01             	sub    eax,0x1
c000b60a:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b610:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b615:	74 11                	je     c000b628 <tcp_alloc+0x90>
c000b617:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b61d:	83 e8 01             	sub    eax,0x1
c000b620:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b626:	66 90                	xchg   ax,ax
c000b628:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b62d:	0f 84 09 01 00 00    	je     c000b73c <tcp_alloc+0x1a4>
c000b633:	83 ec 04             	sub    esp,0x4
c000b636:	68 a8 00 00 00       	push   0xa8
c000b63b:	6a 00                	push   0x0
c000b63d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b641:	e8 aa 4e ff ff       	call   c00004f0 <memset>
c000b646:	83 c4 10             	add    esp,0x10
c000b649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b64d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b651:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b654:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b658:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b65e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b662:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b66c:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b676:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b67c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b680:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b688:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b68c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b690:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b69a:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a4:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b6aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ae:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b6b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b8:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b6be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6c2:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6c8:	e8 b3 fe ff ff       	call   c000b580 <tcp_next_iss>
c000b6cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6d9:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b6dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6e4:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6ef:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b6f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6fa:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b6fd:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b707:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b70a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b70e:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b712:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b716:	c7 80 8c 00 00 00 1c b0 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000b01c
c000b720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b724:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b72e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b732:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b739:	8d 76 00             	lea    esi,[esi+0x0]
c000b73c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b740:	83 c4 2c             	add    esp,0x2c
c000b743:	c3                   	ret    

c000b744 <tcp_new>:
c000b744:	83 ec 0c             	sub    esp,0xc
c000b747:	83 ec 0c             	sub    esp,0xc
c000b74a:	6a 40                	push   0x40
c000b74c:	e8 47 fe ff ff       	call   c000b598 <tcp_alloc>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 c4 0c             	add    esp,0xc
c000b757:	c3                   	ret    

c000b758 <tcp_eff_send_mss>:
c000b758:	53                   	push   ebx
c000b759:	83 ec 28             	sub    esp,0x28
c000b75c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b760:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b76c:	e8 2b 80 00 00       	call   c001379c <ip_route>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b778:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b77d:	74 3d                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b77f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b786:	0f b7 c0             	movzx  eax,ax
c000b789:	85 c0                	test   eax,eax
c000b78b:	74 2f                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b78d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b791:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b794:	83 e8 28             	sub    eax,0x28
c000b797:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b79c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7a0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b7a5:	0f b7 d8             	movzx  ebx,ax
c000b7a8:	0f b7 ca             	movzx  ecx,dx
c000b7ab:	39 cb                	cmp    ebx,ecx
c000b7ad:	76 05                	jbe    c000b7b4 <tcp_eff_send_mss+0x5c>
c000b7af:	89 d0                	mov    eax,edx
c000b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7b4:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7c0:	83 c4 28             	add    esp,0x28
c000b7c3:	5b                   	pop    ebx
c000b7c4:	c3                   	ret    
c000b7c5:	8d 76 00             	lea    esi,[esi+0x0]

c000b7c8 <tcp_connect>:
c000b7c8:	83 ec 2c             	sub    esp,0x2c
c000b7cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b7db:	85 c0                	test   eax,eax
c000b7dd:	74 1d                	je     c000b7fc <tcp_connect+0x34>
c000b7df:	83 ec 08             	sub    esp,0x8
c000b7e2:	68 e4 04 03 c0       	push   0xc00304e4
c000b7e7:	68 46 fd 02 c0       	push   0xc002fd46
c000b7ec:	e8 db 45 01 00       	call   c001fdcc <CPrintf>
c000b7f1:	83 c4 10             	add    esp,0x10
c000b7f4:	b0 f7                	mov    al,0xf7
c000b7f6:	e9 39 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b7fb:	90                   	nop
c000b7fc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b801:	74 25                	je     c000b828 <tcp_connect+0x60>
c000b803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b807:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b80b:	8b 12                	mov    edx,DWORD PTR [edx]
c000b80d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b810:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b818:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b81c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b820:	85 c0                	test   eax,eax
c000b822:	74 18                	je     c000b83c <tcp_connect+0x74>
c000b824:	eb 0a                	jmp    c000b830 <tcp_connect+0x68>
c000b826:	66 90                	xchg   ax,ax
c000b828:	b0 fa                	mov    al,0xfa
c000b82a:	e9 05 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b82f:	90                   	nop
c000b830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b834:	8b 00                	mov    eax,DWORD PTR [eax]
c000b836:	85 c0                	test   eax,eax
c000b838:	75 3a                	jne    c000b874 <tcp_connect+0xac>
c000b83a:	66 90                	xchg   ax,ax
c000b83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b840:	83 c0 04             	add    eax,0x4
c000b843:	83 ec 0c             	sub    esp,0xc
c000b846:	50                   	push   eax
c000b847:	e8 50 7f 00 00       	call   c001379c <ip_route>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b853:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b858:	75 0a                	jne    c000b864 <tcp_connect+0x9c>
c000b85a:	b0 fc                	mov    al,0xfc
c000b85c:	e9 d3 01 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b861:	8d 76 00             	lea    esi,[esi+0x0]
c000b864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b868:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b86f:	89 10                	mov    DWORD PTR [eax],edx
c000b871:	8d 76 00             	lea    esi,[esi+0x0]
c000b874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b878:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b87b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b887:	0f b7 c0             	movzx  eax,ax
c000b88a:	85 c0                	test   eax,eax
c000b88c:	75 0e                	jne    c000b89c <tcp_connect+0xd4>
c000b88e:	e8 19 e7 ff ff       	call   c0009fac <tcp_new_port>
c000b893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b897:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b89b:	90                   	nop
c000b89c:	e8 df fc ff ff       	call   c000b580 <tcp_next_iss>
c000b8a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a9:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b8b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b8b8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b8bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8bf:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b8c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8cd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8d4:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b8d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8db:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b8e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e5:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b8eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8ef:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8f6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b8f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8fd:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b907:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b90d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b914:	0f b7 c0             	movzx  eax,ax
c000b917:	83 ec 08             	sub    esp,0x8
c000b91a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b91e:	50                   	push   eax
c000b91f:	e8 34 fe ff ff       	call   c000b758 <tcp_eff_send_mss>
c000b924:	83 c4 10             	add    esp,0x10
c000b927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b92b:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b92f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b933:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b93d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b940:	89 c2                	mov    edx,eax
c000b942:	c1 e2 02             	shl    edx,0x2
c000b945:	01 d0                	add    eax,edx
c000b947:	d1 e0                	shl    eax,1
c000b949:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b94d:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b951:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b955:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b959:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b95f:	83 ec 08             	sub    esp,0x8
c000b962:	6a 02                	push   0x2
c000b964:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b968:	e8 1b 40 00 00       	call   c000f988 <tcp_enqueue_flags>
c000b96d:	83 c4 10             	add    esp,0x10
c000b970:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b974:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b979:	85 c0                	test   eax,eax
c000b97b:	0f 85 af 00 00 00    	jne    c000ba30 <tcp_connect+0x268>
c000b981:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b985:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b98c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b991:	85 c0                	test   eax,eax
c000b993:	74 6f                	je     c000ba04 <tcp_connect+0x23c>
c000b995:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b99a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b99e:	75 10                	jne    c000b9b0 <tcp_connect+0x1e8>
c000b9a0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9a8:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b9ad:	eb 49                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9af:	90                   	nop
c000b9b0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9b5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b9ba:	eb 30                	jmp    c000b9ec <tcp_connect+0x224>
c000b9bc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9c4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9c8:	75 12                	jne    c000b9dc <tcp_connect+0x214>
c000b9ca:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b9d3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b9d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b9d9:	eb 1d                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9db:	90                   	nop
c000b9dc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9e4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b9ec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9f1:	85 c0                	test   eax,eax
c000b9f3:	75 c7                	jne    c000b9bc <tcp_connect+0x1f4>
c000b9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9fc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ba03:	90                   	nop
c000ba04:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000ba0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba15:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ba1a:	e8 95 52 00 00       	call   c0010cb4 <tcp_timer_needed>
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ba26:	e8 f9 45 00 00       	call   c0010024 <tcp_output>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	66 90                	xchg   ax,ax
c000ba30:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000ba34:	83 c4 2c             	add    esp,0x2c
c000ba37:	c3                   	ret    

c000ba38 <tcp_debug_state_str>:
c000ba38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba3c:	8b 04 85 60 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf9a0]
c000ba43:	c3                   	ret    

c000ba44 <tcp_timewait_input>:
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 08             	sub    esp,0x8
c000ba48:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba4d:	0f b6 c0             	movzx  eax,al
c000ba50:	83 e0 04             	and    eax,0x4
c000ba53:	74 07                	je     c000ba5c <tcp_timewait_input+0x18>
c000ba55:	b0 00                	mov    al,0x0
c000ba57:	e9 e8 00 00 00       	jmp    c000bb44 <tcp_timewait_input+0x100>
c000ba5c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba61:	0f b6 c0             	movzx  eax,al
c000ba64:	83 e0 02             	and    eax,0x2
c000ba67:	0f 84 83 00 00 00    	je     c000baf0 <tcp_timewait_input+0xac>
c000ba6d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ba73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba77:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ba7a:	29 c2                	sub    edx,eax
c000ba7c:	89 d0                	mov    eax,edx
c000ba7e:	0f 88 88 00 00 00    	js     c000bb0c <tcp_timewait_input+0xc8>
c000ba84:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ba8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba8e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba95:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ba98:	0f b7 c0             	movzx  eax,ax
c000ba9b:	01 c8                	add    eax,ecx
c000ba9d:	29 c2                	sub    edx,eax
c000ba9f:	89 d0                	mov    eax,edx
c000baa1:	85 c0                	test   eax,eax
c000baa3:	7f 67                	jg     c000bb0c <tcp_timewait_input+0xc8>
c000baa5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000baaa:	66 8b 00             	mov    ax,WORD PTR [eax]
c000baad:	0f b7 c8             	movzx  ecx,ax
c000bab0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bab5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000bab9:	0f b7 d0             	movzx  edx,ax
c000babc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bac2:	0f b7 d8             	movzx  ebx,ax
c000bac5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000baca:	01 c3                	add    ebx,eax
c000bacc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bad1:	83 ec 08             	sub    esp,0x8
c000bad4:	51                   	push   ecx
c000bad5:	52                   	push   edx
c000bad6:	68 90 68 03 c0       	push   0xc0036890
c000badb:	68 98 68 03 c0       	push   0xc0036898
c000bae0:	53                   	push   ebx
c000bae1:	50                   	push   eax
c000bae2:	e8 c9 49 00 00       	call   c00104b0 <tcp_rst>
c000bae7:	83 c4 20             	add    esp,0x20
c000baea:	b0 00                	mov    al,0x0
c000baec:	eb 56                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000baee:	66 90                	xchg   ax,ax
c000baf0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000baf5:	0f b6 c0             	movzx  eax,al
c000baf8:	83 e0 01             	and    eax,0x1
c000bafb:	74 0f                	je     c000bb0c <tcp_timewait_input+0xc8>
c000bafd:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000bb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb07:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000bb0a:	66 90                	xchg   ax,ax
c000bb0c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb12:	0f b7 c0             	movzx  eax,ax
c000bb15:	85 c0                	test   eax,eax
c000bb17:	74 27                	je     c000bb40 <tcp_timewait_input+0xfc>
c000bb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb1d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bb20:	83 c8 02             	or     eax,0x2
c000bb23:	88 c2                	mov    dl,al
c000bb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb29:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bb2c:	83 ec 0c             	sub    esp,0xc
c000bb2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb33:	e8 ec 44 00 00       	call   c0010024 <tcp_output>
c000bb38:	83 c4 10             	add    esp,0x10
c000bb3b:	eb 07                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000bb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bb40:	b0 00                	mov    al,0x0
c000bb42:	66 90                	xchg   ax,ax
c000bb44:	83 c4 08             	add    esp,0x8
c000bb47:	5b                   	pop    ebx
c000bb48:	c3                   	ret    
c000bb49:	8d 76 00             	lea    esi,[esi+0x0]

c000bb4c <tcp_oos_insert_segment>:
c000bb4c:	53                   	push   ebx
c000bb4d:	83 ec 18             	sub    esp,0x18
c000bb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb57:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb5b:	0f b7 c0             	movzx  eax,ax
c000bb5e:	83 ec 0c             	sub    esp,0xc
c000bb61:	50                   	push   eax
c000bb62:	e8 81 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	0f b7 c0             	movzx  eax,ax
c000bb6d:	83 e0 01             	and    eax,0x1
c000bb70:	0f 84 8e 00 00 00    	je     c000bc04 <tcp_oos_insert_segment+0xb8>
c000bb76:	83 ec 0c             	sub    esp,0xc
c000bb79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bb7d:	e8 2e e6 ff ff       	call   c000a1b0 <tcp_segs_free>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000bb8d:	e9 16 01 00 00       	jmp    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bb92:	66 90                	xchg   ax,ax
c000bb94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb9b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb9f:	0f b7 c0             	movzx  eax,ax
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	50                   	push   eax
c000bba6:	e8 3d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbab:	83 c4 10             	add    esp,0x10
c000bbae:	0f b7 c0             	movzx  eax,ax
c000bbb1:	83 e0 01             	and    eax,0x1
c000bbb4:	74 2a                	je     c000bbe0 <tcp_oos_insert_segment+0x94>
c000bbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbbd:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000bbc1:	83 ec 0c             	sub    esp,0xc
c000bbc4:	6a 01                	push   0x1
c000bbc6:	e8 1d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbcb:	83 c4 10             	add    esp,0x10
c000bbce:	89 c1                	mov    ecx,eax
c000bbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000bbd7:	89 d8                	mov    eax,ebx
c000bbd9:	09 c8                	or     eax,ecx
c000bbdb:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000bbdf:	90                   	nop
c000bbe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbe4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbec:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf9:	e8 6e e5 ff ff       	call   c000a16c <tcp_seg_free>
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	8d 76 00             	lea    esi,[esi+0x0]
c000bc04:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc09:	74 35                	je     c000bc40 <tcp_oos_insert_segment+0xf4>
c000bc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc12:	0f b7 d0             	movzx  edx,ax
c000bc15:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc1a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bc27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc2b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc2e:	0f b7 c0             	movzx  eax,ax
c000bc31:	01 d0                	add    eax,edx
c000bc33:	29 c1                	sub    ecx,eax
c000bc35:	89 c8                	mov    eax,ecx
c000bc37:	0f 89 57 ff ff ff    	jns    c000bb94 <tcp_oos_insert_segment+0x48>
c000bc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc40:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc45:	74 61                	je     c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc4e:	0f b7 d0             	movzx  edx,ax
c000bc51:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc56:	01 c2                	add    edx,eax
c000bc58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc62:	29 c2                	sub    edx,eax
c000bc64:	89 d0                	mov    eax,edx
c000bc66:	85 c0                	test   eax,eax
c000bc68:	7e 3e                	jle    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc74:	89 c2                	mov    edx,eax
c000bc76:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc7b:	89 d3                	mov    ebx,edx
c000bc7d:	29 c3                	sub    ebx,eax
c000bc7f:	89 d8                	mov    eax,ebx
c000bc81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc85:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000bc89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc90:	0f b7 d0             	movzx  edx,ax
c000bc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc9a:	83 ec 08             	sub    esp,0x8
c000bc9d:	52                   	push   edx
c000bc9e:	50                   	push   eax
c000bc9f:	e8 20 ce ff ff       	call   c0008ac4 <pbuf_realloc>
c000bca4:	83 c4 10             	add    esp,0x10
c000bca7:	90                   	nop
c000bca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bcb0:	89 10                	mov    DWORD PTR [eax],edx
c000bcb2:	90                   	nop
c000bcb3:	83 c4 18             	add    esp,0x18
c000bcb6:	5b                   	pop    ebx
c000bcb7:	c3                   	ret    

c000bcb8 <tcp_receive>:
c000bcb8:	57                   	push   edi
c000bcb9:	56                   	push   esi
c000bcba:	53                   	push   ebx
c000bcbb:	83 ec 30             	sub    esp,0x30
c000bcbe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcc6:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bccb:	0f b6 c0             	movzx  eax,al
c000bcce:	83 e0 10             	and    eax,0x10
c000bcd1:	0f 84 e5 07 00 00    	je     c000c4bc <tcp_receive+0x804>
c000bcd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcdb:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bcde:	0f b7 d0             	movzx  edx,ax
c000bce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce5:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bce8:	01 d0                	add    eax,edx
c000bcea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bcee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf2:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bcf5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bcfa:	29 c2                	sub    edx,eax
c000bcfc:	89 d0                	mov    eax,edx
c000bcfe:	78 50                	js     c000bd50 <tcp_receive+0x98>
c000bd00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd04:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd07:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bd0c:	39 c2                	cmp    edx,eax
c000bd0e:	75 14                	jne    c000bd24 <tcp_receive+0x6c>
c000bd10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd14:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd17:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd1c:	29 c2                	sub    edx,eax
c000bd1e:	89 d0                	mov    eax,edx
c000bd20:	78 2e                	js     c000bd50 <tcp_receive+0x98>
c000bd22:	66 90                	xchg   ax,ax
c000bd24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd28:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd2b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd30:	39 c2                	cmp    edx,eax
c000bd32:	75 74                	jne    c000bda8 <tcp_receive+0xf0>
c000bd34:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd39:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd41:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd44:	0f b7 d2             	movzx  edx,dx
c000bd47:	0f b7 c0             	movzx  eax,ax
c000bd4a:	39 c2                	cmp    edx,eax
c000bd4c:	76 5a                	jbe    c000bda8 <tcp_receive+0xf0>
c000bd4e:	66 90                	xchg   ax,ax
c000bd50:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd55:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bd59:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd5d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bd61:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bd67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6b:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bd6e:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd78:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bd7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd82:	0f b7 c0             	movzx  eax,ax
c000bd85:	85 c0                	test   eax,eax
c000bd87:	74 1f                	je     c000bda8 <tcp_receive+0xf0>
c000bd89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd8d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bd93:	0f b6 c0             	movzx  eax,al
c000bd96:	85 c0                	test   eax,eax
c000bd98:	74 0e                	je     c000bda8 <tcp_receive+0xf0>
c000bd9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd9e:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bda5:	8d 76 00             	lea    esi,[esi+0x0]
c000bda8:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bdae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb2:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bdb5:	29 c2                	sub    edx,eax
c000bdb7:	89 d0                	mov    eax,edx
c000bdb9:	85 c0                	test   eax,eax
c000bdbb:	0f 8f ff 00 00 00    	jg     c000bec0 <tcp_receive+0x208>
c000bdc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc5:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bdcb:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bdd1:	0f b7 c0             	movzx  eax,ax
c000bdd4:	85 c0                	test   eax,eax
c000bdd6:	0f 85 cc 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bddc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bde3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bdea:	0f b7 c0             	movzx  eax,ax
c000bded:	01 d0                	add    eax,edx
c000bdef:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bdf3:	0f 85 af 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bdf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfd:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000be01:	98                   	cwde   
c000be02:	85 c0                	test   eax,eax
c000be04:	0f 88 9e 00 00 00    	js     c000bea8 <tcp_receive+0x1f0>
c000be0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be0e:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000be11:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000be16:	39 c2                	cmp    edx,eax
c000be18:	0f 85 8a 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000be1e:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000be26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2a:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be2d:	83 c0 01             	add    eax,0x1
c000be30:	88 c2                	mov    dl,al
c000be32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be36:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000be39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3d:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be40:	0f b6 c0             	movzx  eax,al
c000be43:	83 f8 03             	cmp    eax,0x3
c000be46:	76 40                	jbe    c000be88 <tcp_receive+0x1d0>
c000be48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be4c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be57:	01 d0                	add    eax,edx
c000be59:	89 c2                	mov    edx,eax
c000be5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5f:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be63:	0f b7 d2             	movzx  edx,dx
c000be66:	0f b7 c0             	movzx  eax,ax
c000be69:	39 c2                	cmp    edx,eax
c000be6b:	76 3b                	jbe    c000bea8 <tcp_receive+0x1f0>
c000be6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be71:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be7c:	01 d0                	add    eax,edx
c000be7e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be82:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be86:	eb 20                	jmp    c000bea8 <tcp_receive+0x1f0>
c000be88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8c:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be8f:	0f b6 c0             	movzx  eax,al
c000be92:	83 f8 03             	cmp    eax,0x3
c000be95:	75 11                	jne    c000bea8 <tcp_receive+0x1f0>
c000be97:	83 ec 0c             	sub    esp,0xc
c000be9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be9e:	e8 d9 48 00 00       	call   c001077c <tcp_rexmit_fast>
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	66 90                	xchg   ax,ax
c000bea8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bead:	0f 85 99 04 00 00    	jne    c000c34c <tcp_receive+0x694>
c000beb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb7:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bebb:	e9 8c 04 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000bec0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bec6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beca:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000becd:	29 c2                	sub    edx,eax
c000becf:	89 d0                	mov    eax,edx
c000bed1:	83 e8 01             	sub    eax,0x1
c000bed4:	0f 88 4a 03 00 00    	js     c000c224 <tcp_receive+0x56c>
c000beda:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bee0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee4:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bee7:	29 c2                	sub    edx,eax
c000bee9:	89 d0                	mov    eax,edx
c000beeb:	85 c0                	test   eax,eax
c000beed:	0f 8f 31 03 00 00    	jg     c000c224 <tcp_receive+0x56c>
c000bef3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000befa:	0f b6 c0             	movzx  eax,al
c000befd:	83 e0 04             	and    eax,0x4
c000bf00:	74 22                	je     c000bf24 <tcp_receive+0x26c>
c000bf02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf09:	83 e0 fb             	and    eax,0xfffffffb
c000bf0c:	88 c2                	mov    dl,al
c000bf0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf12:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bf15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf19:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bf1c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf20:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bf24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf28:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bf33:	98                   	cwde   
c000bf34:	c1 f8 03             	sar    eax,0x3
c000bf37:	89 c2                	mov    edx,eax
c000bf39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3d:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bf41:	01 d0                	add    eax,edx
c000bf43:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf47:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bf4b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf50:	89 c2                	mov    edx,eax
c000bf52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf56:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf59:	89 d7                	mov    edi,edx
c000bf5b:	29 c7                	sub    edi,eax
c000bf5d:	89 f8                	mov    eax,edi
c000bf5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf63:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bf67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6b:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bf6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf73:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf76:	01 d0                	add    eax,edx
c000bf78:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf7c:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bf80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf84:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bf88:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bf8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf92:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bf95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf9c:	83 f8 03             	cmp    eax,0x3
c000bf9f:	0f 86 db 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfa5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb1:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bfb4:	0f b7 d2             	movzx  edx,dx
c000bfb7:	0f b7 c0             	movzx  eax,ax
c000bfba:	39 c2                	cmp    edx,eax
c000bfbc:	73 4a                	jae    c000c008 <tcp_receive+0x350>
c000bfbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc2:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfcd:	01 d0                	add    eax,edx
c000bfcf:	89 c2                	mov    edx,eax
c000bfd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd5:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bfd9:	0f b7 d2             	movzx  edx,dx
c000bfdc:	0f b7 c0             	movzx  eax,ax
c000bfdf:	39 c2                	cmp    edx,eax
c000bfe1:	0f 86 99 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bff6:	01 d0                	add    eax,edx
c000bff8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bffc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c000:	e9 7b 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c005:	8d 76 00             	lea    esi,[esi+0x0]
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000c010:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c017:	0f b7 d0             	movzx  edx,ax
c000c01a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c021:	0f b7 c0             	movzx  eax,ax
c000c024:	0f af d0             	imul   edx,eax
c000c027:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c02f:	0f b7 d8             	movzx  ebx,ax
c000c032:	89 d0                	mov    eax,edx
c000c034:	89 c2                	mov    edx,eax
c000c036:	c1 fa 1f             	sar    edx,0x1f
c000c039:	f7 fb                	idiv   ebx
c000c03b:	01 c8                	add    eax,ecx
c000c03d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000c042:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c046:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c04a:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000c04f:	0f b7 c0             	movzx  eax,ax
c000c052:	39 c2                	cmp    edx,eax
c000c054:	0f 86 26 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000c05a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c05e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000c063:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c067:	e9 14 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c06c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c070:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c073:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c077:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c07b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c07e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c084:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000c087:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c08b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c08e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c095:	83 ec 0c             	sub    esp,0xc
c000c098:	50                   	push   eax
c000c099:	e8 2a cc ff ff       	call   c0008cc8 <pbuf_clen>
c000c09e:	83 c4 10             	add    esp,0x10
c000c0a1:	0f b6 c0             	movzx  eax,al
c000c0a4:	0f b7 d3             	movzx  edx,bx
c000c0a7:	0f b7 c0             	movzx  eax,ax
c000c0aa:	39 c2                	cmp    edx,eax
c000c0ac:	73 16                	jae    c000c0c4 <tcp_receive+0x40c>
c000c0ae:	83 ec 08             	sub    esp,0x8
c000c0b1:	68 8c 06 03 c0       	push   0xc003068c
c000c0b6:	68 46 fd 02 c0       	push   0xc002fd46
c000c0bb:	e8 0c 3d 01 00       	call   c001fdcc <CPrintf>
c000c0c0:	83 c4 10             	add    esp,0x10
c000c0c3:	90                   	nop
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0cb:	0f b7 c0             	movzx  eax,ax
c000c0ce:	85 c0                	test   eax,eax
c000c0d0:	74 36                	je     c000c108 <tcp_receive+0x450>
c000c0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0d9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c0dd:	0f b7 c0             	movzx  eax,ax
c000c0e0:	83 ec 0c             	sub    esp,0xc
c000c0e3:	50                   	push   eax
c000c0e4:	e8 ff 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c0e9:	83 c4 10             	add    esp,0x10
c000c0ec:	0f b7 c0             	movzx  eax,ax
c000c0ef:	83 e0 01             	and    eax,0x1
c000c0f2:	74 14                	je     c000c108 <tcp_receive+0x450>
c000c0f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0fb:	83 e8 01             	sub    eax,0x1
c000c0fe:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c102:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c106:	66 90                	xchg   ax,ax
c000c108:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	50                   	push   eax
c000c113:	e8 b0 cb ff ff       	call   c0008cc8 <pbuf_clen>
c000c118:	83 c4 10             	add    esp,0x10
c000c11b:	88 c1                	mov    cl,al
c000c11d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c121:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c124:	0f b6 c1             	movzx  eax,cl
c000c127:	89 d7                	mov    edi,edx
c000c129:	29 c7                	sub    edi,eax
c000c12b:	89 f8                	mov    eax,edi
c000c12d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c131:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c135:	83 ec 0c             	sub    esp,0xc
c000c138:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c13c:	e8 2b e0 ff ff       	call   c000a16c <tcp_seg_free>
c000c141:	83 c4 10             	add    esp,0x10
c000c144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c148:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c14b:	0f b7 c0             	movzx  eax,ax
c000c14e:	85 c0                	test   eax,eax
c000c150:	74 2e                	je     c000c180 <tcp_receive+0x4c8>
c000c152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c156:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c159:	85 c0                	test   eax,eax
c000c15b:	75 23                	jne    c000c180 <tcp_receive+0x4c8>
c000c15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c161:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c164:	85 c0                	test   eax,eax
c000c166:	75 18                	jne    c000c180 <tcp_receive+0x4c8>
c000c168:	83 ec 08             	sub    esp,0x8
c000c16b:	68 b4 06 03 c0       	push   0xc00306b4
c000c170:	68 46 fd 02 c0       	push   0xc002fd46
c000c175:	e8 52 3c 01 00       	call   c001fdcc <CPrintf>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	8d 76 00             	lea    esi,[esi+0x0]
c000c180:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c184:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c187:	85 c0                	test   eax,eax
c000c189:	74 69                	je     c000c1f4 <tcp_receive+0x53c>
c000c18b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c192:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	50                   	push   eax
c000c19c:	e8 6b 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c1a1:	83 c4 10             	add    esp,0x10
c000c1a4:	89 c3                	mov    ebx,eax
c000c1a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1aa:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1b0:	0f b7 f0             	movzx  esi,ax
c000c1b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1bd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c1c1:	0f b7 c0             	movzx  eax,ax
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	50                   	push   eax
c000c1c8:	e8 1b 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	0f b7 c0             	movzx  eax,ax
c000c1d3:	83 e0 03             	and    eax,0x3
c000c1d6:	0f 95 c0             	setne  al
c000c1d9:	0f b6 c0             	movzx  eax,al
c000c1dc:	01 f0                	add    eax,esi
c000c1de:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c1e1:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c1e6:	29 c2                	sub    edx,eax
c000c1e8:	89 d0                	mov    eax,edx
c000c1ea:	85 c0                	test   eax,eax
c000c1ec:	0f 8e 7a fe ff ff    	jle    c000c06c <tcp_receive+0x3b4>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1fb:	85 c0                	test   eax,eax
c000c1fd:	75 0d                	jne    c000c20c <tcp_receive+0x554>
c000c1ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c203:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c209:	eb 0d                	jmp    c000c218 <tcp_receive+0x560>
c000c20b:	90                   	nop
c000c20c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c210:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c216:	66 90                	xchg   ax,ax
c000c218:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c21c:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c220:	eb 0e                	jmp    c000c230 <tcp_receive+0x578>
c000c222:	66 90                	xchg   ax,ax
c000c224:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c228:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c22e:	66 90                	xchg   ax,ax
c000c230:	e9 17 01 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000c235:	8d 76 00             	lea    esi,[esi+0x0]
c000c238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c23f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c24a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c24c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c250:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c253:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c257:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c25a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c25e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c261:	83 ec 0c             	sub    esp,0xc
c000c264:	50                   	push   eax
c000c265:	e8 5e ca ff ff       	call   c0008cc8 <pbuf_clen>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	0f b6 c0             	movzx  eax,al
c000c270:	0f b7 d3             	movzx  edx,bx
c000c273:	0f b7 c0             	movzx  eax,ax
c000c276:	39 c2                	cmp    edx,eax
c000c278:	73 16                	jae    c000c290 <tcp_receive+0x5d8>
c000c27a:	83 ec 08             	sub    esp,0x8
c000c27d:	68 8c 06 03 c0       	push   0xc003068c
c000c282:	68 46 fd 02 c0       	push   0xc002fd46
c000c287:	e8 40 3b 01 00       	call   c001fdcc <CPrintf>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	90                   	nop
c000c290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c294:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c297:	0f b7 c0             	movzx  eax,ax
c000c29a:	85 c0                	test   eax,eax
c000c29c:	74 36                	je     c000c2d4 <tcp_receive+0x61c>
c000c29e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2a5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c2a9:	0f b7 c0             	movzx  eax,ax
c000c2ac:	83 ec 0c             	sub    esp,0xc
c000c2af:	50                   	push   eax
c000c2b0:	e8 33 49 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	0f b7 c0             	movzx  eax,ax
c000c2bb:	83 e0 01             	and    eax,0x1
c000c2be:	74 14                	je     c000c2d4 <tcp_receive+0x61c>
c000c2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c2c7:	83 e8 01             	sub    eax,0x1
c000c2ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2ce:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c2d2:	66 90                	xchg   ax,ax
c000c2d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c2db:	83 ec 0c             	sub    esp,0xc
c000c2de:	50                   	push   eax
c000c2df:	e8 e4 c9 ff ff       	call   c0008cc8 <pbuf_clen>
c000c2e4:	83 c4 10             	add    esp,0x10
c000c2e7:	88 c1                	mov    cl,al
c000c2e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ed:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c2f0:	0f b6 c1             	movzx  eax,cl
c000c2f3:	89 d6                	mov    esi,edx
c000c2f5:	29 c6                	sub    esi,eax
c000c2f7:	89 f0                	mov    eax,esi
c000c2f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2fd:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c301:	83 ec 0c             	sub    esp,0xc
c000c304:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c308:	e8 5f de ff ff       	call   c000a16c <tcp_seg_free>
c000c30d:	83 c4 10             	add    esp,0x10
c000c310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c314:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c317:	0f b7 c0             	movzx  eax,ax
c000c31a:	85 c0                	test   eax,eax
c000c31c:	74 2e                	je     c000c34c <tcp_receive+0x694>
c000c31e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c322:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c325:	85 c0                	test   eax,eax
c000c327:	75 23                	jne    c000c34c <tcp_receive+0x694>
c000c329:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c32d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c330:	85 c0                	test   eax,eax
c000c332:	75 18                	jne    c000c34c <tcp_receive+0x694>
c000c334:	83 ec 08             	sub    esp,0x8
c000c337:	68 b4 06 03 c0       	push   0xc00306b4
c000c33c:	68 46 fd 02 c0       	push   0xc002fd46
c000c341:	e8 86 3a 01 00       	call   c001fdcc <CPrintf>
c000c346:	83 c4 10             	add    esp,0x10
c000c349:	8d 76 00             	lea    esi,[esi+0x0]
c000c34c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c350:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c353:	85 c0                	test   eax,eax
c000c355:	74 7d                	je     c000c3d4 <tcp_receive+0x71c>
c000c357:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c35d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c361:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	50                   	push   eax
c000c36e:	e8 99 48 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c373:	83 c4 10             	add    esp,0x10
c000c376:	89 c6                	mov    esi,eax
c000c378:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c37c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c37f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c382:	0f b7 f8             	movzx  edi,ax
c000c385:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c389:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c38c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c38f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c393:	0f b7 c0             	movzx  eax,ax
c000c396:	83 ec 0c             	sub    esp,0xc
c000c399:	50                   	push   eax
c000c39a:	e8 49 48 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	0f b7 c0             	movzx  eax,ax
c000c3a5:	83 e0 03             	and    eax,0x3
c000c3a8:	0f 95 c0             	setne  al
c000c3ab:	0f b6 c0             	movzx  eax,al
c000c3ae:	01 f8                	add    eax,edi
c000c3b0:	01 f0                	add    eax,esi
c000c3b2:	29 c3                	sub    ebx,eax
c000c3b4:	89 d8                	mov    eax,ebx
c000c3b6:	78 1c                	js     c000c3d4 <tcp_receive+0x71c>
c000c3b8:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c3be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3c2:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c3c5:	29 c2                	sub    edx,eax
c000c3c7:	89 d0                	mov    eax,edx
c000c3c9:	85 c0                	test   eax,eax
c000c3cb:	0f 8e 67 fe ff ff    	jle    c000c238 <tcp_receive+0x580>
c000c3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c3d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c3db:	85 c0                	test   eax,eax
c000c3dd:	0f 84 d9 00 00 00    	je     c000c4bc <tcp_receive+0x804>
c000c3e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3e7:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c3ea:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c3ef:	29 c2                	sub    edx,eax
c000c3f1:	89 d0                	mov    eax,edx
c000c3f3:	0f 89 c3 00 00 00    	jns    c000c4bc <tcp_receive+0x804>
c000c3f9:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c3fe:	89 c2                	mov    edx,eax
c000c400:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c404:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c407:	89 d7                	mov    edi,edx
c000c409:	29 c7                	sub    edi,eax
c000c40b:	89 f8                	mov    eax,edi
c000c40d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c412:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c417:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c41b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c41e:	98                   	cwde   
c000c41f:	c1 f8 03             	sar    eax,0x3
c000c422:	89 d6                	mov    esi,edx
c000c424:	29 c6                	sub    esi,eax
c000c426:	89 f0                	mov    eax,esi
c000c428:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c42d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c431:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c434:	89 c2                	mov    edx,eax
c000c436:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c43b:	01 d0                	add    eax,edx
c000c43d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c441:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c445:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c44a:	85 c0                	test   eax,eax
c000c44c:	79 0e                	jns    c000c45c <tcp_receive+0x7a4>
c000c44e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c453:	f7 d8                	neg    eax
c000c455:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c45a:	66 90                	xchg   ax,ax
c000c45c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c461:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c465:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c469:	98                   	cwde   
c000c46a:	c1 f8 02             	sar    eax,0x2
c000c46d:	89 d7                	mov    edi,edx
c000c46f:	29 c7                	sub    edi,eax
c000c471:	89 f8                	mov    eax,edi
c000c473:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c478:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c47c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c480:	89 c2                	mov    edx,eax
c000c482:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c487:	01 d0                	add    eax,edx
c000c489:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c48d:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c491:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c495:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c498:	98                   	cwde   
c000c499:	c1 f8 03             	sar    eax,0x3
c000c49c:	89 c2                	mov    edx,eax
c000c49e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a2:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4a6:	01 d0                	add    eax,edx
c000c4a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c4ac:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c4b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4b4:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c4bb:	90                   	nop
c000c4bc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c4c2:	0f b7 c0             	movzx  eax,ax
c000c4c5:	85 c0                	test   eax,eax
c000c4c7:	0f 84 2f 0e 00 00    	je     c000d2fc <tcp_receive+0x1644>
c000c4cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4d4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4d9:	29 c2                	sub    edx,eax
c000c4db:	89 d0                	mov    eax,edx
c000c4dd:	83 e8 01             	sub    eax,0x1
c000c4e0:	0f 88 c6 01 00 00    	js     c000c6ac <tcp_receive+0x9f4>
c000c4e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4ea:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4ed:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c4f3:	0f b7 c8             	movzx  ecx,ax
c000c4f6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4fb:	01 c8                	add    eax,ecx
c000c4fd:	29 c2                	sub    edx,eax
c000c4ff:	89 d0                	mov    eax,edx
c000c501:	83 c0 01             	add    eax,0x1
c000c504:	85 c0                	test   eax,eax
c000c506:	0f 8f a0 01 00 00    	jg     c000c6ac <tcp_receive+0x9f4>
c000c50c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c510:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c513:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c518:	29 c2                	sub    edx,eax
c000c51a:	89 d0                	mov    eax,edx
c000c51c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c520:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c525:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c529:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c52e:	85 c0                	test   eax,eax
c000c530:	75 16                	jne    c000c548 <tcp_receive+0x890>
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	68 b1 08 03 c0       	push   0xc00308b1
c000c53a:	68 46 fd 02 c0       	push   0xc002fd46
c000c53f:	e8 88 38 01 00       	call   c001fdcc <CPrintf>
c000c544:	83 c4 10             	add    esp,0x10
c000c547:	90                   	nop
c000c548:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c550:	7e 16                	jle    c000c568 <tcp_receive+0x8b0>
c000c552:	83 ec 08             	sub    esp,0x8
c000c555:	68 c1 08 03 c0       	push   0xc00308c1
c000c55a:	68 46 fd 02 c0       	push   0xc002fd46
c000c55f:	e8 68 38 01 00       	call   c001fdcc <CPrintf>
c000c564:	83 c4 10             	add    esp,0x10
c000c567:	90                   	nop
c000c568:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c56d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c571:	0f b7 c0             	movzx  eax,ax
c000c574:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c578:	0f 8e b6 00 00 00    	jle    c000c634 <tcp_receive+0x97c>
c000c57e:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c583:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c586:	0f b7 c0             	movzx  eax,ax
c000c589:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c58d:	7e 15                	jle    c000c5a4 <tcp_receive+0x8ec>
c000c58f:	83 ec 08             	sub    esp,0x8
c000c592:	68 d0 08 03 c0       	push   0xc00308d0
c000c597:	68 46 fd 02 c0       	push   0xc002fd46
c000c59c:	e8 2b 38 01 00       	call   c001fdcc <CPrintf>
c000c5a1:	83 c4 10             	add    esp,0x10
c000c5a4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5b0:	29 d0                	sub    eax,edx
c000c5b2:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c5b7:	eb 33                	jmp    c000c5ec <tcp_receive+0x934>
c000c5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c5bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5c0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5c4:	0f b7 c0             	movzx  eax,ax
c000c5c7:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c5cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5d3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c5d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5db:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c5e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c5eb:	90                   	nop
c000c5ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5f0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5f4:	0f b7 c0             	movzx  eax,ax
c000c5f7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5fb:	7f bf                	jg     c000c5bc <tcp_receive+0x904>
c000c5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c601:	f7 d8                	neg    eax
c000c603:	98                   	cwde   
c000c604:	83 ec 08             	sub    esp,0x8
c000c607:	50                   	push   eax
c000c608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c60c:	e8 47 bd ff ff       	call   c0008358 <pbuf_header>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	0f b6 c0             	movzx  eax,al
c000c617:	85 c0                	test   eax,eax
c000c619:	74 51                	je     c000c66c <tcp_receive+0x9b4>
c000c61b:	83 ec 08             	sub    esp,0x8
c000c61e:	68 e0 08 03 c0       	push   0xc00308e0
c000c623:	68 46 fd 02 c0       	push   0xc002fd46
c000c628:	e8 9f 37 01 00       	call   c001fdcc <CPrintf>
c000c62d:	83 c4 10             	add    esp,0x10
c000c630:	eb 3a                	jmp    c000c66c <tcp_receive+0x9b4>
c000c632:	66 90                	xchg   ax,ax
c000c634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c638:	f7 d8                	neg    eax
c000c63a:	0f bf d0             	movsx  edx,ax
c000c63d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c642:	83 ec 08             	sub    esp,0x8
c000c645:	52                   	push   edx
c000c646:	50                   	push   eax
c000c647:	e8 0c bd ff ff       	call   c0008358 <pbuf_header>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	0f b6 c0             	movzx  eax,al
c000c652:	85 c0                	test   eax,eax
c000c654:	74 16                	je     c000c66c <tcp_receive+0x9b4>
c000c656:	83 ec 08             	sub    esp,0x8
c000c659:	68 e0 08 03 c0       	push   0xc00308e0
c000c65e:	68 46 fd 02 c0       	push   0xc002fd46
c000c663:	e8 64 37 01 00       	call   c001fdcc <CPrintf>
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	90                   	nop
c000c66c:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c671:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c677:	89 d1                	mov    ecx,edx
c000c679:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c67d:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c680:	89 ce                	mov    esi,ecx
c000c682:	29 d6                	sub    esi,edx
c000c684:	89 f2                	mov    edx,esi
c000c686:	01 d0                	add    eax,edx
c000c688:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c68e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c692:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c695:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c69a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c69f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c6a8:	eb 2a                	jmp    c000c6d4 <tcp_receive+0xa1c>
c000c6aa:	66 90                	xchg   ax,ax
c000c6ac:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6b9:	29 c2                	sub    edx,eax
c000c6bb:	89 d0                	mov    eax,edx
c000c6bd:	79 15                	jns    c000c6d4 <tcp_receive+0xa1c>
c000c6bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c6c6:	83 c8 02             	or     eax,0x2
c000c6c9:	88 c2                	mov    dl,al
c000c6cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c6d2:	66 90                	xchg   ax,ax
c000c6d4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6e1:	29 c2                	sub    edx,eax
c000c6e3:	89 d0                	mov    eax,edx
c000c6e5:	0f 88 fd 0b 00 00    	js     c000d2e8 <tcp_receive+0x1630>
c000c6eb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6f5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c6f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c6ff:	0f b7 c0             	movzx  eax,ax
c000c702:	01 c8                	add    eax,ecx
c000c704:	29 c2                	sub    edx,eax
c000c706:	89 d0                	mov    eax,edx
c000c708:	83 c0 01             	add    eax,0x1
c000c70b:	85 c0                	test   eax,eax
c000c70d:	0f 8f d5 0b 00 00    	jg     c000d2e8 <tcp_receive+0x1630>
c000c713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c717:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c71a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c71f:	39 c2                	cmp    edx,eax
c000c721:	0f 85 1d 07 00 00    	jne    c000ce44 <tcp_receive+0x118c>
c000c727:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c72d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c732:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c736:	0f b7 c0             	movzx  eax,ax
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 a6 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	0f b7 c0             	movzx  eax,ax
c000c748:	83 e0 03             	and    eax,0x3
c000c74b:	0f 95 c0             	setne  al
c000c74e:	0f b6 c0             	movzx  eax,al
c000c751:	01 d8                	add    eax,ebx
c000c753:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c759:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c760:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c766:	0f b7 d2             	movzx  edx,dx
c000c769:	0f b7 c0             	movzx  eax,ax
c000c76c:	39 c2                	cmp    edx,eax
c000c76e:	0f 83 2c 01 00 00    	jae    c000c8a0 <tcp_receive+0xbe8>
c000c774:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c779:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77d:	0f b7 c0             	movzx  eax,ax
c000c780:	83 ec 0c             	sub    esp,0xc
c000c783:	50                   	push   eax
c000c784:	e8 5f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c789:	83 c4 10             	add    esp,0x10
c000c78c:	0f b7 c0             	movzx  eax,ax
c000c78f:	83 e0 01             	and    eax,0x1
c000c792:	74 44                	je     c000c7d8 <tcp_receive+0xb20>
c000c794:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c799:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c79d:	80 e4 c0             	and    ah,0xc0
c000c7a0:	89 c3                	mov    ebx,eax
c000c7a2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7a7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ab:	0f b7 c0             	movzx  eax,ax
c000c7ae:	83 ec 0c             	sub    esp,0xc
c000c7b1:	50                   	push   eax
c000c7b2:	e8 31 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7b7:	83 c4 10             	add    esp,0x10
c000c7ba:	0f b7 c0             	movzx  eax,ax
c000c7bd:	83 e0 3e             	and    eax,0x3e
c000c7c0:	83 ec 0c             	sub    esp,0xc
c000c7c3:	50                   	push   eax
c000c7c4:	e8 1f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	09 d8                	or     eax,ebx
c000c7ce:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c7d4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c7d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c7df:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c7e5:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7ea:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ee:	0f b7 c0             	movzx  eax,ax
c000c7f1:	83 ec 0c             	sub    esp,0xc
c000c7f4:	50                   	push   eax
c000c7f5:	e8 ee 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	0f b7 c0             	movzx  eax,ax
c000c800:	83 e0 02             	and    eax,0x2
c000c803:	74 0f                	je     c000c814 <tcp_receive+0xb5c>
c000c805:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c80a:	83 e8 01             	sub    eax,0x1
c000c80d:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c813:	90                   	nop
c000c814:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c819:	0f b7 d0             	movzx  edx,ax
c000c81c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c821:	83 ec 08             	sub    esp,0x8
c000c824:	52                   	push   edx
c000c825:	50                   	push   eax
c000c826:	e8 99 c2 ff ff       	call   c0008ac4 <pbuf_realloc>
c000c82b:	83 c4 10             	add    esp,0x10
c000c82e:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c834:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c839:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c83d:	0f b7 c0             	movzx  eax,ax
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	50                   	push   eax
c000c844:	e8 9f 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	0f b7 c0             	movzx  eax,ax
c000c84f:	83 e0 03             	and    eax,0x3
c000c852:	0f 95 c0             	setne  al
c000c855:	0f b6 c0             	movzx  eax,al
c000c858:	01 d8                	add    eax,ebx
c000c85a:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c860:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c866:	0f b7 d0             	movzx  edx,ax
c000c869:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c86e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c875:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c878:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c87c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c87f:	0f b7 c0             	movzx  eax,ax
c000c882:	01 d0                	add    eax,edx
c000c884:	39 c1                	cmp    ecx,eax
c000c886:	74 18                	je     c000c8a0 <tcp_receive+0xbe8>
c000c888:	83 ec 08             	sub    esp,0x8
c000c88b:	68 d4 06 03 c0       	push   0xc00306d4
c000c890:	68 46 fd 02 c0       	push   0xc002fd46
c000c895:	e8 32 35 01 00       	call   c001fdcc <CPrintf>
c000c89a:	83 c4 10             	add    esp,0x10
c000c89d:	8d 76 00             	lea    esi,[esi+0x0]
c000c8a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8a4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8aa:	85 c0                	test   eax,eax
c000c8ac:	0f 84 7e 02 00 00    	je     c000cb30 <tcp_receive+0xe78>
c000c8b2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c8b7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8bb:	0f b7 c0             	movzx  eax,ax
c000c8be:	83 ec 0c             	sub    esp,0xc
c000c8c1:	50                   	push   eax
c000c8c2:	e8 21 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	0f b7 c0             	movzx  eax,ax
c000c8cd:	83 e0 01             	and    eax,0x1
c000c8d0:	74 4a                	je     c000c91c <tcp_receive+0xc64>
c000c8d2:	eb 34                	jmp    c000c908 <tcp_receive+0xc50>
c000c8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8d8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c8e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8e6:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f2:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8ff:	e8 68 d8 ff ff       	call   c000a16c <tcp_seg_free>
c000c904:	83 c4 10             	add    esp,0x10
c000c907:	90                   	nop
c000c908:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c90c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c912:	85 c0                	test   eax,eax
c000c914:	75 be                	jne    c000c8d4 <tcp_receive+0xc1c>
c000c916:	e9 15 02 00 00       	jmp    c000cb30 <tcp_receive+0xe78>
c000c91b:	90                   	nop
c000c91c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c920:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c926:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c92a:	e9 bd 00 00 00       	jmp    c000c9ec <tcp_receive+0xd34>
c000c92f:	90                   	nop
c000c930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c934:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c937:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c93b:	0f b7 c0             	movzx  eax,ax
c000c93e:	83 ec 0c             	sub    esp,0xc
c000c941:	50                   	push   eax
c000c942:	e8 a1 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	0f b7 c0             	movzx  eax,ax
c000c94d:	83 e0 01             	and    eax,0x1
c000c950:	74 76                	je     c000c9c8 <tcp_receive+0xd10>
c000c952:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c957:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c95b:	0f b7 c0             	movzx  eax,ax
c000c95e:	83 ec 0c             	sub    esp,0xc
c000c961:	50                   	push   eax
c000c962:	e8 81 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c967:	83 c4 10             	add    esp,0x10
c000c96a:	0f b7 c0             	movzx  eax,ax
c000c96d:	83 e0 02             	and    eax,0x2
c000c970:	75 56                	jne    c000c9c8 <tcp_receive+0xd10>
c000c972:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c977:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	6a 01                	push   0x1
c000c980:	e8 63 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c985:	83 c4 10             	add    esp,0x10
c000c988:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c98e:	09 d8                	or     eax,ebx
c000c990:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c994:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c99a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c99f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9a3:	0f b7 c0             	movzx  eax,ax
c000c9a6:	83 ec 0c             	sub    esp,0xc
c000c9a9:	50                   	push   eax
c000c9aa:	e8 39 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9af:	83 c4 10             	add    esp,0x10
c000c9b2:	0f b7 c0             	movzx  eax,ax
c000c9b5:	83 e0 03             	and    eax,0x3
c000c9b8:	0f 95 c0             	setne  al
c000c9bb:	0f b6 c0             	movzx  eax,al
c000c9be:	01 d8                	add    eax,ebx
c000c9c0:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c9c6:	66 90                	xchg   ax,ax
c000c9c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9da:	83 ec 0c             	sub    esp,0xc
c000c9dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e1:	e8 86 d7 ff ff       	call   c000a16c <tcp_seg_free>
c000c9e6:	83 c4 10             	add    esp,0x10
c000c9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c9ec:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c9f1:	74 31                	je     c000ca24 <tcp_receive+0xd6c>
c000c9f3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9f9:	0f b7 d0             	movzx  edx,ax
c000c9fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca01:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca15:	0f b7 c0             	movzx  eax,ax
c000ca18:	01 d0                	add    eax,edx
c000ca1a:	29 c1                	sub    ecx,eax
c000ca1c:	89 c8                	mov    eax,ecx
c000ca1e:	0f 89 0c ff ff ff    	jns    c000c930 <tcp_receive+0xc78>
c000ca24:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca29:	0f 84 f1 00 00 00    	je     c000cb20 <tcp_receive+0xe68>
c000ca2f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca35:	0f b7 d0             	movzx  edx,ax
c000ca38:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca3d:	01 c2                	add    edx,eax
c000ca3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca49:	29 c2                	sub    edx,eax
c000ca4b:	89 d0                	mov    eax,edx
c000ca4d:	85 c0                	test   eax,eax
c000ca4f:	0f 8e cb 00 00 00    	jle    c000cb20 <tcp_receive+0xe68>
c000ca55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca5f:	89 c2                	mov    edx,eax
c000ca61:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca66:	89 d7                	mov    edi,edx
c000ca68:	29 c7                	sub    edi,eax
c000ca6a:	89 f8                	mov    eax,edi
c000ca6c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000ca72:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000ca77:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca7b:	0f b7 c0             	movzx  eax,ax
c000ca7e:	83 ec 0c             	sub    esp,0xc
c000ca81:	50                   	push   eax
c000ca82:	e8 61 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca87:	83 c4 10             	add    esp,0x10
c000ca8a:	0f b7 c0             	movzx  eax,ax
c000ca8d:	83 e0 02             	and    eax,0x2
c000ca90:	74 0e                	je     c000caa0 <tcp_receive+0xde8>
c000ca92:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000ca97:	83 e8 01             	sub    eax,0x1
c000ca9a:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000caa0:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000caa5:	0f b7 d0             	movzx  edx,ax
c000caa8:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000caad:	83 ec 08             	sub    esp,0x8
c000cab0:	52                   	push   edx
c000cab1:	50                   	push   eax
c000cab2:	e8 0d c0 ff ff       	call   c0008ac4 <pbuf_realloc>
c000cab7:	83 c4 10             	add    esp,0x10
c000caba:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000cac0:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cac5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac9:	0f b7 c0             	movzx  eax,ax
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	50                   	push   eax
c000cad0:	e8 13 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	0f b7 c0             	movzx  eax,ax
c000cadb:	83 e0 03             	and    eax,0x3
c000cade:	0f 95 c0             	setne  al
c000cae1:	0f b6 c0             	movzx  eax,al
c000cae4:	01 d8                	add    eax,ebx
c000cae6:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000caec:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000caf2:	0f b7 d0             	movzx  edx,ax
c000caf5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cafa:	01 c2                	add    edx,eax
c000cafc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb06:	39 c2                	cmp    edx,eax
c000cb08:	74 16                	je     c000cb20 <tcp_receive+0xe68>
c000cb0a:	83 ec 08             	sub    esp,0x8
c000cb0d:	68 0c 07 03 c0       	push   0xc003070c
c000cb12:	68 46 fd 02 c0       	push   0xc002fd46
c000cb17:	e8 b0 32 01 00       	call   c001fdcc <CPrintf>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb28:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb2e:	66 90                	xchg   ax,ax
c000cb30:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb36:	0f b7 d0             	movzx  edx,ax
c000cb39:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cb3e:	01 c2                	add    edx,eax
c000cb40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb44:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb4b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb4e:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb54:	0f b7 d2             	movzx  edx,dx
c000cb57:	0f b7 c0             	movzx  eax,ax
c000cb5a:	39 c2                	cmp    edx,eax
c000cb5c:	73 16                	jae    c000cb74 <tcp_receive+0xebc>
c000cb5e:	83 ec 08             	sub    esp,0x8
c000cb61:	68 48 07 03 c0       	push   0xc0030748
c000cb66:	68 46 fd 02 c0       	push   0xc002fd46
c000cb6b:	e8 5c 32 01 00       	call   c001fdcc <CPrintf>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	90                   	nop
c000cb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb78:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb7b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb81:	89 d6                	mov    esi,edx
c000cb83:	29 c6                	sub    esi,eax
c000cb85:	89 f0                	mov    eax,esi
c000cb87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb8b:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cb8f:	83 ec 0c             	sub    esp,0xc
c000cb92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb96:	e8 7d d2 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cba3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cba6:	0f b7 c0             	movzx  eax,ax
c000cba9:	85 c0                	test   eax,eax
c000cbab:	74 17                	je     c000cbc4 <tcp_receive+0xf0c>
c000cbad:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cbb2:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cbb7:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000cbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbc4:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cbc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cbcd:	0f b7 c0             	movzx  eax,ax
c000cbd0:	83 ec 0c             	sub    esp,0xc
c000cbd3:	50                   	push   eax
c000cbd4:	e8 0f 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	0f b7 c0             	movzx  eax,ax
c000cbdf:	83 e0 01             	and    eax,0x1
c000cbe2:	0f 84 d8 01 00 00    	je     c000cdc0 <tcp_receive+0x1108>
c000cbe8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cbed:	83 c8 20             	or     eax,0x20
c000cbf0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cbf5:	e9 c6 01 00 00       	jmp    c000cdc0 <tcp_receive+0x1108>
c000cbfa:	66 90                	xchg   ax,ax
c000cbfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc00:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc0e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc1a:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000cc1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc23:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc26:	0f b7 d8             	movzx  ebx,ax
c000cc29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc30:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc34:	0f b7 c0             	movzx  eax,ax
c000cc37:	83 ec 0c             	sub    esp,0xc
c000cc3a:	50                   	push   eax
c000cc3b:	e8 a8 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc40:	83 c4 10             	add    esp,0x10
c000cc43:	0f b7 c0             	movzx  eax,ax
c000cc46:	83 e0 03             	and    eax,0x3
c000cc49:	0f 95 c0             	setne  al
c000cc4c:	0f b6 c0             	movzx  eax,al
c000cc4f:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cc52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cc59:	01 c2                	add    edx,eax
c000cc5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cc62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc66:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cc69:	0f b7 d8             	movzx  ebx,ax
c000cc6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc73:	0f b7 f0             	movzx  esi,ax
c000cc76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc7d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc81:	0f b7 c0             	movzx  eax,ax
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	50                   	push   eax
c000cc88:	e8 5b 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	0f b7 c0             	movzx  eax,ax
c000cc93:	83 e0 03             	and    eax,0x3
c000cc96:	0f 95 c0             	setne  al
c000cc99:	0f b6 c0             	movzx  eax,al
c000cc9c:	01 f0                	add    eax,esi
c000cc9e:	39 c3                	cmp    ebx,eax
c000cca0:	7d 16                	jge    c000ccb8 <tcp_receive+0x1000>
c000cca2:	83 ec 08             	sub    esp,0x8
c000cca5:	68 68 07 03 c0       	push   0xc0030768
c000ccaa:	68 46 fd 02 c0       	push   0xc002fd46
c000ccaf:	e8 18 31 01 00       	call   c001fdcc <CPrintf>
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	90                   	nop
c000ccb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccbf:	0f b7 d8             	movzx  ebx,ax
c000ccc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	50                   	push   eax
c000ccd4:	e8 0f 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	0f b7 c0             	movzx  eax,ax
c000ccdf:	83 e0 03             	and    eax,0x3
c000cce2:	0f 95 c0             	setne  al
c000cce5:	0f b6 c0             	movzx  eax,al
c000cce8:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cceb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ccf2:	29 d0                	sub    eax,edx
c000ccf4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ccf8:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd03:	e8 10 d1 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd15:	0f b7 c0             	movzx  eax,ax
c000cd18:	85 c0                	test   eax,eax
c000cd1a:	74 3c                	je     c000cd58 <tcp_receive+0x10a0>
c000cd1c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd21:	85 c0                	test   eax,eax
c000cd23:	74 1b                	je     c000cd40 <tcp_receive+0x1088>
c000cd25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd29:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd2c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd31:	83 ec 08             	sub    esp,0x8
c000cd34:	52                   	push   edx
c000cd35:	50                   	push   eax
c000cd36:	e8 f1 bf ff ff       	call   c0008d2c <pbuf_cat>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	eb 0c                	jmp    c000cd4c <tcp_receive+0x1094>
c000cd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd47:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cd4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cd57:	90                   	nop
c000cd58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd5f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cd63:	0f b7 c0             	movzx  eax,ax
c000cd66:	83 ec 0c             	sub    esp,0xc
c000cd69:	50                   	push   eax
c000cd6a:	e8 79 3e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	0f b7 c0             	movzx  eax,ax
c000cd75:	83 e0 01             	and    eax,0x1
c000cd78:	74 26                	je     c000cda0 <tcp_receive+0x10e8>
c000cd7a:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cd7f:	83 c8 20             	or     eax,0x20
c000cd82:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cd87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cd8e:	83 f8 04             	cmp    eax,0x4
c000cd91:	75 0d                	jne    c000cda0 <tcp_receive+0x10e8>
c000cd93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd97:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cd9e:	66 90                	xchg   ax,ax
c000cda0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cda4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cda6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdaa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb7:	e8 b0 d3 ff ff       	call   c000a16c <tcp_seg_free>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	90                   	nop
c000cdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdc4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdca:	85 c0                	test   eax,eax
c000cdcc:	74 22                	je     c000cdf0 <tcp_receive+0x1138>
c000cdce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd2:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cddb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cdde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cde2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cde5:	39 c2                	cmp    edx,eax
c000cde7:	0f 84 0f fe ff ff    	je     c000cbfc <tcp_receive+0xf44>
c000cded:	8d 76 00             	lea    esi,[esi+0x0]
c000cdf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdf4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cdf7:	0f b6 c0             	movzx  eax,al
c000cdfa:	83 e0 01             	and    eax,0x1
c000cdfd:	74 2d                	je     c000ce2c <tcp_receive+0x1174>
c000cdff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce03:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce06:	83 e0 fe             	and    eax,0xfffffffe
c000ce09:	88 c2                	mov    dl,al
c000ce0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce0f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce16:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce19:	83 c8 02             	or     eax,0x2
c000ce1c:	88 c2                	mov    dl,al
c000ce1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce22:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce25:	e9 22 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce2a:	66 90                	xchg   ax,ax
c000ce2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce30:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce33:	83 c8 01             	or     eax,0x1
c000ce36:	88 c2                	mov    dl,al
c000ce38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce3c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce3f:	e9 08 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce44:	83 ec 0c             	sub    esp,0xc
c000ce47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce4b:	e8 c4 2e 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000ce50:	83 c4 10             	add    esp,0x10
c000ce53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce57:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce5d:	85 c0                	test   eax,eax
c000ce5f:	75 23                	jne    c000ce84 <tcp_receive+0x11cc>
c000ce61:	83 ec 0c             	sub    esp,0xc
c000ce64:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce69:	e8 96 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 c2                	mov    edx,eax
c000ce73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce77:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce7d:	e9 ca 04 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce82:	66 90                	xchg   ax,ax
c000ce84:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ce8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce90:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce9a:	e9 21 04 00 00       	jmp    c000d2c0 <tcp_receive+0x1608>
c000ce9f:	90                   	nop
c000cea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cea4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cea7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ceaa:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceaf:	39 c2                	cmp    edx,eax
c000ceb1:	75 75                	jne    c000cf28 <tcp_receive+0x1270>
c000ceb3:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000ceb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cebd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cec0:	0f b7 d2             	movzx  edx,dx
c000cec3:	0f b7 c0             	movzx  eax,ax
c000cec6:	39 c2                	cmp    edx,eax
c000cec8:	0f 86 02 04 00 00    	jbe    c000d2d0 <tcp_receive+0x1618>
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ced6:	e8 29 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cee2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cee7:	0f 84 e7 03 00 00    	je     c000d2d4 <tcp_receive+0x161c>
c000ceed:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cef2:	74 0c                	je     c000cf00 <tcp_receive+0x1248>
c000cef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cefc:	89 10                	mov    DWORD PTR [eax],edx
c000cefe:	eb 10                	jmp    c000cf10 <tcp_receive+0x1258>
c000cf00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf08:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf0e:	66 90                	xchg   ax,ax
c000cf10:	83 ec 08             	sub    esp,0x8
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf1b:	e8 2c ec ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf20:	83 c4 10             	add    esp,0x10
c000cf23:	e9 ac 03 00 00       	jmp    c000d2d4 <tcp_receive+0x161c>
c000cf28:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf2d:	75 61                	jne    c000cf90 <tcp_receive+0x12d8>
c000cf2f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf3f:	29 c2                	sub    edx,eax
c000cf41:	89 d0                	mov    eax,edx
c000cf43:	0f 89 27 01 00 00    	jns    c000d070 <tcp_receive+0x13b8>
c000cf49:	83 ec 0c             	sub    esp,0xc
c000cf4c:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf51:	e8 ae d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf5d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cf62:	0f 84 70 03 00 00    	je     c000d2d8 <tcp_receive+0x1620>
c000cf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf70:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf76:	83 ec 08             	sub    esp,0x8
c000cf79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf81:	e8 c6 eb ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf86:	83 c4 10             	add    esp,0x10
c000cf89:	e9 4a 03 00 00       	jmp    c000d2d8 <tcp_receive+0x1620>
c000cf8e:	66 90                	xchg   ax,ax
c000cf90:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfa0:	29 c2                	sub    edx,eax
c000cfa2:	89 d0                	mov    eax,edx
c000cfa4:	83 e8 01             	sub    eax,0x1
c000cfa7:	0f 88 c3 00 00 00    	js     c000d070 <tcp_receive+0x13b8>
c000cfad:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cfb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfbd:	29 c2                	sub    edx,eax
c000cfbf:	89 d0                	mov    eax,edx
c000cfc1:	83 c0 01             	add    eax,0x1
c000cfc4:	85 c0                	test   eax,eax
c000cfc6:	0f 8f a4 00 00 00    	jg     c000d070 <tcp_receive+0x13b8>
c000cfcc:	83 ec 0c             	sub    esp,0xc
c000cfcf:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cfd4:	e8 2b d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cfe5:	0f 84 f1 02 00 00    	je     c000d2dc <tcp_receive+0x1624>
c000cfeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cff5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cff9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cffc:	0f b7 c0             	movzx  eax,ax
c000cfff:	01 c2                	add    edx,eax
c000d001:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d006:	29 c2                	sub    edx,eax
c000d008:	89 d0                	mov    eax,edx
c000d00a:	85 c0                	test   eax,eax
c000d00c:	7e 3e                	jle    c000d04c <tcp_receive+0x1394>
c000d00e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d013:	89 c2                	mov    edx,eax
c000d015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d019:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d01c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d01f:	89 d7                	mov    edi,edx
c000d021:	29 c7                	sub    edi,eax
c000d023:	89 f8                	mov    eax,edi
c000d025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d029:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d02d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d031:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d034:	0f b7 d0             	movzx  edx,ax
c000d037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d03e:	83 ec 08             	sub    esp,0x8
c000d041:	52                   	push   edx
c000d042:	50                   	push   eax
c000d043:	e8 7c ba ff ff       	call   c0008ac4 <pbuf_realloc>
c000d048:	83 c4 10             	add    esp,0x10
c000d04b:	90                   	nop
c000d04c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d054:	89 10                	mov    DWORD PTR [eax],edx
c000d056:	83 ec 08             	sub    esp,0x8
c000d059:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d061:	e8 e6 ea ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000d066:	83 c4 10             	add    esp,0x10
c000d069:	e9 6e 02 00 00       	jmp    c000d2dc <tcp_receive+0x1624>
c000d06e:	66 90                	xchg   ax,ax
c000d070:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d074:	8b 00                	mov    eax,DWORD PTR [eax]
c000d076:	85 c0                	test   eax,eax
c000d078:	0f 85 2e 02 00 00    	jne    c000d2ac <tcp_receive+0x15f4>
c000d07e:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d084:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d088:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d08b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d08e:	29 c2                	sub    edx,eax
c000d090:	89 d0                	mov    eax,edx
c000d092:	85 c0                	test   eax,eax
c000d094:	0f 8e 12 02 00 00    	jle    c000d2ac <tcp_receive+0x15f4>
c000d09a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0a5:	0f b7 c0             	movzx  eax,ax
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	50                   	push   eax
c000d0ac:	e8 37 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	0f b7 c0             	movzx  eax,ax
c000d0b7:	83 e0 01             	and    eax,0x1
c000d0ba:	0f 85 20 02 00 00    	jne    c000d2e0 <tcp_receive+0x1628>
c000d0c0:	83 ec 0c             	sub    esp,0xc
c000d0c3:	68 c0 a8 03 c0       	push   0xc003a8c0
c000d0c8:	e8 37 d1 ff ff       	call   c000a204 <tcp_seg_copy>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	89 c2                	mov    edx,eax
c000d0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0d6:	89 10                	mov    DWORD PTR [eax],edx
c000d0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0de:	85 c0                	test   eax,eax
c000d0e0:	0f 84 fe 01 00 00    	je     c000d2e4 <tcp_receive+0x162c>
c000d0e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d0f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d0f7:	0f b7 c0             	movzx  eax,ax
c000d0fa:	01 c2                	add    edx,eax
c000d0fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d101:	29 c2                	sub    edx,eax
c000d103:	89 d0                	mov    eax,edx
c000d105:	85 c0                	test   eax,eax
c000d107:	7e 3f                	jle    c000d148 <tcp_receive+0x1490>
c000d109:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d10e:	89 c2                	mov    edx,eax
c000d110:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d114:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d117:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d11a:	89 d6                	mov    esi,edx
c000d11c:	29 c6                	sub    esi,eax
c000d11e:	89 f0                	mov    eax,esi
c000d120:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d124:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d128:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d12c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d12f:	0f b7 d0             	movzx  edx,ax
c000d132:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d139:	83 ec 08             	sub    esp,0x8
c000d13c:	52                   	push   edx
c000d13d:	50                   	push   eax
c000d13e:	e8 81 b9 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d143:	83 c4 10             	add    esp,0x10
c000d146:	66 90                	xchg   ax,ax
c000d148:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d14e:	0f b7 d0             	movzx  edx,ax
c000d151:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d156:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d159:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d15d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d160:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d164:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d167:	0f b7 c0             	movzx  eax,ax
c000d16a:	01 d0                	add    eax,edx
c000d16c:	39 c1                	cmp    ecx,eax
c000d16e:	0f 86 70 01 00 00    	jbe    c000d2e4 <tcp_receive+0x162c>
c000d174:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d178:	8b 00                	mov    eax,DWORD PTR [eax]
c000d17a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d17d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d181:	0f b7 c0             	movzx  eax,ax
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	50                   	push   eax
c000d188:	e8 5b 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	0f b7 c0             	movzx  eax,ax
c000d193:	83 e0 01             	and    eax,0x1
c000d196:	74 50                	je     c000d1e8 <tcp_receive+0x1530>
c000d198:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d19c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d19e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1a5:	80 e4 c0             	and    ah,0xc0
c000d1a8:	89 c3                	mov    ebx,eax
c000d1aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1b3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1b7:	0f b7 c0             	movzx  eax,ax
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	50                   	push   eax
c000d1be:	e8 25 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1c3:	83 c4 10             	add    esp,0x10
c000d1c6:	0f b7 c0             	movzx  eax,ax
c000d1c9:	83 e0 3e             	and    eax,0x3e
c000d1cc:	83 ec 0c             	sub    esp,0xc
c000d1cf:	50                   	push   eax
c000d1d0:	e8 13 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	09 d8                	or     eax,ebx
c000d1da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d1de:	8b 12                	mov    edx,DWORD PTR [edx]
c000d1e0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000d1e3:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000d1e7:	90                   	nop
c000d1e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d1ef:	89 c2                	mov    edx,eax
c000d1f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1f5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1f8:	01 d0                	add    eax,edx
c000d1fa:	89 c3                	mov    ebx,eax
c000d1fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d201:	89 c1                	mov    ecx,eax
c000d203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d207:	8b 10                	mov    edx,DWORD PTR [eax]
c000d209:	89 d8                	mov    eax,ebx
c000d20b:	29 c8                	sub    eax,ecx
c000d20d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d211:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d215:	8b 00                	mov    eax,DWORD PTR [eax]
c000d217:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d21a:	0f b7 d0             	movzx  edx,ax
c000d21d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d221:	8b 00                	mov    eax,DWORD PTR [eax]
c000d223:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d226:	83 ec 08             	sub    esp,0x8
c000d229:	52                   	push   edx
c000d22a:	50                   	push   eax
c000d22b:	e8 94 b8 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d237:	8b 00                	mov    eax,DWORD PTR [eax]
c000d239:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d23c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d240:	8b 00                	mov    eax,DWORD PTR [eax]
c000d242:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d245:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d249:	0f b7 c0             	movzx  eax,ax
c000d24c:	83 ec 0c             	sub    esp,0xc
c000d24f:	50                   	push   eax
c000d250:	e8 93 39 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d255:	83 c4 10             	add    esp,0x10
c000d258:	0f b7 c0             	movzx  eax,ax
c000d25b:	83 e0 03             	and    eax,0x3
c000d25e:	0f 95 c0             	setne  al
c000d261:	0f b6 c0             	movzx  eax,al
c000d264:	01 d8                	add    eax,ebx
c000d266:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d26c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d272:	0f b7 d0             	movzx  edx,ax
c000d275:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d27a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d27d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d281:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d284:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d288:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d28b:	0f b7 c0             	movzx  eax,ax
c000d28e:	01 d0                	add    eax,edx
c000d290:	39 c1                	cmp    ecx,eax
c000d292:	74 50                	je     c000d2e4 <tcp_receive+0x162c>
c000d294:	83 ec 08             	sub    esp,0x8
c000d297:	68 d4 06 03 c0       	push   0xc00306d4
c000d29c:	68 46 fd 02 c0       	push   0xc002fd46
c000d2a1:	e8 26 2b 01 00       	call   c001fdcc <CPrintf>
c000d2a6:	83 c4 10             	add    esp,0x10
c000d2a9:	eb 39                	jmp    c000d2e4 <tcp_receive+0x162c>
c000d2ab:	90                   	nop
c000d2ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2be:	66 90                	xchg   ax,ax
c000d2c0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d2c5:	0f 85 d5 fb ff ff    	jne    c000cea0 <tcp_receive+0x11e8>
c000d2cb:	eb 7f                	jmp    c000d34c <tcp_receive+0x1694>
c000d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d2d0:	90                   	nop
c000d2d1:	eb 79                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d3:	90                   	nop
c000d2d4:	90                   	nop
c000d2d5:	eb 75                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d7:	90                   	nop
c000d2d8:	90                   	nop
c000d2d9:	eb 71                	jmp    c000d34c <tcp_receive+0x1694>
c000d2db:	90                   	nop
c000d2dc:	90                   	nop
c000d2dd:	eb 6d                	jmp    c000d34c <tcp_receive+0x1694>
c000d2df:	90                   	nop
c000d2e0:	90                   	nop
c000d2e1:	eb 69                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e3:	90                   	nop
c000d2e4:	90                   	nop
c000d2e5:	eb 65                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e7:	90                   	nop
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d2ef:	e8 20 2a 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	eb 53                	jmp    c000d34c <tcp_receive+0x1694>
c000d2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2fc:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d302:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d306:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d309:	29 c2                	sub    edx,eax
c000d30b:	89 d0                	mov    eax,edx
c000d30d:	78 25                	js     c000d334 <tcp_receive+0x167c>
c000d30f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d315:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d319:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d31c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d320:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d323:	0f b7 c0             	movzx  eax,ax
c000d326:	01 c8                	add    eax,ecx
c000d328:	29 c2                	sub    edx,eax
c000d32a:	89 d0                	mov    eax,edx
c000d32c:	83 c0 01             	add    eax,0x1
c000d32f:	85 c0                	test   eax,eax
c000d331:	7e 19                	jle    c000d34c <tcp_receive+0x1694>
c000d333:	90                   	nop
c000d334:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d338:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d33b:	83 c8 02             	or     eax,0x2
c000d33e:	88 c2                	mov    dl,al
c000d340:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d344:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d347:	eb 03                	jmp    c000d34c <tcp_receive+0x1694>
c000d349:	8d 76 00             	lea    esi,[esi+0x0]
c000d34c:	90                   	nop
c000d34d:	83 c4 30             	add    esp,0x30
c000d350:	5b                   	pop    ebx
c000d351:	5e                   	pop    esi
c000d352:	5f                   	pop    edi
c000d353:	c3                   	ret    

c000d354 <tcp_parseopt>:
c000d354:	83 ec 1c             	sub    esp,0x1c
c000d357:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d35c:	83 c0 14             	add    eax,0x14
c000d35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d363:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d368:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d36c:	0f b7 c0             	movzx  eax,ax
c000d36f:	83 ec 0c             	sub    esp,0xc
c000d372:	50                   	push   eax
c000d373:	e8 70 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	0f b7 c0             	movzx  eax,ax
c000d37e:	c1 e8 0c             	shr    eax,0xc
c000d381:	0f b7 c0             	movzx  eax,ax
c000d384:	83 f8 05             	cmp    eax,0x5
c000d387:	0f 86 6f 01 00 00    	jbe    c000d4fc <tcp_parseopt+0x1a8>
c000d38d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d392:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d396:	0f b7 c0             	movzx  eax,ax
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	50                   	push   eax
c000d39d:	e8 46 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	0f b7 c0             	movzx  eax,ax
c000d3a8:	c1 e8 0c             	shr    eax,0xc
c000d3ab:	83 e8 05             	sub    eax,0x5
c000d3ae:	c1 e0 02             	shl    eax,0x2
c000d3b1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d3b6:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d3bd:	e9 1e 01 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d3c2:	66 90                	xchg   ax,ax
c000d3c4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d3c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3cd:	01 d0                	add    eax,edx
c000d3cf:	8a 00                	mov    al,BYTE PTR [eax]
c000d3d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d3d5:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d3da:	83 f8 01             	cmp    eax,0x1
c000d3dd:	74 15                	je     c000d3f4 <tcp_parseopt+0xa0>
c000d3df:	83 f8 02             	cmp    eax,0x2
c000d3e2:	74 24                	je     c000d408 <tcp_parseopt+0xb4>
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	0f 85 bc 00 00 00    	jne    c000d4a8 <tcp_parseopt+0x154>
c000d3ec:	e9 0b 01 00 00       	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d3f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d3f9:	83 c0 01             	add    eax,0x1
c000d3fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d401:	e9 da 00 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d406:	66 90                	xchg   ax,ax
c000d408:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d40d:	8d 50 01             	lea    edx,[eax+0x1]
c000d410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d414:	01 d0                	add    eax,edx
c000d416:	8a 00                	mov    al,BYTE PTR [eax]
c000d418:	0f b6 c0             	movzx  eax,al
c000d41b:	83 f8 04             	cmp    eax,0x4
c000d41e:	0f 85 d0 00 00 00    	jne    c000d4f4 <tcp_parseopt+0x1a0>
c000d424:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d429:	8d 50 03             	lea    edx,[eax+0x3]
c000d42c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d431:	39 c2                	cmp    edx,eax
c000d433:	0f 8d bb 00 00 00    	jge    c000d4f4 <tcp_parseopt+0x1a0>
c000d439:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d43e:	8d 50 02             	lea    edx,[eax+0x2]
c000d441:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d445:	01 d0                	add    eax,edx
c000d447:	8a 00                	mov    al,BYTE PTR [eax]
c000d449:	0f b6 c0             	movzx  eax,al
c000d44c:	c1 e0 08             	shl    eax,0x8
c000d44f:	89 c2                	mov    edx,eax
c000d451:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d456:	8d 48 03             	lea    ecx,[eax+0x3]
c000d459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d45d:	01 c8                	add    eax,ecx
c000d45f:	8a 00                	mov    al,BYTE PTR [eax]
c000d461:	0f b6 c0             	movzx  eax,al
c000d464:	09 d0                	or     eax,edx
c000d466:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d46b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d470:	3d 18 02 00 00       	cmp    eax,0x218
c000d475:	77 11                	ja     c000d488 <tcp_parseopt+0x134>
c000d477:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d47c:	85 c0                	test   eax,eax
c000d47e:	74 08                	je     c000d488 <tcp_parseopt+0x134>
c000d480:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d485:	eb 09                	jmp    c000d490 <tcp_parseopt+0x13c>
c000d487:	90                   	nop
c000d488:	b8 18 02 00 00       	mov    eax,0x218
c000d48d:	8d 76 00             	lea    esi,[esi+0x0]
c000d490:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d494:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d498:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d49d:	83 c0 04             	add    eax,0x4
c000d4a0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4a5:	eb 39                	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d4a7:	90                   	nop
c000d4a8:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4ad:	8d 50 01             	lea    edx,[eax+0x1]
c000d4b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b4:	01 d0                	add    eax,edx
c000d4b6:	8a 00                	mov    al,BYTE PTR [eax]
c000d4b8:	0f b6 c0             	movzx  eax,al
c000d4bb:	85 c0                	test   eax,eax
c000d4bd:	74 39                	je     c000d4f8 <tcp_parseopt+0x1a4>
c000d4bf:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000d4c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4cb:	01 d0                	add    eax,edx
c000d4cd:	8a 00                	mov    al,BYTE PTR [eax]
c000d4cf:	0f b6 c0             	movzx  eax,al
c000d4d2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d4d7:	01 d0                	add    eax,edx
c000d4d9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4de:	66 90                	xchg   ax,ax
c000d4e0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d4e5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d4ea:	39 c2                	cmp    edx,eax
c000d4ec:	0f 82 d2 fe ff ff    	jb     c000d3c4 <tcp_parseopt+0x70>
c000d4f2:	eb 08                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f4:	90                   	nop
c000d4f5:	eb 05                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f7:	90                   	nop
c000d4f8:	90                   	nop
c000d4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4fc:	83 c4 1c             	add    esp,0x1c
c000d4ff:	c3                   	ret    

c000d500 <tcp_listen_input>:
c000d500:	53                   	push   ebx
c000d501:	83 ec 18             	sub    esp,0x18
c000d504:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d509:	0f b6 c0             	movzx  eax,al
c000d50c:	83 e0 10             	and    eax,0x10
c000d50f:	74 4f                	je     c000d560 <tcp_listen_input+0x60>
c000d511:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d516:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d519:	0f b7 c8             	movzx  ecx,ax
c000d51c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d521:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d525:	0f b7 d0             	movzx  edx,ax
c000d528:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d52e:	0f b7 d8             	movzx  ebx,ax
c000d531:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d536:	01 c3                	add    ebx,eax
c000d538:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d53d:	83 c0 01             	add    eax,0x1
c000d540:	83 ec 08             	sub    esp,0x8
c000d543:	51                   	push   ecx
c000d544:	52                   	push   edx
c000d545:	68 90 68 03 c0       	push   0xc0036890
c000d54a:	68 98 68 03 c0       	push   0xc0036898
c000d54f:	53                   	push   ebx
c000d550:	50                   	push   eax
c000d551:	e8 5a 2f 00 00       	call   c00104b0 <tcp_rst>
c000d556:	83 c4 20             	add    esp,0x20
c000d559:	e9 a2 01 00 00       	jmp    c000d700 <tcp_listen_input+0x200>
c000d55e:	66 90                	xchg   ax,ax
c000d560:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d565:	0f b6 c0             	movzx  eax,al
c000d568:	83 e0 02             	and    eax,0x2
c000d56b:	0f 84 8f 01 00 00    	je     c000d700 <tcp_listen_input+0x200>
c000d571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d575:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d578:	0f b6 c0             	movzx  eax,al
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	50                   	push   eax
c000d57f:	e8 14 e0 ff ff       	call   c000b598 <tcp_alloc>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d58b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d590:	75 16                	jne    c000d5a8 <tcp_listen_input+0xa8>
c000d592:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d598:	83 c0 01             	add    eax,0x1
c000d59b:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d5a1:	b0 ff                	mov    al,0xff
c000d5a3:	e9 5c 01 00 00       	jmp    c000d704 <tcp_listen_input+0x204>
c000d5a8:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d5ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5b2:	89 10                	mov    DWORD PTR [eax],edx
c000d5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d5bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5bf:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d5c3:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d5d0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d5d5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d5d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5dc:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d5e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5e4:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d5eb:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d5f0:	8d 50 01             	lea    edx,[eax+0x1]
c000d5f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5f7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5fe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d605:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d608:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d60d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d611:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d615:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d61d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d624:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d628:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d62d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d634:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d63e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d642:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d649:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d64c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d650:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d657:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d65a:	83 e0 8c             	and    eax,0xffffff8c
c000d65d:	88 c2                	mov    dl,al
c000d65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d663:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d666:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d66c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d670:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d677:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d67c:	e8 33 36 00 00       	call   c0010cb4 <tcp_timer_needed>
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d688:	e8 c7 fc ff ff       	call   c000d354 <tcp_parseopt>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d694:	8d 50 04             	lea    edx,[eax+0x4]
c000d697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d69b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d69e:	0f b7 c0             	movzx  eax,ax
c000d6a1:	83 ec 08             	sub    esp,0x8
c000d6a4:	52                   	push   edx
c000d6a5:	50                   	push   eax
c000d6a6:	e8 ad e0 ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6b2:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d6b6:	83 ec 08             	sub    esp,0x8
c000d6b9:	6a 12                	push   0x12
c000d6bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6bf:	e8 c4 22 00 00       	call   c000f988 <tcp_enqueue_flags>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d6cb:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d6d0:	85 c0                	test   eax,eax
c000d6d2:	74 18                	je     c000d6ec <tcp_listen_input+0x1ec>
c000d6d4:	83 ec 08             	sub    esp,0x8
c000d6d7:	6a 00                	push   0x0
c000d6d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6dd:	e8 9e db ff ff       	call   c000b280 <tcp_abandon>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d6e9:	eb 19                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6eb:	90                   	nop
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6f3:	e8 2c 29 00 00       	call   c0010024 <tcp_output>
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	eb 07                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d700:	b0 00                	mov    al,0x0
c000d702:	66 90                	xchg   ax,ax
c000d704:	83 c4 18             	add    esp,0x18
c000d707:	5b                   	pop    ebx
c000d708:	c3                   	ret    
c000d709:	8d 76 00             	lea    esi,[esi+0x0]

c000d70c <tcp_process>:
c000d70c:	53                   	push   ebx
c000d70d:	83 ec 18             	sub    esp,0x18
c000d710:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d715:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d71a:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d71f:	0f b6 c0             	movzx  eax,al
c000d722:	83 e0 04             	and    eax,0x4
c000d725:	0f 84 bd 00 00 00    	je     c000d7e8 <tcp_process+0xdc>
c000d72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d732:	83 f8 02             	cmp    eax,0x2
c000d735:	75 19                	jne    c000d750 <tcp_process+0x44>
c000d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73b:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d73e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d743:	39 c2                	cmp    edx,eax
c000d745:	75 45                	jne    c000d78c <tcp_process+0x80>
c000d747:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d74c:	eb 3e                	jmp    c000d78c <tcp_process+0x80>
c000d74e:	66 90                	xchg   ax,ax
c000d750:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d75a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d75d:	29 c2                	sub    edx,eax
c000d75f:	89 d0                	mov    eax,edx
c000d761:	78 29                	js     c000d78c <tcp_process+0x80>
c000d763:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d774:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d777:	0f b7 c0             	movzx  eax,ax
c000d77a:	01 c8                	add    eax,ecx
c000d77c:	29 c2                	sub    edx,eax
c000d77e:	89 d0                	mov    eax,edx
c000d780:	85 c0                	test   eax,eax
c000d782:	7f 08                	jg     c000d78c <tcp_process+0x80>
c000d784:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d789:	8d 76 00             	lea    esi,[esi+0x0]
c000d78c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d791:	85 c0                	test   eax,eax
c000d793:	74 4b                	je     c000d7e0 <tcp_process+0xd4>
c000d795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d799:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d79c:	85 c0                	test   eax,eax
c000d79e:	75 18                	jne    c000d7b8 <tcp_process+0xac>
c000d7a0:	83 ec 08             	sub    esp,0x8
c000d7a3:	68 90 07 03 c0       	push   0xc0030790
c000d7a8:	68 46 fd 02 c0       	push   0xc002fd46
c000d7ad:	e8 1a 26 01 00       	call   c001fdcc <CPrintf>
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d7b8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d7bd:	83 c8 08             	or     eax,0x8
c000d7c0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d7cc:	83 e0 fe             	and    eax,0xfffffffe
c000d7cf:	88 c2                	mov    dl,al
c000d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d7d8:	b0 f5                	mov    al,0xf5
c000d7da:	e9 bd 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7df:	90                   	nop
c000d7e0:	b0 00                	mov    al,0x0
c000d7e2:	e9 b5 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7e7:	90                   	nop
c000d7e8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d7ed:	0f b6 c0             	movzx  eax,al
c000d7f0:	83 e0 02             	and    eax,0x2
c000d7f3:	74 33                	je     c000d828 <tcp_process+0x11c>
c000d7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d7fc:	83 f8 02             	cmp    eax,0x2
c000d7ff:	74 27                	je     c000d828 <tcp_process+0x11c>
c000d801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d808:	83 f8 03             	cmp    eax,0x3
c000d80b:	74 1b                	je     c000d828 <tcp_process+0x11c>
c000d80d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d811:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d814:	83 c8 02             	or     eax,0x2
c000d817:	88 c2                	mov    dl,al
c000d819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d820:	b0 00                	mov    al,0x0
c000d822:	e9 75 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d827:	90                   	nop
c000d828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d82f:	0f b6 c0             	movzx  eax,al
c000d832:	83 e0 10             	and    eax,0x10
c000d835:	75 0d                	jne    c000d844 <tcp_process+0x138>
c000d837:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d841:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d848:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d856:	e8 f9 fa ff ff       	call   c000d354 <tcp_parseopt>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d862:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d865:	83 f8 09             	cmp    eax,0x9
c000d868:	0f 87 0a 08 00 00    	ja     c000e078 <tcp_process+0x96c>
c000d86e:	8b 04 85 38 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf6c8]
c000d875:	ff e0                	jmp    eax
c000d877:	90                   	nop
c000d878:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d87d:	0f b6 c0             	movzx  eax,al
c000d880:	83 e0 10             	and    eax,0x10
c000d883:	0f 84 ff 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d889:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d88e:	0f b6 c0             	movzx  eax,al
c000d891:	83 e0 02             	and    eax,0x2
c000d894:	0f 84 ee 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d8a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a7:	83 ec 0c             	sub    esp,0xc
c000d8aa:	50                   	push   eax
c000d8ab:	e8 5c 33 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	8d 50 01             	lea    edx,[eax+0x1]
c000d8b6:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d8bb:	39 c2                	cmp    edx,eax
c000d8bd:	0f 85 c5 01 00 00    	jne    c000da88 <tcp_process+0x37c>
c000d8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c7:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d8cb:	83 c0 01             	add    eax,0x1
c000d8ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8d2:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d8d6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d8db:	8d 50 01             	lea    edx,[eax+0x1]
c000d8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d8e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d8f3:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8fd:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d900:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d905:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d90d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d911:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d916:	8d 50 ff             	lea    edx,[eax-0x1]
c000d919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91d:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d924:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92f:	8d 50 04             	lea    edx,[eax+0x4]
c000d932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d936:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d939:	0f b7 c0             	movzx  eax,ax
c000d93c:	83 ec 08             	sub    esp,0x8
c000d93f:	52                   	push   edx
c000d940:	50                   	push   eax
c000d941:	e8 12 de ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d94d:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d955:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d958:	89 c2                	mov    edx,eax
c000d95a:	c1 e2 02             	shl    edx,0x2
c000d95d:	01 d0                	add    eax,edx
c000d95f:	d1 e0                	shl    eax,1
c000d961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d965:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96d:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d971:	0f b7 c0             	movzx  eax,ax
c000d974:	83 f8 01             	cmp    eax,0x1
c000d977:	75 0b                	jne    c000d984 <tcp_process+0x278>
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d980:	d1 e0                	shl    eax,1
c000d982:	eb 08                	jmp    c000d98c <tcp_process+0x280>
c000d984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d98b:	90                   	nop
c000d98c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d990:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d998:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d99b:	0f b7 c0             	movzx  eax,ax
c000d99e:	85 c0                	test   eax,eax
c000d9a0:	75 16                	jne    c000d9b8 <tcp_process+0x2ac>
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	68 f3 08 03 c0       	push   0xc00308f3
c000d9aa:	68 46 fd 02 c0       	push   0xc002fd46
c000d9af:	e8 18 24 01 00       	call   c001fdcc <CPrintf>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	90                   	nop
c000d9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d9bf:	83 e8 01             	sub    eax,0x1
c000d9c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9c6:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9df:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9e9:	85 c0                	test   eax,eax
c000d9eb:	75 0f                	jne    c000d9fc <tcp_process+0x2f0>
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d9f7:	eb 17                	jmp    c000da10 <tcp_process+0x304>
c000d9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da00:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000da0e:	66 90                	xchg   ax,ax
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da17:	e8 50 c7 ff ff       	call   c000a16c <tcp_seg_free>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da23:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da29:	85 c0                	test   eax,eax
c000da2b:	74 27                	je     c000da54 <tcp_process+0x348>
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da3b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000da3e:	83 ec 04             	sub    esp,0x4
c000da41:	6a 00                	push   0x0
c000da43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da47:	52                   	push   edx
c000da48:	ff d0                	call   eax
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000da51:	eb 09                	jmp    c000da5c <tcp_process+0x350>
c000da53:	90                   	nop
c000da54:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000da59:	8d 76 00             	lea    esi,[esi+0x0]
c000da5c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da61:	83 f8 f6             	cmp    eax,0xfffffff6
c000da64:	75 0a                	jne    c000da70 <tcp_process+0x364>
c000da66:	b0 f6                	mov    al,0xf6
c000da68:	e9 2f 06 00 00       	jmp    c000e09c <tcp_process+0x990>
c000da6d:	8d 76 00             	lea    esi,[esi+0x0]
c000da70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da77:	83 c8 02             	or     eax,0x2
c000da7a:	88 c2                	mov    dl,al
c000da7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da83:	e9 f4 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000da88:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000da8d:	0f b6 c0             	movzx  eax,al
c000da90:	83 e0 10             	and    eax,0x10
c000da93:	0f 84 e3 05 00 00    	je     c000e07c <tcp_process+0x970>
c000da99:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da9e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000daa1:	0f b7 c8             	movzx  ecx,ax
c000daa4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000daa9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000daad:	0f b7 d0             	movzx  edx,ax
c000dab0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dab6:	0f b7 d8             	movzx  ebx,ax
c000dab9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dabe:	01 c3                	add    ebx,eax
c000dac0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dac5:	83 ec 08             	sub    esp,0x8
c000dac8:	51                   	push   ecx
c000dac9:	52                   	push   edx
c000daca:	68 90 68 03 c0       	push   0xc0036890
c000dacf:	68 98 68 03 c0       	push   0xc0036898
c000dad4:	53                   	push   ebx
c000dad5:	50                   	push   eax
c000dad6:	e8 d5 29 00 00       	call   c00104b0 <tcp_rst>
c000dadb:	83 c4 20             	add    esp,0x20
c000dade:	e9 99 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000dae3:	90                   	nop
c000dae4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dae9:	0f b6 c0             	movzx  eax,al
c000daec:	83 e0 10             	and    eax,0x10
c000daef:	0f 84 a7 01 00 00    	je     c000dc9c <tcp_process+0x590>
c000daf5:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daff:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000db02:	29 c2                	sub    edx,eax
c000db04:	89 d0                	mov    eax,edx
c000db06:	83 e8 01             	sub    eax,0x1
c000db09:	0f 88 41 01 00 00    	js     c000dc50 <tcp_process+0x544>
c000db0f:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000db1c:	29 c2                	sub    edx,eax
c000db1e:	89 d0                	mov    eax,edx
c000db20:	85 c0                	test   eax,eax
c000db22:	0f 8f 28 01 00 00    	jg     c000dc50 <tcp_process+0x544>
c000db28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db37:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db3a:	85 c0                	test   eax,eax
c000db3c:	75 16                	jne    c000db54 <tcp_process+0x448>
c000db3e:	83 ec 08             	sub    esp,0x8
c000db41:	68 09 09 03 c0       	push   0xc0030909
c000db46:	68 46 fd 02 c0       	push   0xc002fd46
c000db4b:	e8 7c 22 01 00       	call   c001fdcc <CPrintf>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	90                   	nop
c000db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db5b:	85 c0                	test   eax,eax
c000db5d:	74 25                	je     c000db84 <tcp_process+0x478>
c000db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db63:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db6a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000db6d:	83 ec 04             	sub    esp,0x4
c000db70:	6a 00                	push   0x0
c000db72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db76:	52                   	push   edx
c000db77:	ff d0                	call   eax
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000db80:	eb 0a                	jmp    c000db8c <tcp_process+0x480>
c000db82:	66 90                	xchg   ax,ax
c000db84:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000db89:	8d 76 00             	lea    esi,[esi+0x0]
c000db8c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db91:	85 c0                	test   eax,eax
c000db93:	74 23                	je     c000dbb8 <tcp_process+0x4ac>
c000db95:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db9a:	83 f8 f6             	cmp    eax,0xfffffff6
c000db9d:	74 11                	je     c000dbb0 <tcp_process+0x4a4>
c000db9f:	83 ec 0c             	sub    esp,0xc
c000dba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dba6:	e8 69 d8 ff ff       	call   c000b414 <tcp_abort>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	66 90                	xchg   ax,ax
c000dbb0:	b0 f6                	mov    al,0xf6
c000dbb2:	e9 e5 04 00 00       	jmp    c000e09c <tcp_process+0x990>
c000dbb7:	90                   	nop
c000dbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbc:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000dbc0:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000dbc5:	83 ec 0c             	sub    esp,0xc
c000dbc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbcc:	e8 e7 e0 ff ff       	call   c000bcb8 <tcp_receive>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbdb:	0f b7 c0             	movzx  eax,ax
c000dbde:	85 c0                	test   eax,eax
c000dbe0:	74 12                	je     c000dbf4 <tcp_process+0x4e8>
c000dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbe9:	83 e8 01             	sub    eax,0x1
c000dbec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbf0:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000dbf4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dbf9:	83 f8 01             	cmp    eax,0x1
c000dbfc:	75 0e                	jne    c000dc0c <tcp_process+0x500>
c000dbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc05:	d1 e0                	shl    eax,1
c000dc07:	eb 0b                	jmp    c000dc14 <tcp_process+0x508>
c000dc09:	8d 76 00             	lea    esi,[esi+0x0]
c000dc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc13:	90                   	nop
c000dc14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc18:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000dc1c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc21:	0f b6 c0             	movzx  eax,al
c000dc24:	83 e0 20             	and    eax,0x20
c000dc27:	0f 84 ab 00 00 00    	je     c000dcd8 <tcp_process+0x5cc>
c000dc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc31:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc34:	83 c8 02             	or     eax,0x2
c000dc37:	88 c2                	mov    dl,al
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dc4b:	e9 88 00 00 00       	jmp    c000dcd8 <tcp_process+0x5cc>
c000dc50:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dc55:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dc58:	0f b7 c8             	movzx  ecx,ax
c000dc5b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dc60:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dc64:	0f b7 d0             	movzx  edx,ax
c000dc67:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dc6d:	0f b7 d8             	movzx  ebx,ax
c000dc70:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dc75:	01 c3                	add    ebx,eax
c000dc77:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc7c:	83 ec 08             	sub    esp,0x8
c000dc7f:	51                   	push   ecx
c000dc80:	52                   	push   edx
c000dc81:	68 90 68 03 c0       	push   0xc0036890
c000dc86:	68 98 68 03 c0       	push   0xc0036898
c000dc8b:	53                   	push   ebx
c000dc8c:	50                   	push   eax
c000dc8d:	e8 1e 28 00 00       	call   c00104b0 <tcp_rst>
c000dc92:	83 c4 20             	add    esp,0x20
c000dc95:	e9 e6 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dca1:	0f b6 c0             	movzx  eax,al
c000dca4:	83 e0 02             	and    eax,0x2
c000dca7:	0f 84 d3 03 00 00    	je     c000e080 <tcp_process+0x974>
c000dcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dcb4:	8d 50 ff             	lea    edx,[eax-0x1]
c000dcb7:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dcbc:	39 c2                	cmp    edx,eax
c000dcbe:	0f 85 bc 03 00 00    	jne    c000e080 <tcp_process+0x974>
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dccb:	e8 e4 29 00 00       	call   c00106b4 <tcp_rexmit>
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	e9 a8 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcd8:	90                   	nop
c000dcd9:	e9 a2 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcde:	66 90                	xchg   ax,ax
c000dce0:	83 ec 0c             	sub    esp,0xc
c000dce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dce7:	e8 cc df ff ff       	call   c000bcb8 <tcp_receive>
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dcf4:	0f b6 c0             	movzx  eax,al
c000dcf7:	83 e0 20             	and    eax,0x20
c000dcfa:	0f 84 84 03 00 00    	je     c000e084 <tcp_process+0x978>
c000dd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd04:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd07:	83 c8 02             	or     eax,0x2
c000dd0a:	88 c2                	mov    dl,al
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd17:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dd1e:	e9 61 03 00 00       	jmp    c000e084 <tcp_process+0x978>
c000dd23:	90                   	nop
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd2b:	e8 88 df ff ff       	call   c000bcb8 <tcp_receive>
c000dd30:	83 c4 10             	add    esp,0x10
c000dd33:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd38:	0f b6 c0             	movzx  eax,al
c000dd3b:	83 e0 20             	and    eax,0x20
c000dd3e:	0f 84 08 01 00 00    	je     c000de4c <tcp_process+0x740>
c000dd44:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd49:	0f b6 c0             	movzx  eax,al
c000dd4c:	83 e0 10             	and    eax,0x10
c000dd4f:	0f 84 d3 00 00 00    	je     c000de28 <tcp_process+0x71c>
c000dd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd59:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd5c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dd61:	39 c2                	cmp    edx,eax
c000dd63:	0f 85 bf 00 00 00    	jne    c000de28 <tcp_process+0x71c>
c000dd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd70:	83 c8 02             	or     eax,0x2
c000dd73:	88 c2                	mov    dl,al
c000dd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd79:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd83:	e8 48 c5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd90:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd94:	75 12                	jne    c000dda8 <tcp_process+0x69c>
c000dd96:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd9e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dda3:	eb 4b                	jmp    c000ddf0 <tcp_process+0x6e4>
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddad:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddb2:	eb 30                	jmp    c000dde4 <tcp_process+0x6d8>
c000ddb4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddbc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddc0:	75 12                	jne    c000ddd4 <tcp_process+0x6c8>
c000ddc2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddcb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ddce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddd1:	eb 1d                	jmp    c000ddf0 <tcp_process+0x6e4>
c000ddd3:	90                   	nop
c000ddd4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddd9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dddc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dde1:	8d 76 00             	lea    esi,[esi+0x0]
c000dde4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dde9:	85 c0                	test   eax,eax
c000ddeb:	75 c7                	jne    c000ddb4 <tcp_process+0x6a8>
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ddfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddff:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de06:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de10:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de17:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de1c:	e8 93 2e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000de21:	e9 62 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de26:	66 90                	xchg   ax,ax
c000de28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de2f:	83 c8 02             	or     eax,0x2
c000de32:	88 c2                	mov    dl,al
c000de34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de38:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000de3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3f:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000de46:	e9 3d 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de4b:	90                   	nop
c000de4c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de51:	0f b6 c0             	movzx  eax,al
c000de54:	83 e0 10             	and    eax,0x10
c000de57:	0f 84 2b 02 00 00    	je     c000e088 <tcp_process+0x97c>
c000de5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de61:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de64:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de69:	39 c2                	cmp    edx,eax
c000de6b:	0f 85 17 02 00 00    	jne    c000e088 <tcp_process+0x97c>
c000de71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de75:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000de7c:	e9 07 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de81:	8d 76 00             	lea    esi,[esi+0x0]
c000de84:	83 ec 0c             	sub    esp,0xc
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	e8 28 de ff ff       	call   c000bcb8 <tcp_receive>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000de98:	0f b6 c0             	movzx  eax,al
c000de9b:	83 e0 20             	and    eax,0x20
c000de9e:	0f 84 e8 01 00 00    	je     c000e08c <tcp_process+0x980>
c000dea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000deab:	83 c8 02             	or     eax,0x2
c000deae:	88 c2                	mov    dl,al
c000deb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000deb7:	83 ec 0c             	sub    esp,0xc
c000deba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000debe:	e8 0d c4 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dec3:	83 c4 10             	add    esp,0x10
c000dec6:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000decb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000decf:	75 0f                	jne    c000dee0 <tcp_process+0x7d4>
c000ded1:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ded6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ded9:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dede:	eb 48                	jmp    c000df28 <tcp_process+0x81c>
c000dee0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dee5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000deea:	eb 30                	jmp    c000df1c <tcp_process+0x810>
c000deec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000def1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000def4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000def8:	75 12                	jne    c000df0c <tcp_process+0x800>
c000defa:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000deff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df03:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000df06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df09:	eb 1d                	jmp    c000df28 <tcp_process+0x81c>
c000df0b:	90                   	nop
c000df0c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df14:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000df19:	8d 76 00             	lea    esi,[esi+0x0]
c000df1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df21:	85 c0                	test   eax,eax
c000df23:	75 c7                	jne    c000deec <tcp_process+0x7e0>
c000df25:	8d 76 00             	lea    esi,[esi+0x0]
c000df28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000df33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df37:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000df3e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000df44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df48:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df4f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000df54:	e8 5b 2d 00 00       	call   c0010cb4 <tcp_timer_needed>
c000df59:	e9 2e 01 00 00       	jmp    c000e08c <tcp_process+0x980>
c000df5e:	66 90                	xchg   ax,ax
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df67:	e8 4c dd ff ff       	call   c000bcb8 <tcp_receive>
c000df6c:	83 c4 10             	add    esp,0x10
c000df6f:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000df74:	0f b6 c0             	movzx  eax,al
c000df77:	83 e0 10             	and    eax,0x10
c000df7a:	0f 84 10 01 00 00    	je     c000e090 <tcp_process+0x984>
c000df80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df84:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000df87:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000df8c:	39 c2                	cmp    edx,eax
c000df8e:	0f 85 fc 00 00 00    	jne    c000e090 <tcp_process+0x984>
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df9b:	e8 30 c3 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfa8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfac:	75 12                	jne    c000dfc0 <tcp_process+0x8b4>
c000dfae:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfb6:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dfbb:	eb 4b                	jmp    c000e008 <tcp_process+0x8fc>
c000dfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfc5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dfca:	eb 30                	jmp    c000dffc <tcp_process+0x8f0>
c000dfcc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dfd1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfd4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfd8:	75 12                	jne    c000dfec <tcp_process+0x8e0>
c000dfda:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dfdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dfe3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dfe6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfe9:	eb 1d                	jmp    c000e008 <tcp_process+0x8fc>
c000dfeb:	90                   	nop
c000dfec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dff1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dff4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dff9:	8d 76 00             	lea    esi,[esi+0x0]
c000dffc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e001:	85 c0                	test   eax,eax
c000e003:	75 c7                	jne    c000dfcc <tcp_process+0x8c0>
c000e005:	8d 76 00             	lea    esi,[esi+0x0]
c000e008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e00c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e017:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000e01e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000e024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e028:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e02f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000e034:	e8 7b 2c 00 00       	call   c0010cb4 <tcp_timer_needed>
c000e039:	eb 55                	jmp    c000e090 <tcp_process+0x984>
c000e03b:	90                   	nop
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e043:	e8 70 dc ff ff       	call   c000bcb8 <tcp_receive>
c000e048:	83 c4 10             	add    esp,0x10
c000e04b:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e050:	0f b6 c0             	movzx  eax,al
c000e053:	83 e0 10             	and    eax,0x10
c000e056:	74 3c                	je     c000e094 <tcp_process+0x988>
c000e058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e05c:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000e05f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e064:	39 c2                	cmp    edx,eax
c000e066:	75 2c                	jne    c000e094 <tcp_process+0x988>
c000e068:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e06d:	83 c8 10             	or     eax,0x10
c000e070:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000e075:	eb 1d                	jmp    c000e094 <tcp_process+0x988>
c000e077:	90                   	nop
c000e078:	90                   	nop
c000e079:	eb 1d                	jmp    c000e098 <tcp_process+0x98c>
c000e07b:	90                   	nop
c000e07c:	90                   	nop
c000e07d:	eb 19                	jmp    c000e098 <tcp_process+0x98c>
c000e07f:	90                   	nop
c000e080:	90                   	nop
c000e081:	eb 15                	jmp    c000e098 <tcp_process+0x98c>
c000e083:	90                   	nop
c000e084:	90                   	nop
c000e085:	eb 11                	jmp    c000e098 <tcp_process+0x98c>
c000e087:	90                   	nop
c000e088:	90                   	nop
c000e089:	eb 0d                	jmp    c000e098 <tcp_process+0x98c>
c000e08b:	90                   	nop
c000e08c:	90                   	nop
c000e08d:	eb 09                	jmp    c000e098 <tcp_process+0x98c>
c000e08f:	90                   	nop
c000e090:	90                   	nop
c000e091:	eb 05                	jmp    c000e098 <tcp_process+0x98c>
c000e093:	90                   	nop
c000e094:	90                   	nop
c000e095:	8d 76 00             	lea    esi,[esi+0x0]
c000e098:	b0 00                	mov    al,0x0
c000e09a:	66 90                	xchg   ax,ax
c000e09c:	83 c4 18             	add    esp,0x18
c000e09f:	5b                   	pop    ebx
c000e0a0:	c3                   	ret    
c000e0a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e0a4 <tcp_input>:
c000e0a4:	53                   	push   ebx
c000e0a5:	83 ec 18             	sub    esp,0x18
c000e0a8:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000e0ae:	83 c0 01             	add    eax,0x1
c000e0b1:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000e0b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0be:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000e0c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c7:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000e0ca:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e0cf:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0d2:	0f b7 c0             	movzx  eax,ax
c000e0d5:	83 ec 0c             	sub    esp,0xc
c000e0d8:	50                   	push   eax
c000e0d9:	e8 0a 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0de:	83 c4 10             	add    esp,0x10
c000e0e1:	0f b7 c0             	movzx  eax,ax
c000e0e4:	c1 e8 08             	shr    eax,0x8
c000e0e7:	0f b7 c0             	movzx  eax,ax
c000e0ea:	83 e0 0f             	and    eax,0xf
c000e0ed:	c1 e0 02             	shl    eax,0x2
c000e0f0:	01 d8                	add    eax,ebx
c000e0f2:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000e0f7:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e0fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0ff:	0f b7 c0             	movzx  eax,ax
c000e102:	83 ec 0c             	sub    esp,0xc
c000e105:	50                   	push   eax
c000e106:	e8 dd 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	0f b7 c0             	movzx  eax,ax
c000e111:	c1 e8 08             	shr    eax,0x8
c000e114:	83 e0 0f             	and    eax,0xf
c000e117:	c1 e0 02             	shl    eax,0x2
c000e11a:	f7 d8                	neg    eax
c000e11c:	98                   	cwde   
c000e11d:	83 ec 08             	sub    esp,0x8
c000e120:	50                   	push   eax
c000e121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e125:	e8 2e a2 ff ff       	call   c0008358 <pbuf_header>
c000e12a:	83 c4 10             	add    esp,0x10
c000e12d:	0f b6 c0             	movzx  eax,al
c000e130:	85 c0                	test   eax,eax
c000e132:	75 10                	jne    c000e144 <tcp_input+0xa0>
c000e134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e138:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e13b:	0f b7 c0             	movzx  eax,ax
c000e13e:	83 f8 13             	cmp    eax,0x13
c000e141:	77 35                	ja     c000e178 <tcp_input+0xd4>
c000e143:	90                   	nop
c000e144:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e14a:	83 c0 01             	add    eax,0x1
c000e14d:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e153:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e159:	83 c0 01             	add    eax,0x1
c000e15c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e162:	83 ec 0c             	sub    esp,0xc
c000e165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e169:	e8 86 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	e9 fa 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e176:	66 90                	xchg   ax,ax
c000e178:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e17d:	83 ec 08             	sub    esp,0x8
c000e180:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e184:	50                   	push   eax
c000e185:	e8 5e 5e 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	0f b6 c0             	movzx  eax,al
c000e190:	85 c0                	test   eax,eax
c000e192:	75 14                	jne    c000e1a8 <tcp_input+0x104>
c000e194:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e199:	25 f0 00 00 00       	and    eax,0xf0
c000e19e:	3d e0 00 00 00       	cmp    eax,0xe0
c000e1a3:	75 37                	jne    c000e1dc <tcp_input+0x138>
c000e1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a8:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e1ae:	83 c0 01             	add    eax,0x1
c000e1b1:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e1b7:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e1bd:	83 c0 01             	add    eax,0x1
c000e1c0:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e1c6:	83 ec 0c             	sub    esp,0xc
c000e1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1cd:	e8 22 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	e9 96 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e1da:	66 90                	xchg   ax,ax
c000e1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e1e3:	0f b7 c0             	movzx  eax,ax
c000e1e6:	83 ec 0c             	sub    esp,0xc
c000e1e9:	50                   	push   eax
c000e1ea:	6a 06                	push   0x6
c000e1ec:	68 98 68 03 c0       	push   0xc0036898
c000e1f1:	68 90 68 03 c0       	push   0xc0036890
c000e1f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e1fa:	e8 11 51 00 00       	call   c0013310 <inet_chksum_pseudo>
c000e1ff:	83 c4 20             	add    esp,0x20
c000e202:	0f b7 c0             	movzx  eax,ax
c000e205:	85 c0                	test   eax,eax
c000e207:	74 33                	je     c000e23c <tcp_input+0x198>
c000e209:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e20f:	83 c0 01             	add    eax,0x1
c000e212:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e218:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e21e:	83 c0 01             	add    eax,0x1
c000e221:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e227:	83 ec 0c             	sub    esp,0xc
c000e22a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e22e:	e8 c1 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e233:	83 c4 10             	add    esp,0x10
c000e236:	e9 35 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e23b:	90                   	nop
c000e23c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e241:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e245:	0f b7 c0             	movzx  eax,ax
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	50                   	push   eax
c000e24c:	e8 97 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e251:	83 c4 10             	add    esp,0x10
c000e254:	0f b7 c0             	movzx  eax,ax
c000e257:	c1 e8 0c             	shr    eax,0xc
c000e25a:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e25e:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e263:	ba 00 00 00 00       	mov    edx,0x0
c000e268:	89 d1                	mov    ecx,edx
c000e26a:	29 c1                	sub    ecx,eax
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	c1 e0 02             	shl    eax,0x2
c000e271:	98                   	cwde   
c000e272:	83 ec 08             	sub    esp,0x8
c000e275:	50                   	push   eax
c000e276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e27a:	e8 d9 a0 ff ff       	call   c0008358 <pbuf_header>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	0f b6 c0             	movzx  eax,al
c000e285:	85 c0                	test   eax,eax
c000e287:	74 33                	je     c000e2bc <tcp_input+0x218>
c000e289:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e28f:	83 c0 01             	add    eax,0x1
c000e292:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e298:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e29e:	83 c0 01             	add    eax,0x1
c000e2a1:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ae:	e8 41 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e2b3:	83 c4 10             	add    esp,0x10
c000e2b6:	e9 b5 08 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e2bb:	90                   	nop
c000e2bc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2c4:	0f b7 c0             	movzx  eax,ax
c000e2c7:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e2cd:	83 ec 0c             	sub    esp,0xc
c000e2d0:	50                   	push   eax
c000e2d1:	e8 12 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2d6:	83 c4 10             	add    esp,0x10
c000e2d9:	66 89 03             	mov    WORD PTR [ebx],ax
c000e2dc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2e1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2e5:	0f b7 c0             	movzx  eax,ax
c000e2e8:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e2ee:	83 ec 0c             	sub    esp,0xc
c000e2f1:	50                   	push   eax
c000e2f2:	e8 f1 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e2fe:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e306:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	50                   	push   eax
c000e310:	e8 f7 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e31b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e31e:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e323:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e328:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e32b:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	50                   	push   eax
c000e335:	e8 d2 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e33a:	83 c4 10             	add    esp,0x10
c000e33d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e340:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e343:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e348:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e34d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e351:	0f b7 c0             	movzx  eax,ax
c000e354:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e35a:	83 ec 0c             	sub    esp,0xc
c000e35d:	50                   	push   eax
c000e35e:	e8 85 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e363:	83 c4 10             	add    esp,0x10
c000e366:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e36a:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e36f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e373:	0f b7 c0             	movzx  eax,ax
c000e376:	83 ec 0c             	sub    esp,0xc
c000e379:	50                   	push   eax
c000e37a:	e8 69 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	83 e0 3f             	and    eax,0x3f
c000e385:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e391:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e396:	0f b6 c0             	movzx  eax,al
c000e399:	83 e0 03             	and    eax,0x3
c000e39c:	0f 95 c0             	setne  al
c000e39f:	0f b6 c0             	movzx  eax,al
c000e3a2:	01 d0                	add    eax,edx
c000e3a4:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e3aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e3b2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3bb:	e9 50 01 00 00       	jmp    c000e510 <tcp_input+0x46c>
c000e3c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3c7:	85 c0                	test   eax,eax
c000e3c9:	75 15                	jne    c000e3e0 <tcp_input+0x33c>
c000e3cb:	83 ec 08             	sub    esp,0x8
c000e3ce:	68 b0 07 03 c0       	push   0xc00307b0
c000e3d3:	68 46 fd 02 c0       	push   0xc002fd46
c000e3d8:	e8 ef 19 01 00       	call   c001fdcc <CPrintf>
c000e3dd:	83 c4 10             	add    esp,0x10
c000e3e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3e7:	83 f8 0a             	cmp    eax,0xa
c000e3ea:	75 18                	jne    c000e404 <tcp_input+0x360>
c000e3ec:	83 ec 08             	sub    esp,0x8
c000e3ef:	68 d8 07 03 c0       	push   0xc00307d8
c000e3f4:	68 46 fd 02 c0       	push   0xc002fd46
c000e3f9:	e8 ce 19 01 00       	call   c001fdcc <CPrintf>
c000e3fe:	83 c4 10             	add    esp,0x10
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e40b:	83 f8 01             	cmp    eax,0x1
c000e40e:	75 18                	jne    c000e428 <tcp_input+0x384>
c000e410:	83 ec 08             	sub    esp,0x8
c000e413:	68 04 08 03 c0       	push   0xc0030804
c000e418:	68 46 fd 02 c0       	push   0xc002fd46
c000e41d:	e8 aa 19 01 00       	call   c001fdcc <CPrintf>
c000e422:	83 c4 10             	add    esp,0x10
c000e425:	8d 76 00             	lea    esi,[esi+0x0]
c000e428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e430:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e435:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e438:	0f b7 d2             	movzx  edx,dx
c000e43b:	0f b7 c0             	movzx  eax,ax
c000e43e:	39 c2                	cmp    edx,eax
c000e440:	0f 85 b6 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e44d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e452:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e456:	0f b7 d2             	movzx  edx,dx
c000e459:	0f b7 c0             	movzx  eax,ax
c000e45c:	39 c2                	cmp    edx,eax
c000e45e:	0f 85 98 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e46b:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e470:	39 c2                	cmp    edx,eax
c000e472:	0f 85 84 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e47c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e47e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e483:	39 c2                	cmp    edx,eax
c000e485:	75 75                	jne    c000e4fc <tcp_input+0x458>
c000e487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e48b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e48e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e492:	75 18                	jne    c000e4ac <tcp_input+0x408>
c000e494:	83 ec 08             	sub    esp,0x8
c000e497:	68 2c 08 03 c0       	push   0xc003082c
c000e49c:	68 46 fd 02 c0       	push   0xc002fd46
c000e4a1:	e8 26 19 01 00       	call   c001fdcc <CPrintf>
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4b1:	74 25                	je     c000e4d8 <tcp_input+0x434>
c000e4b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4b7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4c1:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d2:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e4d7:	90                   	nop
c000e4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4df:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e4e3:	75 3b                	jne    c000e520 <tcp_input+0x47c>
c000e4e5:	83 ec 08             	sub    esp,0x8
c000e4e8:	68 58 08 03 c0       	push   0xc0030858
c000e4ed:	68 46 fd 02 c0       	push   0xc002fd46
c000e4f2:	e8 d5 18 01 00       	call   c001fdcc <CPrintf>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	eb 24                	jmp    c000e520 <tcp_input+0x47c>
c000e4fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e500:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e508:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e50f:	90                   	nop
c000e510:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e515:	0f 85 a5 fe ff ff    	jne    c000e3c0 <tcp_input+0x31c>
c000e51b:	eb 07                	jmp    c000e524 <tcp_input+0x480>
c000e51d:	8d 76 00             	lea    esi,[esi+0x0]
c000e520:	90                   	nop
c000e521:	8d 76 00             	lea    esi,[esi+0x0]
c000e524:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e529:	0f 85 89 01 00 00    	jne    c000e6b8 <tcp_input+0x614>
c000e52f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e538:	e9 ab 00 00 00       	jmp    c000e5e8 <tcp_input+0x544>
c000e53d:	8d 76 00             	lea    esi,[esi+0x0]
c000e540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e544:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e547:	83 f8 0a             	cmp    eax,0xa
c000e54a:	74 18                	je     c000e564 <tcp_input+0x4c0>
c000e54c:	83 ec 08             	sub    esp,0x8
c000e54f:	68 84 08 03 c0       	push   0xc0030884
c000e554:	68 46 fd 02 c0       	push   0xc002fd46
c000e559:	e8 6e 18 01 00       	call   c001fdcc <CPrintf>
c000e55e:	83 c4 10             	add    esp,0x10
c000e561:	8d 76 00             	lea    esi,[esi+0x0]
c000e564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e568:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e56c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e571:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e574:	0f b7 d2             	movzx  edx,dx
c000e577:	0f b7 c0             	movzx  eax,ax
c000e57a:	39 c2                	cmp    edx,eax
c000e57c:	75 5e                	jne    c000e5dc <tcp_input+0x538>
c000e57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e582:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e585:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e58a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e58e:	0f b7 d2             	movzx  edx,dx
c000e591:	0f b7 c0             	movzx  eax,ax
c000e594:	39 c2                	cmp    edx,eax
c000e596:	75 44                	jne    c000e5dc <tcp_input+0x538>
c000e598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e59c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e59f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e5a4:	39 c2                	cmp    edx,eax
c000e5a6:	75 34                	jne    c000e5dc <tcp_input+0x538>
c000e5a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5ae:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e5b3:	39 c2                	cmp    edx,eax
c000e5b5:	75 25                	jne    c000e5dc <tcp_input+0x538>
c000e5b7:	83 ec 0c             	sub    esp,0xc
c000e5ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5be:	e8 81 d4 ff ff       	call   c000ba44 <tcp_timewait_input>
c000e5c3:	83 c4 10             	add    esp,0x10
c000e5c6:	83 ec 0c             	sub    esp,0xc
c000e5c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e5cd:	e8 22 9f ff ff       	call   c00084f4 <pbuf_free>
c000e5d2:	83 c4 10             	add    esp,0x10
c000e5d5:	e9 96 05 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e5da:	66 90                	xchg   ax,ax
c000e5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5e7:	90                   	nop
c000e5e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e5ed:	0f 85 4d ff ff ff    	jne    c000e540 <tcp_input+0x49c>
c000e5f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5fb:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e604:	eb 52                	jmp    c000e658 <tcp_input+0x5b4>
c000e606:	66 90                	xchg   ax,ax
c000e608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e60c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e60f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e614:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e618:	0f b7 d2             	movzx  edx,dx
c000e61b:	0f b7 c0             	movzx  eax,ax
c000e61e:	39 c2                	cmp    edx,eax
c000e620:	75 22                	jne    c000e644 <tcp_input+0x5a0>
c000e622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e626:	8b 10                	mov    edx,DWORD PTR [eax]
c000e628:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e62d:	39 c2                	cmp    edx,eax
c000e62f:	74 2f                	je     c000e660 <tcp_input+0x5bc>
c000e631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e635:	85 c0                	test   eax,eax
c000e637:	74 27                	je     c000e660 <tcp_input+0x5bc>
c000e639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e63d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e63f:	85 c0                	test   eax,eax
c000e641:	74 1d                	je     c000e660 <tcp_input+0x5bc>
c000e643:	90                   	nop
c000e644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e648:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e657:	90                   	nop
c000e658:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e65d:	75 a9                	jne    c000e608 <tcp_input+0x564>
c000e65f:	90                   	nop
c000e660:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e665:	74 51                	je     c000e6b8 <tcp_input+0x614>
c000e667:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e66c:	74 26                	je     c000e694 <tcp_input+0x5f0>
c000e66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e672:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e675:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e679:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e67c:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e686:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e68d:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e692:	66 90                	xchg   ax,ax
c000e694:	83 ec 0c             	sub    esp,0xc
c000e697:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e69b:	e8 60 ee ff ff       	call   c000d500 <tcp_listen_input>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	83 ec 0c             	sub    esp,0xc
c000e6a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6aa:	e8 45 9e ff ff       	call   c00084f4 <pbuf_free>
c000e6af:	83 c4 10             	add    esp,0x10
c000e6b2:	e9 b9 04 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e6b7:	90                   	nop
c000e6b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e6bd:	0f 84 19 04 00 00    	je     c000eadc <tcp_input+0xa38>
c000e6c3:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6d4:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6de:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e6e3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e6e8:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e6ed:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e6f7:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e6fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e702:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e708:	85 c0                	test   eax,eax
c000e70a:	0f 84 b4 00 00 00    	je     c000e7c4 <tcp_input+0x720>
c000e710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e714:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e71a:	85 c0                	test   eax,eax
c000e71c:	74 2e                	je     c000e74c <tcp_input+0x6a8>
c000e71e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e722:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e728:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e72c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e736:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e739:	6a 00                	push   0x0
c000e73b:	51                   	push   ecx
c000e73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e740:	52                   	push   edx
c000e741:	ff d0                	call   eax
c000e743:	83 c4 10             	add    esp,0x10
c000e746:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e74a:	eb 20                	jmp    c000e76c <tcp_input+0x6c8>
c000e74c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e750:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e756:	6a 00                	push   0x0
c000e758:	50                   	push   eax
c000e759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e75d:	6a 00                	push   0x0
c000e75f:	e8 b8 c8 ff ff       	call   c000b01c <tcp_recv_null>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e76b:	90                   	nop
c000e76c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e771:	85 c0                	test   eax,eax
c000e773:	75 13                	jne    c000e788 <tcp_input+0x6e4>
c000e775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e779:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e783:	eb 3f                	jmp    c000e7c4 <tcp_input+0x720>
c000e785:	8d 76 00             	lea    esi,[esi+0x0]
c000e788:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e78d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e790:	74 0e                	je     c000e7a0 <tcp_input+0x6fc>
c000e792:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e798:	0f b7 c0             	movzx  eax,ax
c000e79b:	85 c0                	test   eax,eax
c000e79d:	74 25                	je     c000e7c4 <tcp_input+0x720>
c000e79f:	90                   	nop
c000e7a0:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e7a6:	83 c0 01             	add    eax,0x1
c000e7a9:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e7af:	83 ec 0c             	sub    esp,0xc
c000e7b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7b6:	e8 39 9d ff ff       	call   c00084f4 <pbuf_free>
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	e9 ad 03 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e7c3:	90                   	nop
c000e7c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c8:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e7cd:	83 ec 0c             	sub    esp,0xc
c000e7d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7d4:	e8 33 ef ff ff       	call   c000d70c <tcp_process>
c000e7d9:	83 c4 10             	add    esp,0x10
c000e7dc:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7e0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7e5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7e8:	0f 84 9a 02 00 00    	je     c000ea88 <tcp_input+0x9e4>
c000e7ee:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e7f3:	0f b6 c0             	movzx  eax,al
c000e7f6:	83 e0 08             	and    eax,0x8
c000e7f9:	74 59                	je     c000e854 <tcp_input+0x7b0>
c000e7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ff:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e805:	85 c0                	test   eax,eax
c000e807:	74 1f                	je     c000e828 <tcp_input+0x784>
c000e809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e80d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e813:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e817:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e81a:	83 ec 08             	sub    esp,0x8
c000e81d:	6a f5                	push   0xfffffff5
c000e81f:	52                   	push   edx
c000e820:	ff d0                	call   eax
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	8d 76 00             	lea    esi,[esi+0x0]
c000e828:	83 ec 08             	sub    esp,0x8
c000e82b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e82f:	68 70 68 03 c0       	push   0xc0036870
c000e834:	e8 ff c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	83 ec 08             	sub    esp,0x8
c000e83f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e843:	6a 02                	push   0x2
c000e845:	e8 ee 93 ff ff       	call   c0007c38 <memp_free>
c000e84a:	83 c4 10             	add    esp,0x10
c000e84d:	e9 46 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e852:	66 90                	xchg   ax,ax
c000e854:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e859:	0f b6 c0             	movzx  eax,al
c000e85c:	83 e0 10             	and    eax,0x10
c000e85f:	74 2b                	je     c000e88c <tcp_input+0x7e8>
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e868:	68 70 68 03 c0       	push   0xc0036870
c000e86d:	e8 c6 c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e87c:	6a 02                	push   0x2
c000e87e:	e8 b5 93 ff ff       	call   c0007c38 <memp_free>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	e9 0d 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e88b:	90                   	nop
c000e88c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e895:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e898:	0f b7 c0             	movzx  eax,ax
c000e89b:	85 c0                	test   eax,eax
c000e89d:	74 55                	je     c000e8f4 <tcp_input+0x850>
c000e89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a3:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e8a9:	85 c0                	test   eax,eax
c000e8ab:	74 2f                	je     c000e8dc <tcp_input+0x838>
c000e8ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8b1:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e8b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8bb:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e8be:	0f b7 c8             	movzx  ecx,ax
c000e8c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e8c8:	83 ec 04             	sub    esp,0x4
c000e8cb:	51                   	push   ecx
c000e8cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d0:	50                   	push   eax
c000e8d1:	ff d2                	call   edx
c000e8d3:	83 c4 10             	add    esp,0x10
c000e8d6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8da:	eb 08                	jmp    c000e8e4 <tcp_input+0x840>
c000e8dc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8e9:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8ec:	0f 84 9a 01 00 00    	je     c000ea8c <tcp_input+0x9e8>
c000e8f2:	66 90                	xchg   ax,ax
c000e8f4:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e8f9:	85 c0                	test   eax,eax
c000e8fb:	0f 84 f3 00 00 00    	je     c000e9f4 <tcp_input+0x950>
c000e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e905:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e90b:	85 c0                	test   eax,eax
c000e90d:	74 15                	je     c000e924 <tcp_input+0x880>
c000e90f:	83 ec 08             	sub    esp,0x8
c000e912:	68 1d 09 03 c0       	push   0xc003091d
c000e917:	68 46 fd 02 c0       	push   0xc002fd46
c000e91c:	e8 ab 14 01 00       	call   c001fdcc <CPrintf>
c000e921:	83 c4 10             	add    esp,0x10
c000e924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e928:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e92b:	0f b6 c0             	movzx  eax,al
c000e92e:	83 e0 10             	and    eax,0x10
c000e931:	74 25                	je     c000e958 <tcp_input+0x8b4>
c000e933:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e938:	83 ec 0c             	sub    esp,0xc
c000e93b:	50                   	push   eax
c000e93c:	e8 b3 9b ff ff       	call   c00084f4 <pbuf_free>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e94b:	e8 c4 ca ff ff       	call   c000b414 <tcp_abort>
c000e950:	83 c4 10             	add    esp,0x10
c000e953:	e9 40 01 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e958:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e95d:	0f b6 c0             	movzx  eax,al
c000e960:	83 e0 08             	and    eax,0x8
c000e963:	74 13                	je     c000e978 <tcp_input+0x8d4>
c000e965:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e96a:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e96d:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e972:	83 ca 01             	or     edx,0x1
c000e975:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e97c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e982:	85 c0                	test   eax,eax
c000e984:	74 2a                	je     c000e9b0 <tcp_input+0x90c>
c000e986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e98a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e990:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e996:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e99a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e99d:	6a 00                	push   0x0
c000e99f:	51                   	push   ecx
c000e9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9a4:	52                   	push   edx
c000e9a5:	ff d0                	call   eax
c000e9a7:	83 c4 10             	add    esp,0x10
c000e9aa:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ae:	eb 1c                	jmp    c000e9cc <tcp_input+0x928>
c000e9b0:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9b5:	6a 00                	push   0x0
c000e9b7:	50                   	push   eax
c000e9b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9bc:	6a 00                	push   0x0
c000e9be:	e8 59 c6 ff ff       	call   c000b01c <tcp_recv_null>
c000e9c3:	83 c4 10             	add    esp,0x10
c000e9c6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ca:	66 90                	xchg   ax,ax
c000e9cc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9d1:	83 f8 f6             	cmp    eax,0xfffffff6
c000e9d4:	0f 84 b6 00 00 00    	je     c000ea90 <tcp_input+0x9ec>
c000e9da:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9df:	85 c0                	test   eax,eax
c000e9e1:	74 11                	je     c000e9f4 <tcp_input+0x950>
c000e9e3:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ed:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e9f3:	90                   	nop
c000e9f4:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e9f9:	0f b6 c0             	movzx  eax,al
c000e9fc:	83 e0 20             	and    eax,0x20
c000e9ff:	74 6b                	je     c000ea6c <tcp_input+0x9c8>
c000ea01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea05:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea08:	0f b7 c0             	movzx  eax,ax
c000ea0b:	3d 60 08 00 00       	cmp    eax,0x860
c000ea10:	74 12                	je     c000ea24 <tcp_input+0x980>
c000ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea16:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea19:	83 c0 01             	add    eax,0x1
c000ea1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea20:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ea24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea28:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea2e:	85 c0                	test   eax,eax
c000ea30:	74 26                	je     c000ea58 <tcp_input+0x9b4>
c000ea32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea36:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea40:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ea43:	6a 00                	push   0x0
c000ea45:	6a 00                	push   0x0
c000ea47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea4b:	52                   	push   edx
c000ea4c:	ff d0                	call   eax
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea55:	eb 09                	jmp    c000ea60 <tcp_input+0x9bc>
c000ea57:	90                   	nop
c000ea58:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000ea5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea60:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea65:	83 f8 f6             	cmp    eax,0xfffffff6
c000ea68:	74 2a                	je     c000ea94 <tcp_input+0x9f0>
c000ea6a:	66 90                	xchg   ax,ax
c000ea6c:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000ea76:	83 ec 0c             	sub    esp,0xc
c000ea79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea7d:	e8 a2 15 00 00       	call   c0010024 <tcp_output>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	eb 11                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea87:	90                   	nop
c000ea88:	90                   	nop
c000ea89:	eb 0d                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8b:	90                   	nop
c000ea8c:	90                   	nop
c000ea8d:	eb 09                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8f:	90                   	nop
c000ea90:	90                   	nop
c000ea91:	eb 05                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea93:	90                   	nop
c000ea94:	90                   	nop
c000ea95:	8d 76 00             	lea    esi,[esi+0x0]
c000ea98:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000eaa2:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000eaac:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eab1:	85 c0                	test   eax,eax
c000eab3:	0f 84 b7 00 00 00    	je     c000eb70 <tcp_input+0xacc>
c000eab9:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	50                   	push   eax
c000eac2:	e8 2d 9a ff ff       	call   c00084f4 <pbuf_free>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000ead4:	e9 97 00 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000ead9:	8d 76 00             	lea    esi,[esi+0x0]
c000eadc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eae1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000eae5:	0f b7 c0             	movzx  eax,ax
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	50                   	push   eax
c000eaec:	e8 f7 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eaf1:	83 c4 10             	add    esp,0x10
c000eaf4:	0f b7 c0             	movzx  eax,ax
c000eaf7:	83 e0 04             	and    eax,0x4
c000eafa:	75 64                	jne    c000eb60 <tcp_input+0xabc>
c000eafc:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000eb02:	83 c0 01             	add    eax,0x1
c000eb05:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000eb0b:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000eb11:	83 c0 01             	add    eax,0x1
c000eb14:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000eb1a:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb1f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000eb22:	0f b7 c8             	movzx  ecx,ax
c000eb25:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb2a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000eb2e:	0f b7 d0             	movzx  edx,ax
c000eb31:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000eb37:	0f b7 d8             	movzx  ebx,ax
c000eb3a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000eb3f:	01 c3                	add    ebx,eax
c000eb41:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000eb46:	83 ec 08             	sub    esp,0x8
c000eb49:	51                   	push   ecx
c000eb4a:	52                   	push   edx
c000eb4b:	68 90 68 03 c0       	push   0xc0036890
c000eb50:	68 98 68 03 c0       	push   0xc0036898
c000eb55:	53                   	push   ebx
c000eb56:	50                   	push   eax
c000eb57:	e8 54 19 00 00       	call   c00104b0 <tcp_rst>
c000eb5c:	83 c4 20             	add    esp,0x20
c000eb5f:	90                   	nop
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb67:	e8 88 99 ff ff       	call   c00084f4 <pbuf_free>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	90                   	nop
c000eb70:	83 c4 18             	add    esp,0x18
c000eb73:	5b                   	pop    ebx
c000eb74:	c3                   	ret    
c000eb75:	66 90                	xchg   ax,ax
c000eb77:	90                   	nop

c000eb78 <tcp_output_alloc_header>:
c000eb78:	83 ec 2c             	sub    esp,0x2c
c000eb7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb83:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000eb88:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000eb8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb95:	01 d0                	add    eax,edx
c000eb97:	83 c0 14             	add    eax,0x14
c000eb9a:	0f b7 c0             	movzx  eax,ax
c000eb9d:	83 ec 04             	sub    esp,0x4
c000eba0:	6a 00                	push   0x0
c000eba2:	50                   	push   eax
c000eba3:	6a 01                	push   0x1
c000eba5:	e8 22 9b ff ff       	call   c00086cc <pbuf_alloc>
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebb1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ebb6:	0f 84 10 01 00 00    	je     c000eccc <tcp_output_alloc_header+0x154>
c000ebbc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ebc1:	8d 50 13             	lea    edx,[eax+0x13]
c000ebc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebc8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ebcc:	0f b7 c0             	movzx  eax,ax
c000ebcf:	39 c2                	cmp    edx,eax
c000ebd1:	7c 15                	jl     c000ebe8 <tcp_output_alloc_header+0x70>
c000ebd3:	83 ec 08             	sub    esp,0x8
c000ebd6:	68 60 09 03 c0       	push   0xc0030960
c000ebdb:	68 46 fd 02 c0       	push   0xc002fd46
c000ebe0:	e8 e7 11 01 00       	call   c001fdcc <CPrintf>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ebf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebf7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ebfa:	0f b7 c0             	movzx  eax,ax
c000ebfd:	83 ec 0c             	sub    esp,0xc
c000ec00:	50                   	push   eax
c000ec01:	e8 e2 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec06:	83 c4 10             	add    esp,0x10
c000ec09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec0d:	66 89 02             	mov    WORD PTR [edx],ax
c000ec10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec14:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec18:	0f b7 c0             	movzx  eax,ax
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	50                   	push   eax
c000ec1f:	e8 c4 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec24:	83 c4 10             	add    esp,0x10
c000ec27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec2b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ec37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ec3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec3e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ec41:	83 ec 0c             	sub    esp,0xc
c000ec44:	50                   	push   eax
c000ec45:	e8 c2 1f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ec4a:	83 c4 10             	add    esp,0x10
c000ec4d:	89 c2                	mov    edx,eax
c000ec4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec56:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec5b:	c1 e8 02             	shr    eax,0x2
c000ec5e:	83 c0 05             	add    eax,0x5
c000ec61:	c1 e0 0c             	shl    eax,0xc
c000ec64:	83 c8 10             	or     eax,0x10
c000ec67:	0f b7 c0             	movzx  eax,ax
c000ec6a:	83 ec 0c             	sub    esp,0xc
c000ec6d:	50                   	push   eax
c000ec6e:	e8 75 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec7a:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ec7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec82:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ec86:	0f b7 c0             	movzx  eax,ax
c000ec89:	83 ec 0c             	sub    esp,0xc
c000ec8c:	50                   	push   eax
c000ec8d:	e8 56 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec92:	83 c4 10             	add    esp,0x10
c000ec95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec99:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000ec9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca1:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecab:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ecb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ecb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecbc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ecc0:	0f b7 c0             	movzx  eax,ax
c000ecc3:	01 c2                	add    edx,eax
c000ecc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ecd0:	83 c4 2c             	add    esp,0x2c
c000ecd3:	c3                   	ret    

c000ecd4 <tcp_create_segment>:
c000ecd4:	53                   	push   ebx
c000ecd5:	83 ec 28             	sub    esp,0x28
c000ecd8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ecdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ece0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ece4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ece8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eced:	c1 e0 02             	shl    eax,0x2
c000ecf0:	83 e0 04             	and    eax,0x4
c000ecf3:	88 c2                	mov    dl,al
c000ecf5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ecfa:	83 e0 02             	and    eax,0x2
c000ecfd:	74 05                	je     c000ed04 <tcp_create_segment+0x30>
c000ecff:	b0 0c                	mov    al,0xc
c000ed01:	eb 05                	jmp    c000ed08 <tcp_create_segment+0x34>
c000ed03:	90                   	nop
c000ed04:	b0 00                	mov    al,0x0
c000ed06:	66 90                	xchg   ax,ax
c000ed08:	01 d0                	add    eax,edx
c000ed0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	6a 04                	push   0x4
c000ed13:	e8 f4 8d ff ff       	call   c0007b0c <memp_malloc>
c000ed18:	83 c4 10             	add    esp,0x10
c000ed1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ed24:	75 1a                	jne    c000ed40 <tcp_create_segment+0x6c>
c000ed26:	83 ec 0c             	sub    esp,0xc
c000ed29:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed2d:	e8 c2 97 ff ff       	call   c00084f4 <pbuf_free>
c000ed32:	83 c4 10             	add    esp,0x10
c000ed35:	b8 00 00 00 00       	mov    eax,0x0
c000ed3a:	e9 31 01 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000ed3f:	90                   	nop
c000ed40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed44:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ed48:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ed4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ed5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ed60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed64:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ed67:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed6c:	89 d1                	mov    ecx,edx
c000ed6e:	29 c1                	sub    ecx,eax
c000ed70:	89 c8                	mov    eax,ecx
c000ed72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed76:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ed7a:	83 ec 08             	sub    esp,0x8
c000ed7d:	6a 14                	push   0x14
c000ed7f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed83:	e8 d0 95 ff ff       	call   c0008358 <pbuf_header>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	0f b6 c0             	movzx  eax,al
c000ed8e:	85 c0                	test   eax,eax
c000ed90:	74 2a                	je     c000edbc <tcp_create_segment+0xe8>
c000ed92:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ed98:	83 c0 01             	add    eax,0x1
c000ed9b:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eda8:	e8 bf b3 ff ff       	call   c000a16c <tcp_seg_free>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	b8 00 00 00 00       	mov    eax,0x0
c000edb5:	e9 b6 00 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000edba:	66 90                	xchg   ax,ax
c000edbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edc3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000edcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000edd4:	0f b7 c0             	movzx  eax,ax
c000edd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eddb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edde:	83 ec 0c             	sub    esp,0xc
c000ede1:	50                   	push   eax
c000ede2:	e8 01 1e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ede7:	83 c4 10             	add    esp,0x10
c000edea:	66 89 03             	mov    WORD PTR [ebx],ax
c000eded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf1:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000edf5:	0f b7 c0             	movzx  eax,ax
c000edf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edff:	83 ec 0c             	sub    esp,0xc
c000ee02:	50                   	push   eax
c000ee03:	e8 e0 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ee0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee13:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee16:	83 ec 0c             	sub    esp,0xc
c000ee19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ee1d:	e8 ea 1d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ee22:	83 c4 10             	add    esp,0x10
c000ee25:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ee28:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee2d:	c1 e8 02             	shr    eax,0x2
c000ee30:	0f b6 c0             	movzx  eax,al
c000ee33:	83 c0 05             	add    eax,0x5
c000ee36:	c1 e0 0c             	shl    eax,0xc
c000ee39:	89 c2                	mov    edx,eax
c000ee3b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ee40:	09 d0                	or     eax,edx
c000ee42:	0f b7 c0             	movzx  eax,ax
c000ee45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee49:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	50                   	push   eax
c000ee50:	e8 93 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ee5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ee63:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ee69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee70:	83 c4 28             	add    esp,0x28
c000ee73:	5b                   	pop    ebx
c000ee74:	c3                   	ret    
c000ee75:	8d 76 00             	lea    esi,[esi+0x0]

c000ee78 <tcp_pbuf_prealloc>:
c000ee78:	53                   	push   ebx
c000ee79:	83 ec 28             	sub    esp,0x28
c000ee7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ee80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee84:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ee88:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ee8c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ee91:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ee96:	88 d8                	mov    al,bl
c000ee98:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee9c:	88 c8                	mov    al,cl
c000ee9e:	88 04 24             	mov    BYTE PTR [esp],al
c000eea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eea5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000eeaa:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000eeaf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000eeb4:	39 c2                	cmp    edx,eax
c000eeb6:	73 64                	jae    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeb8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000eebd:	83 e0 02             	and    eax,0x2
c000eec0:	75 2e                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eec2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eec6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eec9:	0f b6 c0             	movzx  eax,al
c000eecc:	83 e0 40             	and    eax,0x40
c000eecf:	75 4b                	jne    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eed1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eed5:	85 c0                	test   eax,eax
c000eed7:	74 17                	je     c000eef0 <tcp_pbuf_prealloc+0x78>
c000eed9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eedd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eee0:	85 c0                	test   eax,eax
c000eee2:	75 0c                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eee4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eee8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eeeb:	85 c0                	test   eax,eax
c000eeed:	74 2d                	je     c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeef:	90                   	nop
c000eef0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eef5:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000eefb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef00:	39 c2                	cmp    edx,eax
c000ef02:	7d 0c                	jge    c000ef10 <tcp_pbuf_prealloc+0x98>
c000ef04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef08:	05 18 02 00 00       	add    eax,0x218
c000ef0d:	eb 05                	jmp    c000ef14 <tcp_pbuf_prealloc+0x9c>
c000ef0f:	90                   	nop
c000ef10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef14:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef19:	8d 76 00             	lea    esi,[esi+0x0]
c000ef1c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ef21:	83 ec 04             	sub    esp,0x4
c000ef24:	6a 00                	push   0x0
c000ef26:	50                   	push   eax
c000ef27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef2b:	e8 9c 97 ff ff       	call   c00086cc <pbuf_alloc>
c000ef30:	83 c4 10             	add    esp,0x10
c000ef33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef37:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef3c:	75 0a                	jne    c000ef48 <tcp_pbuf_prealloc+0xd0>
c000ef3e:	b8 00 00 00 00       	mov    eax,0x0
c000ef43:	eb 5b                	jmp    c000efa0 <tcp_pbuf_prealloc+0x128>
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef4e:	85 c0                	test   eax,eax
c000ef50:	74 16                	je     c000ef68 <tcp_pbuf_prealloc+0xf0>
c000ef52:	83 ec 08             	sub    esp,0x8
c000ef55:	68 e4 0b 03 c0       	push   0xc0030be4
c000ef5a:	68 46 fd 02 c0       	push   0xc002fd46
c000ef5f:	e8 68 0e 01 00       	call   c001fdcc <CPrintf>
c000ef64:	83 c4 10             	add    esp,0x10
c000ef67:	90                   	nop
c000ef68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef6c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ef70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef74:	89 d1                	mov    ecx,edx
c000ef76:	29 c1                	sub    ecx,eax
c000ef78:	89 c8                	mov    eax,ecx
c000ef7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef7e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef89:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ef8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef98:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ef9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efa0:	83 c4 28             	add    esp,0x28
c000efa3:	5b                   	pop    ebx
c000efa4:	c3                   	ret    
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]

c000efa8 <tcp_write_checks>:
c000efa8:	83 ec 1c             	sub    esp,0x1c
c000efab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000efb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efbb:	83 f8 04             	cmp    eax,0x4
c000efbe:	74 2c                	je     c000efec <tcp_write_checks+0x44>
c000efc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efc7:	83 f8 07             	cmp    eax,0x7
c000efca:	74 20                	je     c000efec <tcp_write_checks+0x44>
c000efcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efd3:	83 f8 02             	cmp    eax,0x2
c000efd6:	74 14                	je     c000efec <tcp_write_checks+0x44>
c000efd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efdc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efdf:	83 f8 03             	cmp    eax,0x3
c000efe2:	74 08                	je     c000efec <tcp_write_checks+0x44>
c000efe4:	b0 f3                	mov    al,0xf3
c000efe6:	e9 f9 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000efeb:	90                   	nop
c000efec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eff1:	85 c0                	test   eax,eax
c000eff3:	75 07                	jne    c000effc <tcp_write_checks+0x54>
c000eff5:	b0 00                	mov    al,0x0
c000eff7:	e9 e8 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000effc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f000:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f004:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f009:	0f b7 c0             	movzx  eax,ax
c000f00c:	39 c2                	cmp    edx,eax
c000f00e:	76 1c                	jbe    c000f02c <tcp_write_checks+0x84>
c000f010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f014:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f017:	83 c8 80             	or     eax,0xffffff80
c000f01a:	88 c2                	mov    dl,al
c000f01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f020:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f023:	b0 ff                	mov    al,0xff
c000f025:	e9 ba 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f02a:	66 90                	xchg   ax,ax
c000f02c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f030:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f033:	0f b7 c0             	movzx  eax,ax
c000f036:	83 f8 01             	cmp    eax,0x1
c000f039:	77 11                	ja     c000f04c <tcp_write_checks+0xa4>
c000f03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f042:	0f b7 c0             	movzx  eax,ax
c000f045:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f04a:	76 28                	jbe    c000f074 <tcp_write_checks+0xcc>
c000f04c:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f052:	83 c0 01             	add    eax,0x1
c000f055:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f05b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f05f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f062:	83 c8 80             	or     eax,0xffffff80
c000f065:	88 c2                	mov    dl,al
c000f067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f06b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f06e:	b0 ff                	mov    al,0xff
c000f070:	eb 72                	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f072:	66 90                	xchg   ax,ax
c000f074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f078:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f07b:	0f b7 c0             	movzx  eax,ax
c000f07e:	85 c0                	test   eax,eax
c000f080:	74 2e                	je     c000f0b0 <tcp_write_checks+0x108>
c000f082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f086:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f089:	85 c0                	test   eax,eax
c000f08b:	75 53                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f08d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f091:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f094:	85 c0                	test   eax,eax
c000f096:	75 48                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f098:	83 ec 08             	sub    esp,0x8
c000f09b:	68 90 09 03 c0       	push   0xc0030990
c000f0a0:	68 46 fd 02 c0       	push   0xc002fd46
c000f0a5:	e8 22 0d 01 00       	call   c001fdcc <CPrintf>
c000f0aa:	83 c4 10             	add    esp,0x10
c000f0ad:	eb 31                	jmp    c000f0e0 <tcp_write_checks+0x138>
c000f0af:	90                   	nop
c000f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	75 0d                	jne    c000f0c8 <tcp_write_checks+0x120>
c000f0bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0bf:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0c2:	85 c0                	test   eax,eax
c000f0c4:	74 1a                	je     c000f0e0 <tcp_write_checks+0x138>
c000f0c6:	66 90                	xchg   ax,ax
c000f0c8:	83 ec 08             	sub    esp,0x8
c000f0cb:	68 cc 09 03 c0       	push   0xc00309cc
c000f0d0:	68 46 fd 02 c0       	push   0xc002fd46
c000f0d5:	e8 f2 0c 01 00       	call   c001fdcc <CPrintf>
c000f0da:	83 c4 10             	add    esp,0x10
c000f0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e0:	b0 00                	mov    al,0x0
c000f0e2:	66 90                	xchg   ax,ax
c000f0e4:	83 c4 1c             	add    esp,0x1c
c000f0e7:	c3                   	ret    

c000f0e8 <tcp_write>:
c000f0e8:	56                   	push   esi
c000f0e9:	53                   	push   ebx
c000f0ea:	83 ec 54             	sub    esp,0x54
c000f0ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f0f1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000f0f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f0fa:	88 d0                	mov    al,dl
c000f0fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f100:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f108:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f110:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f118:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f120:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f128:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f12f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f134:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f139:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f140:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f147:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f14c:	75 1e                	jne    c000f16c <tcp_write+0x84>
c000f14e:	83 ec 08             	sub    esp,0x8
c000f151:	68 00 0a 03 c0       	push   0xc0030a00
c000f156:	68 46 fd 02 c0       	push   0xc002fd46
c000f15b:	e8 6c 0c 01 00       	call   c001fdcc <CPrintf>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	b0 f2                	mov    al,0xf2
c000f165:	e9 16 08 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f16a:	66 90                	xchg   ax,ax
c000f16c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f171:	83 ec 08             	sub    esp,0x8
c000f174:	50                   	push   eax
c000f175:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f179:	e8 2a fe ff ff       	call   c000efa8 <tcp_write_checks>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f185:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f18a:	85 c0                	test   eax,eax
c000f18c:	74 0a                	je     c000f198 <tcp_write+0xb0>
c000f18e:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f192:	e9 e9 07 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f197:	90                   	nop
c000f198:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f19c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f19f:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f1a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1a8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ab:	85 c0                	test   eax,eax
c000f1ad:	0f 84 79 02 00 00    	je     c000f42c <tcp_write+0x344>
c000f1b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1b7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1be:	eb 0c                	jmp    c000f1cc <tcp_write+0xe4>
c000f1c0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1c6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1ca:	66 90                	xchg   ax,ax
c000f1cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d2:	85 c0                	test   eax,eax
c000f1d4:	75 ea                	jne    c000f1c0 <tcp_write+0xd8>
c000f1d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1da:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1dd:	0f b6 c0             	movzx  eax,al
c000f1e0:	c1 e0 02             	shl    eax,0x2
c000f1e3:	83 e0 04             	and    eax,0x4
c000f1e6:	89 c2                	mov    edx,eax
c000f1e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1ec:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1ef:	0f b6 c0             	movzx  eax,al
c000f1f2:	83 e0 02             	and    eax,0x2
c000f1f5:	74 09                	je     c000f200 <tcp_write+0x118>
c000f1f7:	b8 0c 00 00 00       	mov    eax,0xc
c000f1fc:	eb 0a                	jmp    c000f208 <tcp_write+0x120>
c000f1fe:	66 90                	xchg   ax,ax
c000f200:	b8 00 00 00 00       	mov    eax,0x0
c000f205:	8d 76 00             	lea    esi,[esi+0x0]
c000f208:	01 d0                	add    eax,edx
c000f20a:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f20f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f213:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f216:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f21a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f21d:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f222:	01 ca                	add    edx,ecx
c000f224:	29 d0                	sub    eax,edx
c000f226:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f22b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22f:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f233:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f238:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f23d:	0f b7 c0             	movzx  eax,ax
c000f240:	85 c0                	test   eax,eax
c000f242:	0f 84 84 00 00 00    	je     c000f2cc <tcp_write+0x1e4>
c000f248:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f24d:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f252:	39 c2                	cmp    edx,eax
c000f254:	76 16                	jbe    c000f26c <tcp_write+0x184>
c000f256:	83 ec 08             	sub    esp,0x8
c000f259:	68 34 0a 03 c0       	push   0xc0030a34
c000f25e:	68 46 fd 02 c0       	push   0xc002fd46
c000f263:	e8 64 0b 01 00       	call   c001fdcc <CPrintf>
c000f268:	83 c4 10             	add    esp,0x10
c000f26b:	90                   	nop
c000f26c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f270:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f274:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f27d:	0f b7 d8             	movzx  ebx,ax
c000f280:	0f b7 ca             	movzx  ecx,dx
c000f283:	39 cb                	cmp    ebx,ecx
c000f285:	76 05                	jbe    c000f28c <tcp_write+0x1a4>
c000f287:	89 d0                	mov    eax,edx
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f291:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f296:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f29b:	01 d0                	add    eax,edx
c000f29d:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f2a2:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f2a7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2ac:	89 d6                	mov    esi,edx
c000f2ae:	29 c6                	sub    esi,eax
c000f2b0:	89 f0                	mov    eax,esi
c000f2b2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f2b7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f2bb:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2c0:	89 d6                	mov    esi,edx
c000f2c2:	29 c6                	sub    esi,eax
c000f2c4:	89 f0                	mov    eax,esi
c000f2c6:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f2cb:	90                   	nop
c000f2cc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2d1:	0f b7 c0             	movzx  eax,ax
c000f2d4:	85 c0                	test   eax,eax
c000f2d6:	74 24                	je     c000f2fc <tcp_write+0x214>
c000f2d8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f2dd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f2e2:	39 c2                	cmp    edx,eax
c000f2e4:	74 16                	je     c000f2fc <tcp_write+0x214>
c000f2e6:	83 ec 08             	sub    esp,0x8
c000f2e9:	68 f8 0b 03 c0       	push   0xc0030bf8
c000f2ee:	68 46 fd 02 c0       	push   0xc002fd46
c000f2f3:	e8 d4 0a 01 00       	call   c001fdcc <CPrintf>
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	90                   	nop
c000f2fc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f301:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f306:	39 c2                	cmp    edx,eax
c000f308:	0f 83 ce 03 00 00    	jae    c000f6dc <tcp_write+0x5f4>
c000f30e:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f313:	85 c0                	test   eax,eax
c000f315:	0f 84 c1 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f31b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f31f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f322:	0f b7 c0             	movzx  eax,ax
c000f325:	85 c0                	test   eax,eax
c000f327:	0f 84 af 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f32d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f332:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f337:	29 c2                	sub    edx,eax
c000f339:	89 d0                	mov    eax,edx
c000f33b:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f340:	39 d0                	cmp    eax,edx
c000f342:	7e 04                	jle    c000f348 <tcp_write+0x260>
c000f344:	89 d0                	mov    eax,edx
c000f346:	66 90                	xchg   ax,ax
c000f348:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f34d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f351:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f355:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f35a:	83 e0 01             	and    eax,0x1
c000f35d:	74 61                	je     c000f3c0 <tcp_write+0x2d8>
c000f35f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f364:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f369:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f36e:	83 ec 04             	sub    esp,0x4
c000f371:	6a 01                	push   0x1
c000f373:	51                   	push   ecx
c000f374:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f378:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f37c:	51                   	push   ecx
c000f37d:	52                   	push   edx
c000f37e:	50                   	push   eax
c000f37f:	6a 03                	push   0x3
c000f381:	e8 f2 fa ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f38d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f392:	0f 84 44 05 00 00    	je     c000f8dc <tcp_write+0x7f4>
c000f398:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f39d:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f3a2:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3a6:	01 c1                	add    ecx,eax
c000f3a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f3af:	83 ec 04             	sub    esp,0x4
c000f3b2:	52                   	push   edx
c000f3b3:	51                   	push   ecx
c000f3b4:	50                   	push   eax
c000f3b5:	e8 c0 0f ff ff       	call   c000037a <memcpy>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	eb 39                	jmp    c000f3f8 <tcp_write+0x310>
c000f3bf:	90                   	nop
c000f3c0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f3c5:	83 ec 04             	sub    esp,0x4
c000f3c8:	6a 01                	push   0x1
c000f3ca:	50                   	push   eax
c000f3cb:	6a 03                	push   0x3
c000f3cd:	e8 fa 92 ff ff       	call   c00086cc <pbuf_alloc>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3d9:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f3de:	0f 84 fc 04 00 00    	je     c000f8e0 <tcp_write+0x7f8>
c000f3e4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f3e9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3ed:	01 c2                	add    edx,eax
c000f3ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3f6:	66 90                	xchg   ax,ax
c000f3f8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f3fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f401:	01 d0                	add    eax,edx
c000f403:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f408:	83 ec 0c             	sub    esp,0xc
c000f40b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f40f:	e8 b4 98 ff ff       	call   c0008cc8 <pbuf_clen>
c000f414:	83 c4 10             	add    esp,0x10
c000f417:	0f b6 c0             	movzx  eax,al
c000f41a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f41e:	01 d0                	add    eax,edx
c000f420:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f425:	e9 b2 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f430:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f434:	0f b7 c0             	movzx  eax,ax
c000f437:	85 c0                	test   eax,eax
c000f439:	0f 84 9d 02 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f43f:	83 ec 08             	sub    esp,0x8
c000f442:	68 54 0a 03 c0       	push   0xc0030a54
c000f447:	68 46 fd 02 c0       	push   0xc002fd46
c000f44c:	e8 7b 09 01 00       	call   c001fdcc <CPrintf>
c000f451:	83 c4 10             	add    esp,0x10
c000f454:	e9 83 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f459:	8d 76 00             	lea    esi,[esi+0x0]
c000f45c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f460:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f465:	89 d6                	mov    esi,edx
c000f467:	29 c6                	sub    esi,eax
c000f469:	89 f0                	mov    eax,esi
c000f46b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f470:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f474:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f477:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f47c:	89 d3                	mov    ebx,edx
c000f47e:	29 c3                	sub    ebx,eax
c000f480:	89 d8                	mov    eax,ebx
c000f482:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f48b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f490:	0f b7 d8             	movzx  ebx,ax
c000f493:	0f b7 ca             	movzx  ecx,dx
c000f496:	39 cb                	cmp    ebx,ecx
c000f498:	76 02                	jbe    c000f49c <tcp_write+0x3b4>
c000f49a:	89 d0                	mov    eax,edx
c000f49c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f4a1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f4a6:	83 e0 01             	and    eax,0x1
c000f4a9:	0f 84 b1 00 00 00    	je     c000f560 <tcp_write+0x478>
c000f4af:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4b4:	0f 94 c0             	sete   al
c000f4b7:	0f b6 f0             	movzx  esi,al
c000f4ba:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f4bf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4c6:	0f b7 c8             	movzx  ecx,ax
c000f4c9:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f4ce:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f4d3:	01 d0                	add    eax,edx
c000f4d5:	0f b7 c0             	movzx  eax,ax
c000f4d8:	83 ec 04             	sub    esp,0x4
c000f4db:	56                   	push   esi
c000f4dc:	53                   	push   ebx
c000f4dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f4e1:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f4e5:	52                   	push   edx
c000f4e6:	51                   	push   ecx
c000f4e7:	50                   	push   eax
c000f4e8:	6a 00                	push   0x0
c000f4ea:	e8 89 f9 ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f4f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f4fb:	0f 84 e3 03 00 00    	je     c000f8e4 <tcp_write+0x7fc>
c000f501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f505:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f509:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f50e:	0f b7 c0             	movzx  eax,ax
c000f511:	39 c2                	cmp    edx,eax
c000f513:	76 17                	jbe    c000f52c <tcp_write+0x444>
c000f515:	83 ec 08             	sub    esp,0x8
c000f518:	68 84 0a 03 c0       	push   0xc0030a84
c000f51d:	68 46 fd 02 c0       	push   0xc002fd46
c000f522:	e8 a5 08 01 00       	call   c001fdcc <CPrintf>
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f531:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f536:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f53a:	01 d1                	add    ecx,edx
c000f53c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f540:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f543:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f548:	01 da                	add    edx,ebx
c000f54a:	83 ec 04             	sub    esp,0x4
c000f54d:	50                   	push   eax
c000f54e:	51                   	push   ecx
c000f54f:	52                   	push   edx
c000f550:	e8 25 0e ff ff       	call   c000037a <memcpy>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	e9 a7 00 00 00       	jmp    c000f604 <tcp_write+0x51c>
c000f55d:	8d 76 00             	lea    esi,[esi+0x0]
c000f560:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f565:	0f b7 c0             	movzx  eax,ax
c000f568:	85 c0                	test   eax,eax
c000f56a:	74 18                	je     c000f584 <tcp_write+0x49c>
c000f56c:	83 ec 08             	sub    esp,0x8
c000f56f:	68 16 0c 03 c0       	push   0xc0030c16
c000f574:	68 46 fd 02 c0       	push   0xc002fd46
c000f579:	e8 4e 08 01 00       	call   c001fdcc <CPrintf>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	8d 76 00             	lea    esi,[esi+0x0]
c000f584:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f589:	83 ec 04             	sub    esp,0x4
c000f58c:	6a 01                	push   0x1
c000f58e:	50                   	push   eax
c000f58f:	6a 00                	push   0x0
c000f591:	e8 36 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f59d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f5a2:	0f 84 40 03 00 00    	je     c000f8e8 <tcp_write+0x800>
c000f5a8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f5ad:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f5b1:	01 c2                	add    edx,eax
c000f5b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f5b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f5ba:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f5bf:	83 ec 04             	sub    esp,0x4
c000f5c2:	6a 00                	push   0x0
c000f5c4:	50                   	push   eax
c000f5c5:	6a 00                	push   0x0
c000f5c7:	e8 00 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f5d3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f5d8:	75 16                	jne    c000f5f0 <tcp_write+0x508>
c000f5da:	83 ec 0c             	sub    esp,0xc
c000f5dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5e1:	e8 0e 8f ff ff       	call   c00084f4 <pbuf_free>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	e9 02 03 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f5ee:	66 90                	xchg   ax,ax
c000f5f0:	83 ec 08             	sub    esp,0x8
c000f5f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f5f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f5fb:	e8 2c 97 ff ff       	call   c0008d2c <pbuf_cat>
c000f600:	83 c4 10             	add    esp,0x10
c000f603:	90                   	nop
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f60b:	e8 b8 96 ff ff       	call   c0008cc8 <pbuf_clen>
c000f610:	83 c4 10             	add    esp,0x10
c000f613:	0f b6 c0             	movzx  eax,al
c000f616:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f61a:	01 d0                	add    eax,edx
c000f61c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f621:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f626:	83 f8 02             	cmp    eax,0x2
c000f629:	77 0d                	ja     c000f638 <tcp_write+0x550>
c000f62b:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f630:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f635:	76 15                	jbe    c000f64c <tcp_write+0x564>
c000f637:	90                   	nop
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f63f:	e8 b0 8e ff ff       	call   c00084f4 <pbuf_free>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	e9 a4 02 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f64c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f651:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f655:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f658:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f65d:	01 ca                	add    edx,ecx
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	50                   	push   eax
c000f663:	52                   	push   edx
c000f664:	6a 00                	push   0x0
c000f666:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f66a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f66e:	e8 61 f6 ff ff       	call   c000ecd4 <tcp_create_segment>
c000f673:	83 c4 20             	add    esp,0x20
c000f676:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f67a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f67f:	0f 84 67 02 00 00    	je     c000f8ec <tcp_write+0x804>
c000f685:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f68a:	75 0c                	jne    c000f698 <tcp_write+0x5b0>
c000f68c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f690:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f694:	eb 2a                	jmp    c000f6c0 <tcp_write+0x5d8>
c000f696:	66 90                	xchg   ax,ax
c000f698:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f69d:	75 15                	jne    c000f6b4 <tcp_write+0x5cc>
c000f69f:	83 ec 08             	sub    esp,0x8
c000f6a2:	68 24 0c 03 c0       	push   0xc0030c24
c000f6a7:	68 46 fd 02 c0       	push   0xc002fd46
c000f6ac:	e8 1b 07 01 00       	call   c001fdcc <CPrintf>
c000f6b1:	83 c4 10             	add    esp,0x10
c000f6b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f6b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f6bc:	89 10                	mov    DWORD PTR [eax],edx
c000f6be:	66 90                	xchg   ax,ax
c000f6c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f6c8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f6cd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f6d2:	01 d0                	add    eax,edx
c000f6d4:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f6e1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f6e6:	39 c2                	cmp    edx,eax
c000f6e8:	0f 82 6e fd ff ff    	jb     c000f45c <tcp_write+0x374>
c000f6ee:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	0f 84 9d 00 00 00    	je     c000f798 <tcp_write+0x6b0>
c000f6fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f702:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f706:	eb 70                	jmp    c000f778 <tcp_write+0x690>
c000f708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f70f:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f714:	01 d0                	add    eax,edx
c000f716:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f71a:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f722:	8b 00                	mov    eax,DWORD PTR [eax]
c000f724:	85 c0                	test   eax,eax
c000f726:	75 44                	jne    c000f76c <tcp_write+0x684>
c000f728:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f72d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f731:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f738:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f73c:	0f b7 c0             	movzx  eax,ax
c000f73f:	01 c8                	add    eax,ecx
c000f741:	83 ec 04             	sub    esp,0x4
c000f744:	52                   	push   edx
c000f745:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f749:	50                   	push   eax
c000f74a:	e8 2b 0c ff ff       	call   c000037a <memcpy>
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f756:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f75a:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f75f:	01 d0                	add    eax,edx
c000f761:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f765:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f769:	8d 76 00             	lea    esi,[esi+0x0]
c000f76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f770:	8b 00                	mov    eax,DWORD PTR [eax]
c000f772:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f776:	66 90                	xchg   ax,ax
c000f778:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f77d:	75 89                	jne    c000f708 <tcp_write+0x620>
c000f77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f783:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f786:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f78b:	01 d0                	add    eax,edx
c000f78d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f791:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f795:	8d 76 00             	lea    esi,[esi+0x0]
c000f798:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f79d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f7a1:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f7a5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f7aa:	74 4c                	je     c000f7f8 <tcp_write+0x710>
c000f7ac:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7b1:	75 15                	jne    c000f7c8 <tcp_write+0x6e0>
c000f7b3:	83 ec 08             	sub    esp,0x8
c000f7b6:	68 c4 0a 03 c0       	push   0xc0030ac4
c000f7bb:	68 46 fd 02 c0       	push   0xc002fd46
c000f7c0:	e8 07 06 01 00       	call   c001fdcc <CPrintf>
c000f7c5:	83 c4 10             	add    esp,0x10
c000f7c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7cf:	83 ec 08             	sub    esp,0x8
c000f7d2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f7d6:	50                   	push   eax
c000f7d7:	e8 50 95 ff ff       	call   c0008d2c <pbuf_cat>
c000f7dc:	83 c4 10             	add    esp,0x10
c000f7df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7e3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f7e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f7ed:	01 d0                	add    eax,edx
c000f7ef:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f7f3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f7f7:	90                   	nop
c000f7f8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7fd:	75 0d                	jne    c000f80c <tcp_write+0x724>
c000f7ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f803:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f807:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f80a:	eb 0c                	jmp    c000f818 <tcp_write+0x730>
c000f80c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f810:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f814:	89 10                	mov    DWORD PTR [eax],edx
c000f816:	66 90                	xchg   ax,ax
c000f818:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f81c:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f81f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f824:	01 c2                	add    edx,eax
c000f826:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f82a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f82d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f831:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f835:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f839:	89 d6                	mov    esi,edx
c000f83b:	29 c6                	sub    esi,eax
c000f83d:	89 f0                	mov    eax,esi
c000f83f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f843:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f847:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f84b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f84f:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f853:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f857:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f85a:	0f b7 c0             	movzx  eax,ax
c000f85d:	85 c0                	test   eax,eax
c000f85f:	74 2b                	je     c000f88c <tcp_write+0x7a4>
c000f861:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f865:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f868:	85 c0                	test   eax,eax
c000f86a:	75 20                	jne    c000f88c <tcp_write+0x7a4>
c000f86c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f870:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f873:	85 c0                	test   eax,eax
c000f875:	75 15                	jne    c000f88c <tcp_write+0x7a4>
c000f877:	83 ec 08             	sub    esp,0x8
c000f87a:	68 35 0c 03 c0       	push   0xc0030c35
c000f87f:	68 46 fd 02 c0       	push   0xc002fd46
c000f884:	e8 43 05 01 00       	call   c001fdcc <CPrintf>
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f891:	74 41                	je     c000f8d4 <tcp_write+0x7ec>
c000f893:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f897:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f89a:	85 c0                	test   eax,eax
c000f89c:	74 36                	je     c000f8d4 <tcp_write+0x7ec>
c000f89e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f8a3:	83 e0 02             	and    eax,0x2
c000f8a6:	75 2c                	jne    c000f8d4 <tcp_write+0x7ec>
c000f8a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8af:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f8b3:	83 ec 0c             	sub    esp,0xc
c000f8b6:	6a 08                	push   0x8
c000f8b8:	e8 2b 13 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f8bd:	83 c4 10             	add    esp,0x10
c000f8c0:	89 c1                	mov    ecx,eax
c000f8c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8c6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f8c9:	89 d8                	mov    eax,ebx
c000f8cb:	09 c8                	or     eax,ecx
c000f8cd:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d4:	b0 00                	mov    al,0x0
c000f8d6:	e9 a5 00 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	eb 11                	jmp    c000f8f0 <tcp_write+0x808>
c000f8df:	90                   	nop
c000f8e0:	90                   	nop
c000f8e1:	eb 0d                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e3:	90                   	nop
c000f8e4:	90                   	nop
c000f8e5:	eb 09                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e7:	90                   	nop
c000f8e8:	90                   	nop
c000f8e9:	eb 05                	jmp    c000f8f0 <tcp_write+0x808>
c000f8eb:	90                   	nop
c000f8ec:	90                   	nop
c000f8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8f4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f7:	83 c8 80             	or     eax,0xffffff80
c000f8fa:	88 c2                	mov    dl,al
c000f8fc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f900:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f903:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f909:	83 c0 01             	add    eax,0x1
c000f90c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f912:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f917:	74 0f                	je     c000f928 <tcp_write+0x840>
c000f919:	83 ec 0c             	sub    esp,0xc
c000f91c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f920:	e8 cf 8b ff ff       	call   c00084f4 <pbuf_free>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f92d:	74 11                	je     c000f940 <tcp_write+0x858>
c000f92f:	83 ec 0c             	sub    esp,0xc
c000f932:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f936:	e8 75 a8 ff ff       	call   c000a1b0 <tcp_segs_free>
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	66 90                	xchg   ax,ax
c000f940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f944:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f947:	0f b7 c0             	movzx  eax,ax
c000f94a:	85 c0                	test   eax,eax
c000f94c:	74 2e                	je     c000f97c <tcp_write+0x894>
c000f94e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f952:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f955:	85 c0                	test   eax,eax
c000f957:	75 23                	jne    c000f97c <tcp_write+0x894>
c000f959:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f95d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f960:	85 c0                	test   eax,eax
c000f962:	75 18                	jne    c000f97c <tcp_write+0x894>
c000f964:	83 ec 08             	sub    esp,0x8
c000f967:	68 35 0c 03 c0       	push   0xc0030c35
c000f96c:	68 46 fd 02 c0       	push   0xc002fd46
c000f971:	e8 56 04 01 00       	call   c001fdcc <CPrintf>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	b0 ff                	mov    al,0xff
c000f97e:	66 90                	xchg   ax,ax
c000f980:	83 c4 54             	add    esp,0x54
c000f983:	5b                   	pop    ebx
c000f984:	5e                   	pop    esi
c000f985:	c3                   	ret    
c000f986:	66 90                	xchg   ax,ax

c000f988 <tcp_enqueue_flags>:
c000f988:	83 ec 3c             	sub    esp,0x3c
c000f98b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f98f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f993:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f998:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f99d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9a2:	83 e0 03             	and    eax,0x3
c000f9a5:	75 15                	jne    c000f9bc <tcp_enqueue_flags+0x34>
c000f9a7:	83 ec 08             	sub    esp,0x8
c000f9aa:	68 fc 0a 03 c0       	push   0xc0030afc
c000f9af:	68 46 fd 02 c0       	push   0xc002fd46
c000f9b4:	e8 13 04 01 00       	call   c001fdcc <CPrintf>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9c3:	0f b7 c0             	movzx  eax,ax
c000f9c6:	83 f8 01             	cmp    eax,0x1
c000f9c9:	77 11                	ja     c000f9dc <tcp_enqueue_flags+0x54>
c000f9cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9cf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9d2:	0f b7 c0             	movzx  eax,ax
c000f9d5:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f9da:	76 2c                	jbe    c000fa08 <tcp_enqueue_flags+0x80>
c000f9dc:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f9e2:	83 c0 01             	add    eax,0x1
c000f9e5:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f9eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9f2:	83 c8 80             	or     eax,0xffffff80
c000f9f5:	88 c2                	mov    dl,al
c000f9f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9fb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f9fe:	b0 ff                	mov    al,0xff
c000fa00:	e9 6b 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa05:	8d 76 00             	lea    esi,[esi+0x0]
c000fa08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa0d:	83 e0 02             	and    eax,0x2
c000fa10:	74 06                	je     c000fa18 <tcp_enqueue_flags+0x90>
c000fa12:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000fa17:	90                   	nop
c000fa18:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa1d:	c1 e0 02             	shl    eax,0x2
c000fa20:	83 e0 04             	and    eax,0x4
c000fa23:	88 c2                	mov    dl,al
c000fa25:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa2a:	83 e0 02             	and    eax,0x2
c000fa2d:	74 05                	je     c000fa34 <tcp_enqueue_flags+0xac>
c000fa2f:	b0 0c                	mov    al,0xc
c000fa31:	eb 05                	jmp    c000fa38 <tcp_enqueue_flags+0xb0>
c000fa33:	90                   	nop
c000fa34:	b0 00                	mov    al,0x0
c000fa36:	66 90                	xchg   ax,ax
c000fa38:	01 d0                	add    eax,edx
c000fa3a:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000fa3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa42:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa46:	0f b7 c0             	movzx  eax,ax
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	75 17                	jne    c000fa64 <tcp_enqueue_flags+0xdc>
c000fa4d:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa53:	83 c0 01             	add    eax,0x1
c000fa56:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fa5c:	b0 ff                	mov    al,0xff
c000fa5e:	e9 0d 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa63:	90                   	nop
c000fa64:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fa69:	83 ec 04             	sub    esp,0x4
c000fa6c:	6a 00                	push   0x0
c000fa6e:	50                   	push   eax
c000fa6f:	6a 00                	push   0x0
c000fa71:	e8 56 8c ff ff       	call   c00086cc <pbuf_alloc>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fa7d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000fa82:	75 2c                	jne    c000fab0 <tcp_enqueue_flags+0x128>
c000fa84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa88:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa8b:	83 c8 80             	or     eax,0xffffff80
c000fa8e:	88 c2                	mov    dl,al
c000fa90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa94:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa97:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa9d:	83 c0 01             	add    eax,0x1
c000faa0:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000faa6:	b0 ff                	mov    al,0xff
c000faa8:	e9 c3 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000faad:	8d 76 00             	lea    esi,[esi+0x0]
c000fab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fab8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fabd:	0f b7 d2             	movzx  edx,dx
c000fac0:	0f b7 c0             	movzx  eax,ax
c000fac3:	39 c2                	cmp    edx,eax
c000fac5:	73 15                	jae    c000fadc <tcp_enqueue_flags+0x154>
c000fac7:	83 ec 08             	sub    esp,0x8
c000faca:	68 54 0b 03 c0       	push   0xc0030b54
c000facf:	68 46 fd 02 c0       	push   0xc002fd46
c000fad4:	e8 f3 02 01 00       	call   c001fdcc <CPrintf>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000fae1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fae5:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000fae8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000faed:	83 ec 0c             	sub    esp,0xc
c000faf0:	51                   	push   ecx
c000faf1:	52                   	push   edx
c000faf2:	50                   	push   eax
c000faf3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000faf7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000fafb:	e8 d4 f1 ff ff       	call   c000ecd4 <tcp_create_segment>
c000fb00:	83 c4 20             	add    esp,0x20
c000fb03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb07:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fb0c:	75 2a                	jne    c000fb38 <tcp_enqueue_flags+0x1b0>
c000fb0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb12:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb15:	83 c8 80             	or     eax,0xffffff80
c000fb18:	88 c2                	mov    dl,al
c000fb1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb1e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb21:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fb27:	83 c0 01             	add    eax,0x1
c000fb2a:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fb30:	b0 ff                	mov    al,0xff
c000fb32:	e9 39 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fb37:	90                   	nop
c000fb38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb3f:	0f b7 c0             	movzx  eax,ax
c000fb42:	85 c0                	test   eax,eax
c000fb44:	74 16                	je     c000fb5c <tcp_enqueue_flags+0x1d4>
c000fb46:	83 ec 08             	sub    esp,0x8
c000fb49:	68 90 0b 03 c0       	push   0xc0030b90
c000fb4e:	68 46 fd 02 c0       	push   0xc002fd46
c000fb53:	e8 74 02 01 00       	call   c001fdcc <CPrintf>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	90                   	nop
c000fb5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb60:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb63:	85 c0                	test   eax,eax
c000fb65:	75 0d                	jne    c000fb74 <tcp_enqueue_flags+0x1ec>
c000fb67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fb6f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fb72:	eb 30                	jmp    c000fba4 <tcp_enqueue_flags+0x21c>
c000fb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb78:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb7f:	eb 0f                	jmp    c000fb90 <tcp_enqueue_flags+0x208>
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb8e:	66 90                	xchg   ax,ax
c000fb90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb96:	85 c0                	test   eax,eax
c000fb98:	75 ea                	jne    c000fb84 <tcp_enqueue_flags+0x1fc>
c000fb9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fba2:	89 10                	mov    DWORD PTR [eax],edx
c000fba4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fba8:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fbae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbb3:	83 e0 02             	and    eax,0x2
c000fbb6:	75 0c                	jne    c000fbc4 <tcp_enqueue_flags+0x23c>
c000fbb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbbd:	83 e0 01             	and    eax,0x1
c000fbc0:	74 26                	je     c000fbe8 <tcp_enqueue_flags+0x260>
c000fbc2:	66 90                	xchg   ax,ax
c000fbc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbc8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fbcb:	8d 50 01             	lea    edx,[eax+0x1]
c000fbce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd2:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd9:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fbdd:	83 e8 01             	sub    eax,0x1
c000fbe0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fbe4:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000fbe8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbed:	83 e0 01             	and    eax,0x1
c000fbf0:	74 16                	je     c000fc08 <tcp_enqueue_flags+0x280>
c000fbf2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbf9:	83 c8 20             	or     eax,0x20
c000fbfc:	88 c2                	mov    dl,al
c000fbfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc02:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc05:	8d 76 00             	lea    esi,[esi+0x0]
c000fc08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc0f:	83 ec 0c             	sub    esp,0xc
c000fc12:	50                   	push   eax
c000fc13:	e8 b0 90 ff ff       	call   c0008cc8 <pbuf_clen>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	88 c1                	mov    cl,al
c000fc1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc21:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fc24:	0f b6 c1             	movzx  eax,cl
c000fc27:	01 d0                	add    eax,edx
c000fc29:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fc2d:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000fc31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc35:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fc38:	0f b7 c0             	movzx  eax,ax
c000fc3b:	85 c0                	test   eax,eax
c000fc3d:	74 2d                	je     c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc43:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fc46:	85 c0                	test   eax,eax
c000fc48:	75 22                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc4e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc51:	85 c0                	test   eax,eax
c000fc53:	75 17                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc55:	83 ec 08             	sub    esp,0x8
c000fc58:	68 bc 0b 03 c0       	push   0xc0030bbc
c000fc5d:	68 46 fd 02 c0       	push   0xc002fd46
c000fc62:	e8 65 01 01 00       	call   c001fdcc <CPrintf>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	66 90                	xchg   ax,ax
c000fc6c:	b0 00                	mov    al,0x0
c000fc6e:	66 90                	xchg   ax,ax
c000fc70:	83 c4 3c             	add    esp,0x3c
c000fc73:	c3                   	ret    

c000fc74 <tcp_send_fin>:
c000fc74:	53                   	push   ebx
c000fc75:	83 ec 18             	sub    esp,0x18
c000fc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc7f:	85 c0                	test   eax,eax
c000fc81:	74 75                	je     c000fcf8 <tcp_send_fin+0x84>
c000fc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc87:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc8e:	eb 0c                	jmp    c000fc9c <tcp_send_fin+0x28>
c000fc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc9a:	66 90                	xchg   ax,ax
c000fc9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca2:	85 c0                	test   eax,eax
c000fca4:	75 ea                	jne    c000fc90 <tcp_send_fin+0x1c>
c000fca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fcb1:	0f b7 c0             	movzx  eax,ax
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	50                   	push   eax
c000fcb8:	e8 2b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	0f b7 c0             	movzx  eax,ax
c000fcc3:	83 e0 07             	and    eax,0x7
c000fcc6:	75 30                	jne    c000fcf8 <tcp_send_fin+0x84>
c000fcc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fccc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fccf:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fcd3:	83 ec 0c             	sub    esp,0xc
c000fcd6:	6a 01                	push   0x1
c000fcd8:	e8 0b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	89 c1                	mov    ecx,eax
c000fce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fce9:	89 d8                	mov    eax,ebx
c000fceb:	09 c8                	or     eax,ecx
c000fced:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fcf1:	b0 00                	mov    al,0x0
c000fcf3:	eb 17                	jmp    c000fd0c <tcp_send_fin+0x98>
c000fcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf8:	83 ec 08             	sub    esp,0x8
c000fcfb:	6a 01                	push   0x1
c000fcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd01:	e8 82 fc ff ff       	call   c000f988 <tcp_enqueue_flags>
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	8d 76 00             	lea    esi,[esi+0x0]
c000fd0c:	83 c4 18             	add    esp,0x18
c000fd0f:	5b                   	pop    ebx
c000fd10:	c3                   	ret    
c000fd11:	8d 76 00             	lea    esi,[esi+0x0]

c000fd14 <tcp_send_empty_ack>:
c000fd14:	53                   	push   ebx
c000fd15:	83 ec 18             	sub    esp,0x18
c000fd18:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd21:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	50                   	push   eax
c000fd28:	e8 df 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	89 c2                	mov    edx,eax
c000fd32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd37:	52                   	push   edx
c000fd38:	6a 00                	push   0x0
c000fd3a:	50                   	push   eax
c000fd3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd3f:	e8 34 ee ff ff       	call   c000eb78 <tcp_output_alloc_header>
c000fd44:	83 c4 10             	add    esp,0x10
c000fd47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd4b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd50:	75 0a                	jne    c000fd5c <tcp_send_empty_ack+0x48>
c000fd52:	b0 fe                	mov    al,0xfe
c000fd54:	e9 97 00 00 00       	jmp    c000fdf0 <tcp_send_empty_ack+0xdc>
c000fd59:	8d 76 00             	lea    esi,[esi+0x0]
c000fd5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fd67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd6e:	83 e0 fc             	and    eax,0xfffffffc
c000fd71:	88 c2                	mov    dl,al
c000fd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fd7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd81:	0f b7 d0             	movzx  edx,ax
c000fd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd88:	8d 48 04             	lea    ecx,[eax+0x4]
c000fd8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8f:	83 ec 0c             	sub    esp,0xc
c000fd92:	52                   	push   edx
c000fd93:	6a 06                	push   0x6
c000fd95:	51                   	push   ecx
c000fd96:	50                   	push   eax
c000fd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd9b:	e8 70 35 00 00       	call   c0013310 <inet_chksum_pseudo>
c000fda0:	83 c4 20             	add    esp,0x20
c000fda3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fda7:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fdab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdaf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fdb2:	0f b6 c8             	movzx  ecx,al
c000fdb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdb9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fdbc:	0f b6 d0             	movzx  edx,al
c000fdbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc3:	8d 58 04             	lea    ebx,[eax+0x4]
c000fdc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdca:	83 ec 08             	sub    esp,0x8
c000fdcd:	6a 06                	push   0x6
c000fdcf:	51                   	push   ecx
c000fdd0:	52                   	push   edx
c000fdd1:	53                   	push   ebx
c000fdd2:	50                   	push   eax
c000fdd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdd7:	e8 68 41 00 00       	call   c0013f44 <ip_output>
c000fddc:	83 c4 20             	add    esp,0x20
c000fddf:	83 ec 0c             	sub    esp,0xc
c000fde2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fde6:	e8 09 87 ff ff       	call   c00084f4 <pbuf_free>
c000fdeb:	83 c4 10             	add    esp,0x10
c000fdee:	b0 00                	mov    al,0x0
c000fdf0:	83 c4 18             	add    esp,0x18
c000fdf3:	5b                   	pop    ebx
c000fdf4:	c3                   	ret    
c000fdf5:	8d 76 00             	lea    esi,[esi+0x0]

c000fdf8 <tcp_output_segment>:
c000fdf8:	56                   	push   esi
c000fdf9:	53                   	push   ebx
c000fdfa:	83 ec 14             	sub    esp,0x14
c000fdfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe01:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fe04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe08:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe0b:	83 ec 0c             	sub    esp,0xc
c000fe0e:	50                   	push   eax
c000fe0f:	e8 f8 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fe14:	83 c4 10             	add    esp,0x10
c000fe17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fe1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe1e:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe22:	0f b7 c0             	movzx  eax,ax
c000fe25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe29:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	50                   	push   eax
c000fe30:	e8 b3 0d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fe3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe40:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fe43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe47:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe4b:	0f b7 c0             	movzx  eax,ax
c000fe4e:	01 c2                	add    edx,eax
c000fe50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe54:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fe57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe5e:	83 c0 14             	add    eax,0x14
c000fe61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe6c:	0f b6 c0             	movzx  eax,al
c000fe6f:	83 e0 01             	and    eax,0x1
c000fe72:	74 10                	je     c000fe84 <tcp_output_segment+0x8c>
c000fe74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe78:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fe7e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fe83:	90                   	nop
c000fe84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe88:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fe8c:	98                   	cwde   
c000fe8d:	83 f8 ff             	cmp    eax,0xffffffff
c000fe90:	75 0a                	jne    c000fe9c <tcp_output_segment+0xa4>
c000fe92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe96:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fe9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea0:	85 c0                	test   eax,eax
c000fea2:	74 0c                	je     c000feb0 <tcp_output_segment+0xb8>
c000fea4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea8:	8b 00                	mov    eax,DWORD PTR [eax]
c000feaa:	85 c0                	test   eax,eax
c000feac:	75 32                	jne    c000fee0 <tcp_output_segment+0xe8>
c000feae:	66 90                	xchg   ax,ax
c000feb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feb4:	83 c0 04             	add    eax,0x4
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	50                   	push   eax
c000febb:	e8 dc 38 00 00       	call   c001379c <ip_route>
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fec7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fecc:	0f 84 46 01 00 00    	je     c0010018 <tcp_output_segment+0x220>
c000fed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fed6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fed9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fedd:	89 10                	mov    DWORD PTR [eax],edx
c000fedf:	90                   	nop
c000fee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fee7:	85 c0                	test   eax,eax
c000fee9:	75 2d                	jne    c000ff18 <tcp_output_segment+0x120>
c000feeb:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fef1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fef5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fefc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff02:	83 ec 0c             	sub    esp,0xc
c000ff05:	50                   	push   eax
c000ff06:	e8 01 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ff0b:	83 c4 10             	add    esp,0x10
c000ff0e:	89 c2                	mov    edx,eax
c000ff10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff14:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000ff17:	90                   	nop
c000ff18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff1c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ff1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff29:	29 c2                	sub    edx,eax
c000ff2b:	89 d0                	mov    eax,edx
c000ff2d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000ff32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff39:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ff3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff41:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff44:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff49:	89 d6                	mov    esi,edx
c000ff4b:	29 c6                	sub    esi,eax
c000ff4d:	89 f0                	mov    eax,esi
c000ff4f:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000ff53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff5a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ff5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff61:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff64:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff69:	89 d6                	mov    esi,edx
c000ff6b:	29 c6                	sub    esi,eax
c000ff6d:	89 f0                	mov    eax,esi
c000ff6f:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000ff73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ff7e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ff81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ff84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8b:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ff91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff9b:	0f b7 c8             	movzx  ecx,ax
c000ff9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa2:	8d 70 04             	lea    esi,[eax+0x4]
c000ffa5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ffb4:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	51                   	push   ecx
c000ffbb:	6a 06                	push   0x6
c000ffbd:	56                   	push   esi
c000ffbe:	52                   	push   edx
c000ffbf:	50                   	push   eax
c000ffc0:	e8 4b 33 00 00       	call   c0013310 <inet_chksum_pseudo>
c000ffc5:	83 c4 20             	add    esp,0x20
c000ffc8:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000ffcc:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000ffd2:	83 c0 01             	add    eax,0x1
c000ffd5:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000ffdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffdf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000ffe2:	0f b6 d8             	movzx  ebx,al
c000ffe5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffe9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ffec:	0f b6 c8             	movzx  ecx,al
c000ffef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fff3:	8d 70 04             	lea    esi,[eax+0x4]
c000fff6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010001:	83 ec 08             	sub    esp,0x8
c0010004:	6a 06                	push   0x6
c0010006:	53                   	push   ebx
c0010007:	51                   	push   ecx
c0010008:	56                   	push   esi
c0010009:	52                   	push   edx
c001000a:	50                   	push   eax
c001000b:	e8 34 3f 00 00       	call   c0013f44 <ip_output>
c0010010:	83 c4 20             	add    esp,0x20
c0010013:	eb 07                	jmp    c001001c <tcp_output_segment+0x224>
c0010015:	8d 76 00             	lea    esi,[esi+0x0]
c0010018:	90                   	nop
c0010019:	8d 76 00             	lea    esi,[esi+0x0]
c001001c:	83 c4 14             	add    esp,0x14
c001001f:	5b                   	pop    ebx
c0010020:	5e                   	pop    esi
c0010021:	c3                   	ret    
c0010022:	66 90                	xchg   ax,ax

c0010024 <tcp_output>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	83 ec 24             	sub    esp,0x24
c0010029:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c001002e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0010032:	75 08                	jne    c001003c <tcp_output+0x18>
c0010034:	b0 00                	mov    al,0x0
c0010036:	e9 6d 04 00 00       	jmp    c00104a8 <tcp_output+0x484>
c001003b:	90                   	nop
c001003c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010040:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010044:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010048:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c001004b:	0f b7 d8             	movzx  ebx,ax
c001004e:	0f b7 ca             	movzx  ecx,dx
c0010051:	39 cb                	cmp    ebx,ecx
c0010053:	76 03                	jbe    c0010058 <tcp_output+0x34>
c0010055:	89 d0                	mov    eax,edx
c0010057:	90                   	nop
c0010058:	0f b7 c0             	movzx  eax,ax
c001005b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001005f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010063:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010066:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001006a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010071:	0f b6 c0             	movzx  eax,al
c0010074:	83 e0 02             	and    eax,0x2
c0010077:	74 4f                	je     c00100c8 <tcp_output+0xa4>
c0010079:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001007e:	74 34                	je     c00100b4 <tcp_output+0x90>
c0010080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010084:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010087:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001008a:	83 ec 0c             	sub    esp,0xc
c001008d:	50                   	push   eax
c001008e:	e8 79 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010093:	83 c4 10             	add    esp,0x10
c0010096:	89 c2                	mov    edx,eax
c0010098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001009c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001009f:	29 c2                	sub    edx,eax
c00100a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100a8:	0f b7 c0             	movzx  eax,ax
c00100ab:	01 d0                	add    eax,edx
c00100ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00100b1:	73 15                	jae    c00100c8 <tcp_output+0xa4>
c00100b3:	90                   	nop
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00100bb:	e8 54 fc ff ff       	call   c000fd14 <tcp_send_empty_ack>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	e9 e0 03 00 00       	jmp    c00104a8 <tcp_output+0x484>
c00100c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00100cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00100d8:	0f 84 ea 02 00 00    	je     c00103c8 <tcp_output+0x3a4>
c00100de:	eb 0c                	jmp    c00100ec <tcp_output+0xc8>
c00100e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ea:	66 90                	xchg   ax,ax
c00100ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f2:	85 c0                	test   eax,eax
c00100f4:	75 ea                	jne    c00100e0 <tcp_output+0xbc>
c00100f6:	e9 cd 02 00 00       	jmp    c00103c8 <tcp_output+0x3a4>
c00100fb:	90                   	nop
c00100fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010100:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010103:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010107:	0f b7 c0             	movzx  eax,ax
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	50                   	push   eax
c001010e:	e8 d5 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010113:	83 c4 10             	add    esp,0x10
c0010116:	0f b7 c0             	movzx  eax,ax
c0010119:	83 e0 04             	and    eax,0x4
c001011c:	74 16                	je     c0010134 <tcp_output+0x110>
c001011e:	83 ec 08             	sub    esp,0x8
c0010121:	68 53 0c 03 c0       	push   0xc0030c53
c0010126:	68 46 fd 02 c0       	push   0xc002fd46
c001012b:	e8 9c fc 00 00       	call   c001fdcc <CPrintf>
c0010130:	83 c4 10             	add    esp,0x10
c0010133:	90                   	nop
c0010134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010138:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001013b:	85 c0                	test   eax,eax
c001013d:	74 45                	je     c0010184 <tcp_output+0x160>
c001013f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010143:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010146:	0f b6 c0             	movzx  eax,al
c0010149:	83 e0 44             	and    eax,0x44
c001014c:	75 36                	jne    c0010184 <tcp_output+0x160>
c001014e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010152:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010155:	85 c0                	test   eax,eax
c0010157:	74 33                	je     c001018c <tcp_output+0x168>
c0010159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001015d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010160:	8b 00                	mov    eax,DWORD PTR [eax]
c0010162:	85 c0                	test   eax,eax
c0010164:	75 1e                	jne    c0010184 <tcp_output+0x160>
c0010166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001016a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001016d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010174:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010177:	0f b7 d2             	movzx  edx,dx
c001017a:	0f b7 c0             	movzx  eax,ax
c001017d:	39 c2                	cmp    edx,eax
c001017f:	72 0b                	jb     c001018c <tcp_output+0x168>
c0010181:	8d 76 00             	lea    esi,[esi+0x0]
c0010184:	b8 01 00 00 00       	mov    eax,0x1
c0010189:	eb 09                	jmp    c0010194 <tcp_output+0x170>
c001018b:	90                   	nop
c001018c:	b8 00 00 00 00       	mov    eax,0x0
c0010191:	8d 76 00             	lea    esi,[esi+0x0]
c0010194:	85 c0                	test   eax,eax
c0010196:	75 18                	jne    c00101b0 <tcp_output+0x18c>
c0010198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001019c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001019f:	0f b6 c0             	movzx  eax,al
c00101a2:	25 a0 00 00 00       	and    eax,0xa0
c00101a7:	0f 84 5b 02 00 00    	je     c0010408 <tcp_output+0x3e4>
c00101ad:	8d 76 00             	lea    esi,[esi+0x0]
c00101b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00101b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101ba:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00101bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00101c4:	83 f8 02             	cmp    eax,0x2
c00101c7:	74 3f                	je     c0010208 <tcp_output+0x1e4>
c00101c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101d0:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c00101d4:	83 ec 0c             	sub    esp,0xc
c00101d7:	6a 10                	push   0x10
c00101d9:	e8 0a 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00101de:	83 c4 10             	add    esp,0x10
c00101e1:	89 c1                	mov    ecx,eax
c00101e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00101ea:	89 d8                	mov    eax,ebx
c00101ec:	09 c8                	or     eax,ecx
c00101ee:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00101f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101f9:	83 e0 fc             	and    eax,0xfffffffc
c00101fc:	88 c2                	mov    dl,al
c00101fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010202:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010205:	8d 76 00             	lea    esi,[esi+0x0]
c0010208:	83 ec 08             	sub    esp,0x8
c001020b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001020f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010213:	e8 e0 fb ff ff       	call   c000fdf8 <tcp_output_segment>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001021f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	50                   	push   eax
c0010229:	e8 de 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001022e:	83 c4 10             	add    esp,0x10
c0010231:	89 c3                	mov    ebx,eax
c0010233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010237:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001023a:	0f b7 f0             	movzx  esi,ax
c001023d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010241:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010244:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010248:	0f b7 c0             	movzx  eax,ax
c001024b:	83 ec 0c             	sub    esp,0xc
c001024e:	50                   	push   eax
c001024f:	e8 94 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010254:	83 c4 10             	add    esp,0x10
c0010257:	0f b7 c0             	movzx  eax,ax
c001025a:	83 e0 03             	and    eax,0x3
c001025d:	0f 95 c0             	setne  al
c0010260:	0f b6 c0             	movzx  eax,al
c0010263:	01 f0                	add    eax,esi
c0010265:	01 d8                	add    eax,ebx
c0010267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001026b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001026f:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010272:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010276:	79 0c                	jns    c0010284 <tcp_output+0x260>
c0010278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001027c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010280:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010283:	90                   	nop
c0010284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001028b:	0f b7 d8             	movzx  ebx,ax
c001028e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010292:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010295:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010299:	0f b7 c0             	movzx  eax,ax
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	50                   	push   eax
c00102a0:	e8 43 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	0f b7 c0             	movzx  eax,ax
c00102ab:	83 e0 03             	and    eax,0x3
c00102ae:	0f 95 c0             	setne  al
c00102b1:	0f b6 c0             	movzx  eax,al
c00102b4:	01 d8                	add    eax,ebx
c00102b6:	85 c0                	test   eax,eax
c00102b8:	0f 8e ee 00 00 00    	jle    c00103ac <tcp_output+0x388>
c00102be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00102cf:	85 c0                	test   eax,eax
c00102d1:	75 19                	jne    c00102ec <tcp_output+0x2c8>
c00102d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102db:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00102de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102e6:	e9 d1 00 00 00       	jmp    c00103bc <tcp_output+0x398>
c00102eb:	90                   	nop
c00102ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	50                   	push   eax
c00102fa:	e8 0d 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	89 c3                	mov    ebx,eax
c0010304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010308:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001030b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	50                   	push   eax
c0010312:	e8 f5 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	29 c3                	sub    ebx,eax
c001031c:	89 d8                	mov    eax,ebx
c001031e:	79 74                	jns    c0010394 <tcp_output+0x370>
c0010320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010324:	83 c0 7c             	add    eax,0x7c
c0010327:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001032b:	eb 0f                	jmp    c001033c <tcp_output+0x318>
c001032d:	8d 76 00             	lea    esi,[esi+0x0]
c0010330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010334:	8b 00                	mov    eax,DWORD PTR [eax]
c0010336:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001033a:	66 90                	xchg   ax,ax
c001033c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010340:	8b 00                	mov    eax,DWORD PTR [eax]
c0010342:	85 c0                	test   eax,eax
c0010344:	74 36                	je     c001037c <tcp_output+0x358>
c0010346:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001034a:	8b 00                	mov    eax,DWORD PTR [eax]
c001034c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001034f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010352:	83 ec 0c             	sub    esp,0xc
c0010355:	50                   	push   eax
c0010356:	e8 b1 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001035b:	83 c4 10             	add    esp,0x10
c001035e:	89 c3                	mov    ebx,eax
c0010360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001036a:	83 ec 0c             	sub    esp,0xc
c001036d:	50                   	push   eax
c001036e:	e8 99 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010373:	83 c4 10             	add    esp,0x10
c0010376:	29 c3                	sub    ebx,eax
c0010378:	89 d8                	mov    eax,ebx
c001037a:	78 b4                	js     c0010330 <tcp_output+0x30c>
c001037c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010380:	8b 10                	mov    edx,DWORD PTR [eax]
c0010382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010386:	89 10                	mov    DWORD PTR [eax],edx
c0010388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001038c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010390:	89 10                	mov    DWORD PTR [eax],edx
c0010392:	eb 28                	jmp    c00103bc <tcp_output+0x398>
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001039c:	89 10                	mov    DWORD PTR [eax],edx
c001039e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00103a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00103a8:	eb 12                	jmp    c00103bc <tcp_output+0x398>
c00103aa:	66 90                	xchg   ax,ax
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103b3:	e8 b4 9d ff ff       	call   c000a16c <tcp_seg_free>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	90                   	nop
c00103bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00103c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00103c7:	90                   	nop
c00103c8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00103cd:	74 3d                	je     c001040c <tcp_output+0x3e8>
c00103cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103d9:	83 ec 0c             	sub    esp,0xc
c00103dc:	50                   	push   eax
c00103dd:	e8 2a 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 c2                	mov    edx,eax
c00103e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103eb:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00103ee:	29 c2                	sub    edx,eax
c00103f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00103f7:	0f b7 c0             	movzx  eax,ax
c00103fa:	01 d0                	add    eax,edx
c00103fc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010400:	0f 83 f6 fc ff ff    	jae    c00100fc <tcp_output+0xd8>
c0010406:	eb 04                	jmp    c001040c <tcp_output+0x3e8>
c0010408:	90                   	nop
c0010409:	8d 76 00             	lea    esi,[esi+0x0]
c001040c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010410:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010413:	85 c0                	test   eax,eax
c0010415:	75 0d                	jne    c0010424 <tcp_output+0x400>
c0010417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001041b:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010421:	8d 76 00             	lea    esi,[esi+0x0]
c0010424:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010429:	74 65                	je     c0010490 <tcp_output+0x46c>
c001042b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001042f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010435:	0f b6 c0             	movzx  eax,al
c0010438:	85 c0                	test   eax,eax
c001043a:	75 54                	jne    c0010490 <tcp_output+0x46c>
c001043c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010440:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010443:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	50                   	push   eax
c001044a:	e8 bd 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	89 c2                	mov    edx,eax
c0010454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010458:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001045b:	29 c2                	sub    edx,eax
c001045d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010461:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010464:	0f b7 c0             	movzx  eax,ax
c0010467:	01 c2                	add    edx,eax
c0010469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001046d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010470:	0f b7 c0             	movzx  eax,ax
c0010473:	39 c2                	cmp    edx,eax
c0010475:	76 19                	jbe    c0010490 <tcp_output+0x46c>
c0010477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001047b:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010489:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010494:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010497:	83 e0 7f             	and    eax,0x7f
c001049a:	88 c2                	mov    dl,al
c001049c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00104a3:	b0 00                	mov    al,0x0
c00104a5:	8d 76 00             	lea    esi,[esi+0x0]
c00104a8:	83 c4 24             	add    esp,0x24
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	c3                   	ret    
c00104ae:	66 90                	xchg   ax,ax

c00104b0 <tcp_rst>:
c00104b0:	83 ec 2c             	sub    esp,0x2c
c00104b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00104b7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00104bb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00104c0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00104c5:	83 ec 04             	sub    esp,0x4
c00104c8:	6a 00                	push   0x0
c00104ca:	6a 14                	push   0x14
c00104cc:	6a 01                	push   0x1
c00104ce:	e8 f9 81 ff ff       	call   c00086cc <pbuf_alloc>
c00104d3:	83 c4 10             	add    esp,0x10
c00104d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00104da:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00104df:	0f 84 37 01 00 00    	je     c001061c <tcp_rst+0x16c>
c00104e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104e9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00104ed:	0f b7 c0             	movzx  eax,ax
c00104f0:	83 f8 13             	cmp    eax,0x13
c00104f3:	77 17                	ja     c001050c <tcp_rst+0x5c>
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	68 60 09 03 c0       	push   0xc0030960
c00104fd:	68 46 fd 02 c0       	push   0xc002fd46
c0010502:	e8 c5 f8 00 00       	call   c001fdcc <CPrintf>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	66 90                	xchg   ax,ax
c001050c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010517:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	50                   	push   eax
c0010520:	e8 c3 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001052c:	66 89 02             	mov    WORD PTR [edx],ax
c001052f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0010534:	83 ec 0c             	sub    esp,0xc
c0010537:	50                   	push   eax
c0010538:	e8 ab 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001054f:	e8 b8 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	89 c2                	mov    edx,eax
c0010559:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001055d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010567:	e8 a0 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	89 c2                	mov    edx,eax
c0010571:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010575:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	68 14 50 00 00       	push   0x5014
c0010580:	e8 63 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001058c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010594:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c001059a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001059e:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00105a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105a8:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00105ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00105b5:	0f b7 c0             	movzx  eax,ax
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	50                   	push   eax
c00105bc:	6a 06                	push   0x6
c00105be:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00105ca:	e8 41 2d 00 00       	call   c0013310 <inet_chksum_pseudo>
c00105cf:	83 c4 20             	add    esp,0x20
c00105d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105d6:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00105da:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00105e0:	83 c0 01             	add    eax,0x1
c00105e3:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00105e9:	83 ec 08             	sub    esp,0x8
c00105ec:	6a 06                	push   0x6
c00105ee:	6a 00                	push   0x0
c00105f0:	68 ff 00 00 00       	push   0xff
c00105f5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105f9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105fd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010601:	e8 3e 39 00 00       	call   c0013f44 <ip_output>
c0010606:	83 c4 20             	add    esp,0x20
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010610:	e8 df 7e ff ff       	call   c00084f4 <pbuf_free>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	eb 06                	jmp    c0010620 <tcp_rst+0x170>
c001061a:	66 90                	xchg   ax,ax
c001061c:	90                   	nop
c001061d:	8d 76 00             	lea    esi,[esi+0x0]
c0010620:	83 c4 2c             	add    esp,0x2c
c0010623:	c3                   	ret    

c0010624 <tcp_rexmit_rto>:
c0010624:	83 ec 1c             	sub    esp,0x1c
c0010627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001062b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001062e:	85 c0                	test   eax,eax
c0010630:	74 7a                	je     c00106ac <tcp_rexmit_rto+0x88>
c0010632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010636:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001063d:	eb 0d                	jmp    c001064c <tcp_rexmit_rto+0x28>
c001063f:	90                   	nop
c0010640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010644:	8b 00                	mov    eax,DWORD PTR [eax]
c0010646:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001064a:	66 90                	xchg   ax,ax
c001064c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010650:	8b 00                	mov    eax,DWORD PTR [eax]
c0010652:	85 c0                	test   eax,eax
c0010654:	75 ea                	jne    c0010640 <tcp_rexmit_rto+0x1c>
c0010656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065a:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c001065d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010661:	89 10                	mov    DWORD PTR [eax],edx
c0010663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010667:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c001066a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010675:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c001067c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010680:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010683:	83 c0 01             	add    eax,0x1
c0010686:	88 c2                	mov    dl,al
c0010688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001068c:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001068f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010693:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106a1:	e8 7e f9 ff ff       	call   c0010024 <tcp_output>
c00106a6:	83 c4 10             	add    esp,0x10
c00106a9:	eb 05                	jmp    c00106b0 <tcp_rexmit_rto+0x8c>
c00106ab:	90                   	nop
c00106ac:	90                   	nop
c00106ad:	8d 76 00             	lea    esi,[esi+0x0]
c00106b0:	83 c4 1c             	add    esp,0x1c
c00106b3:	c3                   	ret    

c00106b4 <tcp_rexmit>:
c00106b4:	53                   	push   ebx
c00106b5:	83 ec 18             	sub    esp,0x18
c00106b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106bc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106bf:	85 c0                	test   eax,eax
c00106c1:	0f 84 a9 00 00 00    	je     c0010770 <tcp_rexmit+0xbc>
c00106c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00106d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106dc:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00106df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106e3:	83 c0 78             	add    eax,0x78
c00106e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106ea:	eb 0c                	jmp    c00106f8 <tcp_rexmit+0x44>
c00106ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00106f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f6:	66 90                	xchg   ax,ax
c00106f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00106fe:	85 c0                	test   eax,eax
c0010700:	74 36                	je     c0010738 <tcp_rexmit+0x84>
c0010702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010706:	8b 00                	mov    eax,DWORD PTR [eax]
c0010708:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001070b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001070e:	83 ec 0c             	sub    esp,0xc
c0010711:	50                   	push   eax
c0010712:	e8 f5 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010717:	83 c4 10             	add    esp,0x10
c001071a:	89 c3                	mov    ebx,eax
c001071c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010726:	83 ec 0c             	sub    esp,0xc
c0010729:	50                   	push   eax
c001072a:	e8 dd 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	29 c3                	sub    ebx,eax
c0010734:	89 d8                	mov    eax,ebx
c0010736:	78 b4                	js     c00106ec <tcp_rexmit+0x38>
c0010738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001073c:	8b 10                	mov    edx,DWORD PTR [eax]
c001073e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010742:	89 10                	mov    DWORD PTR [eax],edx
c0010744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074c:	89 10                	mov    DWORD PTR [eax],edx
c001074e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010752:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010755:	83 c0 01             	add    eax,0x1
c0010758:	88 c2                	mov    dl,al
c001075a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075e:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010765:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001076c:	eb 06                	jmp    c0010774 <tcp_rexmit+0xc0>
c001076e:	66 90                	xchg   ax,ax
c0010770:	90                   	nop
c0010771:	8d 76 00             	lea    esi,[esi+0x0]
c0010774:	83 c4 18             	add    esp,0x18
c0010777:	5b                   	pop    ebx
c0010778:	c3                   	ret    
c0010779:	8d 76 00             	lea    esi,[esi+0x0]

c001077c <tcp_rexmit_fast>:
c001077c:	83 ec 0c             	sub    esp,0xc
c001077f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010783:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010786:	85 c0                	test   eax,eax
c0010788:	0f 84 ca 00 00 00    	je     c0010858 <tcp_rexmit_fast+0xdc>
c001078e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010792:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010795:	0f b6 c0             	movzx  eax,al
c0010798:	83 e0 04             	and    eax,0x4
c001079b:	0f 85 b7 00 00 00    	jne    c0010858 <tcp_rexmit_fast+0xdc>
c00107a1:	83 ec 0c             	sub    esp,0xc
c00107a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107a8:	e8 07 ff ff ff       	call   c00106b4 <tcp_rexmit>
c00107ad:	83 c4 10             	add    esp,0x10
c00107b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c00107b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107bc:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107bf:	0f b7 d2             	movzx  edx,dx
c00107c2:	0f b7 c0             	movzx  eax,ax
c00107c5:	39 c2                	cmp    edx,eax
c00107c7:	76 17                	jbe    c00107e0 <tcp_rexmit_fast+0x64>
c00107c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107cd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107d0:	0f b7 c0             	movzx  eax,ax
c00107d3:	d1 e8                	shr    eax,1
c00107d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d9:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107dd:	eb 19                	jmp    c00107f8 <tcp_rexmit_fast+0x7c>
c00107df:	90                   	nop
c00107e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	d1 e8                	shr    eax,1
c00107ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107f1:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107f5:	8d 76 00             	lea    esi,[esi+0x0]
c00107f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fc:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c00107ff:	0f b7 d0             	movzx  edx,ax
c0010802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010806:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010809:	0f b7 c0             	movzx  eax,ax
c001080c:	01 c0                	add    eax,eax
c001080e:	39 c2                	cmp    edx,eax
c0010810:	7d 12                	jge    c0010824 <tcp_rexmit_fast+0xa8>
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010819:	d1 e0                	shl    eax,1
c001081b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001081f:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010823:	90                   	nop
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001082b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010832:	89 c1                	mov    ecx,eax
c0010834:	d1 e1                	shl    ecx,1
c0010836:	01 c8                	add    eax,ecx
c0010838:	01 d0                	add    eax,edx
c001083a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001083e:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010849:	83 c8 04             	or     eax,0x4
c001084c:	88 c2                	mov    dl,al
c001084e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010852:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010855:	8d 76 00             	lea    esi,[esi+0x0]
c0010858:	90                   	nop
c0010859:	83 c4 0c             	add    esp,0xc
c001085c:	c3                   	ret    
c001085d:	8d 76 00             	lea    esi,[esi+0x0]

c0010860 <tcp_keepalive>:
c0010860:	83 ec 1c             	sub    esp,0x1c
c0010863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010867:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001086a:	83 e8 01             	sub    eax,0x1
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	50                   	push   eax
c0010871:	e8 96 03 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	50                   	push   eax
c001087a:	6a 00                	push   0x0
c001087c:	6a 00                	push   0x0
c001087e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010882:	e8 f1 e2 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c0010887:	83 c4 10             	add    esp,0x10
c001088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010893:	0f 84 87 00 00 00    	je     c0010920 <tcp_keepalive+0xc0>
c0010899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001089d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108ab:	0f b7 d0             	movzx  edx,ax
c00108ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b9:	83 ec 0c             	sub    esp,0xc
c00108bc:	52                   	push   edx
c00108bd:	6a 06                	push   0x6
c00108bf:	51                   	push   ecx
c00108c0:	50                   	push   eax
c00108c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00108c5:	e8 46 2a 00 00       	call   c0013310 <inet_chksum_pseudo>
c00108ca:	83 c4 20             	add    esp,0x20
c00108cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108d1:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00108d5:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00108db:	83 c0 01             	add    eax,0x1
c00108de:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00108e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108e8:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00108eb:	0f b6 d0             	movzx  edx,al
c00108ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f9:	83 ec 08             	sub    esp,0x8
c00108fc:	6a 06                	push   0x6
c00108fe:	6a 00                	push   0x0
c0010900:	52                   	push   edx
c0010901:	51                   	push   ecx
c0010902:	50                   	push   eax
c0010903:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010907:	e8 38 36 00 00       	call   c0013f44 <ip_output>
c001090c:	83 c4 20             	add    esp,0x20
c001090f:	83 ec 0c             	sub    esp,0xc
c0010912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010916:	e8 d9 7b ff ff       	call   c00084f4 <pbuf_free>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	eb 04                	jmp    c0010924 <tcp_keepalive+0xc4>
c0010920:	90                   	nop
c0010921:	8d 76 00             	lea    esi,[esi+0x0]
c0010924:	83 c4 1c             	add    esp,0x1c
c0010927:	c3                   	ret    

c0010928 <tcp_zero_window_probe>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 28             	sub    esp,0x28
c001092c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010930:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010933:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010937:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001093c:	75 0e                	jne    c001094c <tcp_zero_window_probe+0x24>
c001093e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010942:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010945:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010949:	8d 76 00             	lea    esi,[esi+0x0]
c001094c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010951:	0f 84 95 01 00 00    	je     c0010aec <tcp_zero_window_probe+0x1c4>
c0010957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001095b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001095e:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010962:	0f b7 c0             	movzx  eax,ax
c0010965:	83 ec 0c             	sub    esp,0xc
c0010968:	50                   	push   eax
c0010969:	e8 7a 02 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	0f b7 c0             	movzx  eax,ax
c0010974:	83 e0 01             	and    eax,0x1
c0010977:	74 17                	je     c0010990 <tcp_zero_window_probe+0x68>
c0010979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001097d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010980:	0f b7 c0             	movzx  eax,ax
c0010983:	85 c0                	test   eax,eax
c0010985:	75 09                	jne    c0010990 <tcp_zero_window_probe+0x68>
c0010987:	b8 01 00 00 00       	mov    eax,0x1
c001098c:	eb 0a                	jmp    c0010998 <tcp_zero_window_probe+0x70>
c001098e:	66 90                	xchg   ax,ax
c0010990:	b8 00 00 00 00       	mov    eax,0x0
c0010995:	8d 76 00             	lea    esi,[esi+0x0]
c0010998:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001099c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109a1:	85 c0                	test   eax,eax
c00109a3:	0f 94 c0             	sete   al
c00109a6:	0f b6 c0             	movzx  eax,al
c00109a9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00109ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109b8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00109bd:	52                   	push   edx
c00109be:	50                   	push   eax
c00109bf:	6a 00                	push   0x0
c00109c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00109c5:	e8 ae e1 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c00109ca:	83 c4 10             	add    esp,0x10
c00109cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00109d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00109d6:	0f 84 14 01 00 00    	je     c0010af0 <tcp_zero_window_probe+0x1c8>
c00109dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109e7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109ec:	85 c0                	test   eax,eax
c00109ee:	74 28                	je     c0010a18 <tcp_zero_window_probe+0xf0>
c00109f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00109f8:	80 e4 c0             	and    ah,0xc0
c00109fb:	89 c3                	mov    ebx,eax
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	6a 11                	push   0x11
c0010a02:	e8 e1 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	09 d8                	or     eax,ebx
c0010a0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a10:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010a14:	eb 5a                	jmp    c0010a70 <tcp_zero_window_probe+0x148>
c0010a16:	66 90                	xchg   ax,ax
c0010a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a2d:	83 c0 14             	add    eax,0x14
c0010a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a38:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a3c:	0f b7 c0             	movzx  eax,ax
c0010a3f:	83 ec 0c             	sub    esp,0xc
c0010a42:	50                   	push   eax
c0010a43:	e8 a0 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a48:	83 c4 10             	add    esp,0x10
c0010a4b:	0f b7 c0             	movzx  eax,ax
c0010a4e:	c1 e8 0c             	shr    eax,0xc
c0010a51:	c1 e0 02             	shl    eax,0x2
c0010a54:	0f b7 d0             	movzx  edx,ax
c0010a57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a5e:	52                   	push   edx
c0010a5f:	6a 01                	push   0x1
c0010a61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a65:	50                   	push   eax
c0010a66:	e8 29 87 ff ff       	call   c0009194 <pbuf_copy_partial>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	66 90                	xchg   ax,ax
c0010a70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a77:	0f b7 d0             	movzx  edx,ax
c0010a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a7e:	8d 48 04             	lea    ecx,[eax+0x4]
c0010a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	52                   	push   edx
c0010a89:	6a 06                	push   0x6
c0010a8b:	51                   	push   ecx
c0010a8c:	50                   	push   eax
c0010a8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010a91:	e8 7a 28 00 00       	call   c0013310 <inet_chksum_pseudo>
c0010a96:	83 c4 20             	add    esp,0x20
c0010a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a9d:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010aa1:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010aa7:	83 c0 01             	add    eax,0x1
c0010aaa:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ab4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010ab7:	0f b6 d0             	movzx  edx,al
c0010aba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010abe:	8d 48 04             	lea    ecx,[eax+0x4]
c0010ac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ac5:	83 ec 08             	sub    esp,0x8
c0010ac8:	6a 06                	push   0x6
c0010aca:	6a 00                	push   0x0
c0010acc:	52                   	push   edx
c0010acd:	51                   	push   ecx
c0010ace:	50                   	push   eax
c0010acf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010ad3:	e8 6c 34 00 00       	call   c0013f44 <ip_output>
c0010ad8:	83 c4 20             	add    esp,0x20
c0010adb:	83 ec 0c             	sub    esp,0xc
c0010ade:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ae2:	e8 0d 7a ff ff       	call   c00084f4 <pbuf_free>
c0010ae7:	83 c4 10             	add    esp,0x10
c0010aea:	eb 08                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aec:	90                   	nop
c0010aed:	eb 05                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aef:	90                   	nop
c0010af0:	90                   	nop
c0010af1:	8d 76 00             	lea    esi,[esi+0x0]
c0010af4:	83 c4 28             	add    esp,0x28
c0010af7:	5b                   	pop    ebx
c0010af8:	c3                   	ret    
c0010af9:	66 90                	xchg   ax,ax
c0010afb:	90                   	nop

c0010afc <sys_timeout>:
c0010afc:	83 ec 1c             	sub    esp,0x1c
c0010aff:	83 ec 0c             	sub    esp,0xc
c0010b02:	6a 0b                	push   0xb
c0010b04:	e8 03 70 ff ff       	call   c0007b0c <memp_malloc>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b15:	75 25                	jne    c0010b3c <sys_timeout+0x40>
c0010b17:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b1c:	0f 85 3e 01 00 00    	jne    c0010c60 <sys_timeout+0x164>
c0010b22:	83 ec 08             	sub    esp,0x8
c0010b25:	68 6c 0c 03 c0       	push   0xc0030c6c
c0010b2a:	68 46 fd 02 c0       	push   0xc002fd46
c0010b2f:	e8 98 f2 00 00       	call   c001fdcc <CPrintf>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	e9 24 01 00 00       	jmp    c0010c60 <sys_timeout+0x164>
c0010b3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010b59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b67:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	75 10                	jne    c0010b80 <sys_timeout+0x84>
c0010b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b74:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010b79:	e9 e6 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010b7e:	66 90                	xchg   ax,ax
c0010b80:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010b8c:	73 2e                	jae    c0010bbc <sys_timeout+0xc0>
c0010b8e:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b93:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b96:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b9b:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010b9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba2:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bac:	89 10                	mov    DWORD PTR [eax],edx
c0010bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bb2:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010bb7:	e9 a8 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010bbc:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bc5:	e9 86 00 00 00       	jmp    c0010c50 <sys_timeout+0x154>
c0010bca:	66 90                	xchg   ax,ax
c0010bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bda:	29 c2                	sub    edx,eax
c0010bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010be9:	85 c0                	test   eax,eax
c0010beb:	74 17                	je     c0010c04 <sys_timeout+0x108>
c0010bed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bf3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfd:	39 c2                	cmp    edx,eax
c0010bff:	76 43                	jbe    c0010c44 <sys_timeout+0x148>
c0010c01:	8d 76 00             	lea    esi,[esi+0x0]
c0010c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c0a:	85 c0                	test   eax,eax
c0010c0c:	74 1e                	je     c0010c2c <sys_timeout+0x130>
c0010c0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c14:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c1b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c24:	29 d1                	sub    ecx,edx
c0010c26:	89 ca                	mov    edx,ecx
c0010c28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c2b:	90                   	nop
c0010c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c36:	89 10                	mov    DWORD PTR [eax],edx
c0010c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c40:	89 10                	mov    DWORD PTR [eax],edx
c0010c42:	eb 20                	jmp    c0010c64 <sys_timeout+0x168>
c0010c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c4e:	66 90                	xchg   ax,ax
c0010c50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c55:	0f 85 71 ff ff ff    	jne    c0010bcc <sys_timeout+0xd0>
c0010c5b:	eb 07                	jmp    c0010c64 <sys_timeout+0x168>
c0010c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c60:	90                   	nop
c0010c61:	8d 76 00             	lea    esi,[esi+0x0]
c0010c64:	83 c4 1c             	add    esp,0x1c
c0010c67:	c3                   	ret    

c0010c68 <tcpip_tcp_timer>:
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	e8 34 a5 ff ff       	call   c000b1a4 <tcp_tmr>
c0010c70:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010c75:	85 c0                	test   eax,eax
c0010c77:	75 0b                	jne    c0010c84 <tcpip_tcp_timer+0x1c>
c0010c79:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010c7e:	85 c0                	test   eax,eax
c0010c80:	74 1e                	je     c0010ca0 <tcpip_tcp_timer+0x38>
c0010c82:	66 90                	xchg   ax,ax
c0010c84:	83 ec 04             	sub    esp,0x4
c0010c87:	6a 00                	push   0x0
c0010c89:	68 68 0c 01 c0       	push   0xc0010c68
c0010c8e:	68 fa 00 00 00       	push   0xfa
c0010c93:	e8 64 fe ff ff       	call   c0010afc <sys_timeout>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	eb 0f                	jmp    c0010cac <tcpip_tcp_timer+0x44>
c0010c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010ca0:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	83 c4 0c             	add    esp,0xc
c0010cb0:	c3                   	ret    
c0010cb1:	8d 76 00             	lea    esi,[esi+0x0]

c0010cb4 <tcp_timer_needed>:
c0010cb4:	83 ec 0c             	sub    esp,0xc
c0010cb7:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010cbc:	85 c0                	test   eax,eax
c0010cbe:	75 38                	jne    c0010cf8 <tcp_timer_needed+0x44>
c0010cc0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010cc5:	85 c0                	test   eax,eax
c0010cc7:	75 0b                	jne    c0010cd4 <tcp_timer_needed+0x20>
c0010cc9:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010cce:	85 c0                	test   eax,eax
c0010cd0:	74 26                	je     c0010cf8 <tcp_timer_needed+0x44>
c0010cd2:	66 90                	xchg   ax,ax
c0010cd4:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010cde:	83 ec 04             	sub    esp,0x4
c0010ce1:	6a 00                	push   0x0
c0010ce3:	68 68 0c 01 c0       	push   0xc0010c68
c0010ce8:	68 fa 00 00 00       	push   0xfa
c0010ced:	e8 0a fe ff ff       	call   c0010afc <sys_timeout>
c0010cf2:	83 c4 10             	add    esp,0x10
c0010cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cf8:	90                   	nop
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	c3                   	ret    
c0010cfd:	8d 76 00             	lea    esi,[esi+0x0]

c0010d00 <ip_reass_timer>:
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	e8 f0 3a 00 00       	call   c00147f8 <ip_reass_tmr>
c0010d08:	83 ec 04             	sub    esp,0x4
c0010d0b:	6a 00                	push   0x0
c0010d0d:	68 00 0d 01 c0       	push   0xc0010d00
c0010d12:	68 e8 03 00 00       	push   0x3e8
c0010d17:	e8 e0 fd ff ff       	call   c0010afc <sys_timeout>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	90                   	nop
c0010d20:	83 c4 0c             	add    esp,0xc
c0010d23:	c3                   	ret    

c0010d24 <arp_timer>:
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	e8 60 0d 00 00       	call   c0011a8c <etharp_tmr>
c0010d2c:	83 ec 04             	sub    esp,0x4
c0010d2f:	6a 00                	push   0x0
c0010d31:	68 24 0d 01 c0       	push   0xc0010d24
c0010d36:	68 88 13 00 00       	push   0x1388
c0010d3b:	e8 bc fd ff ff       	call   c0010afc <sys_timeout>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	90                   	nop
c0010d44:	83 c4 0c             	add    esp,0xc
c0010d47:	c3                   	ret    

c0010d48 <sys_timeouts_init>:
c0010d48:	83 ec 0c             	sub    esp,0xc
c0010d4b:	83 ec 04             	sub    esp,0x4
c0010d4e:	6a 00                	push   0x0
c0010d50:	68 00 0d 01 c0       	push   0xc0010d00
c0010d55:	68 e8 03 00 00       	push   0x3e8
c0010d5a:	e8 9d fd ff ff       	call   c0010afc <sys_timeout>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	83 ec 04             	sub    esp,0x4
c0010d65:	6a 00                	push   0x0
c0010d67:	68 24 0d 01 c0       	push   0xc0010d24
c0010d6c:	68 88 13 00 00       	push   0x1388
c0010d71:	e8 86 fd ff ff       	call   c0010afc <sys_timeout>
c0010d76:	83 c4 10             	add    esp,0x10
c0010d79:	90                   	nop
c0010d7a:	83 c4 0c             	add    esp,0xc
c0010d7d:	c3                   	ret    
c0010d7e:	66 90                	xchg   ax,ax

c0010d80 <sys_untimeout>:
c0010d80:	83 ec 1c             	sub    esp,0x1c
c0010d83:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d88:	85 c0                	test   eax,eax
c0010d8a:	0f 84 b4 00 00 00    	je     c0010e44 <sys_untimeout+0xc4>
c0010d90:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010da1:	e9 8e 00 00 00       	jmp    c0010e34 <sys_untimeout+0xb4>
c0010da6:	66 90                	xchg   ax,ax
c0010da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010daf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010db3:	75 6b                	jne    c0010e20 <sys_untimeout+0xa0>
c0010db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010db9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010dbc:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010dc0:	75 5e                	jne    c0010e20 <sys_untimeout+0xa0>
c0010dc2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010dc7:	75 0f                	jne    c0010dd8 <sys_untimeout+0x58>
c0010dc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dcf:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010dd4:	eb 0e                	jmp    c0010de4 <sys_untimeout+0x64>
c0010dd6:	66 90                	xchg   ax,ax
c0010dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de2:	89 10                	mov    DWORD PTR [eax],edx
c0010de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dea:	85 c0                	test   eax,eax
c0010dec:	74 1e                	je     c0010e0c <sys_untimeout+0x8c>
c0010dee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010df4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010df7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dfb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010dfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e04:	01 ca                	add    edx,ecx
c0010e06:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e09:	8d 76 00             	lea    esi,[esi+0x0]
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e13:	6a 0b                	push   0xb
c0010e15:	e8 1e 6e ff ff       	call   c0007c38 <memp_free>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	eb 29                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e1f:	90                   	nop
c0010e20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e32:	66 90                	xchg   ax,ax
c0010e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e39:	0f 85 69 ff ff ff    	jne    c0010da8 <sys_untimeout+0x28>
c0010e3f:	90                   	nop
c0010e40:	eb 06                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e42:	66 90                	xchg   ax,ax
c0010e44:	90                   	nop
c0010e45:	8d 76 00             	lea    esi,[esi+0x0]
c0010e48:	83 c4 1c             	add    esp,0x1c
c0010e4b:	c3                   	ret    

c0010e4c <sys_timeouts_mbox_fetch>:
c0010e4c:	83 ec 1c             	sub    esp,0x1c
c0010e4f:	90                   	nop
c0010e50:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e55:	85 c0                	test   eax,eax
c0010e57:	75 1f                	jne    c0010e78 <sys_timeouts_mbox_fetch+0x2c>
c0010e59:	83 ec 04             	sub    esp,0x4
c0010e5c:	6a 00                	push   0x0
c0010e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e66:	e8 c1 fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e72:	e9 cd 00 00 00       	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010e77:	90                   	nop
c0010e78:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e80:	85 c0                	test   eax,eax
c0010e82:	74 24                	je     c0010ea8 <sys_timeouts_mbox_fetch+0x5c>
c0010e84:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	83 ec 04             	sub    esp,0x4
c0010e8f:	50                   	push   eax
c0010e90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e98:	e8 8f fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e9d:	83 c4 10             	add    esp,0x10
c0010ea0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ea4:	eb 0a                	jmp    c0010eb0 <sys_timeouts_mbox_fetch+0x64>
c0010ea6:	66 90                	xchg   ax,ax
c0010ea8:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010eb0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010eb5:	75 5d                	jne    c0010f14 <sys_timeouts_mbox_fetch+0xc8>
c0010eb7:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ec6:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ecf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010edd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ee7:	6a 0b                	push   0xb
c0010ee9:	e8 4a 6d ff ff       	call   c0007c38 <memp_free>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010ef6:	0f 84 54 ff ff ff    	je     c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010efc:	83 ec 0c             	sub    esp,0xc
c0010eff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010f03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f07:	ff d0                	call   eax
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	e9 3f ff ff ff       	jmp    c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010f11:	8d 76 00             	lea    esi,[esi+0x0]
c0010f14:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010f20:	73 16                	jae    c0010f38 <sys_timeouts_mbox_fetch+0xec>
c0010f22:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f27:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f2a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f2f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010f33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f36:	eb 0c                	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010f38:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f44:	90                   	nop
c0010f45:	83 c4 1c             	add    esp,0x1c
c0010f48:	c3                   	ret    
c0010f49:	66 90                	xchg   ax,ax
c0010f4b:	90                   	nop

c0010f4c <udp_input>:
c0010f4c:	53                   	push   ebx
c0010f4d:	83 ec 28             	sub    esp,0x28
c0010f50:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010f56:	83 c0 01             	add    eax,0x1
c0010f59:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f71:	0f b7 d8             	movzx  ebx,ax
c0010f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f78:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010f7b:	0f b7 c0             	movzx  eax,ax
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	50                   	push   eax
c0010f82:	e8 61 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	0f b7 c0             	movzx  eax,ax
c0010f8d:	c1 e8 08             	shr    eax,0x8
c0010f90:	0f b7 c0             	movzx  eax,ax
c0010f93:	83 e0 0f             	and    eax,0xf
c0010f96:	83 c0 02             	add    eax,0x2
c0010f99:	c1 e0 02             	shl    eax,0x2
c0010f9c:	39 c3                	cmp    ebx,eax
c0010f9e:	7c 3c                	jl     c0010fdc <udp_input+0x90>
c0010fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010fa7:	0f b7 c0             	movzx  eax,ax
c0010faa:	83 ec 0c             	sub    esp,0xc
c0010fad:	50                   	push   eax
c0010fae:	e8 35 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	0f b7 c0             	movzx  eax,ax
c0010fb9:	c1 e8 08             	shr    eax,0x8
c0010fbc:	83 e0 0f             	and    eax,0xf
c0010fbf:	c1 e0 02             	shl    eax,0x2
c0010fc2:	f7 d8                	neg    eax
c0010fc4:	98                   	cwde   
c0010fc5:	83 ec 08             	sub    esp,0x8
c0010fc8:	50                   	push   eax
c0010fc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fcd:	e8 86 73 ff ff       	call   c0008358 <pbuf_header>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	0f b6 c0             	movzx  eax,al
c0010fd8:	85 c0                	test   eax,eax
c0010fda:	74 34                	je     c0011010 <udp_input+0xc4>
c0010fdc:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010fe2:	83 c0 01             	add    eax,0x1
c0010fe5:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010feb:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010ff1:	83 c0 01             	add    eax,0x1
c0010ff4:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011001:	e8 ee 74 ff ff       	call   c00084f4 <pbuf_free>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	e9 aa 03 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001100e:	66 90                	xchg   ax,ax
c0011010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001101b:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011020:	83 ec 08             	sub    esp,0x8
c0011023:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011027:	50                   	push   eax
c0011028:	e8 bb 2f 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0011034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011038:	66 8b 00             	mov    ax,WORD PTR [eax]
c001103b:	0f b7 c0             	movzx  eax,ax
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	50                   	push   eax
c0011042:	e8 a1 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011047:	83 c4 10             	add    esp,0x10
c001104a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001104f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011053:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011057:	0f b7 c0             	movzx  eax,ax
c001105a:	83 ec 0c             	sub    esp,0xc
c001105d:	50                   	push   eax
c001105e:	e8 85 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001106b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011073:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011078:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011080:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011089:	e9 0a 01 00 00       	jmp    c0011198 <udp_input+0x24c>
c001108e:	66 90                	xchg   ax,ax
c0011090:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011099:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001109d:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00110a2:	0f b7 c0             	movzx  eax,ax
c00110a5:	39 c2                	cmp    edx,eax
c00110a7:	75 57                	jne    c0011100 <udp_input+0x1b4>
c00110a9:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110ae:	85 c0                	test   eax,eax
c00110b0:	75 12                	jne    c00110c4 <udp_input+0x178>
c00110b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110b6:	85 c0                	test   eax,eax
c00110b8:	74 22                	je     c00110dc <udp_input+0x190>
c00110ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110be:	8b 00                	mov    eax,DWORD PTR [eax]
c00110c0:	85 c0                	test   eax,eax
c00110c2:	74 18                	je     c00110dc <udp_input+0x190>
c00110c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00110ca:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110cf:	39 c2                	cmp    edx,eax
c00110d1:	74 09                	je     c00110dc <udp_input+0x190>
c00110d3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110d8:	85 c0                	test   eax,eax
c00110da:	74 24                	je     c0011100 <udp_input+0x1b4>
c00110dc:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c00110e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00110e6:	75 18                	jne    c0011100 <udp_input+0x1b4>
c00110e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ec:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00110ef:	0f b6 c0             	movzx  eax,al
c00110f2:	83 e0 04             	and    eax,0x4
c00110f5:	75 09                	jne    c0011100 <udp_input+0x1b4>
c00110f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110ff:	90                   	nop
c0011100:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0011105:	85 c0                	test   eax,eax
c0011107:	74 7b                	je     c0011184 <udp_input+0x238>
c0011109:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011110:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0011115:	0f b7 c0             	movzx  eax,ax
c0011118:	39 c2                	cmp    edx,eax
c001111a:	75 68                	jne    c0011184 <udp_input+0x238>
c001111c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011120:	83 c0 04             	add    eax,0x4
c0011123:	74 1b                	je     c0011140 <udp_input+0x1f4>
c0011125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112c:	85 c0                	test   eax,eax
c001112e:	74 10                	je     c0011140 <udp_input+0x1f4>
c0011130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011137:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c001113c:	39 c2                	cmp    edx,eax
c001113e:	75 44                	jne    c0011184 <udp_input+0x238>
c0011140:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011145:	74 29                	je     c0011170 <udp_input+0x224>
c0011147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001114b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001114e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011155:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001115b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011166:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001116b:	eb 37                	jmp    c00111a4 <udp_input+0x258>
c001116d:	8d 76 00             	lea    esi,[esi+0x0]
c0011170:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0011176:	83 c0 01             	add    eax,0x1
c0011179:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c001117f:	eb 23                	jmp    c00111a4 <udp_input+0x258>
c0011181:	8d 76 00             	lea    esi,[esi+0x0]
c0011184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001118c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011190:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011193:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011197:	90                   	nop
c0011198:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001119d:	0f 85 ed fe ff ff    	jne    c0011090 <udp_input+0x144>
c00111a3:	90                   	nop
c00111a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111a9:	75 09                	jne    c00111b4 <udp_input+0x268>
c00111ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111b3:	90                   	nop
c00111b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111b9:	75 15                	jne    c00111d0 <udp_input+0x284>
c00111bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111c2:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00111c7:	39 c2                	cmp    edx,eax
c00111c9:	0f 85 d9 01 00 00    	jne    c00113a8 <udp_input+0x45c>
c00111cf:	90                   	nop
c00111d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111d4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00111d8:	0f b7 c0             	movzx  eax,ax
c00111db:	85 c0                	test   eax,eax
c00111dd:	74 61                	je     c0011240 <udp_input+0x2f4>
c00111df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00111e6:	0f b7 c0             	movzx  eax,ax
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	50                   	push   eax
c00111ed:	6a 11                	push   0x11
c00111ef:	68 98 68 03 c0       	push   0xc0036898
c00111f4:	68 90 68 03 c0       	push   0xc0036890
c00111f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00111fd:	e8 0e 21 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011202:	83 c4 20             	add    esp,0x20
c0011205:	0f b7 c0             	movzx  eax,ax
c0011208:	85 c0                	test   eax,eax
c001120a:	74 34                	je     c0011240 <udp_input+0x2f4>
c001120c:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c0011212:	83 c0 01             	add    eax,0x1
c0011215:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c001121b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011221:	83 c0 01             	add    eax,0x1
c0011224:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001122a:	83 ec 0c             	sub    esp,0xc
c001122d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011231:	e8 be 72 ff ff       	call   c00084f4 <pbuf_free>
c0011236:	83 c4 10             	add    esp,0x10
c0011239:	e9 7a 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001123e:	66 90                	xchg   ax,ax
c0011240:	83 ec 08             	sub    esp,0x8
c0011243:	6a f8                	push   0xfffffff8
c0011245:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011249:	e8 0a 71 ff ff       	call   c0008358 <pbuf_header>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	0f b6 c0             	movzx  eax,al
c0011254:	85 c0                	test   eax,eax
c0011256:	74 38                	je     c0011290 <udp_input+0x344>
c0011258:	83 ec 08             	sub    esp,0x8
c001125b:	68 a9 0c 03 c0       	push   0xc0030ca9
c0011260:	68 46 fd 02 c0       	push   0xc002fd46
c0011265:	e8 62 eb 00 00       	call   c001fdcc <CPrintf>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011273:	83 c0 01             	add    eax,0x1
c0011276:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001127c:	83 ec 0c             	sub    esp,0xc
c001127f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011283:	e8 6c 72 ff ff       	call   c00084f4 <pbuf_free>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	e9 28 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c0011290:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011295:	74 51                	je     c00112e8 <udp_input+0x39c>
c0011297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001129b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001129e:	85 c0                	test   eax,eax
c00112a0:	74 32                	je     c00112d4 <udp_input+0x388>
c00112a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112a6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00112a9:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00112ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00112b2:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00112b5:	83 ec 0c             	sub    esp,0xc
c00112b8:	51                   	push   ecx
c00112b9:	68 90 68 03 c0       	push   0xc0036890
c00112be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00112c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00112c6:	52                   	push   edx
c00112c7:	ff d0                	call   eax
c00112c9:	83 c4 20             	add    esp,0x20
c00112cc:	e9 e7 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112d1:	8d 76 00             	lea    esi,[esi+0x0]
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112db:	e8 14 72 ff ff       	call   c00084f4 <pbuf_free>
c00112e0:	83 c4 10             	add    esp,0x10
c00112e3:	e9 d0 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112e8:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00112ed:	85 c0                	test   eax,eax
c00112ef:	0f 85 83 00 00 00    	jne    c0011378 <udp_input+0x42c>
c00112f5:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00112fa:	25 f0 00 00 00       	and    eax,0xf0
c00112ff:	3d e0 00 00 00       	cmp    eax,0xe0
c0011304:	74 72                	je     c0011378 <udp_input+0x42c>
c0011306:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001130a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001130d:	0f b7 c0             	movzx  eax,ax
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	50                   	push   eax
c0011314:	e8 cf f8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	0f b7 c0             	movzx  eax,ax
c001131f:	c1 e8 08             	shr    eax,0x8
c0011322:	0f b7 c0             	movzx  eax,ax
c0011325:	83 e0 0f             	and    eax,0xf
c0011328:	83 c0 02             	add    eax,0x2
c001132b:	c1 e0 02             	shl    eax,0x2
c001132e:	98                   	cwde   
c001132f:	83 ec 08             	sub    esp,0x8
c0011332:	50                   	push   eax
c0011333:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011337:	e8 1c 70 ff ff       	call   c0008358 <pbuf_header>
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011343:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011346:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001134a:	74 18                	je     c0011364 <udp_input+0x418>
c001134c:	83 ec 08             	sub    esp,0x8
c001134f:	68 bd 0c 03 c0       	push   0xc0030cbd
c0011354:	68 46 fd 02 c0       	push   0xc002fd46
c0011359:	e8 6e ea 00 00       	call   c001fdcc <CPrintf>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	8d 76 00             	lea    esi,[esi+0x0]
c0011364:	83 ec 08             	sub    esp,0x8
c0011367:	6a 03                	push   0x3
c0011369:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001136d:	e8 5e 1e 00 00       	call   c00131d0 <icmp_dest_unreach>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	8d 76 00             	lea    esi,[esi+0x0]
c0011378:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c001137e:	83 c0 01             	add    eax,0x1
c0011381:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c0011387:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001138d:	83 c0 01             	add    eax,0x1
c0011390:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001139d:	e8 52 71 ff ff       	call   c00084f4 <pbuf_free>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	eb 11                	jmp    c00113b8 <udp_input+0x46c>
c00113a7:	90                   	nop
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113af:	e8 40 71 ff ff       	call   c00084f4 <pbuf_free>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	90                   	nop
c00113b8:	90                   	nop
c00113b9:	83 c4 28             	add    esp,0x28
c00113bc:	5b                   	pop    ebx
c00113bd:	c3                   	ret    
c00113be:	66 90                	xchg   ax,ax

c00113c0 <udp_bind>:
c00113c0:	83 ec 2c             	sub    esp,0x2c
c00113c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00113c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113cc:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00113d1:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00113d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113da:	e9 8d 00 00 00       	jmp    c001146c <udp_bind+0xac>
c00113df:	90                   	nop
c00113e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113e4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00113e8:	75 26                	jne    c0011410 <udp_bind+0x50>
c00113ea:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00113ef:	85 c0                	test   eax,eax
c00113f1:	74 15                	je     c0011408 <udp_bind+0x48>
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	68 d1 0c 03 c0       	push   0xc0030cd1
c00113fb:	68 46 fd 02 c0       	push   0xc002fd46
c0011400:	e8 c7 e9 00 00       	call   c001fdcc <CPrintf>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c001140d:	eb 51                	jmp    c0011460 <udp_bind+0xa0>
c001140f:	90                   	nop
c0011410:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011414:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011418:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c001141d:	0f b7 c0             	movzx  eax,ax
c0011420:	39 c2                	cmp    edx,eax
c0011422:	75 3c                	jne    c0011460 <udp_bind+0xa0>
c0011424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011428:	85 c0                	test   eax,eax
c001142a:	74 2c                	je     c0011458 <udp_bind+0x98>
c001142c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011430:	8b 00                	mov    eax,DWORD PTR [eax]
c0011432:	85 c0                	test   eax,eax
c0011434:	74 22                	je     c0011458 <udp_bind+0x98>
c0011436:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001143b:	74 1b                	je     c0011458 <udp_bind+0x98>
c001143d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011441:	8b 00                	mov    eax,DWORD PTR [eax]
c0011443:	85 c0                	test   eax,eax
c0011445:	74 11                	je     c0011458 <udp_bind+0x98>
c0011447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144b:	8b 10                	mov    edx,DWORD PTR [eax]
c001144d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011451:	8b 00                	mov    eax,DWORD PTR [eax]
c0011453:	39 c2                	cmp    edx,eax
c0011455:	75 09                	jne    c0011460 <udp_bind+0xa0>
c0011457:	90                   	nop
c0011458:	b0 f8                	mov    al,0xf8
c001145a:	e9 dd 00 00 00       	jmp    c001153c <udp_bind+0x17c>
c001145f:	90                   	nop
c0011460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011464:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011467:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146b:	90                   	nop
c001146c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011471:	0f 85 69 ff ff ff    	jne    c00113e0 <udp_bind+0x20>
c0011477:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001147c:	74 0a                	je     c0011488 <udp_bind+0xc8>
c001147e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011482:	8b 00                	mov    eax,DWORD PTR [eax]
c0011484:	eb 0a                	jmp    c0011490 <udp_bind+0xd0>
c0011486:	66 90                	xchg   ax,ax
c0011488:	b8 00 00 00 00       	mov    eax,0x0
c001148d:	8d 76 00             	lea    esi,[esi+0x0]
c0011490:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011494:	89 02                	mov    DWORD PTR [edx],eax
c0011496:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001149b:	85 c0                	test   eax,eax
c001149d:	75 6d                	jne    c001150c <udp_bind+0x14c>
c001149f:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c00114a6:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00114ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114af:	eb 3b                	jmp    c00114ec <udp_bind+0x12c>
c00114b1:	8d 76 00             	lea    esi,[esi+0x0]
c00114b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00114bc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00114c1:	0f b7 c0             	movzx  eax,ax
c00114c4:	39 c2                	cmp    edx,eax
c00114c6:	75 18                	jne    c00114e0 <udp_bind+0x120>
c00114c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114cc:	83 c0 01             	add    eax,0x1
c00114cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00114d4:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00114d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114dd:	eb 0d                	jmp    c00114ec <udp_bind+0x12c>
c00114df:	90                   	nop
c00114e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00114e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114eb:	90                   	nop
c00114ec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00114f1:	74 0d                	je     c0011500 <udp_bind+0x140>
c00114f3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00114fd:	75 b5                	jne    c00114b4 <udp_bind+0xf4>
c00114ff:	90                   	nop
c0011500:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011505:	74 05                	je     c001150c <udp_bind+0x14c>
c0011507:	b0 f8                	mov    al,0xf8
c0011509:	eb 31                	jmp    c001153c <udp_bind+0x17c>
c001150b:	90                   	nop
c001150c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011514:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011518:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001151d:	85 c0                	test   eax,eax
c001151f:	75 17                	jne    c0011538 <udp_bind+0x178>
c0011521:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001152b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001152e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011532:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011537:	90                   	nop
c0011538:	b0 00                	mov    al,0x0
c001153a:	66 90                	xchg   ax,ax
c001153c:	83 c4 2c             	add    esp,0x2c
c001153f:	c3                   	ret    

c0011540 <udp_sendto_if>:
c0011540:	83 ec 2c             	sub    esp,0x2c
c0011543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011547:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001154c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011550:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011554:	0f b7 c0             	movzx  eax,ax
c0011557:	85 c0                	test   eax,eax
c0011559:	75 39                	jne    c0011594 <udp_sendto_if+0x54>
c001155b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001155f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011563:	0f b7 d0             	movzx  edx,ax
c0011566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001156a:	83 ec 04             	sub    esp,0x4
c001156d:	52                   	push   edx
c001156e:	50                   	push   eax
c001156f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011573:	e8 48 fe ff ff       	call   c00113c0 <udp_bind>
c0011578:	83 c4 10             	add    esp,0x10
c001157b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001157f:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c0011584:	85 c0                	test   eax,eax
c0011586:	74 0c                	je     c0011594 <udp_sendto_if+0x54>
c0011588:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001158c:	e9 2b 02 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c0011591:	8d 76 00             	lea    esi,[esi+0x0]
c0011594:	83 ec 08             	sub    esp,0x8
c0011597:	6a 08                	push   0x8
c0011599:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001159d:	e8 b6 6d ff ff       	call   c0008358 <pbuf_header>
c00115a2:	83 c4 10             	add    esp,0x10
c00115a5:	0f b6 c0             	movzx  eax,al
c00115a8:	85 c0                	test   eax,eax
c00115aa:	74 48                	je     c00115f4 <udp_sendto_if+0xb4>
c00115ac:	83 ec 04             	sub    esp,0x4
c00115af:	6a 00                	push   0x0
c00115b1:	6a 08                	push   0x8
c00115b3:	6a 01                	push   0x1
c00115b5:	e8 12 71 ff ff       	call   c00086cc <pbuf_alloc>
c00115ba:	83 c4 10             	add    esp,0x10
c00115bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115c1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00115c6:	75 08                	jne    c00115d0 <udp_sendto_if+0x90>
c00115c8:	b0 ff                	mov    al,0xff
c00115ca:	e9 ed 01 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00115cf:	90                   	nop
c00115d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115d7:	0f b7 c0             	movzx  eax,ax
c00115da:	85 c0                	test   eax,eax
c00115dc:	74 1e                	je     c00115fc <udp_sendto_if+0xbc>
c00115de:	83 ec 08             	sub    esp,0x8
c00115e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115e9:	e8 1e 78 ff ff       	call   c0008e0c <pbuf_chain>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	eb 09                	jmp    c00115fc <udp_sendto_if+0xbc>
c00115f3:	90                   	nop
c00115f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011600:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011604:	0f b7 c0             	movzx  eax,ax
c0011607:	83 f8 07             	cmp    eax,0x7
c001160a:	77 18                	ja     c0011624 <udp_sendto_if+0xe4>
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 e0 0c 03 c0       	push   0xc0030ce0
c0011614:	68 46 fd 02 c0       	push   0xc002fd46
c0011619:	e8 ae e7 00 00       	call   c001fdcc <CPrintf>
c001161e:	83 c4 10             	add    esp,0x10
c0011621:	8d 76 00             	lea    esi,[esi+0x0]
c0011624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001162f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011633:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011637:	0f b7 c0             	movzx  eax,ax
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	50                   	push   eax
c001163e:	e8 a5 f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001164a:	66 89 02             	mov    WORD PTR [edx],ax
c001164d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	50                   	push   eax
c0011656:	e8 8d f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011662:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0011666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166a:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011674:	85 c0                	test   eax,eax
c0011676:	74 0c                	je     c0011684 <udp_sendto_if+0x144>
c0011678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167c:	8b 00                	mov    eax,DWORD PTR [eax]
c001167e:	85 c0                	test   eax,eax
c0011680:	75 12                	jne    c0011694 <udp_sendto_if+0x154>
c0011682:	66 90                	xchg   ax,ax
c0011684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011688:	83 c0 04             	add    eax,0x4
c001168b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001168f:	eb 47                	jmp    c00116d8 <udp_sendto_if+0x198>
c0011691:	8d 76 00             	lea    esi,[esi+0x0]
c0011694:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011698:	8b 10                	mov    edx,DWORD PTR [eax]
c001169a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a1:	39 c2                	cmp    edx,eax
c00116a3:	74 2b                	je     c00116d0 <udp_sendto_if+0x190>
c00116a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00116ad:	74 19                	je     c00116c8 <udp_sendto_if+0x188>
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116b6:	e8 39 6e ff ff       	call   c00084f4 <pbuf_free>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00116c6:	66 90                	xchg   ax,ax
c00116c8:	b0 fa                	mov    al,0xfa
c00116ca:	e9 ed 00 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00116cf:	90                   	nop
c00116d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00116df:	0f b7 c0             	movzx  eax,ax
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	50                   	push   eax
c00116e6:	e8 fd f4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116f2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00116f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116fa:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00116fd:	0f b6 c0             	movzx  eax,al
c0011700:	83 e0 01             	and    eax,0x1
c0011703:	75 4b                	jne    c0011750 <udp_sendto_if+0x210>
c0011705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011709:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001170c:	0f b7 c0             	movzx  eax,ax
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	50                   	push   eax
c0011713:	6a 11                	push   0x11
c0011715:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011719:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001171d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011721:	e8 ea 1b 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011726:	83 c4 20             	add    esp,0x20
c0011729:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001172e:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011733:	85 c0                	test   eax,eax
c0011735:	75 09                	jne    c0011740 <udp_sendto_if+0x200>
c0011737:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c001173e:	66 90                	xchg   ax,ax
c0011740:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011744:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0011749:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001174d:	8d 76 00             	lea    esi,[esi+0x0]
c0011750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011754:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011757:	0f b6 d0             	movzx  edx,al
c001175a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001175e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011761:	0f b6 c0             	movzx  eax,al
c0011764:	83 ec 04             	sub    esp,0x4
c0011767:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001176b:	6a 11                	push   0x11
c001176d:	52                   	push   edx
c001176e:	50                   	push   eax
c001176f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011777:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001177b:	e8 f4 24 00 00       	call   c0013c74 <ip_output_if>
c0011780:	83 c4 20             	add    esp,0x20
c0011783:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001178b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001178f:	74 17                	je     c00117a8 <udp_sendto_if+0x268>
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011798:	e8 57 6d ff ff       	call   c00084f4 <pbuf_free>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117a8:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c00117ae:	83 c0 01             	add    eax,0x1
c00117b1:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c00117b7:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00117bb:	90                   	nop
c00117bc:	83 c4 2c             	add    esp,0x2c
c00117bf:	c3                   	ret    

c00117c0 <udp_sendto>:
c00117c0:	83 ec 2c             	sub    esp,0x2c
c00117c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00117d3:	e8 c4 1f 00 00       	call   c001379c <ip_route>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117df:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00117e4:	75 16                	jne    c00117fc <udp_sendto+0x3c>
c00117e6:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c00117ec:	83 c0 01             	add    eax,0x1
c00117ef:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c00117f5:	b0 fc                	mov    al,0xfc
c00117f7:	eb 27                	jmp    c0011820 <udp_sendto+0x60>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011808:	50                   	push   eax
c0011809:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001180d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011811:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011815:	e8 26 fd ff ff       	call   c0011540 <udp_sendto_if>
c001181a:	83 c4 20             	add    esp,0x20
c001181d:	8d 76 00             	lea    esi,[esi+0x0]
c0011820:	83 c4 2c             	add    esp,0x2c
c0011823:	c3                   	ret    

c0011824 <udp_send>:
c0011824:	83 ec 0c             	sub    esp,0xc
c0011827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001182b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001182e:	0f b7 c0             	movzx  eax,ax
c0011831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011835:	83 c2 04             	add    edx,0x4
c0011838:	50                   	push   eax
c0011839:	52                   	push   edx
c001183a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011842:	e8 79 ff ff ff       	call   c00117c0 <udp_sendto>
c0011847:	83 c4 10             	add    esp,0x10
c001184a:	83 c4 0c             	add    esp,0xc
c001184d:	c3                   	ret    
c001184e:	66 90                	xchg   ax,ax

c0011850 <udp_connect>:
c0011850:	83 ec 2c             	sub    esp,0x2c
c0011853:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011857:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001185c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011860:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011864:	0f b7 c0             	movzx  eax,ax
c0011867:	85 c0                	test   eax,eax
c0011869:	75 39                	jne    c00118a4 <udp_connect+0x54>
c001186b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001186f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011873:	0f b7 d0             	movzx  edx,ax
c0011876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001187a:	83 ec 04             	sub    esp,0x4
c001187d:	52                   	push   edx
c001187e:	50                   	push   eax
c001187f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011883:	e8 38 fb ff ff       	call   c00113c0 <udp_bind>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001188f:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011894:	85 c0                	test   eax,eax
c0011896:	74 0c                	je     c00118a4 <udp_connect+0x54>
c0011898:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001189c:	e9 8b 00 00 00       	jmp    c001192c <udp_connect+0xdc>
c00118a1:	8d 76 00             	lea    esi,[esi+0x0]
c00118a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00118a9:	74 09                	je     c00118b4 <udp_connect+0x64>
c00118ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118af:	8b 00                	mov    eax,DWORD PTR [eax]
c00118b1:	eb 09                	jmp    c00118bc <udp_connect+0x6c>
c00118b3:	90                   	nop
c00118b4:	b8 00 00 00 00       	mov    eax,0x0
c00118b9:	8d 76 00             	lea    esi,[esi+0x0]
c00118bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00118c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118cb:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00118cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118d3:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00118d6:	83 c8 04             	or     eax,0x4
c00118d9:	88 c2                	mov    dl,al
c00118db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118df:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00118e2:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00118e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118eb:	eb 1f                	jmp    c001190c <udp_connect+0xbc>
c00118ed:	8d 76 00             	lea    esi,[esi+0x0]
c00118f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118f4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00118f8:	75 06                	jne    c0011900 <udp_connect+0xb0>
c00118fa:	b0 00                	mov    al,0x0
c00118fc:	eb 2e                	jmp    c001192c <udp_connect+0xdc>
c00118fe:	66 90                	xchg   ax,ax
c0011900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001190b:	90                   	nop
c001190c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011911:	75 dd                	jne    c00118f0 <udp_connect+0xa0>
c0011913:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011924:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011929:	b0 00                	mov    al,0x0
c001192b:	90                   	nop
c001192c:	83 c4 2c             	add    esp,0x2c
c001192f:	c3                   	ret    

c0011930 <udp_disconnect>:
c0011930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001193b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193f:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c0011945:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011949:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001194c:	83 e0 fb             	and    eax,0xfffffffb
c001194f:	88 c2                	mov    dl,al
c0011951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011955:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011958:	90                   	nop
c0011959:	c3                   	ret    
c001195a:	66 90                	xchg   ax,ax

c001195c <udp_recv>:
c001195c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011964:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001196b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001196f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011972:	90                   	nop
c0011973:	c3                   	ret    

c0011974 <udp_remove>:
c0011974:	83 ec 1c             	sub    esp,0x1c
c0011977:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001197c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011980:	75 12                	jne    c0011994 <udp_remove+0x20>
c0011982:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011987:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001198a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001198f:	eb 4b                	jmp    c00119dc <udp_remove+0x68>
c0011991:	8d 76 00             	lea    esi,[esi+0x0]
c0011994:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001199d:	eb 35                	jmp    c00119d4 <udp_remove+0x60>
c001199f:	90                   	nop
c00119a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119a7:	85 c0                	test   eax,eax
c00119a9:	74 1d                	je     c00119c8 <udp_remove+0x54>
c00119ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119b2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00119b6:	75 10                	jne    c00119c8 <udp_remove+0x54>
c00119b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00119bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119c6:	66 90                	xchg   ax,ax
c00119c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119d3:	90                   	nop
c00119d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00119d9:	75 c5                	jne    c00119a0 <udp_remove+0x2c>
c00119db:	90                   	nop
c00119dc:	83 ec 08             	sub    esp,0x8
c00119df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00119e3:	6a 01                	push   0x1
c00119e5:	e8 4e 62 ff ff       	call   c0007c38 <memp_free>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	90                   	nop
c00119ee:	83 c4 1c             	add    esp,0x1c
c00119f1:	c3                   	ret    
c00119f2:	66 90                	xchg   ax,ax

c00119f4 <udp_new>:
c00119f4:	83 ec 1c             	sub    esp,0x1c
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	6a 01                	push   0x1
c00119fc:	e8 0b 61 ff ff       	call   c0007b0c <memp_malloc>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011a0d:	74 1d                	je     c0011a2c <udp_new+0x38>
c0011a0f:	83 ec 04             	sub    esp,0x4
c0011a12:	6a 20                	push   0x20
c0011a14:	6a 00                	push   0x0
c0011a16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a1a:	e8 d1 ea fe ff       	call   c00004f0 <memset>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a26:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011a2a:	66 90                	xchg   ax,ax
c0011a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a30:	83 c4 1c             	add    esp,0x1c
c0011a33:	c3                   	ret    

c0011a34 <free_entry>:
c0011a34:	83 ec 0c             	sub    esp,0xc
c0011a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a3b:	c1 e0 04             	shl    eax,0x4
c0011a3e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a45:	85 c0                	test   eax,eax
c0011a47:	74 2f                	je     c0011a78 <free_entry+0x44>
c0011a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a4d:	c1 e0 04             	shl    eax,0x4
c0011a50:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	50                   	push   eax
c0011a5b:	e8 94 6a ff ff       	call   c00084f4 <pbuf_free>
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a67:	c1 e0 04             	shl    eax,0x4
c0011a6a:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011a75:	8d 76 00             	lea    esi,[esi+0x0]
c0011a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a7c:	c1 e0 04             	shl    eax,0x4
c0011a7f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a84:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011a87:	90                   	nop
c0011a88:	83 c4 0c             	add    esp,0xc
c0011a8b:	c3                   	ret    

c0011a8c <etharp_tmr>:
c0011a8c:	83 ec 1c             	sub    esp,0x1c
c0011a8f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a94:	e9 a7 00 00 00       	jmp    c0011b40 <etharp_tmr+0xb4>
c0011a99:	8d 76 00             	lea    esi,[esi+0x0]
c0011a9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011aa1:	c1 e0 04             	shl    eax,0x4
c0011aa4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011aa9:	8a 00                	mov    al,BYTE PTR [eax]
c0011aab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011aaf:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011ab4:	85 c0                	test   eax,eax
c0011ab6:	74 7c                	je     c0011b34 <etharp_tmr+0xa8>
c0011ab8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011abd:	89 c2                	mov    edx,eax
c0011abf:	c1 e2 04             	shl    edx,0x4
c0011ac2:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011ac8:	8a 12                	mov    dl,BYTE PTR [edx]
c0011aca:	83 c2 01             	add    edx,0x1
c0011acd:	c1 e0 04             	shl    eax,0x4
c0011ad0:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ad5:	88 10                	mov    BYTE PTR [eax],dl
c0011ad7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011adc:	c1 e0 04             	shl    eax,0x4
c0011adf:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ae4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ae6:	0f b6 c0             	movzx  eax,al
c0011ae9:	3d ef 00 00 00       	cmp    eax,0xef
c0011aee:	77 30                	ja     c0011b20 <etharp_tmr+0x94>
c0011af0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011af5:	c1 e0 04             	shl    eax,0x4
c0011af8:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011afd:	8a 00                	mov    al,BYTE PTR [eax]
c0011aff:	0f b6 c0             	movzx  eax,al
c0011b02:	83 f8 01             	cmp    eax,0x1
c0011b05:	75 2d                	jne    c0011b34 <etharp_tmr+0xa8>
c0011b07:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b0c:	c1 e0 04             	shl    eax,0x4
c0011b0f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b14:	8a 00                	mov    al,BYTE PTR [eax]
c0011b16:	0f b6 c0             	movzx  eax,al
c0011b19:	83 f8 01             	cmp    eax,0x1
c0011b1c:	76 16                	jbe    c0011b34 <etharp_tmr+0xa8>
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	50                   	push   eax
c0011b29:	e8 06 ff ff ff       	call   c0011a34 <free_entry>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	8d 76 00             	lea    esi,[esi+0x0]
c0011b34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011b38:	83 c0 01             	add    eax,0x1
c0011b3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b3f:	90                   	nop
c0011b40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b45:	83 f8 09             	cmp    eax,0x9
c0011b48:	0f 86 4e ff ff ff    	jbe    c0011a9c <etharp_tmr+0x10>
c0011b4e:	90                   	nop
c0011b4f:	83 c4 1c             	add    esp,0x1c
c0011b52:	c3                   	ret    
c0011b53:	90                   	nop

c0011b54 <find_entry>:
c0011b54:	83 ec 2c             	sub    esp,0x2c
c0011b57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011b5f:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011b64:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011b69:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011b6e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b73:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011b78:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011b7d:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011b82:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011b87:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b8c:	e9 7f 01 00 00       	jmp    c0011d10 <find_entry+0x1bc>
c0011b91:	8d 76 00             	lea    esi,[esi+0x0]
c0011b94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b99:	c1 e0 04             	shl    eax,0x4
c0011b9c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011ba7:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bac:	83 f8 0a             	cmp    eax,0xa
c0011baf:	75 17                	jne    c0011bc8 <find_entry+0x74>
c0011bb1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bb6:	85 c0                	test   eax,eax
c0011bb8:	75 0e                	jne    c0011bc8 <find_entry+0x74>
c0011bba:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011bbe:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011bc2:	e9 3d 01 00 00       	jmp    c0011d04 <find_entry+0x1b0>
c0011bc7:	90                   	nop
c0011bc8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bcd:	85 c0                	test   eax,eax
c0011bcf:	0f 84 2f 01 00 00    	je     c0011d04 <find_entry+0x1b0>
c0011bd5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bda:	83 f8 01             	cmp    eax,0x1
c0011bdd:	74 21                	je     c0011c00 <find_entry+0xac>
c0011bdf:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011be4:	83 f8 02             	cmp    eax,0x2
c0011be7:	74 17                	je     c0011c00 <find_entry+0xac>
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	68 10 0d 03 c0       	push   0xc0030d10
c0011bf1:	68 46 fd 02 c0       	push   0xc002fd46
c0011bf6:	e8 d1 e1 00 00       	call   c001fdcc <CPrintf>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	66 90                	xchg   ax,ax
c0011c00:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011c05:	74 25                	je     c0011c2c <find_entry+0xd8>
c0011c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c0d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c12:	c1 e0 04             	shl    eax,0x4
c0011c15:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1c:	39 c2                	cmp    edx,eax
c0011c1e:	75 0c                	jne    c0011c2c <find_entry+0xd8>
c0011c20:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c24:	e9 53 02 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011c29:	8d 76 00             	lea    esi,[esi+0x0]
c0011c2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c31:	83 f8 01             	cmp    eax,0x1
c0011c34:	0f 85 8a 00 00 00    	jne    c0011cc4 <find_entry+0x170>
c0011c3a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c3f:	c1 e0 04             	shl    eax,0x4
c0011c42:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	74 3f                	je     c0011c8c <find_entry+0x138>
c0011c4d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c52:	c1 e0 04             	shl    eax,0x4
c0011c55:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0011c5c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011c61:	0f b6 c0             	movzx  eax,al
c0011c64:	39 c2                	cmp    edx,eax
c0011c66:	0f 87 98 00 00 00    	ja     c0011d04 <find_entry+0x1b0>
c0011c6c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c70:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011c74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c79:	c1 e0 04             	shl    eax,0x4
c0011c7c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c81:	8a 00                	mov    al,BYTE PTR [eax]
c0011c83:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011c87:	eb 7b                	jmp    c0011d04 <find_entry+0x1b0>
c0011c89:	8d 76 00             	lea    esi,[esi+0x0]
c0011c8c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c91:	c1 e0 04             	shl    eax,0x4
c0011c94:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c99:	8a 00                	mov    al,BYTE PTR [eax]
c0011c9b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ca0:	0f b6 c0             	movzx  eax,al
c0011ca3:	39 c2                	cmp    edx,eax
c0011ca5:	77 5d                	ja     c0011d04 <find_entry+0x1b0>
c0011ca7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011cab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011caf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cb4:	c1 e0 04             	shl    eax,0x4
c0011cb7:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0011cbe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011cc2:	eb 40                	jmp    c0011d04 <find_entry+0x1b0>
c0011cc4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011cc9:	83 f8 02             	cmp    eax,0x2
c0011ccc:	75 36                	jne    c0011d04 <find_entry+0x1b0>
c0011cce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd3:	c1 e0 04             	shl    eax,0x4
c0011cd6:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cdb:	8a 00                	mov    al,BYTE PTR [eax]
c0011cdd:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011ce2:	0f b6 c0             	movzx  eax,al
c0011ce5:	39 c2                	cmp    edx,eax
c0011ce7:	77 1b                	ja     c0011d04 <find_entry+0x1b0>
c0011ce9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ced:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011cf1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cf6:	c1 e0 04             	shl    eax,0x4
c0011cf9:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cfe:	8a 00                	mov    al,BYTE PTR [eax]
c0011d00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011d04:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d08:	83 c0 01             	add    eax,0x1
c0011d0b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d0f:	90                   	nop
c0011d10:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d15:	83 f8 09             	cmp    eax,0x9
c0011d18:	0f 86 76 fe ff ff    	jbe    c0011b94 <find_entry+0x40>
c0011d1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d23:	83 e0 02             	and    eax,0x2
c0011d26:	75 14                	jne    c0011d3c <find_entry+0x1e8>
c0011d28:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d2d:	83 f8 0a             	cmp    eax,0xa
c0011d30:	75 12                	jne    c0011d44 <find_entry+0x1f0>
c0011d32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d37:	83 e0 01             	and    eax,0x1
c0011d3a:	75 08                	jne    c0011d44 <find_entry+0x1f0>
c0011d3c:	b0 ff                	mov    al,0xff
c0011d3e:	e9 39 01 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011d43:	90                   	nop
c0011d44:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d49:	83 f8 09             	cmp    eax,0x9
c0011d4c:	7f 0e                	jg     c0011d5c <find_entry+0x208>
c0011d4e:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011d52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d56:	e9 a1 00 00 00       	jmp    c0011dfc <find_entry+0x2a8>
c0011d5b:	90                   	nop
c0011d5c:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011d61:	83 f8 09             	cmp    eax,0x9
c0011d64:	7f 32                	jg     c0011d98 <find_entry+0x244>
c0011d66:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011d6a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d6e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d73:	c1 e0 04             	shl    eax,0x4
c0011d76:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	85 c0                	test   eax,eax
c0011d7f:	74 47                	je     c0011dc8 <find_entry+0x274>
c0011d81:	83 ec 08             	sub    esp,0x8
c0011d84:	68 89 0e 03 c0       	push   0xc0030e89
c0011d89:	68 46 fd 02 c0       	push   0xc002fd46
c0011d8e:	e8 39 e0 00 00       	call   c001fdcc <CPrintf>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	eb 30                	jmp    c0011dc8 <find_entry+0x274>
c0011d98:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d9d:	83 f8 09             	cmp    eax,0x9
c0011da0:	7f 0a                	jg     c0011dac <find_entry+0x258>
c0011da2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011da6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011daa:	eb 1c                	jmp    c0011dc8 <find_entry+0x274>
c0011dac:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011db1:	83 f8 09             	cmp    eax,0x9
c0011db4:	7f 0a                	jg     c0011dc0 <find_entry+0x26c>
c0011db6:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011dba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011dbe:	eb 08                	jmp    c0011dc8 <find_entry+0x274>
c0011dc0:	b0 ff                	mov    al,0xff
c0011dc2:	e9 b5 00 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011dc7:	90                   	nop
c0011dc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011dcd:	83 f8 09             	cmp    eax,0x9
c0011dd0:	76 16                	jbe    c0011de8 <find_entry+0x294>
c0011dd2:	83 ec 08             	sub    esp,0x8
c0011dd5:	68 a0 0e 03 c0       	push   0xc0030ea0
c0011dda:	68 46 fd 02 c0       	push   0xc002fd46
c0011ddf:	e8 e8 df 00 00       	call   c001fdcc <CPrintf>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	90                   	nop
c0011de8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ded:	83 ec 0c             	sub    esp,0xc
c0011df0:	50                   	push   eax
c0011df1:	e8 3e fc ff ff       	call   c0011a34 <free_entry>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	8d 76 00             	lea    esi,[esi+0x0]
c0011dfc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e01:	83 f8 09             	cmp    eax,0x9
c0011e04:	76 16                	jbe    c0011e1c <find_entry+0x2c8>
c0011e06:	83 ec 08             	sub    esp,0x8
c0011e09:	68 a0 0e 03 c0       	push   0xc0030ea0
c0011e0e:	68 46 fd 02 c0       	push   0xc002fd46
c0011e13:	e8 b4 df 00 00       	call   c001fdcc <CPrintf>
c0011e18:	83 c4 10             	add    esp,0x10
c0011e1b:	90                   	nop
c0011e1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e21:	c1 e0 04             	shl    eax,0x4
c0011e24:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e29:	8a 00                	mov    al,BYTE PTR [eax]
c0011e2b:	0f b6 c0             	movzx  eax,al
c0011e2e:	85 c0                	test   eax,eax
c0011e30:	74 16                	je     c0011e48 <find_entry+0x2f4>
c0011e32:	83 ec 08             	sub    esp,0x8
c0011e35:	68 50 0d 03 c0       	push   0xc0030d50
c0011e3a:	68 46 fd 02 c0       	push   0xc002fd46
c0011e3f:	e8 88 df 00 00       	call   c001fdcc <CPrintf>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	90                   	nop
c0011e48:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011e4d:	74 19                	je     c0011e68 <find_entry+0x314>
c0011e4f:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5a:	c1 e2 04             	shl    edx,0x4
c0011e5d:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011e63:	89 02                	mov    DWORD PTR [edx],eax
c0011e65:	8d 76 00             	lea    esi,[esi+0x0]
c0011e68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e6d:	c1 e0 04             	shl    eax,0x4
c0011e70:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e78:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011e7c:	83 c4 2c             	add    esp,0x2c
c0011e7f:	c3                   	ret    

c0011e80 <etharp_send_ip>:
c0011e80:	83 ec 1c             	sub    esp,0x1c
c0011e83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e92:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011e95:	0f b6 c0             	movzx  eax,al
c0011e98:	83 f8 06             	cmp    eax,0x6
c0011e9b:	74 17                	je     c0011eb4 <etharp_send_ip+0x34>
c0011e9d:	83 ec 08             	sub    esp,0x8
c0011ea0:	68 7c 0d 03 c0       	push   0xc0030d7c
c0011ea5:	68 46 fd 02 c0       	push   0xc002fd46
c0011eaa:	e8 1d df 00 00       	call   c001fdcc <CPrintf>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	66 90                	xchg   ax,ax
c0011eb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb8:	83 ec 04             	sub    esp,0x4
c0011ebb:	6a 06                	push   0x6
c0011ebd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ec1:	50                   	push   eax
c0011ec2:	e8 b3 e4 fe ff       	call   c000037a <memcpy>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ece:	83 c0 06             	add    eax,0x6
c0011ed1:	83 ec 04             	sub    esp,0x4
c0011ed4:	6a 06                	push   0x6
c0011ed6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011eda:	50                   	push   eax
c0011edb:	e8 9a e4 fe ff       	call   c000037a <memcpy>
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee7:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011ef4:	83 ec 08             	sub    esp,0x8
c0011ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011eff:	ff d0                	call   eax
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	83 c4 1c             	add    esp,0x1c
c0011f07:	c3                   	ret    

c0011f08 <update_arp_entry>:
c0011f08:	83 ec 2c             	sub    esp,0x2c
c0011f0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f17:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011f1a:	0f b6 c0             	movzx  eax,al
c0011f1d:	83 f8 06             	cmp    eax,0x6
c0011f20:	74 16                	je     c0011f38 <update_arp_entry+0x30>
c0011f22:	83 ec 08             	sub    esp,0x8
c0011f25:	68 c0 0d 03 c0       	push   0xc0030dc0
c0011f2a:	68 46 fd 02 c0       	push   0xc002fd46
c0011f2f:	e8 98 de 00 00       	call   c001fdcc <CPrintf>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	90                   	nop
c0011f38:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011f3d:	74 39                	je     c0011f78 <update_arp_entry+0x70>
c0011f3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f45:	85 c0                	test   eax,eax
c0011f47:	74 2f                	je     c0011f78 <update_arp_entry+0x70>
c0011f49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f4f:	83 ec 08             	sub    esp,0x8
c0011f52:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f56:	50                   	push   eax
c0011f57:	e8 8c 20 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	0f b6 c0             	movzx  eax,al
c0011f62:	85 c0                	test   eax,eax
c0011f64:	75 12                	jne    c0011f78 <update_arp_entry+0x70>
c0011f66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f6c:	25 f0 00 00 00       	and    eax,0xf0
c0011f71:	3d e0 00 00 00       	cmp    eax,0xe0
c0011f76:	75 08                	jne    c0011f80 <update_arp_entry+0x78>
c0011f78:	b0 f2                	mov    al,0xf2
c0011f7a:	e9 d9 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011f7f:	90                   	nop
c0011f80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011f85:	83 ec 08             	sub    esp,0x8
c0011f88:	50                   	push   eax
c0011f89:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f8d:	e8 c2 fb ff ff       	call   c0011b54 <find_entry>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011f99:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f9e:	85 c0                	test   eax,eax
c0011fa0:	79 0a                	jns    c0011fac <update_arp_entry+0xa4>
c0011fa2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011fa6:	e9 ad 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011fab:	90                   	nop
c0011fac:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fb1:	c1 e0 04             	shl    eax,0x4
c0011fb4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011fb9:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011fbc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fc1:	c1 e0 04             	shl    eax,0x4
c0011fc4:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011fc9:	83 c0 08             	add    eax,0x8
c0011fcc:	83 ec 04             	sub    esp,0x4
c0011fcf:	6a 06                	push   0x6
c0011fd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011fd5:	50                   	push   eax
c0011fd6:	e8 9f e3 fe ff       	call   c000037a <memcpy>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fe3:	c1 e0 04             	shl    eax,0x4
c0011fe6:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011feb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011fee:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ff3:	c1 e0 04             	shl    eax,0x4
c0011ff6:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffd:	85 c0                	test   eax,eax
c0011fff:	74 53                	je     c0012054 <update_arp_entry+0x14c>
c0012001:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012006:	c1 e0 04             	shl    eax,0x4
c0012009:	05 00 a9 03 c0       	add    eax,0xc003a900
c001200e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012014:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012019:	c1 e0 04             	shl    eax,0x4
c001201c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012021:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012027:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202b:	83 c0 23             	add    eax,0x23
c001202e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012032:	50                   	push   eax
c0012033:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001203b:	e8 40 fe ff ff       	call   c0011e80 <etharp_send_ip>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001204a:	e8 a5 64 ff ff       	call   c00084f4 <pbuf_free>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	66 90                	xchg   ax,ax
c0012054:	b0 00                	mov    al,0x0
c0012056:	66 90                	xchg   ax,ax
c0012058:	83 c4 2c             	add    esp,0x2c
c001205b:	c3                   	ret    

c001205c <etharp_find_addr>:
c001205c:	83 ec 1c             	sub    esp,0x1c
c001205f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012064:	74 0a                	je     c0012070 <etharp_find_addr+0x14>
c0012066:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001206b:	75 1b                	jne    c0012088 <etharp_find_addr+0x2c>
c001206d:	8d 76 00             	lea    esi,[esi+0x0]
c0012070:	83 ec 08             	sub    esp,0x8
c0012073:	68 e8 0d 03 c0       	push   0xc0030de8
c0012078:	68 46 fd 02 c0       	push   0xc002fd46
c001207d:	e8 4a dd 00 00       	call   c001fdcc <CPrintf>
c0012082:	83 c4 10             	add    esp,0x10
c0012085:	8d 76 00             	lea    esi,[esi+0x0]
c0012088:	83 ec 08             	sub    esp,0x8
c001208b:	6a 02                	push   0x2
c001208d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012091:	e8 be fa ff ff       	call   c0011b54 <find_entry>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001209d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120a2:	85 c0                	test   eax,eax
c00120a4:	78 4a                	js     c00120f0 <etharp_find_addr+0x94>
c00120a6:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120ab:	c1 e0 04             	shl    eax,0x4
c00120ae:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00120b3:	8a 00                	mov    al,BYTE PTR [eax]
c00120b5:	0f b6 c0             	movzx  eax,al
c00120b8:	83 f8 02             	cmp    eax,0x2
c00120bb:	75 33                	jne    c00120f0 <etharp_find_addr+0x94>
c00120bd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120c2:	c1 e0 04             	shl    eax,0x4
c00120c5:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120ca:	8d 50 08             	lea    edx,[eax+0x8]
c00120cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120d1:	89 10                	mov    DWORD PTR [eax],edx
c00120d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120d8:	c1 e0 04             	shl    eax,0x4
c00120db:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120e0:	8d 50 04             	lea    edx,[eax+0x4]
c00120e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120e7:	89 10                	mov    DWORD PTR [eax],edx
c00120e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00120ed:	eb 05                	jmp    c00120f4 <etharp_find_addr+0x98>
c00120ef:	90                   	nop
c00120f0:	b0 ff                	mov    al,0xff
c00120f2:	66 90                	xchg   ax,ax
c00120f4:	83 c4 1c             	add    esp,0x1c
c00120f7:	c3                   	ret    

c00120f8 <etharp_arp_input>:
c00120f8:	83 ec 2c             	sub    esp,0x2c
c00120fb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0012100:	75 1a                	jne    c001211c <etharp_arp_input+0x24>
c0012102:	83 ec 08             	sub    esp,0x8
c0012105:	68 b3 0e 03 c0       	push   0xc0030eb3
c001210a:	68 46 fd 02 c0       	push   0xc002fd46
c001210f:	e8 b8 dc 00 00       	call   c001fdcc <CPrintf>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	e9 d0 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001211c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012120:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012124:	0f b7 c0             	movzx  eax,ax
c0012127:	83 f8 29             	cmp    eax,0x29
c001212a:	77 34                	ja     c0012160 <etharp_arp_input+0x68>
c001212c:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0012132:	83 c0 01             	add    eax,0x1
c0012135:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c001213b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012141:	83 c0 01             	add    eax,0x1
c0012144:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012151:	e8 9e 63 ff ff       	call   c00084f4 <pbuf_free>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	e9 8e 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001215e:	66 90                	xchg   ax,ax
c0012160:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012164:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001216b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001216f:	83 c0 0e             	add    eax,0xe
c0012172:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001217a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001217d:	0f b7 c0             	movzx  eax,ax
c0012180:	3d 00 01 00 00       	cmp    eax,0x100
c0012185:	75 31                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001218b:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c001218e:	0f b6 c0             	movzx  eax,al
c0012191:	83 f8 06             	cmp    eax,0x6
c0012194:	75 22                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001219a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c001219d:	0f b6 c0             	movzx  eax,al
c00121a0:	83 f8 04             	cmp    eax,0x4
c00121a3:	75 13                	jne    c00121b8 <etharp_arp_input+0xc0>
c00121a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00121ad:	0f b7 c0             	movzx  eax,ax
c00121b0:	83 f8 08             	cmp    eax,0x8
c00121b3:	74 37                	je     c00121ec <etharp_arp_input+0xf4>
c00121b5:	8d 76 00             	lea    esi,[esi+0x0]
c00121b8:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00121be:	83 c0 01             	add    eax,0x1
c00121c1:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00121c7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00121cd:	83 c0 01             	add    eax,0x1
c00121d0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121dd:	e8 12 63 ff ff       	call   c00084f4 <pbuf_free>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	e9 02 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c00121ea:	66 90                	xchg   ax,ax
c00121ec:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c00121f2:	83 c0 01             	add    eax,0x1
c00121f5:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c00121fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121ff:	83 c0 0e             	add    eax,0xe
c0012202:	83 ec 04             	sub    esp,0x4
c0012205:	6a 04                	push   0x4
c0012207:	50                   	push   eax
c0012208:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001220c:	50                   	push   eax
c001220d:	e8 68 e1 fe ff       	call   c000037a <memcpy>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012219:	83 c0 18             	add    eax,0x18
c001221c:	83 ec 04             	sub    esp,0x4
c001221f:	6a 04                	push   0x4
c0012221:	50                   	push   eax
c0012222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012226:	50                   	push   eax
c0012227:	e8 4e e1 fe ff       	call   c000037a <memcpy>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012233:	83 c0 04             	add    eax,0x4
c0012236:	74 0c                	je     c0012244 <etharp_arp_input+0x14c>
c0012238:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001223f:	85 c0                	test   eax,eax
c0012241:	75 09                	jne    c001224c <etharp_arp_input+0x154>
c0012243:	90                   	nop
c0012244:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012249:	eb 15                	jmp    c0012260 <etharp_arp_input+0x168>
c001224b:	90                   	nop
c001224c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012257:	39 c2                	cmp    edx,eax
c0012259:	0f 94 c0             	sete   al
c001225c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012260:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012265:	85 c0                	test   eax,eax
c0012267:	74 07                	je     c0012270 <etharp_arp_input+0x178>
c0012269:	b8 01 00 00 00       	mov    eax,0x1
c001226e:	eb 08                	jmp    c0012278 <etharp_arp_input+0x180>
c0012270:	b8 02 00 00 00       	mov    eax,0x2
c0012275:	8d 76 00             	lea    esi,[esi+0x0]
c0012278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001227c:	83 c2 08             	add    edx,0x8
c001227f:	50                   	push   eax
c0012280:	52                   	push   edx
c0012281:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012285:	50                   	push   eax
c0012286:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001228a:	e8 79 fc ff ff       	call   c0011f08 <update_arp_entry>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012296:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001229a:	0f b7 c0             	movzx  eax,ax
c001229d:	3d 00 01 00 00       	cmp    eax,0x100
c00122a2:	74 10                	je     c00122b4 <etharp_arp_input+0x1bc>
c00122a4:	3d 00 02 00 00       	cmp    eax,0x200
c00122a9:	0f 84 29 01 00 00    	je     c00123d8 <etharp_arp_input+0x2e0>
c00122af:	e9 10 01 00 00       	jmp    c00123c4 <etharp_arp_input+0x2cc>
c00122b4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00122b9:	85 c0                	test   eax,eax
c00122bb:	0f 84 f7 00 00 00    	je     c00123b8 <etharp_arp_input+0x2c0>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	6a 02                	push   0x2
c00122c6:	e8 1d e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122d2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00122d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122da:	8d 50 0e             	lea    edx,[eax+0xe]
c00122dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122e1:	83 c0 18             	add    eax,0x18
c00122e4:	83 ec 04             	sub    esp,0x4
c00122e7:	6a 04                	push   0x4
c00122e9:	52                   	push   edx
c00122ea:	50                   	push   eax
c00122eb:	e8 8a e0 fe ff       	call   c000037a <memcpy>
c00122f0:	83 c4 10             	add    esp,0x10
c00122f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f7:	8d 50 04             	lea    edx,[eax+0x4]
c00122fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122fe:	83 c0 0e             	add    eax,0xe
c0012301:	83 ec 04             	sub    esp,0x4
c0012304:	6a 04                	push   0x4
c0012306:	52                   	push   edx
c0012307:	50                   	push   eax
c0012308:	e8 6d e0 fe ff       	call   c000037a <memcpy>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012314:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012317:	0f b6 c0             	movzx  eax,al
c001231a:	83 f8 06             	cmp    eax,0x6
c001231d:	74 15                	je     c0012334 <etharp_arp_input+0x23c>
c001231f:	83 ec 08             	sub    esp,0x8
c0012322:	68 7c 0d 03 c0       	push   0xc0030d7c
c0012327:	68 46 fd 02 c0       	push   0xc002fd46
c001232c:	e8 9b da 00 00       	call   c001fdcc <CPrintf>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012338:	8d 50 08             	lea    edx,[eax+0x8]
c001233b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001233f:	83 c0 12             	add    eax,0x12
c0012342:	83 ec 04             	sub    esp,0x4
c0012345:	6a 06                	push   0x6
c0012347:	52                   	push   edx
c0012348:	50                   	push   eax
c0012349:	e8 2c e0 fe ff       	call   c000037a <memcpy>
c001234e:	83 c4 10             	add    esp,0x10
c0012351:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012355:	8d 50 08             	lea    edx,[eax+0x8]
c0012358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001235c:	83 ec 04             	sub    esp,0x4
c001235f:	6a 06                	push   0x6
c0012361:	52                   	push   edx
c0012362:	50                   	push   eax
c0012363:	e8 12 e0 fe ff       	call   c000037a <memcpy>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001236f:	83 c0 08             	add    eax,0x8
c0012372:	83 ec 04             	sub    esp,0x4
c0012375:	6a 06                	push   0x6
c0012377:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237b:	50                   	push   eax
c001237c:	e8 f9 df fe ff       	call   c000037a <memcpy>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012388:	83 c0 06             	add    eax,0x6
c001238b:	83 ec 04             	sub    esp,0x4
c001238e:	6a 06                	push   0x6
c0012390:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012394:	50                   	push   eax
c0012395:	e8 e0 df fe ff       	call   c000037a <memcpy>
c001239a:	83 c4 10             	add    esp,0x10
c001239d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123a4:	83 ec 08             	sub    esp,0x8
c00123a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123af:	ff d0                	call   eax
c00123b1:	83 c4 10             	add    esp,0x10
c00123b4:	eb 26                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123b6:	66 90                	xchg   ax,ax
c00123b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123bc:	83 c0 04             	add    eax,0x4
c00123bf:	eb 1b                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123c1:	8d 76 00             	lea    esi,[esi+0x0]
c00123c4:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c00123ca:	83 c0 01             	add    eax,0x1
c00123cd:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c00123d3:	eb 07                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123d5:	8d 76 00             	lea    esi,[esi+0x0]
c00123d8:	90                   	nop
c00123d9:	8d 76 00             	lea    esi,[esi+0x0]
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00123e3:	e8 0c 61 ff ff       	call   c00084f4 <pbuf_free>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	90                   	nop
c00123ec:	83 c4 2c             	add    esp,0x2c
c00123ef:	c3                   	ret    

c00123f0 <etharp_raw>:
c00123f0:	83 ec 2c             	sub    esp,0x2c
c00123f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00123f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00123fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012401:	83 ec 04             	sub    esp,0x4
c0012404:	6a 00                	push   0x0
c0012406:	6a 2a                	push   0x2a
c0012408:	6a 03                	push   0x3
c001240a:	e8 bd 62 ff ff       	call   c00086cc <pbuf_alloc>
c001240f:	83 c4 10             	add    esp,0x10
c0012412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012416:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001241b:	75 17                	jne    c0012434 <etharp_raw+0x44>
c001241d:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012423:	83 c0 01             	add    eax,0x1
c0012426:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001242c:	b0 ff                	mov    al,0xff
c001242e:	e9 85 01 00 00       	jmp    c00125b8 <etharp_raw+0x1c8>
c0012433:	90                   	nop
c0012434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012438:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001243c:	0f b7 c0             	movzx  eax,ax
c001243f:	83 f8 29             	cmp    eax,0x29
c0012442:	77 18                	ja     c001245c <etharp_raw+0x6c>
c0012444:	83 ec 08             	sub    esp,0x8
c0012447:	68 0c 0e 03 c0       	push   0xc0030e0c
c001244c:	68 46 fd 02 c0       	push   0xc002fd46
c0012451:	e8 76 d9 00 00       	call   c001fdcc <CPrintf>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	8d 76 00             	lea    esi,[esi+0x0]
c001245c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012463:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001246b:	83 c0 0e             	add    eax,0xe
c001246e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012472:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012477:	83 ec 0c             	sub    esp,0xc
c001247a:	50                   	push   eax
c001247b:	e8 68 e7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012480:	83 c4 10             	add    esp,0x10
c0012483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012487:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001248b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001248f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012492:	0f b6 c0             	movzx  eax,al
c0012495:	83 f8 06             	cmp    eax,0x6
c0012498:	74 16                	je     c00124b0 <etharp_raw+0xc0>
c001249a:	83 ec 08             	sub    esp,0x8
c001249d:	68 7c 0d 03 c0       	push   0xc0030d7c
c00124a2:	68 46 fd 02 c0       	push   0xc002fd46
c00124a7:	e8 20 d9 00 00       	call   c001fdcc <CPrintf>
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	90                   	nop
c00124b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b4:	83 c0 08             	add    eax,0x8
c00124b7:	83 ec 04             	sub    esp,0x4
c00124ba:	6a 06                	push   0x6
c00124bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124c0:	50                   	push   eax
c00124c1:	e8 b4 de fe ff       	call   c000037a <memcpy>
c00124c6:	83 c4 10             	add    esp,0x10
c00124c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cd:	83 c0 12             	add    eax,0x12
c00124d0:	83 ec 04             	sub    esp,0x4
c00124d3:	6a 06                	push   0x6
c00124d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124d9:	50                   	push   eax
c00124da:	e8 9b de fe ff       	call   c000037a <memcpy>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124e6:	83 ec 04             	sub    esp,0x4
c00124e9:	6a 06                	push   0x6
c00124eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124ef:	50                   	push   eax
c00124f0:	e8 85 de fe ff       	call   c000037a <memcpy>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124fc:	83 c0 06             	add    eax,0x6
c00124ff:	83 ec 04             	sub    esp,0x4
c0012502:	6a 06                	push   0x6
c0012504:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012508:	50                   	push   eax
c0012509:	e8 6c de fe ff       	call   c000037a <memcpy>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012515:	83 c0 0e             	add    eax,0xe
c0012518:	83 ec 04             	sub    esp,0x4
c001251b:	6a 04                	push   0x4
c001251d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012521:	50                   	push   eax
c0012522:	e8 53 de fe ff       	call   c000037a <memcpy>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001252e:	83 c0 18             	add    eax,0x18
c0012531:	83 ec 04             	sub    esp,0x4
c0012534:	6a 04                	push   0x4
c0012536:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001253a:	50                   	push   eax
c001253b:	e8 3a de fe ff       	call   c000037a <memcpy>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012547:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c001254c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012550:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0012556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255a:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c001255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012562:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c0012566:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001256a:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012574:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012577:	83 ec 08             	sub    esp,0x8
c001257a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001257e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012582:	ff d0                	call   eax
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001258b:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c0012591:	83 c0 01             	add    eax,0x1
c0012594:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125a1:	e8 4e 5f ff ff       	call   c00084f4 <pbuf_free>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125b5:	8d 76 00             	lea    esi,[esi+0x0]
c00125b8:	83 c4 2c             	add    esp,0x2c
c00125bb:	c3                   	ret    

c00125bc <etharp_request>:
c00125bc:	83 ec 0c             	sub    esp,0xc
c00125bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c3:	8d 48 04             	lea    ecx,[eax+0x4]
c00125c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ca:	8d 50 23             	lea    edx,[eax+0x23]
c00125cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d1:	83 c0 23             	add    eax,0x23
c00125d4:	6a 01                	push   0x1
c00125d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125da:	68 dc 0e 03 c0       	push   0xc0030edc
c00125df:	51                   	push   ecx
c00125e0:	52                   	push   edx
c00125e1:	68 e4 0e 03 c0       	push   0xc0030ee4
c00125e6:	50                   	push   eax
c00125e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125eb:	e8 00 fe ff ff       	call   c00123f0 <etharp_raw>
c00125f0:	83 c4 20             	add    esp,0x20
c00125f3:	83 c4 0c             	add    esp,0xc
c00125f6:	c3                   	ret    
c00125f7:	90                   	nop

c00125f8 <etharp_query>:
c00125f8:	83 ec 2c             	sub    esp,0x2c
c00125fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ff:	83 c0 23             	add    eax,0x23
c0012602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012606:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001260b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001260f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012611:	83 ec 08             	sub    esp,0x8
c0012614:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012618:	50                   	push   eax
c0012619:	e8 ca 19 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	0f b6 c0             	movzx  eax,al
c0012624:	85 c0                	test   eax,eax
c0012626:	75 24                	jne    c001264c <etharp_query+0x54>
c0012628:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001262c:	8b 00                	mov    eax,DWORD PTR [eax]
c001262e:	25 f0 00 00 00       	and    eax,0xf0
c0012633:	3d e0 00 00 00       	cmp    eax,0xe0
c0012638:	74 12                	je     c001264c <etharp_query+0x54>
c001263a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001263f:	74 0b                	je     c001264c <etharp_query+0x54>
c0012641:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012645:	8b 00                	mov    eax,DWORD PTR [eax]
c0012647:	85 c0                	test   eax,eax
c0012649:	75 09                	jne    c0012654 <etharp_query+0x5c>
c001264b:	90                   	nop
c001264c:	b0 f2                	mov    al,0xf2
c001264e:	e9 dd 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012653:	90                   	nop
c0012654:	83 ec 08             	sub    esp,0x8
c0012657:	6a 01                	push   0x1
c0012659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001265d:	e8 f2 f4 ff ff       	call   c0011b54 <find_entry>
c0012662:	83 c4 10             	add    esp,0x10
c0012665:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012669:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001266e:	85 c0                	test   eax,eax
c0012670:	79 22                	jns    c0012694 <etharp_query+0x9c>
c0012672:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012677:	74 0f                	je     c0012688 <etharp_query+0x90>
c0012679:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001267f:	83 c0 01             	add    eax,0x1
c0012682:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012688:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001268c:	e9 9f 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012691:	8d 76 00             	lea    esi,[esi+0x0]
c0012694:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012699:	c1 e0 04             	shl    eax,0x4
c001269c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126a1:	8a 00                	mov    al,BYTE PTR [eax]
c00126a3:	0f b6 c0             	movzx  eax,al
c00126a6:	85 c0                	test   eax,eax
c00126a8:	75 12                	jne    c00126bc <etharp_query+0xc4>
c00126aa:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126af:	c1 e0 04             	shl    eax,0x4
c00126b2:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126b7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00126ba:	66 90                	xchg   ax,ax
c00126bc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126c1:	c1 e0 04             	shl    eax,0x4
c00126c4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126c9:	8a 00                	mov    al,BYTE PTR [eax]
c00126cb:	0f b6 c0             	movzx  eax,al
c00126ce:	83 f8 01             	cmp    eax,0x1
c00126d1:	74 2d                	je     c0012700 <etharp_query+0x108>
c00126d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126d8:	c1 e0 04             	shl    eax,0x4
c00126db:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126e0:	8a 00                	mov    al,BYTE PTR [eax]
c00126e2:	0f b6 c0             	movzx  eax,al
c00126e5:	83 f8 02             	cmp    eax,0x2
c00126e8:	74 16                	je     c0012700 <etharp_query+0x108>
c00126ea:	83 ec 08             	sub    esp,0x8
c00126ed:	68 40 0e 03 c0       	push   0xc0030e40
c00126f2:	68 46 fd 02 c0       	push   0xc002fd46
c00126f7:	e8 d0 d6 00 00       	call   c001fdcc <CPrintf>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	90                   	nop
c0012700:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012705:	c1 e0 04             	shl    eax,0x4
c0012708:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001270d:	8a 00                	mov    al,BYTE PTR [eax]
c001270f:	0f b6 c0             	movzx  eax,al
c0012712:	83 f8 01             	cmp    eax,0x1
c0012715:	74 09                	je     c0012720 <etharp_query+0x128>
c0012717:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001271c:	75 2a                	jne    c0012748 <etharp_query+0x150>
c001271e:	66 90                	xchg   ax,ax
c0012720:	83 ec 08             	sub    esp,0x8
c0012723:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012727:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001272b:	e8 8c fe ff ff       	call   c00125bc <etharp_request>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012737:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001273c:	75 0a                	jne    c0012748 <etharp_query+0x150>
c001273e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012742:	e9 e9 01 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012747:	90                   	nop
c0012748:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001274d:	75 15                	jne    c0012764 <etharp_query+0x16c>
c001274f:	83 ec 08             	sub    esp,0x8
c0012752:	68 ba 01 03 c0       	push   0xc00301ba
c0012757:	68 46 fd 02 c0       	push   0xc002fd46
c001275c:	e8 6b d6 00 00       	call   c001fdcc <CPrintf>
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012769:	c1 e0 04             	shl    eax,0x4
c001276c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012771:	8a 00                	mov    al,BYTE PTR [eax]
c0012773:	0f b6 c0             	movzx  eax,al
c0012776:	83 f8 02             	cmp    eax,0x2
c0012779:	75 39                	jne    c00127b4 <etharp_query+0x1bc>
c001277b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001277f:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c0012784:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012789:	c1 e0 04             	shl    eax,0x4
c001278c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012791:	83 c0 08             	add    eax,0x8
c0012794:	50                   	push   eax
c0012795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012799:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001279d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127a1:	e8 da f6 ff ff       	call   c0011e80 <etharp_send_ip>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127ad:	e9 7a 01 00 00       	jmp    c001292c <etharp_query+0x334>
c00127b2:	66 90                	xchg   ax,ax
c00127b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127b9:	c1 e0 04             	shl    eax,0x4
c00127bc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00127c1:	8a 00                	mov    al,BYTE PTR [eax]
c00127c3:	0f b6 c0             	movzx  eax,al
c00127c6:	83 f8 01             	cmp    eax,0x1
c00127c9:	0f 85 5d 01 00 00    	jne    c001292c <etharp_query+0x334>
c00127cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127df:	eb 63                	jmp    c0012844 <etharp_query+0x24c>
c00127e1:	8d 76 00             	lea    esi,[esi+0x0]
c00127e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127e8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00127ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127f3:	0f b7 d2             	movzx  edx,dx
c00127f6:	0f b7 c0             	movzx  eax,ax
c00127f9:	39 c2                	cmp    edx,eax
c00127fb:	75 1f                	jne    c001281c <etharp_query+0x224>
c00127fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012801:	8b 00                	mov    eax,DWORD PTR [eax]
c0012803:	85 c0                	test   eax,eax
c0012805:	74 15                	je     c001281c <etharp_query+0x224>
c0012807:	83 ec 08             	sub    esp,0x8
c001280a:	68 c1 0e 03 c0       	push   0xc0030ec1
c001280f:	68 46 fd 02 c0       	push   0xc002fd46
c0012814:	e8 b3 d5 00 00       	call   c001fdcc <CPrintf>
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012820:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0012823:	0f b6 c0             	movzx  eax,al
c0012826:	83 f8 01             	cmp    eax,0x1
c0012829:	74 0d                	je     c0012838 <etharp_query+0x240>
c001282b:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c0012833:	eb 17                	jmp    c001284c <etharp_query+0x254>
c0012835:	8d 76 00             	lea    esi,[esi+0x0]
c0012838:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001283c:	8b 00                	mov    eax,DWORD PTR [eax]
c001283e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012842:	66 90                	xchg   ax,ax
c0012844:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012849:	75 99                	jne    c00127e4 <etharp_query+0x1ec>
c001284b:	90                   	nop
c001284c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012851:	74 59                	je     c00128ac <etharp_query+0x2b4>
c0012853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001285a:	0f b7 c0             	movzx  eax,ax
c001285d:	83 ec 04             	sub    esp,0x4
c0012860:	6a 00                	push   0x0
c0012862:	50                   	push   eax
c0012863:	6a 03                	push   0x3
c0012865:	e8 62 5e ff ff       	call   c00086cc <pbuf_alloc>
c001286a:	83 c4 10             	add    esp,0x10
c001286d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012871:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012876:	74 4c                	je     c00128c4 <etharp_query+0x2cc>
c0012878:	83 ec 08             	sub    esp,0x8
c001287b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001287f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012883:	e8 a4 66 ff ff       	call   c0008f2c <pbuf_copy>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	0f be c0             	movsx  eax,al
c001288e:	85 c0                	test   eax,eax
c0012890:	74 32                	je     c00128c4 <etharp_query+0x2cc>
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012899:	e8 56 5c ff ff       	call   c00084f4 <pbuf_free>
c001289e:	83 c4 10             	add    esp,0x10
c00128a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128a9:	eb 19                	jmp    c00128c4 <etharp_query+0x2cc>
c00128ab:	90                   	nop
c00128ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00128b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00128bb:	e8 3c 64 ff ff       	call   c0008cfc <pbuf_ref>
c00128c0:	83 c4 10             	add    esp,0x10
c00128c3:	90                   	nop
c00128c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00128c9:	74 4d                	je     c0012918 <etharp_query+0x320>
c00128cb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128d0:	c1 e0 04             	shl    eax,0x4
c00128d3:	05 00 a9 03 c0       	add    eax,0xc003a900
c00128d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128da:	85 c0                	test   eax,eax
c00128dc:	74 1e                	je     c00128fc <etharp_query+0x304>
c00128de:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128e3:	c1 e0 04             	shl    eax,0x4
c00128e6:	05 00 a9 03 c0       	add    eax,0xc003a900
c00128eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ed:	83 ec 0c             	sub    esp,0xc
c00128f0:	50                   	push   eax
c00128f1:	e8 fe 5b ff ff       	call   c00084f4 <pbuf_free>
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	8d 76 00             	lea    esi,[esi+0x0]
c00128fc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012901:	c1 e0 04             	shl    eax,0x4
c0012904:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c001290a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290e:	89 02                	mov    DWORD PTR [edx],eax
c0012910:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012915:	eb 15                	jmp    c001292c <etharp_query+0x334>
c0012917:	90                   	nop
c0012918:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001291e:	83 c0 01             	add    eax,0x1
c0012921:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012927:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001292c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012930:	83 c4 2c             	add    esp,0x2c
c0012933:	c3                   	ret    

c0012934 <etharp_output>:
c0012934:	83 ec 1c             	sub    esp,0x1c
c0012937:	83 ec 08             	sub    esp,0x8
c001293a:	6a 0e                	push   0xe
c001293c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012940:	e8 13 5a ff ff       	call   c0008358 <pbuf_header>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	0f b6 c0             	movzx  eax,al
c001294b:	85 c0                	test   eax,eax
c001294d:	74 19                	je     c0012968 <etharp_output+0x34>
c001294f:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c0012955:	83 c0 01             	add    eax,0x1
c0012958:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c001295e:	b0 fe                	mov    al,0xfe
c0012960:	e9 8b 01 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012965:	8d 76 00             	lea    esi,[esi+0x0]
c0012968:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012970:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012974:	8b 00                	mov    eax,DWORD PTR [eax]
c0012976:	83 ec 08             	sub    esp,0x8
c0012979:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001297d:	50                   	push   eax
c001297e:	e8 65 16 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	0f b6 c0             	movzx  eax,al
c0012989:	85 c0                	test   eax,eax
c001298b:	74 0f                	je     c001299c <etharp_output+0x68>
c001298d:	c7 44 24 0c e4 0e 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030ee4
c0012995:	e9 3a 01 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c001299a:	66 90                	xchg   ax,ax
c001299c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a2:	25 f0 00 00 00       	and    eax,0xf0
c00129a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00129ac:	75 42                	jne    c00129f0 <etharp_output+0xbc>
c00129ae:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00129b3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00129b8:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c00129bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129c1:	83 c0 01             	add    eax,0x1
c00129c4:	8a 00                	mov    al,BYTE PTR [eax]
c00129c6:	83 e0 7f             	and    eax,0x7f
c00129c9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00129cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129d1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c00129d4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00129d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129dc:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c00129df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00129e3:	8d 44 24 06          	lea    eax,[esp+0x6]
c00129e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129eb:	e9 e4 00 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c00129f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00129f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129fd:	31 c2                	xor    edx,eax
c00129ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a06:	21 d0                	and    eax,edx
c0012a08:	74 3a                	je     c0012a44 <etharp_output+0x110>
c0012a0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a10:	0f b7 c0             	movzx  eax,ax
c0012a13:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012a18:	74 2a                	je     c0012a44 <etharp_output+0x110>
c0012a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a1e:	83 c0 0c             	add    eax,0xc
c0012a21:	74 19                	je     c0012a3c <etharp_output+0x108>
c0012a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	74 0e                	je     c0012a3c <etharp_output+0x108>
c0012a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a32:	83 c0 0c             	add    eax,0xc
c0012a35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a39:	eb 09                	jmp    c0012a44 <etharp_output+0x110>
c0012a3b:	90                   	nop
c0012a3c:	b0 fc                	mov    al,0xfc
c0012a3e:	e9 ad 00 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012a43:	90                   	nop
c0012a44:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a49:	0f b6 c0             	movzx  eax,al
c0012a4c:	c1 e0 04             	shl    eax,0x4
c0012a4f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012a54:	8a 00                	mov    al,BYTE PTR [eax]
c0012a56:	0f b6 c0             	movzx  eax,al
c0012a59:	83 f8 02             	cmp    eax,0x2
c0012a5c:	75 5a                	jne    c0012ab8 <etharp_output+0x184>
c0012a5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a62:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a64:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a69:	0f b6 c0             	movzx  eax,al
c0012a6c:	c1 e0 04             	shl    eax,0x4
c0012a6f:	05 04 a9 03 c0       	add    eax,0xc003a904
c0012a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a76:	39 c2                	cmp    edx,eax
c0012a78:	75 3e                	jne    c0012ab8 <etharp_output+0x184>
c0012a7a:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c0012a80:	83 c0 01             	add    eax,0x1
c0012a83:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c0012a89:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a8e:	0f b6 c0             	movzx  eax,al
c0012a91:	c1 e0 04             	shl    eax,0x4
c0012a94:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012a99:	8d 50 08             	lea    edx,[eax+0x8]
c0012a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa0:	83 c0 23             	add    eax,0x23
c0012aa3:	52                   	push   edx
c0012aa4:	50                   	push   eax
c0012aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aad:	e8 ce f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	eb 39                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ab7:	90                   	nop
c0012ab8:	83 ec 04             	sub    esp,0x4
c0012abb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012abf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ac7:	e8 2c fb ff ff       	call   c00125f8 <etharp_query>
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	eb 1f                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad8:	83 c0 23             	add    eax,0x23
c0012adb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012adf:	50                   	push   eax
c0012ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae8:	e8 93 f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	83 c4 1c             	add    esp,0x1c
c0012af3:	c3                   	ret    

c0012af4 <ethernet_input>:
c0012af4:	83 ec 1c             	sub    esp,0x1c
c0012af7:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b02:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012b06:	0f b7 c0             	movzx  eax,ax
c0012b09:	83 f8 0e             	cmp    eax,0xe
c0012b0c:	77 26                	ja     c0012b34 <ethernet_input+0x40>
c0012b0e:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012b14:	83 c0 01             	add    eax,0x1
c0012b17:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012b1d:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012b23:	83 c0 01             	add    eax,0x1
c0012b26:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012b2c:	e9 ef 00 00 00       	jmp    c0012c20 <ethernet_input+0x12c>
c0012b31:	8d 76 00             	lea    esi,[esi+0x0]
c0012b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b43:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012b47:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012b4c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012b51:	83 f8 08             	cmp    eax,0x8
c0012b54:	74 0e                	je     c0012b64 <ethernet_input+0x70>
c0012b56:	3d 08 06 00 00       	cmp    eax,0x608
c0012b5b:	74 6b                	je     c0012bc8 <ethernet_input+0xd4>
c0012b5d:	e9 92 00 00 00       	jmp    c0012bf4 <ethernet_input+0x100>
c0012b62:	66 90                	xchg   ax,ax
c0012b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b68:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012b6b:	0f b6 c0             	movzx  eax,al
c0012b6e:	83 e0 20             	and    eax,0x20
c0012b71:	0f 84 a1 00 00 00    	je     c0012c18 <ethernet_input+0x124>
c0012b77:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012b7c:	f7 d8                	neg    eax
c0012b7e:	98                   	cwde   
c0012b7f:	83 ec 08             	sub    esp,0x8
c0012b82:	50                   	push   eax
c0012b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b87:	e8 cc 57 ff ff       	call   c0008358 <pbuf_header>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	0f b6 c0             	movzx  eax,al
c0012b92:	85 c0                	test   eax,eax
c0012b94:	74 1a                	je     c0012bb0 <ethernet_input+0xbc>
c0012b96:	83 ec 08             	sub    esp,0x8
c0012b99:	68 68 0e 03 c0       	push   0xc0030e68
c0012b9e:	68 46 fd 02 c0       	push   0xc002fd46
c0012ba3:	e8 24 d2 00 00       	call   c001fdcc <CPrintf>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	eb 73                	jmp    c0012c20 <ethernet_input+0x12c>
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb0:	83 ec 08             	sub    esp,0x8
c0012bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bbb:	e8 70 0c 00 00       	call   c0013830 <ip_input>
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	eb 4f                	jmp    c0012c14 <ethernet_input+0x120>
c0012bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bcc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012bcf:	0f b6 c0             	movzx  eax,al
c0012bd2:	83 e0 20             	and    eax,0x20
c0012bd5:	74 45                	je     c0012c1c <ethernet_input+0x128>
c0012bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bdb:	83 c0 23             	add    eax,0x23
c0012bde:	83 ec 04             	sub    esp,0x4
c0012be1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012be5:	50                   	push   eax
c0012be6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012bea:	e8 09 f5 ff ff       	call   c00120f8 <etharp_arp_input>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	eb 20                	jmp    c0012c14 <ethernet_input+0x120>
c0012bf4:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012bfa:	83 c0 01             	add    eax,0x1
c0012bfd:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012c03:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012c09:	83 c0 01             	add    eax,0x1
c0012c0c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012c12:	eb 0c                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c14:	b0 00                	mov    al,0x0
c0012c16:	eb 1c                	jmp    c0012c34 <ethernet_input+0x140>
c0012c18:	90                   	nop
c0012c19:	eb 05                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c1b:	90                   	nop
c0012c1c:	90                   	nop
c0012c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c27:	e8 c8 58 ff ff       	call   c00084f4 <pbuf_free>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	b0 00                	mov    al,0x0
c0012c31:	8d 76 00             	lea    esi,[esi+0x0]
c0012c34:	83 c4 1c             	add    esp,0x1c
c0012c37:	c3                   	ret    

c0012c38 <icmp_input>:
c0012c38:	83 ec 2c             	sub    esp,0x2c
c0012c3b:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012c41:	83 c0 01             	add    eax,0x1
c0012c44:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c59:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012c5c:	0f b7 c0             	movzx  eax,ax
c0012c5f:	83 ec 0c             	sub    esp,0xc
c0012c62:	50                   	push   eax
c0012c63:	e8 80 df fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	0f b7 c0             	movzx  eax,ax
c0012c6e:	c1 e8 08             	shr    eax,0x8
c0012c71:	83 e0 0f             	and    eax,0xf
c0012c74:	c1 e0 02             	shl    eax,0x2
c0012c77:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012c7c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c81:	f7 d8                	neg    eax
c0012c83:	98                   	cwde   
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	50                   	push   eax
c0012c88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c8c:	e8 c7 56 ff ff       	call   c0008358 <pbuf_header>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	0f b6 c0             	movzx  eax,al
c0012c97:	85 c0                	test   eax,eax
c0012c99:	0f 85 a9 03 00 00    	jne    c0013048 <icmp_input+0x410>
c0012c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ca6:	0f b7 c0             	movzx  eax,ax
c0012ca9:	83 f8 03             	cmp    eax,0x3
c0012cac:	0f 86 96 03 00 00    	jbe    c0013048 <icmp_input+0x410>
c0012cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb9:	8a 00                	mov    al,BYTE PTR [eax]
c0012cbb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012cbf:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012cc4:	85 c0                	test   eax,eax
c0012cc6:	0f 84 64 03 00 00    	je     c0013030 <icmp_input+0x3f8>
c0012ccc:	83 f8 08             	cmp    eax,0x8
c0012ccf:	0f 85 3b 03 00 00    	jne    c0013010 <icmp_input+0x3d8>
c0012cd5:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012cdd:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012ce2:	25 f0 00 00 00       	and    eax,0xf0
c0012ce7:	3d e0 00 00 00       	cmp    eax,0xe0
c0012cec:	75 0a                	jne    c0012cf8 <icmp_input+0xc0>
c0012cee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012cf6:	66 90                	xchg   ax,ax
c0012cf8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012cfd:	83 ec 08             	sub    esp,0x8
c0012d00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d04:	50                   	push   eax
c0012d05:	e8 de 12 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	0f b6 c0             	movzx  eax,al
c0012d10:	85 c0                	test   eax,eax
c0012d12:	74 08                	je     c0012d1c <icmp_input+0xe4>
c0012d14:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d1c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012d21:	75 25                	jne    c0012d48 <icmp_input+0x110>
c0012d23:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012d29:	83 c0 01             	add    eax,0x1
c0012d2c:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d39:	e8 b6 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	e9 4e 03 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d46:	66 90                	xchg   ax,ax
c0012d48:	90                   	nop
c0012d49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d50:	0f b7 c0             	movzx  eax,ax
c0012d53:	83 f8 07             	cmp    eax,0x7
c0012d56:	0f 86 f0 02 00 00    	jbe    c001304c <icmp_input+0x414>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d63:	e8 50 09 00 00       	call   c00136b8 <inet_chksum_pbuf>
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	0f b7 c0             	movzx  eax,ax
c0012d6e:	85 c0                	test   eax,eax
c0012d70:	74 26                	je     c0012d98 <icmp_input+0x160>
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d79:	e8 76 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012d87:	83 c0 01             	add    eax,0x1
c0012d8a:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012d90:	e9 ff 02 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d95:	8d 76 00             	lea    esi,[esi+0x0]
c0012d98:	83 ec 08             	sub    esp,0x8
c0012d9b:	6a 22                	push   0x22
c0012d9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012da1:	e8 b2 55 ff ff       	call   c0008358 <pbuf_header>
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	0f b6 c0             	movzx  eax,al
c0012dac:	85 c0                	test   eax,eax
c0012dae:	0f 84 24 01 00 00    	je     c0012ed8 <icmp_input+0x2a0>
c0012db4:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012db9:	83 ec 08             	sub    esp,0x8
c0012dbc:	50                   	push   eax
c0012dbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012dc1:	e8 92 55 ff ff       	call   c0008358 <pbuf_header>
c0012dc6:	83 c4 10             	add    esp,0x10
c0012dc9:	0f b6 c0             	movzx  eax,al
c0012dcc:	85 c0                	test   eax,eax
c0012dce:	74 1c                	je     c0012dec <icmp_input+0x1b4>
c0012dd0:	83 ec 08             	sub    esp,0x8
c0012dd3:	68 ec 0e 03 c0       	push   0xc0030eec
c0012dd8:	68 46 fd 02 c0       	push   0xc002fd46
c0012ddd:	e8 ea cf 00 00       	call   c001fdcc <CPrintf>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	e9 8a 02 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012dea:	66 90                	xchg   ax,ax
c0012dec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012df0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012df3:	0f b7 c0             	movzx  eax,ax
c0012df6:	83 ec 04             	sub    esp,0x4
c0012df9:	6a 00                	push   0x0
c0012dfb:	50                   	push   eax
c0012dfc:	6a 02                	push   0x2
c0012dfe:	e8 c9 58 ff ff       	call   c00086cc <pbuf_alloc>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e0a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012e0f:	0f 84 5b 02 00 00    	je     c0013070 <icmp_input+0x438>
c0012e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e19:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012e1d:	0f b7 c0             	movzx  eax,ax
c0012e20:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012e25:	83 c2 08             	add    edx,0x8
c0012e28:	39 d0                	cmp    eax,edx
c0012e2a:	73 18                	jae    c0012e44 <icmp_input+0x20c>
c0012e2c:	83 ec 08             	sub    esp,0x8
c0012e2f:	68 20 0f 03 c0       	push   0xc0030f20
c0012e34:	68 46 fd 02 c0       	push   0xc002fd46
c0012e39:	e8 8e cf 00 00       	call   c001fdcc <CPrintf>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	8d 76 00             	lea    esi,[esi+0x0]
c0012e44:	83 ec 08             	sub    esp,0x8
c0012e47:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4f:	e8 d8 60 ff ff       	call   c0008f2c <pbuf_copy>
c0012e54:	83 c4 10             	add    esp,0x10
c0012e57:	0f be c0             	movsx  eax,al
c0012e5a:	85 c0                	test   eax,eax
c0012e5c:	74 1a                	je     c0012e78 <icmp_input+0x240>
c0012e5e:	83 ec 08             	sub    esp,0x8
c0012e61:	68 58 0f 03 c0       	push   0xc0030f58
c0012e66:	68 46 fd 02 c0       	push   0xc002fd46
c0012e6b:	e8 5c cf 00 00       	call   c001fdcc <CPrintf>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	e9 fc 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e83:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012e88:	f7 d8                	neg    eax
c0012e8a:	98                   	cwde   
c0012e8b:	83 ec 08             	sub    esp,0x8
c0012e8e:	50                   	push   eax
c0012e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e93:	e8 c0 54 ff ff       	call   c0008358 <pbuf_header>
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	0f b6 c0             	movzx  eax,al
c0012e9e:	85 c0                	test   eax,eax
c0012ea0:	74 1a                	je     c0012ebc <icmp_input+0x284>
c0012ea2:	83 ec 08             	sub    esp,0x8
c0012ea5:	68 80 0f 03 c0       	push   0xc0030f80
c0012eaa:	68 46 fd 02 c0       	push   0xc002fd46
c0012eaf:	e8 18 cf 00 00       	call   c001fdcc <CPrintf>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	e9 b8 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012ebc:	83 ec 0c             	sub    esp,0xc
c0012ebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ec3:	e8 2c 56 ff ff       	call   c00084f4 <pbuf_free>
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ed3:	eb 37                	jmp    c0012f0c <icmp_input+0x2d4>
c0012ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ed8:	83 ec 08             	sub    esp,0x8
c0012edb:	6a de                	push   0xffffffde
c0012edd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee1:	e8 72 54 ff ff       	call   c0008358 <pbuf_header>
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	0f b6 c0             	movzx  eax,al
c0012eec:	85 c0                	test   eax,eax
c0012eee:	74 1c                	je     c0012f0c <icmp_input+0x2d4>
c0012ef0:	83 ec 08             	sub    esp,0x8
c0012ef3:	68 80 0f 03 c0       	push   0xc0030f80
c0012ef8:	68 46 fd 02 c0       	push   0xc002fd46
c0012efd:	e8 ca ce 00 00       	call   c001fdcc <CPrintf>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	e9 6a 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012f0a:	66 90                	xchg   ax,ax
c0012f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f17:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f21:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012f24:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012f2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f3c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f40:	0f b7 c0             	movzx  eax,ax
c0012f43:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012f48:	76 16                	jbe    c0012f60 <icmp_input+0x328>
c0012f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f4e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f52:	83 c0 09             	add    eax,0x9
c0012f55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f59:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f5d:	eb 15                	jmp    c0012f74 <icmp_input+0x33c>
c0012f5f:	90                   	nop
c0012f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f64:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f68:	83 c0 08             	add    eax,0x8
c0012f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f6f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f73:	90                   	nop
c0012f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f78:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f80:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012f86:	83 ec 08             	sub    esp,0x8
c0012f89:	6a 14                	push   0x14
c0012f8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f8f:	e8 fc 06 00 00       	call   c0013690 <inet_chksum>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f9b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012f9f:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012fa5:	83 c0 01             	add    eax,0x1
c0012fa8:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012fae:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012fb3:	83 ec 08             	sub    esp,0x8
c0012fb6:	50                   	push   eax
c0012fb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fbb:	e8 98 53 ff ff       	call   c0008358 <pbuf_header>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	0f b6 c0             	movzx  eax,al
c0012fc6:	85 c0                	test   eax,eax
c0012fc8:	74 1a                	je     c0012fe4 <icmp_input+0x3ac>
c0012fca:	83 ec 08             	sub    esp,0x8
c0012fcd:	68 68 0e 03 c0       	push   0xc0030e68
c0012fd2:	68 46 fd 02 c0       	push   0xc002fd46
c0012fd7:	e8 f0 cd 00 00       	call   c001fdcc <CPrintf>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	eb 53                	jmp    c0013034 <icmp_input+0x3fc>
c0012fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fe4:	83 ec 04             	sub    esp,0x4
c0012fe7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012feb:	6a 01                	push   0x1
c0012fed:	6a 00                	push   0x0
c0012fef:	68 ff 00 00 00       	push   0xff
c0012ff4:	6a 00                	push   0x0
c0012ff6:	68 98 68 03 c0       	push   0xc0036898
c0012ffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fff:	e8 70 0c 00 00       	call   c0013c74 <ip_output_if>
c0013004:	83 c4 20             	add    esp,0x20
c0013007:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001300b:	eb 27                	jmp    c0013034 <icmp_input+0x3fc>
c001300d:	8d 76 00             	lea    esi,[esi+0x0]
c0013010:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0013016:	83 c0 01             	add    eax,0x1
c0013019:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c001301f:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0013025:	83 c0 01             	add    eax,0x1
c0013028:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c001302e:	eb 04                	jmp    c0013034 <icmp_input+0x3fc>
c0013030:	90                   	nop
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001303b:	e8 b4 54 ff ff       	call   c00084f4 <pbuf_free>
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	eb 4f                	jmp    c0013094 <icmp_input+0x45c>
c0013045:	8d 76 00             	lea    esi,[esi+0x0]
c0013048:	90                   	nop
c0013049:	eb 05                	jmp    c0013050 <icmp_input+0x418>
c001304b:	90                   	nop
c001304c:	90                   	nop
c001304d:	8d 76 00             	lea    esi,[esi+0x0]
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013057:	e8 98 54 ff ff       	call   c00084f4 <pbuf_free>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0013065:	83 c0 01             	add    eax,0x1
c0013068:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c001306e:	eb 24                	jmp    c0013094 <icmp_input+0x45c>
c0013070:	90                   	nop
c0013071:	8d 76 00             	lea    esi,[esi+0x0]
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001307b:	e8 74 54 ff ff       	call   c00084f4 <pbuf_free>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0013089:	83 c0 01             	add    eax,0x1
c001308c:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0013092:	90                   	nop
c0013093:	90                   	nop
c0013094:	83 c4 2c             	add    esp,0x2c
c0013097:	c3                   	ret    

c0013098 <icmp_send_response>:
c0013098:	83 ec 2c             	sub    esp,0x2c
c001309b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001309f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00130a3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00130a7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00130ab:	83 ec 04             	sub    esp,0x4
c00130ae:	6a 00                	push   0x0
c00130b0:	6a 24                	push   0x24
c00130b2:	6a 01                	push   0x1
c00130b4:	e8 13 56 ff ff       	call   c00086cc <pbuf_alloc>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00130c5:	0f 84 fd 00 00 00    	je     c00131c8 <icmp_send_response+0x130>
c00130cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130cf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130d3:	0f b7 c0             	movzx  eax,ax
c00130d6:	83 f8 23             	cmp    eax,0x23
c00130d9:	77 15                	ja     c00130f0 <icmp_send_response+0x58>
c00130db:	83 ec 08             	sub    esp,0x8
c00130de:	68 b4 0f 03 c0       	push   0xc0030fb4
c00130e3:	68 46 fd 02 c0       	push   0xc002fd46
c00130e8:	e8 df cc 00 00       	call   c001fdcc <CPrintf>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013102:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001310a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001310e:	88 10                	mov    BYTE PTR [eax],dl
c0013110:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013114:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0013118:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001311b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001311f:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0013125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013129:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001312f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013133:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013136:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001313a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001313d:	83 c2 08             	add    edx,0x8
c0013140:	83 ec 04             	sub    esp,0x4
c0013143:	6a 1c                	push   0x1c
c0013145:	50                   	push   eax
c0013146:	52                   	push   edx
c0013147:	e8 2e d2 fe ff       	call   c000037a <memcpy>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013153:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0013159:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001315d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013161:	0f b7 c0             	movzx  eax,ax
c0013164:	83 ec 08             	sub    esp,0x8
c0013167:	50                   	push   eax
c0013168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001316c:	e8 1f 05 00 00       	call   c0013690 <inet_chksum>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013178:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001317c:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0013182:	83 c0 01             	add    eax,0x1
c0013185:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c001318b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001318f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013196:	83 ec 08             	sub    esp,0x8
c0013199:	6a 01                	push   0x1
c001319b:	6a 00                	push   0x0
c001319d:	68 ff 00 00 00       	push   0xff
c00131a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00131a6:	50                   	push   eax
c00131a7:	6a 00                	push   0x0
c00131a9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00131ad:	e8 92 0d 00 00       	call   c0013f44 <ip_output>
c00131b2:	83 c4 20             	add    esp,0x20
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00131bc:	e8 33 53 ff ff       	call   c00084f4 <pbuf_free>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	eb 06                	jmp    c00131cc <icmp_send_response+0x134>
c00131c6:	66 90                	xchg   ax,ax
c00131c8:	90                   	nop
c00131c9:	8d 76 00             	lea    esi,[esi+0x0]
c00131cc:	83 c4 2c             	add    esp,0x2c
c00131cf:	c3                   	ret    

c00131d0 <icmp_dest_unreach>:
c00131d0:	83 ec 0c             	sub    esp,0xc
c00131d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131d7:	0f b6 c0             	movzx  eax,al
c00131da:	83 ec 04             	sub    esp,0x4
c00131dd:	50                   	push   eax
c00131de:	6a 03                	push   0x3
c00131e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e4:	e8 af fe ff ff       	call   c0013098 <icmp_send_response>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	90                   	nop
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	c3                   	ret    
c00131f1:	8d 76 00             	lea    esi,[esi+0x0]

c00131f4 <icmp_time_exceeded>:
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131fb:	0f b6 c0             	movzx  eax,al
c00131fe:	83 ec 04             	sub    esp,0x4
c0013201:	50                   	push   eax
c0013202:	6a 0b                	push   0xb
c0013204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013208:	e8 8b fe ff ff       	call   c0013098 <icmp_send_response>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	90                   	nop
c0013211:	83 c4 0c             	add    esp,0xc
c0013214:	c3                   	ret    
c0013215:	66 90                	xchg   ax,ax
c0013217:	90                   	nop

c0013218 <lwip_standard_chksum>:
c0013218:	83 ec 2c             	sub    esp,0x2c
c001321b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001321f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013223:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c001322a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013236:	83 e0 01             	and    eax,0x1
c0013239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001323d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013242:	74 24                	je     c0013268 <lwip_standard_chksum+0x50>
c0013244:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013249:	7e 1d                	jle    c0013268 <lwip_standard_chksum+0x50>
c001324b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001324f:	8d 42 01             	lea    eax,[edx+0x1]
c0013252:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013256:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001325a:	83 c0 01             	add    eax,0x1
c001325d:	8a 12                	mov    dl,BYTE PTR [edx]
c001325f:	88 10                	mov    BYTE PTR [eax],dl
c0013261:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013266:	66 90                	xchg   ax,ax
c0013268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013270:	eb 1e                	jmp    c0013290 <lwip_standard_chksum+0x78>
c0013272:	66 90                	xchg   ax,ax
c0013274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013278:	8d 50 02             	lea    edx,[eax+0x2]
c001327b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001327f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013282:	0f b7 c0             	movzx  eax,ax
c0013285:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013289:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001328e:	66 90                	xchg   ax,ax
c0013290:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013295:	7f dd                	jg     c0013274 <lwip_standard_chksum+0x5c>
c0013297:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001329c:	7e 0e                	jle    c00132ac <lwip_standard_chksum+0x94>
c001329e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00132a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132a6:	8a 12                	mov    dl,BYTE PTR [edx]
c00132a8:	88 10                	mov    BYTE PTR [eax],dl
c00132aa:	66 90                	xchg   ax,ax
c00132ac:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00132b1:	0f b7 c0             	movzx  eax,ax
c00132b4:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00132b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132bc:	c1 e8 10             	shr    eax,0x10
c00132bf:	89 c2                	mov    edx,eax
c00132c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132c5:	0f b7 c0             	movzx  eax,ax
c00132c8:	01 d0                	add    eax,edx
c00132ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132d2:	c1 e8 10             	shr    eax,0x10
c00132d5:	89 c2                	mov    edx,eax
c00132d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132db:	0f b7 c0             	movzx  eax,ax
c00132de:	01 d0                	add    eax,edx
c00132e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00132e9:	74 1d                	je     c0013308 <lwip_standard_chksum+0xf0>
c00132eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132ef:	0f b7 c0             	movzx  eax,ax
c00132f2:	83 ec 0c             	sub    esp,0xc
c00132f5:	50                   	push   eax
c00132f6:	e8 ed d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	0f b7 c0             	movzx  eax,ax
c0013301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013305:	8d 76 00             	lea    esi,[esi+0x0]
c0013308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001330c:	83 c4 2c             	add    esp,0x2c
c001330f:	c3                   	ret    

c0013310 <inet_chksum_pseudo>:
c0013310:	83 ec 2c             	sub    esp,0x2c
c0013313:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013317:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001331b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001331f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013324:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001332c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013339:	e9 8a 00 00 00       	jmp    c00133c8 <inet_chksum_pseudo+0xb8>
c001333e:	66 90                	xchg   ax,ax
c0013340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013344:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013348:	0f b7 d0             	movzx  edx,ax
c001334b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001334f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013352:	83 ec 08             	sub    esp,0x8
c0013355:	52                   	push   edx
c0013356:	50                   	push   eax
c0013357:	e8 bc fe ff ff       	call   c0013218 <lwip_standard_chksum>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	0f b7 c0             	movzx  eax,ax
c0013362:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001336a:	c1 e8 10             	shr    eax,0x10
c001336d:	89 c2                	mov    edx,eax
c001336f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013373:	0f b7 c0             	movzx  eax,ax
c0013376:	01 d0                	add    eax,edx
c0013378:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001337c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013380:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013384:	83 e0 01             	and    eax,0x1
c0013387:	0f b7 c0             	movzx  eax,ax
c001338a:	85 c0                	test   eax,eax
c001338c:	74 2e                	je     c00133bc <inet_chksum_pseudo+0xac>
c001338e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013392:	ba 01 00 00 00       	mov    edx,0x1
c0013397:	29 c2                	sub    edx,eax
c0013399:	89 d0                	mov    eax,edx
c001339b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001339f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a3:	0f b7 c0             	movzx  eax,ax
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	50                   	push   eax
c00133aa:	e8 39 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	0f b7 c0             	movzx  eax,ax
c00133b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b9:	8d 76 00             	lea    esi,[esi+0x0]
c00133bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00133c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133c6:	66 90                	xchg   ax,ax
c00133c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00133cd:	0f 85 6d ff ff ff    	jne    c0013340 <inet_chksum_pseudo+0x30>
c00133d3:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00133d8:	85 c0                	test   eax,eax
c00133da:	74 1c                	je     c00133f8 <inet_chksum_pseudo+0xe8>
c00133dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133e0:	0f b7 c0             	movzx  eax,ax
c00133e3:	83 ec 0c             	sub    esp,0xc
c00133e6:	50                   	push   eax
c00133e7:	e8 fc d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	0f b7 c0             	movzx  eax,ax
c00133f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133f6:	66 90                	xchg   ax,ax
c00133f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00133fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	0f b7 c0             	movzx  eax,ax
c0013409:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013411:	c1 e8 10             	shr    eax,0x10
c0013414:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013418:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001341c:	8b 00                	mov    eax,DWORD PTR [eax]
c001341e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	0f b7 c0             	movzx  eax,ax
c0013429:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001342d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013431:	c1 e8 10             	shr    eax,0x10
c0013434:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013438:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001343d:	83 ec 0c             	sub    esp,0xc
c0013440:	50                   	push   eax
c0013441:	e8 a2 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	0f b7 c0             	movzx  eax,ax
c001344c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013450:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013455:	83 ec 0c             	sub    esp,0xc
c0013458:	50                   	push   eax
c0013459:	e8 8a d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	0f b7 c0             	movzx  eax,ax
c0013464:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001346c:	c1 e8 10             	shr    eax,0x10
c001346f:	89 c2                	mov    edx,eax
c0013471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013475:	0f b7 c0             	movzx  eax,ax
c0013478:	01 d0                	add    eax,edx
c001347a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001347e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013482:	c1 e8 10             	shr    eax,0x10
c0013485:	89 c2                	mov    edx,eax
c0013487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001348b:	0f b7 c0             	movzx  eax,ax
c001348e:	01 d0                	add    eax,edx
c0013490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013498:	f7 d0                	not    eax
c001349a:	83 c4 2c             	add    esp,0x2c
c001349d:	c3                   	ret    
c001349e:	66 90                	xchg   ax,ax

c00134a0 <inet_chksum_pseudo_partial>:
c00134a0:	83 ec 2c             	sub    esp,0x2c
c00134a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00134a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00134ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00134af:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00134b3:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c00134b8:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00134bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00134c5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00134ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134d2:	e9 d9 00 00 00       	jmp    c00135b0 <inet_chksum_pseudo_partial+0x110>
c00134d7:	90                   	nop
c00134d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134e0:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134e5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00134ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00134ef:	39 c2                	cmp    edx,eax
c00134f1:	76 09                	jbe    c00134fc <inet_chksum_pseudo_partial+0x5c>
c00134f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134fc:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013501:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013505:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	52                   	push   edx
c001350c:	50                   	push   eax
c001350d:	e8 06 fd ff ff       	call   c0013218 <lwip_standard_chksum>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	0f b7 c0             	movzx  eax,ax
c0013518:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001351c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013524:	89 d1                	mov    ecx,edx
c0013526:	29 c1                	sub    ecx,eax
c0013528:	89 c8                	mov    eax,ecx
c001352a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001352f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013534:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c0013539:	76 15                	jbe    c0013550 <inet_chksum_pseudo_partial+0xb0>
c001353b:	83 ec 08             	sub    esp,0x8
c001353e:	68 e0 0f 03 c0       	push   0xc0030fe0
c0013543:	68 46 fd 02 c0       	push   0xc002fd46
c0013548:	e8 7f c8 00 00       	call   c001fdcc <CPrintf>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013554:	c1 e8 10             	shr    eax,0x10
c0013557:	89 c2                	mov    edx,eax
c0013559:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001355d:	0f b7 c0             	movzx  eax,ax
c0013560:	01 d0                	add    eax,edx
c0013562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013566:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001356a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001356e:	83 e0 01             	and    eax,0x1
c0013571:	0f b7 c0             	movzx  eax,ax
c0013574:	85 c0                	test   eax,eax
c0013576:	74 2c                	je     c00135a4 <inet_chksum_pseudo_partial+0x104>
c0013578:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001357c:	ba 01 00 00 00       	mov    edx,0x1
c0013581:	29 c2                	sub    edx,eax
c0013583:	89 d0                	mov    eax,edx
c0013585:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001358d:	0f b7 c0             	movzx  eax,ax
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	50                   	push   eax
c0013594:	e8 4f d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	0f b7 c0             	movzx  eax,ax
c001359f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135a3:	90                   	nop
c00135a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00135aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00135ae:	66 90                	xchg   ax,ax
c00135b0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00135b5:	74 0d                	je     c00135c4 <inet_chksum_pseudo_partial+0x124>
c00135b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135bc:	85 c0                	test   eax,eax
c00135be:	0f 85 14 ff ff ff    	jne    c00134d8 <inet_chksum_pseudo_partial+0x38>
c00135c4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00135c9:	85 c0                	test   eax,eax
c00135cb:	74 1b                	je     c00135e8 <inet_chksum_pseudo_partial+0x148>
c00135cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135d1:	0f b7 c0             	movzx  eax,ax
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	50                   	push   eax
c00135d8:	e8 0b d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	0f b7 c0             	movzx  eax,ax
c00135e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135e7:	90                   	nop
c00135e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	0f b7 c0             	movzx  eax,ax
c00135f9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00135fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013601:	c1 e8 10             	shr    eax,0x10
c0013604:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013608:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001360c:	8b 00                	mov    eax,DWORD PTR [eax]
c001360e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013616:	0f b7 c0             	movzx  eax,ax
c0013619:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001361d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013621:	c1 e8 10             	shr    eax,0x10
c0013624:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013628:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	50                   	push   eax
c0013631:	e8 b2 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	0f b7 c0             	movzx  eax,ax
c001363c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013640:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013645:	83 ec 0c             	sub    esp,0xc
c0013648:	50                   	push   eax
c0013649:	e8 9a d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001364e:	83 c4 10             	add    esp,0x10
c0013651:	0f b7 c0             	movzx  eax,ax
c0013654:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001365c:	c1 e8 10             	shr    eax,0x10
c001365f:	89 c2                	mov    edx,eax
c0013661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013665:	0f b7 c0             	movzx  eax,ax
c0013668:	01 d0                	add    eax,edx
c001366a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001366e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013672:	c1 e8 10             	shr    eax,0x10
c0013675:	89 c2                	mov    edx,eax
c0013677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001367b:	0f b7 c0             	movzx  eax,ax
c001367e:	01 d0                	add    eax,edx
c0013680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013688:	f7 d0                	not    eax
c001368a:	83 c4 2c             	add    esp,0x2c
c001368d:	c3                   	ret    
c001368e:	66 90                	xchg   ax,ax

c0013690 <inet_chksum>:
c0013690:	83 ec 1c             	sub    esp,0x1c
c0013693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013697:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001369c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00136a1:	83 ec 08             	sub    esp,0x8
c00136a4:	50                   	push   eax
c00136a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136a9:	e8 6a fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	f7 d0                	not    eax
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	c3                   	ret    
c00136b7:	90                   	nop

c00136b8 <inet_chksum_pbuf>:
c00136b8:	83 ec 1c             	sub    esp,0x1c
c00136bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00136c3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00136c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136d0:	e9 8b 00 00 00       	jmp    c0013760 <inet_chksum_pbuf+0xa8>
c00136d5:	8d 76 00             	lea    esi,[esi+0x0]
c00136d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00136e0:	0f b7 d0             	movzx  edx,ax
c00136e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136ea:	83 ec 08             	sub    esp,0x8
c00136ed:	52                   	push   edx
c00136ee:	50                   	push   eax
c00136ef:	e8 24 fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	0f b7 c0             	movzx  eax,ax
c00136fa:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00136fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013702:	c1 e8 10             	shr    eax,0x10
c0013705:	89 c2                	mov    edx,eax
c0013707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001370b:	0f b7 c0             	movzx  eax,ax
c001370e:	01 d0                	add    eax,edx
c0013710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013718:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001371c:	83 e0 01             	and    eax,0x1
c001371f:	0f b7 c0             	movzx  eax,ax
c0013722:	85 c0                	test   eax,eax
c0013724:	74 2e                	je     c0013754 <inet_chksum_pbuf+0x9c>
c0013726:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001372a:	ba 01 00 00 00       	mov    edx,0x1
c001372f:	29 c2                	sub    edx,eax
c0013731:	89 d0                	mov    eax,edx
c0013733:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001373b:	0f b7 c0             	movzx  eax,ax
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	50                   	push   eax
c0013742:	e8 a1 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013747:	83 c4 10             	add    esp,0x10
c001374a:	0f b7 c0             	movzx  eax,ax
c001374d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013751:	8d 76 00             	lea    esi,[esi+0x0]
c0013754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013758:	8b 00                	mov    eax,DWORD PTR [eax]
c001375a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001375e:	66 90                	xchg   ax,ax
c0013760:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013765:	0f 85 6d ff ff ff    	jne    c00136d8 <inet_chksum_pbuf+0x20>
c001376b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013770:	85 c0                	test   eax,eax
c0013772:	74 1c                	je     c0013790 <inet_chksum_pbuf+0xd8>
c0013774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013778:	0f b7 c0             	movzx  eax,ax
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	50                   	push   eax
c001377f:	e8 64 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	0f b7 c0             	movzx  eax,ax
c001378a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001378e:	66 90                	xchg   ax,ax
c0013790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013794:	f7 d0                	not    eax
c0013796:	83 c4 1c             	add    esp,0x1c
c0013799:	c3                   	ret    
c001379a:	66 90                	xchg   ax,ax

c001379c <ip_route>:
c001379c:	83 ec 10             	sub    esp,0x10
c001379f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00137a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137a8:	eb 42                	jmp    c00137ec <ip_route+0x50>
c00137aa:	66 90                	xchg   ax,ax
c00137ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137b0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00137b3:	83 e0 01             	and    eax,0x1
c00137b6:	0f b6 c0             	movzx  eax,al
c00137b9:	85 c0                	test   eax,eax
c00137bb:	74 23                	je     c00137e0 <ip_route+0x44>
c00137bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00137c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137ca:	31 c2                	xor    edx,eax
c00137cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137d3:	21 d0                	and    eax,edx
c00137d5:	75 09                	jne    c00137e0 <ip_route+0x44>
c00137d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137db:	eb 4f                	jmp    c001382c <ip_route+0x90>
c00137dd:	8d 76 00             	lea    esi,[esi+0x0]
c00137e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ea:	66 90                	xchg   ax,ax
c00137ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00137f1:	75 b9                	jne    c00137ac <ip_route+0x10>
c00137f3:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00137f8:	85 c0                	test   eax,eax
c00137fa:	74 10                	je     c001380c <ip_route+0x70>
c00137fc:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013801:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013804:	0f b6 c0             	movzx  eax,al
c0013807:	83 e0 01             	and    eax,0x1
c001380a:	75 18                	jne    c0013824 <ip_route+0x88>
c001380c:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013812:	83 c0 01             	add    eax,0x1
c0013815:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001381b:	b8 00 00 00 00       	mov    eax,0x0
c0013820:	eb 0a                	jmp    c001382c <ip_route+0x90>
c0013822:	66 90                	xchg   ax,ax
c0013824:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013829:	8d 76 00             	lea    esi,[esi+0x0]
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	c3                   	ret    

c0013830 <ip_input>:
c0013830:	83 ec 1c             	sub    esp,0x1c
c0013833:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c0013839:	83 c0 01             	add    eax,0x1
c001383c:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c0013842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013851:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013854:	0f b7 c0             	movzx  eax,ax
c0013857:	83 ec 0c             	sub    esp,0xc
c001385a:	50                   	push   eax
c001385b:	e8 88 d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	0f b7 c0             	movzx  eax,ax
c0013866:	c1 e8 0c             	shr    eax,0xc
c0013869:	0f b7 c0             	movzx  eax,ax
c001386c:	83 f8 04             	cmp    eax,0x4
c001386f:	74 37                	je     c00138a8 <ip_input+0x78>
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013878:	e8 77 4c ff ff       	call   c00084f4 <pbuf_free>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013886:	83 c0 01             	add    eax,0x1
c0013889:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c001388f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013895:	83 c0 01             	add    eax,0x1
c0013898:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001389e:	b0 00                	mov    al,0x0
c00138a0:	e9 cb 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c00138a5:	8d 76 00             	lea    esi,[esi+0x0]
c00138a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00138af:	0f b7 c0             	movzx  eax,ax
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	50                   	push   eax
c00138b6:	e8 2d d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138bb:	83 c4 10             	add    esp,0x10
c00138be:	0f b7 c0             	movzx  eax,ax
c00138c1:	c1 e8 08             	shr    eax,0x8
c00138c4:	83 e0 0f             	and    eax,0xf
c00138c7:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138cc:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c00138d1:	c1 e0 02             	shl    eax,0x2
c00138d4:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138dd:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00138e1:	0f b7 c0             	movzx  eax,ax
c00138e4:	83 ec 0c             	sub    esp,0xc
c00138e7:	50                   	push   eax
c00138e8:	e8 fb d2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138ed:	83 c4 10             	add    esp,0x10
c00138f0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00138f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138f8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00138fc:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013901:	0f b7 c0             	movzx  eax,ax
c0013904:	39 c2                	cmp    edx,eax
c0013906:	77 14                	ja     c001391c <ip_input+0xec>
c0013908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001390c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001390f:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013913:	0f b7 c0             	movzx  eax,ax
c0013916:	39 c2                	cmp    edx,eax
c0013918:	76 36                	jbe    c0013950 <ip_input+0x120>
c001391a:	66 90                	xchg   ax,ax
c001391c:	83 ec 0c             	sub    esp,0xc
c001391f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013923:	e8 cc 4b ff ff       	call   c00084f4 <pbuf_free>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013931:	83 c0 01             	add    eax,0x1
c0013934:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c001393a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013940:	83 c0 01             	add    eax,0x1
c0013943:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013949:	b0 00                	mov    al,0x0
c001394b:	e9 20 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013950:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013955:	83 ec 08             	sub    esp,0x8
c0013958:	50                   	push   eax
c0013959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001395d:	e8 2e fd ff ff       	call   c0013690 <inet_chksum>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	0f b7 c0             	movzx  eax,ax
c0013968:	85 c0                	test   eax,eax
c001396a:	74 34                	je     c00139a0 <ip_input+0x170>
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013973:	e8 7c 4b ff ff       	call   c00084f4 <pbuf_free>
c0013978:	83 c4 10             	add    esp,0x10
c001397b:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c0013981:	83 c0 01             	add    eax,0x1
c0013984:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c001398a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013990:	83 c0 01             	add    eax,0x1
c0013993:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013999:	b0 00                	mov    al,0x0
c001399b:	e9 d0 02 00 00       	jmp    c0013c70 <ip_input+0x440>
c00139a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00139a4:	83 ec 08             	sub    esp,0x8
c00139a7:	50                   	push   eax
c00139a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ac:	e8 13 51 ff ff       	call   c0008ac4 <pbuf_realloc>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139bb:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c00139c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139c7:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c00139cc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00139d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00139d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139e0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00139e3:	83 e0 01             	and    eax,0x1
c00139e6:	0f b6 c0             	movzx  eax,al
c00139e9:	85 c0                	test   eax,eax
c00139eb:	74 43                	je     c0013a30 <ip_input+0x200>
c00139ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139f1:	83 c0 04             	add    eax,0x4
c00139f4:	74 3a                	je     c0013a30 <ip_input+0x200>
c00139f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139fd:	85 c0                	test   eax,eax
c00139ff:	74 2f                	je     c0013a30 <ip_input+0x200>
c0013a01:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0013a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a0e:	39 c2                	cmp    edx,eax
c0013a10:	74 66                	je     c0013a78 <ip_input+0x248>
c0013a12:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a17:	83 ec 08             	sub    esp,0x8
c0013a1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a1e:	50                   	push   eax
c0013a1f:	e8 c4 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	0f b6 c0             	movzx  eax,al
c0013a2a:	85 c0                	test   eax,eax
c0013a2c:	75 4a                	jne    c0013a78 <ip_input+0x248>
c0013a2e:	66 90                	xchg   ax,ax
c0013a30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013a35:	74 15                	je     c0013a4c <ip_input+0x21c>
c0013a37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013a3f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013a44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a48:	eb 0e                	jmp    c0013a58 <ip_input+0x228>
c0013a4a:	66 90                	xchg   ax,ax
c0013a4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a56:	66 90                	xchg   ax,ax
c0013a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a5c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013a60:	75 0a                	jne    c0013a6c <ip_input+0x23c>
c0013a62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a71:	0f 85 65 ff ff ff    	jne    c00139dc <ip_input+0x1ac>
c0013a77:	90                   	nop
c0013a78:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013a7d:	83 ec 08             	sub    esp,0x8
c0013a80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a84:	50                   	push   eax
c0013a85:	e8 5e 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	0f b6 c0             	movzx  eax,al
c0013a90:	85 c0                	test   eax,eax
c0013a92:	75 14                	jne    c0013aa8 <ip_input+0x278>
c0013a94:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013a99:	25 f0 00 00 00       	and    eax,0xf0
c0013a9e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013aa3:	75 2b                	jne    c0013ad0 <ip_input+0x2a0>
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aaf:	e8 40 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ab4:	83 c4 10             	add    esp,0x10
c0013ab7:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013abd:	83 c0 01             	add    eax,0x1
c0013ac0:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013ac6:	b0 00                	mov    al,0x0
c0013ac8:	e9 a3 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013ad5:	75 19                	jne    c0013af0 <ip_input+0x2c0>
c0013ad7:	83 ec 0c             	sub    esp,0xc
c0013ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ade:	e8 11 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	b0 00                	mov    al,0x0
c0013ae8:	e9 83 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013aed:	8d 76 00             	lea    esi,[esi+0x0]
c0013af0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013af4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013af8:	0f b7 c0             	movzx  eax,ax
c0013afb:	25 3f ff 00 00       	and    eax,0xff3f
c0013b00:	74 2e                	je     c0013b30 <ip_input+0x300>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b09:	e8 7a 13 00 00       	call   c0014e88 <ip_reass>
c0013b0e:	83 c4 10             	add    esp,0x10
c0013b11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013b15:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013b1a:	75 08                	jne    c0013b24 <ip_input+0x2f4>
c0013b1c:	b0 00                	mov    al,0x0
c0013b1e:	e9 4d 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013b23:	90                   	nop
c0013b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b2f:	90                   	nop
c0013b30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b34:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b3d:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c0013b42:	83 ec 08             	sub    esp,0x8
c0013b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b4d:	e8 c6 5c ff ff       	call   c0009818 <raw_input>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	0f b6 c0             	movzx  eax,al
c0013b58:	85 c0                	test   eax,eax
c0013b5a:	0f 85 e0 00 00 00    	jne    c0013c40 <ip_input+0x410>
c0013b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b64:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013b67:	0f b6 c0             	movzx  eax,al
c0013b6a:	83 f8 06             	cmp    eax,0x6
c0013b6d:	74 25                	je     c0013b94 <ip_input+0x364>
c0013b6f:	83 f8 11             	cmp    eax,0x11
c0013b72:	74 08                	je     c0013b7c <ip_input+0x34c>
c0013b74:	83 f8 01             	cmp    eax,0x1
c0013b77:	74 33                	je     c0013bac <ip_input+0x37c>
c0013b79:	eb 49                	jmp    c0013bc4 <ip_input+0x394>
c0013b7b:	90                   	nop
c0013b7c:	83 ec 08             	sub    esp,0x8
c0013b7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b87:	e8 c0 d3 ff ff       	call   c0010f4c <udp_input>
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	e9 b0 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013b94:	83 ec 08             	sub    esp,0x8
c0013b97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9f:	e8 00 a5 ff ff       	call   c000e0a4 <tcp_input>
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	e9 98 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb7:	e8 7c f0 ff ff       	call   c0012c38 <icmp_input>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	e9 80 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bc4:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013bc9:	83 ec 08             	sub    esp,0x8
c0013bcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bd0:	50                   	push   eax
c0013bd1:	e8 12 04 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	0f b6 c0             	movzx  eax,al
c0013bdc:	85 c0                	test   eax,eax
c0013bde:	75 30                	jne    c0013c10 <ip_input+0x3e0>
c0013be0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013be5:	25 f0 00 00 00       	and    eax,0xf0
c0013bea:	3d e0 00 00 00       	cmp    eax,0xe0
c0013bef:	74 1f                	je     c0013c10 <ip_input+0x3e0>
c0013bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bf9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013bfc:	83 ec 08             	sub    esp,0x8
c0013bff:	6a 02                	push   0x2
c0013c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c05:	e8 c6 f5 ff ff       	call   c00131d0 <icmp_dest_unreach>
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c17:	e8 d8 48 ff ff       	call   c00084f4 <pbuf_free>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013c25:	83 c0 01             	add    eax,0x1
c0013c28:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013c2e:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013c34:	83 c0 01             	add    eax,0x1
c0013c37:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013c3d:	eb 05                	jmp    c0013c44 <ip_input+0x414>
c0013c3f:	90                   	nop
c0013c40:	90                   	nop
c0013c41:	8d 76 00             	lea    esi,[esi+0x0]
c0013c44:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013c4e:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013c58:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013c62:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013c6c:	b0 00                	mov    al,0x0
c0013c6e:	66 90                	xchg   ax,ax
c0013c70:	83 c4 1c             	add    esp,0x1c
c0013c73:	c3                   	ret    

c0013c74 <ip_output_if>:
c0013c74:	83 ec 2c             	sub    esp,0x2c
c0013c77:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013c7b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013c7f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013c83:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c87:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013c8b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013c8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c9b:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013c9f:	0f b7 c0             	movzx  eax,ax
c0013ca2:	83 f8 01             	cmp    eax,0x1
c0013ca5:	74 15                	je     c0013cbc <ip_output_if+0x48>
c0013ca7:	83 ec 08             	sub    esp,0x8
c0013caa:	68 ea 0f 03 c0       	push   0xc0030fea
c0013caf:	68 46 fd 02 c0       	push   0xc002fd46
c0013cb4:	e8 13 c1 00 00       	call   c001fdcc <CPrintf>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013cc1:	0f 84 ed 01 00 00    	je     c0013eb4 <ip_output_if+0x240>
c0013cc7:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013cce:	83 ec 08             	sub    esp,0x8
c0013cd1:	6a 14                	push   0x14
c0013cd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cd7:	e8 7c 46 ff ff       	call   c0008358 <pbuf_header>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	0f b6 c0             	movzx  eax,al
c0013ce2:	85 c0                	test   eax,eax
c0013ce4:	74 16                	je     c0013cfc <ip_output_if+0x88>
c0013ce6:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013cec:	83 c0 01             	add    eax,0x1
c0013cef:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013cf5:	b0 fe                	mov    al,0xfe
c0013cf7:	e9 44 02 00 00       	jmp    c0013f40 <ip_output_if+0x2cc>
c0013cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d0b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013d0f:	0f b7 c0             	movzx  eax,ax
c0013d12:	83 f8 13             	cmp    eax,0x13
c0013d15:	77 15                	ja     c0013d2c <ip_output_if+0xb8>
c0013d17:	83 ec 08             	sub    esp,0x8
c0013d1a:	68 f8 0f 03 c0       	push   0xc0030ff8
c0013d1f:	68 46 fd 02 c0       	push   0xc002fd46
c0013d24:	e8 a3 c0 00 00       	call   c001fdcc <CPrintf>
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d30:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d34:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013d37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013d3f:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013d42:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013d47:	c1 e0 08             	shl    eax,0x8
c0013d4a:	89 c2                	mov    edx,eax
c0013d4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013d51:	09 d0                	or     eax,edx
c0013d53:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013d5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d6b:	0f b7 c0             	movzx  eax,ax
c0013d6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d79:	c1 e8 10             	shr    eax,0x10
c0013d7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d80:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013d85:	c1 e8 02             	shr    eax,0x2
c0013d88:	0f b7 c0             	movzx  eax,ax
c0013d8b:	c1 e0 08             	shl    eax,0x8
c0013d8e:	80 cc 40             	or     ah,0x40
c0013d91:	89 c2                	mov    edx,eax
c0013d93:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013d98:	09 d0                	or     eax,edx
c0013d9a:	0f b7 c0             	movzx  eax,ax
c0013d9d:	83 ec 0c             	sub    esp,0xc
c0013da0:	50                   	push   eax
c0013da1:	e8 42 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dad:	66 89 02             	mov    WORD PTR [edx],ax
c0013db0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013db7:	0f b7 c0             	movzx  eax,ax
c0013dba:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dc5:	0f b7 c0             	movzx  eax,ax
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	50                   	push   eax
c0013dcc:	e8 17 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dd8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013ddc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013de0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013de4:	0f b7 c0             	movzx  eax,ax
c0013de7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013def:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013df5:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013dfb:	0f b7 c0             	movzx  eax,ax
c0013dfe:	83 ec 0c             	sub    esp,0xc
c0013e01:	50                   	push   eax
c0013e02:	e8 e1 cd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013e07:	83 c4 10             	add    esp,0x10
c0013e0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e0e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e16:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013e1a:	0f b7 c0             	movzx  eax,ax
c0013e1d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e21:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013e27:	83 c0 01             	add    eax,0x1
c0013e2a:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013e30:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013e35:	74 0d                	je     c0013e44 <ip_output_if+0x1d0>
c0013e37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e3d:	85 c0                	test   eax,eax
c0013e3f:	75 13                	jne    c0013e54 <ip_output_if+0x1e0>
c0013e41:	8d 76 00             	lea    esi,[esi+0x0]
c0013e44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e52:	eb 10                	jmp    c0013e64 <ip_output_if+0x1f0>
c0013e54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e61:	8d 76 00             	lea    esi,[esi+0x0]
c0013e64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e6b:	0f b7 c0             	movzx  eax,ax
c0013e6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e79:	c1 e8 10             	shr    eax,0x10
c0013e7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e84:	c1 e8 10             	shr    eax,0x10
c0013e87:	89 c2                	mov    edx,eax
c0013e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e8d:	0f b7 c0             	movzx  eax,ax
c0013e90:	01 d0                	add    eax,edx
c0013e92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e9a:	c1 e8 10             	shr    eax,0x10
c0013e9d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ea1:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013ea5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ead:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013eb1:	eb 21                	jmp    c0013ed4 <ip_output_if+0x260>
c0013eb3:	90                   	nop
c0013eb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ebf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ec3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013eca:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013eda:	83 c0 01             	add    eax,0x1
c0013edd:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013ee3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ee7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eea:	0f b7 c0             	movzx  eax,ax
c0013eed:	85 c0                	test   eax,eax
c0013eef:	74 33                	je     c0013f24 <ip_output_if+0x2b0>
c0013ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013ef8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013efc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eff:	0f b7 d2             	movzx  edx,dx
c0013f02:	0f b7 c0             	movzx  eax,ax
c0013f05:	39 c2                	cmp    edx,eax
c0013f07:	76 1b                	jbe    c0013f24 <ip_output_if+0x2b0>
c0013f09:	83 ec 04             	sub    esp,0x4
c0013f0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f10:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013f14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f18:	e8 2b 14 00 00       	call   c0015348 <ip_frag>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	eb 1e                	jmp    c0013f40 <ip_output_if+0x2cc>
c0013f22:	66 90                	xchg   ax,ax
c0013f24:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013f28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013f2b:	83 ec 04             	sub    esp,0x4
c0013f2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f32:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013f36:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013f3a:	ff d0                	call   eax
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	90                   	nop
c0013f40:	83 c4 2c             	add    esp,0x2c
c0013f43:	c3                   	ret    

c0013f44 <ip_output>:
c0013f44:	83 ec 2c             	sub    esp,0x2c
c0013f47:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013f4b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013f4f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013f53:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013f57:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f63:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013f67:	0f b7 c0             	movzx  eax,ax
c0013f6a:	83 f8 01             	cmp    eax,0x1
c0013f6d:	74 15                	je     c0013f84 <ip_output+0x40>
c0013f6f:	83 ec 08             	sub    esp,0x8
c0013f72:	68 ea 0f 03 c0       	push   0xc0030fea
c0013f77:	68 46 fd 02 c0       	push   0xc002fd46
c0013f7c:	e8 4b be 00 00       	call   c001fdcc <CPrintf>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013f8b:	e8 0c f8 ff ff       	call   c001379c <ip_route>
c0013f90:	83 c4 10             	add    esp,0x10
c0013f93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f97:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013f9c:	75 16                	jne    c0013fb4 <ip_output+0x70>
c0013f9e:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013fa4:	83 c0 01             	add    eax,0x1
c0013fa7:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013fad:	b0 fc                	mov    al,0xfc
c0013faf:	eb 33                	jmp    c0013fe4 <ip_output+0xa0>
c0013fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb4:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013fb9:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013fbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013fc3:	83 ec 04             	sub    esp,0x4
c0013fc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013fca:	51                   	push   ecx
c0013fcb:	52                   	push   edx
c0013fcc:	50                   	push   eax
c0013fcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd9:	e8 96 fc ff ff       	call   c0013c74 <ip_output_if>
c0013fde:	83 c4 20             	add    esp,0x20
c0013fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe4:	83 c4 2c             	add    esp,0x2c
c0013fe7:	c3                   	ret    

c0013fe8 <ip4_addr_isbroadcast>:
c0013fe8:	83 ec 10             	sub    esp,0x10
c0013feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013ff8:	74 0a                	je     c0014004 <ip4_addr_isbroadcast+0x1c>
c0013ffa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013fff:	75 07                	jne    c0014008 <ip4_addr_isbroadcast+0x20>
c0014001:	8d 76 00             	lea    esi,[esi+0x0]
c0014004:	b0 01                	mov    al,0x1
c0014006:	eb 64                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001400c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001400f:	0f b6 c0             	movzx  eax,al
c0014012:	83 e0 02             	and    eax,0x2
c0014015:	75 05                	jne    c001401c <ip4_addr_isbroadcast+0x34>
c0014017:	b0 00                	mov    al,0x0
c0014019:	eb 51                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001401b:	90                   	nop
c001401c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014023:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0014027:	75 07                	jne    c0014030 <ip4_addr_isbroadcast+0x48>
c0014029:	b0 00                	mov    al,0x0
c001402b:	eb 3f                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014034:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001403b:	31 c2                	xor    edx,eax
c001403d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014041:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0014044:	21 d0                	and    eax,edx
c0014046:	75 20                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014048:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001404c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001404f:	f7 d0                	not    eax
c0014051:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0014055:	89 c2                	mov    edx,eax
c0014057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001405b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001405e:	f7 d0                	not    eax
c0014060:	39 c2                	cmp    edx,eax
c0014062:	75 04                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014064:	b0 01                	mov    al,0x1
c0014066:	eb 04                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014068:	b0 00                	mov    al,0x0
c001406a:	66 90                	xchg   ax,ax
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	c3                   	ret    

c0014070 <ip4_addr_netmask_valid>:
c0014070:	83 ec 1c             	sub    esp,0x1c
c0014073:	83 ec 0c             	sub    esp,0xc
c0014076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001407a:	e8 8d cb fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014086:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c001408e:	eb 10                	jmp    c00140a0 <ip4_addr_netmask_valid+0x30>
c0014090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014094:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014098:	74 12                	je     c00140ac <ip4_addr_netmask_valid+0x3c>
c001409a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c001409e:	66 90                	xchg   ax,ax
c00140a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140a5:	75 e9                	jne    c0014090 <ip4_addr_netmask_valid+0x20>
c00140a7:	eb 1b                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	90                   	nop
c00140ad:	eb 15                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140af:	90                   	nop
c00140b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140b4:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c00140b8:	74 06                	je     c00140c0 <ip4_addr_netmask_valid+0x50>
c00140ba:	b0 00                	mov    al,0x0
c00140bc:	eb 12                	jmp    c00140d0 <ip4_addr_netmask_valid+0x60>
c00140be:	66 90                	xchg   ax,ax
c00140c0:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c00140c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140c9:	75 e5                	jne    c00140b0 <ip4_addr_netmask_valid+0x40>
c00140cb:	b0 01                	mov    al,0x1
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	83 c4 1c             	add    esp,0x1c
c00140d3:	c3                   	ret    

c00140d4 <ipaddr_aton>:
c00140d4:	83 ec 2c             	sub    esp,0x2c
c00140d7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140e3:	8a 00                	mov    al,BYTE PTR [eax]
c00140e5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140e9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ec:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140f0:	0f b6 c0             	movzx  eax,al
c00140f3:	83 f8 2f             	cmp    eax,0x2f
c00140f6:	76 0c                	jbe    c0014104 <ipaddr_aton+0x30>
c00140f8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140fc:	0f b6 c0             	movzx  eax,al
c00140ff:	83 f8 39             	cmp    eax,0x39
c0014102:	76 0c                	jbe    c0014110 <ipaddr_aton+0x3c>
c0014104:	b8 00 00 00 00       	mov    eax,0x0
c0014109:	e9 f2 02 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001410e:	66 90                	xchg   ax,ax
c0014110:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014118:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c001411d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014122:	83 f8 30             	cmp    eax,0x30
c0014125:	75 45                	jne    c001416c <ipaddr_aton+0x98>
c0014127:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001412c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014130:	8a 00                	mov    al,BYTE PTR [eax]
c0014132:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014136:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001413b:	83 f8 78             	cmp    eax,0x78
c001413e:	74 0c                	je     c001414c <ipaddr_aton+0x78>
c0014140:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014145:	83 f8 58             	cmp    eax,0x58
c0014148:	75 1a                	jne    c0014164 <ipaddr_aton+0x90>
c001414a:	66 90                	xchg   ax,ax
c001414c:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014151:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001415a:	8a 00                	mov    al,BYTE PTR [eax]
c001415c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014160:	eb 0a                	jmp    c001416c <ipaddr_aton+0x98>
c0014162:	66 90                	xchg   ax,ax
c0014164:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0014169:	8d 76 00             	lea    esi,[esi+0x0]
c001416c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014170:	0f b6 c0             	movzx  eax,al
c0014173:	83 f8 2f             	cmp    eax,0x2f
c0014176:	76 3c                	jbe    c00141b4 <ipaddr_aton+0xe0>
c0014178:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001417c:	0f b6 c0             	movzx  eax,al
c001417f:	83 f8 39             	cmp    eax,0x39
c0014182:	77 30                	ja     c00141b4 <ipaddr_aton+0xe0>
c0014184:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014189:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001418e:	89 c2                	mov    edx,eax
c0014190:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014195:	01 d0                	add    eax,edx
c0014197:	83 e8 30             	sub    eax,0x30
c001419a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001419e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141a7:	8a 00                	mov    al,BYTE PTR [eax]
c00141a9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141ad:	e9 ae 00 00 00       	jmp    c0014260 <ipaddr_aton+0x18c>
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00141b9:	83 f8 10             	cmp    eax,0x10
c00141bc:	0f 85 a6 00 00 00    	jne    c0014268 <ipaddr_aton+0x194>
c00141c2:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141c6:	0f b6 c0             	movzx  eax,al
c00141c9:	83 f8 2f             	cmp    eax,0x2f
c00141cc:	76 0e                	jbe    c00141dc <ipaddr_aton+0x108>
c00141ce:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141d2:	0f b6 c0             	movzx  eax,al
c00141d5:	83 f8 39             	cmp    eax,0x39
c00141d8:	76 32                	jbe    c001420c <ipaddr_aton+0x138>
c00141da:	66 90                	xchg   ax,ax
c00141dc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141e0:	0f b6 c0             	movzx  eax,al
c00141e3:	83 f8 60             	cmp    eax,0x60
c00141e6:	76 0c                	jbe    c00141f4 <ipaddr_aton+0x120>
c00141e8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141ec:	0f b6 c0             	movzx  eax,al
c00141ef:	83 f8 66             	cmp    eax,0x66
c00141f2:	76 18                	jbe    c001420c <ipaddr_aton+0x138>
c00141f4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141f8:	0f b6 c0             	movzx  eax,al
c00141fb:	83 f8 40             	cmp    eax,0x40
c00141fe:	76 68                	jbe    c0014268 <ipaddr_aton+0x194>
c0014200:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014204:	0f b6 c0             	movzx  eax,al
c0014207:	83 f8 46             	cmp    eax,0x46
c001420a:	77 5c                	ja     c0014268 <ipaddr_aton+0x194>
c001420c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014210:	c1 e0 04             	shl    eax,0x4
c0014213:	89 c2                	mov    edx,eax
c0014215:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001421a:	8d 48 0a             	lea    ecx,[eax+0xa]
c001421d:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014221:	0f b6 c0             	movzx  eax,al
c0014224:	83 f8 60             	cmp    eax,0x60
c0014227:	76 13                	jbe    c001423c <ipaddr_aton+0x168>
c0014229:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001422d:	0f b6 c0             	movzx  eax,al
c0014230:	83 f8 7a             	cmp    eax,0x7a
c0014233:	77 07                	ja     c001423c <ipaddr_aton+0x168>
c0014235:	b8 61 00 00 00       	mov    eax,0x61
c001423a:	eb 08                	jmp    c0014244 <ipaddr_aton+0x170>
c001423c:	b8 41 00 00 00       	mov    eax,0x41
c0014241:	8d 76 00             	lea    esi,[esi+0x0]
c0014244:	29 c1                	sub    ecx,eax
c0014246:	89 c8                	mov    eax,ecx
c0014248:	09 d0                	or     eax,edx
c001424a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001424e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014253:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014257:	8a 00                	mov    al,BYTE PTR [eax]
c0014259:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001425d:	8d 76 00             	lea    esi,[esi+0x0]
c0014260:	e9 07 ff ff ff       	jmp    c001416c <ipaddr_aton+0x98>
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001426d:	83 f8 2e             	cmp    eax,0x2e
c0014270:	75 42                	jne    c00142b4 <ipaddr_aton+0x1e0>
c0014272:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014276:	83 c0 0c             	add    eax,0xc
c0014279:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001427d:	72 0d                	jb     c001428c <ipaddr_aton+0x1b8>
c001427f:	b8 00 00 00 00       	mov    eax,0x0
c0014284:	e9 77 01 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014289:	8d 76 00             	lea    esi,[esi+0x0]
c001428c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014290:	8d 50 04             	lea    edx,[eax+0x4]
c0014293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001429b:	89 10                	mov    DWORD PTR [eax],edx
c001429d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00142a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142a6:	8a 00                	mov    al,BYTE PTR [eax]
c00142a8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00142ac:	e9 3b fe ff ff       	jmp    c00140ec <ipaddr_aton+0x18>
c00142b1:	8d 76 00             	lea    esi,[esi+0x0]
c00142b4:	90                   	nop
c00142b5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142ba:	85 c0                	test   eax,eax
c00142bc:	74 46                	je     c0014304 <ipaddr_aton+0x230>
c00142be:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142c3:	83 f8 20             	cmp    eax,0x20
c00142c6:	74 3c                	je     c0014304 <ipaddr_aton+0x230>
c00142c8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142cd:	83 f8 0c             	cmp    eax,0xc
c00142d0:	74 32                	je     c0014304 <ipaddr_aton+0x230>
c00142d2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142d7:	83 f8 0a             	cmp    eax,0xa
c00142da:	74 28                	je     c0014304 <ipaddr_aton+0x230>
c00142dc:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142e1:	83 f8 0d             	cmp    eax,0xd
c00142e4:	74 1e                	je     c0014304 <ipaddr_aton+0x230>
c00142e6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142eb:	83 f8 09             	cmp    eax,0x9
c00142ee:	74 14                	je     c0014304 <ipaddr_aton+0x230>
c00142f0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142f5:	83 f8 0b             	cmp    eax,0xb
c00142f8:	74 0a                	je     c0014304 <ipaddr_aton+0x230>
c00142fa:	b8 00 00 00 00       	mov    eax,0x0
c00142ff:	e9 fc 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014304:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001430c:	29 c2                	sub    edx,eax
c001430e:	89 d0                	mov    eax,edx
c0014310:	c1 f8 02             	sar    eax,0x2
c0014313:	83 c0 01             	add    eax,0x1
c0014316:	83 f8 04             	cmp    eax,0x4
c0014319:	0f 87 9d 00 00 00    	ja     c00143bc <ipaddr_aton+0x2e8>
c001431f:	8b 04 85 30 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcefd0]
c0014326:	ff e0                	jmp    eax
c0014328:	b8 00 00 00 00       	mov    eax,0x0
c001432d:	e9 ce 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014332:	66 90                	xchg   ax,ax
c0014334:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001433c:	76 0a                	jbe    c0014348 <ipaddr_aton+0x274>
c001433e:	b8 00 00 00 00       	mov    eax,0x0
c0014343:	e9 b8 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001434c:	c1 e0 18             	shl    eax,0x18
c001434f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014353:	e9 80 00 00 00       	jmp    c00143d8 <ipaddr_aton+0x304>
c0014358:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014360:	76 0a                	jbe    c001436c <ipaddr_aton+0x298>
c0014362:	b8 00 00 00 00       	mov    eax,0x0
c0014367:	e9 94 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001436c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014370:	c1 e0 18             	shl    eax,0x18
c0014373:	89 c2                	mov    edx,eax
c0014375:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014379:	c1 e0 10             	shl    eax,0x10
c001437c:	09 d0                	or     eax,edx
c001437e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014382:	eb 54                	jmp    c00143d8 <ipaddr_aton+0x304>
c0014384:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001438c:	76 0a                	jbe    c0014398 <ipaddr_aton+0x2c4>
c001438e:	b8 00 00 00 00       	mov    eax,0x0
c0014393:	eb 6b                	jmp    c0014400 <ipaddr_aton+0x32c>
c0014395:	8d 76 00             	lea    esi,[esi+0x0]
c0014398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001439c:	c1 e0 18             	shl    eax,0x18
c001439f:	89 c2                	mov    edx,eax
c00143a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143a5:	c1 e0 10             	shl    eax,0x10
c00143a8:	09 c2                	or     edx,eax
c00143aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00143ae:	c1 e0 08             	shl    eax,0x8
c00143b1:	09 d0                	or     eax,edx
c00143b3:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00143b7:	eb 1f                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143b9:	8d 76 00             	lea    esi,[esi+0x0]
c00143bc:	83 ec 08             	sub    esp,0x8
c00143bf:	68 25 10 03 c0       	push   0xc0031025
c00143c4:	68 46 fd 02 c0       	push   0xc002fd46
c00143c9:	e8 fe b9 00 00       	call   c001fdcc <CPrintf>
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	eb 05                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143d3:	90                   	nop
c00143d4:	90                   	nop
c00143d5:	8d 76 00             	lea    esi,[esi+0x0]
c00143d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00143dd:	74 19                	je     c00143f8 <ipaddr_aton+0x324>
c00143df:	83 ec 0c             	sub    esp,0xc
c00143e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143e6:	e8 21 c8 fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00143eb:	83 c4 10             	add    esp,0x10
c00143ee:	89 c2                	mov    edx,eax
c00143f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143f4:	89 10                	mov    DWORD PTR [eax],edx
c00143f6:	66 90                	xchg   ax,ax
c00143f8:	b8 01 00 00 00       	mov    eax,0x1
c00143fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014400:	83 c4 2c             	add    esp,0x2c
c0014403:	c3                   	ret    

c0014404 <ipaddr_addr>:
c0014404:	83 ec 1c             	sub    esp,0x1c
c0014407:	83 ec 08             	sub    esp,0x8
c001440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001440e:	50                   	push   eax
c001440f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014413:	e8 bc fc ff ff       	call   c00140d4 <ipaddr_aton>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	85 c0                	test   eax,eax
c001441d:	74 09                	je     c0014428 <ipaddr_addr+0x24>
c001441f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014423:	eb 0b                	jmp    c0014430 <ipaddr_addr+0x2c>
c0014425:	8d 76 00             	lea    esi,[esi+0x0]
c0014428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001442d:	8d 76 00             	lea    esi,[esi+0x0]
c0014430:	83 c4 1c             	add    esp,0x1c
c0014433:	c3                   	ret    

c0014434 <ipaddr_ntoa_r>:
c0014434:	83 ec 20             	sub    esp,0x20
c0014437:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001443f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014443:	8b 00                	mov    eax,DWORD PTR [eax]
c0014445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014449:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001444d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014451:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014459:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001445e:	e9 f9 00 00 00       	jmp    c001455c <ipaddr_ntoa_r+0x128>
c0014463:	90                   	nop
c0014464:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014469:	8d 76 00             	lea    esi,[esi+0x0]
c001446c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014470:	8a 00                	mov    al,BYTE PTR [eax]
c0014472:	0f b6 c8             	movzx  ecx,al
c0014475:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001447a:	89 c8                	mov    eax,ecx
c001447c:	f7 e2                	mul    edx
c001447e:	c1 ea 03             	shr    edx,0x3
c0014481:	89 d0                	mov    eax,edx
c0014483:	c1 e0 02             	shl    eax,0x2
c0014486:	01 d0                	add    eax,edx
c0014488:	01 c0                	add    eax,eax
c001448a:	29 c1                	sub    ecx,eax
c001448c:	89 c8                	mov    eax,ecx
c001448e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014496:	8a 00                	mov    al,BYTE PTR [eax]
c0014498:	0f b6 c0             	movzx  eax,al
c001449b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00144a0:	f7 e2                	mul    edx
c00144a2:	89 d0                	mov    eax,edx
c00144a4:	c1 e8 03             	shr    eax,0x3
c00144a7:	88 c2                	mov    dl,al
c00144a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144ad:	88 10                	mov    BYTE PTR [eax],dl
c00144af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00144b3:	83 c0 30             	add    eax,0x30
c00144b6:	88 c1                	mov    cl,al
c00144b8:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00144bc:	8d 50 01             	lea    edx,[eax+0x1]
c00144bf:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00144c3:	0f b6 c0             	movzx  eax,al
c00144c6:	88 ca                	mov    dl,cl
c00144c8:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c00144cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144d0:	8a 00                	mov    al,BYTE PTR [eax]
c00144d2:	0f b6 c0             	movzx  eax,al
c00144d5:	85 c0                	test   eax,eax
c00144d7:	75 93                	jne    c001446c <ipaddr_ntoa_r+0x38>
c00144d9:	eb 35                	jmp    c0014510 <ipaddr_ntoa_r+0xdc>
c00144db:	90                   	nop
c00144dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e0:	8d 50 01             	lea    edx,[eax+0x1]
c00144e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00144e7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00144eb:	7f 0b                	jg     c00144f8 <ipaddr_ntoa_r+0xc4>
c00144ed:	b8 00 00 00 00       	mov    eax,0x0
c00144f2:	e9 85 00 00 00       	jmp    c001457c <ipaddr_ntoa_r+0x148>
c00144f7:	90                   	nop
c00144f8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00144fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014501:	8d 48 01             	lea    ecx,[eax+0x1]
c0014504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014508:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c001450c:	88 10                	mov    BYTE PTR [eax],dl
c001450e:	66 90                	xchg   ax,ax
c0014510:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014514:	8d 50 ff             	lea    edx,[eax-0x1]
c0014517:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001451b:	0f b6 c0             	movzx  eax,al
c001451e:	85 c0                	test   eax,eax
c0014520:	75 ba                	jne    c00144dc <ipaddr_ntoa_r+0xa8>
c0014522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014526:	8d 50 01             	lea    edx,[eax+0x1]
c0014529:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001452d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014531:	7f 09                	jg     c001453c <ipaddr_ntoa_r+0x108>
c0014533:	b8 00 00 00 00       	mov    eax,0x0
c0014538:	eb 42                	jmp    c001457c <ipaddr_ntoa_r+0x148>
c001453a:	66 90                	xchg   ax,ax
c001453c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014540:	8d 50 01             	lea    edx,[eax+0x1]
c0014543:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014547:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001454a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001454f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014553:	83 c0 01             	add    eax,0x1
c0014556:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001455a:	66 90                	xchg   ax,ax
c001455c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014561:	83 f8 03             	cmp    eax,0x3
c0014564:	0f 86 fa fe ff ff    	jbe    c0014464 <ipaddr_ntoa_r+0x30>
c001456a:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001456f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014573:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001457a:	66 90                	xchg   ax,ax
c001457c:	83 c4 20             	add    esp,0x20
c001457f:	c3                   	ret    

c0014580 <ipaddr_ntoa>:
c0014580:	6a 10                	push   0x10
c0014582:	68 a4 a9 03 c0       	push   0xc003a9a4
c0014587:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001458b:	e8 a4 fe ff ff       	call   c0014434 <ipaddr_ntoa_r>
c0014590:	83 c4 0c             	add    esp,0xc
c0014593:	c3                   	ret    

c0014594 <ip_reass_dequeue_datagram>:
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001459c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00145a0:	75 0e                	jne    c00145b0 <ip_reass_dequeue_datagram+0x1c>
c00145a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00145a8:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00145ad:	eb 29                	jmp    c00145d8 <ip_reass_dequeue_datagram+0x44>
c00145af:	90                   	nop
c00145b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00145b5:	75 15                	jne    c00145cc <ip_reass_dequeue_datagram+0x38>
c00145b7:	83 ec 08             	sub    esp,0x8
c00145ba:	68 4c 10 03 c0       	push   0xc003104c
c00145bf:	68 46 fd 02 c0       	push   0xc002fd46
c00145c4:	e8 03 b8 00 00       	call   c001fdcc <CPrintf>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00145d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145d6:	89 10                	mov    DWORD PTR [eax],edx
c00145d8:	83 ec 08             	sub    esp,0x8
c00145db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145df:	6a 05                	push   0x5
c00145e1:	e8 52 36 ff ff       	call   c0007c38 <memp_free>
c00145e6:	83 c4 10             	add    esp,0x10
c00145e9:	90                   	nop
c00145ea:	83 c4 0c             	add    esp,0xc
c00145ed:	c3                   	ret    
c00145ee:	66 90                	xchg   ax,ax

c00145f0 <ip_reass_free_complete_datagram>:
c00145f0:	83 ec 2c             	sub    esp,0x2c
c00145f3:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00145fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00145fe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014602:	75 18                	jne    c001461c <ip_reass_free_complete_datagram+0x2c>
c0014604:	83 ec 08             	sub    esp,0x8
c0014607:	68 65 10 03 c0       	push   0xc0031065
c001460c:	68 46 fd 02 c0       	push   0xc002fd46
c0014611:	e8 b6 b7 00 00       	call   c001fdcc <CPrintf>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	8d 76 00             	lea    esi,[esi+0x0]
c001461c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014621:	74 21                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c0014623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014627:	8b 00                	mov    eax,DWORD PTR [eax]
c0014629:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c001462d:	74 15                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c001462f:	83 ec 08             	sub    esp,0x8
c0014632:	68 71 10 03 c0       	push   0xc0031071
c0014637:	68 46 fd 02 c0       	push   0xc002fd46
c001463c:	e8 8b b7 00 00       	call   c001fdcc <CPrintf>
c0014641:	83 c4 10             	add    esp,0x10
c0014644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014656:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001465a:	0f b7 c0             	movzx  eax,ax
c001465d:	85 c0                	test   eax,eax
c001465f:	0f 85 a3 00 00 00    	jne    c0014708 <ip_reass_free_complete_datagram+0x118>
c0014665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001466c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014674:	8b 10                	mov    edx,DWORD PTR [eax]
c0014676:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001467a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001467d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014681:	8d 50 08             	lea    edx,[eax+0x8]
c0014684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001468b:	83 ec 04             	sub    esp,0x4
c001468e:	6a 14                	push   0x14
c0014690:	52                   	push   edx
c0014691:	50                   	push   eax
c0014692:	e8 e3 bc fe ff       	call   c000037a <memcpy>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	83 ec 08             	sub    esp,0x8
c001469d:	6a 01                	push   0x1
c001469f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146a3:	e8 4c eb ff ff       	call   c00131f4 <icmp_time_exceeded>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146b2:	e8 11 46 ff ff       	call   c0008cc8 <pbuf_clen>
c00146b7:	83 c4 10             	add    esp,0x10
c00146ba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00146be:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00146c3:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146c8:	01 d0                	add    eax,edx
c00146ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00146cf:	7e 17                	jle    c00146e8 <ip_reass_free_complete_datagram+0xf8>
c00146d1:	83 ec 08             	sub    esp,0x8
c00146d4:	68 83 10 03 c0       	push   0xc0031083
c00146d9:	68 46 fd 02 c0       	push   0xc002fd46
c00146de:	e8 e9 b6 00 00       	call   c001fdcc <CPrintf>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	66 90                	xchg   ax,ax
c00146e8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146ed:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00146f2:	01 d0                	add    eax,edx
c00146f4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00146f9:	83 ec 0c             	sub    esp,0xc
c00146fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014700:	e8 ef 3d ff ff       	call   c00084f4 <pbuf_free>
c0014705:	83 c4 10             	add    esp,0x10
c0014708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001470c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001470f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014713:	eb 7b                	jmp    c0014790 <ip_reass_free_complete_datagram+0x1a0>
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001471c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014723:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014727:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001472b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001472f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014731:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014735:	83 ec 0c             	sub    esp,0xc
c0014738:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001473c:	e8 87 45 ff ff       	call   c0008cc8 <pbuf_clen>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014748:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001474d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014752:	01 d0                	add    eax,edx
c0014754:	3d ff ff 00 00       	cmp    eax,0xffff
c0014759:	7e 15                	jle    c0014770 <ip_reass_free_complete_datagram+0x180>
c001475b:	83 ec 08             	sub    esp,0x8
c001475e:	68 83 10 03 c0       	push   0xc0031083
c0014763:	68 46 fd 02 c0       	push   0xc002fd46
c0014768:	e8 5f b6 00 00       	call   c001fdcc <CPrintf>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014775:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001477a:	01 d0                	add    eax,edx
c001477c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014781:	83 ec 0c             	sub    esp,0xc
c0014784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014788:	e8 67 3d ff ff       	call   c00084f4 <pbuf_free>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014795:	75 81                	jne    c0014718 <ip_reass_free_complete_datagram+0x128>
c0014797:	83 ec 08             	sub    esp,0x8
c001479a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001479e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00147a2:	e8 ed fd ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00147b0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00147b5:	0f b7 c0             	movzx  eax,ax
c00147b8:	39 c2                	cmp    edx,eax
c00147ba:	76 18                	jbe    c00147d4 <ip_reass_free_complete_datagram+0x1e4>
c00147bc:	83 ec 08             	sub    esp,0x8
c00147bf:	68 a0 10 03 c0       	push   0xc00310a0
c00147c4:	68 46 fd 02 c0       	push   0xc002fd46
c00147c9:	e8 fe b5 00 00       	call   c001fdcc <CPrintf>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	8d 76 00             	lea    esi,[esi+0x0]
c00147d4:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c00147db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00147e0:	89 d1                	mov    ecx,edx
c00147e2:	29 c1                	sub    ecx,eax
c00147e4:	89 c8                	mov    eax,ecx
c00147e6:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00147ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00147f1:	83 c4 2c             	add    esp,0x2c
c00147f4:	c3                   	ret    
c00147f5:	8d 76 00             	lea    esi,[esi+0x0]

c00147f8 <ip_reass_tmr>:
c00147f8:	83 ec 1c             	sub    esp,0x1c
c00147fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014803:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480c:	eb 62                	jmp    c0014870 <ip_reass_tmr+0x78>
c001480e:	66 90                	xchg   ax,ax
c0014810:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014814:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014817:	0f b6 c0             	movzx  eax,al
c001481a:	85 c0                	test   eax,eax
c001481c:	74 2a                	je     c0014848 <ip_reass_tmr+0x50>
c001481e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014822:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014825:	83 e8 01             	sub    eax,0x1
c0014828:	88 c2                	mov    dl,al
c001482a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001482e:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001483d:	8b 00                	mov    eax,DWORD PTR [eax]
c001483f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014843:	eb 2b                	jmp    c0014870 <ip_reass_tmr+0x78>
c0014845:	8d 76 00             	lea    esi,[esi+0x0]
c0014848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001484c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014854:	8b 00                	mov    eax,DWORD PTR [eax]
c0014856:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014861:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014865:	e8 86 fd ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	8d 76 00             	lea    esi,[esi+0x0]
c0014870:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014875:	75 99                	jne    c0014810 <ip_reass_tmr+0x18>
c0014877:	90                   	nop
c0014878:	83 c4 1c             	add    esp,0x1c
c001487b:	c3                   	ret    

c001487c <ip_reass_remove_oldest_datagram>:
c001487c:	83 ec 2c             	sub    esp,0x2c
c001487f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014887:	90                   	nop
c0014888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014890:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014898:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148a0:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00148a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a9:	e9 9a 00 00 00       	jmp    c0014948 <ip_reass_remove_oldest_datagram+0xcc>
c00148ae:	66 90                	xchg   ax,ax
c00148b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148b4:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00148b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00148be:	39 c2                	cmp    edx,eax
c00148c0:	75 2e                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00148c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00148d0:	39 c2                	cmp    edx,eax
c00148d2:	75 1c                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00148db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148df:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148e3:	0f b7 d2             	movzx  edx,dx
c00148e6:	0f b7 c0             	movzx  eax,ax
c00148e9:	39 c2                	cmp    edx,eax
c00148eb:	74 3b                	je     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c00148ed:	8d 76 00             	lea    esi,[esi+0x0]
c00148f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00148f5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00148fa:	75 0c                	jne    c0014908 <ip_reass_remove_oldest_datagram+0x8c>
c00148fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014904:	eb 22                	jmp    c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014906:	66 90                	xchg   ax,ax
c0014908:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001490c:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c001490f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014913:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014916:	0f b6 d2             	movzx  edx,dl
c0014919:	0f b6 c0             	movzx  eax,al
c001491c:	39 c2                	cmp    edx,eax
c001491e:	77 08                	ja     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001492c:	8b 00                	mov    eax,DWORD PTR [eax]
c001492e:	85 c0                	test   eax,eax
c0014930:	74 0a                	je     c001493c <ip_reass_remove_oldest_datagram+0xc0>
c0014932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001493a:	66 90                	xchg   ax,ax
c001493c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014940:	8b 00                	mov    eax,DWORD PTR [eax]
c0014942:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014946:	66 90                	xchg   ax,ax
c0014948:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001494d:	0f 85 5d ff ff ff    	jne    c00148b0 <ip_reass_remove_oldest_datagram+0x34>
c0014953:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014958:	74 22                	je     c001497c <ip_reass_remove_oldest_datagram+0x100>
c001495a:	83 ec 08             	sub    esp,0x8
c001495d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014961:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014965:	e8 86 fc ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001496a:	83 c4 10             	add    esp,0x10
c001496d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014975:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014979:	8d 76 00             	lea    esi,[esi+0x0]
c001497c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014980:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014984:	7d 0e                	jge    c0014994 <ip_reass_remove_oldest_datagram+0x118>
c0014986:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c001498b:	0f 8f f7 fe ff ff    	jg     c0014888 <ip_reass_remove_oldest_datagram+0xc>
c0014991:	8d 76 00             	lea    esi,[esi+0x0]
c0014994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014998:	83 c4 2c             	add    esp,0x2c
c001499b:	c3                   	ret    

c001499c <ip_reass_enqueue_new_datagram>:
c001499c:	83 ec 1c             	sub    esp,0x1c
c001499f:	83 ec 0c             	sub    esp,0xc
c00149a2:	6a 05                	push   0x5
c00149a4:	e8 63 31 ff ff       	call   c0007b0c <memp_malloc>
c00149a9:	83 c4 10             	add    esp,0x10
c00149ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149b5:	75 4d                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149b7:	83 ec 08             	sub    esp,0x8
c00149ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149c2:	e8 b5 fe ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00149ce:	7f 14                	jg     c00149e4 <ip_reass_enqueue_new_datagram+0x48>
c00149d0:	83 ec 0c             	sub    esp,0xc
c00149d3:	6a 05                	push   0x5
c00149d5:	e8 32 31 ff ff       	call   c0007b0c <memp_malloc>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149e1:	8d 76 00             	lea    esi,[esi+0x0]
c00149e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149e9:	75 19                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149eb:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c00149f1:	83 c0 01             	add    eax,0x1
c00149f4:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c00149fa:	b8 00 00 00 00       	mov    eax,0x0
c00149ff:	eb 53                	jmp    c0014a54 <ip_reass_enqueue_new_datagram+0xb8>
c0014a01:	8d 76 00             	lea    esi,[esi+0x0]
c0014a04:	83 ec 04             	sub    esp,0x4
c0014a07:	6a 20                	push   0x20
c0014a09:	6a 00                	push   0x0
c0014a0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a0f:	e8 dc ba fe ff       	call   c00004f0 <memset>
c0014a14:	83 c4 10             	add    esp,0x10
c0014a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a1b:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014a1f:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a29:	89 10                	mov    DWORD PTR [eax],edx
c0014a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a2f:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a38:	83 c0 08             	add    eax,0x8
c0014a3b:	83 ec 04             	sub    esp,0x4
c0014a3e:	6a 14                	push   0x14
c0014a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014a44:	50                   	push   eax
c0014a45:	e8 30 b9 fe ff       	call   c000037a <memcpy>
c0014a4a:	83 c4 10             	add    esp,0x10
c0014a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a51:	8d 76 00             	lea    esi,[esi+0x0]
c0014a54:	83 c4 1c             	add    esp,0x1c
c0014a57:	c3                   	ret    

c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014a58:	53                   	push   ebx
c0014a59:	83 ec 28             	sub    esp,0x28
c0014a5c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014a64:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014a6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a7b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014a7f:	0f b7 c0             	movzx  eax,ax
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	50                   	push   eax
c0014a86:	e8 5d c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	89 c3                	mov    ebx,eax
c0014a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a94:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a97:	0f b7 c0             	movzx  eax,ax
c0014a9a:	83 ec 0c             	sub    esp,0xc
c0014a9d:	50                   	push   eax
c0014a9e:	e8 45 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	0f b7 c0             	movzx  eax,ax
c0014aa9:	c1 e8 08             	shr    eax,0x8
c0014aac:	83 e0 0f             	and    eax,0xf
c0014aaf:	c1 e0 02             	shl    eax,0x2
c0014ab2:	89 d9                	mov    ecx,ebx
c0014ab4:	29 c1                	sub    ecx,eax
c0014ab6:	89 c8                	mov    eax,ecx
c0014ab8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ac1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ac5:	0f b7 c0             	movzx  eax,ax
c0014ac8:	83 ec 0c             	sub    esp,0xc
c0014acb:	50                   	push   eax
c0014acc:	e8 17 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ad1:	83 c4 10             	add    esp,0x10
c0014ad4:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ad9:	c1 e0 03             	shl    eax,0x3
c0014adc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014ae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014af0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014af6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014afe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0014b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b06:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014b0b:	01 d0                	add    eax,edx
c0014b0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b11:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0014b15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b20:	e9 13 01 00 00       	jmp    c0014c38 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014b25:	8d 76 00             	lea    esi,[esi+0x0]
c0014b28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b37:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b3f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b43:	0f b7 d2             	movzx  edx,dx
c0014b46:	0f b7 c0             	movzx  eax,ax
c0014b49:	39 c2                	cmp    edx,eax
c0014b4b:	73 6f                	jae    c0014bbc <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014b4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b55:	89 10                	mov    DWORD PTR [eax],edx
c0014b57:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b5c:	74 4e                	je     c0014bac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b62:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b6e:	0f b7 d2             	movzx  edx,dx
c0014b71:	0f b7 c0             	movzx  eax,ax
c0014b74:	39 c2                	cmp    edx,eax
c0014b76:	0f 82 bc 02 00 00    	jb     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b80:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b88:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b8c:	0f b7 d2             	movzx  edx,dx
c0014b8f:	0f b7 c0             	movzx  eax,ax
c0014b92:	39 c2                	cmp    edx,eax
c0014b94:	0f 87 9e 02 00 00    	ja     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ba2:	89 10                	mov    DWORD PTR [eax],edx
c0014ba4:	e9 9b 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014bb7:	e9 88 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bc8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bcc:	0f b7 d2             	movzx  edx,dx
c0014bcf:	0f b7 c0             	movzx  eax,ax
c0014bd2:	39 c2                	cmp    edx,eax
c0014bd4:	0f 84 62 02 00 00    	je     c0014e3c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014bda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bde:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014be6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014bea:	0f b7 d2             	movzx  edx,dx
c0014bed:	0f b7 c0             	movzx  eax,ax
c0014bf0:	39 c2                	cmp    edx,eax
c0014bf2:	0f 82 48 02 00 00    	jb     c0014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014bf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014bfd:	74 25                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014bff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c03:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c0f:	0f b7 d2             	movzx  edx,dx
c0014c12:	0f b7 c0             	movzx  eax,ax
c0014c15:	39 c2                	cmp    edx,eax
c0014c17:	74 0b                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014c19:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c21:	8d 76 00             	lea    esi,[esi+0x0]
c0014c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c36:	66 90                	xchg   ax,ax
c0014c38:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c3d:	0f 85 e5 fe ff ff    	jne    c0014b28 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014c43:	90                   	nop
c0014c44:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c49:	0f 85 95 00 00 00    	jne    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014c4f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c54:	74 62                	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c5a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c62:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c66:	0f b7 d2             	movzx  edx,dx
c0014c69:	0f b7 c0             	movzx  eax,ax
c0014c6c:	39 c2                	cmp    edx,eax
c0014c6e:	76 18                	jbe    c0014c88 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014c70:	83 ec 08             	sub    esp,0x8
c0014c73:	68 bb 10 03 c0       	push   0xc00310bb
c0014c78:	68 46 fd 02 c0       	push   0xc002fd46
c0014c7d:	e8 4a b1 00 00       	call   c001fdcc <CPrintf>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8d 76 00             	lea    esi,[esi+0x0]
c0014c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c90:	89 10                	mov    DWORD PTR [eax],edx
c0014c92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c96:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c9e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ca2:	0f b7 d2             	movzx  edx,dx
c0014ca5:	0f b7 c0             	movzx  eax,ax
c0014ca8:	39 c2                	cmp    edx,eax
c0014caa:	74 38                	je     c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cb4:	eb 2e                	jmp    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cbf:	85 c0                	test   eax,eax
c0014cc1:	74 15                	je     c0014cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014cc3:	83 ec 08             	sub    esp,0x8
c0014cc6:	68 fc 10 03 c0       	push   0xc00310fc
c0014ccb:	68 46 fd 02 c0       	push   0xc002fd46
c0014cd0:	e8 f7 b0 00 00       	call   c001fdcc <CPrintf>
c0014cd5:	83 c4 10             	add    esp,0x10
c0014cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ce0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014ce3:	90                   	nop
c0014ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce8:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014ceb:	0f b6 c0             	movzx  eax,al
c0014cee:	83 e0 01             	and    eax,0x1
c0014cf1:	0f 84 39 01 00 00    	je     c0014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014cf7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014cfc:	0f 84 26 01 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d0c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d10:	0f b7 c0             	movzx  eax,ax
c0014d13:	85 c0                	test   eax,eax
c0014d15:	74 0d                	je     c0014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014d17:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d1f:	e9 04 01 00 00       	jmp    c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d36:	eb 44                	jmp    c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d47:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d4f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d53:	0f b7 d2             	movzx  edx,dx
c0014d56:	0f b7 c0             	movzx  eax,ax
c0014d59:	39 c2                	cmp    edx,eax
c0014d5b:	74 0b                	je     c0014d68 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014d5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d65:	eb 1d                	jmp    c0014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014d67:	90                   	nop
c0014d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d7a:	66 90                	xchg   ax,ax
c0014d7c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d81:	75 b5                	jne    c0014d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014d83:	90                   	nop
c0014d84:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d89:	0f 84 99 00 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d96:	85 c0                	test   eax,eax
c0014d98:	75 16                	jne    c0014db0 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014d9a:	83 ec 08             	sub    esp,0x8
c0014d9d:	68 d9 10 03 c0       	push   0xc00310d9
c0014da2:	68 46 fd 02 c0       	push   0xc002fd46
c0014da7:	e8 20 b0 00 00       	call   c001fdcc <CPrintf>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	90                   	nop
c0014db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014db7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dba:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014dbe:	75 18                	jne    c0014dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014dc0:	83 ec 08             	sub    esp,0x8
c0014dc3:	68 d9 10 03 c0       	push   0xc00310d9
c0014dc8:	68 46 fd 02 c0       	push   0xc002fd46
c0014dcd:	e8 fa af 00 00       	call   c001fdcc <CPrintf>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dde:	85 c0                	test   eax,eax
c0014de0:	74 16                	je     c0014df8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014de2:	83 ec 08             	sub    esp,0x8
c0014de5:	68 34 11 03 c0       	push   0xc0031134
c0014dea:	68 46 fd 02 c0       	push   0xc002fd46
c0014def:	e8 d8 af 00 00       	call   c001fdcc <CPrintf>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	90                   	nop
c0014df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dfc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e04:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014e07:	0f b7 d2             	movzx  edx,dx
c0014e0a:	0f b7 c0             	movzx  eax,ax
c0014e0d:	39 c2                	cmp    edx,eax
c0014e0f:	74 17                	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014e11:	83 ec 08             	sub    esp,0x8
c0014e14:	68 58 11 03 c0       	push   0xc0031158
c0014e19:	68 46 fd 02 c0       	push   0xc002fd46
c0014e1e:	e8 a9 af 00 00       	call   c001fdcc <CPrintf>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	66 90                	xchg   ax,ax
c0014e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e2c:	eb 52                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e2e:	66 90                	xchg   ax,ax
c0014e30:	b8 00 00 00 00       	mov    eax,0x0
c0014e35:	eb 49                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e37:	90                   	nop
c0014e38:	90                   	nop
c0014e39:	eb 09                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3b:	90                   	nop
c0014e3c:	90                   	nop
c0014e3d:	eb 05                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3f:	90                   	nop
c0014e40:	90                   	nop
c0014e41:	8d 76 00             	lea    esi,[esi+0x0]
c0014e44:	83 ec 0c             	sub    esp,0xc
c0014e47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e4b:	e8 78 3e ff ff       	call   c0008cc8 <pbuf_clen>
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014e5a:	0f b6 c0             	movzx  eax,al
c0014e5d:	89 d3                	mov    ebx,edx
c0014e5f:	29 c3                	sub    ebx,eax
c0014e61:	89 d8                	mov    eax,ebx
c0014e63:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e70:	e8 7f 36 ff ff       	call   c00084f4 <pbuf_free>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	b8 00 00 00 00       	mov    eax,0x0
c0014e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e80:	83 c4 28             	add    esp,0x28
c0014e83:	5b                   	pop    ebx
c0014e84:	c3                   	ret    
c0014e85:	8d 76 00             	lea    esi,[esi+0x0]

c0014e88 <ip_reass>:
c0014e88:	53                   	push   ebx
c0014e89:	83 ec 28             	sub    esp,0x28
c0014e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e94:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014e9a:	83 c0 01             	add    eax,0x1
c0014e9d:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ea7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014eb5:	0f b7 c0             	movzx  eax,ax
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	50                   	push   eax
c0014ebc:	e8 27 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	0f b7 c0             	movzx  eax,ax
c0014ec7:	c1 e8 08             	shr    eax,0x8
c0014eca:	0f b7 c0             	movzx  eax,ax
c0014ecd:	83 e0 0f             	and    eax,0xf
c0014ed0:	c1 e0 02             	shl    eax,0x2
c0014ed3:	83 f8 14             	cmp    eax,0x14
c0014ed6:	74 14                	je     c0014eec <ip_reass+0x64>
c0014ed8:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014ede:	83 c0 01             	add    eax,0x1
c0014ee1:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014ee7:	e9 68 03 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ef4:	0f b7 c0             	movzx  eax,ax
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	50                   	push   eax
c0014efb:	e8 e8 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f08:	c1 e0 03             	shl    eax,0x3
c0014f0b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f14:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014f18:	0f b7 c0             	movzx  eax,ax
c0014f1b:	83 ec 0c             	sub    esp,0xc
c0014f1e:	50                   	push   eax
c0014f1f:	e8 c4 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	89 c3                	mov    ebx,eax
c0014f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014f30:	0f b7 c0             	movzx  eax,ax
c0014f33:	83 ec 0c             	sub    esp,0xc
c0014f36:	50                   	push   eax
c0014f37:	e8 ac bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f3c:	83 c4 10             	add    esp,0x10
c0014f3f:	0f b7 c0             	movzx  eax,ax
c0014f42:	c1 e8 08             	shr    eax,0x8
c0014f45:	83 e0 0f             	and    eax,0xf
c0014f48:	c1 e0 02             	shl    eax,0x2
c0014f4b:	89 d9                	mov    ecx,ebx
c0014f4d:	29 c1                	sub    ecx,eax
c0014f4f:	89 c8                	mov    eax,ecx
c0014f51:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014f56:	83 ec 0c             	sub    esp,0xc
c0014f59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f5d:	e8 66 3d ff ff       	call   c0008cc8 <pbuf_clen>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014f69:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f6f:	0f b7 d0             	movzx  edx,ax
c0014f72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f77:	01 d0                	add    eax,edx
c0014f79:	83 f8 0a             	cmp    eax,0xa
c0014f7c:	7e 42                	jle    c0014fc0 <ip_reass+0x138>
c0014f7e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f83:	83 ec 08             	sub    esp,0x8
c0014f86:	50                   	push   eax
c0014f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f8b:	e8 ec f8 ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	85 c0                	test   eax,eax
c0014f95:	74 15                	je     c0014fac <ip_reass+0x124>
c0014f97:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f9d:	0f b7 d0             	movzx  edx,ax
c0014fa0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014fa5:	01 d0                	add    eax,edx
c0014fa7:	83 f8 0a             	cmp    eax,0xa
c0014faa:	7e 14                	jle    c0014fc0 <ip_reass+0x138>
c0014fac:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014fb2:	83 c0 01             	add    eax,0x1
c0014fb5:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014fbb:	e9 94 02 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014fc0:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fc9:	eb 65                	jmp    c0015030 <ip_reass+0x1a8>
c0014fcb:	90                   	nop
c0014fcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fd0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014fda:	39 c2                	cmp    edx,eax
c0014fdc:	75 3e                	jne    c001501c <ip_reass+0x194>
c0014fde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fe2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fec:	39 c2                	cmp    edx,eax
c0014fee:	75 2c                	jne    c001501c <ip_reass+0x194>
c0014ff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ff4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014fff:	0f b7 d2             	movzx  edx,dx
c0015002:	0f b7 c0             	movzx  eax,ax
c0015005:	39 c2                	cmp    edx,eax
c0015007:	75 13                	jne    c001501c <ip_reass+0x194>
c0015009:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c001500f:	83 c0 01             	add    eax,0x1
c0015012:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0015018:	eb 1e                	jmp    c0015038 <ip_reass+0x1b0>
c001501a:	66 90                	xchg   ax,ax
c001501c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015024:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015028:	8b 00                	mov    eax,DWORD PTR [eax]
c001502a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001502e:	66 90                	xchg   ax,ax
c0015030:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015035:	75 95                	jne    c0014fcc <ip_reass+0x144>
c0015037:	90                   	nop
c0015038:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001503d:	75 25                	jne    c0015064 <ip_reass+0x1dc>
c001503f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015044:	83 ec 08             	sub    esp,0x8
c0015047:	50                   	push   eax
c0015048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001504c:	e8 4b f9 ff ff       	call   c001499c <ip_reass_enqueue_new_datagram>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015058:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001505d:	75 61                	jne    c00150c0 <ip_reass+0x238>
c001505f:	e9 f0 01 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0015064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015068:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001506c:	0f b7 c0             	movzx  eax,ax
c001506f:	83 ec 0c             	sub    esp,0xc
c0015072:	50                   	push   eax
c0015073:	e8 70 bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	0f b7 c0             	movzx  eax,ax
c001507e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015083:	75 3b                	jne    c00150c0 <ip_reass+0x238>
c0015085:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015089:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c001508d:	0f b7 c0             	movzx  eax,ax
c0015090:	83 ec 0c             	sub    esp,0xc
c0015093:	50                   	push   eax
c0015094:	e8 4f bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	0f b7 c0             	movzx  eax,ax
c001509f:	25 ff 1f 00 00       	and    eax,0x1fff
c00150a4:	74 1a                	je     c00150c0 <ip_reass+0x238>
c00150a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150aa:	83 c0 08             	add    eax,0x8
c00150ad:	83 ec 04             	sub    esp,0x4
c00150b0:	6a 14                	push   0x14
c00150b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150b6:	50                   	push   eax
c00150b7:	e8 be b2 fe ff       	call   c000037a <memcpy>
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	90                   	nop
c00150c0:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c00150c5:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00150cb:	01 d0                	add    eax,edx
c00150cd:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00150d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00150db:	0f b7 c0             	movzx  eax,ax
c00150de:	83 e0 20             	and    eax,0x20
c00150e1:	75 29                	jne    c001510c <ip_reass+0x284>
c00150e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150e7:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c00150ea:	83 c8 01             	or     eax,0x1
c00150ed:	88 c2                	mov    dl,al
c00150ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f3:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c00150f6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00150fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150ff:	01 d0                	add    eax,edx
c0015101:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015105:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015109:	8d 76 00             	lea    esi,[esi+0x0]
c001510c:	83 ec 08             	sub    esp,0x8
c001510f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0015113:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015117:	e8 3c f9 ff ff       	call   c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	85 c0                	test   eax,eax
c0015121:	0f 84 25 01 00 00    	je     c001524c <ip_reass+0x3c4>
c0015127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001512b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001512e:	83 c0 14             	add    eax,0x14
c0015131:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015135:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001513d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015143:	8b 00                	mov    eax,DWORD PTR [eax]
c0015145:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001514d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015153:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015157:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001515b:	83 c0 08             	add    eax,0x8
c001515e:	83 ec 04             	sub    esp,0x4
c0015161:	6a 14                	push   0x14
c0015163:	50                   	push   eax
c0015164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015168:	e8 0d b2 fe ff       	call   c000037a <memcpy>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015174:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015177:	0f b7 c0             	movzx  eax,ax
c001517a:	83 ec 0c             	sub    esp,0xc
c001517d:	50                   	push   eax
c001517e:	e8 65 ba fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015183:	83 c4 10             	add    esp,0x10
c0015186:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001518a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001518e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015192:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001519c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00151a2:	83 ec 08             	sub    esp,0x8
c00151a5:	6a 14                	push   0x14
c00151a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151ab:	e8 e0 e4 ff ff       	call   c0013690 <inet_chksum>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151b7:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00151bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00151c6:	eb 3c                	jmp    c0015204 <ip_reass+0x37c>
c00151c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151d3:	83 ec 08             	sub    esp,0x8
c00151d6:	6a ec                	push   0xffffffec
c00151d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00151dc:	e8 77 31 ff ff       	call   c0008358 <pbuf_header>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	83 ec 08             	sub    esp,0x8
c00151e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151ef:	e8 38 3b ff ff       	call   c0008d2c <pbuf_cat>
c00151f4:	83 c4 10             	add    esp,0x10
c00151f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015201:	8d 76 00             	lea    esi,[esi+0x0]
c0015204:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015209:	75 bd                	jne    c00151c8 <ip_reass+0x340>
c001520b:	83 ec 08             	sub    esp,0x8
c001520e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015212:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015216:	e8 79 f3 ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015225:	e8 9e 3a ff ff       	call   c0008cc8 <pbuf_clen>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0015234:	0f b6 c0             	movzx  eax,al
c0015237:	89 d3                	mov    ebx,edx
c0015239:	29 c3                	sub    ebx,eax
c001523b:	89 d8                	mov    eax,ebx
c001523d:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0015243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015247:	eb 2f                	jmp    c0015278 <ip_reass+0x3f0>
c0015249:	8d 76 00             	lea    esi,[esi+0x0]
c001524c:	b8 00 00 00 00       	mov    eax,0x0
c0015251:	eb 25                	jmp    c0015278 <ip_reass+0x3f0>
c0015253:	90                   	nop
c0015254:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c001525a:	83 c0 01             	add    eax,0x1
c001525d:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c0015263:	83 ec 0c             	sub    esp,0xc
c0015266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001526a:	e8 85 32 ff ff       	call   c00084f4 <pbuf_free>
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	b8 00 00 00 00       	mov    eax,0x0
c0015277:	90                   	nop
c0015278:	83 c4 28             	add    esp,0x28
c001527b:	5b                   	pop    ebx
c001527c:	c3                   	ret    
c001527d:	8d 76 00             	lea    esi,[esi+0x0]

c0015280 <ip_frag_alloc_pbuf_custom_ref>:
c0015280:	83 ec 0c             	sub    esp,0xc
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	6a 06                	push   0x6
c0015288:	e8 7f 28 ff ff       	call   c0007b0c <memp_malloc>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	83 c4 0c             	add    esp,0xc
c0015293:	c3                   	ret    

c0015294 <ip_frag_free_pbuf_custom_ref>:
c0015294:	83 ec 0c             	sub    esp,0xc
c0015297:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001529c:	75 16                	jne    c00152b4 <ip_frag_free_pbuf_custom_ref+0x20>
c001529e:	83 ec 08             	sub    esp,0x8
c00152a1:	68 76 01 03 c0       	push   0xc0030176
c00152a6:	68 46 fd 02 c0       	push   0xc002fd46
c00152ab:	e8 1c ab 00 00       	call   c001fdcc <CPrintf>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	90                   	nop
c00152b4:	83 ec 08             	sub    esp,0x8
c00152b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152bb:	6a 06                	push   0x6
c00152bd:	e8 76 29 ff ff       	call   c0007c38 <memp_free>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	90                   	nop
c00152c6:	83 c4 0c             	add    esp,0xc
c00152c9:	c3                   	ret    
c00152ca:	66 90                	xchg   ax,ax

c00152cc <ipfrag_free_pbuf_custom>:
c00152cc:	83 ec 1c             	sub    esp,0x1c
c00152cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152dc:	75 16                	jne    c00152f4 <ipfrag_free_pbuf_custom+0x28>
c00152de:	83 ec 08             	sub    esp,0x8
c00152e1:	68 e6 10 03 c0       	push   0xc00310e6
c00152e6:	68 46 fd 02 c0       	push   0xc002fd46
c00152eb:	e8 dc aa 00 00       	call   c001fdcc <CPrintf>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	90                   	nop
c00152f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152f8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00152fc:	74 16                	je     c0015314 <ipfrag_free_pbuf_custom+0x48>
c00152fe:	83 ec 08             	sub    esp,0x8
c0015301:	68 f2 10 03 c0       	push   0xc00310f2
c0015306:	68 46 fd 02 c0       	push   0xc002fd46
c001530b:	e8 bc aa 00 00       	call   c001fdcc <CPrintf>
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	90                   	nop
c0015314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015318:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001531b:	85 c0                	test   eax,eax
c001531d:	74 15                	je     c0015334 <ipfrag_free_pbuf_custom+0x68>
c001531f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015323:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	50                   	push   eax
c001532a:	e8 c5 31 ff ff       	call   c00084f4 <pbuf_free>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	66 90                	xchg   ax,ax
c0015334:	83 ec 0c             	sub    esp,0xc
c0015337:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001533b:	e8 54 ff ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	90                   	nop
c0015344:	83 c4 1c             	add    esp,0x1c
c0015347:	c3                   	ret    

c0015348 <ip_frag>:
c0015348:	53                   	push   ebx
c0015349:	83 ec 38             	sub    esp,0x38
c001534c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015350:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015353:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015358:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c001535f:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0015366:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001536a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001536d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015375:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015379:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001537d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015381:	0f b7 c0             	movzx  eax,ax
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	50                   	push   eax
c0015388:	e8 5b b8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015395:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015399:	25 ff 1f 00 00       	and    eax,0x1fff
c001539e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00153a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153a7:	25 00 20 00 00       	and    eax,0x2000
c00153ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00153b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00153b8:	83 e8 14             	sub    eax,0x14
c00153bb:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00153c0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153c5:	83 e8 14             	sub    eax,0x14
c00153c8:	79 06                	jns    c00153d0 <ip_frag+0x88>
c00153ca:	83 c0 07             	add    eax,0x7
c00153cd:	8d 76 00             	lea    esi,[esi+0x0]
c00153d0:	c1 f8 03             	sar    eax,0x3
c00153d3:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00153d8:	e9 03 03 00 00       	jmp    c00156e0 <ip_frag+0x398>
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]
c00153e0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153e5:	8d 50 ed             	lea    edx,[eax-0x13]
c00153e8:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00153ed:	39 c2                	cmp    edx,eax
c00153ef:	0f 9f c0             	setg   al
c00153f2:	0f b6 c0             	movzx  eax,al
c00153f5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00153fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153fe:	25 ff 1f 00 00       	and    eax,0x1fff
c0015403:	89 c2                	mov    edx,eax
c0015405:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001540a:	09 d0                	or     eax,edx
c001540c:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015411:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015416:	85 c0                	test   eax,eax
c0015418:	75 0e                	jne    c0015428 <ip_frag+0xe0>
c001541a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001541e:	80 cc 20             	or     ah,0x20
c0015421:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015426:	66 90                	xchg   ax,ax
c0015428:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001542d:	85 c0                	test   eax,eax
c001542f:	75 0b                	jne    c001543c <ip_frag+0xf4>
c0015431:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015435:	c1 e0 03             	shl    eax,0x3
c0015438:	eb 0a                	jmp    c0015444 <ip_frag+0xfc>
c001543a:	66 90                	xchg   ax,ax
c001543c:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015441:	8d 76 00             	lea    esi,[esi+0x0]
c0015444:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0015449:	83 ec 04             	sub    esp,0x4
c001544c:	6a 00                	push   0x0
c001544e:	6a 14                	push   0x14
c0015450:	6a 02                	push   0x2
c0015452:	e8 75 32 ff ff       	call   c00086cc <pbuf_alloc>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001545e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015463:	75 07                	jne    c001546c <ip_frag+0x124>
c0015465:	b0 ff                	mov    al,0xff
c0015467:	e9 84 02 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c001546c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015470:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015474:	0f b7 c0             	movzx  eax,ax
c0015477:	83 f8 13             	cmp    eax,0x13
c001547a:	77 18                	ja     c0015494 <ip_frag+0x14c>
c001547c:	83 ec 08             	sub    esp,0x8
c001547f:	68 88 11 03 c0       	push   0xc0031188
c0015484:	68 46 fd 02 c0       	push   0xc002fd46
c0015489:	e8 3e a9 00 00       	call   c001fdcc <CPrintf>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	8d 76 00             	lea    esi,[esi+0x0]
c0015494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001549b:	83 ec 04             	sub    esp,0x4
c001549e:	6a 14                	push   0x14
c00154a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154a4:	50                   	push   eax
c00154a5:	e8 d0 ae fe ff       	call   c000037a <memcpy>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00154b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00154b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00154b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00154bf:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c00154c4:	01 c2                	add    edx,eax
c00154c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00154cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154d1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00154d5:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c00154da:	89 d1                	mov    ecx,edx
c00154dc:	29 c1                	sub    ecx,eax
c00154de:	89 c8                	mov    eax,ecx
c00154e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00154e4:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00154e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ec:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00154f1:	e9 1a 01 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c00154f6:	66 90                	xchg   ax,ax
c00154f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154fc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015500:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015504:	0f b7 d8             	movzx  ebx,ax
c0015507:	0f b7 ca             	movzx  ecx,dx
c001550a:	39 cb                	cmp    ebx,ecx
c001550c:	76 02                	jbe    c0015510 <ip_frag+0x1c8>
c001550e:	89 d0                	mov    eax,edx
c0015510:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0015515:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001551a:	85 c0                	test   eax,eax
c001551c:	75 12                	jne    c0015530 <ip_frag+0x1e8>
c001551e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015528:	e9 e3 00 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c001552d:	8d 76 00             	lea    esi,[esi+0x0]
c0015530:	e8 4b fd ff ff       	call   c0015280 <ip_frag_alloc_pbuf_custom_ref>
c0015535:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015539:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001553e:	75 18                	jne    c0015558 <ip_frag+0x210>
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015547:	e8 a8 2f ff ff       	call   c00084f4 <pbuf_free>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	b0 ff                	mov    al,0xff
c0015551:	e9 9a 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c0015556:	66 90                	xchg   ax,ax
c0015558:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c001555d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015561:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015568:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001556d:	83 ec 08             	sub    esp,0x8
c0015570:	53                   	push   ebx
c0015571:	51                   	push   ecx
c0015572:	52                   	push   edx
c0015573:	6a 02                	push   0x2
c0015575:	50                   	push   eax
c0015576:	6a 03                	push   0x3
c0015578:	e8 b7 2c ff ff       	call   c0008234 <pbuf_alloced_custom>
c001557d:	83 c4 20             	add    esp,0x20
c0015580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015584:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015589:	75 25                	jne    c00155b0 <ip_frag+0x268>
c001558b:	83 ec 0c             	sub    esp,0xc
c001558e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015592:	e8 fd fc ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015597:	83 c4 10             	add    esp,0x10
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155a1:	e8 4e 2f ff ff       	call   c00084f4 <pbuf_free>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	b0 ff                	mov    al,0xff
c00155ab:	e9 40 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00155b7:	e8 40 37 ff ff       	call   c0008cfc <pbuf_ref>
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00155c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155ce:	c7 40 10 cc 52 01 c0 	mov    DWORD PTR [eax+0x10],0xc00152cc
c00155d5:	83 ec 08             	sub    esp,0x8
c00155d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00155dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155e0:	e8 47 37 ff ff       	call   c0008d2c <pbuf_cat>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155ec:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00155f1:	89 d3                	mov    ebx,edx
c00155f3:	29 c3                	sub    ebx,eax
c00155f5:	89 d8                	mov    eax,ebx
c00155f7:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00155fc:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015601:	85 c0                	test   eax,eax
c0015603:	74 0b                	je     c0015610 <ip_frag+0x2c8>
c0015605:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015609:	8b 00                	mov    eax,DWORD PTR [eax]
c001560b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001560f:	90                   	nop
c0015610:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015615:	85 c0                	test   eax,eax
c0015617:	0f 85 db fe ff ff    	jne    c00154f8 <ip_frag+0x1b0>
c001561d:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015622:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0015627:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c001562c:	83 ec 0c             	sub    esp,0xc
c001562f:	50                   	push   eax
c0015630:	e8 b3 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015635:	83 c4 10             	add    esp,0x10
c0015638:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001563c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015644:	83 c0 14             	add    eax,0x14
c0015647:	0f b7 c0             	movzx  eax,ax
c001564a:	83 ec 0c             	sub    esp,0xc
c001564d:	50                   	push   eax
c001564e:	e8 95 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001565a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001565e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015662:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015668:	83 ec 08             	sub    esp,0x8
c001566b:	6a 14                	push   0x14
c001566d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015671:	e8 1a e0 ff ff       	call   c0013690 <inet_chksum>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001567d:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015681:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015685:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015688:	83 ec 04             	sub    esp,0x4
c001568b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001568f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015693:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015697:	ff d0                	call   eax
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c00156a2:	83 c0 01             	add    eax,0x1
c00156a5:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c00156ab:	83 ec 0c             	sub    esp,0xc
c00156ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b2:	e8 3d 2e ff ff       	call   c00084f4 <pbuf_free>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c00156bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c3:	89 d1                	mov    ecx,edx
c00156c5:	29 c1                	sub    ecx,eax
c00156c7:	89 c8                	mov    eax,ecx
c00156c9:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00156ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00156d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156d6:	01 d0                	add    eax,edx
c00156d8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00156dd:	8d 76 00             	lea    esi,[esi+0x0]
c00156e0:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00156e5:	85 c0                	test   eax,eax
c00156e7:	0f 85 f3 fc ff ff    	jne    c00153e0 <ip_frag+0x98>
c00156ed:	b0 00                	mov    al,0x0
c00156ef:	90                   	nop
c00156f0:	83 c4 38             	add    esp,0x38
c00156f3:	5b                   	pop    ebx
c00156f4:	c3                   	ret    
c00156f5:	90                   	nop

c00156f6 <Computer::close(int, int, void*)>:
c00156f6:	53                   	push   ebx
c00156f7:	83 ec 08             	sub    esp,0x8
c00156fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156fe:	e8 59 a5 00 00       	call   c001fc5c <KeExecuteAtexit()>
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c001570c:	50                   	push   eax
c001570d:	e8 5c 60 00 00       	call   c001b76e <Device::closeAll()>
c0015712:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015718:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001571c:	8b 10                	mov    edx,DWORD PTR [eax]
c001571e:	51                   	push   ecx
c001571f:	68 0f 27 00 00       	push   0x270f
c0015724:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015728:	53                   	push   ebx
c0015729:	50                   	push   eax
c001572a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001572d:	83 c4 14             	add    esp,0x14
c0015730:	68 a8 11 03 c0       	push   0xc00311a8
c0015735:	e8 64 ad 00 00       	call   c002049e <KePanic(char const*)>
c001573a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001573f:	83 c4 18             	add    esp,0x18
c0015742:	5b                   	pop    ebx
c0015743:	c3                   	ret    

c0015744 <Krnl::firstTask()>:
c0015744:	53                   	push   ebx
c0015745:	83 ec 14             	sub    esp,0x14
c0015748:	fb                   	sti    
c0015749:	68 be 11 03 c0       	push   0xc00311be
c001574e:	e8 e8 a5 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c0015753:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c001575a:	e8 97 0e 00 00       	call   c00165f6 <malloc>
c001575f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015766:	89 c3                	mov    ebx,eax
c0015768:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001576d:	50                   	push   eax
c001576e:	68 d7 11 03 c0       	push   0xc00311d7
c0015773:	6a 01                	push   0x1
c0015775:	53                   	push   ebx
c0015776:	e8 c1 f8 00 00       	call   c002503c <Process::Process(bool, char const*, Process*, char**)>
c001577b:	83 c4 20             	add    esp,0x20
c001577e:	68 ff 00 00 00       	push   0xff
c0015783:	6a 00                	push   0x0
c0015785:	68 9d 5f 01 c0       	push   0xc0015f9d
c001578a:	53                   	push   ebx
c001578b:	e8 d4 fa 00 00       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c0015790:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c0015796:	6a 7a                	push   0x7a
c0015798:	6a 00                	push   0x0
c001579a:	68 2c 5b 02 c0       	push   0xc0025b2c
c001579f:	52                   	push   edx
c00157a0:	e8 bf fa 00 00       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c00157a5:	83 c4 14             	add    esp,0x14
c00157a8:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c00157ad:	68 d4 12 03 c0       	push   0xc00312d4
c00157b2:	e8 84 a5 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c00157b7:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c00157be:	e8 94 ae 00 00       	call   c0020657 <KeInitRand()>
c00157c3:	e8 fb 06 01 00       	call   c0025ec3 <Vm::initialise8086()>
c00157c8:	e8 9d 4b 00 00       	call   c001a36a <Fs::initVFS()>
c00157cd:	c7 04 24 e4 11 03 c0 	mov    DWORD PTR [esp],0xc00311e4
c00157d4:	e8 62 a5 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c00157d9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00157de:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00157e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00157e6:	6a 00                	push   0x0
c00157e8:	6a 00                	push   0x0
c00157ea:	6a 00                	push   0x0
c00157ec:	50                   	push   eax
c00157ed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00157f0:	83 c4 14             	add    esp,0x14
c00157f3:	68 d4 12 03 c0       	push   0xc00312d4
c00157f8:	e8 3e a5 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c00157fd:	e8 02 43 00 00       	call   c0019b04 <KeInitialiseSymlinks()>
c0015802:	e8 df aa 00 00       	call   c00202e6 <KeLoadSystemEnv()>
c0015807:	e8 57 ad 00 00       	call   c0020563 <KeSetupPowerManager()>
c001580c:	83 c4 0c             	add    esp,0xc
c001580f:	6a 3a                	push   0x3a
c0015811:	68 fe 11 03 c0       	push   0xc00311fe
c0015816:	68 07 12 03 c0       	push   0xc0031207
c001581b:	e8 d3 d9 00 00       	call   c00231f3 <Reg::readIntWithDefault(char*, char*, int)>
c0015820:	89 04 24             	mov    DWORD PTR [esp],eax
c0015823:	e8 5c 57 00 00       	call   c001af84 <User::loadClockSettings(int)>
c0015828:	c7 04 24 f8 12 03 c0 	mov    DWORD PTR [esp],0xc00312f8
c001582f:	e8 07 a5 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c0015834:	59                   	pop    ecx
c0015835:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001583a:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0015840:	53                   	push   ebx
c0015841:	e8 dc 5d 00 00       	call   c001b622 <Device::loadDriversForAll()>
c0015846:	e8 61 17 ff ff       	call   c0006fac <lwip_init>
c001584b:	c7 04 24 0f 12 03 c0 	mov    DWORD PTR [esp],0xc003120f
c0015852:	e8 e4 a4 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c0015857:	58                   	pop    eax
c0015858:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001585e:	5a                   	pop    edx
c001585f:	6a 01                	push   0x1
c0015861:	68 20 12 03 c0       	push   0xc0031220
c0015866:	e8 c6 f1 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c001586b:	59                   	pop    ecx
c001586c:	5a                   	pop    edx
c001586d:	53                   	push   ebx
c001586e:	50                   	push   eax
c001586f:	e8 0f f4 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	83 ec 0c             	sub    esp,0xc
c001587a:	6a 02                	push   0x2
c001587c:	e8 ef fc 00 00       	call   c0025570 <blockTask(TaskState)>
c0015881:	83 c4 10             	add    esp,0x10
c0015884:	eb f1                	jmp    c0015877 <Krnl::firstTask()+0x133>

c0015886 <Computer::Computer()>:
c0015886:	83 ec 0c             	sub    esp,0xc
c0015889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001588d:	83 ec 08             	sub    esp,0x8
c0015890:	68 3c 12 03 c0       	push   0xc003123c
c0015895:	50                   	push   eax
c0015896:	e8 cd 5d 00 00       	call   c001b668 <Device::Device(char const*)>
c001589b:	83 c4 10             	add    esp,0x10
c001589e:	ba 44 13 03 c0       	mov    edx,0xc0031344
c00158a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158a7:	89 10                	mov    DWORD PTR [eax],edx
c00158a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ad:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00158b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158bb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c00158c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00158cf:	83 ca 04             	or     edx,0x4
c00158d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00158d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158e2:	0f b6 d0             	movzx  edx,al
c00158e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158e9:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00158f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158fa:	0f b6 d0             	movzx  edx,al
c00158fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015901:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0015906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015910:	8d 50 01             	lea    edx,[eax+0x1]
c0015913:	88 d1                	mov    cl,dl
c0015915:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015919:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001591f:	0f b6 d0             	movzx  edx,al
c0015922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015926:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001592a:	83 e1 3f             	and    ecx,0x3f
c001592d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015931:	90                   	nop
c0015932:	83 c4 0c             	add    esp,0xc
c0015935:	c3                   	ret    

c0015936 <Computer::setBootMessage(char const*)>:
c0015936:	c3                   	ret    
c0015937:	90                   	nop

c0015938 <Computer::detectFeatures()>:
c0015938:	55                   	push   ebp
c0015939:	57                   	push   edi
c001593a:	56                   	push   esi
c001593b:	53                   	push   ebx
c001593c:	83 ec 1c             	sub    esp,0x1c
c001593f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015943:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015949:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c001594f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015955:	e8 9f a8 fe ff       	call   c00001f9 <detectCPUID>
c001595a:	31 d2                	xor    edx,edx
c001595c:	85 c0                	test   eax,eax
c001595e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015964:	0f 95 c2             	setne  dl
c0015967:	83 e0 fd             	and    eax,0xfffffffd
c001596a:	d1 e2                	shl    edx,1
c001596c:	09 d0                	or     eax,edx
c001596e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015974:	a8 02                	test   al,0x2
c0015976:	75 51                	jne    c00159c9 <Computer::detectFeatures()+0x91>
c0015978:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c001597f:	74 0f                	je     c0015990 <Computer::detectFeatures()+0x58>
c0015981:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015987:	83 e0 fb             	and    eax,0xfffffffb
c001598a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015990:	e8 e1 8b 01 00       	call   c002e576 <x87Detect>
c0015995:	83 e0 01             	and    eax,0x1
c0015998:	c1 e0 04             	shl    eax,0x4
c001599b:	89 c2                	mov    edx,eax
c001599d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159a3:	83 e0 ef             	and    eax,0xffffffef
c00159a6:	09 d0                	or     eax,edx
c00159a8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159ae:	88 c2                	mov    dl,al
c00159b0:	a8 10                	test   al,0x10
c00159b2:	0f 85 33 01 00 00    	jne    c0015aeb <Computer::detectFeatures()+0x1b3>
c00159b8:	80 e2 80             	and    dl,0x80
c00159bb:	0f 85 4c 01 00 00    	jne    c0015b0d <Computer::detectFeatures()+0x1d5>
c00159c1:	83 c4 1c             	add    esp,0x1c
c00159c4:	5b                   	pop    ebx
c00159c5:	5e                   	pop    esi
c00159c6:	5f                   	pop    edi
c00159c7:	5d                   	pop    ebp
c00159c8:	c3                   	ret    
c00159c9:	83 ec 0c             	sub    esp,0xc
c00159cc:	6a 20                	push   0x20
c00159ce:	e8 a1 97 00 00       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c00159d3:	83 e0 01             	and    eax,0x1
c00159d6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00159dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159e3:	83 e0 f7             	and    eax,0xfffffff7
c00159e6:	09 d0                	or     eax,edx
c00159e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159ee:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00159f5:	e8 7a 97 00 00       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c00159fa:	89 c2                	mov    edx,eax
c00159fc:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a02:	83 e2 01             	and    edx,0x1
c0015a05:	83 e0 fe             	and    eax,0xfffffffe
c0015a08:	09 d0                	or     eax,edx
c0015a0a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a10:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015a17:	e8 58 97 00 00       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c0015a1c:	89 c2                	mov    edx,eax
c0015a1e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a24:	c1 e2 07             	shl    edx,0x7
c0015a27:	83 e0 7f             	and    eax,0x7f
c0015a2a:	09 d0                	or     eax,edx
c0015a2c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a32:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015a39:	e8 36 97 00 00       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	83 e0 01             	and    eax,0x1
c0015a44:	c1 e0 05             	shl    eax,0x5
c0015a47:	89 c2                	mov    edx,eax
c0015a49:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a4f:	83 e0 df             	and    eax,0xffffffdf
c0015a52:	09 d0                	or     eax,edx
c0015a54:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c0015a5e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a64:	0f 84 c9 00 00 00    	je     c0015b33 <Computer::detectFeatures()+0x1fb>
c0015a6a:	83 e0 fe             	and    eax,0xfffffffe
c0015a6d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a73:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a79:	89 c2                	mov    edx,eax
c0015a7b:	83 e2 09             	and    edx,0x9
c0015a7e:	83 fa 01             	cmp    edx,0x1
c0015a81:	75 09                	jne    c0015a8c <Computer::detectFeatures()+0x154>
c0015a83:	83 e0 fe             	and    eax,0xfffffffe
c0015a86:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015a93:	50                   	push   eax
c0015a94:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015a98:	55                   	push   ebp
c0015a99:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015a9d:	57                   	push   edi
c0015a9e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015aa2:	56                   	push   esi
c0015aa3:	68 00 00 00 80       	push   0x80000000
c0015aa8:	e8 43 96 00 00       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015aad:	83 c4 20             	add    esp,0x20
c0015ab0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015ab7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015abb:	0f 86 b7 fe ff ff    	jbe    c0015978 <Computer::detectFeatures()+0x40>
c0015ac1:	83 ec 0c             	sub    esp,0xc
c0015ac4:	50                   	push   eax
c0015ac5:	55                   	push   ebp
c0015ac6:	57                   	push   edi
c0015ac7:	56                   	push   esi
c0015ac8:	68 01 00 00 80       	push   0x80000001
c0015acd:	e8 1e 96 00 00       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015ad2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015ad8:	83 c4 20             	add    esp,0x20
c0015adb:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015ae0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015ae6:	e9 8d fe ff ff       	jmp    c0015978 <Computer::detectFeatures()+0x40>
c0015aeb:	e8 40 8a 01 00       	call   c002e530 <sseDetect>
c0015af0:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015af6:	c1 e0 07             	shl    eax,0x7
c0015af9:	83 e2 7f             	and    edx,0x7f
c0015afc:	09 c2                	or     edx,eax
c0015afe:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015b04:	80 e2 80             	and    dl,0x80
c0015b07:	0f 84 b4 fe ff ff    	je     c00159c1 <Computer::detectFeatures()+0x89>
c0015b0d:	e8 ae 86 01 00       	call   c002e1c0 <avxDetect>
c0015b12:	83 e0 01             	and    eax,0x1
c0015b15:	c1 e0 05             	shl    eax,0x5
c0015b18:	89 c2                	mov    edx,eax
c0015b1a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015b20:	83 e0 df             	and    eax,0xffffffdf
c0015b23:	09 d0                	or     eax,edx
c0015b25:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015b2b:	83 c4 1c             	add    esp,0x1c
c0015b2e:	5b                   	pop    ebx
c0015b2f:	5e                   	pop    esi
c0015b30:	5f                   	pop    edi
c0015b31:	5d                   	pop    ebp
c0015b32:	c3                   	ret    
c0015b33:	83 ec 0c             	sub    esp,0xc
c0015b36:	68 00 02 00 00       	push   0x200
c0015b3b:	e8 34 96 00 00       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c0015b40:	83 c4 10             	add    esp,0x10
c0015b43:	89 c2                	mov    edx,eax
c0015b45:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b4b:	83 e2 01             	and    edx,0x1
c0015b4e:	83 e0 fe             	and    eax,0xfffffffe
c0015b51:	09 d0                	or     eax,edx
c0015b53:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b59:	e9 15 ff ff ff       	jmp    c0015a73 <Computer::detectFeatures()+0x13b>

c0015b5e <Computer::displayFeatures()>:
c0015b5e:	c3                   	ret    
c0015b5f:	90                   	nop

c0015b60 <Computer::rdmsr(unsigned int)>:
c0015b60:	83 ec 0c             	sub    esp,0xc
c0015b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b67:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015b6e:	74 0a                	je     c0015b7a <Computer::rdmsr(unsigned int)+0x1a>
c0015b70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015b74:	0f 32                	rdmsr  
c0015b76:	83 c4 0c             	add    esp,0xc
c0015b79:	c3                   	ret    
c0015b7a:	83 ec 0c             	sub    esp,0xc
c0015b7d:	68 45 12 03 c0       	push   0xc0031245
c0015b82:	e8 17 a9 00 00       	call   c002049e <KePanic(char const*)>
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	eb e4                	jmp    c0015b70 <Computer::rdmsr(unsigned int)+0x10>

c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015b8c:	57                   	push   edi
c0015b8d:	56                   	push   esi
c0015b8e:	83 ec 04             	sub    esp,0x4
c0015b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b95:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015b99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015b9d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015ba4:	74 10                	je     c0015bb6 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015ba6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015baa:	89 f0                	mov    eax,esi
c0015bac:	89 fa                	mov    edx,edi
c0015bae:	0f 30                	wrmsr  
c0015bb0:	83 c4 04             	add    esp,0x4
c0015bb3:	5e                   	pop    esi
c0015bb4:	5f                   	pop    edi
c0015bb5:	c3                   	ret    
c0015bb6:	83 ec 0c             	sub    esp,0xc
c0015bb9:	68 4b 12 03 c0       	push   0xc003124b
c0015bbe:	e8 db a8 00 00       	call   c002049e <KePanic(char const*)>
c0015bc3:	83 c4 10             	add    esp,0x10
c0015bc6:	eb de                	jmp    c0015ba6 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015bc8 <Computer::shutdown()>:
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bcf:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bd1:	6a 00                	push   0x0
c0015bd3:	6a 00                	push   0x0
c0015bd5:	6a 00                	push   0x0
c0015bd7:	50                   	push   eax
c0015bd8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bdb:	83 c4 1c             	add    esp,0x1c
c0015bde:	c3                   	ret    
c0015bdf:	90                   	nop

c0015be0 <Computer::restart()>:
c0015be0:	83 ec 0c             	sub    esp,0xc
c0015be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015be7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015be9:	6a 00                	push   0x0
c0015beb:	6a 00                	push   0x0
c0015bed:	6a 01                	push   0x1
c0015bef:	50                   	push   eax
c0015bf0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bf3:	83 c4 1c             	add    esp,0x1c
c0015bf6:	c3                   	ret    
c0015bf7:	90                   	nop

c0015bf8 <Computer::sleep()>:
c0015bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bfc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015c02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c06:	e9 81 8f 00 00       	jmp    c001eb8c <ACPI::sleep()>
c0015c0b:	90                   	nop

c0015c0c <Computer::nmiEnabled()>:
c0015c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c10:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015c16:	c3                   	ret    
c0015c17:	90                   	nop

c0015c18 <Computer::readCMOS(unsigned char)>:
c0015c18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c20:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015c27:	75 09                	jne    c0015c32 <Computer::readCMOS(unsigned char)+0x1a>
c0015c29:	b2 80                	mov    dl,0x80
c0015c2b:	09 d0                	or     eax,edx
c0015c2d:	e6 70                	out    0x70,al
c0015c2f:	e4 71                	in     al,0x71
c0015c31:	c3                   	ret    
c0015c32:	31 d2                	xor    edx,edx
c0015c34:	eb f5                	jmp    c0015c2b <Computer::readCMOS(unsigned char)+0x13>

c0015c36 <Computer::enableNMI(bool)>:
c0015c36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c3e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015c44:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015c4c:	eb ca                	jmp    c0015c18 <Computer::readCMOS(unsigned char)>

c0015c4e <Computer::open(int, int, void*)>:
c0015c4e:	56                   	push   esi
c0015c4f:	53                   	push   ebx
c0015c50:	83 ec 10             	sub    esp,0x10
c0015c53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c57:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015c5e:	68 51 12 03 c0       	push   0xc0031251
c0015c63:	0f 94 05 80 3e 03 c0 	sete   BYTE PTR ds:0xc0033e80
c0015c6a:	e8 cc a0 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c0015c6f:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015c76:	e8 7b 09 00 00       	call   c00165f6 <malloc>
c0015c7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c7e:	89 c6                	mov    esi,eax
c0015c80:	e8 7b 8a 00 00       	call   c001e700 <ACPI::ACPI()>
c0015c85:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015c8b:	58                   	pop    eax
c0015c8c:	5a                   	pop    edx
c0015c8d:	56                   	push   esi
c0015c8e:	53                   	push   ebx
c0015c8f:	e8 72 58 00 00       	call   c001b506 <Device::addChild(Device*)>
c0015c94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c97:	e8 9c fc ff ff       	call   c0015938 <Computer::detectFeatures()>
c0015c9c:	59                   	pop    ecx
c0015c9d:	5e                   	pop    esi
c0015c9e:	6a 01                	push   0x1
c0015ca0:	53                   	push   ebx
c0015ca1:	e8 90 ff ff ff       	call   c0015c36 <Computer::enableNMI(bool)>
c0015ca6:	c7 04 24 69 12 03 c0 	mov    DWORD PTR [esp],0xc0031269
c0015cad:	e8 89 a0 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c0015cb2:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015cb9:	e8 38 09 00 00       	call   c00165f6 <malloc>
c0015cbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0015cc1:	89 c6                	mov    esi,eax
c0015cc3:	e8 64 95 00 00       	call   c001f22c <CPU::CPU()>
c0015cc8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015cce:	58                   	pop    eax
c0015ccf:	5a                   	pop    edx
c0015cd0:	56                   	push   esi
c0015cd1:	53                   	push   ebx
c0015cd2:	e8 2f 58 00 00       	call   c001b506 <Device::addChild(Device*)>
c0015cd7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015cdd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015ce1:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ce3:	51                   	push   ecx
c0015ce4:	6a 00                	push   0x0
c0015ce6:	6a 00                	push   0x0
c0015ce8:	50                   	push   eax
c0015ce9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015cec:	83 c4 14             	add    esp,0x14
c0015cef:	68 18 13 03 c0       	push   0xc0031318
c0015cf4:	e8 42 a0 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c0015cf9:	e8 02 14 01 00       	call   c0027100 <HalInitialiseCoprocessor()>
c0015cfe:	c7 04 24 83 12 03 c0 	mov    DWORD PTR [esp],0xc0031283
c0015d05:	e8 31 a0 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c0015d0a:	c7 04 24 44 57 01 c0 	mov    DWORD PTR [esp],0xc0015744
c0015d11:	e8 7a f6 00 00       	call   c0025390 <setupMultitasking(void (*)())>
c0015d16:	83 c4 14             	add    esp,0x14
c0015d19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d1e:	5b                   	pop    ebx
c0015d1f:	5e                   	pop    esi
c0015d20:	c3                   	ret    
c0015d21:	90                   	nop

c0015d22 <Computer::disableNMI()>:
c0015d22:	6a 00                	push   0x0
c0015d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d28:	50                   	push   eax
c0015d29:	e8 08 ff ff ff       	call   c0015c36 <Computer::enableNMI(bool)>
c0015d2e:	5a                   	pop    edx
c0015d2f:	59                   	pop    ecx
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop

c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015d32:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d3e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015d45:	75 0b                	jne    c0015d52 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015d47:	b1 80                	mov    cl,0x80
c0015d49:	09 c8                	or     eax,ecx
c0015d4b:	e6 70                	out    0x70,al
c0015d4d:	88 d0                	mov    al,dl
c0015d4f:	e6 71                	out    0x71,al
c0015d51:	c3                   	ret    
c0015d52:	31 c9                	xor    ecx,ecx
c0015d54:	eb f3                	jmp    c0015d49 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015d56 <Computer::handleNMI()>:
c0015d56:	56                   	push   esi
c0015d57:	53                   	push   ebx
c0015d58:	83 ec 10             	sub    esp,0x10
c0015d5b:	e4 92                	in     al,0x92
c0015d5d:	89 c6                	mov    esi,eax
c0015d5f:	e4 61                	in     al,0x61
c0015d61:	68 9e 12 03 c0       	push   0xc003129e
c0015d66:	88 c3                	mov    bl,al
c0015d68:	e8 18 37 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	83 e6 10             	and    esi,0x10
c0015d73:	75 10                	jne    c0015d85 <Computer::handleNMI()+0x2f>
c0015d75:	f6 c3 40             	test   bl,0x40
c0015d78:	75 20                	jne    c0015d9a <Computer::handleNMI()+0x44>
c0015d7a:	80 e3 80             	and    bl,0x80
c0015d7d:	75 30                	jne    c0015daf <Computer::handleNMI()+0x59>
c0015d7f:	83 c4 04             	add    esp,0x4
c0015d82:	5b                   	pop    ebx
c0015d83:	5e                   	pop    esi
c0015d84:	c3                   	ret    
c0015d85:	83 ec 0c             	sub    esp,0xc
c0015d88:	68 af 12 03 c0       	push   0xc00312af
c0015d8d:	e8 0c a7 00 00       	call   c002049e <KePanic(char const*)>
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	f6 c3 40             	test   bl,0x40
c0015d98:	74 e0                	je     c0015d7a <Computer::handleNMI()+0x24>
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	68 bc 12 03 c0       	push   0xc00312bc
c0015da2:	e8 f7 a6 00 00       	call   c002049e <KePanic(char const*)>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	80 e3 80             	and    bl,0x80
c0015dad:	74 d0                	je     c0015d7f <Computer::handleNMI()+0x29>
c0015daf:	c7 44 24 10 c6 12 03 c0 	mov    DWORD PTR [esp+0x10],0xc00312c6
c0015db7:	83 c4 04             	add    esp,0x4
c0015dba:	5b                   	pop    ebx
c0015dbb:	5e                   	pop    esi
c0015dbc:	e9 dd a6 00 00       	jmp    c002049e <KePanic(char const*)>
c0015dc1:	90                   	nop

c0015dc2 <GDTEntry::setBase(unsigned int)>:
c0015dc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dca:	89 c1                	mov    ecx,eax
c0015dcc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015dd0:	c1 e9 10             	shr    ecx,0x10
c0015dd3:	c1 e8 18             	shr    eax,0x18
c0015dd6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015dd9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015ddc:	c3                   	ret    
c0015ddd:	90                   	nop

c0015dde <GDTEntry::setLimit(unsigned int)>:
c0015dde:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015de6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015de9:	66 89 01             	mov    WORD PTR [ecx],ax
c0015dec:	83 e2 f0             	and    edx,0xfffffff0
c0015def:	c1 e8 10             	shr    eax,0x10
c0015df2:	83 e0 0f             	and    eax,0xf
c0015df5:	09 d0                	or     eax,edx
c0015df7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015dfa:	c3                   	ret    
c0015dfb:	90                   	nop

c0015dfc <GDT::GDT()>:
c0015dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e10:	90                   	nop
c0015e11:	c3                   	ret    

c0015e12 <GDT::addEntry(GDTEntry)>:
c0015e12:	53                   	push   ebx
c0015e13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e1b:	8b 02                	mov    eax,DWORD PTR [edx]
c0015e1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e21:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015e25:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015e29:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e2c:	c1 e0 03             	shl    eax,0x3
c0015e2f:	89 0a                	mov    DWORD PTR [edx],ecx
c0015e31:	5b                   	pop    ebx
c0015e32:	c3                   	ret    
c0015e33:	90                   	nop

c0015e34 <GDT::getNumberOfEntries()>:
c0015e34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e3a:	c3                   	ret    
c0015e3b:	90                   	nop

c0015e3c <GDT::flush()>:
c0015e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e40:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e42:	83 c0 04             	add    eax,0x4
c0015e45:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015e4c:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015e51:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015e58:	e9 fd a4 fe ff       	jmp    c000035a <loadGDT>
c0015e5d:	90                   	nop

c0015e5e <GDT::setup()>:
c0015e5e:	57                   	push   edi
c0015e5f:	56                   	push   esi
c0015e60:	53                   	push   ebx
c0015e61:	83 ec 30             	sub    esp,0x30
c0015e64:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015e68:	6a 00                	push   0x0
c0015e6a:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015e6e:	56                   	push   esi
c0015e6f:	e8 4e ff ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015e74:	6a 00                	push   0x0
c0015e76:	56                   	push   esi
c0015e77:	e8 62 ff ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0015e7c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015e84:	6a 00                	push   0x0
c0015e86:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e8a:	56                   	push   esi
c0015e8b:	e8 32 ff ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015e90:	68 ff ff ff 00       	push   0xffffff
c0015e95:	56                   	push   esi
c0015e96:	e8 43 ff ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0015e9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015e9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015ea3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ea7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015eab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015eb0:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015eb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015eb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015ebd:	89 f8                	mov    eax,edi
c0015ebf:	89 fa                	mov    edx,edi
c0015ec1:	80 e4 f7             	and    ah,0xf7
c0015ec4:	80 ce 60             	or     dh,0x60
c0015ec7:	89 c7                	mov    edi,eax
c0015ec9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015ecd:	80 cc 60             	or     ah,0x60
c0015ed0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ed4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015ed8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015edc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ee0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015ee4:	83 c4 20             	add    esp,0x20
c0015ee7:	6a 00                	push   0x0
c0015ee9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015eed:	50                   	push   eax
c0015eee:	e8 cf fe ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015ef3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015ef7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015efb:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015eff:	83 e0 3f             	and    eax,0x3f
c0015f02:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015f06:	6a 00                	push   0x0
c0015f08:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015f0c:	50                   	push   eax
c0015f0d:	e8 b0 fe ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015f12:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015f16:	83 e0 3f             	and    eax,0x3f
c0015f19:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015f1d:	83 c4 0c             	add    esp,0xc
c0015f20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f28:	53                   	push   ebx
c0015f29:	e8 e4 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f2e:	83 c4 0c             	add    esp,0xc
c0015f31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f39:	53                   	push   ebx
c0015f3a:	e8 d3 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f3f:	83 c4 0c             	add    esp,0xc
c0015f42:	57                   	push   edi
c0015f43:	56                   	push   esi
c0015f44:	53                   	push   ebx
c0015f45:	e8 c8 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f4a:	83 c4 0c             	add    esp,0xc
c0015f4d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f51:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f55:	53                   	push   ebx
c0015f56:	e8 b7 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f5b:	83 c4 0c             	add    esp,0xc
c0015f5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f66:	53                   	push   ebx
c0015f67:	e8 a6 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f6c:	83 c4 0c             	add    esp,0xc
c0015f6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f77:	53                   	push   ebx
c0015f78:	e8 95 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f7d:	83 c4 0c             	add    esp,0xc
c0015f80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f88:	53                   	push   ebx
c0015f89:	e8 84 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f91:	e8 a6 fe ff ff       	call   c0015e3c <GDT::flush()>
c0015f96:	83 c4 40             	add    esp,0x40
c0015f99:	5b                   	pop    ebx
c0015f9a:	5e                   	pop    esi
c0015f9b:	5f                   	pop    edi
c0015f9c:	c3                   	ret    

c0015f9d <idleFunction(void*)>:
c0015f9d:	83 ec 0c             	sub    esp,0xc
c0015fa0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015fa5:	48                   	dec    eax
c0015fa6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015fab:	75 01                	jne    c0015fae <idleFunction(void*)+0x11>
c0015fad:	fb                   	sti    
c0015fae:	e8 19 0e 01 00       	call   c0026dcc <HalSystemIdle()>
c0015fb3:	e8 7a 8b 01 00       	call   c002eb32 <idleCommon()>
c0015fb8:	eb f4                	jmp    c0015fae <idleFunction(void*)+0x11>
c0015fba:	66 90                	xchg   ax,ax

c0015fbc <IDTEntry::IDTEntry(bool)>:
c0015fbc:	53                   	push   ebx
c0015fbd:	83 ec 04             	sub    esp,0x4
c0015fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc4:	88 04 24             	mov    BYTE PTR [esp],al
c0015fc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fcb:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fd5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015fd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fdd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015fe0:	83 e2 f0             	and    edx,0xfffffff0
c0015fe3:	83 ca 0e             	or     edx,0xe
c0015fe6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fed:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015ff0:	83 e2 ef             	and    edx,0xffffffef
c0015ff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015ff6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015ffa:	85 c0                	test   eax,eax
c0015ffc:	74 06                	je     c0016004 <IDTEntry::IDTEntry(bool)+0x48>
c0015ffe:	b2 03                	mov    dl,0x3
c0016000:	eb 06                	jmp    c0016008 <IDTEntry::IDTEntry(bool)+0x4c>
c0016002:	66 90                	xchg   ax,ax
c0016004:	b2 00                	mov    dl,0x0
c0016006:	66 90                	xchg   ax,ax
c0016008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001600c:	83 e2 03             	and    edx,0x3
c001600f:	89 d3                	mov    ebx,edx
c0016011:	c1 e3 05             	shl    ebx,0x5
c0016014:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0016017:	83 e2 9f             	and    edx,0xffffff9f
c001601a:	88 d1                	mov    cl,dl
c001601c:	88 da                	mov    dl,bl
c001601e:	09 ca                	or     edx,ecx
c0016020:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016027:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c001602a:	83 ca 80             	or     edx,0xffffff80
c001602d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016030:	90                   	nop
c0016031:	83 c4 04             	add    esp,0x4
c0016034:	5b                   	pop    ebx
c0016035:	c3                   	ret    

c0016036 <IDTEntry::setOffset(unsigned int)>:
c0016036:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001603a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001603e:	66 89 02             	mov    WORD PTR [edx],ax
c0016041:	c1 e8 10             	shr    eax,0x10
c0016044:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0016048:	c3                   	ret    
c0016049:	90                   	nop
c001604a:	66 90                	xchg   ax,ax

c001604c <IDT::IDT()>:
c001604c:	90                   	nop
c001604d:	c3                   	ret    

c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c001604e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016052:	83 c0 30             	add    eax,0x30
c0016055:	c3                   	ret    

c0016056 <IDT::addEntry(IDTEntry, int)>:
c0016056:	53                   	push   ebx
c0016057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001605b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001605f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016063:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016067:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c001606a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c001606e:	5b                   	pop    ebx
c001606f:	c3                   	ret    

c0016070 <IDT::addEntry(int, void (*)(), bool)>:
c0016070:	53                   	push   ebx
c0016071:	83 ec 10             	sub    esp,0x10
c0016074:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0016079:	50                   	push   eax
c001607a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001607e:	53                   	push   ebx
c001607f:	e8 38 ff ff ff       	call   c0015fbc <IDTEntry::IDTEntry(bool)>
c0016084:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016088:	53                   	push   ebx
c0016089:	e8 a8 ff ff ff       	call   c0016036 <IDTEntry::setOffset(unsigned int)>
c001608e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016092:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016096:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001609a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001609e:	e8 b3 ff ff ff       	call   c0016056 <IDT::addEntry(IDTEntry, int)>
c00160a3:	83 c4 30             	add    esp,0x30
c00160a6:	5b                   	pop    ebx
c00160a7:	c3                   	ret    

c00160a8 <IDT::flush()>:
c00160a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00160ac:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c00160b5:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c00160ba:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c00160c1:	c3                   	ret    

c00160c2 <IDT::setup()>:
c00160c2:	57                   	push   edi
c00160c3:	56                   	push   esi
c00160c4:	53                   	push   ebx
c00160c5:	83 ec 10             	sub    esp,0x10
c00160c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160cc:	6a 00                	push   0x0
c00160ce:	68 30 e2 02 c0       	push   0xc002e230
c00160d3:	6a 00                	push   0x0
c00160d5:	53                   	push   ebx
c00160d6:	e8 95 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160db:	6a 00                	push   0x0
c00160dd:	68 40 e2 02 c0       	push   0xc002e240
c00160e2:	6a 01                	push   0x1
c00160e4:	53                   	push   ebx
c00160e5:	e8 86 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160ea:	83 c4 20             	add    esp,0x20
c00160ed:	6a 00                	push   0x0
c00160ef:	68 4a e2 02 c0       	push   0xc002e24a
c00160f4:	6a 02                	push   0x2
c00160f6:	53                   	push   ebx
c00160f7:	e8 74 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160fc:	6a 00                	push   0x0
c00160fe:	68 54 e2 02 c0       	push   0xc002e254
c0016103:	6a 03                	push   0x3
c0016105:	53                   	push   ebx
c0016106:	e8 65 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001610b:	83 c4 20             	add    esp,0x20
c001610e:	6a 00                	push   0x0
c0016110:	68 5e e2 02 c0       	push   0xc002e25e
c0016115:	6a 04                	push   0x4
c0016117:	53                   	push   ebx
c0016118:	e8 53 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001611d:	6a 00                	push   0x0
c001611f:	68 68 e2 02 c0       	push   0xc002e268
c0016124:	6a 05                	push   0x5
c0016126:	53                   	push   ebx
c0016127:	e8 44 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001612c:	83 c4 20             	add    esp,0x20
c001612f:	6a 00                	push   0x0
c0016131:	68 72 e2 02 c0       	push   0xc002e272
c0016136:	6a 06                	push   0x6
c0016138:	53                   	push   ebx
c0016139:	e8 32 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001613e:	6a 00                	push   0x0
c0016140:	68 7c e2 02 c0       	push   0xc002e27c
c0016145:	6a 07                	push   0x7
c0016147:	53                   	push   ebx
c0016148:	e8 23 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001614d:	83 c4 20             	add    esp,0x20
c0016150:	6a 00                	push   0x0
c0016152:	68 86 e2 02 c0       	push   0xc002e286
c0016157:	6a 08                	push   0x8
c0016159:	53                   	push   ebx
c001615a:	e8 11 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001615f:	6a 00                	push   0x0
c0016161:	68 8e e2 02 c0       	push   0xc002e28e
c0016166:	6a 09                	push   0x9
c0016168:	53                   	push   ebx
c0016169:	e8 02 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001616e:	83 c4 20             	add    esp,0x20
c0016171:	6a 00                	push   0x0
c0016173:	68 98 e2 02 c0       	push   0xc002e298
c0016178:	6a 0a                	push   0xa
c001617a:	53                   	push   ebx
c001617b:	e8 f0 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016180:	6a 00                	push   0x0
c0016182:	68 a0 e2 02 c0       	push   0xc002e2a0
c0016187:	6a 0b                	push   0xb
c0016189:	53                   	push   ebx
c001618a:	e8 e1 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001618f:	83 c4 20             	add    esp,0x20
c0016192:	6a 00                	push   0x0
c0016194:	68 a8 e2 02 c0       	push   0xc002e2a8
c0016199:	6a 0c                	push   0xc
c001619b:	53                   	push   ebx
c001619c:	e8 cf fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161a1:	6a 00                	push   0x0
c00161a3:	68 b0 e2 02 c0       	push   0xc002e2b0
c00161a8:	6a 0d                	push   0xd
c00161aa:	53                   	push   ebx
c00161ab:	e8 c0 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161b0:	83 c4 20             	add    esp,0x20
c00161b3:	6a 00                	push   0x0
c00161b5:	68 ca e2 02 c0       	push   0xc002e2ca
c00161ba:	6a 0e                	push   0xe
c00161bc:	53                   	push   ebx
c00161bd:	e8 ae fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161c2:	6a 00                	push   0x0
c00161c4:	68 d2 e2 02 c0       	push   0xc002e2d2
c00161c9:	6a 0f                	push   0xf
c00161cb:	53                   	push   ebx
c00161cc:	e8 9f fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161d1:	83 c4 20             	add    esp,0x20
c00161d4:	6a 00                	push   0x0
c00161d6:	68 dc e2 02 c0       	push   0xc002e2dc
c00161db:	6a 10                	push   0x10
c00161dd:	53                   	push   ebx
c00161de:	e8 8d fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161e3:	6a 00                	push   0x0
c00161e5:	68 e6 e2 02 c0       	push   0xc002e2e6
c00161ea:	6a 11                	push   0x11
c00161ec:	53                   	push   ebx
c00161ed:	e8 7e fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161f2:	83 c4 20             	add    esp,0x20
c00161f5:	6a 00                	push   0x0
c00161f7:	68 f0 e2 02 c0       	push   0xc002e2f0
c00161fc:	6a 12                	push   0x12
c00161fe:	53                   	push   ebx
c00161ff:	e8 6c fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016204:	6a 01                	push   0x1
c0016206:	68 8a e3 02 c0       	push   0xc002e38a
c001620b:	6a 60                	push   0x60
c001620d:	53                   	push   ebx
c001620e:	e8 5d fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016213:	83 c4 20             	add    esp,0x20
c0016216:	6a 00                	push   0x0
c0016218:	68 91 e3 02 c0       	push   0xc002e391
c001621d:	6a 20                	push   0x20
c001621f:	53                   	push   ebx
c0016220:	e8 4b fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016225:	6a 00                	push   0x0
c0016227:	68 7c e3 02 c0       	push   0xc002e37c
c001622c:	6a 21                	push   0x21
c001622e:	53                   	push   ebx
c001622f:	e8 3c fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016234:	83 c4 20             	add    esp,0x20
c0016237:	6a 00                	push   0x0
c0016239:	68 83 e3 02 c0       	push   0xc002e383
c001623e:	6a 22                	push   0x22
c0016240:	53                   	push   ebx
c0016241:	e8 2a fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016246:	6a 00                	push   0x0
c0016248:	68 fa e2 02 c0       	push   0xc002e2fa
c001624d:	6a 23                	push   0x23
c001624f:	53                   	push   ebx
c0016250:	e8 1b fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016255:	83 c4 20             	add    esp,0x20
c0016258:	6a 00                	push   0x0
c001625a:	68 04 e3 02 c0       	push   0xc002e304
c001625f:	6a 24                	push   0x24
c0016261:	53                   	push   ebx
c0016262:	e8 09 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016267:	6a 00                	push   0x0
c0016269:	68 0e e3 02 c0       	push   0xc002e30e
c001626e:	6a 25                	push   0x25
c0016270:	53                   	push   ebx
c0016271:	e8 fa fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016276:	83 c4 20             	add    esp,0x20
c0016279:	6a 00                	push   0x0
c001627b:	68 18 e3 02 c0       	push   0xc002e318
c0016280:	6a 26                	push   0x26
c0016282:	53                   	push   ebx
c0016283:	e8 e8 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016288:	6a 00                	push   0x0
c001628a:	68 22 e3 02 c0       	push   0xc002e322
c001628f:	6a 27                	push   0x27
c0016291:	53                   	push   ebx
c0016292:	e8 d9 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016297:	83 c4 20             	add    esp,0x20
c001629a:	6a 00                	push   0x0
c001629c:	68 2c e3 02 c0       	push   0xc002e32c
c00162a1:	6a 28                	push   0x28
c00162a3:	53                   	push   ebx
c00162a4:	e8 c7 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162a9:	6a 00                	push   0x0
c00162ab:	68 36 e3 02 c0       	push   0xc002e336
c00162b0:	6a 29                	push   0x29
c00162b2:	53                   	push   ebx
c00162b3:	e8 b8 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162b8:	83 c4 20             	add    esp,0x20
c00162bb:	6a 00                	push   0x0
c00162bd:	68 40 e3 02 c0       	push   0xc002e340
c00162c2:	6a 2a                	push   0x2a
c00162c4:	53                   	push   ebx
c00162c5:	e8 a6 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162ca:	6a 00                	push   0x0
c00162cc:	68 4a e3 02 c0       	push   0xc002e34a
c00162d1:	6a 2b                	push   0x2b
c00162d3:	53                   	push   ebx
c00162d4:	e8 97 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162d9:	83 c4 20             	add    esp,0x20
c00162dc:	6a 00                	push   0x0
c00162de:	68 54 e3 02 c0       	push   0xc002e354
c00162e3:	6a 2c                	push   0x2c
c00162e5:	53                   	push   ebx
c00162e6:	e8 85 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162eb:	6a 00                	push   0x0
c00162ed:	68 5e e3 02 c0       	push   0xc002e35e
c00162f2:	6a 2d                	push   0x2d
c00162f4:	53                   	push   ebx
c00162f5:	e8 76 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162fa:	83 c4 20             	add    esp,0x20
c00162fd:	6a 00                	push   0x0
c00162ff:	68 68 e3 02 c0       	push   0xc002e368
c0016304:	6a 2e                	push   0x2e
c0016306:	53                   	push   ebx
c0016307:	e8 64 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001630c:	6a 00                	push   0x0
c001630e:	68 72 e3 02 c0       	push   0xc002e372
c0016313:	6a 2f                	push   0x2f
c0016315:	53                   	push   ebx
c0016316:	e8 55 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001631b:	83 c4 20             	add    esp,0x20
c001631e:	6a 00                	push   0x0
c0016320:	68 cc e4 02 c0       	push   0xc002e4cc
c0016325:	6a 30                	push   0x30
c0016327:	53                   	push   ebx
c0016328:	e8 43 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001632d:	6a 00                	push   0x0
c001632f:	68 d6 e4 02 c0       	push   0xc002e4d6
c0016334:	6a 31                	push   0x31
c0016336:	53                   	push   ebx
c0016337:	e8 34 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001633c:	83 c4 20             	add    esp,0x20
c001633f:	6a 00                	push   0x0
c0016341:	68 e0 e4 02 c0       	push   0xc002e4e0
c0016346:	6a 32                	push   0x32
c0016348:	53                   	push   ebx
c0016349:	e8 22 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001634e:	6a 00                	push   0x0
c0016350:	68 ea e4 02 c0       	push   0xc002e4ea
c0016355:	6a 33                	push   0x33
c0016357:	53                   	push   ebx
c0016358:	e8 13 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001635d:	83 c4 20             	add    esp,0x20
c0016360:	6a 00                	push   0x0
c0016362:	68 f4 e4 02 c0       	push   0xc002e4f4
c0016367:	6a 34                	push   0x34
c0016369:	53                   	push   ebx
c001636a:	e8 01 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001636f:	6a 00                	push   0x0
c0016371:	68 fe e4 02 c0       	push   0xc002e4fe
c0016376:	6a 35                	push   0x35
c0016378:	53                   	push   ebx
c0016379:	e8 f2 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001637e:	83 c4 20             	add    esp,0x20
c0016381:	6a 00                	push   0x0
c0016383:	68 08 e5 02 c0       	push   0xc002e508
c0016388:	6a 36                	push   0x36
c001638a:	53                   	push   ebx
c001638b:	e8 e0 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016390:	6a 00                	push   0x0
c0016392:	68 12 e5 02 c0       	push   0xc002e512
c0016397:	6a 37                	push   0x37
c0016399:	53                   	push   ebx
c001639a:	e8 d1 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001639f:	83 c4 1c             	add    esp,0x1c
c00163a2:	6a 03                	push   0x3
c00163a4:	6a 02                	push   0x2
c00163a6:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00163ac:	e8 b3 25 00 00       	call   c0018964 <VAS::allocatePages(int, int)>
c00163b1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00163b8:	89 c6                	mov    esi,eax
c00163ba:	e8 37 02 00 00       	call   c00165f6 <malloc>
c00163bf:	81 c6 00 20 00 00    	add    esi,0x2000
c00163c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00163c8:	89 c7                	mov    edi,eax
c00163ca:	e8 b5 16 00 00       	call   c0017a84 <TSS::TSS()>
c00163cf:	83 c4 0c             	add    esp,0xc
c00163d2:	68 86 e2 02 c0       	push   0xc002e286
c00163d7:	56                   	push   esi
c00163d8:	57                   	push   edi
c00163d9:	e8 ea 16 00 00       	call   c0017ac8 <TSS::setup(unsigned long, unsigned long)>
c00163de:	89 c6                	mov    esi,eax
c00163e0:	58                   	pop    eax
c00163e1:	5a                   	pop    edx
c00163e2:	6a 00                	push   0x0
c00163e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00163e8:	50                   	push   eax
c00163e9:	e8 ce fb ff ff       	call   c0015fbc <IDTEntry::IDTEntry(bool)>
c00163ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163f2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00163f7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00163fe:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016404:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016408:	80 ce 05             	or     dh,0x5
c001640b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c001640e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016412:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016416:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016419:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001641c:	e8 87 fc ff ff       	call   c00160a8 <IDT::flush()>
c0016421:	83 c4 20             	add    esp,0x20
c0016424:	5b                   	pop    ebx
c0016425:	5e                   	pop    esi
c0016426:	5f                   	pop    edi
c0016427:	c3                   	ret    

c0016428 <sbrk>:
c0016428:	55                   	push   ebp
c0016429:	57                   	push   edi
c001642a:	56                   	push   esi
c001642b:	53                   	push   ebx
c001642c:	83 ec 1c             	sub    esp,0x1c
c001642f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016433:	85 c0                	test   eax,eax
c0016435:	74 61                	je     c0016498 <sbrk+0x70>
c0016437:	78 66                	js     c001649f <sbrk+0x77>
c0016439:	8b 15 64 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e64
c001643f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016443:	05 ff 0f 00 00       	add    eax,0xfff
c0016448:	89 c5                	mov    ebp,eax
c001644a:	78 6b                	js     c00164b7 <sbrk+0x8f>
c001644c:	c1 fd 0c             	sar    ebp,0xc
c001644f:	bb 00 00 00 00       	mov    ebx,0x0
c0016454:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c001645a:	8b 3d 64 3e 03 c0    	mov    edi,DWORD PTR ds:0xc0033e64
c0016460:	e8 9a 04 00 00       	call   c00168ff <Phys::allocatePage()>
c0016465:	68 01 04 00 00       	push   0x401
c001646a:	57                   	push   edi
c001646b:	50                   	push   eax
c001646c:	56                   	push   esi
c001646d:	e8 ee 23 00 00       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016472:	81 05 64 3e 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033e64,0x1000
c001647c:	83 c3 01             	add    ebx,0x1
c001647f:	83 c4 10             	add    esp,0x10
c0016482:	39 dd                	cmp    ebp,ebx
c0016484:	75 ce                	jne    c0016454 <sbrk+0x2c>
c0016486:	0f 20 d8             	mov    eax,cr3
c0016489:	0f 22 d8             	mov    cr3,eax
c001648c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016490:	83 c4 1c             	add    esp,0x1c
c0016493:	5b                   	pop    ebx
c0016494:	5e                   	pop    esi
c0016495:	5f                   	pop    edi
c0016496:	5d                   	pop    ebp
c0016497:	c3                   	ret    
c0016498:	a1 64 3e 03 c0       	mov    eax,ds:0xc0033e64
c001649d:	eb f1                	jmp    c0016490 <sbrk+0x68>
c001649f:	83 ec 08             	sub    esp,0x8
c00164a2:	50                   	push   eax
c00164a3:	68 68 13 03 c0       	push   0xc0031368
c00164a8:	e8 d8 2f 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164b5:	eb d9                	jmp    c0016490 <sbrk+0x68>
c00164b7:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00164bd:	eb 8d                	jmp    c001644c <sbrk+0x24>

c00164bf <sbrk_thunk>:
c00164bf:	83 ec 0c             	sub    esp,0xc
c00164c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c6:	3d ff bf 00 00       	cmp    eax,0xbfff
c00164cb:	7f 10                	jg     c00164dd <sbrk_thunk+0x1e>
c00164cd:	83 ec 0c             	sub    esp,0xc
c00164d0:	50                   	push   eax
c00164d1:	e8 52 ff ff ff       	call   c0016428 <sbrk>
c00164d6:	83 c4 10             	add    esp,0x10
c00164d9:	83 c4 0c             	add    esp,0xc
c00164dc:	c3                   	ret    
c00164dd:	83 ec 08             	sub    esp,0x8
c00164e0:	50                   	push   eax
c00164e1:	68 e9 13 03 c0       	push   0xc00313e9
c00164e6:	e8 9a 2f 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164f3:	eb e4                	jmp    c00164d9 <sbrk_thunk+0x1a>

c00164f5 <mmap>:
c00164f5:	55                   	push   ebp
c00164f6:	57                   	push   edi
c00164f7:	56                   	push   esi
c00164f8:	53                   	push   ebx
c00164f9:	83 ec 10             	sub    esp,0x10
c00164fc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016500:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0016504:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0016508:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001650c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0016510:	56                   	push   esi
c0016511:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0016515:	68 98 13 03 c0       	push   0xc0031398
c001651a:	e8 66 2f 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001651f:	81 c6 ff 0f 00 00    	add    esi,0xfff
c0016525:	89 f3                	mov    ebx,esi
c0016527:	c1 eb 0c             	shr    ebx,0xc
c001652a:	83 c4 14             	add    esp,0x14
c001652d:	53                   	push   ebx
c001652e:	e8 1a 1c 00 00       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c0016533:	89 c5                	mov    ebp,eax
c0016535:	83 c4 10             	add    esp,0x10
c0016538:	85 db                	test   ebx,ebx
c001653a:	7e 2f                	jle    c001656b <mmap+0x76>
c001653c:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0016542:	01 c6                	add    esi,eax
c0016544:	89 c3                	mov    ebx,eax
c0016546:	8b 3d b0 aa 03 c0    	mov    edi,DWORD PTR ds:0xc003aab0
c001654c:	e8 ae 03 00 00       	call   c00168ff <Phys::allocatePage()>
c0016551:	68 01 04 00 00       	push   0x401
c0016556:	53                   	push   ebx
c0016557:	50                   	push   eax
c0016558:	57                   	push   edi
c0016559:	e8 02 23 00 00       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c001655e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016564:	83 c4 10             	add    esp,0x10
c0016567:	39 f3                	cmp    ebx,esi
c0016569:	75 db                	jne    c0016546 <mmap+0x51>
c001656b:	89 e8                	mov    eax,ebp
c001656d:	83 c4 0c             	add    esp,0xc
c0016570:	5b                   	pop    ebx
c0016571:	5e                   	pop    esi
c0016572:	5f                   	pop    edi
c0016573:	5d                   	pop    ebp
c0016574:	c3                   	ret    

c0016575 <munmap>:
c0016575:	83 ec 18             	sub    esp,0x18
c0016578:	68 f8 13 03 c0       	push   0xc00313f8
c001657d:	e8 1c 9f 00 00       	call   c002049e <KePanic(char const*)>
c0016582:	b8 00 00 00 00       	mov    eax,0x0
c0016587:	83 c4 1c             	add    esp,0x1c
c001658a:	c3                   	ret    

c001658b <liballoc_lock()>:
c001658b:	fa                   	cli    
c001658c:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c0016593:	b8 00 00 00 00       	mov    eax,0x0
c0016598:	c3                   	ret    

c0016599 <liballoc_unlock()>:
c0016599:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001659e:	83 e8 01             	sub    eax,0x1
c00165a1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00165a6:	75 01                	jne    c00165a9 <liballoc_unlock()+0x10>
c00165a8:	fb                   	sti    
c00165a9:	b8 00 00 00 00       	mov    eax,0x0
c00165ae:	c3                   	ret    

c00165af <liballoc_alloc(int)>:
c00165af:	83 ec 10             	sub    esp,0x10
c00165b2:	6a 01                	push   0x1
c00165b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165b8:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00165be:	e8 a1 23 00 00       	call   c0018964 <VAS::allocatePages(int, int)>
c00165c3:	83 c4 1c             	add    esp,0x1c
c00165c6:	c3                   	ret    

c00165c7 <liballoc_free(void*, int)>:
c00165c7:	83 ec 14             	sub    esp,0x14
c00165ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165ce:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00165d4:	e8 cf 1f 00 00       	call   c00185a8 <VAS::freeAllocatedPages(unsigned long)>
c00165d9:	b8 00 00 00 00       	mov    eax,0x0
c00165de:	83 c4 1c             	add    esp,0x1c
c00165e1:	c3                   	ret    

c00165e2 <realloc>:
c00165e2:	83 ec 14             	sub    esp,0x14
c00165e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ed:	e8 1b b3 fe ff       	call   c000190d <dlrealloc>
c00165f2:	83 c4 1c             	add    esp,0x1c
c00165f5:	c3                   	ret    

c00165f6 <malloc>:
c00165f6:	83 ec 18             	sub    esp,0x18
c00165f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165fd:	e8 ce ad fe ff       	call   c00013d0 <dlmalloc>
c0016602:	83 c4 1c             	add    esp,0x1c
c0016605:	c3                   	ret    

c0016606 <free>:
c0016606:	83 ec 18             	sub    esp,0x18
c0016609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001660d:	e8 f7 a8 fe ff       	call   c0000f09 <dlfree>
c0016612:	83 c4 1c             	add    esp,0x1c
c0016615:	c3                   	ret    

c0016616 <rfree>:
c0016616:	83 ec 18             	sub    esp,0x18
c0016619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001661d:	e8 e7 a8 fe ff       	call   c0000f09 <dlfree>
c0016622:	83 c4 1c             	add    esp,0x1c
c0016625:	c3                   	ret    

c0016626 <calloc>:
c0016626:	56                   	push   esi
c0016627:	53                   	push   ebx
c0016628:	83 ec 10             	sub    esp,0x10
c001662b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001662f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0016634:	53                   	push   ebx
c0016635:	e8 bc ff ff ff       	call   c00165f6 <malloc>
c001663a:	89 c6                	mov    esi,eax
c001663c:	83 c4 0c             	add    esp,0xc
c001663f:	53                   	push   ebx
c0016640:	6a 00                	push   0x0
c0016642:	50                   	push   eax
c0016643:	e8 a8 9e fe ff       	call   c00004f0 <memset>
c0016648:	89 f0                	mov    eax,esi
c001664a:	83 c4 14             	add    esp,0x14
c001664d:	5b                   	pop    ebx
c001664e:	5e                   	pop    esi
c001664f:	c3                   	ret    

c0016650 <KeEntryPoint>:
c0016650:	57                   	push   edi
c0016651:	bf f9 03 00 00       	mov    edi,0x3f9
c0016656:	56                   	push   esi
c0016657:	89 fa                	mov    edx,edi
c0016659:	53                   	push   ebx
c001665a:	31 f6                	xor    esi,esi
c001665c:	83 ec 2c             	sub    esp,0x2c
c001665f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016664:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016669:	89 f0                	mov    eax,esi
c001666b:	ee                   	out    dx,al
c001666c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016671:	b0 80                	mov    al,0x80
c0016673:	89 da                	mov    edx,ebx
c0016675:	ee                   	out    dx,al
c0016676:	b1 03                	mov    cl,0x3
c0016678:	ba f8 03 00 00       	mov    edx,0x3f8
c001667d:	88 c8                	mov    al,cl
c001667f:	ee                   	out    dx,al
c0016680:	89 f0                	mov    eax,esi
c0016682:	89 fa                	mov    edx,edi
c0016684:	ee                   	out    dx,al
c0016685:	88 c8                	mov    al,cl
c0016687:	89 da                	mov    edx,ebx
c0016689:	ee                   	out    dx,al
c001668a:	b0 c7                	mov    al,0xc7
c001668c:	ba fa 03 00 00       	mov    edx,0x3fa
c0016691:	ee                   	out    dx,al
c0016692:	b0 0b                	mov    al,0xb
c0016694:	ba fc 03 00 00       	mov    edx,0x3fc
c0016699:	ee                   	out    dx,al
c001669a:	68 ff 13 03 c0       	push   0xc00313ff
c001669f:	e8 e1 2d 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00166a4:	e8 16 96 00 00       	call   c001fcbf <KeDisplaySplashScreen()>
c00166a9:	a1 24 05 00 00       	mov    eax,ds:0x524
c00166ae:	05 ff 0f 00 00       	add    eax,0xfff
c00166b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00166b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00166bb:	e8 ad 03 00 00       	call   c0016a6d <Phys::physicalMemorySetup(unsigned int)>
c00166c0:	e8 66 1c 00 00       	call   c001832b <Virt::virtualMemorySetup()>
c00166c5:	e8 3f 95 00 00       	call   c001fc09 <KeInitialiseAtexit()>
c00166ca:	58                   	pop    eax
c00166cb:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00166cf:	53                   	push   ebx
c00166d0:	e8 53 1f 00 00       	call   c0018628 <VAS::VAS()>
c00166d5:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c00166db:	e8 ea 83 01 00       	call   c002eaca <_init>
c00166e0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00166e7:	e8 0a ff ff ff       	call   c00165f6 <malloc>
c00166ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00166ef:	89 c6                	mov    esi,eax
c00166f1:	e8 90 f1 ff ff       	call   c0015886 <Computer::Computer()>
c00166f6:	53                   	push   ebx
c00166f7:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00166fd:	6a 00                	push   0x0
c00166ff:	6a 00                	push   0x0
c0016701:	56                   	push   esi
c0016702:	e8 47 f5 ff ff       	call   c0015c4e <Computer::open(int, int, void*)>
c0016707:	83 c4 14             	add    esp,0x14
c001670a:	53                   	push   ebx
c001670b:	e8 e2 1f 00 00       	call   c00186f2 <VAS::~VAS()>
c0016710:	83 c4 30             	add    esp,0x30
c0016713:	5b                   	pop    ebx
c0016714:	5e                   	pop    esi
c0016715:	5f                   	pop    edi
c0016716:	c3                   	ret    

c0016717 <Phys::allocateDMA(unsigned long)>:
c0016717:	55                   	push   ebp
c0016718:	31 ed                	xor    ebp,ebp
c001671a:	57                   	push   edi
c001671b:	56                   	push   esi
c001671c:	53                   	push   ebx
c001671d:	31 db                	xor    ebx,ebx
c001671f:	83 ec 1c             	sub    esp,0x1c
c0016722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016726:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001672e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0016734:	31 c0                	xor    eax,eax
c0016736:	c1 ef 0c             	shr    edi,0xc
c0016739:	eb 1b                	jmp    c0016756 <Phys::allocateDMA(unsigned long)+0x3f>
c001673b:	85 c0                	test   eax,eax
c001673d:	75 06                	jne    c0016745 <Phys::allocateDMA(unsigned long)+0x2e>
c001673f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016743:	89 dd                	mov    ebp,ebx
c0016745:	8d 70 01             	lea    esi,[eax+0x1]
c0016748:	39 f7                	cmp    edi,esi
c001674a:	74 37                	je     c0016783 <Phys::allocateDMA(unsigned long)+0x6c>
c001674c:	89 f0                	mov    eax,esi
c001674e:	83 c3 01             	add    ebx,0x1
c0016751:	83 fb 0f             	cmp    ebx,0xf
c0016754:	7f 13                	jg     c0016769 <Phys::allocateDMA(unsigned long)+0x52>
c0016756:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c001675d:	74 dc                	je     c001673b <Phys::allocateDMA(unsigned long)+0x24>
c001675f:	31 c0                	xor    eax,eax
c0016761:	83 c3 01             	add    ebx,0x1
c0016764:	83 fb 0f             	cmp    ebx,0xf
c0016767:	7e ed                	jle    c0016756 <Phys::allocateDMA(unsigned long)+0x3f>
c0016769:	83 ec 0c             	sub    esp,0xc
c001676c:	68 18 14 03 c0       	push   0xc0031418
c0016771:	e8 28 9d 00 00       	call   c002049e <KePanic(char const*)>
c0016776:	83 c4 10             	add    esp,0x10
c0016779:	31 c0                	xor    eax,eax
c001677b:	83 c4 1c             	add    esp,0x1c
c001677e:	5b                   	pop    ebx
c001677f:	5e                   	pop    esi
c0016780:	5f                   	pop    edi
c0016781:	5d                   	pop    ebp
c0016782:	c3                   	ret    
c0016783:	89 e9                	mov    ecx,ebp
c0016785:	c1 f9 04             	sar    ecx,0x4
c0016788:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001678c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0016790:	89 ca                	mov    edx,ecx
c0016792:	83 ea 01             	sub    edx,0x1
c0016795:	79 03                	jns    c001679a <Phys::allocateDMA(unsigned long)+0x83>
c0016797:	8d 51 0e             	lea    edx,[ecx+0xe]
c001679a:	c1 fa 04             	sar    edx,0x4
c001679d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00167a1:	74 08                	je     c00167ab <Phys::allocateDMA(unsigned long)+0x94>
c00167a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00167a7:	31 c0                	xor    eax,eax
c00167a9:	eb b6                	jmp    c0016761 <Phys::allocateDMA(unsigned long)+0x4a>
c00167ab:	85 f6                	test   esi,esi
c00167ad:	74 17                	je     c00167c6 <Phys::allocateDMA(unsigned long)+0xaf>
c00167af:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c00167b5:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c00167bc:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00167bf:	83 c2 01             	add    edx,0x1
c00167c2:	39 d0                	cmp    eax,edx
c00167c4:	75 f6                	jne    c00167bc <Phys::allocateDMA(unsigned long)+0xa5>
c00167c6:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00167cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167cf:	01 f8                	add    eax,edi
c00167d1:	85 d2                	test   edx,edx
c00167d3:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00167d8:	74 17                	je     c00167f1 <Phys::allocateDMA(unsigned long)+0xda>
c00167da:	83 ec 0c             	sub    esp,0xc
c00167dd:	68 18 14 03 c0       	push   0xc0031418
c00167e2:	e8 b7 9c 00 00       	call   c002049e <KePanic(char const*)>
c00167e7:	83 c4 10             	add    esp,0x10
c00167ea:	89 f0                	mov    eax,esi
c00167ec:	e9 5d ff ff ff       	jmp    c001674e <Phys::allocateDMA(unsigned long)+0x37>
c00167f1:	c1 e5 0c             	shl    ebp,0xc
c00167f4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00167fa:	e9 7c ff ff ff       	jmp    c001677b <Phys::allocateDMA(unsigned long)+0x64>

c00167ff <Phys::freeDMA(unsigned long, unsigned long)>:
c00167ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016803:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0016809:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001680e:	c1 ea 0c             	shr    edx,0xc
c0016811:	29 d0                	sub    eax,edx
c0016813:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001681c:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0016821:	c1 e8 0c             	shr    eax,0xc
c0016824:	85 d2                	test   edx,edx
c0016826:	74 11                	je     c0016839 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0016828:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c001682d:	01 c2                	add    edx,eax
c001682f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016832:	83 c0 01             	add    eax,0x1
c0016835:	39 d0                	cmp    eax,edx
c0016837:	75 f6                	jne    c001682f <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0016839:	c3                   	ret    

c001683a <Phys::setPageState(unsigned long, bool)>:
c001683a:	57                   	push   edi
c001683b:	56                   	push   esi
c001683c:	8b 35 68 3e 03 c0    	mov    esi,DWORD PTR ds:0xc0033e68
c0016842:	53                   	push   ebx
c0016843:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001684c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016850:	0f b6 c0             	movzx  eax,al
c0016853:	89 ca                	mov    edx,ecx
c0016855:	83 e1 07             	and    ecx,0x7
c0016858:	c1 ea 03             	shr    edx,0x3
c001685b:	d3 c3                	rol    ebx,cl
c001685d:	01 d6                	add    esi,edx
c001685f:	d3 e0                	shl    eax,cl
c0016861:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016864:	21 fb                	and    ebx,edi
c0016866:	88 1e                	mov    BYTE PTR [esi],bl
c0016868:	8b 1d 68 3e 03 c0    	mov    ebx,DWORD PTR ds:0xc0033e68
c001686e:	01 da                	add    edx,ebx
c0016870:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016872:	09 c8                	or     eax,ecx
c0016874:	88 02                	mov    BYTE PTR [edx],al
c0016876:	5b                   	pop    ebx
c0016877:	5e                   	pop    esi
c0016878:	5f                   	pop    edi
c0016879:	c3                   	ret    

c001687a <Phys::getPageState(unsigned long)>:
c001687a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001687e:	8b 15 68 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e68
c0016884:	89 c8                	mov    eax,ecx
c0016886:	83 e1 07             	and    ecx,0x7
c0016889:	c1 e8 03             	shr    eax,0x3
c001688c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016890:	d3 f8                	sar    eax,cl
c0016892:	83 e0 01             	and    eax,0x1
c0016895:	c3                   	ret    

c0016896 <Phys::freePage(unsigned long)>:
c0016896:	53                   	push   ebx
c0016897:	83 ec 08             	sub    esp,0x8
c001689a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001689e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00168a4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00168aa:	76 41                	jbe    c00168ed <Phys::freePage(unsigned long)+0x57>
c00168ac:	c1 e8 0c             	shr    eax,0xc
c00168af:	50                   	push   eax
c00168b0:	89 c3                	mov    ebx,eax
c00168b2:	e8 c3 ff ff ff       	call   c001687a <Phys::getPageState(unsigned long)>
c00168b7:	5a                   	pop    edx
c00168b8:	84 c0                	test   al,al
c00168ba:	74 20                	je     c00168dc <Phys::freePage(unsigned long)+0x46>
c00168bc:	83 ec 08             	sub    esp,0x8
c00168bf:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00168c4:	6a 00                	push   0x0
c00168c6:	83 e8 01             	sub    eax,0x1
c00168c9:	53                   	push   ebx
c00168ca:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00168cf:	e8 66 ff ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c00168d4:	83 c4 10             	add    esp,0x10
c00168d7:	83 c4 08             	add    esp,0x8
c00168da:	5b                   	pop    ebx
c00168db:	c3                   	ret    
c00168dc:	c7 44 24 10 bd 14 03 c0 	mov    DWORD PTR [esp+0x10],0xc00314bd
c00168e4:	83 c4 08             	add    esp,0x8
c00168e7:	5b                   	pop    ebx
c00168e8:	e9 b1 9b 00 00       	jmp    c002049e <KePanic(char const*)>
c00168ed:	68 00 10 00 00       	push   0x1000
c00168f2:	50                   	push   eax
c00168f3:	e8 07 ff ff ff       	call   c00167ff <Phys::freeDMA(unsigned long, unsigned long)>
c00168f8:	59                   	pop    ecx
c00168f9:	5b                   	pop    ebx
c00168fa:	83 c4 08             	add    esp,0x8
c00168fd:	5b                   	pop    ebx
c00168fe:	c3                   	ret    

c00168ff <Phys::allocatePage()>:
c00168ff:	56                   	push   esi
c0016900:	53                   	push   ebx
c0016901:	83 ec 14             	sub    esp,0x14
c0016904:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c001690a:	89 f3                	mov    ebx,esi
c001690c:	eb 0a                	jmp    c0016918 <Phys::allocatePage()+0x19>
c001690e:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c0016914:	39 de                	cmp    esi,ebx
c0016916:	74 26                	je     c001693e <Phys::allocatePage()+0x3f>
c0016918:	53                   	push   ebx
c0016919:	e8 5c ff ff ff       	call   c001687a <Phys::getPageState(unsigned long)>
c001691e:	5a                   	pop    edx
c001691f:	84 c0                	test   al,al
c0016921:	74 67                	je     c001698a <Phys::allocatePage()+0x8b>
c0016923:	83 c3 01             	add    ebx,0x1
c0016926:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001692c:	75 e0                	jne    c001690e <Phys::allocatePage()+0xf>
c001692e:	31 db                	xor    ebx,ebx
c0016930:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c001693a:	39 de                	cmp    esi,ebx
c001693c:	75 da                	jne    c0016918 <Phys::allocatePage()+0x19>
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c0016946:	83 f0 01             	xor    eax,0x1
c0016949:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c001694e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016953:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016956:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001695c:	50                   	push   eax
c001695d:	e8 a8 27 00 00       	call   c001910a <VAS::scanForEviction()>
c0016962:	83 c4 10             	add    esp,0x10
c0016965:	85 c0                	test   eax,eax
c0016967:	75 48                	jne    c00169b1 <Phys::allocatePage()+0xb2>
c0016969:	83 ec 0c             	sub    esp,0xc
c001696c:	68 40 14 03 c0       	push   0xc0031440
c0016971:	e8 28 9b 00 00       	call   c002049e <KePanic(char const*)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c001697f:	53                   	push   ebx
c0016980:	e8 f5 fe ff ff       	call   c001687a <Phys::getPageState(unsigned long)>
c0016985:	5a                   	pop    edx
c0016986:	84 c0                	test   al,al
c0016988:	75 99                	jne    c0016923 <Phys::allocatePage()+0x24>
c001698a:	6a 01                	push   0x1
c001698c:	53                   	push   ebx
c001698d:	e8 a8 fe ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c0016992:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016998:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c001699d:	83 c2 01             	add    edx,0x1
c00169a0:	59                   	pop    ecx
c00169a1:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c00169a7:	c1 e0 0c             	shl    eax,0xc
c00169aa:	5b                   	pop    ebx
c00169ab:	83 c4 14             	add    esp,0x14
c00169ae:	5b                   	pop    ebx
c00169af:	5e                   	pop    esi
c00169b0:	c3                   	ret    
c00169b1:	83 ec 08             	sub    esp,0x8
c00169b4:	89 c2                	mov    edx,eax
c00169b6:	6a 01                	push   0x1
c00169b8:	c1 ea 0c             	shr    edx,0xc
c00169bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00169bf:	52                   	push   edx
c00169c0:	e8 75 fe ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c00169c5:	83 c4 10             	add    esp,0x10
c00169c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169cc:	eb dd                	jmp    c00169ab <Phys::allocatePage()+0xac>

c00169ce <Phys::allocateContiguousPages(int)>:
c00169ce:	57                   	push   edi
c00169cf:	56                   	push   esi
c00169d0:	53                   	push   ebx
c00169d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169d5:	fa                   	cli    
c00169d6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00169db:	31 db                	xor    ebx,ebx
c00169dd:	83 c0 01             	add    eax,0x1
c00169e0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00169e5:	85 db                	test   ebx,ebx
c00169e7:	75 11                	jne    c00169fa <Phys::allocateContiguousPages(int)+0x2c>
c00169e9:	e8 11 ff ff ff       	call   c00168ff <Phys::allocatePage()>
c00169ee:	83 fe 01             	cmp    esi,0x1
c00169f1:	89 c7                	mov    edi,eax
c00169f3:	74 21                	je     c0016a16 <Phys::allocateContiguousPages(int)+0x48>
c00169f5:	bb 01 00 00 00       	mov    ebx,0x1
c00169fa:	e8 00 ff ff ff       	call   c00168ff <Phys::allocatePage()>
c00169ff:	89 da                	mov    edx,ebx
c0016a01:	c1 e2 0c             	shl    edx,0xc
c0016a04:	01 fa                	add    edx,edi
c0016a06:	39 c2                	cmp    edx,eax
c0016a08:	74 22                	je     c0016a2c <Phys::allocateContiguousPages(int)+0x5e>
c0016a0a:	bb 01 00 00 00       	mov    ebx,0x1
c0016a0f:	89 c7                	mov    edi,eax
c0016a11:	83 fe 01             	cmp    esi,0x1
c0016a14:	75 e4                	jne    c00169fa <Phys::allocateContiguousPages(int)+0x2c>
c0016a16:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016a1b:	83 e8 01             	sub    eax,0x1
c0016a1e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016a23:	75 01                	jne    c0016a26 <Phys::allocateContiguousPages(int)+0x58>
c0016a25:	fb                   	sti    
c0016a26:	89 f8                	mov    eax,edi
c0016a28:	5b                   	pop    ebx
c0016a29:	5e                   	pop    esi
c0016a2a:	5f                   	pop    edi
c0016a2b:	c3                   	ret    
c0016a2c:	83 c3 01             	add    ebx,0x1
c0016a2f:	39 f3                	cmp    ebx,esi
c0016a31:	75 b2                	jne    c00169e5 <Phys::allocateContiguousPages(int)+0x17>
c0016a33:	eb e1                	jmp    c0016a16 <Phys::allocateContiguousPages(int)+0x48>

c0016a35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016a35:	56                   	push   esi
c0016a36:	53                   	push   ebx
c0016a37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a3b:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016a41:	73 06                	jae    c0016a49 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016a43:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016a49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a4d:	c1 eb 0c             	shr    ebx,0xc
c0016a50:	c1 e8 0c             	shr    eax,0xc
c0016a53:	39 d8                	cmp    eax,ebx
c0016a55:	73 13                	jae    c0016a6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016a57:	6a 00                	push   0x0
c0016a59:	8d 70 01             	lea    esi,[eax+0x1]
c0016a5c:	50                   	push   eax
c0016a5d:	e8 d8 fd ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c0016a62:	5a                   	pop    edx
c0016a63:	89 f0                	mov    eax,esi
c0016a65:	59                   	pop    ecx
c0016a66:	39 f3                	cmp    ebx,esi
c0016a68:	75 ed                	jne    c0016a57 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016a6a:	5b                   	pop    ebx
c0016a6b:	5e                   	pop    esi
c0016a6c:	c3                   	ret    

c0016a6d <Phys::physicalMemorySetup(unsigned int)>:
c0016a6d:	55                   	push   ebp
c0016a6e:	57                   	push   edi
c0016a6f:	56                   	push   esi
c0016a70:	53                   	push   ebx
c0016a71:	83 ec 40             	sub    esp,0x40
c0016a74:	6a 10                	push   0x10
c0016a76:	6a 00                	push   0x0
c0016a78:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016a7d:	e8 6e 9a fe ff       	call   c00004f0 <memset>
c0016a82:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016a86:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a8b:	05 00 10 00 00       	add    eax,0x1000
c0016a90:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016a94:	5b                   	pop    ebx
c0016a95:	31 db                	xor    ebx,ebx
c0016a97:	5e                   	pop    esi
c0016a98:	50                   	push   eax
c0016a99:	68 d3 14 03 c0       	push   0xc00314d3
c0016a9e:	e8 e2 29 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	83 ec 08             	sub    esp,0x8
c0016aa9:	6a 01                	push   0x1
c0016aab:	53                   	push   ebx
c0016aac:	83 c3 01             	add    ebx,0x1
c0016aaf:	e8 86 fd ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c0016ab4:	83 c4 10             	add    esp,0x10
c0016ab7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016abd:	75 e7                	jne    c0016aa6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016abf:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016ac6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016acd:	c1 e0 08             	shl    eax,0x8
c0016ad0:	09 c2                	or     edx,eax
c0016ad2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0016ad6:	0f 84 98 01 00 00    	je     c0016c74 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0016adc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ae0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ae8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016aed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016af1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016af9:	eb 1c                	jmp    c0016b17 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0016afb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016aff:	83 c3 18             	add    ebx,0x18
c0016b02:	83 c6 01             	add    esi,0x1
c0016b05:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016b09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b0d:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0016b11:	0f 84 6d 01 00 00    	je     c0016c84 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016b17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b1d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016b20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b24:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b28:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016b2a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016b2d:	01 f0                	add    eax,esi
c0016b2f:	55                   	push   ebp
c0016b30:	11 fa                	adc    edx,edi
c0016b32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b36:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016b3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b3e:	51                   	push   ecx
c0016b3f:	56                   	push   esi
c0016b40:	68 70 14 03 c0       	push   0xc0031470
c0016b45:	e8 3b 29 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0016b4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b4e:	83 c4 10             	add    esp,0x10
c0016b51:	09 f8                	or     eax,edi
c0016b53:	0f 85 2b 01 00 00    	jne    c0016c84 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016b59:	83 fd 01             	cmp    ebp,0x1
c0016b5c:	75 9d                	jne    c0016afb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016b5e:	ba 00 00 08 00       	mov    edx,0x80000
c0016b63:	89 c1                	mov    ecx,eax
c0016b65:	39 f2                	cmp    edx,esi
c0016b67:	19 f9                	sbb    ecx,edi
c0016b69:	0f 82 ab 00 00 00    	jb     c0016c1a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016b6f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016b73:	89 c1                	mov    ecx,eax
c0016b75:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016b79:	0f 83 9b 00 00 00    	jae    c0016c1a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016b7f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016b84:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b88:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016b8c:	39 fa                	cmp    edx,edi
c0016b8e:	19 e8                	sbb    eax,ebp
c0016b90:	0f 82 b0 01 00 00    	jb     c0016d46 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0016b96:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b9a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016b9e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0016ba4:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016ba9:	83 d5 ff             	adc    ebp,0xffffffff
c0016bac:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016bb0:	31 c0                	xor    eax,eax
c0016bb2:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016bb6:	39 fa                	cmp    edx,edi
c0016bb8:	89 c1                	mov    ecx,eax
c0016bba:	19 e9                	sbb    ecx,ebp
c0016bbc:	0f 83 39 ff ff ff    	jae    c0016afb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016bc2:	be 00 00 08 00       	mov    esi,0x80000
c0016bc7:	83 ec 04             	sub    esp,0x4
c0016bca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016bce:	57                   	push   edi
c0016bcf:	56                   	push   esi
c0016bd0:	68 94 14 03 c0       	push   0xc0031494
c0016bd5:	e8 ab 28 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0016bda:	5d                   	pop    ebp
c0016bdb:	58                   	pop    eax
c0016bdc:	57                   	push   edi
c0016bdd:	56                   	push   esi
c0016bde:	e8 52 fe ff ff       	call   c0016a35 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016be3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016be7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016beb:	83 c4 0c             	add    esp,0xc
c0016bee:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016bf2:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c0016bf8:	01 d0                	add    eax,edx
c0016bfa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016c01:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016c06:	52                   	push   edx
c0016c07:	50                   	push   eax
c0016c08:	68 f9 14 03 c0       	push   0xc00314f9
c0016c0d:	e8 73 28 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	e9 e1 fe ff ff       	jmp    c0016afb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c1a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0016c1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c26:	39 ea                	cmp    edx,ebp
c0016c28:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0016c2c:	0f 82 c9 fe ff ff    	jb     c0016afb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c32:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016c37:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0016c3b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016c3f:	0f 83 b6 fe ff ff    	jae    c0016afb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c45:	39 ee                	cmp    esi,ebp
c0016c47:	89 f8                	mov    eax,edi
c0016c49:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016c4d:	0f 83 74 ff ff ff    	jae    c0016bc7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016c53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c5b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016c5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016c63:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016c67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c6f:	e9 53 ff ff ff       	jmp    c0016bc7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016c74:	83 ec 0c             	sub    esp,0xc
c0016c77:	68 eb 14 03 c0       	push   0xc00314eb
c0016c7c:	e8 1d 98 00 00       	call   c002049e <KePanic(char const*)>
c0016c81:	83 c4 10             	add    esp,0x10
c0016c84:	83 ec 08             	sub    esp,0x8
c0016c87:	bb 60 00 00 00       	mov    ebx,0x60
c0016c8c:	6a 00                	push   0x0
c0016c8e:	6a 06                	push   0x6
c0016c90:	e8 a5 fb ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c0016c95:	58                   	pop    eax
c0016c96:	5a                   	pop    edx
c0016c97:	6a 00                	push   0x0
c0016c99:	6a 07                	push   0x7
c0016c9b:	e8 9a fb ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c0016ca0:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	83 c1 02             	add    ecx,0x2
c0016cac:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016cb2:	83 ec 08             	sub    esp,0x8
c0016cb5:	6a 00                	push   0x0
c0016cb7:	53                   	push   ebx
c0016cb8:	83 c3 01             	add    ebx,0x1
c0016cbb:	e8 7a fb ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c0016cc0:	83 c4 10             	add    esp,0x10
c0016cc3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016cc9:	75 e7                	jne    c0016cb2 <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016ccb:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016cd0:	bb 40 01 00 00       	mov    ebx,0x140
c0016cd5:	83 c0 20             	add    eax,0x20
c0016cd8:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016cdd:	eb 26                	jmp    c0016d05 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0016cdf:	83 ec 08             	sub    esp,0x8
c0016ce2:	6a 00                	push   0x0
c0016ce4:	53                   	push   ebx
c0016ce5:	83 c3 01             	add    ebx,0x1
c0016ce8:	e8 4d fb ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c0016ced:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016cf2:	83 c4 10             	add    esp,0x10
c0016cf5:	83 c0 01             	add    eax,0x1
c0016cf8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016cfe:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016d03:	74 07                	je     c0016d0c <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016d05:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016d0a:	7e d3                	jle    c0016cdf <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016d0c:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016d11:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016d16:	7f 26                	jg     c0016d3e <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016d18:	83 ec 08             	sub    esp,0x8
c0016d1b:	6a 00                	push   0x0
c0016d1d:	53                   	push   ebx
c0016d1e:	83 c3 01             	add    ebx,0x1
c0016d21:	e8 14 fb ff ff       	call   c001683a <Phys::setPageState(unsigned long, bool)>
c0016d26:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	83 c0 01             	add    eax,0x1
c0016d31:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016d37:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016d3c:	75 d3                	jne    c0016d11 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016d3e:	83 c4 3c             	add    esp,0x3c
c0016d41:	5b                   	pop    ebx
c0016d42:	5e                   	pop    esi
c0016d43:	5f                   	pop    edi
c0016d44:	5d                   	pop    ebp
c0016d45:	c3                   	ret    
c0016d46:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016d4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016d56:	e9 3b fe ff ff       	jmp    c0016b96 <Phys::physicalMemorySetup(unsigned int)+0x129>
c0016d5b:	90                   	nop

c0016d5c <Pipe::isAtty()>:
c0016d5c:	31 c0                	xor    eax,eax
c0016d5e:	c3                   	ret    
c0016d5f:	90                   	nop

c0016d60 <Pipe::~Pipe()>:
c0016d60:	83 ec 0c             	sub    esp,0xc
c0016d63:	ba 58 15 03 c0       	mov    edx,0xc0031558
c0016d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6c:	89 10                	mov    DWORD PTR [eax],edx
c0016d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d72:	83 ec 0c             	sub    esp,0xc
c0016d75:	50                   	push   eax
c0016d76:	e8 69 11 00 00       	call   c0017ee4 <UnixFile::~UnixFile()>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	90                   	nop
c0016d7f:	83 c4 0c             	add    esp,0xc
c0016d82:	c3                   	ret    
c0016d83:	90                   	nop

c0016d84 <Pipe::~Pipe()>:
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	83 ec 0c             	sub    esp,0xc
c0016d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d8e:	e8 cd ff ff ff       	call   c0016d60 <Pipe::~Pipe()>
c0016d93:	83 c4 10             	add    esp,0x10
c0016d96:	83 ec 08             	sub    esp,0x8
c0016d99:	6a 20                	push   0x20
c0016d9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d9f:	e8 b4 25 00 00       	call   c0019358 <operator delete(void*, unsigned long)>
c0016da4:	83 c4 10             	add    esp,0x10
c0016da7:	83 c4 0c             	add    esp,0xc
c0016daa:	c3                   	ret    
c0016dab:	90                   	nop

c0016dac <Pipe::write(unsigned long long, void*, int*)>:
c0016dac:	55                   	push   ebp
c0016dad:	57                   	push   edi
c0016dae:	56                   	push   esi
c0016daf:	53                   	push   ebx
c0016db0:	83 ec 1c             	sub    esp,0x1c
c0016db3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016db7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016dbb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016dbe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016dc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016dc5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016dc9:	89 d8                	mov    eax,ebx
c0016dcb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016dce:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016dd2:	89 d6                	mov    esi,edx
c0016dd4:	89 d7                	mov    edi,edx
c0016dd6:	c1 ff 1f             	sar    edi,0x1f
c0016dd9:	03 34 24             	add    esi,DWORD PTR [esp]
c0016ddc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016de0:	c1 f8 1f             	sar    eax,0x1f
c0016de3:	39 f3                	cmp    ebx,esi
c0016de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016de9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ded:	19 f8                	sbb    eax,edi
c0016def:	b8 01 00 00 00       	mov    eax,0x1
c0016df4:	72 6e                	jb     c0016e64 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016df6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016df9:	01 d0                	add    eax,edx
c0016dfb:	99                   	cdq    
c0016dfc:	f7 fb                	idiv   ebx
c0016dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e02:	29 d3                	sub    ebx,edx
c0016e04:	89 d7                	mov    edi,edx
c0016e06:	89 de                	mov    esi,ebx
c0016e08:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016e0b:	c1 fb 1f             	sar    ebx,0x1f
c0016e0e:	39 f2                	cmp    edx,esi
c0016e10:	19 d8                	sbb    eax,ebx
c0016e12:	b8 00 00 00 00       	mov    eax,0x0
c0016e17:	72 04                	jb     c0016e1d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016e19:	89 d0                	mov    eax,edx
c0016e1b:	29 f0                	sub    eax,esi
c0016e1d:	89 d3                	mov    ebx,edx
c0016e1f:	29 c3                	sub    ebx,eax
c0016e21:	74 0b                	je     c0016e2e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016e23:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016e26:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016e2a:	89 d9                	mov    ecx,ebx
c0016e2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e2e:	85 c0                	test   eax,eax
c0016e30:	74 0d                	je     c0016e3f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016e32:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016e36:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016e39:	89 de                	mov    esi,ebx
c0016e3b:	89 c1                	mov    ecx,eax
c0016e3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e3f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016e42:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016e47:	75 10                	jne    c0016e59 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016e49:	83 ec 0c             	sub    esp,0xc
c0016e4c:	68 15 15 03 c0       	push   0xc0031515
c0016e51:	e8 48 96 00 00       	call   c002049e <KePanic(char const*)>
c0016e56:	83 c4 10             	add    esp,0x10
c0016e59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e5d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016e60:	89 08                	mov    DWORD PTR [eax],ecx
c0016e62:	31 c0                	xor    eax,eax
c0016e64:	83 c4 1c             	add    esp,0x1c
c0016e67:	5b                   	pop    ebx
c0016e68:	5e                   	pop    esi
c0016e69:	5f                   	pop    edi
c0016e6a:	5d                   	pop    ebp
c0016e6b:	c3                   	ret    

c0016e6c <Pipe::read(unsigned long long, void*, int*)>:
c0016e6c:	55                   	push   ebp
c0016e6d:	57                   	push   edi
c0016e6e:	56                   	push   esi
c0016e6f:	53                   	push   ebx
c0016e70:	83 ec 1c             	sub    esp,0x1c
c0016e73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016e77:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016e7b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016e7f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016e82:	89 c8                	mov    eax,ecx
c0016e84:	99                   	cdq    
c0016e85:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016e89:	74 24                	je     c0016eaf <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016e8b:	39 f9                	cmp    ecx,edi
c0016e8d:	89 d1                	mov    ecx,edx
c0016e8f:	19 f1                	sbb    ecx,esi
c0016e91:	73 1c                	jae    c0016eaf <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016e93:	fa                   	cli    
c0016e94:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016e9a:	e8 15 e6 00 00       	call   c00254b4 <schedule()>
c0016e9f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016ea4:	48                   	dec    eax
c0016ea5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016eaa:	75 d3                	jne    c0016e7f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016eac:	fb                   	sti    
c0016ead:	eb d0                	jmp    c0016e7f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016eaf:	39 f8                	cmp    eax,edi
c0016eb1:	89 d1                	mov    ecx,edx
c0016eb3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016eb6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016eba:	19 f1                	sbb    ecx,esi
c0016ebc:	73 07                	jae    c0016ec5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016ebe:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ec1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ec5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016ec8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016ecb:	29 f7                	sub    edi,esi
c0016ecd:	89 f8                	mov    eax,edi
c0016ecf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016ed3:	99                   	cdq    
c0016ed4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016ed7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016edb:	19 d0                	sbb    eax,edx
c0016edd:	73 07                	jae    c0016ee6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016edf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016ee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ee6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016ee9:	89 ea                	mov    edx,ebp
c0016eeb:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016eef:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016ef4:	74 0d                	je     c0016f03 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016ef6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016ef9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016efd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f03:	85 d2                	test   edx,edx
c0016f05:	74 11                	je     c0016f18 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f0b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016f0e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016f12:	89 d1                	mov    ecx,edx
c0016f14:	89 c7                	mov    edi,eax
c0016f16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f1b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016f1e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016f21:	99                   	cdq    
c0016f22:	89 f7                	mov    edi,esi
c0016f24:	03 04 24             	add    eax,DWORD PTR [esp]
c0016f27:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016f2b:	c1 ff 1f             	sar    edi,0x1f
c0016f2e:	57                   	push   edi
c0016f2f:	56                   	push   esi
c0016f30:	52                   	push   edx
c0016f31:	50                   	push   eax
c0016f32:	e8 79 7a 01 00       	call   c002e9b0 <__umoddi3>
c0016f37:	83 c4 10             	add    esp,0x10
c0016f3a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016f3d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016f42:	75 10                	jne    c0016f54 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016f44:	83 ec 0c             	sub    esp,0xc
c0016f47:	68 32 15 03 c0       	push   0xc0031532
c0016f4c:	e8 4d 95 00 00       	call   c002049e <KePanic(char const*)>
c0016f51:	83 c4 10             	add    esp,0x10
c0016f54:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f58:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016f5b:	89 10                	mov    DWORD PTR [eax],edx
c0016f5d:	83 c4 1c             	add    esp,0x1c
c0016f60:	31 c0                	xor    eax,eax
c0016f62:	5b                   	pop    ebx
c0016f63:	5e                   	pop    esi
c0016f64:	5f                   	pop    edi
c0016f65:	5d                   	pop    ebp
c0016f66:	c3                   	ret    
c0016f67:	90                   	nop

c0016f68 <Pipe::Pipe(int)>:
c0016f68:	83 ec 0c             	sub    esp,0xc
c0016f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f6f:	83 ec 08             	sub    esp,0x8
c0016f72:	6a 00                	push   0x0
c0016f74:	50                   	push   eax
c0016f75:	e8 84 0d 00 00       	call   c0017cfe <UnixFile::UnixFile(int)>
c0016f7a:	83 c4 10             	add    esp,0x10
c0016f7d:	ba 58 15 03 c0       	mov    edx,0xc0031558
c0016f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f86:	89 10                	mov    DWORD PTR [eax],edx
c0016f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016f90:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f97:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016fa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fad:	83 ec 0c             	sub    esp,0xc
c0016fb0:	50                   	push   eax
c0016fb1:	e8 40 f6 ff ff       	call   c00165f6 <malloc>
c0016fb6:	83 c4 10             	add    esp,0x10
c0016fb9:	89 c2                	mov    edx,eax
c0016fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fbf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fc6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016fca:	90                   	nop
c0016fcb:	83 c4 0c             	add    esp,0xc
c0016fce:	c3                   	ret    
c0016fcf:	90                   	nop

c0016fd0 <VgaText::isAtty()>:
c0016fd0:	b0 01                	mov    al,0x1
c0016fd2:	c3                   	ret    
c0016fd3:	90                   	nop

c0016fd4 <VgaText::~VgaText()>:
c0016fd4:	83 ec 0c             	sub    esp,0xc
c0016fd7:	ba a0 15 03 c0       	mov    edx,0xc00315a0
c0016fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe0:	89 10                	mov    DWORD PTR [eax],edx
c0016fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe6:	83 ec 0c             	sub    esp,0xc
c0016fe9:	50                   	push   eax
c0016fea:	e8 f5 0e 00 00       	call   c0017ee4 <UnixFile::~UnixFile()>
c0016fef:	83 c4 10             	add    esp,0x10
c0016ff2:	90                   	nop
c0016ff3:	83 c4 0c             	add    esp,0xc
c0016ff6:	c3                   	ret    
c0016ff7:	90                   	nop

c0016ff8 <VgaText::~VgaText()>:
c0016ff8:	83 ec 0c             	sub    esp,0xc
c0016ffb:	83 ec 0c             	sub    esp,0xc
c0016ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017002:	e8 cd ff ff ff       	call   c0016fd4 <VgaText::~VgaText()>
c0017007:	83 c4 10             	add    esp,0x10
c001700a:	83 ec 08             	sub    esp,0x8
c001700d:	68 84 01 00 00       	push   0x184
c0017012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017016:	e8 3d 23 00 00       	call   c0019358 <operator delete(void*, unsigned long)>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	83 c4 0c             	add    esp,0xc
c0017021:	c3                   	ret    

c0017022 <VgaText::read(unsigned long long, void*, int*)>:
c0017022:	83 ec 10             	sub    esp,0x10
c0017025:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001702d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017031:	e8 ba 53 00 00       	call   c001c3f0 <readKeyboard(VgaText*, char*, unsigned long)>
c0017036:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001703a:	89 02                	mov    DWORD PTR [edx],eax
c001703c:	31 c0                	xor    eax,eax
c001703e:	83 c4 1c             	add    esp,0x1c
c0017041:	c3                   	ret    

c0017042 <setTerminalScrollLock(bool)>:
c0017042:	c3                   	ret    

c0017043 <doTerminalCycle()>:
c0017043:	c3                   	ret    

c0017044 <addToTerminalCycle(VgaText*)>:
c0017044:	c3                   	ret    

c0017045 <scrollTerminalScrollLock(int)>:
c0017045:	c3                   	ret    

c0017046 <VgaText::updateTitle()>:
c0017046:	c3                   	ret    
c0017047:	90                   	nop

c0017048 <VgaText::load()>:
c0017048:	c3                   	ret    
c0017049:	90                   	nop

c001704a <VgaText::updateCursor()>:
c001704a:	83 ec 14             	sub    esp,0x14
c001704d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017051:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017054:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017057:	e8 64 0f 01 00       	call   c0027fc0 <HalConsoleCursorUpdate(int, int)>
c001705c:	83 c4 1c             	add    esp,0x1c
c001705f:	c3                   	ret    

c0017060 <VgaText::doANSI_SGR(int)>:
c0017060:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017068:	85 d2                	test   edx,edx
c001706a:	75 0b                	jne    c0017077 <VgaText::doANSI_SGR(int)+0x17>
c001706c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001706f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017072:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0017075:	eb 59                	jmp    c00170d0 <VgaText::doANSI_SGR(int)+0x70>
c0017077:	83 fa 07             	cmp    edx,0x7
c001707a:	75 0b                	jne    c0017087 <VgaText::doANSI_SGR(int)+0x27>
c001707c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001707f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0017082:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0017085:	eb 49                	jmp    c00170d0 <VgaText::doANSI_SGR(int)+0x70>
c0017087:	83 fa 1b             	cmp    edx,0x1b
c001708a:	74 e0                	je     c001706c <VgaText::doANSI_SGR(int)+0xc>
c001708c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001708f:	83 f9 07             	cmp    ecx,0x7
c0017092:	77 09                	ja     c001709d <VgaText::doANSI_SGR(int)+0x3d>
c0017094:	8b 14 8d a0 3e 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc160]
c001709b:	eb 20                	jmp    c00170bd <VgaText::doANSI_SGR(int)+0x5d>
c001709d:	8d 4a d8             	lea    ecx,[edx-0x28]
c00170a0:	83 f9 07             	cmp    ecx,0x7
c00170a3:	77 09                	ja     c00170ae <VgaText::doANSI_SGR(int)+0x4e>
c00170a5:	8b 14 8d a0 3e 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc160]
c00170ac:	eb 22                	jmp    c00170d0 <VgaText::doANSI_SGR(int)+0x70>
c00170ae:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00170b1:	83 f9 07             	cmp    ecx,0x7
c00170b4:	77 0b                	ja     c00170c1 <VgaText::doANSI_SGR(int)+0x61>
c00170b6:	8b 14 95 58 3d 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc2a8]
c00170bd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00170c0:	c3                   	ret    
c00170c1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00170c4:	83 f9 07             	cmp    ecx,0x7
c00170c7:	77 0a                	ja     c00170d3 <VgaText::doANSI_SGR(int)+0x73>
c00170c9:	8b 14 95 30 3d 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc2d0]
c00170d0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00170d3:	c3                   	ret    

c00170d4 <VgaText::setDefaultBgColour(VgaColour)>:
c00170d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170dc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170df:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00170e2:	c3                   	ret    
c00170e3:	90                   	nop

c00170e4 <VgaText::setDefaultFgColour(VgaColour)>:
c00170e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170ec:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00170ef:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00170f2:	c3                   	ret    
c00170f3:	90                   	nop

c00170f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00170f4:	53                   	push   ebx
c00170f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00170f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00170fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017101:	51                   	push   ecx
c0017102:	e8 cd ff ff ff       	call   c00170d4 <VgaText::setDefaultBgColour(VgaColour)>
c0017107:	58                   	pop    eax
c0017108:	5a                   	pop    edx
c0017109:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001710d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017111:	5b                   	pop    ebx
c0017112:	eb d0                	jmp    c00170e4 <VgaText::setDefaultFgColour(VgaColour)>

c0017114 <VgaText::setTitleTextColour(VgaColour)>:
c0017114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001711c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001711f:	c3                   	ret    

c0017120 <VgaText::setTitleColour(VgaColour)>:
c0017120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017128:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001712b:	c3                   	ret    

c001712c <VgaText::setTitle(char*)>:
c001712c:	c3                   	ret    
c001712d:	90                   	nop

c001712e <VgaText::combineColours(unsigned char, unsigned char)>:
c001712e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017132:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017137:	83 e0 0f             	and    eax,0xf
c001713a:	c1 e2 04             	shl    edx,0x4
c001713d:	09 d0                	or     eax,edx
c001713f:	c3                   	ret    

c0017140 <VgaText::scrollScreen()>:
c0017140:	55                   	push   ebp
c0017141:	57                   	push   edi
c0017142:	56                   	push   esi
c0017143:	be 01 00 00 00       	mov    esi,0x1
c0017148:	53                   	push   ebx
c0017149:	83 ec 0c             	sub    esp,0xc
c001714c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017150:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0017153:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0017159:	31 ff                	xor    edi,edi
c001715b:	01 e9                	add    ecx,ebp
c001715d:	8a 01                	mov    al,BYTE PTR [ecx]
c001715f:	83 fe 18             	cmp    esi,0x18
c0017162:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0017168:	75 20                	jne    c001718a <VgaText::scrollScreen()+0x4a>
c001716a:	f7 c7 01 00 00 00    	test   edi,0x1
c0017170:	74 15                	je     c0017187 <VgaText::scrollScreen()+0x47>
c0017172:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017176:	50                   	push   eax
c0017177:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001717b:	50                   	push   eax
c001717c:	e8 ad ff ff ff       	call   c001712e <VgaText::combineColours(unsigned char, unsigned char)>
c0017181:	5a                   	pop    edx
c0017182:	5a                   	pop    edx
c0017183:	88 01                	mov    BYTE PTR [ecx],al
c0017185:	eb 03                	jmp    c001718a <VgaText::scrollScreen()+0x4a>
c0017187:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001718a:	47                   	inc    edi
c001718b:	41                   	inc    ecx
c001718c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0017192:	75 c9                	jne    c001715d <VgaText::scrollScreen()+0x1d>
c0017194:	46                   	inc    esi
c0017195:	83 fe 19             	cmp    esi,0x19
c0017198:	75 b9                	jne    c0017153 <VgaText::scrollScreen()+0x13>
c001719a:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c00171a0:	75 1f                	jne    c00171c1 <VgaText::scrollScreen()+0x81>
c00171a2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00171a6:	74 05                	je     c00171ad <VgaText::scrollScreen()+0x6d>
c00171a8:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00171ab:	eb 14                	jmp    c00171c1 <VgaText::scrollScreen()+0x81>
c00171ad:	50                   	push   eax
c00171ae:	50                   	push   eax
c00171af:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00171b3:	50                   	push   eax
c00171b4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00171b8:	50                   	push   eax
c00171b9:	e8 96 0c 01 00       	call   c0027e54 <HalConsoleScroll(int, int)>
c00171be:	83 c4 10             	add    esp,0x10
c00171c1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00171c5:	83 c4 0c             	add    esp,0xc
c00171c8:	5b                   	pop    ebx
c00171c9:	5e                   	pop    esi
c00171ca:	5f                   	pop    edi
c00171cb:	5d                   	pop    ebp
c00171cc:	e9 79 fe ff ff       	jmp    c001704a <VgaText::updateCursor()>
c00171d1:	90                   	nop

c00171d2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00171d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00171d7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00171dc:	c1 e0 08             	shl    eax,0x8
c00171df:	09 d0                	or     eax,edx
c00171e1:	c3                   	ret    

c00171e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00171e2:	55                   	push   ebp
c00171e3:	57                   	push   edi
c00171e4:	56                   	push   esi
c00171e5:	53                   	push   ebx
c00171e6:	83 ec 1c             	sub    esp,0x1c
c00171e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00171ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171fd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017201:	0f b6 c3             	movzx  eax,bl
c0017204:	50                   	push   eax
c0017205:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001720a:	50                   	push   eax
c001720b:	e8 1e ff ff ff       	call   c001712e <VgaText::combineColours(unsigned char, unsigned char)>
c0017210:	5a                   	pop    edx
c0017211:	0f b6 c0             	movzx  eax,al
c0017214:	59                   	pop    ecx
c0017215:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c001721a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001721e:	50                   	push   eax
c001721f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017223:	e8 aa ff ff ff       	call   c00171d2 <VgaText::combineCharAndColour(char, unsigned char)>
c0017228:	5a                   	pop    edx
c0017229:	6b d7 50             	imul   edx,edi,0x50
c001722c:	59                   	pop    ecx
c001722d:	01 f2                	add    edx,esi
c001722f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017232:	0f b7 d2             	movzx  edx,dx
c0017235:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0017239:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c001723f:	75 28                	jne    c0017269 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0017241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017245:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0017249:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c001724d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017251:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017255:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017259:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001725d:	83 c4 1c             	add    esp,0x1c
c0017260:	5b                   	pop    ebx
c0017261:	5e                   	pop    esi
c0017262:	5f                   	pop    edi
c0017263:	5d                   	pop    ebp
c0017264:	e9 f3 0c 01 00       	jmp    c0027f5c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017269:	83 c4 1c             	add    esp,0x1c
c001726c:	5b                   	pop    ebx
c001726d:	5e                   	pop    esi
c001726e:	5f                   	pop    edi
c001726f:	5d                   	pop    ebp
c0017270:	c3                   	ret    
c0017271:	90                   	nop

c0017272 <VgaText::getCursorX()>:
c0017272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017276:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017279:	c3                   	ret    

c001727a <VgaText::getCursorY()>:
c001727a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001727e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017281:	c3                   	ret    

c0017282 <VgaText::setCursor(int, int)>:
c0017282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001728a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001728d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017291:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017294:	e9 b1 fd ff ff       	jmp    c001704a <VgaText::updateCursor()>

c0017299 <setActiveTerminal(VgaText*)>:
c0017299:	53                   	push   ebx
c001729a:	83 ec 08             	sub    esp,0x8
c001729d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172a1:	85 db                	test   ebx,ebx
c00172a3:	75 11                	jne    c00172b6 <setActiveTerminal(VgaText*)+0x1d>
c00172a5:	c7 44 24 10 6c 15 03 c0 	mov    DWORD PTR [esp+0x10],0xc003156c
c00172ad:	83 c4 08             	add    esp,0x8
c00172b0:	5b                   	pop    ebx
c00172b1:	e9 e8 91 00 00       	jmp    c002049e <KePanic(char const*)>
c00172b6:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c00172bb:	85 c0                	test   eax,eax
c00172bd:	74 0c                	je     c00172cb <setActiveTerminal(VgaText*)+0x32>
c00172bf:	83 ec 0c             	sub    esp,0xc
c00172c2:	50                   	push   eax
c00172c3:	e8 82 fd ff ff       	call   c001704a <VgaText::updateCursor()>
c00172c8:	83 c4 10             	add    esp,0x10
c00172cb:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c00172d1:	50                   	push   eax
c00172d2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00172d5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00172d8:	53                   	push   ebx
c00172d9:	e8 a4 ff ff ff       	call   c0017282 <VgaText::setCursor(int, int)>
c00172de:	83 c4 18             	add    esp,0x18
c00172e1:	5b                   	pop    ebx
c00172e2:	c3                   	ret    
c00172e3:	90                   	nop

c00172e4 <VgaText::clearScreen()>:
c00172e4:	57                   	push   edi
c00172e5:	56                   	push   esi
c00172e6:	31 f6                	xor    esi,esi
c00172e8:	53                   	push   ebx
c00172e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172ed:	52                   	push   edx
c00172ee:	6a 00                	push   0x0
c00172f0:	6a 00                	push   0x0
c00172f2:	53                   	push   ebx
c00172f3:	e8 8a ff ff ff       	call   c0017282 <VgaText::setCursor(int, int)>
c00172f8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00172ff:	83 c4 10             	add    esp,0x10
c0017302:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0017305:	7e 20                	jle    c0017327 <VgaText::clearScreen()+0x43>
c0017307:	31 ff                	xor    edi,edi
c0017309:	50                   	push   eax
c001730a:	50                   	push   eax
c001730b:	56                   	push   esi
c001730c:	57                   	push   edi
c001730d:	47                   	inc    edi
c001730e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017311:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017314:	6a 20                	push   0x20
c0017316:	53                   	push   ebx
c0017317:	e8 c6 fe ff ff       	call   c00171e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001731c:	83 c4 20             	add    esp,0x20
c001731f:	83 ff 50             	cmp    edi,0x50
c0017322:	75 e5                	jne    c0017309 <VgaText::clearScreen()+0x25>
c0017324:	46                   	inc    esi
c0017325:	eb db                	jmp    c0017302 <VgaText::clearScreen()+0x1e>
c0017327:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001732e:	5b                   	pop    ebx
c001732f:	5e                   	pop    esi
c0017330:	5f                   	pop    edi
c0017331:	c3                   	ret    

c0017332 <VgaText::setCursorX(int)>:
c0017332:	83 ec 10             	sub    esp,0x10
c0017335:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017339:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001733c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017340:	50                   	push   eax
c0017341:	e8 3c ff ff ff       	call   c0017282 <VgaText::setCursor(int, int)>
c0017346:	83 c4 1c             	add    esp,0x1c
c0017349:	c3                   	ret    

c001734a <VgaText::setCursorY(int)>:
c001734a:	83 ec 10             	sub    esp,0x10
c001734d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017355:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017358:	50                   	push   eax
c0017359:	e8 24 ff ff ff       	call   c0017282 <VgaText::setCursor(int, int)>
c001735e:	83 c4 1c             	add    esp,0x1c
c0017361:	c3                   	ret    

c0017362 <VgaText::incrementCursor(bool)>:
c0017362:	56                   	push   esi
c0017363:	53                   	push   ebx
c0017364:	51                   	push   ecx
c0017365:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017369:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001736d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017370:	40                   	inc    eax
c0017371:	83 f8 50             	cmp    eax,0x50
c0017374:	74 05                	je     c001737b <VgaText::incrementCursor(bool)+0x19>
c0017376:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017379:	eb 24                	jmp    c001739f <VgaText::incrementCursor(bool)+0x3d>
c001737b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001737e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017385:	8d 50 01             	lea    edx,[eax+0x1]
c0017388:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001738b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001738e:	75 0f                	jne    c001739f <VgaText::incrementCursor(bool)+0x3d>
c0017390:	83 ec 0c             	sub    esp,0xc
c0017393:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017396:	53                   	push   ebx
c0017397:	e8 a4 fd ff ff       	call   c0017140 <VgaText::scrollScreen()>
c001739c:	83 c4 10             	add    esp,0x10
c001739f:	89 f0                	mov    eax,esi
c00173a1:	84 c0                	test   al,al
c00173a3:	74 0c                	je     c00173b1 <VgaText::incrementCursor(bool)+0x4f>
c00173a5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00173a9:	5a                   	pop    edx
c00173aa:	5b                   	pop    ebx
c00173ab:	5e                   	pop    esi
c00173ac:	e9 99 fc ff ff       	jmp    c001704a <VgaText::updateCursor()>
c00173b1:	58                   	pop    eax
c00173b2:	5b                   	pop    ebx
c00173b3:	5e                   	pop    esi
c00173b4:	c3                   	ret    
c00173b5:	90                   	nop

c00173b6 <VgaText::decrementCursor(bool)>:
c00173b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00173ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00173be:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00173c1:	85 c0                	test   eax,eax
c00173c3:	74 04                	je     c00173c9 <VgaText::decrementCursor(bool)+0x13>
c00173c5:	48                   	dec    eax
c00173c6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00173c9:	84 c9                	test   cl,cl
c00173cb:	74 09                	je     c00173d6 <VgaText::decrementCursor(bool)+0x20>
c00173cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00173d1:	e9 74 fc ff ff       	jmp    c001704a <VgaText::updateCursor()>
c00173d6:	c3                   	ret    
c00173d7:	90                   	nop

c00173d8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00173d8:	53                   	push   ebx
c00173d9:	83 ec 08             	sub    esp,0x8
c00173dc:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00173e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00173e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00173e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00173ed:	83 f8 07             	cmp    eax,0x7
c00173f0:	75 21                	jne    c0017413 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00173f2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00173fa:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0017402:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001740a:	83 c4 08             	add    esp,0x8
c001740d:	5b                   	pop    ebx
c001740e:	e9 18 3b 00 00       	jmp    c001af2b <Krnl::beep(int, int, bool)>
c0017413:	83 f8 0d             	cmp    eax,0xd
c0017416:	75 09                	jne    c0017421 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0017418:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001741f:	eb 2d                	jmp    c001744e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0017421:	83 f8 0a             	cmp    eax,0xa
c0017424:	75 31                	jne    c0017457 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0017426:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017429:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017430:	8d 50 01             	lea    edx,[eax+0x1]
c0017433:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017436:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017439:	75 0f                	jne    c001744a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001743b:	83 ec 0c             	sub    esp,0xc
c001743e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017441:	53                   	push   ebx
c0017442:	e8 f9 fc ff ff       	call   c0017140 <VgaText::scrollScreen()>
c0017447:	83 c4 10             	add    esp,0x10
c001744a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001744e:	83 c4 08             	add    esp,0x8
c0017451:	5b                   	pop    ebx
c0017452:	e9 f3 fb ff ff       	jmp    c001704a <VgaText::updateCursor()>
c0017457:	83 f8 08             	cmp    eax,0x8
c001745a:	75 25                	jne    c0017481 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001745c:	50                   	push   eax
c001745d:	50                   	push   eax
c001745e:	6a 01                	push   0x1
c0017460:	53                   	push   ebx
c0017461:	e8 50 ff ff ff       	call   c00173b6 <VgaText::decrementCursor(bool)>
c0017466:	5a                   	pop    edx
c0017467:	59                   	pop    ecx
c0017468:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001746b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001746e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017471:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017474:	6a 20                	push   0x20
c0017476:	53                   	push   ebx
c0017477:	e8 66 fd ff ff       	call   c00171e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001747c:	83 c4 28             	add    esp,0x28
c001747f:	5b                   	pop    ebx
c0017480:	c3                   	ret    
c0017481:	83 ec 08             	sub    esp,0x8
c0017484:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017487:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001748a:	51                   	push   ecx
c001748b:	52                   	push   edx
c001748c:	50                   	push   eax
c001748d:	53                   	push   ebx
c001748e:	e8 4f fd ff ff       	call   c00171e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017493:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017497:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001749f:	83 c4 28             	add    esp,0x28
c00174a2:	5b                   	pop    ebx
c00174a3:	e9 ba fe ff ff       	jmp    c0017362 <VgaText::incrementCursor(bool)>

c00174a8 <VgaText::putchar(char)>:
c00174a8:	57                   	push   edi
c00174a9:	56                   	push   esi
c00174aa:	53                   	push   ebx
c00174ab:	83 ec 10             	sub    esp,0x10
c00174ae:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00174b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00174b6:	89 f8                	mov    eax,edi
c00174b8:	0f be c0             	movsx  eax,al
c00174bb:	83 f8 5b             	cmp    eax,0x5b
c00174be:	75 18                	jne    c00174d8 <VgaText::putchar(char)+0x30>
c00174c0:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00174c4:	74 20                	je     c00174e6 <VgaText::putchar(char)+0x3e>
c00174c6:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00174cc:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00174d3:	e9 c1 00 00 00       	jmp    c0017599 <VgaText::putchar(char)+0xf1>
c00174d8:	83 f8 1b             	cmp    eax,0x1b
c00174db:	75 09                	jne    c00174e6 <VgaText::putchar(char)+0x3e>
c00174dd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00174e1:	e9 b3 00 00 00       	jmp    c0017599 <VgaText::putchar(char)+0xf1>
c00174e6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00174e9:	84 c9                	test   cl,cl
c00174eb:	0f 84 98 00 00 00    	je     c0017589 <VgaText::putchar(char)+0xe1>
c00174f1:	8d 77 c0             	lea    esi,[edi-0x40]
c00174f4:	89 f2                	mov    edx,esi
c00174f6:	80 fa 3e             	cmp    dl,0x3e
c00174f9:	77 78                	ja     c0017573 <VgaText::putchar(char)+0xcb>
c00174fb:	83 f8 6d             	cmp    eax,0x6d
c00174fe:	75 47                	jne    c0017547 <VgaText::putchar(char)+0x9f>
c0017500:	31 f6                	xor    esi,esi
c0017502:	31 d2                	xor    edx,edx
c0017504:	31 c0                	xor    eax,eax
c0017506:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0017509:	7e 2d                	jle    c0017538 <VgaText::putchar(char)+0x90>
c001750b:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0017510:	83 fa 3b             	cmp    edx,0x3b
c0017513:	75 17                	jne    c001752c <VgaText::putchar(char)+0x84>
c0017515:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0017519:	50                   	push   eax
c001751a:	53                   	push   ebx
c001751b:	e8 40 fb ff ff       	call   c0017060 <VgaText::doANSI_SGR(int)>
c0017520:	59                   	pop    ecx
c0017521:	31 d2                	xor    edx,edx
c0017523:	5f                   	pop    edi
c0017524:	31 c0                	xor    eax,eax
c0017526:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001752a:	eb 09                	jmp    c0017535 <VgaText::putchar(char)+0x8d>
c001752c:	6b c0 0a             	imul   eax,eax,0xa
c001752f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0017533:	88 ca                	mov    dl,cl
c0017535:	46                   	inc    esi
c0017536:	eb ce                	jmp    c0017506 <VgaText::putchar(char)+0x5e>
c0017538:	84 d2                	test   dl,dl
c001753a:	74 2f                	je     c001756b <VgaText::putchar(char)+0xc3>
c001753c:	50                   	push   eax
c001753d:	53                   	push   ebx
c001753e:	e8 1d fb ff ff       	call   c0017060 <VgaText::doANSI_SGR(int)>
c0017543:	58                   	pop    eax
c0017544:	5a                   	pop    edx
c0017545:	eb 24                	jmp    c001756b <VgaText::putchar(char)+0xc3>
c0017547:	83 f8 4a             	cmp    eax,0x4a
c001754a:	75 1f                	jne    c001756b <VgaText::putchar(char)+0xc3>
c001754c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017550:	75 19                	jne    c001756b <VgaText::putchar(char)+0xc3>
c0017552:	83 ec 0c             	sub    esp,0xc
c0017555:	53                   	push   ebx
c0017556:	e8 89 fd ff ff       	call   c00172e4 <VgaText::clearScreen()>
c001755b:	83 c4 0c             	add    esp,0xc
c001755e:	6a 00                	push   0x0
c0017560:	6a 00                	push   0x0
c0017562:	53                   	push   ebx
c0017563:	e8 1a fd ff ff       	call   c0017282 <VgaText::setCursor(int, int)>
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017571:	eb 26                	jmp    c0017599 <VgaText::putchar(char)+0xf1>
c0017573:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017576:	83 f8 0e             	cmp    eax,0xe
c0017579:	7f 1e                	jg     c0017599 <VgaText::putchar(char)+0xf1>
c001757b:	8d 48 01             	lea    ecx,[eax+0x1]
c001757e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017581:	89 f9                	mov    ecx,edi
c0017583:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0017587:	eb 10                	jmp    c0017599 <VgaText::putchar(char)+0xf1>
c0017589:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001758c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001758f:	50                   	push   eax
c0017590:	53                   	push   ebx
c0017591:	e8 42 fe ff ff       	call   c00173d8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017596:	83 c4 10             	add    esp,0x10
c0017599:	83 c4 10             	add    esp,0x10
c001759c:	5b                   	pop    ebx
c001759d:	5e                   	pop    esi
c001759e:	5f                   	pop    edi
c001759f:	c3                   	ret    

c00175a0 <VgaText::putx(unsigned int)>:
c00175a0:	57                   	push   edi
c00175a1:	b9 11 00 00 00       	mov    ecx,0x11
c00175a6:	56                   	push   esi
c00175a7:	be 7a 15 03 c0       	mov    esi,0xc003157a
c00175ac:	53                   	push   ebx
c00175ad:	83 ec 20             	sub    esp,0x20
c00175b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00175b4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00175b8:	fc                   	cld    
c00175b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175bb:	be 08 00 00 00       	mov    esi,0x8
c00175c0:	50                   	push   eax
c00175c1:	50                   	push   eax
c00175c2:	89 d8                	mov    eax,ebx
c00175c4:	c1 e3 04             	shl    ebx,0x4
c00175c7:	c1 e8 1c             	shr    eax,0x1c
c00175ca:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00175cf:	50                   	push   eax
c00175d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00175d4:	e8 cf fe ff ff       	call   c00174a8 <VgaText::putchar(char)>
c00175d9:	83 c4 10             	add    esp,0x10
c00175dc:	4e                   	dec    esi
c00175dd:	75 e1                	jne    c00175c0 <VgaText::putx(unsigned int)+0x20>
c00175df:	83 c4 20             	add    esp,0x20
c00175e2:	5b                   	pop    ebx
c00175e3:	5e                   	pop    esi
c00175e4:	5f                   	pop    edi
c00175e5:	c3                   	ret    

c00175e6 <VgaText::puts(char const*)>:
c00175e6:	53                   	push   ebx
c00175e7:	83 ec 08             	sub    esp,0x8
c00175ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175ee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00175f1:	85 c0                	test   eax,eax
c00175f3:	74 12                	je     c0017607 <VgaText::puts(char const*)+0x21>
c00175f5:	43                   	inc    ebx
c00175f6:	51                   	push   ecx
c00175f7:	51                   	push   ecx
c00175f8:	50                   	push   eax
c00175f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175fd:	e8 a6 fe ff ff       	call   c00174a8 <VgaText::putchar(char)>
c0017602:	83 c4 10             	add    esp,0x10
c0017605:	eb e7                	jmp    c00175ee <VgaText::puts(char const*)+0x8>
c0017607:	83 c4 08             	add    esp,0x8
c001760a:	5b                   	pop    ebx
c001760b:	c3                   	ret    

c001760c <VgaText::write(unsigned long long, void*, int*)>:
c001760c:	55                   	push   ebp
c001760d:	57                   	push   edi
c001760e:	56                   	push   esi
c001760f:	53                   	push   ebx
c0017610:	83 ec 0c             	sub    esp,0xc
c0017613:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0017617:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001761b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001761f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0017626:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0017629:	39 eb                	cmp    ebx,ebp
c001762b:	74 13                	je     c0017640 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001762d:	43                   	inc    ebx
c001762e:	50                   	push   eax
c001762f:	50                   	push   eax
c0017630:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0017634:	50                   	push   eax
c0017635:	56                   	push   esi
c0017636:	e8 6d fe ff ff       	call   c00174a8 <VgaText::putchar(char)>
c001763b:	83 c4 10             	add    esp,0x10
c001763e:	eb e9                	jmp    c0017629 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017640:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0017647:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001764b:	89 38                	mov    DWORD PTR [eax],edi
c001764d:	83 c4 0c             	add    esp,0xc
c0017650:	31 c0                	xor    eax,eax
c0017652:	5b                   	pop    ebx
c0017653:	5e                   	pop    esi
c0017654:	5f                   	pop    edi
c0017655:	5d                   	pop    ebp
c0017656:	c3                   	ret    
c0017657:	90                   	nop

c0017658 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017658:	55                   	push   ebp
c0017659:	57                   	push   edi
c001765a:	56                   	push   esi
c001765b:	53                   	push   ebx
c001765c:	83 ec 0c             	sub    esp,0xc
c001765f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017663:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017668:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001766f:	50                   	push   eax
c0017670:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017675:	50                   	push   eax
c0017676:	e8 b3 fa ff ff       	call   c001712e <VgaText::combineColours(unsigned char, unsigned char)>
c001767b:	5a                   	pop    edx
c001767c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017680:	59                   	pop    ecx
c0017681:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017684:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017688:	0f b7 f6             	movzx  esi,si
c001768b:	0f b6 e8             	movzx  ebp,al
c001768e:	01 f6                	add    esi,esi
c0017690:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017693:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017696:	85 c0                	test   eax,eax
c0017698:	0f 84 ef 00 00 00    	je     c001778d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001769e:	83 f8 0d             	cmp    eax,0xd
c00176a1:	75 0c                	jne    c00176af <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c00176a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00176aa:	e9 d8 00 00 00       	jmp    c0017787 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00176af:	83 f8 0a             	cmp    eax,0xa
c00176b2:	75 44                	jne    c00176f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c00176b4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00176b7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00176be:	8d 48 01             	lea    ecx,[eax+0x1]
c00176c1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00176c4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00176c7:	75 0f                	jne    c00176d8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00176c9:	83 ec 0c             	sub    esp,0xc
c00176cc:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00176cf:	53                   	push   ebx
c00176d0:	e8 6b fa ff ff       	call   c0017140 <VgaText::scrollScreen()>
c00176d5:	83 c4 10             	add    esp,0x10
c00176d8:	83 ec 0c             	sub    esp,0xc
c00176db:	53                   	push   ebx
c00176dc:	e8 69 f9 ff ff       	call   c001704a <VgaText::updateCursor()>
c00176e1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00176e5:	83 c4 10             	add    esp,0x10
c00176e8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00176eb:	0f b7 f6             	movzx  esi,si
c00176ee:	01 f6                	add    esi,esi
c00176f0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00176f3:	e9 8f 00 00 00       	jmp    c0017787 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00176f8:	83 f8 08             	cmp    eax,0x8
c00176fb:	75 34                	jne    c0017731 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00176fd:	51                   	push   ecx
c00176fe:	51                   	push   ecx
c00176ff:	6a 01                	push   0x1
c0017701:	53                   	push   ebx
c0017702:	e8 af fc ff ff       	call   c00173b6 <VgaText::decrementCursor(bool)>
c0017707:	5e                   	pop    esi
c0017708:	58                   	pop    eax
c0017709:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001770c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001770f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017712:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017715:	6a 20                	push   0x20
c0017717:	53                   	push   ebx
c0017718:	e8 c5 fa ff ff       	call   c00171e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001771d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017721:	83 c4 20             	add    esp,0x20
c0017724:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017727:	0f b7 f6             	movzx  esi,si
c001772a:	01 f6                	add    esi,esi
c001772c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001772f:	eb 56                	jmp    c0017787 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017731:	52                   	push   edx
c0017732:	52                   	push   edx
c0017733:	55                   	push   ebp
c0017734:	50                   	push   eax
c0017735:	e8 98 fa ff ff       	call   c00171d2 <VgaText::combineCharAndColour(char, unsigned char)>
c001773a:	83 c4 10             	add    esp,0x10
c001773d:	66 89 06             	mov    WORD PTR [esi],ax
c0017740:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0017746:	75 1d                	jne    c0017765 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017748:	83 ec 0c             	sub    esp,0xc
c001774b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001774e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017751:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017755:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017759:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001775c:	50                   	push   eax
c001775d:	e8 fa 07 01 00       	call   c0027f5c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017762:	83 c4 20             	add    esp,0x20
c0017765:	83 c6 02             	add    esi,0x2
c0017768:	50                   	push   eax
c0017769:	50                   	push   eax
c001776a:	6a 00                	push   0x0
c001776c:	53                   	push   ebx
c001776d:	e8 f0 fb ff ff       	call   c0017362 <VgaText::incrementCursor(bool)>
c0017772:	83 c4 10             	add    esp,0x10
c0017775:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017779:	75 0c                	jne    c0017787 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001777b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001777f:	0f b7 f6             	movzx  esi,si
c0017782:	01 f6                	add    esi,esi
c0017784:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017787:	47                   	inc    edi
c0017788:	e9 06 ff ff ff       	jmp    c0017693 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001778d:	83 ec 0c             	sub    esp,0xc
c0017790:	53                   	push   ebx
c0017791:	e8 b4 f8 ff ff       	call   c001704a <VgaText::updateCursor()>
c0017796:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001779d:	83 c4 1c             	add    esp,0x1c
c00177a0:	5b                   	pop    ebx
c00177a1:	5e                   	pop    esi
c00177a2:	5f                   	pop    edi
c00177a3:	5d                   	pop    ebp
c00177a4:	c3                   	ret    
c00177a5:	90                   	nop

c00177a6 <VgaText::VgaText(char const*)>:
c00177a6:	56                   	push   esi
c00177a7:	53                   	push   ebx
c00177a8:	83 ec 04             	sub    esp,0x4
c00177ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177af:	83 ec 08             	sub    esp,0x8
c00177b2:	6a 00                	push   0x0
c00177b4:	50                   	push   eax
c00177b5:	e8 44 05 00 00       	call   c0017cfe <UnixFile::UnixFile(int)>
c00177ba:	83 c4 10             	add    esp,0x10
c00177bd:	ba a0 15 03 c0       	mov    edx,0xc00315a0
c00177c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177c6:	89 10                	mov    DWORD PTR [eax],edx
c00177c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177cc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00177d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177d7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00177de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177e2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00177e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177ea:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00177ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177f2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00177f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177fd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0017804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017808:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001780f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017813:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001781a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001781e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0017825:	83 ec 0c             	sub    esp,0xc
c0017828:	6a 01                	push   0x1
c001782a:	e8 1e 09 00 00       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c001782f:	83 c4 10             	add    esp,0x10
c0017832:	89 c2                	mov    edx,eax
c0017834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017838:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001783b:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0017841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017845:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017848:	89 c6                	mov    esi,eax
c001784a:	e8 b0 f0 ff ff       	call   c00168ff <Phys::allocatePage()>
c001784f:	68 05 0c 00 00       	push   0xc05
c0017854:	56                   	push   esi
c0017855:	50                   	push   eax
c0017856:	53                   	push   ebx
c0017857:	e8 04 10 00 00       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017863:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017866:	83 ec 04             	sub    esp,0x4
c0017869:	68 a0 0f 00 00       	push   0xfa0
c001786e:	6a 00                	push   0x0
c0017870:	50                   	push   eax
c0017871:	e8 7a 8c fe ff       	call   c00004f0 <memset>
c0017876:	83 c4 10             	add    esp,0x10
c0017879:	83 ec 04             	sub    esp,0x4
c001787c:	6a 00                	push   0x0
c001787e:	6a 07                	push   0x7
c0017880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017884:	e8 6b f8 ff ff       	call   c00170f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017889:	83 c4 10             	add    esp,0x10
c001788c:	83 ec 04             	sub    esp,0x4
c001788f:	6a 00                	push   0x0
c0017891:	6a 00                	push   0x0
c0017893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017897:	e8 e6 f9 ff ff       	call   c0017282 <VgaText::setCursor(int, int)>
c001789c:	83 c4 10             	add    esp,0x10
c001789f:	83 ec 0c             	sub    esp,0xc
c00178a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178a6:	e8 39 fa ff ff       	call   c00172e4 <VgaText::clearScreen()>
c00178ab:	83 c4 10             	add    esp,0x10
c00178ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00178b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ba:	05 82 00 00 00       	add    eax,0x82
c00178bf:	83 ec 04             	sub    esp,0x4
c00178c2:	68 80 00 00 00       	push   0x80
c00178c7:	6a 00                	push   0x0
c00178c9:	50                   	push   eax
c00178ca:	e8 21 8c fe ff       	call   c00004f0 <memset>
c00178cf:	83 c4 10             	add    esp,0x10
c00178d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178d6:	05 02 01 00 00       	add    eax,0x102
c00178db:	83 ec 04             	sub    esp,0x4
c00178de:	68 80 00 00 00       	push   0x80
c00178e3:	6a 00                	push   0x0
c00178e5:	50                   	push   eax
c00178e6:	e8 05 8c fe ff       	call   c00004f0 <memset>
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	90                   	nop
c00178ef:	83 c4 04             	add    esp,0x4
c00178f2:	5b                   	pop    ebx
c00178f3:	5e                   	pop    esi
c00178f4:	c3                   	ret    
c00178f5:	90                   	nop

c00178f6 <VgaText::receiveKey(unsigned char)>:
c00178f6:	55                   	push   ebp
c00178f7:	57                   	push   edi
c00178f8:	56                   	push   esi
c00178f9:	53                   	push   ebx
c00178fa:	83 ec 2c             	sub    esp,0x2c
c00178fd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0017901:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017905:	89 ef                	mov    edi,ebp
c0017907:	81 e7 ff 00 00 00    	and    edi,0xff
c001790d:	0f 84 66 01 00 00    	je     c0017a79 <VgaText::receiveKey(unsigned char)+0x183>
c0017913:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0017919:	83 ff 08             	cmp    edi,0x8
c001791c:	75 73                	jne    c0017991 <VgaText::receiveKey(unsigned char)+0x9b>
c001791e:	83 ec 0c             	sub    esp,0xc
c0017921:	56                   	push   esi
c0017922:	e8 49 8c fe ff       	call   c0000570 <strlen>
c0017927:	83 c4 10             	add    esp,0x10
c001792a:	85 c0                	test   eax,eax
c001792c:	0f 84 02 01 00 00    	je     c0017a34 <VgaText::receiveKey(unsigned char)+0x13e>
c0017932:	50                   	push   eax
c0017933:	50                   	push   eax
c0017934:	6a 08                	push   0x8
c0017936:	53                   	push   ebx
c0017937:	e8 6c fb ff ff       	call   c00174a8 <VgaText::putchar(char)>
c001793c:	89 34 24             	mov    DWORD PTR [esp],esi
c001793f:	e8 2c 8c fe ff       	call   c0000570 <strlen>
c0017944:	83 c4 10             	add    esp,0x10
c0017947:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001794f:	83 fa 0d             	cmp    edx,0xd
c0017952:	89 d0                	mov    eax,edx
c0017954:	0f 95 c1             	setne  cl
c0017957:	83 fa 1f             	cmp    edx,0x1f
c001795a:	0f 9e c2             	setle  dl
c001795d:	0f b6 d2             	movzx  edx,dl
c0017960:	85 ca                	test   edx,ecx
c0017962:	74 17                	je     c001797b <VgaText::receiveKey(unsigned char)+0x85>
c0017964:	83 e8 08             	sub    eax,0x8
c0017967:	3c 02                	cmp    al,0x2
c0017969:	76 10                	jbe    c001797b <VgaText::receiveKey(unsigned char)+0x85>
c001796b:	55                   	push   ebp
c001796c:	55                   	push   ebp
c001796d:	68 8b 15 03 c0       	push   0xc003158b
c0017972:	53                   	push   ebx
c0017973:	e8 6e fc ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0017978:	83 c4 10             	add    esp,0x10
c001797b:	83 ec 0c             	sub    esp,0xc
c001797e:	56                   	push   esi
c001797f:	e8 ec 8b fe ff       	call   c0000570 <strlen>
c0017984:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001798c:	e9 a0 00 00 00       	jmp    c0017a31 <VgaText::receiveKey(unsigned char)+0x13b>
c0017991:	83 ec 0c             	sub    esp,0xc
c0017994:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001799a:	50                   	push   eax
c001799b:	e8 d0 8b fe ff       	call   c0000570 <strlen>
c00179a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00179a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179a7:	e8 c4 8b fe ff       	call   c0000570 <strlen>
c00179ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00179b7:	3d 80 00 00 00       	cmp    eax,0x80
c00179bc:	0f 87 b7 00 00 00    	ja     c0017a79 <VgaText::receiveKey(unsigned char)+0x183>
c00179c2:	8d 45 ff             	lea    eax,[ebp-0x1]
c00179c5:	8d 55 f7             	lea    edx,[ebp-0x9]
c00179c8:	3c 1e                	cmp    al,0x1e
c00179ca:	0f 96 c0             	setbe  al
c00179cd:	80 fa 01             	cmp    dl,0x1
c00179d0:	0f 97 c2             	seta   dl
c00179d3:	0f b6 d2             	movzx  edx,dl
c00179d6:	85 c2                	test   edx,eax
c00179d8:	74 2e                	je     c0017a08 <VgaText::receiveKey(unsigned char)+0x112>
c00179da:	83 ff 0d             	cmp    edi,0xd
c00179dd:	74 29                	je     c0017a08 <VgaText::receiveKey(unsigned char)+0x112>
c00179df:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00179e2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00179e5:	68 91 15 03 c0       	push   0xc0031591
c00179ea:	53                   	push   ebx
c00179eb:	e8 68 fc ff ff       	call   c0017658 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00179f0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00179f3:	8d 45 40             	lea    eax,[ebp+0x40]
c00179f6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00179f9:	0f b6 c0             	movzx  eax,al
c00179fc:	50                   	push   eax
c00179fd:	53                   	push   ebx
c00179fe:	e8 d5 f9 ff ff       	call   c00173d8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017a03:	83 c4 20             	add    esp,0x20
c0017a06:	eb 11                	jmp    c0017a19 <VgaText::receiveKey(unsigned char)+0x123>
c0017a08:	89 e8                	mov    eax,ebp
c0017a0a:	51                   	push   ecx
c0017a0b:	0f be c0             	movsx  eax,al
c0017a0e:	51                   	push   ecx
c0017a0f:	50                   	push   eax
c0017a10:	53                   	push   ebx
c0017a11:	e8 92 fa ff ff       	call   c00174a8 <VgaText::putchar(char)>
c0017a16:	83 c4 10             	add    esp,0x10
c0017a19:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a1e:	89 e8                	mov    eax,ebp
c0017a20:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017a24:	52                   	push   edx
c0017a25:	52                   	push   edx
c0017a26:	8d 44 24 26          	lea    eax,[esp+0x26]
c0017a2a:	50                   	push   eax
c0017a2b:	56                   	push   esi
c0017a2c:	e8 0f 8e fe ff       	call   c0000840 <strcat>
c0017a31:	83 c4 10             	add    esp,0x10
c0017a34:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0017a3a:	b0 01                	mov    al,0x1
c0017a3c:	83 ff 1c             	cmp    edi,0x1c
c0017a3f:	77 0e                	ja     c0017a4f <VgaText::receiveKey(unsigned char)+0x159>
c0017a41:	b8 08 04 00 10       	mov    eax,0x10000408
c0017a46:	89 f9                	mov    ecx,edi
c0017a48:	d3 e8                	shr    eax,cl
c0017a4a:	f7 d0                	not    eax
c0017a4c:	83 e0 01             	and    eax,0x1
c0017a4f:	84 c0                	test   al,al
c0017a51:	74 04                	je     c0017a57 <VgaText::receiveKey(unsigned char)+0x161>
c0017a53:	84 d2                	test   dl,dl
c0017a55:	74 22                	je     c0017a79 <VgaText::receiveKey(unsigned char)+0x183>
c0017a57:	81 c3 02 01 00 00    	add    ebx,0x102
c0017a5d:	50                   	push   eax
c0017a5e:	50                   	push   eax
c0017a5f:	56                   	push   esi
c0017a60:	53                   	push   ebx
c0017a61:	e8 da 8d fe ff       	call   c0000840 <strcat>
c0017a66:	83 c4 0c             	add    esp,0xc
c0017a69:	68 80 00 00 00       	push   0x80
c0017a6e:	6a 00                	push   0x0
c0017a70:	56                   	push   esi
c0017a71:	e8 7a 8a fe ff       	call   c00004f0 <memset>
c0017a76:	83 c4 10             	add    esp,0x10
c0017a79:	83 c4 2c             	add    esp,0x2c
c0017a7c:	5b                   	pop    ebx
c0017a7d:	5e                   	pop    esi
c0017a7e:	5f                   	pop    edi
c0017a7f:	5d                   	pop    ebp
c0017a80:	c3                   	ret    
c0017a81:	90                   	nop

c0017a82 <VgaText::doUpdate()>:
c0017a82:	c3                   	ret    
c0017a83:	90                   	nop

c0017a84 <TSS::TSS()>:
c0017a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017a8f:	90                   	nop
c0017a90:	c3                   	ret    
c0017a91:	90                   	nop
c0017a92:	66 90                	xchg   ax,ax

c0017a94 <TSS::setESP(unsigned long)>:
c0017a94:	55                   	push   ebp
c0017a95:	89 e5                	mov    ebp,esp
c0017a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a9d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017aa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017aa3:	90                   	nop
c0017aa4:	5d                   	pop    ebp
c0017aa5:	c3                   	ret    
c0017aa6:	66 90                	xchg   ax,ax

c0017aa8 <TSS::flush()>:
c0017aa8:	55                   	push   ebp
c0017aa9:	89 e5                	mov    ebp,esp
c0017aab:	83 ec 10             	sub    esp,0x10
c0017aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ab3:	83 c8 03             	or     eax,0x3
c0017ab6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017aba:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017abe:	66 89 d0             	mov    ax,dx
c0017ac1:	0f 00 d8             	ltr    ax
c0017ac4:	90                   	nop
c0017ac5:	c9                   	leave  
c0017ac6:	c3                   	ret    
c0017ac7:	90                   	nop

c0017ac8 <TSS::setup(unsigned long, unsigned long)>:
c0017ac8:	55                   	push   ebp
c0017ac9:	89 e5                	mov    ebp,esp
c0017acb:	83 ec 18             	sub    esp,0x18
c0017ace:	83 ec 0c             	sub    esp,0xc
c0017ad1:	6a 68                	push   0x68
c0017ad3:	e8 1e eb ff ff       	call   c00165f6 <malloc>
c0017ad8:	83 c4 10             	add    esp,0x10
c0017adb:	89 c2                	mov    edx,eax
c0017add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ae0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ae9:	83 ec 04             	sub    esp,0x4
c0017aec:	6a 68                	push   0x68
c0017aee:	6a 00                	push   0x0
c0017af0:	50                   	push   eax
c0017af1:	e8 fa 89 fe ff       	call   c00004f0 <memset>
c0017af6:	83 c4 10             	add    esp,0x10
c0017af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aff:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b0b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b17:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b1a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b23:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b2f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b3b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b47:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b53:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b5f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b6b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017b6e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b7a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b83:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b90:	0f 20 da             	mov    edx,cr3
c0017b93:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017b96:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017b99:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ba2:	83 ec 08             	sub    esp,0x8
c0017ba5:	50                   	push   eax
c0017ba6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017ba9:	50                   	push   eax
c0017baa:	e8 13 e2 ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0017baf:	83 c4 10             	add    esp,0x10
c0017bb2:	83 ec 08             	sub    esp,0x8
c0017bb5:	6a 68                	push   0x68
c0017bb7:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017bba:	50                   	push   eax
c0017bbb:	e8 1e e2 ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0017bc0:	83 c4 10             	add    esp,0x10
c0017bc3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017bc7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017bca:	83 e0 0f             	and    eax,0xf
c0017bcd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017bd0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017bd3:	83 c8 40             	or     eax,0x40
c0017bd6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017bd9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017bde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017be4:	05 78 01 00 00       	add    eax,0x178
c0017be9:	83 ec 04             	sub    esp,0x4
c0017bec:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017bef:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017bf2:	50                   	push   eax
c0017bf3:	e8 1a e2 ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0017bf8:	83 c4 10             	add    esp,0x10
c0017bfb:	89 c2                	mov    edx,eax
c0017bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c00:	89 10                	mov    DWORD PTR [eax],edx
c0017c02:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017c07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c0d:	05 78 01 00 00       	add    eax,0x178
c0017c12:	83 ec 0c             	sub    esp,0xc
c0017c15:	50                   	push   eax
c0017c16:	e8 21 e2 ff ff       	call   c0015e3c <GDT::flush()>
c0017c1b:	83 c4 10             	add    esp,0x10
c0017c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c23:	c9                   	leave  
c0017c24:	c3                   	ret    
c0017c25:	90                   	nop

c0017c26 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c31:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017c36:	75 08                	jne    c0017c40 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017c38:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017c3e:	eb 38                	jmp    c0017c78 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017c40:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017c45:	75 17                	jne    c0017c5e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017c47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c55:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c5b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017c5e:	89 c1                	mov    ecx,eax
c0017c60:	83 e1 fd             	and    ecx,0xfffffffd
c0017c63:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017c69:	74 cd                	je     c0017c38 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017c6b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017c70:	83 e0 ef             	and    eax,0xffffffef
c0017c73:	83 f8 08             	cmp    eax,0x8
c0017c76:	76 c0                	jbe    c0017c38 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017c78:	31 c0                	xor    eax,eax
c0017c7a:	c3                   	ret    
c0017c7b:	90                   	nop

c0017c7c <ReservedFilename::isAtty()>:
c0017c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c80:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017c83:	31 c0                	xor    eax,eax
c0017c85:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017c8b:	74 09                	je     c0017c96 <ReservedFilename::isAtty()+0x1a>
c0017c8d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017c93:	0f 94 c0             	sete   al
c0017c96:	c3                   	ret    
c0017c97:	90                   	nop

c0017c98 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ca3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ca7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017cac:	75 08                	jne    c0017cb6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017cae:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017cb4:	eb 3d                	jmp    c0017cf3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017cb6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017cbb:	75 17                	jne    c0017cd4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017cbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cc2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ccb:	8b 10                	mov    edx,DWORD PTR [eax]
c0017ccd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017cd1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017cd4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017cd9:	75 04                	jne    c0017cdf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017cdb:	89 0a                	mov    DWORD PTR [edx],ecx
c0017cdd:	eb 14                	jmp    c0017cf3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017cdf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017ce4:	74 c8                	je     c0017cae <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017ce6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017ceb:	83 e0 ef             	and    eax,0xffffffef
c0017cee:	83 f8 08             	cmp    eax,0x8
c0017cf1:	76 bb                	jbe    c0017cae <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017cf3:	31 c0                	xor    eax,eax
c0017cf5:	c3                   	ret    

c0017cf6 <UnixFile::getFileDescriptor()>:
c0017cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cfd:	c3                   	ret    

c0017cfe <UnixFile::UnixFile(int)>:
c0017cfe:	53                   	push   ebx
c0017cff:	83 ec 28             	sub    esp,0x28
c0017d02:	ba 68 16 03 c0       	mov    edx,0xc0031668
c0017d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d0b:	89 10                	mov    DWORD PTR [eax],edx
c0017d0d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017d15:	0f 8f 90 01 00 00    	jg     c0017eab <UnixFile::UnixFile(int)+0x1ad>
c0017d1b:	a1 e0 3e 03 c0       	mov    eax,ds:0xc0033ee0
c0017d20:	8d 50 01             	lea    edx,[eax+0x1]
c0017d23:	89 15 e0 3e 03 c0    	mov    DWORD PTR ds:0xc0033ee0,edx
c0017d29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017d30:	83 ec 08             	sub    esp,0x8
c0017d33:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017d37:	68 98 aa 03 c0       	push   0xc003aa98
c0017d3c:	e8 57 6e 01 00       	call   c002eb98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017d41:	83 c4 10             	add    esp,0x10
c0017d44:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017d49:	83 f0 01             	xor    eax,0x1
c0017d4c:	0f b6 c0             	movzx  eax,al
c0017d4f:	85 c0                	test   eax,eax
c0017d51:	0f 84 55 01 00 00    	je     c0017eac <UnixFile::UnixFile(int)+0x1ae>
c0017d57:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017d5e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017d66:	83 ec 0c             	sub    esp,0xc
c0017d69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d6d:	e8 84 e8 ff ff       	call   c00165f6 <malloc>
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	89 c3                	mov    ebx,eax
c0017d77:	83 ec 08             	sub    esp,0x8
c0017d7a:	68 03 ff ff 0f       	push   0xfffff03
c0017d7f:	53                   	push   ebx
c0017d80:	e8 2d 01 00 00       	call   c0017eb2 <ReservedFilename::ReservedFilename(int)>
c0017d85:	83 c4 10             	add    esp,0x10
c0017d88:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017d8e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017d96:	83 ec 0c             	sub    esp,0xc
c0017d99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d9d:	e8 54 e8 ff ff       	call   c00165f6 <malloc>
c0017da2:	83 c4 10             	add    esp,0x10
c0017da5:	89 c3                	mov    ebx,eax
c0017da7:	83 ec 08             	sub    esp,0x8
c0017daa:	68 01 ff ff 0f       	push   0xfffff01
c0017daf:	53                   	push   ebx
c0017db0:	e8 fd 00 00 00       	call   c0017eb2 <ReservedFilename::ReservedFilename(int)>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017dbe:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017dc6:	83 ec 0c             	sub    esp,0xc
c0017dc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017dcd:	e8 24 e8 ff ff       	call   c00165f6 <malloc>
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	89 c3                	mov    ebx,eax
c0017dd7:	83 ec 08             	sub    esp,0x8
c0017dda:	68 00 ff ff 0f       	push   0xfffff00
c0017ddf:	53                   	push   ebx
c0017de0:	e8 cd 00 00 00       	call   c0017eb2 <ReservedFilename::ReservedFilename(int)>
c0017de5:	83 c4 10             	add    esp,0x10
c0017de8:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017dee:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017df6:	83 ec 0c             	sub    esp,0xc
c0017df9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017dfd:	e8 f4 e7 ff ff       	call   c00165f6 <malloc>
c0017e02:	83 c4 10             	add    esp,0x10
c0017e05:	89 c3                	mov    ebx,eax
c0017e07:	83 ec 08             	sub    esp,0x8
c0017e0a:	68 02 ff ff 0f       	push   0xfffff02
c0017e0f:	53                   	push   ebx
c0017e10:	e8 9d 00 00 00       	call   c0017eb2 <ReservedFilename::ReservedFilename(int)>
c0017e15:	83 c4 10             	add    esp,0x10
c0017e18:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017e1e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017e26:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017e2b:	7f 7f                	jg     c0017eac <UnixFile::UnixFile(int)+0x1ae>
c0017e2d:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017e35:	83 ec 0c             	sub    esp,0xc
c0017e38:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e3c:	e8 b5 e7 ff ff       	call   c00165f6 <malloc>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	89 c3                	mov    ebx,eax
c0017e46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e4a:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017e4f:	83 ec 08             	sub    esp,0x8
c0017e52:	50                   	push   eax
c0017e53:	53                   	push   ebx
c0017e54:	e8 59 00 00 00       	call   c0017eb2 <ReservedFilename::ReservedFilename(int)>
c0017e59:	83 c4 10             	add    esp,0x10
c0017e5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e60:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017e67:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e76:	e8 7b e7 ff ff       	call   c00165f6 <malloc>
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	89 c3                	mov    ebx,eax
c0017e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e84:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017e89:	83 ec 08             	sub    esp,0x8
c0017e8c:	50                   	push   eax
c0017e8d:	53                   	push   ebx
c0017e8e:	e8 1f 00 00 00       	call   c0017eb2 <ReservedFilename::ReservedFilename(int)>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e9a:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017ea1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017ea6:	e9 7b ff ff ff       	jmp    c0017e26 <UnixFile::UnixFile(int)+0x128>
c0017eab:	90                   	nop
c0017eac:	83 c4 28             	add    esp,0x28
c0017eaf:	5b                   	pop    ebx
c0017eb0:	c3                   	ret    
c0017eb1:	90                   	nop

c0017eb2 <ReservedFilename::ReservedFilename(int)>:
c0017eb2:	83 ec 0c             	sub    esp,0xc
c0017eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eb9:	83 ec 08             	sub    esp,0x8
c0017ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ec0:	50                   	push   eax
c0017ec1:	e8 38 fe ff ff       	call   c0017cfe <UnixFile::UnixFile(int)>
c0017ec6:	83 c4 10             	add    esp,0x10
c0017ec9:	ba 84 16 03 c0       	mov    edx,0xc0031684
c0017ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ed2:	89 10                	mov    DWORD PTR [eax],edx
c0017ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ed8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017edc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017edf:	90                   	nop
c0017ee0:	83 c4 0c             	add    esp,0xc
c0017ee3:	c3                   	ret    

c0017ee4 <UnixFile::~UnixFile()>:
c0017ee4:	83 ec 1c             	sub    esp,0x1c
c0017ee7:	ba 68 16 03 c0       	mov    edx,0xc0031668
c0017eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef0:	89 10                	mov    DWORD PTR [eax],edx
c0017ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ef9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017efe:	7f 76                	jg     c0017f76 <UnixFile::~UnixFile()+0x92>
c0017f00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f08:	83 ec 0c             	sub    esp,0xc
c0017f0b:	68 98 aa 03 c0       	push   0xc003aa98
c0017f10:	e8 57 6d 01 00       	call   c002ec6c <LinkedList<UnixFile>::getFirstElement()>
c0017f15:	83 c4 10             	add    esp,0x10
c0017f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f1c:	83 ec 0c             	sub    esp,0xc
c0017f1f:	68 98 aa 03 c0       	push   0xc003aa98
c0017f24:	e8 4b 6d 01 00       	call   c002ec74 <LinkedList<UnixFile>::removeFirst()>
c0017f29:	83 c4 10             	add    esp,0x10
c0017f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f30:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017f34:	74 43                	je     c0017f79 <UnixFile::~UnixFile()+0x95>
c0017f36:	83 ec 08             	sub    esp,0x8
c0017f39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f3d:	68 98 aa 03 c0       	push   0xc003aa98
c0017f42:	e8 51 6c 01 00       	call   c002eb98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017f47:	83 c4 10             	add    esp,0x10
c0017f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f4e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f55:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017f5a:	0f 94 c0             	sete   al
c0017f5d:	0f b6 c0             	movzx  eax,al
c0017f60:	85 c0                	test   eax,eax
c0017f62:	74 a4                	je     c0017f08 <UnixFile::~UnixFile()+0x24>
c0017f64:	83 ec 0c             	sub    esp,0xc
c0017f67:	68 40 16 03 c0       	push   0xc0031640
c0017f6c:	e8 2d 85 00 00       	call   c002049e <KePanic(char const*)>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	eb 92                	jmp    c0017f08 <UnixFile::~UnixFile()+0x24>
c0017f76:	90                   	nop
c0017f77:	eb 01                	jmp    c0017f7a <UnixFile::~UnixFile()+0x96>
c0017f79:	90                   	nop
c0017f7a:	90                   	nop
c0017f7b:	83 c4 1c             	add    esp,0x1c
c0017f7e:	c3                   	ret    
c0017f7f:	90                   	nop

c0017f80 <UnixFile::~UnixFile()>:
c0017f80:	83 ec 0c             	sub    esp,0xc
c0017f83:	83 ec 0c             	sub    esp,0xc
c0017f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f8a:	e8 55 ff ff ff       	call   c0017ee4 <UnixFile::~UnixFile()>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	83 ec 08             	sub    esp,0x8
c0017f95:	6a 0c                	push   0xc
c0017f97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f9b:	e8 b8 13 00 00       	call   c0019358 <operator delete(void*, unsigned long)>
c0017fa0:	83 c4 10             	add    esp,0x10
c0017fa3:	83 c4 0c             	add    esp,0xc
c0017fa6:	c3                   	ret    
c0017fa7:	90                   	nop

c0017fa8 <ReservedFilename::~ReservedFilename()>:
c0017fa8:	83 ec 0c             	sub    esp,0xc
c0017fab:	ba 84 16 03 c0       	mov    edx,0xc0031684
c0017fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fb4:	89 10                	mov    DWORD PTR [eax],edx
c0017fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fba:	83 ec 0c             	sub    esp,0xc
c0017fbd:	50                   	push   eax
c0017fbe:	e8 21 ff ff ff       	call   c0017ee4 <UnixFile::~UnixFile()>
c0017fc3:	83 c4 10             	add    esp,0x10
c0017fc6:	90                   	nop
c0017fc7:	83 c4 0c             	add    esp,0xc
c0017fca:	c3                   	ret    
c0017fcb:	90                   	nop

c0017fcc <ReservedFilename::~ReservedFilename()>:
c0017fcc:	83 ec 0c             	sub    esp,0xc
c0017fcf:	83 ec 0c             	sub    esp,0xc
c0017fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fd6:	e8 cd ff ff ff       	call   c0017fa8 <ReservedFilename::~ReservedFilename()>
c0017fdb:	83 c4 10             	add    esp,0x10
c0017fde:	83 ec 08             	sub    esp,0x8
c0017fe1:	6a 0c                	push   0xc
c0017fe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fe7:	e8 6c 13 00 00       	call   c0019358 <operator delete(void*, unsigned long)>
c0017fec:	83 c4 10             	add    esp,0x10
c0017fef:	83 c4 0c             	add    esp,0xc
c0017ff2:	c3                   	ret    

c0017ff3 <KeGetFileFromDescriptor(int)>:
c0017ff3:	53                   	push   ebx
c0017ff4:	83 ec 08             	sub    esp,0x8
c0017ff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ffb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0018001:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0018007:	7f 2c                	jg     c0018035 <KeGetFileFromDescriptor(int)+0x42>
c0018009:	83 ec 0c             	sub    esp,0xc
c001800c:	68 98 aa 03 c0       	push   0xc003aa98
c0018011:	e8 56 6c 01 00       	call   c002ec6c <LinkedList<UnixFile>::getFirstElement()>
c0018016:	83 c4 10             	add    esp,0x10
c0018019:	85 c0                	test   eax,eax
c001801b:	75 04                	jne    c0018021 <KeGetFileFromDescriptor(int)+0x2e>
c001801d:	31 c0                	xor    eax,eax
c001801f:	eb 6e                	jmp    c001808f <KeGetFileFromDescriptor(int)+0x9c>
c0018021:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0018024:	74 69                	je     c001808f <KeGetFileFromDescriptor(int)+0x9c>
c0018026:	52                   	push   edx
c0018027:	52                   	push   edx
c0018028:	50                   	push   eax
c0018029:	68 98 aa 03 c0       	push   0xc003aa98
c001802e:	e8 e3 6c 01 00       	call   c002ed16 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0018033:	eb e1                	jmp    c0018016 <KeGetFileFromDescriptor(int)+0x23>
c0018035:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c001803a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0018040:	74 4d                	je     c001808f <KeGetFileFromDescriptor(int)+0x9c>
c0018042:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0018047:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001804d:	74 40                	je     c001808f <KeGetFileFromDescriptor(int)+0x9c>
c001804f:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0018054:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001805a:	74 33                	je     c001808f <KeGetFileFromDescriptor(int)+0x9c>
c001805c:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0018061:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0018067:	74 26                	je     c001808f <KeGetFileFromDescriptor(int)+0x9c>
c0018069:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001806f:	83 f8 08             	cmp    eax,0x8
c0018072:	77 09                	ja     c001807d <KeGetFileFromDescriptor(int)+0x8a>
c0018074:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c001807b:	eb 12                	jmp    c001808f <KeGetFileFromDescriptor(int)+0x9c>
c001807d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0018083:	83 fb 08             	cmp    ebx,0x8
c0018086:	77 95                	ja     c001801d <KeGetFileFromDescriptor(int)+0x2a>
c0018088:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c001808f:	83 c4 08             	add    esp,0x8
c0018092:	5b                   	pop    ebx
c0018093:	c3                   	ret    

c0018094 <__static_initialization_and_destruction_0(int, int)>:
c0018094:	83 ec 0c             	sub    esp,0xc
c0018097:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001809c:	75 34                	jne    c00180d2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001809e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00180a6:	75 2a                	jne    c00180d2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00180a8:	83 ec 0c             	sub    esp,0xc
c00180ab:	68 98 aa 03 c0       	push   0xc003aa98
c00180b0:	e8 a1 6a 01 00       	call   c002eb56 <LinkedList<UnixFile>::LinkedList()>
c00180b5:	83 c4 10             	add    esp,0x10
c00180b8:	83 ec 04             	sub    esp,0x4
c00180bb:	68 58 3e 03 c0       	push   0xc0033e58
c00180c0:	68 98 aa 03 c0       	push   0xc003aa98
c00180c5:	68 54 eb 02 c0       	push   0xc002eb54
c00180ca:	e8 39 12 00 00       	call   c0019308 <__cxa_atexit>
c00180cf:	83 c4 10             	add    esp,0x10
c00180d2:	90                   	nop
c00180d3:	83 c4 0c             	add    esp,0xc
c00180d6:	c3                   	ret    

c00180d7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00180d7:	83 ec 0c             	sub    esp,0xc
c00180da:	83 ec 08             	sub    esp,0x8
c00180dd:	68 ff ff 00 00       	push   0xffff
c00180e2:	6a 01                	push   0x1
c00180e4:	e8 ab ff ff ff       	call   c0018094 <__static_initialization_and_destruction_0(int, int)>
c00180e9:	83 c4 10             	add    esp,0x10
c00180ec:	83 c4 0c             	add    esp,0xc
c00180ef:	c3                   	ret    

c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00180f0:	53                   	push   ebx
c00180f1:	8b 15 e8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033ee8
c00180f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00180ff:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0018105:	89 d8                	mov    eax,ebx
c0018107:	d1 e8                	shr    eax,1
c0018109:	01 d0                	add    eax,edx
c001810b:	80 e3 01             	and    bl,0x1
c001810e:	8a 10                	mov    dl,BYTE PTR [eax]
c0018110:	75 09                	jne    c001811b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0018112:	83 e2 f0             	and    edx,0xfffffff0
c0018115:	09 ca                	or     edx,ecx
c0018117:	88 10                	mov    BYTE PTR [eax],dl
c0018119:	5b                   	pop    ebx
c001811a:	c3                   	ret    
c001811b:	83 e2 0f             	and    edx,0xf
c001811e:	0f b6 c9             	movzx  ecx,cl
c0018121:	c1 e1 04             	shl    ecx,0x4
c0018124:	09 ca                	or     edx,ecx
c0018126:	88 10                	mov    BYTE PTR [eax],dl
c0018128:	5b                   	pop    ebx
c0018129:	c3                   	ret    

c001812a <Virt::getPageState(unsigned long)>:
c001812a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001812e:	8b 0d e8 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033ee8
c0018134:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001813a:	89 d0                	mov    eax,edx
c001813c:	d1 e8                	shr    eax,1
c001813e:	80 e2 01             	and    dl,0x1
c0018141:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0018144:	74 03                	je     c0018149 <Virt::getPageState(unsigned long)+0x1f>
c0018146:	c1 e8 04             	shr    eax,0x4
c0018149:	83 e0 0f             	and    eax,0xf
c001814c:	c3                   	ret    

c001814d <Virt::allocateKernelVirtualPages(int)>:
c001814d:	55                   	push   ebp
c001814e:	31 ed                	xor    ebp,ebp
c0018150:	57                   	push   edi
c0018151:	31 ff                	xor    edi,edi
c0018153:	56                   	push   esi
c0018154:	53                   	push   ebx
c0018155:	31 db                	xor    ebx,ebx
c0018157:	83 ec 0c             	sub    esp,0xc
c001815a:	8b 35 e4 3e 03 c0    	mov    esi,DWORD PTR ds:0xc0033ee4
c0018160:	56                   	push   esi
c0018161:	e8 c4 ff ff ff       	call   c001812a <Virt::getPageState(unsigned long)>
c0018166:	5a                   	pop    edx
c0018167:	84 c0                	test   al,al
c0018169:	75 41                	jne    c00181ac <Virt::allocateKernelVirtualPages(int)+0x5f>
c001816b:	85 db                	test   ebx,ebx
c001816d:	75 02                	jne    c0018171 <Virt::allocateKernelVirtualPages(int)+0x24>
c001816f:	89 f5                	mov    ebp,esi
c0018171:	83 c3 01             	add    ebx,0x1
c0018174:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0018178:	74 5f                	je     c00181d9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c001817a:	83 c6 01             	add    esi,0x1
c001817d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0018183:	76 34                	jbe    c00181b9 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0018185:	c7 05 e4 3e 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033ee4,0xc8000
c001818f:	f7 c7 01 00 00 00    	test   edi,0x1
c0018195:	75 2a                	jne    c00181c1 <Virt::allocateKernelVirtualPages(int)+0x74>
c0018197:	be 00 80 0c 00       	mov    esi,0xc8000
c001819c:	bf 01 00 00 00       	mov    edi,0x1
c00181a1:	56                   	push   esi
c00181a2:	e8 83 ff ff ff       	call   c001812a <Virt::getPageState(unsigned long)>
c00181a7:	5a                   	pop    edx
c00181a8:	84 c0                	test   al,al
c00181aa:	74 bf                	je     c001816b <Virt::allocateKernelVirtualPages(int)+0x1e>
c00181ac:	31 db                	xor    ebx,ebx
c00181ae:	83 c6 01             	add    esi,0x1
c00181b1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00181b7:	77 cc                	ja     c0018185 <Virt::allocateKernelVirtualPages(int)+0x38>
c00181b9:	89 35 e4 3e 03 c0    	mov    DWORD PTR ds:0xc0033ee4,esi
c00181bf:	eb 9f                	jmp    c0018160 <Virt::allocateKernelVirtualPages(int)+0x13>
c00181c1:	83 ec 0c             	sub    esp,0xc
c00181c4:	68 98 16 03 c0       	push   0xc0031698
c00181c9:	e8 d0 82 00 00       	call   c002049e <KePanic(char const*)>
c00181ce:	8b 35 e4 3e 03 c0    	mov    esi,DWORD PTR ds:0xc0033ee4
c00181d4:	83 c4 10             	add    esp,0x10
c00181d7:	eb 87                	jmp    c0018160 <Virt::allocateKernelVirtualPages(int)+0x13>
c00181d9:	89 2d e4 3e 03 c0    	mov    DWORD PTR ds:0xc0033ee4,ebp
c00181df:	83 fb 01             	cmp    ebx,0x1
c00181e2:	74 6f                	je     c0018253 <Virt::allocateKernelVirtualPages(int)+0x106>
c00181e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00181e8:	85 c9                	test   ecx,ecx
c00181ea:	74 49                	je     c0018235 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00181ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00181f0:	89 e8                	mov    eax,ebp
c00181f2:	31 db                	xor    ebx,ebx
c00181f4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00181f7:	eb 18                	jmp    c0018211 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00181f9:	6a 01                	push   0x1
c00181fb:	83 c3 01             	add    ebx,0x1
c00181fe:	50                   	push   eax
c00181ff:	e8 ec fe ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018204:	58                   	pop    eax
c0018205:	5a                   	pop    edx
c0018206:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001820a:	74 29                	je     c0018235 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001820c:	a1 e4 3e 03 c0       	mov    eax,ds:0xc0033ee4
c0018211:	8d 50 01             	lea    edx,[eax+0x1]
c0018214:	85 db                	test   ebx,ebx
c0018216:	89 15 e4 3e 03 c0    	mov    DWORD PTR ds:0xc0033ee4,edx
c001821c:	74 24                	je     c0018242 <Virt::allocateKernelVirtualPages(int)+0xf5>
c001821e:	39 df                	cmp    edi,ebx
c0018220:	75 d7                	jne    c00181f9 <Virt::allocateKernelVirtualPages(int)+0xac>
c0018222:	6a 03                	push   0x3
c0018224:	83 c3 01             	add    ebx,0x1
c0018227:	50                   	push   eax
c0018228:	e8 c3 fe ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001822d:	59                   	pop    ecx
c001822e:	5e                   	pop    esi
c001822f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0018233:	75 d7                	jne    c001820c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0018235:	83 c4 0c             	add    esp,0xc
c0018238:	89 e8                	mov    eax,ebp
c001823a:	5b                   	pop    ebx
c001823b:	c1 e0 0c             	shl    eax,0xc
c001823e:	5e                   	pop    esi
c001823f:	5f                   	pop    edi
c0018240:	5d                   	pop    ebp
c0018241:	c3                   	ret    
c0018242:	6a 02                	push   0x2
c0018244:	bb 01 00 00 00       	mov    ebx,0x1
c0018249:	50                   	push   eax
c001824a:	e8 a1 fe ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001824f:	58                   	pop    eax
c0018250:	5a                   	pop    edx
c0018251:	eb b9                	jmp    c001820c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0018253:	6a 04                	push   0x4
c0018255:	8d 45 01             	lea    eax,[ebp+0x1]
c0018258:	55                   	push   ebp
c0018259:	a3 e4 3e 03 c0       	mov    ds:0xc0033ee4,eax
c001825e:	e8 8d fe ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018263:	5b                   	pop    ebx
c0018264:	89 e8                	mov    eax,ebp
c0018266:	5e                   	pop    esi
c0018267:	c1 e0 0c             	shl    eax,0xc
c001826a:	83 c4 0c             	add    esp,0xc
c001826d:	5b                   	pop    ebx
c001826e:	5e                   	pop    esi
c001826f:	5f                   	pop    edi
c0018270:	5d                   	pop    ebp
c0018271:	c3                   	ret    

c0018272 <Virt::freeSwapfilePage(unsigned long)>:
c0018272:	53                   	push   ebx
c0018273:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0018279:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001827d:	b8 01 00 00 00       	mov    eax,0x1
c0018282:	89 cb                	mov    ebx,ecx
c0018284:	d3 e0                	shl    eax,cl
c0018286:	c1 eb 05             	shr    ebx,0x5
c0018289:	f7 d0                	not    eax
c001828b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001828e:	21 c1                	and    ecx,eax
c0018290:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0018293:	5b                   	pop    ebx
c0018294:	c3                   	ret    

c0018295 <Virt::swapIDToSector(unsigned long)>:
c0018295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018299:	8b 15 ec 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eec
c001829f:	8b 0d f4 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033ef4
c00182a5:	0f af c2             	imul   eax,edx
c00182a8:	01 c8                	add    eax,ecx
c00182aa:	c3                   	ret    

c00182ab <Virt::allocateSwapfilePage()>:
c00182ab:	55                   	push   ebp
c00182ac:	31 d2                	xor    edx,edx
c00182ae:	57                   	push   edi
c00182af:	56                   	push   esi
c00182b0:	53                   	push   ebx
c00182b1:	83 ec 0c             	sub    esp,0xc
c00182b4:	8b 0d ec 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033eec
c00182ba:	a1 f0 3e 03 c0       	mov    eax,ds:0xc0033ef0
c00182bf:	f7 f1                	div    ecx
c00182c1:	39 0d f0 3e 03 c0    	cmp    DWORD PTR ds:0xc0033ef0,ecx
c00182c7:	72 2f                	jb     c00182f8 <Virt::allocateSwapfilePage()+0x4d>
c00182c9:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c00182cf:	8b 16                	mov    edx,DWORD PTR [esi]
c00182d1:	f6 c2 01             	test   dl,0x1
c00182d4:	74 3e                	je     c0018314 <Virt::allocateSwapfilePage()+0x69>
c00182d6:	31 c9                	xor    ecx,ecx
c00182d8:	bf 01 00 00 00       	mov    edi,0x1
c00182dd:	eb 12                	jmp    c00182f1 <Virt::allocateSwapfilePage()+0x46>
c00182df:	89 fd                	mov    ebp,edi
c00182e1:	89 ca                	mov    edx,ecx
c00182e3:	d3 e5                	shl    ebp,cl
c00182e5:	c1 ea 05             	shr    edx,0x5
c00182e8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00182eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00182ed:	85 ea                	test   edx,ebp
c00182ef:	74 2c                	je     c001831d <Virt::allocateSwapfilePage()+0x72>
c00182f1:	83 c1 01             	add    ecx,0x1
c00182f4:	39 c8                	cmp    eax,ecx
c00182f6:	77 e7                	ja     c00182df <Virt::allocateSwapfilePage()+0x34>
c00182f8:	83 ec 0c             	sub    esp,0xc
c00182fb:	68 2c 19 03 c0       	push   0xc003192c
c0018300:	e8 99 81 00 00       	call   c002049e <KePanic(char const*)>
c0018305:	83 c4 10             	add    esp,0x10
c0018308:	31 c9                	xor    ecx,ecx
c001830a:	83 c4 0c             	add    esp,0xc
c001830d:	89 c8                	mov    eax,ecx
c001830f:	5b                   	pop    ebx
c0018310:	5e                   	pop    esi
c0018311:	5f                   	pop    edi
c0018312:	5d                   	pop    ebp
c0018313:	c3                   	ret    
c0018314:	89 f3                	mov    ebx,esi
c0018316:	bd 01 00 00 00       	mov    ebp,0x1
c001831b:	31 c9                	xor    ecx,ecx
c001831d:	09 ea                	or     edx,ebp
c001831f:	89 c8                	mov    eax,ecx
c0018321:	89 13                	mov    DWORD PTR [ebx],edx
c0018323:	83 c4 0c             	add    esp,0xc
c0018326:	5b                   	pop    ebx
c0018327:	5e                   	pop    esi
c0018328:	5f                   	pop    edi
c0018329:	5d                   	pop    ebp
c001832a:	c3                   	ret    

c001832b <Virt::virtualMemorySetup()>:
c001832b:	53                   	push   ebx
c001832c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018331:	6a 0f                	push   0xf
c0018333:	53                   	push   ebx
c0018334:	83 c3 01             	add    ebx,0x1
c0018337:	e8 b4 fd ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001833c:	58                   	pop    eax
c001833d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018343:	5a                   	pop    edx
c0018344:	75 eb                	jne    c0018331 <Virt::virtualMemorySetup()+0x6>
c0018346:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001834b:	6a 00                	push   0x0
c001834d:	53                   	push   ebx
c001834e:	83 c3 01             	add    ebx,0x1
c0018351:	e8 9a fd ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018356:	59                   	pop    ecx
c0018357:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001835d:	58                   	pop    eax
c001835e:	75 eb                	jne    c001834b <Virt::virtualMemorySetup()+0x20>
c0018360:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018365:	6a 0f                	push   0xf
c0018367:	53                   	push   ebx
c0018368:	83 c3 01             	add    ebx,0x1
c001836b:	e8 80 fd ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018370:	58                   	pop    eax
c0018371:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0018377:	5a                   	pop    edx
c0018378:	75 eb                	jne    c0018365 <Virt::virtualMemorySetup()+0x3a>
c001837a:	5b                   	pop    ebx
c001837b:	c3                   	ret    

c001837c <Virt::setupPageSwapping(int)>:
c001837c:	53                   	push   ebx
c001837d:	83 ec 0c             	sub    esp,0xc
c0018380:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018384:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018389:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001838f:	8b 10                	mov    edx,DWORD PTR [eax]
c0018391:	53                   	push   ebx
c0018392:	c1 e3 0b             	shl    ebx,0xb
c0018395:	68 43 19 03 c0       	push   0xc0031943
c001839a:	50                   	push   eax
c001839b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001839e:	89 1d f0 3e 03 c0    	mov    DWORD PTR ds:0xc0033ef0,ebx
c00183a4:	c6 05 f8 3e 03 c0 43 	mov    BYTE PTR ds:0xc0033ef8,0x43
c00183ab:	c1 eb 08             	shr    ebx,0x8
c00183ae:	a3 f4 3e 03 c0       	mov    ds:0xc0033ef4,eax
c00183b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183b6:	c7 05 ec 3e 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033eec,0x8
c00183c0:	e8 31 e2 ff ff       	call   c00165f6 <malloc>
c00183c5:	83 c4 0c             	add    esp,0xc
c00183c8:	89 c1                	mov    ecx,eax
c00183ca:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c00183cf:	31 d2                	xor    edx,edx
c00183d1:	a1 f0 3e 03 c0       	mov    eax,ds:0xc0033ef0
c00183d6:	f7 35 ec 3e 03 c0    	div    DWORD PTR ds:0xc0033eec
c00183dc:	c1 e8 05             	shr    eax,0x5
c00183df:	50                   	push   eax
c00183e0:	6a 00                	push   0x0
c00183e2:	51                   	push   ecx
c00183e3:	e8 08 81 fe ff       	call   c00004f0 <memset>
c00183e8:	83 c4 18             	add    esp,0x18
c00183eb:	5b                   	pop    ebx
c00183ec:	c3                   	ret    
c00183ed:	90                   	nop

c00183ee <VAS::setCPUSpecific(unsigned long)>:
c00183ee:	c3                   	ret    
c00183ef:	90                   	nop

c00183f0 <VAS::VAS(VAS*)>:
c00183f0:	83 ec 0c             	sub    esp,0xc
c00183f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018402:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018409:	83 ec 0c             	sub    esp,0xc
c001840c:	68 b8 16 03 c0       	push   0xc00316b8
c0018411:	e8 88 80 00 00       	call   c002049e <KePanic(char const*)>
c0018416:	83 c4 10             	add    esp,0x10
c0018419:	90                   	nop
c001841a:	83 c4 0c             	add    esp,0xc
c001841d:	c3                   	ret    

c001841e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001841e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018422:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0018427:	89 c2                	mov    edx,eax
c0018429:	c1 e8 0a             	shr    eax,0xa
c001842c:	c1 ea 16             	shr    edx,0x16
c001842f:	83 f9 01             	cmp    ecx,0x1
c0018432:	19 c9                	sbb    ecx,ecx
c0018434:	c1 e2 0c             	shl    edx,0xc
c0018437:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001843d:	25 fc 0f 00 00       	and    eax,0xffc
c0018442:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018449:	01 d0                	add    eax,edx
c001844b:	c3                   	ret    

c001844c <VAS::getPageTableEntry(unsigned long)>:
c001844c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018450:	89 ca                	mov    edx,ecx
c0018452:	c1 e9 0a             	shr    ecx,0xa
c0018455:	c1 ea 16             	shr    edx,0x16
c0018458:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001845e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018464:	c1 e0 0c             	shl    eax,0xc
c0018467:	8d 04 08             	lea    eax,[eax+ecx*1]
c001846a:	c3                   	ret    

c001846b <Virt::freeKernelVirtualPages(unsigned long)>:
c001846b:	55                   	push   ebp
c001846c:	57                   	push   edi
c001846d:	bf 01 00 00 00       	mov    edi,0x1
c0018472:	56                   	push   esi
c0018473:	53                   	push   ebx
c0018474:	83 ec 1c             	sub    esp,0x1c
c0018477:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001847b:	c1 ee 0c             	shr    esi,0xc
c001847e:	eb 48                	jmp    c00184c8 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018480:	83 ec 08             	sub    esp,0x8
c0018483:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018488:	55                   	push   ebp
c0018489:	50                   	push   eax
c001848a:	e8 bd ff ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	8b 10                	mov    edx,DWORD PTR [eax]
c0018494:	f6 c6 04             	test   dh,0x4
c0018497:	75 70                	jne    c0018509 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018499:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001849f:	83 fb 04             	cmp    ebx,0x4
c00184a2:	0f 84 8a 00 00 00    	je     c0018532 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00184a8:	83 fb 02             	cmp    ebx,0x2
c00184ab:	0f 84 9a 00 00 00    	je     c001854b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00184b1:	83 fb 03             	cmp    ebx,0x3
c00184b4:	0f 84 be 00 00 00    	je     c0018578 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00184ba:	83 fb 01             	cmp    ebx,0x1
c00184bd:	0f 84 a2 00 00 00    	je     c0018565 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00184c3:	83 c6 01             	add    esi,0x1
c00184c6:	31 ff                	xor    edi,edi
c00184c8:	56                   	push   esi
c00184c9:	89 f5                	mov    ebp,esi
c00184cb:	e8 5a fc ff ff       	call   c001812a <Virt::getPageState(unsigned long)>
c00184d0:	c1 e5 0c             	shl    ebp,0xc
c00184d3:	0f b6 d8             	movzx  ebx,al
c00184d6:	5a                   	pop    edx
c00184d7:	85 db                	test   ebx,ebx
c00184d9:	75 a5                	jne    c0018480 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00184db:	83 ec 0c             	sub    esp,0xc
c00184de:	68 5a 19 03 c0       	push   0xc003195a
c00184e3:	e8 b6 7f 00 00       	call   c002049e <KePanic(char const*)>
c00184e8:	5a                   	pop    edx
c00184e9:	59                   	pop    ecx
c00184ea:	55                   	push   ebp
c00184eb:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c00184f1:	55                   	push   ebp
c00184f2:	e8 55 ff ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c00184f7:	83 c4 10             	add    esp,0x10
c00184fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00184fc:	f6 c6 04             	test   dh,0x4
c00184ff:	75 08                	jne    c0018509 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018501:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018507:	eb ba                	jmp    c00184c3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018509:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001850d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0018513:	83 ec 0c             	sub    esp,0xc
c0018516:	52                   	push   edx
c0018517:	e8 7a e3 ff ff       	call   c0016896 <Phys::freePage(unsigned long)>
c001851c:	83 c4 10             	add    esp,0x10
c001851f:	83 fb 04             	cmp    ebx,0x4
c0018522:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018526:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001852c:	0f 85 76 ff ff ff    	jne    c00184a8 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0018532:	83 e7 01             	and    edi,0x1
c0018535:	75 46                	jne    c001857d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0018537:	c7 44 24 30 dc 16 03 c0 	mov    DWORD PTR [esp+0x30],0xc00316dc
c001853f:	83 c4 1c             	add    esp,0x1c
c0018542:	5b                   	pop    ebx
c0018543:	5e                   	pop    esi
c0018544:	5f                   	pop    edi
c0018545:	5d                   	pop    ebp
c0018546:	e9 53 7f 00 00       	jmp    c002049e <KePanic(char const*)>
c001854b:	83 e7 01             	and    edi,0x1
c001854e:	75 15                	jne    c0018565 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018550:	83 ec 0c             	sub    esp,0xc
c0018553:	68 76 19 03 c0       	push   0xc0031976
c0018558:	e8 41 7f 00 00       	call   c002049e <KePanic(char const*)>
c001855d:	83 c4 10             	add    esp,0x10
c0018560:	e9 5e ff ff ff       	jmp    c00184c3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018565:	83 ec 08             	sub    esp,0x8
c0018568:	6a 00                	push   0x0
c001856a:	56                   	push   esi
c001856b:	e8 80 fb ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018570:	83 c4 10             	add    esp,0x10
c0018573:	e9 4b ff ff ff       	jmp    c00184c3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018578:	83 e7 01             	and    edi,0x1
c001857b:	75 16                	jne    c0018593 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001857d:	83 ec 08             	sub    esp,0x8
c0018580:	6a 00                	push   0x0
c0018582:	56                   	push   esi
c0018583:	e8 68 fb ff ff       	call   c00180f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018588:	83 c4 10             	add    esp,0x10
c001858b:	83 c4 1c             	add    esp,0x1c
c001858e:	5b                   	pop    ebx
c001858f:	5e                   	pop    esi
c0018590:	5f                   	pop    edi
c0018591:	5d                   	pop    ebp
c0018592:	c3                   	ret    
c0018593:	c7 44 24 30 92 19 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031992
c001859b:	83 c4 1c             	add    esp,0x1c
c001859e:	5b                   	pop    ebx
c001859f:	5e                   	pop    esi
c00185a0:	5f                   	pop    edi
c00185a1:	5d                   	pop    ebp
c00185a2:	e9 f7 7e 00 00       	jmp    c002049e <KePanic(char const*)>
c00185a7:	90                   	nop

c00185a8 <VAS::freeAllocatedPages(unsigned long)>:
c00185a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185b0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00185b4:	74 09                	je     c00185bf <VAS::freeAllocatedPages(unsigned long)+0x17>
c00185b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00185ba:	e9 ac fe ff ff       	jmp    c001846b <Virt::freeKernelVirtualPages(unsigned long)>
c00185bf:	c7 44 24 04 00 17 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031700
c00185c7:	e9 b9 0e 00 00       	jmp    c0019485 <Dbg::kprintf(char const*, ...)>

c00185cc <VAS::virtualToPhysical(unsigned long)>:
c00185cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185d0:	50                   	push   eax
c00185d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185d5:	52                   	push   edx
c00185d6:	e8 71 fe ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c00185db:	59                   	pop    ecx
c00185dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00185de:	5a                   	pop    edx
c00185df:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185e4:	c3                   	ret    
c00185e5:	90                   	nop

c00185e6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00185e6:	55                   	push   ebp
c00185e7:	57                   	push   edi
c00185e8:	56                   	push   esi
c00185e9:	53                   	push   ebx
c00185ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185ee:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00185f2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00185f6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00185fa:	85 db                	test   ebx,ebx
c00185fc:	7e 24                	jle    c0018622 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00185fe:	c1 e3 0c             	shl    ebx,0xc
c0018601:	01 f3                	add    ebx,esi
c0018603:	56                   	push   esi
c0018604:	81 c6 00 10 00 00    	add    esi,0x1000
c001860a:	55                   	push   ebp
c001860b:	e8 3c fe ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c0018610:	5a                   	pop    edx
c0018611:	59                   	pop    ecx
c0018612:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018614:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018618:	21 f9                	and    ecx,edi
c001861a:	09 d1                	or     ecx,edx
c001861c:	39 f3                	cmp    ebx,esi
c001861e:	89 08                	mov    DWORD PTR [eax],ecx
c0018620:	75 e1                	jne    c0018603 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0018622:	5b                   	pop    ebx
c0018623:	5e                   	pop    esi
c0018624:	5f                   	pop    edi
c0018625:	5d                   	pop    ebp
c0018626:	c3                   	ret    
c0018627:	90                   	nop

c0018628 <VAS::VAS()>:
c0018628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001862c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018637:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001863e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018642:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c0018647:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001864b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001864f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018653:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0018656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001865a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018661:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c0018666:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001866b:	29 c2                	sub    edx,eax
c001866d:	89 d0                	mov    eax,edx
c001866f:	05 ff 0f 00 00       	add    eax,0xfff
c0018674:	c1 e8 0c             	shr    eax,0xc
c0018677:	89 c2                	mov    edx,eax
c0018679:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001867e:	6a 04                	push   0x4
c0018680:	6a ff                	push   0xffffffff
c0018682:	52                   	push   edx
c0018683:	50                   	push   eax
c0018684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018688:	e8 59 ff ff ff       	call   c00185e6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001868d:	83 c4 14             	add    esp,0x14
c0018690:	90                   	nop
c0018691:	c3                   	ret    

c0018692 <VAS::setToWriteCombining(unsigned long, int)>:
c0018692:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018697:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001869d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00186a4:	75 01                	jne    c00186a7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00186a6:	c3                   	ret    
c00186a7:	68 80 00 00 00       	push   0x80
c00186ac:	6a ff                	push   0xffffffff
c00186ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186b2:	50                   	push   eax
c00186b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00186b7:	52                   	push   edx
c00186b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00186bc:	51                   	push   ecx
c00186bd:	e8 24 ff ff ff       	call   c00185e6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00186c2:	83 c4 14             	add    esp,0x14
c00186c5:	c3                   	ret    

c00186c6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00186c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186ca:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00186cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186d1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00186d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186d9:	83 f8 01             	cmp    eax,0x1
c00186dc:	19 c0                	sbb    eax,eax
c00186de:	83 ca 03             	or     edx,0x3
c00186e1:	83 e0 fc             	and    eax,0xfffffffc
c00186e4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00186eb:	0f 20 d8             	mov    eax,cr3
c00186ee:	0f 22 d8             	mov    cr3,eax
c00186f1:	c3                   	ret    

c00186f2 <VAS::~VAS()>:
c00186f2:	83 ec 2c             	sub    esp,0x2c
c00186f5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00186fd:	fa                   	cli    
c00186fe:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018703:	83 c0 01             	add    eax,0x1
c0018706:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001870b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018710:	8b 00                	mov    eax,DWORD PTR [eax]
c0018712:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018715:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001871b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001871f:	6a 01                	push   0x1
c0018721:	50                   	push   eax
c0018722:	e8 9f ff ff ff       	call   c00186c6 <VAS::mapOtherVASIn(bool, VAS*)>
c0018727:	83 c4 0c             	add    esp,0xc
c001872a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018732:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001873a:	0f 8f d8 00 00 00    	jg     c0018818 <VAS::~VAS()+0x126>
c0018740:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018744:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018747:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001874b:	c1 e2 02             	shl    edx,0x2
c001874e:	01 d0                	add    eax,edx
c0018750:	8b 00                	mov    eax,DWORD PTR [eax]
c0018752:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001875a:	83 e0 01             	and    eax,0x1
c001875d:	0f 84 ab 00 00 00    	je     c001880e <VAS::~VAS()+0x11c>
c0018763:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001876b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0018773:	7f 74                	jg     c00187e9 <VAS::~VAS()+0xf7>
c0018775:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018779:	c1 e0 0a             	shl    eax,0xa
c001877c:	89 c2                	mov    edx,eax
c001877e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018782:	01 d0                	add    eax,edx
c0018784:	c1 e0 0c             	shl    eax,0xc
c0018787:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001878b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018790:	8b 00                	mov    eax,DWORD PTR [eax]
c0018792:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018795:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001879b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001879f:	6a 01                	push   0x1
c00187a1:	50                   	push   eax
c00187a2:	e8 77 fc ff ff       	call   c001841e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00187a7:	83 c4 0c             	add    esp,0xc
c00187aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00187b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187bc:	25 01 04 00 00       	and    eax,0x401
c00187c1:	3d 01 04 00 00       	cmp    eax,0x401
c00187c6:	75 1a                	jne    c00187e2 <VAS::~VAS()+0xf0>
c00187c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00187d1:	83 ec 0c             	sub    esp,0xc
c00187d4:	50                   	push   eax
c00187d5:	e8 bc e0 ff ff       	call   c0016896 <Phys::freePage(unsigned long)>
c00187da:	83 c4 10             	add    esp,0x10
c00187dd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00187e2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00187e7:	eb 82                	jmp    c001876b <VAS::~VAS()+0x79>
c00187e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ed:	25 00 04 00 00       	and    eax,0x400
c00187f2:	74 1a                	je     c001880e <VAS::~VAS()+0x11c>
c00187f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00187fd:	83 ec 0c             	sub    esp,0xc
c0018800:	50                   	push   eax
c0018801:	e8 90 e0 ff ff       	call   c0016896 <Phys::freePage(unsigned long)>
c0018806:	83 c4 10             	add    esp,0x10
c0018809:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001880e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018813:	e9 1a ff ff ff       	jmp    c0018732 <VAS::~VAS()+0x40>
c0018818:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001881c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001881f:	83 ec 0c             	sub    esp,0xc
c0018822:	50                   	push   eax
c0018823:	e8 43 fc ff ff       	call   c001846b <Virt::freeKernelVirtualPages(unsigned long)>
c0018828:	83 c4 10             	add    esp,0x10
c001882b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001882f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018832:	83 ec 0c             	sub    esp,0xc
c0018835:	50                   	push   eax
c0018836:	e8 5b e0 ff ff       	call   c0016896 <Phys::freePage(unsigned long)>
c001883b:	83 c4 10             	add    esp,0x10
c001883e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018843:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018848:	83 e8 01             	sub    eax,0x1
c001884b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018850:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018855:	85 c0                	test   eax,eax
c0018857:	75 01                	jne    c001885a <VAS::~VAS()+0x168>
c0018859:	fb                   	sti    
c001885a:	90                   	nop
c001885b:	83 c4 2c             	add    esp,0x2c
c001885e:	c3                   	ret    
c001885f:	90                   	nop

c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018860:	55                   	push   ebp
c0018861:	57                   	push   edi
c0018862:	56                   	push   esi
c0018863:	53                   	push   ebx
c0018864:	83 ec 1c             	sub    esp,0x1c
c0018867:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001886b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001886f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018875:	77 08                	ja     c001887f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0018877:	0f 20 d8             	mov    eax,cr3
c001887a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001887d:	75 49                	jne    c00188c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c001887f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018883:	09 d8                	or     eax,ebx
c0018885:	a9 ff 0f 00 00       	test   eax,0xfff
c001888a:	75 59                	jne    c00188e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c001888c:	89 de                	mov    esi,ebx
c001888e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018891:	c1 ee 16             	shr    esi,0x16
c0018894:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001889b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001889f:	74 56                	je     c00188f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c00188a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188a5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00188a9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00188af:	c1 eb 0a             	shr    ebx,0xa
c00188b2:	c1 e6 0c             	shl    esi,0xc
c00188b5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00188bb:	09 d0                	or     eax,edx
c00188bd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00188c0:	83 c4 1c             	add    esp,0x1c
c00188c3:	5b                   	pop    ebx
c00188c4:	5e                   	pop    esi
c00188c5:	5f                   	pop    edi
c00188c6:	5d                   	pop    ebp
c00188c7:	c3                   	ret    
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	68 24 17 03 c0       	push   0xc0031724
c00188d0:	e8 b0 0b 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00188d5:	83 c4 10             	add    esp,0x10
c00188d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00188dc:	09 d8                	or     eax,ebx
c00188de:	a9 ff 0f 00 00       	test   eax,0xfff
c00188e3:	74 a7                	je     c001888c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00188e5:	83 ec 0c             	sub    esp,0xc
c00188e8:	68 8c 17 03 c0       	push   0xc003178c
c00188ed:	e8 ac 7b 00 00       	call   c002049e <KePanic(char const*)>
c00188f2:	83 c4 10             	add    esp,0x10
c00188f5:	eb 95                	jmp    c001888c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00188f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00188fb:	e8 ff df ff ff       	call   c00168ff <Phys::allocatePage()>
c0018900:	83 ec 0c             	sub    esp,0xc
c0018903:	89 c5                	mov    ebp,eax
c0018905:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c001890b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001890f:	6a 01                	push   0x1
c0018911:	e8 37 f8 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c0018916:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001891d:	6a 01                	push   0x1
c001891f:	50                   	push   eax
c0018920:	55                   	push   ebp
c0018921:	81 cd 07 04 00 00    	or     ebp,0x407
c0018927:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001892b:	51                   	push   ecx
c001892c:	e8 29 01 00 00       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018931:	83 c4 1c             	add    esp,0x1c
c0018934:	68 00 10 00 00       	push   0x1000
c0018939:	6a 00                	push   0x0
c001893b:	50                   	push   eax
c001893c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018940:	e8 ab 7b fe ff       	call   c00004f0 <memset>
c0018945:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018949:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001894c:	e8 1a fb ff ff       	call   c001846b <Virt::freeKernelVirtualPages(unsigned long)>
c0018951:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018955:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018958:	83 c4 10             	add    esp,0x10
c001895b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001895e:	e9 3e ff ff ff       	jmp    c00188a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0018963:	90                   	nop

c0018964 <VAS::allocatePages(int, int)>:
c0018964:	55                   	push   ebp
c0018965:	57                   	push   edi
c0018966:	56                   	push   esi
c0018967:	53                   	push   ebx
c0018968:	83 ec 1c             	sub    esp,0x1c
c001896b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001896f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018973:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018977:	75 71                	jne    c00189ea <VAS::allocatePages(int, int)+0x86>
c0018979:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001897c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018980:	85 c0                	test   eax,eax
c0018982:	74 4d                	je     c00189d1 <VAS::allocatePages(int, int)+0x6d>
c0018984:	89 dd                	mov    ebp,ebx
c0018986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001898a:	c1 e5 0c             	shl    ebp,0xc
c001898d:	01 c5                	add    ebp,eax
c001898f:	85 db                	test   ebx,ebx
c0018991:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018994:	7e 29                	jle    c00189bf <VAS::allocatePages(int, int)+0x5b>
c0018996:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001899a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001899e:	81 cf 00 04 00 00    	or     edi,0x400
c00189a4:	e8 56 df ff ff       	call   c00168ff <Phys::allocatePage()>
c00189a9:	57                   	push   edi
c00189aa:	53                   	push   ebx
c00189ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00189b1:	50                   	push   eax
c00189b2:	56                   	push   esi
c00189b3:	e8 a8 fe ff ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c00189b8:	83 c4 10             	add    esp,0x10
c00189bb:	39 dd                	cmp    ebp,ebx
c00189bd:	75 e5                	jne    c00189a4 <VAS::allocatePages(int, int)+0x40>
c00189bf:	0f 20 d8             	mov    eax,cr3
c00189c2:	0f 22 d8             	mov    cr3,eax
c00189c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189c9:	83 c4 1c             	add    esp,0x1c
c00189cc:	5b                   	pop    ebx
c00189cd:	5e                   	pop    esi
c00189ce:	5f                   	pop    edi
c00189cf:	5d                   	pop    ebp
c00189d0:	c3                   	ret    
c00189d1:	83 ec 0c             	sub    esp,0xc
c00189d4:	68 b0 17 03 c0       	push   0xc00317b0
c00189d9:	e8 c0 7a 00 00       	call   c002049e <KePanic(char const*)>
c00189de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00189e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189e5:	83 c4 10             	add    esp,0x10
c00189e8:	eb 9a                	jmp    c0018984 <VAS::allocatePages(int, int)+0x20>
c00189ea:	83 ec 0c             	sub    esp,0xc
c00189ed:	53                   	push   ebx
c00189ee:	e8 5a f7 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c00189f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189f7:	83 c4 10             	add    esp,0x10
c00189fa:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00189ff:	77 37                	ja     c0018a38 <VAS::allocatePages(int, int)+0xd4>
c0018a01:	85 db                	test   ebx,ebx
c0018a03:	7e ba                	jle    c00189bf <VAS::allocatePages(int, int)+0x5b>
c0018a05:	c1 e3 0c             	shl    ebx,0xc
c0018a08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a0c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018a10:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0018a13:	81 cf 00 04 00 00    	or     edi,0x400
c0018a19:	89 c3                	mov    ebx,eax
c0018a1b:	e8 df de ff ff       	call   c00168ff <Phys::allocatePage()>
c0018a20:	57                   	push   edi
c0018a21:	53                   	push   ebx
c0018a22:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018a28:	50                   	push   eax
c0018a29:	56                   	push   esi
c0018a2a:	e8 31 fe ff ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a2f:	83 c4 10             	add    esp,0x10
c0018a32:	39 dd                	cmp    ebp,ebx
c0018a34:	75 e5                	jne    c0018a1b <VAS::allocatePages(int, int)+0xb7>
c0018a36:	eb 87                	jmp    c00189bf <VAS::allocatePages(int, int)+0x5b>
c0018a38:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a43:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018a4a:	74 b5                	je     c0018a01 <VAS::allocatePages(int, int)+0x9d>
c0018a4c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018a50:	80 ce 01             	or     dh,0x1
c0018a53:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0018a57:	eb a8                	jmp    c0018a01 <VAS::allocatePages(int, int)+0x9d>
c0018a59:	90                   	nop

c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018a5a:	55                   	push   ebp
c0018a5b:	57                   	push   edi
c0018a5c:	56                   	push   esi
c0018a5d:	53                   	push   ebx
c0018a5e:	83 ec 0c             	sub    esp,0xc
c0018a61:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018a65:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018a69:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018a6d:	85 db                	test   ebx,ebx
c0018a6f:	7e 2f                	jle    c0018aa0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018a71:	c1 e3 0c             	shl    ebx,0xc
c0018a74:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a78:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018a7c:	01 d3                	add    ebx,edx
c0018a7e:	55                   	push   ebp
c0018a7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a87:	29 c2                	sub    edx,eax
c0018a89:	01 f2                	add    edx,esi
c0018a8b:	52                   	push   edx
c0018a8c:	56                   	push   esi
c0018a8d:	81 c6 00 10 00 00    	add    esi,0x1000
c0018a93:	57                   	push   edi
c0018a94:	e8 c7 fd ff ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a99:	83 c4 10             	add    esp,0x10
c0018a9c:	39 de                	cmp    esi,ebx
c0018a9e:	75 de                	jne    c0018a7e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0018aa0:	0f 20 d8             	mov    eax,cr3
c0018aa3:	0f 22 d8             	mov    cr3,eax
c0018aa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aaa:	83 c4 0c             	add    esp,0xc
c0018aad:	5b                   	pop    ebx
c0018aae:	5e                   	pop    esi
c0018aaf:	5f                   	pop    edi
c0018ab0:	5d                   	pop    ebp
c0018ab1:	c3                   	ret    

c0018ab2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018ab2:	55                   	push   ebp
c0018ab3:	57                   	push   edi
c0018ab4:	56                   	push   esi
c0018ab5:	53                   	push   ebx
c0018ab6:	83 ec 1c             	sub    esp,0x1c
c0018ab9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018abd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018ac1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018ac5:	09 f8                	or     eax,edi
c0018ac7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018acb:	a9 ff 0f 00 00       	test   eax,0xfff
c0018ad0:	75 4f                	jne    c0018b21 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018ad2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018ad6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018ad9:	c1 eb 16             	shr    ebx,0x16
c0018adc:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0018ae3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0018ae7:	74 52                	je     c0018b3b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0018ae9:	0f b6 f2             	movzx  esi,dl
c0018aec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018af0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018af4:	c1 e8 0a             	shr    eax,0xa
c0018af7:	83 fe 01             	cmp    esi,0x1
c0018afa:	19 d2                	sbb    edx,edx
c0018afc:	c1 e3 0c             	shl    ebx,0xc
c0018aff:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0018b05:	25 fc 0f 00 00       	and    eax,0xffc
c0018b0a:	01 d8                	add    eax,ebx
c0018b0c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018b10:	09 d9                	or     ecx,ebx
c0018b12:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0018b19:	83 c4 1c             	add    esp,0x1c
c0018b1c:	5b                   	pop    ebx
c0018b1d:	5e                   	pop    esi
c0018b1e:	5f                   	pop    edi
c0018b1f:	5d                   	pop    ebp
c0018b20:	c3                   	ret    
c0018b21:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018b25:	83 ec 0c             	sub    esp,0xc
c0018b28:	68 dc 17 03 c0       	push   0xc00317dc
c0018b2d:	e8 6c 79 00 00       	call   c002049e <KePanic(char const*)>
c0018b32:	83 c4 10             	add    esp,0x10
c0018b35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b39:	eb 97                	jmp    c0018ad2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0018b3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018b3f:	e8 bb dd ff ff       	call   c00168ff <Phys::allocatePage()>
c0018b44:	83 ec 0c             	sub    esp,0xc
c0018b47:	89 c5                	mov    ebp,eax
c0018b49:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018b4f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018b53:	6a 01                	push   0x1
c0018b55:	e8 f3 f5 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c0018b5a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018b61:	6a 01                	push   0x1
c0018b63:	50                   	push   eax
c0018b64:	55                   	push   ebp
c0018b65:	81 cd 07 04 00 00    	or     ebp,0x407
c0018b6b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018b6f:	51                   	push   ecx
c0018b70:	e8 e5 fe ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b75:	83 c4 1c             	add    esp,0x1c
c0018b78:	68 00 10 00 00       	push   0x1000
c0018b7d:	6a 00                	push   0x0
c0018b7f:	50                   	push   eax
c0018b80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b84:	e8 67 79 fe ff       	call   c00004f0 <memset>
c0018b89:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018b8d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018b90:	e8 d6 f8 ff ff       	call   c001846b <Virt::freeKernelVirtualPages(unsigned long)>
c0018b95:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018b98:	83 c4 10             	add    esp,0x10
c0018b9b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0018b9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ba2:	e9 42 ff ff ff       	jmp    c0018ae9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0018ba7:	90                   	nop

c0018ba8 <VAS::VAS(bool)>:
c0018ba8:	53                   	push   ebx
c0018ba9:	83 ec 28             	sub    esp,0x28
c0018bac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018bb0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018bbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bc3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018bca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018bd2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018bd5:	e8 25 dd ff ff       	call   c00168ff <Phys::allocatePage()>
c0018bda:	89 c2                	mov    edx,eax
c0018bdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018be3:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0018be9:	83 ec 0c             	sub    esp,0xc
c0018bec:	6a 01                	push   0x1
c0018bee:	e8 5a f5 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c0018bf3:	83 c4 10             	add    esp,0x10
c0018bf6:	89 c2                	mov    edx,eax
c0018bf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bfc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bff:	83 ec 0c             	sub    esp,0xc
c0018c02:	6a 03                	push   0x3
c0018c04:	6a 01                	push   0x1
c0018c06:	52                   	push   edx
c0018c07:	50                   	push   eax
c0018c08:	53                   	push   ebx
c0018c09:	e8 4c fe ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018c0e:	83 c4 20             	add    esp,0x20
c0018c11:	89 c2                	mov    edx,eax
c0018c13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c17:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018c1a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c22:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018c2a:	7f 1d                	jg     c0018c49 <VAS::VAS(bool)+0xa1>
c0018c2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c37:	c1 e2 02             	shl    edx,0x2
c0018c3a:	01 d0                	add    eax,edx
c0018c3c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018c42:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018c47:	eb d9                	jmp    c0018c22 <VAS::VAS(bool)+0x7a>
c0018c49:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018c51:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018c59:	7f 7e                	jg     c0018cd9 <VAS::VAS(bool)+0x131>
c0018c5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c5f:	2d 00 02 00 00       	sub    eax,0x200
c0018c64:	c1 e0 0c             	shl    eax,0xc
c0018c67:	83 c8 05             	or     eax,0x5
c0018c6a:	89 c2                	mov    edx,eax
c0018c6c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018c71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c77:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018c7d:	83 e0 10             	and    eax,0x10
c0018c80:	0f b6 c0             	movzx  eax,al
c0018c83:	85 c0                	test   eax,eax
c0018c85:	74 07                	je     c0018c8e <VAS::VAS(bool)+0xe6>
c0018c87:	b8 00 01 00 00       	mov    eax,0x100
c0018c8c:	eb 05                	jmp    c0018c93 <VAS::VAS(bool)+0xeb>
c0018c8e:	b8 00 00 00 00       	mov    eax,0x0
c0018c93:	09 d0                	or     eax,edx
c0018c95:	89 c1                	mov    ecx,eax
c0018c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ca2:	c1 e2 02             	shl    edx,0x2
c0018ca5:	01 d0                	add    eax,edx
c0018ca7:	89 ca                	mov    edx,ecx
c0018ca9:	89 10                	mov    DWORD PTR [eax],edx
c0018cab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018caf:	2d 40 03 00 00       	sub    eax,0x340
c0018cb4:	83 f8 7f             	cmp    eax,0x7f
c0018cb7:	77 16                	ja     c0018ccf <VAS::VAS(bool)+0x127>
c0018cb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018cc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018cc4:	c1 e2 02             	shl    edx,0x2
c0018cc7:	01 d0                	add    eax,edx
c0018cc9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018ccf:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018cd4:	e9 78 ff ff ff       	jmp    c0018c51 <VAS::VAS(bool)+0xa9>
c0018cd9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018cde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ce4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018cea:	83 e0 10             	and    eax,0x10
c0018ced:	0f b6 c0             	movzx  eax,al
c0018cf0:	85 c0                	test   eax,eax
c0018cf2:	74 07                	je     c0018cfb <VAS::VAS(bool)+0x153>
c0018cf4:	b8 03 41 00 00       	mov    eax,0x4103
c0018cf9:	eb 05                	jmp    c0018d00 <VAS::VAS(bool)+0x158>
c0018cfb:	b8 03 40 00 00       	mov    eax,0x4003
c0018d00:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d04:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018d07:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018d0d:	89 02                	mov    DWORD PTR [edx],eax
c0018d0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d13:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d16:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d21:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018d27:	83 e0 10             	and    eax,0x10
c0018d2a:	0f b6 c0             	movzx  eax,al
c0018d2d:	85 c0                	test   eax,eax
c0018d2f:	74 07                	je     c0018d38 <VAS::VAS(bool)+0x190>
c0018d31:	b8 00 01 00 00       	mov    eax,0x100
c0018d36:	eb 05                	jmp    c0018d3d <VAS::VAS(bool)+0x195>
c0018d38:	b8 00 00 00 00       	mov    eax,0x0
c0018d3d:	09 c2                	or     edx,eax
c0018d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d46:	05 fc 0f 00 00       	add    eax,0xffc
c0018d4b:	83 ca 03             	or     edx,0x3
c0018d4e:	89 10                	mov    DWORD PTR [eax],edx
c0018d50:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d55:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d5b:	83 ec 0c             	sub    esp,0xc
c0018d5e:	50                   	push   eax
c0018d5f:	e8 00 2a 00 00       	call   c001b764 <Device::getName()>
c0018d64:	83 c4 10             	add    esp,0x10
c0018d67:	83 ec 08             	sub    esp,0x8
c0018d6a:	68 ac 19 03 c0       	push   0xc00319ac
c0018d6f:	50                   	push   eax
c0018d70:	e8 db 79 fe ff       	call   c0000750 <strcmp>
c0018d75:	83 c4 10             	add    esp,0x10
c0018d78:	85 c0                	test   eax,eax
c0018d7a:	0f 94 c0             	sete   al
c0018d7d:	0f b6 c0             	movzx  eax,al
c0018d80:	85 c0                	test   eax,eax
c0018d82:	74 68                	je     c0018dec <VAS::VAS(bool)+0x244>
c0018d84:	fa                   	cli    
c0018d85:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d90:	05 7c 09 00 00       	add    eax,0x97c
c0018d95:	83 ec 0c             	sub    esp,0xc
c0018d98:	50                   	push   eax
c0018d99:	e8 b0 d2 ff ff       	call   c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018d9e:	83 c4 10             	add    esp,0x10
c0018da1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018da6:	89 c3                	mov    ebx,eax
c0018da8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018dad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018db3:	05 7c 09 00 00       	add    eax,0x97c
c0018db8:	83 ec 0c             	sub    esp,0xc
c0018dbb:	50                   	push   eax
c0018dbc:	e8 8d d2 ff ff       	call   c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	83 ec 08             	sub    esp,0x8
c0018dc7:	50                   	push   eax
c0018dc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018dcc:	e8 7b f6 ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c0018dd1:	83 c4 10             	add    esp,0x10
c0018dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dd6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018ddb:	6a 11                	push   0x11
c0018ddd:	53                   	push   ebx
c0018dde:	50                   	push   eax
c0018ddf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018de3:	e8 78 fa ff ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018de8:	83 c4 10             	add    esp,0x10
c0018deb:	fb                   	sti    
c0018dec:	90                   	nop
c0018ded:	83 c4 28             	add    esp,0x28
c0018df0:	5b                   	pop    ebx
c0018df1:	c3                   	ret    

c0018df2 <VAS::evict(unsigned long)>:
c0018df2:	55                   	push   ebp
c0018df3:	57                   	push   edi
c0018df4:	56                   	push   esi
c0018df5:	53                   	push   ebx
c0018df6:	83 ec 1c             	sub    esp,0x1c
c0018df9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018dfd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018e01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e05:	e8 a1 f4 ff ff       	call   c00182ab <Virt::allocateSwapfilePage()>
c0018e0a:	89 c7                	mov    edi,eax
c0018e0c:	a1 ec 3e 03 c0       	mov    eax,ds:0xc0033eec
c0018e11:	85 c0                	test   eax,eax
c0018e13:	7e 40                	jle    c0018e55 <VAS::evict(unsigned long)+0x63>
c0018e15:	89 ee                	mov    esi,ebp
c0018e17:	31 db                	xor    ebx,ebx
c0018e19:	83 ec 0c             	sub    esp,0xc
c0018e1c:	57                   	push   edi
c0018e1d:	e8 73 f4 ff ff       	call   c0018295 <Virt::swapIDToSector(unsigned long)>
c0018e22:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e25:	01 d8                	add    eax,ebx
c0018e27:	6a 01                	push   0x1
c0018e29:	31 d2                	xor    edx,edx
c0018e2b:	83 c3 01             	add    ebx,0x1
c0018e2e:	52                   	push   edx
c0018e2f:	81 c6 00 02 00 00    	add    esi,0x200
c0018e35:	50                   	push   eax
c0018e36:	0f be 05 f8 3e 03 c0 	movsx  eax,BYTE PTR ds:0xc0033ef8
c0018e3d:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018e44:	50                   	push   eax
c0018e45:	e8 1a 3b 00 00       	call   c001c964 <LogicalDisk::write(unsigned long long, int, void*)>
c0018e4a:	83 c4 20             	add    esp,0x20
c0018e4d:	39 1d ec 3e 03 c0    	cmp    DWORD PTR ds:0xc0033eec,ebx
c0018e53:	7f c4                	jg     c0018e19 <VAS::evict(unsigned long)+0x27>
c0018e55:	83 ec 08             	sub    esp,0x8
c0018e58:	c1 e7 0c             	shl    edi,0xc
c0018e5b:	55                   	push   ebp
c0018e5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e60:	50                   	push   eax
c0018e61:	e8 e6 f5 ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c0018e66:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e68:	89 d3                	mov    ebx,edx
c0018e6a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018e70:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018e76:	09 d7                	or     edi,edx
c0018e78:	89 38                	mov    DWORD PTR [eax],edi
c0018e7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e7d:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018e83:	83 c2 01             	add    edx,0x1
c0018e86:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018e8c:	e8 05 da ff ff       	call   c0016896 <Phys::freePage(unsigned long)>
c0018e91:	0f 20 d8             	mov    eax,cr3
c0018e94:	0f 22 d8             	mov    cr3,eax
c0018e97:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018e9d:	51                   	push   ecx
c0018e9e:	55                   	push   ebp
c0018e9f:	53                   	push   ebx
c0018ea0:	68 00 18 03 c0       	push   0xc0031800
c0018ea5:	e8 db 05 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0018eaa:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018eaf:	c7 44 24 50 ba 19 03 c0 	mov    DWORD PTR [esp+0x50],0xc00319ba
c0018eb7:	8d 50 01             	lea    edx,[eax+0x1]
c0018eba:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018ebe:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018ec4:	83 c4 3c             	add    esp,0x3c
c0018ec7:	5b                   	pop    ebx
c0018ec8:	5e                   	pop    esi
c0018ec9:	5f                   	pop    edi
c0018eca:	5d                   	pop    ebp
c0018ecb:	e9 b5 05 00 00       	jmp    c0019485 <Dbg::kprintf(char const*, ...)>

c0018ed0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018ed0:	55                   	push   ebp
c0018ed1:	57                   	push   edi
c0018ed2:	56                   	push   esi
c0018ed3:	53                   	push   ebx
c0018ed4:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018eda:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018ee1:	89 f3                	mov    ebx,esi
c0018ee3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018ee9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018eef:	77 22                	ja     c0018f13 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018ef1:	83 ec 08             	sub    esp,0x8
c0018ef4:	56                   	push   esi
c0018ef5:	68 dd 19 03 c0       	push   0xc00319dd
c0018efa:	e8 86 05 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0018eff:	83 c4 10             	add    esp,0x10
c0018f02:	85 db                	test   ebx,ebx
c0018f04:	75 2a                	jne    c0018f30 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018f06:	31 c0                	xor    eax,eax
c0018f08:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018f0e:	5b                   	pop    ebx
c0018f0f:	5e                   	pop    esi
c0018f10:	5f                   	pop    edi
c0018f11:	5d                   	pop    ebp
c0018f12:	c3                   	ret    
c0018f13:	83 ec 0c             	sub    esp,0xc
c0018f16:	68 cb 19 03 c0       	push   0xc00319cb
c0018f1b:	e8 7e 75 00 00       	call   c002049e <KePanic(char const*)>
c0018f20:	5f                   	pop    edi
c0018f21:	5d                   	pop    ebp
c0018f22:	56                   	push   esi
c0018f23:	68 dd 19 03 c0       	push   0xc00319dd
c0018f28:	e8 58 05 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0018f2d:	83 c4 10             	add    esp,0x10
c0018f30:	83 ec 08             	sub    esp,0x8
c0018f33:	53                   	push   ebx
c0018f34:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018f3b:	51                   	push   ecx
c0018f3c:	e8 0b f5 ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c0018f41:	83 c4 10             	add    esp,0x10
c0018f44:	89 c2                	mov    edx,eax
c0018f46:	85 c0                	test   eax,eax
c0018f48:	74 bc                	je     c0018f06 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f4a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018f4c:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018f52:	0f 85 c0 00 00 00    	jne    c0019018 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018f58:	89 e8                	mov    eax,ebp
c0018f5a:	25 01 04 00 00       	and    eax,0x401
c0018f5f:	3d 00 04 00 00       	cmp    eax,0x400
c0018f64:	75 a0                	jne    c0018f06 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f6a:	c1 ed 0c             	shr    ebp,0xc
c0018f6d:	e8 8d d9 ff ff       	call   c00168ff <Phys::allocatePage()>
c0018f72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f76:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018f78:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018f7e:	09 c1                	or     ecx,eax
c0018f80:	81 c9 01 08 00 00    	or     ecx,0x801
c0018f86:	89 0a                	mov    DWORD PTR [edx],ecx
c0018f88:	8b 15 ec 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eec
c0018f8e:	85 d2                	test   edx,edx
c0018f90:	7e 40                	jle    c0018fd2 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018f92:	89 df                	mov    edi,ebx
c0018f94:	31 f6                	xor    esi,esi
c0018f96:	83 ec 0c             	sub    esp,0xc
c0018f99:	55                   	push   ebp
c0018f9a:	e8 f6 f2 ff ff       	call   c0018295 <Virt::swapIDToSector(unsigned long)>
c0018f9f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018fa2:	01 f0                	add    eax,esi
c0018fa4:	6a 01                	push   0x1
c0018fa6:	31 d2                	xor    edx,edx
c0018fa8:	83 c6 01             	add    esi,0x1
c0018fab:	52                   	push   edx
c0018fac:	81 c7 00 02 00 00    	add    edi,0x200
c0018fb2:	50                   	push   eax
c0018fb3:	0f be 05 f8 3e 03 c0 	movsx  eax,BYTE PTR ds:0xc0033ef8
c0018fba:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018fc1:	50                   	push   eax
c0018fc2:	e8 31 39 00 00       	call   c001c8f8 <LogicalDisk::read(unsigned long long, int, void*)>
c0018fc7:	83 c4 20             	add    esp,0x20
c0018fca:	39 35 ec 3e 03 c0    	cmp    DWORD PTR ds:0xc0033eec,esi
c0018fd0:	7f c4                	jg     c0018f96 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018fd2:	83 ec 04             	sub    esp,0x4
c0018fd5:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018fda:	83 e8 01             	sub    eax,0x1
c0018fdd:	50                   	push   eax
c0018fde:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018fe3:	53                   	push   ebx
c0018fe4:	68 f0 19 03 c0       	push   0xc00319f0
c0018fe9:	e8 97 04 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0018fee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018ff1:	e8 7c f2 ff ff       	call   c0018272 <Virt::freeSwapfilePage(unsigned long)>
c0018ff6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	83 e8 01             	sub    eax,0x1
c0019001:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0019006:	85 c0                	test   eax,eax
c0019008:	75 01                	jne    c001900b <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c001900a:	fb                   	sti    
c001900b:	0f 20 d8             	mov    eax,cr3
c001900e:	0f 22 d8             	mov    cr3,eax
c0019011:	b0 01                	mov    al,0x1
c0019013:	e9 f0 fe ff ff       	jmp    c0018f08 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0019018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001901c:	bd 00 10 00 00       	mov    ebp,0x1000
c0019021:	83 ec 0c             	sub    esp,0xc
c0019024:	89 de                	mov    esi,ebx
c0019026:	68 30 18 03 c0       	push   0xc0031830
c001902b:	e8 55 04 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0019030:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019034:	e8 c6 d8 ff ff       	call   c00168ff <Phys::allocatePage()>
c0019039:	89 e9                	mov    ecx,ebp
c001903b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001903d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019041:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019043:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0019049:	09 c8                	or     eax,ecx
c001904b:	83 c8 02             	or     eax,0x2
c001904e:	89 02                	mov    DWORD PTR [edx],eax
c0019050:	0f 20 d8             	mov    eax,cr3
c0019053:	0f 22 d8             	mov    cr3,eax
c0019056:	8d 74 24 20          	lea    esi,[esp+0x20]
c001905a:	89 df                	mov    edi,ebx
c001905c:	89 e9                	mov    ecx,ebp
c001905e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019060:	b0 01                	mov    al,0x1
c0019062:	83 c4 10             	add    esp,0x10
c0019065:	e9 9e fe ff ff       	jmp    c0018f08 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c001906a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001906a:	55                   	push   ebp
c001906b:	57                   	push   edi
c001906c:	56                   	push   esi
c001906d:	53                   	push   ebx
c001906e:	83 ec 28             	sub    esp,0x28
c0019071:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0019075:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019079:	50                   	push   eax
c001907a:	e8 ce f0 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c001907f:	83 c4 0c             	add    esp,0xc
c0019082:	89 c5                	mov    ebp,eax
c0019084:	6a 07                	push   0x7
c0019086:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001908a:	52                   	push   edx
c001908b:	56                   	push   esi
c001908c:	e8 d3 f8 ff ff       	call   c0018964 <VAS::allocatePages(int, int)>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	89 c7                	mov    edi,eax
c0019096:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001909a:	85 c9                	test   ecx,ecx
c001909c:	74 2f                	je     c00190cd <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001909e:	31 db                	xor    ebx,ebx
c00190a0:	e8 5a d8 ff ff       	call   c00168ff <Phys::allocatePage()>
c00190a5:	83 c3 01             	add    ebx,0x1
c00190a8:	6a 03                	push   0x3
c00190aa:	55                   	push   ebp
c00190ab:	50                   	push   eax
c00190ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00190b0:	56                   	push   esi
c00190b1:	e8 aa f7 ff ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c00190b6:	6a 07                	push   0x7
c00190b8:	57                   	push   edi
c00190b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00190bd:	50                   	push   eax
c00190be:	56                   	push   esi
c00190bf:	e8 9c f7 ff ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c00190c4:	83 c4 20             	add    esp,0x20
c00190c7:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c00190cb:	75 d3                	jne    c00190a0 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00190cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190d1:	89 28                	mov    DWORD PTR [eax],ebp
c00190d3:	83 c4 1c             	add    esp,0x1c
c00190d6:	89 f8                	mov    eax,edi
c00190d8:	5b                   	pop    ebx
c00190d9:	5e                   	pop    esi
c00190da:	5f                   	pop    edi
c00190db:	5d                   	pop    ebp
c00190dc:	c3                   	ret    
c00190dd:	90                   	nop

c00190de <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00190de:	53                   	push   ebx
c00190df:	83 ec 14             	sub    esp,0x14
c00190e2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00190e6:	68 50 18 03 c0       	push   0xc0031850
c00190eb:	e8 95 03 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00190f0:	c7 04 24 b0 18 03 c0 	mov    DWORD PTR [esp],0xc00318b0
c00190f7:	e8 89 03 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00190fc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0019100:	83 c4 18             	add    esp,0x18
c0019103:	5b                   	pop    ebx
c0019104:	e9 62 f3 ff ff       	jmp    c001846b <Virt::freeKernelVirtualPages(unsigned long)>
c0019109:	90                   	nop

c001910a <VAS::scanForEviction()>:
c001910a:	57                   	push   edi
c001910b:	56                   	push   esi
c001910c:	31 f6                	xor    esi,esi
c001910e:	53                   	push   ebx
c001910f:	83 ec 10             	sub    esp,0x10
c0019112:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019116:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0019119:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001911f:	75 0e                	jne    c001912f <VAS::scanForEviction()+0x25>
c0019121:	89 da                	mov    edx,ebx
c0019123:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0019126:	c1 ea 16             	shr    edx,0x16
c0019129:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001912d:	74 57                	je     c0019186 <VAS::scanForEviction()+0x7c>
c001912f:	53                   	push   ebx
c0019130:	57                   	push   edi
c0019131:	e8 16 f3 ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c0019136:	5a                   	pop    edx
c0019137:	8b 10                	mov    edx,DWORD PTR [eax]
c0019139:	59                   	pop    ecx
c001913a:	89 d1                	mov    ecx,edx
c001913c:	c1 e9 0c             	shr    ecx,0xc
c001913f:	74 10                	je     c0019151 <VAS::scanForEviction()+0x47>
c0019141:	89 d1                	mov    ecx,edx
c0019143:	81 e1 01 08 00 00    	and    ecx,0x801
c0019149:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001914f:	74 40                	je     c0019191 <VAS::scanForEviction()+0x87>
c0019151:	81 c3 00 10 00 00    	add    ebx,0x1000
c0019157:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001915d:	76 2d                	jbe    c001918c <VAS::scanForEviction()+0x82>
c001915f:	83 c6 01             	add    esi,0x1
c0019162:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0019169:	83 fe 03             	cmp    esi,0x3
c001916c:	74 32                	je     c00191a0 <VAS::scanForEviction()+0x96>
c001916e:	31 db                	xor    ebx,ebx
c0019170:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0019176:	75 b7                	jne    c001912f <VAS::scanForEviction()+0x25>
c0019178:	89 da                	mov    edx,ebx
c001917a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001917d:	c1 ea 16             	shr    edx,0x16
c0019180:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019184:	75 a9                	jne    c001912f <VAS::scanForEviction()+0x25>
c0019186:	81 c3 00 00 40 00    	add    ebx,0x400000
c001918c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001918f:	eb 88                	jmp    c0019119 <VAS::scanForEviction()+0xf>
c0019191:	f6 c2 20             	test   dl,0x20
c0019194:	74 13                	je     c00191a9 <VAS::scanForEviction()+0x9f>
c0019196:	83 e2 df             	and    edx,0xffffffdf
c0019199:	89 10                	mov    DWORD PTR [eax],edx
c001919b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001919e:	eb b1                	jmp    c0019151 <VAS::scanForEviction()+0x47>
c00191a0:	83 c4 10             	add    esp,0x10
c00191a3:	31 c0                	xor    eax,eax
c00191a5:	5b                   	pop    ebx
c00191a6:	5e                   	pop    esi
c00191a7:	5f                   	pop    edi
c00191a8:	c3                   	ret    
c00191a9:	83 ec 08             	sub    esp,0x8
c00191ac:	89 d0                	mov    eax,edx
c00191ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00191b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00191b7:	53                   	push   ebx
c00191b8:	68 05 1a 03 c0       	push   0xc0031a05
c00191bd:	e8 c3 02 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00191c2:	58                   	pop    eax
c00191c3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00191c6:	5a                   	pop    edx
c00191c7:	51                   	push   ecx
c00191c8:	57                   	push   edi
c00191c9:	e8 24 fc ff ff       	call   c0018df2 <VAS::evict(unsigned long)>
c00191ce:	5b                   	pop    ebx
c00191cf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00191d2:	5e                   	pop    esi
c00191d3:	50                   	push   eax
c00191d4:	68 19 1a 03 c0       	push   0xc0031a19
c00191d9:	e8 a7 02 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00191de:	58                   	pop    eax
c00191df:	5a                   	pop    edx
c00191e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191e4:	50                   	push   eax
c00191e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00191e9:	68 2c 1a 03 c0       	push   0xc0031a2c
c00191ee:	e8 92 02 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00191f3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00191f6:	83 c4 10             	add    esp,0x10
c00191f9:	81 c1 00 10 00 00    	add    ecx,0x1000
c00191ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019203:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0019206:	83 c4 10             	add    esp,0x10
c0019209:	5b                   	pop    ebx
c001920a:	5e                   	pop    esi
c001920b:	5f                   	pop    edi
c001920c:	c3                   	ret    

c001920d <mapVASFirstTime>:
c001920d:	55                   	push   ebp
c001920e:	57                   	push   edi
c001920f:	56                   	push   esi
c0019210:	53                   	push   ebx
c0019211:	83 ec 0c             	sub    esp,0xc
c0019214:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019219:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001921c:	83 fa 01             	cmp    edx,0x1
c001921f:	0f 84 cb 00 00 00    	je     c00192f0 <mapVASFirstTime+0xe3>
c0019225:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0019228:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c001922b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0019230:	c1 e5 15             	shl    ebp,0x15
c0019233:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0019238:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c001923e:	29 eb                	sub    ebx,ebp
c0019240:	29 ef                	sub    edi,ebp
c0019242:	e8 b8 d6 ff ff       	call   c00168ff <Phys::allocatePage()>
c0019247:	83 ec 0c             	sub    esp,0xc
c001924a:	68 03 04 00 00       	push   0x403
c001924f:	6a 01                	push   0x1
c0019251:	53                   	push   ebx
c0019252:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019258:	50                   	push   eax
c0019259:	56                   	push   esi
c001925a:	e8 fb f7 ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001925f:	83 c4 20             	add    esp,0x20
c0019262:	39 fb                	cmp    ebx,edi
c0019264:	75 dc                	jne    c0019242 <mapVASFirstTime+0x35>
c0019266:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001926b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0019270:	29 eb                	sub    ebx,ebp
c0019272:	29 ef                	sub    edi,ebp
c0019274:	e8 86 d6 ff ff       	call   c00168ff <Phys::allocatePage()>
c0019279:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001927d:	83 fa 01             	cmp    edx,0x1
c0019280:	19 d2                	sbb    edx,edx
c0019282:	83 ec 0c             	sub    esp,0xc
c0019285:	83 e2 04             	and    edx,0x4
c0019288:	81 c2 03 04 00 00    	add    edx,0x403
c001928e:	52                   	push   edx
c001928f:	6a 01                	push   0x1
c0019291:	53                   	push   ebx
c0019292:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019298:	50                   	push   eax
c0019299:	56                   	push   esi
c001929a:	e8 bb f7 ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001929f:	83 c4 20             	add    esp,0x20
c00192a2:	39 df                	cmp    edi,ebx
c00192a4:	75 ce                	jne    c0019274 <mapVASFirstTime+0x67>
c00192a6:	83 ec 0c             	sub    esp,0xc
c00192a9:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c00192ae:	6a 04                	push   0x4
c00192b0:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c00192b6:	6a ff                	push   0xffffffff
c00192b8:	c1 eb 0c             	shr    ebx,0xc
c00192bb:	53                   	push   ebx
c00192bc:	68 00 50 03 c0       	push   0xc0035000
c00192c1:	56                   	push   esi
c00192c2:	e8 1f f3 ff ff       	call   c00185e6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00192c7:	83 c4 14             	add    esp,0x14
c00192ca:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00192cf:	6a 04                	push   0x4
c00192d1:	6a ff                	push   0xffffffff
c00192d3:	53                   	push   ebx
c00192d4:	68 00 50 03 c0       	push   0xc0035000
c00192d9:	50                   	push   eax
c00192da:	e8 07 f3 ff ff       	call   c00185e6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00192df:	0f 20 d8             	mov    eax,cr3
c00192e2:	0f 22 d8             	mov    cr3,eax
c00192e5:	83 c4 20             	add    esp,0x20
c00192e8:	83 c4 0c             	add    esp,0xc
c00192eb:	5b                   	pop    ebx
c00192ec:	5e                   	pop    esi
c00192ed:	5f                   	pop    edi
c00192ee:	5d                   	pop    ebp
c00192ef:	c3                   	ret    
c00192f0:	83 ec 0c             	sub    esp,0xc
c00192f3:	68 39 1a 03 c0       	push   0xc0031a39
c00192f8:	e8 88 01 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	83 c4 0c             	add    esp,0xc
c0019303:	5b                   	pop    ebx
c0019304:	5e                   	pop    esi
c0019305:	5f                   	pop    edi
c0019306:	5d                   	pop    ebp
c0019307:	c3                   	ret    

c0019308 <__cxa_atexit>:
c0019308:	31 c0                	xor    eax,eax
c001930a:	c3                   	ret    

c001930b <__cxa_finalize>:
c001930b:	c3                   	ret    

c001930c <__stack_chk_fail>:
c001930c:	55                   	push   ebp
c001930d:	89 e5                	mov    ebp,esp
c001930f:	83 ec 10             	sub    esp,0x10
c0019312:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019315:	68 52 1a 03 c0       	push   0xc0031a52
c001931a:	e8 66 01 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001931f:	58                   	pop    eax
c0019320:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019323:	5a                   	pop    edx
c0019324:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019327:	68 52 1a 03 c0       	push   0xc0031a52
c001932c:	e8 54 01 00 00       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0019331:	c7 04 24 5a 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a5a
c0019338:	e8 61 71 00 00       	call   c002049e <KePanic(char const*)>
c001933d:	83 c4 10             	add    esp,0x10
c0019340:	c9                   	leave  
c0019341:	c3                   	ret    

c0019342 <__cxa_pure_virtual>:
c0019342:	83 ec 18             	sub    esp,0x18
c0019345:	68 72 1a 03 c0       	push   0xc0031a72
c001934a:	e8 4f 71 00 00       	call   c002049e <KePanic(char const*)>
c001934f:	83 c4 1c             	add    esp,0x1c
c0019352:	c3                   	ret    

c0019353 <operator new[](unsigned long)>:
c0019353:	e9 9e d2 ff ff       	jmp    c00165f6 <malloc>

c0019358 <operator delete(void*, unsigned long)>:
c0019358:	e9 b9 d2 ff ff       	jmp    c0016616 <rfree>

c001935d <operator delete[](void*)>:
c001935d:	e9 b4 d2 ff ff       	jmp    c0016616 <rfree>

c0019362 <operator delete[](void*, unsigned long)>:
c0019362:	e9 af d2 ff ff       	jmp    c0016616 <rfree>

c0019367 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0019367:	55                   	push   ebp
c0019368:	57                   	push   edi
c0019369:	56                   	push   esi
c001936a:	be 7b 15 03 c0       	mov    esi,0xc003157b
c001936f:	53                   	push   ebx
c0019370:	83 ec 20             	sub    esp,0x20
c0019373:	a0 7a 15 03 c0       	mov    al,ds:0xc003157a
c0019378:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001937c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019380:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019384:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019388:	b8 10 00 00 00       	mov    eax,0x10
c001938d:	f7 c7 02 00 00 00    	test   edi,0x2
c0019393:	75 60                	jne    c00193f5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0019395:	89 c1                	mov    ecx,eax
c0019397:	c1 e9 02             	shr    ecx,0x2
c001939a:	fc                   	cld    
c001939b:	31 d2                	xor    edx,edx
c001939d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001939f:	a8 02                	test   al,0x2
c00193a1:	74 0b                	je     c00193ae <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c00193a3:	66 8b 16             	mov    dx,WORD PTR [esi]
c00193a6:	66 89 17             	mov    WORD PTR [edi],dx
c00193a9:	ba 02 00 00 00       	mov    edx,0x2
c00193ae:	a8 01                	test   al,0x1
c00193b0:	74 06                	je     c00193b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c00193b2:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c00193b5:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c00193b8:	89 ee                	mov    esi,ebp
c00193ba:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00193be:	eb 02                	jmp    c00193c2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c00193c0:	89 c6                	mov    esi,eax
c00193c2:	31 d2                	xor    edx,edx
c00193c4:	83 c1 01             	add    ecx,0x1
c00193c7:	89 f0                	mov    eax,esi
c00193c9:	f7 f3                	div    ebx
c00193cb:	39 de                	cmp    esi,ebx
c00193cd:	73 f1                	jae    c00193c0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c00193cf:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00193d2:	eb 02                	jmp    c00193d6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c00193d4:	89 c5                	mov    ebp,eax
c00193d6:	31 d2                	xor    edx,edx
c00193d8:	83 e9 01             	sub    ecx,0x1
c00193db:	89 e8                	mov    eax,ebp
c00193dd:	f7 f3                	div    ebx
c00193df:	39 dd                	cmp    ebp,ebx
c00193e1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00193e5:	88 11                	mov    BYTE PTR [ecx],dl
c00193e7:	73 eb                	jae    c00193d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00193e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193ed:	83 c4 20             	add    esp,0x20
c00193f0:	5b                   	pop    ebx
c00193f1:	5e                   	pop    esi
c00193f2:	5f                   	pop    edi
c00193f3:	5d                   	pop    ebp
c00193f4:	c3                   	ret    
c00193f5:	66 8b 16             	mov    dx,WORD PTR [esi]
c00193f8:	83 c7 02             	add    edi,0x2
c00193fb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c00193ff:	83 c6 02             	add    esi,0x2
c0019402:	83 e8 02             	sub    eax,0x2
c0019405:	eb 8e                	jmp    c0019395 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0019407 <Dbg::logc(char)>:
c0019407:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001940b:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019412:	75 12                	jne    c0019426 <Dbg::logc(char)+0x1f>
c0019414:	ba fd 03 00 00       	mov    edx,0x3fd
c0019419:	ec                   	in     al,dx
c001941a:	a8 20                	test   al,0x20
c001941c:	74 fb                	je     c0019419 <Dbg::logc(char)+0x12>
c001941e:	ba f8 03 00 00       	mov    edx,0x3f8
c0019423:	88 c8                	mov    al,cl
c0019425:	ee                   	out    dx,al
c0019426:	c3                   	ret    

c0019427 <Dbg::logs(char*)>:
c0019427:	53                   	push   ebx
c0019428:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001942c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001942f:	85 c0                	test   eax,eax
c0019431:	74 11                	je     c0019444 <Dbg::logs(char*)+0x1d>
c0019433:	83 c3 01             	add    ebx,0x1
c0019436:	50                   	push   eax
c0019437:	e8 cb ff ff ff       	call   c0019407 <Dbg::logc(char)>
c001943c:	58                   	pop    eax
c001943d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019440:	85 c0                	test   eax,eax
c0019442:	75 ef                	jne    c0019433 <Dbg::logs(char*)+0xc>
c0019444:	5b                   	pop    ebx
c0019445:	c3                   	ret    

c0019446 <Dbg::logWriteInt(unsigned int)>:
c0019446:	83 ec 10             	sub    esp,0x10
c0019449:	6a 0a                	push   0xa
c001944b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001944f:	50                   	push   eax
c0019450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019454:	50                   	push   eax
c0019455:	e8 0d ff ff ff       	call   c0019367 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001945a:	50                   	push   eax
c001945b:	e8 c7 ff ff ff       	call   c0019427 <Dbg::logs(char*)>
c0019460:	83 c4 20             	add    esp,0x20
c0019463:	c3                   	ret    

c0019464 <Dbg::logWriteIntBase(unsigned int, int)>:
c0019464:	83 ec 10             	sub    esp,0x10
c0019467:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001946b:	50                   	push   eax
c001946c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019470:	50                   	push   eax
c0019471:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019475:	52                   	push   edx
c0019476:	e8 ec fe ff ff       	call   c0019367 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001947b:	50                   	push   eax
c001947c:	e8 a6 ff ff ff       	call   c0019427 <Dbg::logs(char*)>
c0019481:	83 c4 20             	add    esp,0x20
c0019484:	c3                   	ret    

c0019485 <Dbg::kprintf(char const*, ...)>:
c0019485:	55                   	push   ebp
c0019486:	57                   	push   edi
c0019487:	56                   	push   esi
c0019488:	53                   	push   ebx
c0019489:	83 ec 0c             	sub    esp,0xc
c001948c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019490:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019497:	74 08                	je     c00194a1 <Dbg::kprintf(char const*, ...)+0x1c>
c0019499:	83 c4 0c             	add    esp,0xc
c001949c:	5b                   	pop    ebx
c001949d:	5e                   	pop    esi
c001949e:	5f                   	pop    edi
c001949f:	5d                   	pop    ebp
c00194a0:	c3                   	ret    
c00194a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194a5:	31 ff                	xor    edi,edi
c00194a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194ab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194ae:	85 c0                	test   eax,eax
c00194b0:	74 e7                	je     c0019499 <Dbg::kprintf(char const*, ...)+0x14>
c00194b2:	8d 77 01             	lea    esi,[edi+0x1]
c00194b5:	83 f8 25             	cmp    eax,0x25
c00194b8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00194bb:	75 47                	jne    c0019504 <Dbg::kprintf(char const*, ...)+0x7f>
c00194bd:	83 c7 02             	add    edi,0x2
c00194c0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00194c3:	8d 34 3b             	lea    esi,[ebx+edi*1]
c00194c6:	83 e8 25             	sub    eax,0x25
c00194c9:	0f b6 c0             	movzx  eax,al
c00194cc:	83 f8 53             	cmp    eax,0x53
c00194cf:	0f 87 ce 00 00 00    	ja     c00195a3 <Dbg::kprintf(char const*, ...)+0x11e>
c00194d5:	ff 24 85 88 1a 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce578]
c00194dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194e0:	89 c8                	mov    eax,ecx
c00194e2:	83 c1 04             	add    ecx,0x4
c00194e5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00194e9:	8b 28                	mov    ebp,DWORD PTR [eax]
c00194eb:	55                   	push   ebp
c00194ec:	e8 55 ff ff ff       	call   c0019446 <Dbg::logWriteInt(unsigned int)>
c00194f1:	58                   	pop    eax
c00194f2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00194f5:	85 c0                	test   eax,eax
c00194f7:	74 a0                	je     c0019499 <Dbg::kprintf(char const*, ...)+0x14>
c00194f9:	8d 77 01             	lea    esi,[edi+0x1]
c00194fc:	83 f8 25             	cmp    eax,0x25
c00194ff:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019502:	74 b9                	je     c00194bd <Dbg::kprintf(char const*, ...)+0x38>
c0019504:	50                   	push   eax
c0019505:	89 f7                	mov    edi,esi
c0019507:	e8 fb fe ff ff       	call   c0019407 <Dbg::logc(char)>
c001950c:	89 ee                	mov    esi,ebp
c001950e:	58                   	pop    eax
c001950f:	eb e1                	jmp    c00194f2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019511:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019515:	89 c8                	mov    eax,ecx
c0019517:	83 c1 04             	add    ecx,0x4
c001951a:	8b 00                	mov    eax,DWORD PTR [eax]
c001951c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019520:	50                   	push   eax
c0019521:	e8 01 ff ff ff       	call   c0019427 <Dbg::logs(char*)>
c0019526:	58                   	pop    eax
c0019527:	eb c9                	jmp    c00194f2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019529:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001952d:	89 d0                	mov    eax,edx
c001952f:	83 c2 04             	add    edx,0x4
c0019532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019536:	8b 00                	mov    eax,DWORD PTR [eax]
c0019538:	50                   	push   eax
c0019539:	e8 08 ff ff ff       	call   c0019446 <Dbg::logWriteInt(unsigned int)>
c001953e:	58                   	pop    eax
c001953f:	eb b1                	jmp    c00194f2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019541:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019545:	89 d0                	mov    eax,edx
c0019547:	83 c2 04             	add    edx,0x4
c001954a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001954d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019551:	50                   	push   eax
c0019552:	e8 b0 fe ff ff       	call   c0019407 <Dbg::logc(char)>
c0019557:	58                   	pop    eax
c0019558:	eb 98                	jmp    c00194f2 <Dbg::kprintf(char const*, ...)+0x6d>
c001955a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001955e:	89 c8                	mov    eax,ecx
c0019560:	83 c1 04             	add    ecx,0x4
c0019563:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019567:	6a 10                	push   0x10
c0019569:	8b 08                	mov    ecx,DWORD PTR [eax]
c001956b:	51                   	push   ecx
c001956c:	e8 f3 fe ff ff       	call   c0019464 <Dbg::logWriteIntBase(unsigned int, int)>
c0019571:	5d                   	pop    ebp
c0019572:	58                   	pop    eax
c0019573:	e9 7a ff ff ff       	jmp    c00194f2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019578:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001957c:	89 d0                	mov    eax,edx
c001957e:	83 c2 08             	add    edx,0x8
c0019581:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019585:	6a 10                	push   0x10
c0019587:	8b 00                	mov    eax,DWORD PTR [eax]
c0019589:	50                   	push   eax
c001958a:	e8 d5 fe ff ff       	call   c0019464 <Dbg::logWriteIntBase(unsigned int, int)>
c001958f:	58                   	pop    eax
c0019590:	5a                   	pop    edx
c0019591:	e9 5c ff ff ff       	jmp    c00194f2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019596:	6a 25                	push   0x25
c0019598:	e8 6a fe ff ff       	call   c0019407 <Dbg::logc(char)>
c001959d:	5a                   	pop    edx
c001959e:	e9 4f ff ff ff       	jmp    c00194f2 <Dbg::kprintf(char const*, ...)+0x6d>
c00195a3:	6a 25                	push   0x25
c00195a5:	e8 5d fe ff ff       	call   c0019407 <Dbg::logc(char)>
c00195aa:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00195ae:	50                   	push   eax
c00195af:	e8 53 fe ff ff       	call   c0019407 <Dbg::logc(char)>
c00195b4:	5a                   	pop    edx
c00195b5:	59                   	pop    ecx
c00195b6:	e9 37 ff ff ff       	jmp    c00194f2 <Dbg::kprintf(char const*, ...)+0x6d>
c00195bb:	90                   	nop

c00195bc <KiUbsanPrintDetails(char const*, void*)>:
c00195bc:	83 ec 1c             	sub    esp,0x1c
c00195bf:	83 ec 08             	sub    esp,0x8
c00195c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00195c6:	68 d8 1b 03 c0       	push   0xc0031bd8
c00195cb:	e8 b5 fe ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00195d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195df:	8b 00                	mov    eax,DWORD PTR [eax]
c00195e1:	83 ec 08             	sub    esp,0x8
c00195e4:	50                   	push   eax
c00195e5:	68 ec 1b 03 c0       	push   0xc0031bec
c00195ea:	e8 96 fe ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00195ef:	83 c4 10             	add    esp,0x10
c00195f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00195f9:	83 ec 08             	sub    esp,0x8
c00195fc:	50                   	push   eax
c00195fd:	68 f6 1b 03 c0       	push   0xc0031bf6
c0019602:	e8 7e fe ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0019607:	83 c4 10             	add    esp,0x10
c001960a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001960e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019611:	83 ec 08             	sub    esp,0x8
c0019614:	50                   	push   eax
c0019615:	68 00 1c 03 c0       	push   0xc0031c00
c001961a:	e8 66 fe ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001961f:	83 c4 10             	add    esp,0x10
c0019622:	90                   	nop
c0019623:	83 c4 1c             	add    esp,0x1c
c0019626:	c3                   	ret    
c0019627:	90                   	nop

c0019628 <__ubsan_handle_type_mismatch_v1>:
c0019628:	83 ec 0c             	sub    esp,0xc
c001962b:	83 ec 08             	sub    esp,0x8
c001962e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019632:	68 44 1d 03 c0       	push   0xc0031d44
c0019637:	e8 80 ff ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c001963c:	83 c4 10             	add    esp,0x10
c001963f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019644:	75 16                	jne    c001965c <__ubsan_handle_type_mismatch_v1+0x34>
c0019646:	83 ec 0c             	sub    esp,0xc
c0019649:	68 0a 1c 03 c0       	push   0xc0031c0a
c001964e:	e8 32 fe ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0019653:	83 c4 10             	add    esp,0x10
c0019656:	e9 91 00 00 00       	jmp    c00196ec <__ubsan_handle_type_mismatch_v1+0xc4>
c001965b:	90                   	nop
c001965c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019660:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019663:	85 c0                	test   eax,eax
c0019665:	74 29                	je     c0019690 <__ubsan_handle_type_mismatch_v1+0x68>
c0019667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001966b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001966e:	83 e8 01             	sub    eax,0x1
c0019671:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019675:	75 19                	jne    c0019690 <__ubsan_handle_type_mismatch_v1+0x68>
c0019677:	83 ec 08             	sub    esp,0x8
c001967a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001967e:	68 64 1d 03 c0       	push   0xc0031d64
c0019683:	e8 fd fd ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	eb 5f                	jmp    c00196ec <__ubsan_handle_type_mismatch_v1+0xc4>
c001968d:	8d 76 00             	lea    esi,[esi+0x0]
c0019690:	83 ec 0c             	sub    esp,0xc
c0019693:	68 1f 1c 03 c0       	push   0xc0031c1f
c0019698:	e8 e8 fd ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001969d:	83 c4 10             	add    esp,0x10
c00196a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196a4:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00196a7:	0f b6 c0             	movzx  eax,al
c00196aa:	83 ec 08             	sub    esp,0x8
c00196ad:	50                   	push   eax
c00196ae:	68 39 1c 03 c0       	push   0xc0031c39
c00196b3:	e8 cd fd ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00196b8:	83 c4 10             	add    esp,0x10
c00196bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00196c2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00196c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196cd:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00196d0:	0f b6 c0             	movzx  eax,al
c00196d3:	8b 04 85 00 3f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc100]
c00196da:	51                   	push   ecx
c00196db:	52                   	push   edx
c00196dc:	50                   	push   eax
c00196dd:	68 8c 1d 03 c0       	push   0xc0031d8c
c00196e2:	e8 9e fd ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00196e7:	83 c4 10             	add    esp,0x10
c00196ea:	66 90                	xchg   ax,ax
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	68 44 1d 03 c0       	push   0xc0031d44
c00196f4:	e8 a5 6d 00 00       	call   c002049e <KePanic(char const*)>
c00196f9:	83 c4 10             	add    esp,0x10
c00196fc:	90                   	nop
c00196fd:	83 c4 0c             	add    esp,0xc
c0019700:	c3                   	ret    
c0019701:	8d 76 00             	lea    esi,[esi+0x0]

c0019704 <__ubsan_handle_pointer_overflow>:
c0019704:	83 ec 0c             	sub    esp,0xc
c0019707:	83 ec 08             	sub    esp,0x8
c001970a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001970e:	68 d4 1d 03 c0       	push   0xc0031dd4
c0019713:	e8 a4 fe ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c0019718:	83 c4 10             	add    esp,0x10
c001971b:	83 ec 0c             	sub    esp,0xc
c001971e:	68 d4 1d 03 c0       	push   0xc0031dd4
c0019723:	e8 76 6d 00 00       	call   c002049e <KePanic(char const*)>
c0019728:	83 c4 10             	add    esp,0x10
c001972b:	90                   	nop
c001972c:	83 c4 0c             	add    esp,0xc
c001972f:	c3                   	ret    

c0019730 <__ubsan_handle_out_of_bounds>:
c0019730:	83 ec 0c             	sub    esp,0xc
c0019733:	83 ec 08             	sub    esp,0x8
c0019736:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001973a:	68 44 1c 03 c0       	push   0xc0031c44
c001973f:	e8 78 fe ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c0019744:	83 c4 10             	add    esp,0x10
c0019747:	83 ec 0c             	sub    esp,0xc
c001974a:	68 44 1c 03 c0       	push   0xc0031c44
c001974f:	e8 4a 6d 00 00       	call   c002049e <KePanic(char const*)>
c0019754:	83 c4 10             	add    esp,0x10
c0019757:	90                   	nop
c0019758:	83 c4 0c             	add    esp,0xc
c001975b:	c3                   	ret    

c001975c <__ubsan_handle_add_overflow>:
c001975c:	83 ec 0c             	sub    esp,0xc
c001975f:	83 ec 08             	sub    esp,0x8
c0019762:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019766:	68 61 1c 03 c0       	push   0xc0031c61
c001976b:	e8 4c fe ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c0019770:	83 c4 10             	add    esp,0x10
c0019773:	83 ec 0c             	sub    esp,0xc
c0019776:	68 61 1c 03 c0       	push   0xc0031c61
c001977b:	e8 1e 6d 00 00       	call   c002049e <KePanic(char const*)>
c0019780:	83 c4 10             	add    esp,0x10
c0019783:	90                   	nop
c0019784:	83 c4 0c             	add    esp,0xc
c0019787:	c3                   	ret    

c0019788 <__ubsan_handle_load_invalid_value>:
c0019788:	83 ec 0c             	sub    esp,0xc
c001978b:	83 ec 08             	sub    esp,0x8
c001978e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019792:	68 f4 1d 03 c0       	push   0xc0031df4
c0019797:	e8 20 fe ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c001979c:	83 c4 10             	add    esp,0x10
c001979f:	83 ec 0c             	sub    esp,0xc
c00197a2:	68 f4 1d 03 c0       	push   0xc0031df4
c00197a7:	e8 f2 6c 00 00       	call   c002049e <KePanic(char const*)>
c00197ac:	83 c4 10             	add    esp,0x10
c00197af:	90                   	nop
c00197b0:	83 c4 0c             	add    esp,0xc
c00197b3:	c3                   	ret    

c00197b4 <__ubsan_handle_divrem_overflow>:
c00197b4:	83 ec 0c             	sub    esp,0xc
c00197b7:	83 ec 08             	sub    esp,0x8
c00197ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197be:	68 18 1e 03 c0       	push   0xc0031e18
c00197c3:	e8 f4 fd ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c00197c8:	83 c4 10             	add    esp,0x10
c00197cb:	83 ec 0c             	sub    esp,0xc
c00197ce:	68 18 1e 03 c0       	push   0xc0031e18
c00197d3:	e8 c6 6c 00 00       	call   c002049e <KePanic(char const*)>
c00197d8:	83 c4 10             	add    esp,0x10
c00197db:	90                   	nop
c00197dc:	83 c4 0c             	add    esp,0xc
c00197df:	c3                   	ret    

c00197e0 <__ubsan_handle_mul_overflow>:
c00197e0:	83 ec 0c             	sub    esp,0xc
c00197e3:	83 ec 08             	sub    esp,0x8
c00197e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197ea:	68 7d 1c 03 c0       	push   0xc0031c7d
c00197ef:	e8 c8 fd ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c00197f4:	83 c4 10             	add    esp,0x10
c00197f7:	83 ec 0c             	sub    esp,0xc
c00197fa:	68 7d 1c 03 c0       	push   0xc0031c7d
c00197ff:	e8 9a 6c 00 00       	call   c002049e <KePanic(char const*)>
c0019804:	83 c4 10             	add    esp,0x10
c0019807:	90                   	nop
c0019808:	83 c4 0c             	add    esp,0xc
c001980b:	c3                   	ret    

c001980c <__ubsan_handle_sub_overflow>:
c001980c:	83 ec 0c             	sub    esp,0xc
c001980f:	83 ec 08             	sub    esp,0x8
c0019812:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019816:	68 99 1c 03 c0       	push   0xc0031c99
c001981b:	e8 9c fd ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c0019820:	83 c4 10             	add    esp,0x10
c0019823:	83 ec 0c             	sub    esp,0xc
c0019826:	68 99 1c 03 c0       	push   0xc0031c99
c001982b:	e8 6e 6c 00 00       	call   c002049e <KePanic(char const*)>
c0019830:	83 c4 10             	add    esp,0x10
c0019833:	90                   	nop
c0019834:	83 c4 0c             	add    esp,0xc
c0019837:	c3                   	ret    

c0019838 <__ubsan_handle_shift_out_of_bounds>:
c0019838:	83 ec 0c             	sub    esp,0xc
c001983b:	83 ec 08             	sub    esp,0x8
c001983e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019842:	68 38 1e 03 c0       	push   0xc0031e38
c0019847:	e8 70 fd ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c001984c:	83 c4 10             	add    esp,0x10
c001984f:	83 ec 0c             	sub    esp,0xc
c0019852:	68 38 1e 03 c0       	push   0xc0031e38
c0019857:	e8 42 6c 00 00       	call   c002049e <KePanic(char const*)>
c001985c:	83 c4 10             	add    esp,0x10
c001985f:	90                   	nop
c0019860:	83 c4 0c             	add    esp,0xc
c0019863:	c3                   	ret    

c0019864 <__ubsan_handle_negate_overflow>:
c0019864:	83 ec 0c             	sub    esp,0xc
c0019867:	83 ec 08             	sub    esp,0x8
c001986a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001986e:	68 5c 1e 03 c0       	push   0xc0031e5c
c0019873:	e8 44 fd ff ff       	call   c00195bc <KiUbsanPrintDetails(char const*, void*)>
c0019878:	83 c4 10             	add    esp,0x10
c001987b:	83 ec 0c             	sub    esp,0xc
c001987e:	68 5c 1e 03 c0       	push   0xc0031e5c
c0019883:	e8 16 6c 00 00       	call   c002049e <KePanic(char const*)>
c0019888:	83 c4 10             	add    esp,0x10
c001988b:	90                   	nop
c001988c:	83 c4 0c             	add    esp,0xc
c001988f:	c3                   	ret    

c0019890 <KiIsHashInTable(unsigned short)>:
c0019890:	0f b7 d0             	movzx  edx,ax
c0019893:	83 e0 07             	and    eax,0x7
c0019896:	c1 fa 03             	sar    edx,0x3
c0019899:	88 c1                	mov    cl,al
c001989b:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c00198a2:	d3 fa                	sar    edx,cl
c00198a4:	89 d0                	mov    eax,edx
c00198a6:	83 e0 01             	and    eax,0x1
c00198a9:	c3                   	ret    

c00198aa <KiSetHashInTable(unsigned short, bool)>:
c00198aa:	56                   	push   esi
c00198ab:	53                   	push   ebx
c00198ac:	0f b7 d8             	movzx  ebx,ax
c00198af:	83 e0 07             	and    eax,0x7
c00198b2:	c1 fb 03             	sar    ebx,0x3
c00198b5:	89 c1                	mov    ecx,eax
c00198b7:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c00198be:	b8 01 00 00 00       	mov    eax,0x1
c00198c3:	d3 e0                	shl    eax,cl
c00198c5:	84 d2                	test   dl,dl
c00198c7:	74 04                	je     c00198cd <KiSetHashInTable(unsigned short, bool)+0x23>
c00198c9:	09 f0                	or     eax,esi
c00198cb:	eb 04                	jmp    c00198d1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00198cd:	f7 d0                	not    eax
c00198cf:	21 f0                	and    eax,esi
c00198d1:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c00198d7:	5b                   	pop    ebx
c00198d8:	5e                   	pop    esi
c00198d9:	c3                   	ret    

c00198da <KiFlushSymlinkChanges()>:
c00198da:	57                   	push   edi
c00198db:	56                   	push   esi
c00198dc:	53                   	push   ebx
c00198dd:	83 ec 1c             	sub    esp,0x1c
c00198e0:	68 14 01 00 00       	push   0x114
c00198e5:	e8 0c cd ff ff       	call   c00165f6 <malloc>
c00198ea:	83 c4 0c             	add    esp,0xc
c00198ed:	89 c3                	mov    ebx,eax
c00198ef:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00198f5:	68 7b 1e 03 c0       	push   0xc0031e7b
c00198fa:	50                   	push   eax
c00198fb:	e8 8c 0d 00 00       	call   c001a68c <File::File(char const*, Process*)>
c0019900:	83 c4 10             	add    esp,0x10
c0019903:	85 db                	test   ebx,ebx
c0019905:	75 10                	jne    c0019917 <KiFlushSymlinkChanges()+0x3d>
c0019907:	83 ec 0c             	sub    esp,0xc
c001990a:	68 99 1e 03 c0       	push   0xc0031e99
c001990f:	e8 8a 6b 00 00       	call   c002049e <KePanic(char const*)>
c0019914:	83 c4 10             	add    esp,0x10
c0019917:	50                   	push   eax
c0019918:	50                   	push   eax
c0019919:	6a 06                	push   0x6
c001991b:	53                   	push   ebx
c001991c:	e8 89 0d 00 00       	call   c001a6aa <File::open(FileOpenMode)>
c0019921:	83 c4 10             	add    esp,0x10
c0019924:	85 c0                	test   eax,eax
c0019926:	74 10                	je     c0019938 <KiFlushSymlinkChanges()+0x5e>
c0019928:	83 ec 0c             	sub    esp,0xc
c001992b:	68 b3 1e 03 c0       	push   0xc0031eb3
c0019930:	e8 69 6b 00 00       	call   c002049e <KePanic(char const*)>
c0019935:	83 c4 10             	add    esp,0x10
c0019938:	31 f6                	xor    esi,esi
c001993a:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019940:	7e 70                	jle    c00199b2 <KiFlushSymlinkChanges()+0xd8>
c0019942:	83 ec 0c             	sub    esp,0xc
c0019945:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019947:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001994b:	89 f0                	mov    eax,esi
c001994d:	57                   	push   edi
c001994e:	c1 e0 08             	shl    eax,0x8
c0019951:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019956:	50                   	push   eax
c0019957:	6a 00                	push   0x0
c0019959:	68 00 01 00 00       	push   0x100
c001995e:	53                   	push   ebx
c001995f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0019962:	83 c4 20             	add    esp,0x20
c0019965:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c001996d:	74 10                	je     c001997f <KiFlushSymlinkChanges()+0xa5>
c001996f:	83 ec 0c             	sub    esp,0xc
c0019972:	68 cd 1e 03 c0       	push   0xc0031ecd
c0019977:	e8 22 6b 00 00       	call   c002049e <KePanic(char const*)>
c001997c:	83 c4 10             	add    esp,0x10
c001997f:	83 ec 0c             	sub    esp,0xc
c0019982:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019984:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c001998b:	57                   	push   edi
c001998c:	52                   	push   edx
c001998d:	6a 00                	push   0x0
c001998f:	6a 08                	push   0x8
c0019991:	53                   	push   ebx
c0019992:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019995:	83 c4 20             	add    esp,0x20
c0019998:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c001999d:	74 10                	je     c00199af <KiFlushSymlinkChanges()+0xd5>
c001999f:	83 ec 0c             	sub    esp,0xc
c00199a2:	68 e7 1e 03 c0       	push   0xc0031ee7
c00199a7:	e8 f2 6a 00 00       	call   c002049e <KePanic(char const*)>
c00199ac:	83 c4 10             	add    esp,0x10
c00199af:	46                   	inc    esi
c00199b0:	eb 88                	jmp    c001993a <KiFlushSymlinkChanges()+0x60>
c00199b2:	83 ec 0c             	sub    esp,0xc
c00199b5:	53                   	push   ebx
c00199b6:	e8 4d 0d 00 00       	call   c001a708 <File::close()>
c00199bb:	83 c4 10             	add    esp,0x10
c00199be:	85 db                	test   ebx,ebx
c00199c0:	74 0c                	je     c00199ce <KiFlushSymlinkChanges()+0xf4>
c00199c2:	83 ec 0c             	sub    esp,0xc
c00199c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199c7:	53                   	push   ebx
c00199c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00199d8:	83 c4 10             	add    esp,0x10
c00199db:	5b                   	pop    ebx
c00199dc:	5e                   	pop    esi
c00199dd:	5f                   	pop    edi
c00199de:	c3                   	ret    

c00199df <KiDeinitialiseSymlinks(void*)>:
c00199df:	e9 f6 fe ff ff       	jmp    c00198da <KiFlushSymlinkChanges()>

c00199e4 <KiGetSymlinkHash(char const*)>:
c00199e4:	53                   	push   ebx
c00199e5:	89 c3                	mov    ebx,eax
c00199e7:	83 ec 14             	sub    esp,0x14
c00199ea:	50                   	push   eax
c00199eb:	e8 80 6b fe ff       	call   c0000570 <strlen>
c00199f0:	5a                   	pop    edx
c00199f1:	59                   	pop    ecx
c00199f2:	50                   	push   eax
c00199f3:	53                   	push   ebx
c00199f4:	e8 0c 64 00 00       	call   c001fe05 <KeCalculateCRC32(unsigned char*, int)>
c00199f9:	83 c4 18             	add    esp,0x18
c00199fc:	89 c2                	mov    edx,eax
c00199fe:	5b                   	pop    ebx
c00199ff:	c1 ea 10             	shr    edx,0x10
c0019a02:	31 d0                	xor    eax,edx
c0019a04:	c3                   	ret    

c0019a05 <KiCreateSymlinkID()>:
c0019a05:	55                   	push   ebp
c0019a06:	57                   	push   edi
c0019a07:	56                   	push   esi
c0019a08:	53                   	push   ebx
c0019a09:	31 db                	xor    ebx,ebx
c0019a0b:	83 ec 1c             	sub    esp,0x1c
c0019a0e:	e8 d9 6b 00 00       	call   c00205ec <KeRand()>
c0019a13:	43                   	inc    ebx
c0019a14:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c0019a1a:	31 d2                	xor    edx,edx
c0019a1c:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0019a1f:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0019a23:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019a29:	c1 e0 1f             	shl    eax,0x1f
c0019a2c:	89 d7                	mov    edi,edx
c0019a2e:	89 c6                	mov    esi,eax
c0019a30:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0019a34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a3c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019a42:	75 10                	jne    c0019a54 <KiCreateSymlinkID()+0x4f>
c0019a44:	83 ec 0c             	sub    esp,0xc
c0019a47:	68 01 1f 03 c0       	push   0xc0031f01
c0019a4c:	e8 4d 6a 00 00       	call   c002049e <KePanic(char const*)>
c0019a51:	83 c4 10             	add    esp,0x10
c0019a54:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019a58:	75 04                	jne    c0019a5e <KiCreateSymlinkID()+0x59>
c0019a5a:	39 f5                	cmp    ebp,esi
c0019a5c:	74 b0                	je     c0019a0e <KiCreateSymlinkID()+0x9>
c0019a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a66:	31 f0                	xor    eax,esi
c0019a68:	83 c4 1c             	add    esp,0x1c
c0019a6b:	31 fa                	xor    edx,edi
c0019a6d:	5b                   	pop    ebx
c0019a6e:	5e                   	pop    esi
c0019a6f:	5f                   	pop    edi
c0019a70:	5d                   	pop    ebp
c0019a71:	c3                   	ret    

c0019a72 <KeRegisterSymlink(char const*, unsigned long long)>:
c0019a72:	53                   	push   ebx
c0019a73:	83 ec 0c             	sub    esp,0xc
c0019a76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019a82:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019a87:	68 00 01 00 00       	push   0x100
c0019a8c:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c0019a93:	6a 00                	push   0x0
c0019a95:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019a9c:	c1 e0 08             	shl    eax,0x8
c0019a9f:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019aa4:	50                   	push   eax
c0019aa5:	e8 46 6a fe ff       	call   c00004f0 <memset>
c0019aaa:	58                   	pop    eax
c0019aab:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019ab0:	5a                   	pop    edx
c0019ab1:	c1 e0 08             	shl    eax,0x8
c0019ab4:	53                   	push   ebx
c0019ab5:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019aba:	50                   	push   eax
c0019abb:	e8 80 6b fe ff       	call   c0000640 <strcpy>
c0019ac0:	89 d8                	mov    eax,ebx
c0019ac2:	e8 1d ff ff ff       	call   c00199e4 <KiGetSymlinkHash(char const*)>
c0019ac7:	59                   	pop    ecx
c0019ac8:	0f b7 d8             	movzx  ebx,ax
c0019acb:	58                   	pop    eax
c0019acc:	53                   	push   ebx
c0019acd:	68 0a 1f 03 c0       	push   0xc0031f0a
c0019ad2:	e8 ae f9 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0019ad7:	89 d8                	mov    eax,ebx
c0019ad9:	ba 01 00 00 00       	mov    edx,0x1
c0019ade:	e8 c7 fd ff ff       	call   c00198aa <KiSetHashInTable(unsigned short, bool)>
c0019ae3:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019ae8:	83 c4 10             	add    esp,0x10
c0019aeb:	40                   	inc    eax
c0019aec:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c0019af1:	83 f8 03             	cmp    eax,0x3
c0019af4:	7e 09                	jle    c0019aff <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019af6:	83 c4 08             	add    esp,0x8
c0019af9:	5b                   	pop    ebx
c0019afa:	e9 db fd ff ff       	jmp    c00198da <KiFlushSymlinkChanges()>
c0019aff:	83 c4 08             	add    esp,0x8
c0019b02:	5b                   	pop    ebx
c0019b03:	c3                   	ret    

c0019b04 <KeInitialiseSymlinks()>:
c0019b04:	57                   	push   edi
c0019b05:	56                   	push   esi
c0019b06:	53                   	push   ebx
c0019b07:	81 ec 14 01 00 00    	sub    esp,0x114
c0019b0d:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c0019b17:	68 00 20 00 00       	push   0x2000
c0019b1c:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019b26:	6a 00                	push   0x0
c0019b28:	68 00 af 03 c0       	push   0xc003af00
c0019b2d:	e8 be 69 fe ff       	call   c00004f0 <memset>
c0019b32:	59                   	pop    ecx
c0019b33:	5b                   	pop    ebx
c0019b34:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019b3a:	68 1e 1f 03 c0       	push   0xc0031f1e
c0019b3f:	e8 41 f9 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0019b44:	5e                   	pop    esi
c0019b45:	5f                   	pop    edi
c0019b46:	6a 00                	push   0x0
c0019b48:	68 df 99 01 c0       	push   0xc00199df
c0019b4d:	e8 d6 60 00 00       	call   c001fc28 <KeRegisterAtexit(void (*)(void*), void*)>
c0019b52:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019b59:	e8 98 ca ff ff       	call   c00165f6 <malloc>
c0019b5e:	83 c4 0c             	add    esp,0xc
c0019b61:	89 c3                	mov    ebx,eax
c0019b63:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019b69:	68 7b 1e 03 c0       	push   0xc0031e7b
c0019b6e:	50                   	push   eax
c0019b6f:	e8 18 0b 00 00       	call   c001a68c <File::File(char const*, Process*)>
c0019b74:	83 c4 10             	add    esp,0x10
c0019b77:	85 db                	test   ebx,ebx
c0019b79:	75 10                	jne    c0019b8b <KeInitialiseSymlinks()+0x87>
c0019b7b:	83 ec 0c             	sub    esp,0xc
c0019b7e:	68 3b 1f 03 c0       	push   0xc0031f3b
c0019b83:	e8 16 69 00 00       	call   c002049e <KePanic(char const*)>
c0019b88:	83 c4 10             	add    esp,0x10
c0019b8b:	83 ec 0c             	sub    esp,0xc
c0019b8e:	53                   	push   ebx
c0019b8f:	e8 da 0d 00 00       	call   c001a96e <File::exists()>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	84 c0                	test   al,al
c0019b99:	75 3a                	jne    c0019bd5 <KeInitialiseSymlinks()+0xd1>
c0019b9b:	52                   	push   edx
c0019b9c:	52                   	push   edx
c0019b9d:	6a 12                	push   0x12
c0019b9f:	53                   	push   ebx
c0019ba0:	e8 05 0b 00 00       	call   c001a6aa <File::open(FileOpenMode)>
c0019ba5:	83 c4 10             	add    esp,0x10
c0019ba8:	85 c0                	test   eax,eax
c0019baa:	74 10                	je     c0019bbc <KeInitialiseSymlinks()+0xb8>
c0019bac:	83 ec 0c             	sub    esp,0xc
c0019baf:	68 58 1f 03 c0       	push   0xc0031f58
c0019bb4:	e8 e5 68 00 00       	call   c002049e <KePanic(char const*)>
c0019bb9:	83 c4 10             	add    esp,0x10
c0019bbc:	83 ec 0c             	sub    esp,0xc
c0019bbf:	53                   	push   ebx
c0019bc0:	e8 43 0b 00 00       	call   c001a708 <File::close()>
c0019bc5:	83 c4 10             	add    esp,0x10
c0019bc8:	85 db                	test   ebx,ebx
c0019bca:	0f 84 9e 00 00 00    	je     c0019c6e <KeInitialiseSymlinks()+0x16a>
c0019bd0:	e9 8d 00 00 00       	jmp    c0019c62 <KeInitialiseSymlinks()+0x15e>
c0019bd5:	50                   	push   eax
c0019bd6:	50                   	push   eax
c0019bd7:	6a 01                	push   0x1
c0019bd9:	53                   	push   ebx
c0019bda:	e8 cb 0a 00 00       	call   c001a6aa <File::open(FileOpenMode)>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	85 c0                	test   eax,eax
c0019be4:	74 10                	je     c0019bf6 <KeInitialiseSymlinks()+0xf2>
c0019be6:	83 ec 0c             	sub    esp,0xc
c0019be9:	68 75 1f 03 c0       	push   0xc0031f75
c0019bee:	e8 ab 68 00 00       	call   c002049e <KePanic(char const*)>
c0019bf3:	83 c4 10             	add    esp,0x10
c0019bf6:	83 ec 0c             	sub    esp,0xc
c0019bf9:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019bff:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019c03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c05:	57                   	push   edi
c0019c06:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019c0a:	56                   	push   esi
c0019c0b:	6a 00                	push   0x0
c0019c0d:	68 00 01 00 00       	push   0x100
c0019c12:	53                   	push   ebx
c0019c13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c16:	83 c4 20             	add    esp,0x20
c0019c19:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019c21:	75 33                	jne    c0019c56 <KeInitialiseSymlinks()+0x152>
c0019c23:	83 ec 0c             	sub    esp,0xc
c0019c26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c28:	57                   	push   edi
c0019c29:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019c2d:	52                   	push   edx
c0019c2e:	6a 00                	push   0x0
c0019c30:	6a 08                	push   0x8
c0019c32:	53                   	push   ebx
c0019c33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c36:	83 c4 20             	add    esp,0x20
c0019c39:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019c3e:	75 16                	jne    c0019c56 <KeInitialiseSymlinks()+0x152>
c0019c40:	89 f0                	mov    eax,esi
c0019c42:	e8 9d fd ff ff       	call   c00199e4 <KiGetSymlinkHash(char const*)>
c0019c47:	ba 01 00 00 00       	mov    edx,0x1
c0019c4c:	0f b7 c0             	movzx  eax,ax
c0019c4f:	e8 56 fc ff ff       	call   c00198aa <KiSetHashInTable(unsigned short, bool)>
c0019c54:	eb a0                	jmp    c0019bf6 <KeInitialiseSymlinks()+0xf2>
c0019c56:	83 ec 0c             	sub    esp,0xc
c0019c59:	53                   	push   ebx
c0019c5a:	e8 a9 0a 00 00       	call   c001a708 <File::close()>
c0019c5f:	83 c4 10             	add    esp,0x10
c0019c62:	83 ec 0c             	sub    esp,0xc
c0019c65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c67:	53                   	push   ebx
c0019c68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c6b:	83 c4 10             	add    esp,0x10
c0019c6e:	81 c4 10 01 00 00    	add    esp,0x110
c0019c74:	5b                   	pop    ebx
c0019c75:	5e                   	pop    esi
c0019c76:	5f                   	pop    edi
c0019c77:	c3                   	ret    

c0019c78 <KiIsSymlinkRegistered(char const*)>:
c0019c78:	55                   	push   ebp
c0019c79:	57                   	push   edi
c0019c7a:	56                   	push   esi
c0019c7b:	53                   	push   ebx
c0019c7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c82:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019c89:	89 f0                	mov    eax,esi
c0019c8b:	e8 54 fd ff ff       	call   c00199e4 <KiGetSymlinkHash(char const*)>
c0019c90:	0f b7 c0             	movzx  eax,ax
c0019c93:	53                   	push   ebx
c0019c94:	56                   	push   esi
c0019c95:	50                   	push   eax
c0019c96:	68 90 1f 03 c0       	push   0xc0031f90
c0019c9b:	e8 e5 f7 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0019ca0:	89 f0                	mov    eax,esi
c0019ca2:	e8 3d fd ff ff       	call   c00199e4 <KiGetSymlinkHash(char const*)>
c0019ca7:	0f b7 c0             	movzx  eax,ax
c0019caa:	e8 e1 fb ff ff       	call   c0019890 <KiIsHashInTable(unsigned short)>
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	88 c1                	mov    cl,al
c0019cb4:	31 d2                	xor    edx,edx
c0019cb6:	31 c0                	xor    eax,eax
c0019cb8:	84 c9                	test   cl,cl
c0019cba:	0f 84 31 01 00 00    	je     c0019df1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019cc0:	31 db                	xor    ebx,ebx
c0019cc2:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019cc8:	7e 30                	jle    c0019cfa <KiIsSymlinkRegistered(char const*)+0x82>
c0019cca:	89 d8                	mov    eax,ebx
c0019ccc:	51                   	push   ecx
c0019ccd:	c1 e0 08             	shl    eax,0x8
c0019cd0:	51                   	push   ecx
c0019cd1:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019cd6:	50                   	push   eax
c0019cd7:	56                   	push   esi
c0019cd8:	e8 73 6a fe ff       	call   c0000750 <strcmp>
c0019cdd:	83 c4 10             	add    esp,0x10
c0019ce0:	85 c0                	test   eax,eax
c0019ce2:	75 13                	jne    c0019cf7 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019ce4:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019ceb:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019cf2:	e9 fa 00 00 00       	jmp    c0019df1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019cf7:	43                   	inc    ebx
c0019cf8:	eb c8                	jmp    c0019cc2 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019cfa:	83 ec 0c             	sub    esp,0xc
c0019cfd:	68 14 01 00 00       	push   0x114
c0019d02:	e8 ef c8 ff ff       	call   c00165f6 <malloc>
c0019d07:	83 c4 0c             	add    esp,0xc
c0019d0a:	89 c3                	mov    ebx,eax
c0019d0c:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019d12:	68 7b 1e 03 c0       	push   0xc0031e7b
c0019d17:	50                   	push   eax
c0019d18:	e8 6f 09 00 00       	call   c001a68c <File::File(char const*, Process*)>
c0019d1d:	83 c4 10             	add    esp,0x10
c0019d20:	85 db                	test   ebx,ebx
c0019d22:	75 12                	jne    c0019d36 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019d24:	83 ec 0c             	sub    esp,0xc
c0019d27:	68 a5 1f 03 c0       	push   0xc0031fa5
c0019d2c:	e8 6d 67 00 00       	call   c002049e <KePanic(char const*)>
c0019d31:	83 c4 10             	add    esp,0x10
c0019d34:	eb 10                	jmp    c0019d46 <KiIsSymlinkRegistered(char const*)+0xce>
c0019d36:	83 ec 0c             	sub    esp,0xc
c0019d39:	53                   	push   ebx
c0019d3a:	e8 2f 0c 00 00       	call   c001a96e <File::exists()>
c0019d3f:	83 c4 10             	add    esp,0x10
c0019d42:	84 c0                	test   al,al
c0019d44:	74 de                	je     c0019d24 <KiIsSymlinkRegistered(char const*)+0xac>
c0019d46:	52                   	push   edx
c0019d47:	52                   	push   edx
c0019d48:	6a 01                	push   0x1
c0019d4a:	53                   	push   ebx
c0019d4b:	e8 5a 09 00 00       	call   c001a6aa <File::open(FileOpenMode)>
c0019d50:	83 c4 10             	add    esp,0x10
c0019d53:	85 c0                	test   eax,eax
c0019d55:	74 10                	je     c0019d67 <KiIsSymlinkRegistered(char const*)+0xef>
c0019d57:	83 ec 0c             	sub    esp,0xc
c0019d5a:	68 c0 1f 03 c0       	push   0xc0031fc0
c0019d5f:	e8 3a 67 00 00       	call   c002049e <KePanic(char const*)>
c0019d64:	83 c4 10             	add    esp,0x10
c0019d67:	83 ec 0c             	sub    esp,0xc
c0019d6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d6c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019d70:	55                   	push   ebp
c0019d71:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019d75:	57                   	push   edi
c0019d76:	6a 00                	push   0x0
c0019d78:	68 00 01 00 00       	push   0x100
c0019d7d:	53                   	push   ebx
c0019d7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d81:	83 c4 20             	add    esp,0x20
c0019d84:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019d8c:	75 4b                	jne    c0019dd9 <KiIsSymlinkRegistered(char const*)+0x161>
c0019d8e:	83 ec 0c             	sub    esp,0xc
c0019d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d93:	55                   	push   ebp
c0019d94:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019d98:	52                   	push   edx
c0019d99:	6a 00                	push   0x0
c0019d9b:	6a 08                	push   0x8
c0019d9d:	53                   	push   ebx
c0019d9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019da1:	83 c4 20             	add    esp,0x20
c0019da4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019da9:	75 2e                	jne    c0019dd9 <KiIsSymlinkRegistered(char const*)+0x161>
c0019dab:	50                   	push   eax
c0019dac:	50                   	push   eax
c0019dad:	57                   	push   edi
c0019dae:	56                   	push   esi
c0019daf:	e8 9c 69 fe ff       	call   c0000750 <strcmp>
c0019db4:	83 c4 10             	add    esp,0x10
c0019db7:	85 c0                	test   eax,eax
c0019db9:	75 ac                	jne    c0019d67 <KiIsSymlinkRegistered(char const*)+0xef>
c0019dbb:	83 ec 0c             	sub    esp,0xc
c0019dbe:	53                   	push   ebx
c0019dbf:	e8 44 09 00 00       	call   c001a708 <File::close()>
c0019dc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019dcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019dd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019dd4:	83 c4 10             	add    esp,0x10
c0019dd7:	eb 18                	jmp    c0019df1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019dd9:	83 ec 0c             	sub    esp,0xc
c0019ddc:	53                   	push   ebx
c0019ddd:	e8 26 09 00 00       	call   c001a708 <File::close()>
c0019de2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019de4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019de7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019dea:	83 c4 10             	add    esp,0x10
c0019ded:	31 c0                	xor    eax,eax
c0019def:	31 d2                	xor    edx,edx
c0019df1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019df7:	5b                   	pop    ebx
c0019df8:	5e                   	pop    esi
c0019df9:	5f                   	pop    edi
c0019dfa:	5d                   	pop    ebp
c0019dfb:	c3                   	ret    

c0019dfc <KeDereferenceSymlink(char const*, char*)>:
c0019dfc:	55                   	push   ebp
c0019dfd:	57                   	push   edi
c0019dfe:	56                   	push   esi
c0019dff:	53                   	push   ebx
c0019e00:	83 ec 48             	sub    esp,0x48
c0019e03:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019e07:	56                   	push   esi
c0019e08:	e8 6b fe ff ff       	call   c0019c78 <KiIsSymlinkRegistered(char const*)>
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	89 c7                	mov    edi,eax
c0019e12:	89 d0                	mov    eax,edx
c0019e14:	09 f8                	or     eax,edi
c0019e16:	75 07                	jne    c0019e1f <KeDereferenceSymlink(char const*, char*)+0x23>
c0019e18:	31 c0                	xor    eax,eax
c0019e1a:	e9 7c 01 00 00       	jmp    c0019f9b <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019e1f:	83 ec 0c             	sub    esp,0xc
c0019e22:	89 d5                	mov    ebp,edx
c0019e24:	68 14 01 00 00       	push   0x114
c0019e29:	e8 c8 c7 ff ff       	call   c00165f6 <malloc>
c0019e2e:	83 c4 0c             	add    esp,0xc
c0019e31:	89 c3                	mov    ebx,eax
c0019e33:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019e39:	56                   	push   esi
c0019e3a:	50                   	push   eax
c0019e3b:	e8 4c 08 00 00       	call   c001a68c <File::File(char const*, Process*)>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	85 db                	test   ebx,ebx
c0019e45:	0f 84 32 01 00 00    	je     c0019f7d <KeDereferenceSymlink(char const*, char*)+0x181>
c0019e4b:	56                   	push   esi
c0019e4c:	56                   	push   esi
c0019e4d:	6a 01                	push   0x1
c0019e4f:	53                   	push   ebx
c0019e50:	e8 55 08 00 00       	call   c001a6aa <File::open(FileOpenMode)>
c0019e55:	83 c4 10             	add    esp,0x10
c0019e58:	85 c0                	test   eax,eax
c0019e5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e5c:	74 09                	je     c0019e67 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019e5e:	83 ec 0c             	sub    esp,0xc
c0019e61:	53                   	push   ebx
c0019e62:	e9 10 01 00 00       	jmp    c0019f77 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019e67:	83 ec 0c             	sub    esp,0xc
c0019e6a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e6e:	56                   	push   esi
c0019e6f:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019e73:	52                   	push   edx
c0019e74:	6a 00                	push   0x0
c0019e76:	6a 08                	push   0x8
c0019e78:	53                   	push   ebx
c0019e79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e7c:	83 c4 20             	add    esp,0x20
c0019e7f:	85 c0                	test   eax,eax
c0019e81:	0f 85 e2 00 00 00    	jne    c0019f69 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e87:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019e8c:	0f 85 d7 00 00 00    	jne    c0019f69 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e92:	83 ec 0c             	sub    esp,0xc
c0019e95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e97:	56                   	push   esi
c0019e98:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019e9c:	52                   	push   edx
c0019e9d:	6a 00                	push   0x0
c0019e9f:	6a 08                	push   0x8
c0019ea1:	53                   	push   ebx
c0019ea2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ea5:	83 c4 20             	add    esp,0x20
c0019ea8:	85 c0                	test   eax,eax
c0019eaa:	0f 85 b9 00 00 00    	jne    c0019f69 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019eb0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019eb5:	0f 85 ae 00 00 00    	jne    c0019f69 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ebb:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019ebf:	0f 85 53 ff ff ff    	jne    c0019e18 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019ec5:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019ec9:	0f 85 49 ff ff ff    	jne    c0019e18 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019ecf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019ed7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019edf:	51                   	push   ecx
c0019ee0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019ee4:	50                   	push   eax
c0019ee5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ee9:	50                   	push   eax
c0019eea:	53                   	push   ebx
c0019eeb:	e8 bc 0a 00 00       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c0019ef0:	83 c4 10             	add    esp,0x10
c0019ef3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019ef8:	75 6f                	jne    c0019f69 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019efa:	31 c9                	xor    ecx,ecx
c0019efc:	bf 0f 00 00 00       	mov    edi,0xf
c0019f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f09:	39 c7                	cmp    edi,eax
c0019f0b:	89 cf                	mov    edi,ecx
c0019f0d:	19 d7                	sbb    edi,edx
c0019f0f:	73 58                	jae    c0019f69 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f11:	83 c0 f0             	add    eax,0xfffffff0
c0019f14:	bf ff 00 00 00       	mov    edi,0xff
c0019f19:	83 d2 ff             	adc    edx,0xffffffff
c0019f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f20:	39 c7                	cmp    edi,eax
c0019f22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f26:	19 d1                	sbb    ecx,edx
c0019f28:	72 53                	jb     c0019f7d <KeDereferenceSymlink(char const*, char*)+0x181>
c0019f2a:	40                   	inc    eax
c0019f2b:	52                   	push   edx
c0019f2c:	50                   	push   eax
c0019f2d:	6a 00                	push   0x0
c0019f2f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019f33:	e8 b8 65 fe ff       	call   c00004f0 <memset>
c0019f38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f3a:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f3d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019f41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f49:	53                   	push   ebx
c0019f4a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f4d:	83 c4 20             	add    esp,0x20
c0019f50:	85 c0                	test   eax,eax
c0019f52:	75 15                	jne    c0019f69 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f58:	89 c7                	mov    edi,eax
c0019f5a:	c1 ff 1f             	sar    edi,0x1f
c0019f5d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019f61:	75 06                	jne    c0019f69 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f63:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019f67:	74 19                	je     c0019f82 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019f69:	83 ec 0c             	sub    esp,0xc
c0019f6c:	53                   	push   ebx
c0019f6d:	e8 96 07 00 00       	call   c001a708 <File::close()>
c0019f72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	83 c8 ff             	or     eax,0xffffffff
c0019f80:	eb 19                	jmp    c0019f9b <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019f82:	83 ec 0c             	sub    esp,0xc
c0019f85:	53                   	push   ebx
c0019f86:	e8 7d 07 00 00       	call   c001a708 <File::close()>
c0019f8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f93:	83 c4 10             	add    esp,0x10
c0019f96:	b8 01 00 00 00       	mov    eax,0x1
c0019f9b:	83 c4 3c             	add    esp,0x3c
c0019f9e:	5b                   	pop    ebx
c0019f9f:	5e                   	pop    esi
c0019fa0:	5f                   	pop    edi
c0019fa1:	5d                   	pop    ebp
c0019fa2:	c3                   	ret    

c0019fa3 <KeCreateSymlink(char const*, char const*)>:
c0019fa3:	55                   	push   ebp
c0019fa4:	57                   	push   edi
c0019fa5:	56                   	push   esi
c0019fa6:	53                   	push   ebx
c0019fa7:	83 ec 38             	sub    esp,0x38
c0019faa:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019fae:	68 14 01 00 00       	push   0x114
c0019fb3:	e8 3e c6 ff ff       	call   c00165f6 <malloc>
c0019fb8:	6a 00                	push   0x0
c0019fba:	89 c3                	mov    ebx,eax
c0019fbc:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019fc2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019fc6:	50                   	push   eax
c0019fc7:	e8 e2 05 00 00       	call   c001a5ae <File::File(char const*, Process*, bool)>
c0019fcc:	83 c4 20             	add    esp,0x20
c0019fcf:	b8 01 00 00 00       	mov    eax,0x1
c0019fd4:	85 db                	test   ebx,ebx
c0019fd6:	0f 84 19 01 00 00    	je     c001a0f5 <KeCreateSymlink(char const*, char const*)+0x152>
c0019fdc:	52                   	push   edx
c0019fdd:	52                   	push   edx
c0019fde:	6a 12                	push   0x12
c0019fe0:	53                   	push   ebx
c0019fe1:	e8 c4 06 00 00       	call   c001a6aa <File::open(FileOpenMode)>
c0019fe6:	83 c4 10             	add    esp,0x10
c0019fe9:	85 c0                	test   eax,eax
c0019feb:	74 0b                	je     c0019ff8 <KeCreateSymlink(char const*, char const*)+0x55>
c0019fed:	83 ec 0c             	sub    esp,0xc
c0019ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ff2:	53                   	push   ebx
c0019ff3:	e9 f2 00 00 00       	jmp    c001a0ea <KeCreateSymlink(char const*, char const*)+0x147>
c0019ff8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019ffc:	be 0d 20 03 c0       	mov    esi,0xc003200d
c001a001:	b9 09 00 00 00       	mov    ecx,0x9
c001a006:	fc                   	cld    
c001a007:	83 ec 0c             	sub    esp,0xc
c001a00a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a00c:	8d 74 24 10          	lea    esi,[esp+0x10]
c001a010:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a012:	56                   	push   esi
c001a013:	8d 54 24 27          	lea    edx,[esp+0x27]
c001a017:	52                   	push   edx
c001a018:	6a 00                	push   0x0
c001a01a:	6a 08                	push   0x8
c001a01c:	53                   	push   ebx
c001a01d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a020:	83 c4 20             	add    esp,0x20
c001a023:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a028:	0f 85 ae 00 00 00    	jne    c001a0dc <KeCreateSymlink(char const*, char const*)+0x139>
c001a02e:	85 c0                	test   eax,eax
c001a030:	0f 85 a6 00 00 00    	jne    c001a0dc <KeCreateSymlink(char const*, char const*)+0x139>
c001a036:	e8 ca f9 ff ff       	call   c0019a05 <KiCreateSymlinkID()>
c001a03b:	83 ec 0c             	sub    esp,0xc
c001a03e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a042:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a046:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a048:	56                   	push   esi
c001a049:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a04d:	52                   	push   edx
c001a04e:	6a 00                	push   0x0
c001a050:	6a 08                	push   0x8
c001a052:	53                   	push   ebx
c001a053:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a056:	83 c4 20             	add    esp,0x20
c001a059:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a05e:	75 7c                	jne    c001a0dc <KeCreateSymlink(char const*, char const*)+0x139>
c001a060:	85 c0                	test   eax,eax
c001a062:	75 78                	jne    c001a0dc <KeCreateSymlink(char const*, char const*)+0x139>
c001a064:	83 ec 0c             	sub    esp,0xc
c001a067:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a069:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a06c:	55                   	push   ebp
c001a06d:	e8 fe 64 fe ff       	call   c0000570 <strlen>
c001a072:	89 34 24             	mov    DWORD PTR [esp],esi
c001a075:	31 d2                	xor    edx,edx
c001a077:	55                   	push   ebp
c001a078:	52                   	push   edx
c001a079:	50                   	push   eax
c001a07a:	53                   	push   ebx
c001a07b:	ff d7                	call   edi
c001a07d:	83 c4 14             	add    esp,0x14
c001a080:	89 c6                	mov    esi,eax
c001a082:	55                   	push   ebp
c001a083:	e8 e8 64 fe ff       	call   c0000570 <strlen>
c001a088:	83 c4 10             	add    esp,0x10
c001a08b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a08f:	75 4b                	jne    c001a0dc <KeCreateSymlink(char const*, char const*)+0x139>
c001a091:	85 f6                	test   esi,esi
c001a093:	75 47                	jne    c001a0dc <KeCreateSymlink(char const*, char const*)+0x139>
c001a095:	50                   	push   eax
c001a096:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a09a:	55                   	push   ebp
c001a09b:	68 db 1f 03 c0       	push   0xc0031fdb
c001a0a0:	e8 e0 f3 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001a0a5:	83 c4 0c             	add    esp,0xc
c001a0a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0b0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001a0b4:	e8 b9 f9 ff ff       	call   c0019a72 <KeRegisterSymlink(char const*, unsigned long long)>
c001a0b9:	c7 04 24 00 20 03 c0 	mov    DWORD PTR [esp],0xc0032000
c001a0c0:	e8 c0 f3 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001a0c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0c8:	e8 3b 06 00 00       	call   c001a708 <File::close()>
c001a0cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0d5:	83 c4 10             	add    esp,0x10
c001a0d8:	31 c0                	xor    eax,eax
c001a0da:	eb 19                	jmp    c001a0f5 <KeCreateSymlink(char const*, char const*)+0x152>
c001a0dc:	83 ec 0c             	sub    esp,0xc
c001a0df:	53                   	push   ebx
c001a0e0:	e8 23 06 00 00       	call   c001a708 <File::close()>
c001a0e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	b8 01 00 00 00       	mov    eax,0x1
c001a0f5:	83 c4 2c             	add    esp,0x2c
c001a0f8:	5b                   	pop    ebx
c001a0f9:	5e                   	pop    esi
c001a0fa:	5f                   	pop    edi
c001a0fb:	5d                   	pop    ebp
c001a0fc:	c3                   	ret    
c001a0fd:	90                   	nop

c001a0fe <File::read(unsigned long long, void*, int*)>:
c001a0fe:	53                   	push   ebx
c001a0ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a103:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a107:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a10e:	83 f8 19             	cmp    eax,0x19
c001a111:	77 35                	ja     c001a148 <File::read(unsigned long long, void*, int*)+0x4a>
c001a113:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a11a:	85 c0                	test   eax,eax
c001a11c:	74 2a                	je     c001a148 <File::read(unsigned long long, void*, int*)+0x4a>
c001a11e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a124:	85 c0                	test   eax,eax
c001a126:	74 20                	je     c001a148 <File::read(unsigned long long, void*, int*)+0x4a>
c001a128:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a12c:	74 21                	je     c001a14f <File::read(unsigned long long, void*, int*)+0x51>
c001a12e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a130:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a134:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a13a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a13e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a142:	5b                   	pop    ebx
c001a143:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001a146:	ff e0                	jmp    eax
c001a148:	b8 0b 00 00 00       	mov    eax,0xb
c001a14d:	eb 05                	jmp    c001a154 <File::read(unsigned long long, void*, int*)+0x56>
c001a14f:	b8 05 00 00 00       	mov    eax,0x5
c001a154:	5b                   	pop    ebx
c001a155:	c3                   	ret    

c001a156 <File::write(unsigned long long, void*, int*)>:
c001a156:	53                   	push   ebx
c001a157:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a15b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a15f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a166:	83 f8 19             	cmp    eax,0x19
c001a169:	77 35                	ja     c001a1a0 <File::write(unsigned long long, void*, int*)+0x4a>
c001a16b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a172:	85 c0                	test   eax,eax
c001a174:	74 2a                	je     c001a1a0 <File::write(unsigned long long, void*, int*)+0x4a>
c001a176:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a17c:	85 c0                	test   eax,eax
c001a17e:	74 20                	je     c001a1a0 <File::write(unsigned long long, void*, int*)+0x4a>
c001a180:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a184:	74 21                	je     c001a1a7 <File::write(unsigned long long, void*, int*)+0x51>
c001a186:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a188:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a18c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a192:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a196:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a19a:	5b                   	pop    ebx
c001a19b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001a19e:	ff e0                	jmp    eax
c001a1a0:	b8 0b 00 00 00       	mov    eax,0xb
c001a1a5:	eb 05                	jmp    c001a1ac <File::write(unsigned long long, void*, int*)+0x56>
c001a1a7:	b8 05 00 00 00       	mov    eax,0x5
c001a1ac:	5b                   	pop    ebx
c001a1ad:	c3                   	ret    

c001a1ae <Directory::read(unsigned long long, void*, int*)>:
c001a1ae:	53                   	push   ebx
c001a1af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a1b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a1be:	83 f8 19             	cmp    eax,0x19
c001a1c1:	77 35                	ja     c001a1f8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a1c3:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a1ca:	85 c0                	test   eax,eax
c001a1cc:	74 2a                	je     c001a1f8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a1ce:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a1d4:	85 c0                	test   eax,eax
c001a1d6:	74 20                	je     c001a1f8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a1d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a1dc:	74 21                	je     c001a1ff <Directory::read(unsigned long long, void*, int*)+0x51>
c001a1de:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a1e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a1e4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a1ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1f2:	5b                   	pop    ebx
c001a1f3:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a1f6:	ff e0                	jmp    eax
c001a1f8:	b8 0b 00 00 00       	mov    eax,0xb
c001a1fd:	eb 05                	jmp    c001a204 <Directory::read(unsigned long long, void*, int*)+0x56>
c001a1ff:	b8 05 00 00 00       	mov    eax,0x5
c001a204:	5b                   	pop    ebx
c001a205:	c3                   	ret    

c001a206 <Directory::write(unsigned long long, void*, int*)>:
c001a206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a20a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a211:	b8 0b 00 00 00       	mov    eax,0xb
c001a216:	83 fa 19             	cmp    edx,0x19
c001a219:	77 18                	ja     c001a233 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a21b:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a222:	85 d2                	test   edx,edx
c001a224:	74 0d                	je     c001a233 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a226:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a22d:	19 c0                	sbb    eax,eax
c001a22f:	83 e0 0a             	and    eax,0xa
c001a232:	40                   	inc    eax
c001a233:	c3                   	ret    

c001a234 <File::isAtty()>:
c001a234:	31 c0                	xor    eax,eax
c001a236:	c3                   	ret    
c001a237:	90                   	nop

c001a238 <Directory::isAtty()>:
c001a238:	31 c0                	xor    eax,eax
c001a23a:	c3                   	ret    
c001a23b:	90                   	nop

c001a23c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a23c:	b8 0a 00 00 00       	mov    eax,0xa
c001a241:	c3                   	ret    

c001a242 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a242:	b8 0a 00 00 00       	mov    eax,0xa
c001a247:	c3                   	ret    

c001a248 <Filesystem::allocateSwapfile(char const*, int)>:
c001a248:	31 c0                	xor    eax,eax
c001a24a:	31 d2                	xor    edx,edx
c001a24c:	c3                   	ret    
c001a24d:	90                   	nop

c001a24e <File::~File()>:
c001a24e:	83 ec 0c             	sub    esp,0xc
c001a251:	ba cc 20 03 c0       	mov    edx,0xc00320cc
c001a256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a25a:	89 10                	mov    DWORD PTR [eax],edx
c001a25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a260:	83 ec 0c             	sub    esp,0xc
c001a263:	50                   	push   eax
c001a264:	e8 7b dc ff ff       	call   c0017ee4 <UnixFile::~UnixFile()>
c001a269:	83 c4 10             	add    esp,0x10
c001a26c:	90                   	nop
c001a26d:	83 c4 0c             	add    esp,0xc
c001a270:	c3                   	ret    
c001a271:	90                   	nop

c001a272 <File::~File()>:
c001a272:	83 ec 0c             	sub    esp,0xc
c001a275:	83 ec 0c             	sub    esp,0xc
c001a278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a27c:	e8 cd ff ff ff       	call   c001a24e <File::~File()>
c001a281:	83 c4 10             	add    esp,0x10
c001a284:	83 ec 08             	sub    esp,0x8
c001a287:	68 14 01 00 00       	push   0x114
c001a28c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a290:	e8 c3 f0 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001a295:	83 c4 10             	add    esp,0x10
c001a298:	83 c4 0c             	add    esp,0xc
c001a29b:	c3                   	ret    

c001a29c <Directory::~Directory()>:
c001a29c:	83 ec 0c             	sub    esp,0xc
c001a29f:	ba e8 20 03 c0       	mov    edx,0xc00320e8
c001a2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2a8:	89 10                	mov    DWORD PTR [eax],edx
c001a2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2ae:	83 ec 0c             	sub    esp,0xc
c001a2b1:	50                   	push   eax
c001a2b2:	e8 2d dc ff ff       	call   c0017ee4 <UnixFile::~UnixFile()>
c001a2b7:	83 c4 10             	add    esp,0x10
c001a2ba:	90                   	nop
c001a2bb:	83 c4 0c             	add    esp,0xc
c001a2be:	c3                   	ret    
c001a2bf:	90                   	nop

c001a2c0 <Directory::~Directory()>:
c001a2c0:	83 ec 0c             	sub    esp,0xc
c001a2c3:	83 ec 0c             	sub    esp,0xc
c001a2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2ca:	e8 cd ff ff ff       	call   c001a29c <Directory::~Directory()>
c001a2cf:	83 c4 10             	add    esp,0x10
c001a2d2:	83 ec 08             	sub    esp,0x8
c001a2d5:	68 14 01 00 00       	push   0x114
c001a2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2de:	e8 75 f0 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001a2e3:	83 c4 10             	add    esp,0x10
c001a2e6:	83 c4 0c             	add    esp,0xc
c001a2e9:	c3                   	ret    

c001a2ea <Filesystem::Filesystem()>:
c001a2ea:	ba 60 20 03 c0       	mov    edx,0xc0032060
c001a2ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2f3:	89 10                	mov    DWORD PTR [eax],edx
c001a2f5:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a2fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a306:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a30b:	90                   	nop
c001a30c:	c3                   	ret    
c001a30d:	90                   	nop

c001a30e <Filesystem::~Filesystem()>:
c001a30e:	ba 60 20 03 c0       	mov    edx,0xc0032060
c001a313:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a317:	89 10                	mov    DWORD PTR [eax],edx
c001a319:	90                   	nop
c001a31a:	c3                   	ret    
c001a31b:	90                   	nop

c001a31c <Filesystem::~Filesystem()>:
c001a31c:	83 ec 0c             	sub    esp,0xc
c001a31f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a323:	e8 e6 ff ff ff       	call   c001a30e <Filesystem::~Filesystem()>
c001a328:	83 c4 04             	add    esp,0x4
c001a32b:	83 ec 08             	sub    esp,0x8
c001a32e:	6a 08                	push   0x8
c001a330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a334:	e8 1f f0 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001a339:	83 c4 10             	add    esp,0x10
c001a33c:	83 c4 0c             	add    esp,0xc
c001a33f:	c3                   	ret    

c001a340 <Fs::getcwd(Process*, char*, int)>:
c001a340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a344:	31 c0                	xor    eax,eax
c001a346:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a349:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a34d:	7d 15                	jge    c001a364 <Fs::getcwd(Process*, char*, int)+0x24>
c001a34f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a353:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a35a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a35d:	84 c9                	test   cl,cl
c001a35f:	74 06                	je     c001a367 <Fs::getcwd(Process*, char*, int)+0x27>
c001a361:	40                   	inc    eax
c001a362:	eb e2                	jmp    c001a346 <Fs::getcwd(Process*, char*, int)+0x6>
c001a364:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a367:	31 c0                	xor    eax,eax
c001a369:	c3                   	ret    

c001a36a <Fs::initVFS()>:
c001a36a:	83 ec 18             	sub    esp,0x18
c001a36d:	6a 08                	push   0x8
c001a36f:	e8 82 c2 ff ff       	call   c00165f6 <malloc>
c001a374:	89 04 24             	mov    DWORD PTR [esp],eax
c001a377:	e8 f8 e9 00 00       	call   c0028d74 <FAT::FAT()>
c001a37c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a383:	e8 6e c2 ff ff       	call   c00165f6 <malloc>
c001a388:	89 04 24             	mov    DWORD PTR [esp],eax
c001a38b:	e8 10 f9 00 00       	call   c0029ca0 <ISO9660::ISO9660()>
c001a390:	83 c4 1c             	add    esp,0x1c
c001a393:	c3                   	ret    

c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a394:	55                   	push   ebp
c001a395:	57                   	push   edi
c001a396:	56                   	push   esi
c001a397:	53                   	push   ebx
c001a398:	81 ec 10 04 00 00    	sub    esp,0x410
c001a39e:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a3a5:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a3ac:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a3b4:	68 00 04 00 00       	push   0x400
c001a3b9:	6a 00                	push   0x0
c001a3bb:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a3bf:	57                   	push   edi
c001a3c0:	e8 2b 61 fe ff       	call   c00004f0 <memset>
c001a3c5:	83 c4 10             	add    esp,0x10
c001a3c8:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a3cc:	75 0b                	jne    c001a3d9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a3ce:	50                   	push   eax
c001a3cf:	50                   	push   eax
c001a3d0:	55                   	push   ebp
c001a3d1:	57                   	push   edi
c001a3d2:	e8 69 62 fe ff       	call   c0000640 <strcpy>
c001a3d7:	eb 51                	jmp    c001a42a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a3d9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a3dd:	83 f8 5c             	cmp    eax,0x5c
c001a3e0:	74 05                	je     c001a3e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a3e2:	83 f8 2f             	cmp    eax,0x2f
c001a3e5:	75 1e                	jne    c001a405 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a3e7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a3ee:	8a 00                	mov    al,BYTE PTR [eax]
c001a3f0:	3c 60                	cmp    al,0x60
c001a3f2:	7e 03                	jle    c001a3f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a3f4:	83 e8 20             	sub    eax,0x20
c001a3f7:	88 04 24             	mov    BYTE PTR [esp],al
c001a3fa:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a401:	50                   	push   eax
c001a402:	50                   	push   eax
c001a403:	eb 1e                	jmp    c001a423 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a405:	50                   	push   eax
c001a406:	50                   	push   eax
c001a407:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a40e:	57                   	push   edi
c001a40f:	e8 2c 62 fe ff       	call   c0000640 <strcpy>
c001a414:	58                   	pop    eax
c001a415:	5a                   	pop    edx
c001a416:	68 5f 31 03 c0       	push   0xc003315f
c001a41b:	57                   	push   edi
c001a41c:	e8 1f 64 fe ff       	call   c0000840 <strcat>
c001a421:	59                   	pop    ecx
c001a422:	58                   	pop    eax
c001a423:	55                   	push   ebp
c001a424:	57                   	push   edi
c001a425:	e8 16 64 fe ff       	call   c0000840 <strcat>
c001a42a:	83 c4 10             	add    esp,0x10
c001a42d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a430:	3c 60                	cmp    al,0x60
c001a432:	7e 03                	jle    c001a437 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a434:	83 e8 20             	sub    eax,0x20
c001a437:	88 04 24             	mov    BYTE PTR [esp],al
c001a43a:	88 06                	mov    BYTE PTR [esi],al
c001a43c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a443:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a449:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a44d:	bf 03 00 00 00       	mov    edi,0x3
c001a452:	b8 03 00 00 00       	mov    eax,0x3
c001a457:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a45b:	89 e9                	mov    ecx,ebp
c001a45d:	85 ed                	test   ebp,ebp
c001a45f:	0f 84 97 00 00 00    	je     c001a4fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a465:	8d 57 01             	lea    edx,[edi+0x1]
c001a468:	83 fd 5c             	cmp    ebp,0x5c
c001a46b:	74 05                	je     c001a472 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a46d:	83 fd 2f             	cmp    ebp,0x2f
c001a470:	75 12                	jne    c001a484 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a472:	89 c5                	mov    ebp,eax
c001a474:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a479:	74 09                	je     c001a484 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a47b:	40                   	inc    eax
c001a47c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a480:	89 d7                	mov    edi,edx
c001a482:	eb d3                	jmp    c001a457 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a484:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a489:	0f be e9             	movsx  ebp,cl
c001a48c:	75 5e                	jne    c001a4ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a48e:	83 fd 2e             	cmp    ebp,0x2e
c001a491:	75 59                	jne    c001a4ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a493:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a497:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a49c:	74 18                	je     c001a4b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a49e:	83 fd 2e             	cmp    ebp,0x2e
c001a4a1:	74 53                	je     c001a4f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a4a3:	89 fa                	mov    edx,edi
c001a4a5:	42                   	inc    edx
c001a4a6:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a4aa:	83 f9 2f             	cmp    ecx,0x2f
c001a4ad:	74 f6                	je     c001a4a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a4af:	83 f9 5c             	cmp    ecx,0x5c
c001a4b2:	74 f1                	je     c001a4a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a4b4:	eb ca                	jmp    c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4b6:	83 fd 2e             	cmp    ebp,0x2e
c001a4b9:	74 3b                	je     c001a4f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a4bb:	83 f8 03             	cmp    eax,0x3
c001a4be:	74 c0                	je     c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4c0:	42                   	inc    edx
c001a4c1:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a4c5:	83 f9 5c             	cmp    ecx,0x5c
c001a4c8:	74 f6                	je     c001a4c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a4ca:	83 f9 2f             	cmp    ecx,0x2f
c001a4cd:	74 f1                	je     c001a4c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a4cf:	48                   	dec    eax
c001a4d0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a4d4:	75 06                	jne    c001a4dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a4d6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4da:	eb f3                	jmp    c001a4cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a4dc:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a4e0:	74 07                	je     c001a4e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a4e2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4e6:	48                   	dec    eax
c001a4e7:	eb f3                	jmp    c001a4dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a4e9:	40                   	inc    eax
c001a4ea:	eb 94                	jmp    c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4ec:	83 fd 5c             	cmp    ebp,0x5c
c001a4ef:	74 8f                	je     c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4f1:	83 fd 2f             	cmp    ebp,0x2f
c001a4f4:	74 8a                	je     c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4f6:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a4f9:	40                   	inc    eax
c001a4fa:	eb 84                	jmp    c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4fc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a500:	83 ec 0c             	sub    esp,0xc
c001a503:	56                   	push   esi
c001a504:	e8 67 60 fe ff       	call   c0000570 <strlen>
c001a509:	83 c4 10             	add    esp,0x10
c001a50c:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a511:	74 17                	je     c001a52a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a513:	83 ec 0c             	sub    esp,0xc
c001a516:	56                   	push   esi
c001a517:	e8 54 60 fe ff       	call   c0000570 <strlen>
c001a51c:	83 c4 10             	add    esp,0x10
c001a51f:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a524:	74 04                	je     c001a52a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a526:	31 ff                	xor    edi,edi
c001a528:	eb 5c                	jmp    c001a586 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a52a:	83 ec 0c             	sub    esp,0xc
c001a52d:	56                   	push   esi
c001a52e:	e8 3d 60 fe ff       	call   c0000570 <strlen>
c001a533:	83 c4 10             	add    esp,0x10
c001a536:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a53b:	74 e9                	je     c001a526 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a53d:	83 ec 0c             	sub    esp,0xc
c001a540:	56                   	push   esi
c001a541:	e8 2a 60 fe ff       	call   c0000570 <strlen>
c001a546:	83 c4 10             	add    esp,0x10
c001a549:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a54e:	eb b0                	jmp    c001a500 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a550:	52                   	push   edx
c001a551:	52                   	push   edx
c001a552:	56                   	push   esi
c001a553:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a557:	55                   	push   ebp
c001a558:	e8 e3 60 fe ff       	call   c0000640 <strcpy>
c001a55d:	59                   	pop    ecx
c001a55e:	58                   	pop    eax
c001a55f:	56                   	push   esi
c001a560:	55                   	push   ebp
c001a561:	e8 96 f8 ff ff       	call   c0019dfc <KeDereferenceSymlink(char const*, char*)>
c001a566:	83 c4 10             	add    esp,0x10
c001a569:	48                   	dec    eax
c001a56a:	75 37                	jne    c001a5a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a56c:	50                   	push   eax
c001a56d:	56                   	push   esi
c001a56e:	55                   	push   ebp
c001a56f:	68 16 20 03 c0       	push   0xc0032016
c001a574:	e8 0c ef ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001a579:	83 c4 10             	add    esp,0x10
c001a57c:	8d 47 01             	lea    eax,[edi+0x1]
c001a57f:	83 ff 14             	cmp    edi,0x14
c001a582:	74 08                	je     c001a58c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a584:	89 c7                	mov    edi,eax
c001a586:	85 db                	test   ebx,ebx
c001a588:	75 c6                	jne    c001a550 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a58a:	eb 17                	jmp    c001a5a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a58c:	83 ec 0c             	sub    esp,0xc
c001a58f:	bf 15 00 00 00       	mov    edi,0x15
c001a594:	68 31 20 03 c0       	push   0xc0032031
c001a599:	e8 00 5f 00 00       	call   c002049e <KePanic(char const*)>
c001a59e:	83 c4 10             	add    esp,0x10
c001a5a1:	eb e3                	jmp    c001a586 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a5a3:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a5a9:	5b                   	pop    ebx
c001a5aa:	5e                   	pop    esi
c001a5ab:	5f                   	pop    edi
c001a5ac:	5d                   	pop    ebp
c001a5ad:	c3                   	ret    

c001a5ae <File::File(char const*, Process*, bool)>:
c001a5ae:	83 ec 1c             	sub    esp,0x1c
c001a5b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5b5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5bd:	83 ec 08             	sub    esp,0x8
c001a5c0:	6a 00                	push   0x0
c001a5c2:	50                   	push   eax
c001a5c3:	e8 36 d7 ff ff       	call   c0017cfe <UnixFile::UnixFile(int)>
c001a5c8:	83 c4 10             	add    esp,0x10
c001a5cb:	ba cc 20 03 c0       	mov    edx,0xc00320cc
c001a5d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d4:	89 10                	mov    DWORD PTR [eax],edx
c001a5d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5db:	85 c0                	test   eax,eax
c001a5dd:	74 0f                	je     c001a5ee <File::File(char const*, Process*, bool)+0x40>
c001a5df:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a5e4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a5e8:	74 04                	je     c001a5ee <File::File(char const*, Process*, bool)+0x40>
c001a5ea:	b0 01                	mov    al,0x1
c001a5ec:	eb 02                	jmp    c001a5f0 <File::File(char const*, Process*, bool)+0x42>
c001a5ee:	b0 00                	mov    al,0x0
c001a5f0:	0f b6 c0             	movzx  eax,al
c001a5f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5f7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a5fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a601:	83 c2 0d             	add    edx,0xd
c001a604:	50                   	push   eax
c001a605:	51                   	push   ecx
c001a606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a60a:	52                   	push   edx
c001a60b:	e8 84 fd ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a610:	83 c4 10             	add    esp,0x10
c001a613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a617:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a61a:	83 e8 41             	sub    eax,0x41
c001a61d:	88 c2                	mov    dl,al
c001a61f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a623:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a62d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a635:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a63b:	0f b6 c0             	movzx  eax,al
c001a63e:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a645:	85 c0                	test   eax,eax
c001a647:	74 3e                	je     c001a687 <File::File(char const*, Process*, bool)+0xd9>
c001a649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a64d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a653:	0f b6 c0             	movzx  eax,al
c001a656:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a65d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a663:	85 c0                	test   eax,eax
c001a665:	75 20                	jne    c001a687 <File::File(char const*, Process*, bool)+0xd9>
c001a667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a66b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a671:	0f b6 c0             	movzx  eax,al
c001a674:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a67b:	83 ec 0c             	sub    esp,0xc
c001a67e:	50                   	push   eax
c001a67f:	e8 b2 21 00 00       	call   c001c836 <LogicalDisk::mount()>
c001a684:	83 c4 10             	add    esp,0x10
c001a687:	90                   	nop
c001a688:	83 c4 1c             	add    esp,0x1c
c001a68b:	c3                   	ret    

c001a68c <File::File(char const*, Process*)>:
c001a68c:	83 ec 0c             	sub    esp,0xc
c001a68f:	6a 01                	push   0x1
c001a691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a69d:	e8 0c ff ff ff       	call   c001a5ae <File::File(char const*, Process*, bool)>
c001a6a2:	83 c4 10             	add    esp,0x10
c001a6a5:	90                   	nop
c001a6a6:	83 c4 0c             	add    esp,0xc
c001a6a9:	c3                   	ret    

c001a6aa <File::open(FileOpenMode)>:
c001a6aa:	53                   	push   ebx
c001a6ab:	b8 0b 00 00 00       	mov    eax,0xb
c001a6b0:	83 ec 08             	sub    esp,0x8
c001a6b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a6b7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a6be:	83 fa 19             	cmp    edx,0x19
c001a6c1:	77 40                	ja     c001a703 <File::open(FileOpenMode)+0x59>
c001a6c3:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a6ca:	85 d2                	test   edx,edx
c001a6cc:	74 35                	je     c001a703 <File::open(FileOpenMode)+0x59>
c001a6ce:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a6d4:	85 d2                	test   edx,edx
c001a6d6:	74 2b                	je     c001a703 <File::open(FileOpenMode)+0x59>
c001a6d8:	b8 06 00 00 00       	mov    eax,0x6
c001a6dd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a6e1:	75 20                	jne    c001a703 <File::open(FileOpenMode)+0x59>
c001a6e3:	8b 02                	mov    eax,DWORD PTR [edx]
c001a6e5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a6eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a6ef:	51                   	push   ecx
c001a6f0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a6f3:	51                   	push   ecx
c001a6f4:	52                   	push   edx
c001a6f5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a6f8:	83 c4 10             	add    esp,0x10
c001a6fb:	85 c0                	test   eax,eax
c001a6fd:	75 04                	jne    c001a703 <File::open(FileOpenMode)+0x59>
c001a6ff:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a703:	83 c4 08             	add    esp,0x8
c001a706:	5b                   	pop    ebx
c001a707:	c3                   	ret    

c001a708 <File::close()>:
c001a708:	53                   	push   ebx
c001a709:	b8 0b 00 00 00       	mov    eax,0xb
c001a70e:	83 ec 08             	sub    esp,0x8
c001a711:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a715:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a71c:	83 f9 19             	cmp    ecx,0x19
c001a71f:	77 41                	ja     c001a762 <File::close()+0x5a>
c001a721:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a728:	85 db                	test   ebx,ebx
c001a72a:	74 36                	je     c001a762 <File::close()+0x5a>
c001a72c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a733:	74 2d                	je     c001a762 <File::close()+0x5a>
c001a735:	b8 05 00 00 00       	mov    eax,0x5
c001a73a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a73e:	74 22                	je     c001a762 <File::close()+0x5a>
c001a740:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a744:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a74b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a751:	53                   	push   ebx
c001a752:	53                   	push   ebx
c001a753:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a755:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a75b:	50                   	push   eax
c001a75c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a75f:	83 c4 10             	add    esp,0x10
c001a762:	83 c4 08             	add    esp,0x8
c001a765:	5b                   	pop    ebx
c001a766:	c3                   	ret    
c001a767:	90                   	nop

c001a768 <File::seek(unsigned long long)>:
c001a768:	56                   	push   esi
c001a769:	53                   	push   ebx
c001a76a:	b8 0b 00 00 00       	mov    eax,0xb
c001a76f:	51                   	push   ecx
c001a770:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a774:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a778:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a77f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a783:	83 fa 19             	cmp    edx,0x19
c001a786:	77 31                	ja     c001a7b9 <File::seek(unsigned long long)+0x51>
c001a788:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a78f:	85 d2                	test   edx,edx
c001a791:	74 26                	je     c001a7b9 <File::seek(unsigned long long)+0x51>
c001a793:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a799:	85 d2                	test   edx,edx
c001a79b:	74 1c                	je     c001a7b9 <File::seek(unsigned long long)+0x51>
c001a79d:	b8 05 00 00 00       	mov    eax,0x5
c001a7a2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a7a6:	74 11                	je     c001a7b9 <File::seek(unsigned long long)+0x51>
c001a7a8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7aa:	53                   	push   ebx
c001a7ab:	51                   	push   ecx
c001a7ac:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a7b2:	52                   	push   edx
c001a7b3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a7b6:	83 c4 10             	add    esp,0x10
c001a7b9:	5a                   	pop    edx
c001a7ba:	5b                   	pop    ebx
c001a7bb:	5e                   	pop    esi
c001a7bc:	c3                   	ret    
c001a7bd:	90                   	nop

c001a7be <File::truncate(unsigned long long)>:
c001a7be:	56                   	push   esi
c001a7bf:	53                   	push   ebx
c001a7c0:	b8 0b 00 00 00       	mov    eax,0xb
c001a7c5:	51                   	push   ecx
c001a7c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a7d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7d9:	83 fa 19             	cmp    edx,0x19
c001a7dc:	77 31                	ja     c001a80f <File::truncate(unsigned long long)+0x51>
c001a7de:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a7e5:	85 d2                	test   edx,edx
c001a7e7:	74 26                	je     c001a80f <File::truncate(unsigned long long)+0x51>
c001a7e9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7ef:	85 d2                	test   edx,edx
c001a7f1:	74 1c                	je     c001a80f <File::truncate(unsigned long long)+0x51>
c001a7f3:	b8 05 00 00 00       	mov    eax,0x5
c001a7f8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a7fc:	74 11                	je     c001a80f <File::truncate(unsigned long long)+0x51>
c001a7fe:	8b 02                	mov    eax,DWORD PTR [edx]
c001a800:	53                   	push   ebx
c001a801:	51                   	push   ecx
c001a802:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a808:	52                   	push   edx
c001a809:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a80c:	83 c4 10             	add    esp,0x10
c001a80f:	5a                   	pop    edx
c001a810:	5b                   	pop    ebx
c001a811:	5e                   	pop    esi
c001a812:	c3                   	ret    
c001a813:	90                   	nop

c001a814 <File::tell(unsigned long long*)>:
c001a814:	83 ec 0c             	sub    esp,0xc
c001a817:	b8 0b 00 00 00       	mov    eax,0xb
c001a81c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a820:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a827:	83 fa 19             	cmp    edx,0x19
c001a82a:	77 34                	ja     c001a860 <File::tell(unsigned long long*)+0x4c>
c001a82c:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a833:	85 d2                	test   edx,edx
c001a835:	74 29                	je     c001a860 <File::tell(unsigned long long*)+0x4c>
c001a837:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a83d:	85 d2                	test   edx,edx
c001a83f:	74 1f                	je     c001a860 <File::tell(unsigned long long*)+0x4c>
c001a841:	b8 05 00 00 00       	mov    eax,0x5
c001a846:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a84a:	74 14                	je     c001a860 <File::tell(unsigned long long*)+0x4c>
c001a84c:	50                   	push   eax
c001a84d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a84f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a853:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a859:	52                   	push   edx
c001a85a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a85d:	83 c4 10             	add    esp,0x10
c001a860:	83 c4 0c             	add    esp,0xc
c001a863:	c3                   	ret    

c001a864 <File::rewind()>:
c001a864:	83 ec 10             	sub    esp,0x10
c001a867:	6a 00                	push   0x0
c001a869:	6a 00                	push   0x0
c001a86b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a86f:	e8 f4 fe ff ff       	call   c001a768 <File::seek(unsigned long long)>
c001a874:	83 c4 1c             	add    esp,0x1c
c001a877:	c3                   	ret    

c001a878 <File::unlink()>:
c001a878:	83 ec 0c             	sub    esp,0xc
c001a87b:	b8 0b 00 00 00       	mov    eax,0xb
c001a880:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a884:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a88b:	83 f9 19             	cmp    ecx,0x19
c001a88e:	77 2f                	ja     c001a8bf <File::unlink()+0x47>
c001a890:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a897:	85 c9                	test   ecx,ecx
c001a899:	74 24                	je     c001a8bf <File::unlink()+0x47>
c001a89b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8a1:	85 c9                	test   ecx,ecx
c001a8a3:	74 1a                	je     c001a8bf <File::unlink()+0x47>
c001a8a5:	b8 06 00 00 00       	mov    eax,0x6
c001a8aa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a8ae:	75 0f                	jne    c001a8bf <File::unlink()+0x47>
c001a8b0:	83 c2 0d             	add    edx,0xd
c001a8b3:	50                   	push   eax
c001a8b4:	50                   	push   eax
c001a8b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a8b7:	52                   	push   edx
c001a8b8:	51                   	push   ecx
c001a8b9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a8bc:	83 c4 10             	add    esp,0x10
c001a8bf:	83 c4 0c             	add    esp,0xc
c001a8c2:	c3                   	ret    
c001a8c3:	90                   	nop

c001a8c4 <File::rename(char const*)>:
c001a8c4:	83 ec 0c             	sub    esp,0xc
c001a8c7:	b8 0b 00 00 00       	mov    eax,0xb
c001a8cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a8d7:	83 f9 19             	cmp    ecx,0x19
c001a8da:	77 32                	ja     c001a90e <File::rename(char const*)+0x4a>
c001a8dc:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a8e3:	85 c9                	test   ecx,ecx
c001a8e5:	74 27                	je     c001a90e <File::rename(char const*)+0x4a>
c001a8e7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8ed:	85 c9                	test   ecx,ecx
c001a8ef:	74 1d                	je     c001a90e <File::rename(char const*)+0x4a>
c001a8f1:	b8 06 00 00 00       	mov    eax,0x6
c001a8f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a8fa:	75 12                	jne    c001a90e <File::rename(char const*)+0x4a>
c001a8fc:	83 c2 0d             	add    edx,0xd
c001a8ff:	50                   	push   eax
c001a900:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a902:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a906:	52                   	push   edx
c001a907:	51                   	push   ecx
c001a908:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a90b:	83 c4 10             	add    esp,0x10
c001a90e:	83 c4 0c             	add    esp,0xc
c001a911:	c3                   	ret    

c001a912 <File::chfatattr(unsigned char, unsigned char)>:
c001a912:	57                   	push   edi
c001a913:	b8 0b 00 00 00       	mov    eax,0xb
c001a918:	56                   	push   esi
c001a919:	53                   	push   ebx
c001a91a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a91e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a922:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a929:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a92d:	83 f9 19             	cmp    ecx,0x19
c001a930:	77 37                	ja     c001a969 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a932:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a939:	85 c9                	test   ecx,ecx
c001a93b:	74 2c                	je     c001a969 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a93d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a943:	85 c9                	test   ecx,ecx
c001a945:	74 22                	je     c001a969 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a947:	b8 06 00 00 00       	mov    eax,0x6
c001a94c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a950:	75 17                	jne    c001a969 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a952:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a954:	89 f0                	mov    eax,esi
c001a956:	83 c2 0d             	add    edx,0xd
c001a959:	0f b6 f0             	movzx  esi,al
c001a95c:	0f b6 db             	movzx  ebx,bl
c001a95f:	56                   	push   esi
c001a960:	53                   	push   ebx
c001a961:	52                   	push   edx
c001a962:	51                   	push   ecx
c001a963:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a966:	83 c4 10             	add    esp,0x10
c001a969:	5b                   	pop    ebx
c001a96a:	5e                   	pop    esi
c001a96b:	5f                   	pop    edi
c001a96c:	c3                   	ret    
c001a96d:	90                   	nop

c001a96e <File::exists()>:
c001a96e:	83 ec 0c             	sub    esp,0xc
c001a971:	31 c0                	xor    eax,eax
c001a973:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a977:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a97e:	83 f9 19             	cmp    ecx,0x19
c001a981:	77 24                	ja     c001a9a7 <File::exists()+0x39>
c001a983:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a98a:	85 c9                	test   ecx,ecx
c001a98c:	74 19                	je     c001a9a7 <File::exists()+0x39>
c001a98e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a994:	85 c9                	test   ecx,ecx
c001a996:	74 0f                	je     c001a9a7 <File::exists()+0x39>
c001a998:	83 c2 0d             	add    edx,0xd
c001a99b:	50                   	push   eax
c001a99c:	50                   	push   eax
c001a99d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a99f:	52                   	push   edx
c001a9a0:	51                   	push   ecx
c001a9a1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a9a4:	83 c4 10             	add    esp,0x10
c001a9a7:	83 c4 0c             	add    esp,0xc
c001a9aa:	c3                   	ret    
c001a9ab:	90                   	nop

c001a9ac <File::stat(unsigned long long*, bool*)>:
c001a9ac:	56                   	push   esi
c001a9ad:	53                   	push   ebx
c001a9ae:	50                   	push   eax
c001a9af:	b8 0b 00 00 00       	mov    eax,0xb
c001a9b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a9c7:	83 f9 19             	cmp    ecx,0x19
c001a9ca:	77 3d                	ja     c001aa09 <File::stat(unsigned long long*, bool*)+0x5d>
c001a9cc:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9d3:	85 c9                	test   ecx,ecx
c001a9d5:	74 32                	je     c001aa09 <File::stat(unsigned long long*, bool*)+0x5d>
c001a9d7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a9dd:	85 c9                	test   ecx,ecx
c001a9df:	74 28                	je     c001aa09 <File::stat(unsigned long long*, bool*)+0x5d>
c001a9e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9e7:	74 13                	je     c001a9fc <File::stat(unsigned long long*, bool*)+0x50>
c001a9e9:	83 ec 04             	sub    esp,0x4
c001a9ec:	56                   	push   esi
c001a9ed:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a9f3:	51                   	push   ecx
c001a9f4:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a9f7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a9fa:	eb 0a                	jmp    c001aa06 <File::stat(unsigned long long*, bool*)+0x5a>
c001a9fc:	53                   	push   ebx
c001a9fd:	83 c2 0d             	add    edx,0xd
c001aa00:	56                   	push   esi
c001aa01:	52                   	push   edx
c001aa02:	51                   	push   ecx
c001aa03:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	5a                   	pop    edx
c001aa0a:	5b                   	pop    ebx
c001aa0b:	5e                   	pop    esi
c001aa0c:	c3                   	ret    

c001aa0d <Fs::setcwd(Process*, char*)>:
c001aa0d:	55                   	push   ebp
c001aa0e:	57                   	push   edi
c001aa0f:	56                   	push   esi
c001aa10:	53                   	push   ebx
c001aa11:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aa17:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001aa1e:	6a 00                	push   0x0
c001aa20:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001aa26:	57                   	push   edi
c001aa27:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa2e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001aa32:	56                   	push   esi
c001aa33:	e8 5c f9 ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001aa38:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa3b:	e8 30 5b fe ff       	call   c0000570 <strlen>
c001aa40:	83 c4 10             	add    esp,0x10
c001aa43:	83 f8 02             	cmp    eax,0x2
c001aa46:	77 15                	ja     c001aa5d <Fs::setcwd(Process*, char*)+0x50>
c001aa48:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001aa4d:	83 eb 41             	sub    ebx,0x41
c001aa50:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001aa57:	85 c0                	test   eax,eax
c001aa59:	75 1c                	jne    c001aa77 <Fs::setcwd(Process*, char*)+0x6a>
c001aa5b:	eb 2f                	jmp    c001aa8c <Fs::setcwd(Process*, char*)+0x7f>
c001aa5d:	83 ec 0c             	sub    esp,0xc
c001aa60:	56                   	push   esi
c001aa61:	e8 0a 5b fe ff       	call   c0000570 <strlen>
c001aa66:	83 c4 10             	add    esp,0x10
c001aa69:	83 f8 03             	cmp    eax,0x3
c001aa6c:	75 57                	jne    c001aac5 <Fs::setcwd(Process*, char*)+0xb8>
c001aa6e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001aa73:	75 50                	jne    c001aac5 <Fs::setcwd(Process*, char*)+0xb8>
c001aa75:	eb d1                	jmp    c001aa48 <Fs::setcwd(Process*, char*)+0x3b>
c001aa77:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001aa7e:	75 0c                	jne    c001aa8c <Fs::setcwd(Process*, char*)+0x7f>
c001aa80:	83 ec 0c             	sub    esp,0xc
c001aa83:	50                   	push   eax
c001aa84:	e8 ad 1d 00 00       	call   c001c836 <LogicalDisk::mount()>
c001aa89:	83 c4 10             	add    esp,0x10
c001aa8c:	b8 03 00 00 00       	mov    eax,0x3
c001aa91:	83 fb 19             	cmp    ebx,0x19
c001aa94:	0f 87 c6 00 00 00    	ja     c001ab60 <Fs::setcwd(Process*, char*)+0x153>
c001aa9a:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001aaa1:	b8 05 00 00 00       	mov    eax,0x5
c001aaa6:	85 d2                	test   edx,edx
c001aaa8:	0f 84 b2 00 00 00    	je     c001ab60 <Fs::setcwd(Process*, char*)+0x153>
c001aaae:	b8 06 00 00 00       	mov    eax,0x6
c001aab3:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001aaba:	0f 85 92 00 00 00    	jne    c001ab52 <Fs::setcwd(Process*, char*)+0x145>
c001aac0:	e9 9b 00 00 00       	jmp    c001ab60 <Fs::setcwd(Process*, char*)+0x153>
c001aac5:	83 ec 0c             	sub    esp,0xc
c001aac8:	68 14 01 00 00       	push   0x114
c001aacd:	e8 24 bb ff ff       	call   c00165f6 <malloc>
c001aad2:	83 c4 0c             	add    esp,0xc
c001aad5:	89 c3                	mov    ebx,eax
c001aad7:	55                   	push   ebp
c001aad8:	56                   	push   esi
c001aad9:	50                   	push   eax
c001aada:	e8 ad fb ff ff       	call   c001a68c <File::File(char const*, Process*)>
c001aadf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001aae4:	83 c4 0c             	add    esp,0xc
c001aae7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aaeb:	50                   	push   eax
c001aaec:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaf0:	50                   	push   eax
c001aaf1:	53                   	push   ebx
c001aaf2:	e8 b5 fe ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c001aaf7:	83 c4 10             	add    esp,0x10
c001aafa:	83 f8 02             	cmp    eax,0x2
c001aafd:	74 27                	je     c001ab26 <Fs::setcwd(Process*, char*)+0x119>
c001aaff:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ab04:	75 1c                	jne    c001ab22 <Fs::setcwd(Process*, char*)+0x115>
c001ab06:	b8 02 00 00 00       	mov    eax,0x2
c001ab0b:	85 db                	test   ebx,ebx
c001ab0d:	74 51                	je     c001ab60 <Fs::setcwd(Process*, char*)+0x153>
c001ab0f:	83 ec 0c             	sub    esp,0xc
c001ab12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab14:	53                   	push   ebx
c001ab15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab18:	83 c4 10             	add    esp,0x10
c001ab1b:	b8 02 00 00 00       	mov    eax,0x2
c001ab20:	eb 3e                	jmp    c001ab60 <Fs::setcwd(Process*, char*)+0x153>
c001ab22:	85 c0                	test   eax,eax
c001ab24:	74 1c                	je     c001ab42 <Fs::setcwd(Process*, char*)+0x135>
c001ab26:	b8 01 00 00 00       	mov    eax,0x1
c001ab2b:	85 db                	test   ebx,ebx
c001ab2d:	74 31                	je     c001ab60 <Fs::setcwd(Process*, char*)+0x153>
c001ab2f:	83 ec 0c             	sub    esp,0xc
c001ab32:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab34:	53                   	push   ebx
c001ab35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	b8 01 00 00 00       	mov    eax,0x1
c001ab40:	eb 1e                	jmp    c001ab60 <Fs::setcwd(Process*, char*)+0x153>
c001ab42:	85 db                	test   ebx,ebx
c001ab44:	74 0c                	je     c001ab52 <Fs::setcwd(Process*, char*)+0x145>
c001ab46:	83 ec 0c             	sub    esp,0xc
c001ab49:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab4b:	53                   	push   ebx
c001ab4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab4f:	83 c4 10             	add    esp,0x10
c001ab52:	50                   	push   eax
c001ab53:	50                   	push   eax
c001ab54:	56                   	push   esi
c001ab55:	57                   	push   edi
c001ab56:	e8 e5 5a fe ff       	call   c0000640 <strcpy>
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	31 c0                	xor    eax,eax
c001ab60:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ab66:	5b                   	pop    ebx
c001ab67:	5e                   	pop    esi
c001ab68:	5f                   	pop    edi
c001ab69:	5d                   	pop    ebp
c001ab6a:	c3                   	ret    
c001ab6b:	90                   	nop

c001ab6c <Directory::Directory(char const*, Process*)>:
c001ab6c:	83 ec 0c             	sub    esp,0xc
c001ab6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab73:	83 ec 08             	sub    esp,0x8
c001ab76:	6a 00                	push   0x0
c001ab78:	50                   	push   eax
c001ab79:	e8 80 d1 ff ff       	call   c0017cfe <UnixFile::UnixFile(int)>
c001ab7e:	83 c4 10             	add    esp,0x10
c001ab81:	ba e8 20 03 c0       	mov    edx,0xc00320e8
c001ab86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8a:	89 10                	mov    DWORD PTR [eax],edx
c001ab8c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ab91:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab95:	0f 95 c0             	setne  al
c001ab98:	0f b6 c0             	movzx  eax,al
c001ab9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab9f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001aba5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aba9:	83 c2 0d             	add    edx,0xd
c001abac:	50                   	push   eax
c001abad:	51                   	push   ecx
c001abae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abb2:	52                   	push   edx
c001abb3:	e8 dc f7 ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001abb8:	83 c4 10             	add    esp,0x10
c001abbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbf:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001abc2:	83 e8 41             	sub    eax,0x41
c001abc5:	88 c2                	mov    dl,al
c001abc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcb:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001abd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001abd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abdd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abe3:	0f b6 c0             	movzx  eax,al
c001abe6:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001abed:	85 c0                	test   eax,eax
c001abef:	74 3e                	je     c001ac2f <Directory::Directory(char const*, Process*)+0xc3>
c001abf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abfb:	0f b6 c0             	movzx  eax,al
c001abfe:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001ac05:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ac0b:	85 c0                	test   eax,eax
c001ac0d:	75 20                	jne    c001ac2f <Directory::Directory(char const*, Process*)+0xc3>
c001ac0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac13:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac19:	0f b6 c0             	movzx  eax,al
c001ac1c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001ac23:	83 ec 0c             	sub    esp,0xc
c001ac26:	50                   	push   eax
c001ac27:	e8 0a 1c 00 00       	call   c001c836 <LogicalDisk::mount()>
c001ac2c:	83 c4 10             	add    esp,0x10
c001ac2f:	90                   	nop
c001ac30:	83 c4 0c             	add    esp,0xc
c001ac33:	c3                   	ret    

c001ac34 <Directory::open()>:
c001ac34:	53                   	push   ebx
c001ac35:	b8 0b 00 00 00       	mov    eax,0xb
c001ac3a:	83 ec 08             	sub    esp,0x8
c001ac3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac41:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001ac48:	83 fa 19             	cmp    edx,0x19
c001ac4b:	77 3d                	ja     c001ac8a <Directory::open()+0x56>
c001ac4d:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001ac54:	85 d2                	test   edx,edx
c001ac56:	74 32                	je     c001ac8a <Directory::open()+0x56>
c001ac58:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001ac5e:	85 d2                	test   edx,edx
c001ac60:	74 28                	je     c001ac8a <Directory::open()+0x56>
c001ac62:	b8 06 00 00 00       	mov    eax,0x6
c001ac67:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001ac6b:	75 1d                	jne    c001ac8a <Directory::open()+0x56>
c001ac6d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001ac73:	50                   	push   eax
c001ac74:	8b 02                	mov    eax,DWORD PTR [edx]
c001ac76:	51                   	push   ecx
c001ac77:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001ac7a:	51                   	push   ecx
c001ac7b:	52                   	push   edx
c001ac7c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001ac7f:	83 c4 10             	add    esp,0x10
c001ac82:	85 c0                	test   eax,eax
c001ac84:	75 04                	jne    c001ac8a <Directory::open()+0x56>
c001ac86:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001ac8a:	83 c4 08             	add    esp,0x8
c001ac8d:	5b                   	pop    ebx
c001ac8e:	c3                   	ret    
c001ac8f:	90                   	nop

c001ac90 <Directory::close()>:
c001ac90:	53                   	push   ebx
c001ac91:	b8 0b 00 00 00       	mov    eax,0xb
c001ac96:	83 ec 08             	sub    esp,0x8
c001ac99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac9d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aca4:	83 f9 19             	cmp    ecx,0x19
c001aca7:	77 41                	ja     c001acea <Directory::close()+0x5a>
c001aca9:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001acb0:	85 db                	test   ebx,ebx
c001acb2:	74 36                	je     c001acea <Directory::close()+0x5a>
c001acb4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001acbb:	74 2d                	je     c001acea <Directory::close()+0x5a>
c001acbd:	b8 05 00 00 00       	mov    eax,0x5
c001acc2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001acc6:	74 22                	je     c001acea <Directory::close()+0x5a>
c001acc8:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001accc:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001acd3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001acd9:	53                   	push   ebx
c001acda:	53                   	push   ebx
c001acdb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001acdd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001ace3:	50                   	push   eax
c001ace4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001ace7:	83 c4 10             	add    esp,0x10
c001acea:	83 c4 08             	add    esp,0x8
c001aced:	5b                   	pop    ebx
c001acee:	c3                   	ret    
c001acef:	90                   	nop

c001acf0 <Directory::unlink()>:
c001acf0:	83 ec 0c             	sub    esp,0xc
c001acf3:	b8 0b 00 00 00       	mov    eax,0xb
c001acf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acfc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad03:	83 f9 19             	cmp    ecx,0x19
c001ad06:	77 2f                	ja     c001ad37 <Directory::unlink()+0x47>
c001ad08:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad0f:	85 c9                	test   ecx,ecx
c001ad11:	74 24                	je     c001ad37 <Directory::unlink()+0x47>
c001ad13:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad19:	85 c9                	test   ecx,ecx
c001ad1b:	74 1a                	je     c001ad37 <Directory::unlink()+0x47>
c001ad1d:	b8 06 00 00 00       	mov    eax,0x6
c001ad22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad26:	75 0f                	jne    c001ad37 <Directory::unlink()+0x47>
c001ad28:	83 c2 0d             	add    edx,0xd
c001ad2b:	50                   	push   eax
c001ad2c:	50                   	push   eax
c001ad2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad2f:	52                   	push   edx
c001ad30:	51                   	push   ecx
c001ad31:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001ad34:	83 c4 10             	add    esp,0x10
c001ad37:	83 c4 0c             	add    esp,0xc
c001ad3a:	c3                   	ret    
c001ad3b:	90                   	nop

c001ad3c <Directory::rename(char const*)>:
c001ad3c:	83 ec 0c             	sub    esp,0xc
c001ad3f:	b8 0b 00 00 00       	mov    eax,0xb
c001ad44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad4f:	83 f9 19             	cmp    ecx,0x19
c001ad52:	77 32                	ja     c001ad86 <Directory::rename(char const*)+0x4a>
c001ad54:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad5b:	85 c9                	test   ecx,ecx
c001ad5d:	74 27                	je     c001ad86 <Directory::rename(char const*)+0x4a>
c001ad5f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad65:	85 c9                	test   ecx,ecx
c001ad67:	74 1d                	je     c001ad86 <Directory::rename(char const*)+0x4a>
c001ad69:	b8 06 00 00 00       	mov    eax,0x6
c001ad6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad72:	75 12                	jne    c001ad86 <Directory::rename(char const*)+0x4a>
c001ad74:	83 c2 0d             	add    edx,0xd
c001ad77:	50                   	push   eax
c001ad78:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad7e:	52                   	push   edx
c001ad7f:	51                   	push   ecx
c001ad80:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ad83:	83 c4 10             	add    esp,0x10
c001ad86:	83 c4 0c             	add    esp,0xc
c001ad89:	c3                   	ret    

c001ad8a <Directory::exists()>:
c001ad8a:	83 ec 0c             	sub    esp,0xc
c001ad8d:	31 c0                	xor    eax,eax
c001ad8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad93:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad9a:	83 f9 19             	cmp    ecx,0x19
c001ad9d:	77 24                	ja     c001adc3 <Directory::exists()+0x39>
c001ad9f:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ada6:	85 c9                	test   ecx,ecx
c001ada8:	74 19                	je     c001adc3 <Directory::exists()+0x39>
c001adaa:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adb0:	85 c9                	test   ecx,ecx
c001adb2:	74 0f                	je     c001adc3 <Directory::exists()+0x39>
c001adb4:	83 c2 0d             	add    edx,0xd
c001adb7:	50                   	push   eax
c001adb8:	50                   	push   eax
c001adb9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001adbb:	52                   	push   edx
c001adbc:	51                   	push   ecx
c001adbd:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001adc0:	83 c4 10             	add    esp,0x10
c001adc3:	83 c4 0c             	add    esp,0xc
c001adc6:	c3                   	ret    
c001adc7:	90                   	nop

c001adc8 <Directory::read(dirent*)>:
c001adc8:	83 ec 1c             	sub    esp,0x1c
c001adcb:	b8 0b 00 00 00       	mov    eax,0xb
c001add0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001add4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001addb:	83 f9 19             	cmp    ecx,0x19
c001adde:	77 30                	ja     c001ae10 <Directory::read(dirent*)+0x48>
c001ade0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ade7:	85 c9                	test   ecx,ecx
c001ade9:	74 25                	je     c001ae10 <Directory::read(dirent*)+0x48>
c001adeb:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001adf2:	74 1c                	je     c001ae10 <Directory::read(dirent*)+0x48>
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	8b 02                	mov    eax,DWORD PTR [edx]
c001adf9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001adfd:	51                   	push   ecx
c001adfe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae02:	6a 00                	push   0x0
c001ae04:	68 10 01 00 00       	push   0x110
c001ae09:	52                   	push   edx
c001ae0a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae0d:	83 c4 20             	add    esp,0x20
c001ae10:	83 c4 1c             	add    esp,0x1c
c001ae13:	c3                   	ret    

c001ae14 <Directory::create()>:
c001ae14:	83 ec 0c             	sub    esp,0xc
c001ae17:	b8 0b 00 00 00       	mov    eax,0xb
c001ae1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae27:	83 f9 19             	cmp    ecx,0x19
c001ae2a:	77 2f                	ja     c001ae5b <Directory::create()+0x47>
c001ae2c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ae33:	85 c9                	test   ecx,ecx
c001ae35:	74 24                	je     c001ae5b <Directory::create()+0x47>
c001ae37:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ae3d:	85 c9                	test   ecx,ecx
c001ae3f:	74 1a                	je     c001ae5b <Directory::create()+0x47>
c001ae41:	b8 06 00 00 00       	mov    eax,0x6
c001ae46:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ae4a:	75 0f                	jne    c001ae5b <Directory::create()+0x47>
c001ae4c:	83 c2 0d             	add    edx,0xd
c001ae4f:	50                   	push   eax
c001ae50:	50                   	push   eax
c001ae51:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae53:	52                   	push   edx
c001ae54:	51                   	push   ecx
c001ae55:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ae58:	83 c4 10             	add    esp,0x10
c001ae5b:	83 c4 0c             	add    esp,0xc
c001ae5e:	c3                   	ret    
c001ae5f:	90                   	nop

c001ae60 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae60:	b8 0a 00 00 00       	mov    eax,0xa
c001ae65:	c3                   	ret    
c001ae66:	66 90                	xchg   ax,ax

c001ae68 <Bus::Bus(char const*)>:
c001ae68:	83 ec 0c             	sub    esp,0xc
c001ae6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6f:	83 ec 08             	sub    esp,0x8
c001ae72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae76:	50                   	push   eax
c001ae77:	e8 ec 07 00 00       	call   c001b668 <Device::Device(char const*)>
c001ae7c:	83 c4 10             	add    esp,0x10
c001ae7f:	ba 04 21 03 c0       	mov    edx,0xc0032104
c001ae84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae88:	89 10                	mov    DWORD PTR [eax],edx
c001ae8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ae98:	90                   	nop
c001ae99:	83 c4 0c             	add    esp,0xc
c001ae9c:	c3                   	ret    
c001ae9d:	90                   	nop
c001ae9e:	66 90                	xchg   ax,ax

c001aea0 <Bus::~Bus()>:
c001aea0:	83 ec 0c             	sub    esp,0xc
c001aea3:	ba 04 21 03 c0       	mov    edx,0xc0032104
c001aea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeac:	89 10                	mov    DWORD PTR [eax],edx
c001aeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb2:	83 ec 0c             	sub    esp,0xc
c001aeb5:	50                   	push   eax
c001aeb6:	e8 4d 05 00 00       	call   c001b408 <Device::~Device()>
c001aebb:	83 c4 10             	add    esp,0x10
c001aebe:	90                   	nop
c001aebf:	83 c4 0c             	add    esp,0xc
c001aec2:	c3                   	ret    
c001aec3:	90                   	nop

c001aec4 <Bus::~Bus()>:
c001aec4:	83 ec 0c             	sub    esp,0xc
c001aec7:	83 ec 0c             	sub    esp,0xc
c001aeca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aece:	e8 cd ff ff ff       	call   c001aea0 <Bus::~Bus()>
c001aed3:	83 c4 10             	add    esp,0x10
c001aed6:	83 ec 08             	sub    esp,0x8
c001aed9:	68 58 01 00 00       	push   0x158
c001aede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aee2:	e8 71 e4 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001aee7:	83 c4 10             	add    esp,0x10
c001aeea:	83 c4 0c             	add    esp,0xc
c001aeed:	c3                   	ret    

c001aeee <beepThread(void*)>:
c001aeee:	83 ec 0c             	sub    esp,0xc
c001aef1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001aef6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aefa:	48                   	dec    eax
c001aefb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001af00:	75 01                	jne    c001af03 <beepThread(void*)+0x15>
c001af02:	fb                   	sti    
c001af03:	83 ec 0c             	sub    esp,0xc
c001af06:	6b c2 0a             	imul   eax,edx,0xa
c001af09:	50                   	push   eax
c001af0a:	e8 7d a7 00 00       	call   c002568c <milliTenthSleep(unsigned int)>
c001af0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af16:	e8 78 c5 00 00       	call   c0027493 <HalMakeBeep(int)>
c001af1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001af23:	83 c4 1c             	add    esp,0x1c
c001af26:	e9 45 a6 00 00       	jmp    c0025570 <blockTask(TaskState)>

c001af2b <Krnl::beep(int, int, bool)>:
c001af2b:	56                   	push   esi
c001af2c:	53                   	push   ebx
c001af2d:	83 ec 10             	sub    esp,0x10
c001af30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af3c:	e8 52 c5 00 00       	call   c0027493 <HalMakeBeep(int)>
c001af41:	83 c4 10             	add    esp,0x10
c001af44:	89 f0                	mov    eax,esi
c001af46:	84 c0                	test   al,al
c001af48:	74 1e                	je     c001af68 <Krnl::beep(int, int, bool)+0x3d>
c001af4a:	83 ec 0c             	sub    esp,0xc
c001af4d:	6b db 0a             	imul   ebx,ebx,0xa
c001af50:	53                   	push   ebx
c001af51:	e8 36 a7 00 00       	call   c002568c <milliTenthSleep(unsigned int)>
c001af56:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af5e:	83 c4 14             	add    esp,0x14
c001af61:	5b                   	pop    ebx
c001af62:	5e                   	pop    esi
c001af63:	e9 2b c5 00 00       	jmp    c0027493 <HalMakeBeep(int)>
c001af68:	68 e6 00 00 00       	push   0xe6
c001af6d:	53                   	push   ebx
c001af6e:	68 ee ae 01 c0       	push   0xc001aeee
c001af73:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001af79:	e8 e6 a2 00 00       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c001af7e:	83 c4 14             	add    esp,0x14
c001af81:	5b                   	pop    ebx
c001af82:	5e                   	pop    esi
c001af83:	c3                   	ret    

c001af84 <User::loadClockSettings(int)>:
c001af84:	53                   	push   ebx
c001af85:	83 ec 14             	sub    esp,0x14
c001af88:	68 14 01 00 00       	push   0x114
c001af8d:	e8 64 b6 ff ff       	call   c00165f6 <malloc>
c001af92:	83 c4 0c             	add    esp,0xc
c001af95:	89 c3                	mov    ebx,eax
c001af97:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001af9d:	68 28 21 03 c0       	push   0xc0032128
c001afa2:	50                   	push   eax
c001afa3:	e8 e4 f6 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c001afa8:	58                   	pop    eax
c001afa9:	5a                   	pop    edx
c001afaa:	6a 01                	push   0x1
c001afac:	53                   	push   ebx
c001afad:	e8 f8 f6 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c001afb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afb5:	e8 4e f7 ff ff       	call   c001a708 <File::close()>
c001afba:	83 c4 10             	add    esp,0x10
c001afbd:	85 db                	test   ebx,ebx
c001afbf:	74 0f                	je     c001afd0 <User::loadClockSettings(int)+0x4c>
c001afc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afc3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001afc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001afca:	83 c4 08             	add    esp,0x8
c001afcd:	5b                   	pop    ebx
c001afce:	ff e0                	jmp    eax
c001afd0:	83 c4 08             	add    esp,0x8
c001afd3:	5b                   	pop    ebx
c001afd4:	c3                   	ret    
c001afd5:	90                   	nop

c001afd6 <Clock::Clock(char const*)>:
c001afd6:	83 ec 0c             	sub    esp,0xc
c001afd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afdd:	83 ec 08             	sub    esp,0x8
c001afe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afe4:	50                   	push   eax
c001afe5:	e8 7e 06 00 00       	call   c001b668 <Device::Device(char const*)>
c001afea:	83 c4 10             	add    esp,0x10
c001afed:	ba 50 21 03 c0       	mov    edx,0xc0032150
c001aff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff6:	89 10                	mov    DWORD PTR [eax],edx
c001aff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001affc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001b006:	90                   	nop
c001b007:	83 c4 0c             	add    esp,0xc
c001b00a:	c3                   	ret    
c001b00b:	90                   	nop

c001b00c <Clock::~Clock()>:
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	ba 50 21 03 c0       	mov    edx,0xc0032150
c001b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b018:	89 10                	mov    DWORD PTR [eax],edx
c001b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b01e:	83 ec 0c             	sub    esp,0xc
c001b021:	50                   	push   eax
c001b022:	e8 e1 03 00 00       	call   c001b408 <Device::~Device()>
c001b027:	83 c4 10             	add    esp,0x10
c001b02a:	90                   	nop
c001b02b:	83 c4 0c             	add    esp,0xc
c001b02e:	c3                   	ret    
c001b02f:	90                   	nop

c001b030 <Clock::~Clock()>:
c001b030:	83 ec 0c             	sub    esp,0xc
c001b033:	83 ec 0c             	sub    esp,0xc
c001b036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b03a:	e8 cd ff ff ff       	call   c001b00c <Clock::~Clock()>
c001b03f:	83 c4 10             	add    esp,0x10
c001b042:	83 ec 08             	sub    esp,0x8
c001b045:	68 58 01 00 00       	push   0x158
c001b04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b04e:	e8 05 e3 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001b053:	83 c4 10             	add    esp,0x10
c001b056:	83 c4 0c             	add    esp,0xc
c001b059:	c3                   	ret    

c001b05a <Clock::timeInSecondsLocal()>:
c001b05a:	53                   	push   ebx
c001b05b:	83 ec 14             	sub    esp,0x14
c001b05e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b062:	8b 10                	mov    edx,DWORD PTR [eax]
c001b064:	50                   	push   eax
c001b065:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b068:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b06f:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b075:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b07b:	89 cb                	mov    ebx,ecx
c001b07d:	c1 fb 1f             	sar    ebx,0x1f
c001b080:	01 c8                	add    eax,ecx
c001b082:	11 da                	adc    edx,ebx
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	31 c9                	xor    ecx,ecx
c001b089:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b090:	74 05                	je     c001b097 <Clock::timeInSecondsLocal()+0x3d>
c001b092:	b9 08 07 00 00       	mov    ecx,0x708
c001b097:	31 db                	xor    ebx,ebx
c001b099:	01 c8                	add    eax,ecx
c001b09b:	11 da                	adc    edx,ebx
c001b09d:	83 c4 08             	add    esp,0x8
c001b0a0:	5b                   	pop    ebx
c001b0a1:	c3                   	ret    

c001b0a2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001b0a2:	57                   	push   edi
c001b0a3:	56                   	push   esi
c001b0a4:	53                   	push   ebx
c001b0a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b0af:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0b3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001b0b6:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001b0bd:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001b0c3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001b0c9:	99                   	cdq    
c001b0ca:	29 c6                	sub    esi,eax
c001b0cc:	19 d7                	sbb    edi,edx
c001b0ce:	89 f0                	mov    eax,esi
c001b0d0:	89 fa                	mov    edx,edi
c001b0d2:	31 f6                	xor    esi,esi
c001b0d4:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b0db:	74 05                	je     c001b0e2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001b0dd:	be 08 07 00 00       	mov    esi,0x708
c001b0e2:	31 ff                	xor    edi,edi
c001b0e4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b0e8:	29 f0                	sub    eax,esi
c001b0ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0ee:	19 fa                	sbb    edx,edi
c001b0f0:	89 d8                	mov    eax,ebx
c001b0f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b0f6:	5b                   	pop    ebx
c001b0f7:	5e                   	pop    esi
c001b0f8:	5f                   	pop    edi
c001b0f9:	ff e0                	jmp    eax

c001b0fb <datetimeToSeconds(datetime_t)>:
c001b0fb:	55                   	push   ebp
c001b0fc:	57                   	push   edi
c001b0fd:	56                   	push   esi
c001b0fe:	53                   	push   ebx
c001b0ff:	83 ec 0c             	sub    esp,0xc
c001b102:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b106:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b10a:	89 d6                	mov    esi,edx
c001b10c:	0f b6 c7             	movzx  eax,bh
c001b10f:	c1 ee 10             	shr    esi,0x10
c001b112:	6b e8 3c             	imul   ebp,eax,0x3c
c001b115:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001b11b:	0f b6 ce             	movzx  ecx,dh
c001b11e:	89 df                	mov    edi,ebx
c001b120:	49                   	dec    ecx
c001b121:	c1 ef 10             	shr    edi,0x10
c001b124:	0f b6 db             	movzx  ebx,bl
c001b127:	89 f8                	mov    eax,edi
c001b129:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001b12f:	0f b6 f8             	movzx  edi,al
c001b132:	0f b6 d2             	movzx  edx,dl
c001b135:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001b139:	01 d8                	add    eax,ebx
c001b13b:	0f b7 de             	movzx  ebx,si
c001b13e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b141:	c1 f8 1f             	sar    eax,0x1f
c001b144:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b148:	0f b6 c1             	movzx  eax,cl
c001b14b:	8b 0c 85 a0 21 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcde60]
c001b152:	83 f8 01             	cmp    eax,0x1
c001b155:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001b159:	76 27                	jbe    c001b182 <datetimeToSeconds(datetime_t)+0x87>
c001b15b:	83 e6 03             	and    esi,0x3
c001b15e:	75 22                	jne    c001b182 <datetimeToSeconds(datetime_t)+0x87>
c001b160:	31 d2                	xor    edx,edx
c001b162:	be 64 00 00 00       	mov    esi,0x64
c001b167:	89 d8                	mov    eax,ebx
c001b169:	f7 f6                	div    esi
c001b16b:	85 d2                	test   edx,edx
c001b16d:	75 12                	jne    c001b181 <datetimeToSeconds(datetime_t)+0x86>
c001b16f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001b175:	be 90 01 00 00       	mov    esi,0x190
c001b17a:	99                   	cdq    
c001b17b:	f7 fe                	idiv   esi
c001b17d:	85 d2                	test   edx,edx
c001b17f:	75 01                	jne    c001b182 <datetimeToSeconds(datetime_t)+0x87>
c001b181:	41                   	inc    ecx
c001b182:	83 fb 46             	cmp    ebx,0x46
c001b185:	76 48                	jbe    c001b1cf <datetimeToSeconds(datetime_t)+0xd4>
c001b187:	be 46 00 00 00       	mov    esi,0x46
c001b18c:	bf 64 00 00 00       	mov    edi,0x64
c001b191:	bd 90 01 00 00       	mov    ebp,0x190
c001b196:	b8 6d 01 00 00       	mov    eax,0x16d
c001b19b:	f7 c6 03 00 00 00    	test   esi,0x3
c001b1a1:	75 23                	jne    c001b1c6 <datetimeToSeconds(datetime_t)+0xcb>
c001b1a3:	89 f0                	mov    eax,esi
c001b1a5:	99                   	cdq    
c001b1a6:	f7 ff                	idiv   edi
c001b1a8:	b8 6e 01 00 00       	mov    eax,0x16e
c001b1ad:	85 d2                	test   edx,edx
c001b1af:	75 15                	jne    c001b1c6 <datetimeToSeconds(datetime_t)+0xcb>
c001b1b1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b1b7:	99                   	cdq    
c001b1b8:	f7 fd                	idiv   ebp
c001b1ba:	83 fa 01             	cmp    edx,0x1
c001b1bd:	19 c0                	sbb    eax,eax
c001b1bf:	f7 d0                	not    eax
c001b1c1:	05 6e 01 00 00       	add    eax,0x16e
c001b1c6:	01 c1                	add    ecx,eax
c001b1c8:	46                   	inc    esi
c001b1c9:	39 de                	cmp    esi,ebx
c001b1cb:	7c c9                	jl     c001b196 <datetimeToSeconds(datetime_t)+0x9b>
c001b1cd:	eb 34                	jmp    c001b203 <datetimeToSeconds(datetime_t)+0x108>
c001b1cf:	74 32                	je     c001b203 <datetimeToSeconds(datetime_t)+0x108>
c001b1d1:	b8 45 00 00 00       	mov    eax,0x45
c001b1d6:	89 c2                	mov    edx,eax
c001b1d8:	83 e2 03             	and    edx,0x3
c001b1db:	39 d8                	cmp    eax,ebx
c001b1dd:	7e 0f                	jle    c001b1ee <datetimeToSeconds(datetime_t)+0xf3>
c001b1df:	83 fa 01             	cmp    edx,0x1
c001b1e2:	19 d2                	sbb    edx,edx
c001b1e4:	48                   	dec    eax
c001b1e5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b1ec:	eb e8                	jmp    c001b1d6 <datetimeToSeconds(datetime_t)+0xdb>
c001b1ee:	b8 6d 01 00 00       	mov    eax,0x16d
c001b1f3:	85 d2                	test   edx,edx
c001b1f5:	75 0a                	jne    c001b201 <datetimeToSeconds(datetime_t)+0x106>
c001b1f7:	83 fb 01             	cmp    ebx,0x1
c001b1fa:	19 c0                	sbb    eax,eax
c001b1fc:	05 6e 01 00 00       	add    eax,0x16e
c001b201:	29 c1                	sub    ecx,eax
c001b203:	b8 80 51 01 00       	mov    eax,0x15180
c001b208:	f7 e9                	imul   ecx
c001b20a:	03 04 24             	add    eax,DWORD PTR [esp]
c001b20d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b211:	83 c4 0c             	add    esp,0xc
c001b214:	5b                   	pop    ebx
c001b215:	5e                   	pop    esi
c001b216:	5f                   	pop    edi
c001b217:	5d                   	pop    ebp
c001b218:	c3                   	ret    
c001b219:	90                   	nop

c001b21a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b21a:	57                   	push   edi
c001b21b:	56                   	push   esi
c001b21c:	53                   	push   ebx
c001b21d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b221:	8b 06                	mov    eax,DWORD PTR [esi]
c001b223:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b226:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b22a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b22e:	e8 c8 fe ff ff       	call   c001b0fb <datetimeToSeconds(datetime_t)>
c001b233:	59                   	pop    ecx
c001b234:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b23b:	5b                   	pop    ebx
c001b23c:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b242:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b248:	89 cb                	mov    ebx,ecx
c001b24a:	c1 fb 1f             	sar    ebx,0x1f
c001b24d:	29 c8                	sub    eax,ecx
c001b24f:	19 da                	sbb    edx,ebx
c001b251:	31 c9                	xor    ecx,ecx
c001b253:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b25a:	74 05                	je     c001b261 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b25c:	b9 08 07 00 00       	mov    ecx,0x708
c001b261:	31 db                	xor    ebx,ebx
c001b263:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b267:	29 c8                	sub    eax,ecx
c001b269:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b26d:	19 da                	sbb    edx,ebx
c001b26f:	89 f8                	mov    eax,edi
c001b271:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b275:	5b                   	pop    ebx
c001b276:	5e                   	pop    esi
c001b277:	5f                   	pop    edi
c001b278:	ff e0                	jmp    eax

c001b27a <secondsToDatetime(unsigned long long)>:
c001b27a:	55                   	push   ebp
c001b27b:	57                   	push   edi
c001b27c:	56                   	push   esi
c001b27d:	53                   	push   ebx
c001b27e:	83 ec 1c             	sub    esp,0x1c
c001b281:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b285:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b289:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b28d:	6a 00                	push   0x0
c001b28f:	68 80 51 01 00       	push   0x15180
c001b294:	55                   	push   ebp
c001b295:	57                   	push   edi
c001b296:	e8 15 36 01 00       	call   c002e8b0 <__udivdi3>
c001b29b:	83 c4 10             	add    esp,0x10
c001b29e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b2a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2a8:	6a 00                	push   0x0
c001b2aa:	68 80 51 01 00       	push   0x15180
c001b2af:	55                   	push   ebp
c001b2b0:	57                   	push   edi
c001b2b1:	bf 10 0e 00 00       	mov    edi,0xe10
c001b2b6:	e8 f5 36 01 00       	call   c002e9b0 <__umoddi3>
c001b2bb:	83 c4 10             	add    esp,0x10
c001b2be:	99                   	cdq    
c001b2bf:	f7 ff                	idiv   edi
c001b2c1:	bf 3c 00 00 00       	mov    edi,0x3c
c001b2c6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b2c9:	89 d0                	mov    eax,edx
c001b2cb:	99                   	cdq    
c001b2cc:	f7 ff                	idiv   edi
c001b2ce:	85 db                	test   ebx,ebx
c001b2d0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b2d3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b2d6:	79 11                	jns    c001b2e9 <secondsToDatetime(unsigned long long)+0x6f>
c001b2d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2dc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b2e2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b2e7:	eb 07                	jmp    c001b2f0 <secondsToDatetime(unsigned long long)+0x76>
c001b2e9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b2ee:	89 d8                	mov    eax,ebx
c001b2f0:	bf b4 05 00 00       	mov    edi,0x5b4
c001b2f5:	99                   	cdq    
c001b2f6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b2fb:	f7 f9                	idiv   ecx
c001b2fd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b302:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b306:	31 d2                	xor    edx,edx
c001b308:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b310:	01 c3                	add    ebx,eax
c001b312:	89 d8                	mov    eax,ebx
c001b314:	f7 f1                	div    ecx
c001b316:	31 d2                	xor    edx,edx
c001b318:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b31b:	89 d8                	mov    eax,ebx
c001b31d:	f7 f7                	div    edi
c001b31f:	31 d2                	xor    edx,edx
c001b321:	29 c1                	sub    ecx,eax
c001b323:	89 d8                	mov    eax,ebx
c001b325:	f7 f5                	div    ebp
c001b327:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b32c:	29 c1                	sub    ecx,eax
c001b32e:	31 d2                	xor    edx,edx
c001b330:	89 c8                	mov    eax,ecx
c001b332:	f7 f5                	div    ebp
c001b334:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b339:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b33d:	31 d2                	xor    edx,edx
c001b33f:	89 c8                	mov    eax,ecx
c001b341:	f7 f5                	div    ebp
c001b343:	31 d2                	xor    edx,edx
c001b345:	01 c3                	add    ebx,eax
c001b347:	89 c8                	mov    eax,ecx
c001b349:	f7 f7                	div    edi
c001b34b:	bf 99 00 00 00       	mov    edi,0x99
c001b350:	29 c3                	sub    ebx,eax
c001b352:	31 d2                	xor    edx,edx
c001b354:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b35c:	29 c3                	sub    ebx,eax
c001b35e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b361:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b364:	bb 05 00 00 00       	mov    ebx,0x5
c001b369:	83 c1 02             	add    ecx,0x2
c001b36c:	89 c8                	mov    eax,ecx
c001b36e:	f7 f7                	div    edi
c001b370:	31 d2                	xor    edx,edx
c001b372:	89 c7                	mov    edi,eax
c001b374:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b37a:	83 c0 02             	add    eax,0x2
c001b37d:	f7 f3                	div    ebx
c001b37f:	89 eb                	mov    ebx,ebp
c001b381:	29 c3                	sub    ebx,eax
c001b383:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b389:	88 1e                	mov    BYTE PTR [esi],bl
c001b38b:	19 c0                	sbb    eax,eax
c001b38d:	31 d2                	xor    edx,edx
c001b38f:	83 e0 0c             	and    eax,0xc
c001b392:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b396:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b39e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b3a2:	83 f9 01             	cmp    ecx,0x1
c001b3a5:	0f 96 c2             	setbe  dl
c001b3a8:	41                   	inc    ecx
c001b3a9:	01 d0                	add    eax,edx
c001b3ab:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b3ae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b3b2:	83 c4 1c             	add    esp,0x1c
c001b3b5:	89 f0                	mov    eax,esi
c001b3b7:	5b                   	pop    ebx
c001b3b8:	5e                   	pop    esi
c001b3b9:	5f                   	pop    edi
c001b3ba:	5d                   	pop    ebp
c001b3bb:	c2 04 00             	ret    0x4

c001b3be <Clock::timeInDatetimeLocal()>:
c001b3be:	53                   	push   ebx
c001b3bf:	83 ec 14             	sub    esp,0x14
c001b3c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b3ca:	e8 8b fc ff ff       	call   c001b05a <Clock::timeInSecondsLocal()>
c001b3cf:	83 c4 0c             	add    esp,0xc
c001b3d2:	52                   	push   edx
c001b3d3:	50                   	push   eax
c001b3d4:	53                   	push   ebx
c001b3d5:	e8 a0 fe ff ff       	call   c001b27a <secondsToDatetime(unsigned long long)>
c001b3da:	89 d8                	mov    eax,ebx
c001b3dc:	83 c4 14             	add    esp,0x14
c001b3df:	5b                   	pop    ebx
c001b3e0:	c2 04 00             	ret    0x4
c001b3e3:	90                   	nop

c001b3e4 <Device::hibernate()>:
c001b3e4:	c3                   	ret    
c001b3e5:	90                   	nop

c001b3e6 <Device::wake()>:
c001b3e6:	c3                   	ret    
c001b3e7:	90                   	nop

c001b3e8 <Device::detect()>:
c001b3e8:	c3                   	ret    
c001b3e9:	90                   	nop

c001b3ea <Device::disableLegacy()>:
c001b3ea:	c3                   	ret    
c001b3eb:	90                   	nop

c001b3ec <Device::powerSaving(PowerSavingLevel)>:
c001b3ec:	c3                   	ret    
c001b3ed:	90                   	nop

c001b3ee <DriverlessDevice::close(int, int, void*)>:
c001b3ee:	31 c0                	xor    eax,eax
c001b3f0:	c3                   	ret    
c001b3f1:	90                   	nop

c001b3f2 <DriverlessDevice::detect()>:
c001b3f2:	c3                   	ret    
c001b3f3:	90                   	nop

c001b3f4 <DriverlessDevice::open(int, int, void*)>:
c001b3f4:	83 ec 18             	sub    esp,0x18
c001b3f7:	68 d0 21 03 c0       	push   0xc00321d0
c001b3fc:	e8 9d 50 00 00       	call   c002049e <KePanic(char const*)>
c001b401:	83 c8 ff             	or     eax,0xffffffff
c001b404:	83 c4 1c             	add    esp,0x1c
c001b407:	c3                   	ret    

c001b408 <Device::~Device()>:
c001b408:	ba 3c 22 03 c0       	mov    edx,0xc003223c
c001b40d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b411:	89 10                	mov    DWORD PTR [eax],edx
c001b413:	90                   	nop
c001b414:	c3                   	ret    
c001b415:	90                   	nop

c001b416 <Device::~Device()>:
c001b416:	83 ec 0c             	sub    esp,0xc
c001b419:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b41d:	e8 e6 ff ff ff       	call   c001b408 <Device::~Device()>
c001b422:	83 c4 04             	add    esp,0x4
c001b425:	83 ec 08             	sub    esp,0x8
c001b428:	68 58 01 00 00       	push   0x158
c001b42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b431:	e8 22 df ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001b436:	83 c4 10             	add    esp,0x10
c001b439:	83 c4 0c             	add    esp,0xc
c001b43c:	c3                   	ret    
c001b43d:	90                   	nop

c001b43e <Device::findAndLoadDriver()>:
c001b43e:	c7 44 24 04 ee 21 03 c0 	mov    DWORD PTR [esp+0x4],0xc00321ee
c001b446:	e9 3a e0 ff ff       	jmp    c0019485 <Dbg::kprintf(char const*, ...)>
c001b44b:	90                   	nop

c001b44c <Device::preOpenPCI(PCIDeviceInfo)>:
c001b44c:	57                   	push   edi
c001b44d:	b9 09 00 00 00       	mov    ecx,0x9
c001b452:	56                   	push   esi
c001b453:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b457:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b45b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b465:	81 c7 18 01 00 00    	add    edi,0x118
c001b46b:	fc                   	cld    
c001b46c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b46e:	5e                   	pop    esi
c001b46f:	5f                   	pop    edi
c001b470:	c3                   	ret    
c001b471:	90                   	nop

c001b472 <Device::preOpenACPI(void*, char*, char*)>:
c001b472:	57                   	push   edi
c001b473:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b478:	56                   	push   esi
c001b479:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b47d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b481:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b48b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b491:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b497:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b49b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b49d:	b9 0e 00 00 00       	mov    ecx,0xe
c001b4a2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b4a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b4ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b4ae:	5e                   	pop    esi
c001b4af:	5f                   	pop    edi
c001b4b0:	c3                   	ret    
c001b4b1:	90                   	nop

c001b4b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b4b2:	53                   	push   ebx
c001b4b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b4b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b4bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b4c3:	0f b6 c0             	movzx  eax,al
c001b4c6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b4ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b4ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b4d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b4d6:	5b                   	pop    ebx
c001b4d7:	e9 c0 05 00 00       	jmp    c001ba9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b4dc <Device::getParent()>:
c001b4dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4e0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b4e6:	c3                   	ret    
c001b4e7:	90                   	nop

c001b4e8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b4e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b4f0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b4f5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b4f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b4fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b501:	e9 fe 06 00 00       	jmp    c001bc04 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b506 <Device::addChild(Device*)>:
c001b506:	53                   	push   ebx
c001b507:	83 ec 08             	sub    esp,0x8
c001b50a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b50e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b512:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b518:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b51e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b520:	85 d2                	test   edx,edx
c001b522:	74 04                	je     c001b528 <Device::addChild(Device*)+0x22>
c001b524:	89 d3                	mov    ebx,edx
c001b526:	eb f6                	jmp    c001b51e <Device::addChild(Device*)+0x18>
c001b528:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b52b:	83 ec 0c             	sub    esp,0xc
c001b52e:	6a 08                	push   0x8
c001b530:	e8 c1 b0 ff ff       	call   c00165f6 <malloc>
c001b535:	89 03                	mov    DWORD PTR [ebx],eax
c001b537:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b53d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b544:	83 c4 18             	add    esp,0x18
c001b547:	5b                   	pop    ebx
c001b548:	c3                   	ret    
c001b549:	90                   	nop

c001b54a <Device::removeAllChildren()>:
c001b54a:	56                   	push   esi
c001b54b:	53                   	push   ebx
c001b54c:	52                   	push   edx
c001b54d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b551:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b557:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b55a:	74 17                	je     c001b573 <Device::removeAllChildren()+0x29>
c001b55c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b55f:	85 c0                	test   eax,eax
c001b561:	74 0c                	je     c001b56f <Device::removeAllChildren()+0x25>
c001b563:	83 ec 0c             	sub    esp,0xc
c001b566:	8b 10                	mov    edx,DWORD PTR [eax]
c001b568:	50                   	push   eax
c001b569:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b56c:	83 c4 10             	add    esp,0x10
c001b56f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b571:	eb e4                	jmp    c001b557 <Device::removeAllChildren()+0xd>
c001b573:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b579:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b57f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b585:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b58c:	58                   	pop    eax
c001b58d:	5b                   	pop    ebx
c001b58e:	5e                   	pop    esi
c001b58f:	c3                   	ret    

c001b590 <Device::hibernateAll()>:
c001b590:	53                   	push   ebx
c001b591:	83 ec 14             	sub    esp,0x14
c001b594:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b598:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b59a:	53                   	push   ebx
c001b59b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b59e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5a4:	83 c4 10             	add    esp,0x10
c001b5a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5aa:	74 0f                	je     c001b5bb <Device::hibernateAll()+0x2b>
c001b5ac:	83 ec 0c             	sub    esp,0xc
c001b5af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5b2:	e8 d9 ff ff ff       	call   c001b590 <Device::hibernateAll()>
c001b5b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5b9:	eb e9                	jmp    c001b5a4 <Device::hibernateAll()+0x14>
c001b5bb:	83 c4 08             	add    esp,0x8
c001b5be:	5b                   	pop    ebx
c001b5bf:	c3                   	ret    

c001b5c0 <Device::wakeAll()>:
c001b5c0:	53                   	push   ebx
c001b5c1:	83 ec 14             	sub    esp,0x14
c001b5c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b5c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5ca:	53                   	push   ebx
c001b5cb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b5ce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5d4:	83 c4 10             	add    esp,0x10
c001b5d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5da:	74 0f                	je     c001b5eb <Device::wakeAll()+0x2b>
c001b5dc:	83 ec 0c             	sub    esp,0xc
c001b5df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5e2:	e8 d9 ff ff ff       	call   c001b5c0 <Device::wakeAll()>
c001b5e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5e9:	eb e9                	jmp    c001b5d4 <Device::wakeAll()+0x14>
c001b5eb:	83 c4 08             	add    esp,0x8
c001b5ee:	5b                   	pop    ebx
c001b5ef:	c3                   	ret    

c001b5f0 <Device::detectAll()>:
c001b5f0:	53                   	push   ebx
c001b5f1:	83 ec 14             	sub    esp,0x14
c001b5f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b5f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5fa:	53                   	push   ebx
c001b5fb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b5fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b60a:	74 0f                	je     c001b61b <Device::detectAll()+0x2b>
c001b60c:	83 ec 0c             	sub    esp,0xc
c001b60f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b612:	e8 d9 ff ff ff       	call   c001b5f0 <Device::detectAll()>
c001b617:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b619:	eb e9                	jmp    c001b604 <Device::detectAll()+0x14>
c001b61b:	83 c4 08             	add    esp,0x8
c001b61e:	5b                   	pop    ebx
c001b61f:	c3                   	ret    

c001b620 <Device::disableLegacyAll()>:
c001b620:	c3                   	ret    
c001b621:	90                   	nop

c001b622 <Device::loadDriversForAll()>:
c001b622:	c3                   	ret    
c001b623:	90                   	nop

c001b624 <Device::powerSavingAll(PowerSavingLevel)>:
c001b624:	56                   	push   esi
c001b625:	53                   	push   ebx
c001b626:	83 ec 0c             	sub    esp,0xc
c001b629:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b62d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b631:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b633:	56                   	push   esi
c001b634:	53                   	push   ebx
c001b635:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b638:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b63e:	83 c4 10             	add    esp,0x10
c001b641:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b644:	74 0f                	je     c001b655 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b646:	52                   	push   edx
c001b647:	52                   	push   edx
c001b648:	56                   	push   esi
c001b649:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b64c:	e8 d3 ff ff ff       	call   c001b624 <Device::powerSavingAll(PowerSavingLevel)>
c001b651:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b653:	eb e9                	jmp    c001b63e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b655:	58                   	pop    eax
c001b656:	5b                   	pop    ebx
c001b657:	5e                   	pop    esi
c001b658:	c3                   	ret    
c001b659:	90                   	nop

c001b65a <Device::setName(char const*)>:
c001b65a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b662:	e9 d9 4f fe ff       	jmp    c0000640 <strcpy>
c001b667:	90                   	nop

c001b668 <Device::Device(char const*)>:
c001b668:	83 ec 1c             	sub    esp,0x1c
c001b66b:	ba 3c 22 03 c0       	mov    edx,0xc003223c
c001b670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b674:	89 10                	mov    DWORD PTR [eax],edx
c001b676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b67a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b688:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b696:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b6a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6a4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b6ae:	83 ec 08             	sub    esp,0x8
c001b6b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6b9:	e8 9c ff ff ff       	call   c001b65a <Device::setName(char const*)>
c001b6be:	83 c4 10             	add    esp,0x10
c001b6c1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b6c9:	83 ec 0c             	sub    esp,0xc
c001b6cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b6d0:	e8 21 af ff ff       	call   c00165f6 <malloc>
c001b6d5:	83 c4 10             	add    esp,0x10
c001b6d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b6e9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b6ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b6f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b703:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b709:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b714:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b71f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b72a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b738:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b746:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b754:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b75e:	90                   	nop
c001b75f:	83 c4 1c             	add    esp,0x1c
c001b762:	c3                   	ret    
c001b763:	90                   	nop

c001b764 <Device::getName()>:
c001b764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b768:	05 d0 00 00 00       	add    eax,0xd0
c001b76d:	c3                   	ret    

c001b76e <Device::closeAll()>:
c001b76e:	53                   	push   ebx
c001b76f:	83 ec 08             	sub    esp,0x8
c001b772:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b776:	53                   	push   ebx
c001b777:	e8 e8 ff ff ff       	call   c001b764 <Device::getName()>
c001b77c:	52                   	push   edx
c001b77d:	50                   	push   eax
c001b77e:	68 28 22 03 c0       	push   0xc0032228
c001b783:	e8 fd dc ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001b788:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b78a:	6a 00                	push   0x0
c001b78c:	6a 00                	push   0x0
c001b78e:	6a 00                	push   0x0
c001b790:	53                   	push   ebx
c001b791:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b794:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b79a:	83 c4 20             	add    esp,0x20
c001b79d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b7a0:	74 12                	je     c001b7b4 <Device::closeAll()+0x46>
c001b7a2:	83 ec 0c             	sub    esp,0xc
c001b7a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b7a8:	e8 c1 ff ff ff       	call   c001b76e <Device::closeAll()>
c001b7ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	eb e9                	jmp    c001b79d <Device::closeAll()+0x2f>
c001b7b4:	83 c4 08             	add    esp,0x8
c001b7b7:	5b                   	pop    ebx
c001b7b8:	c3                   	ret    
c001b7b9:	90                   	nop

c001b7ba <DriverlessDevice::DriverlessDevice(char const*)>:
c001b7ba:	83 ec 0c             	sub    esp,0xc
c001b7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7c1:	83 ec 08             	sub    esp,0x8
c001b7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7c8:	50                   	push   eax
c001b7c9:	e8 9a fe ff ff       	call   c001b668 <Device::Device(char const*)>
c001b7ce:	83 c4 10             	add    esp,0x10
c001b7d1:	ba 68 22 03 c0       	mov    edx,0xc0032268
c001b7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7da:	89 10                	mov    DWORD PTR [eax],edx
c001b7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b7ea:	90                   	nop
c001b7eb:	83 c4 0c             	add    esp,0xc
c001b7ee:	c3                   	ret    
c001b7ef:	90                   	nop

c001b7f0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b7f0:	57                   	push   edi
c001b7f1:	56                   	push   esi
c001b7f2:	53                   	push   ebx
c001b7f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b7fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b7ff:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b805:	75 0c                	jne    c001b813 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b807:	52                   	push   edx
c001b808:	52                   	push   edx
c001b809:	53                   	push   ebx
c001b80a:	56                   	push   esi
c001b80b:	e8 52 35 01 00       	call   c002ed62 <LinkedList<Device>::addElement(Device*)>
c001b810:	83 c4 10             	add    esp,0x10
c001b813:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b819:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b81c:	74 12                	je     c001b830 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b81e:	50                   	push   eax
c001b81f:	57                   	push   edi
c001b820:	56                   	push   esi
c001b821:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b824:	e8 c7 ff ff ff       	call   c001b7f0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b829:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b82b:	83 c4 10             	add    esp,0x10
c001b82e:	eb e9                	jmp    c001b819 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b830:	5b                   	pop    ebx
c001b831:	5e                   	pop    esi
c001b832:	5f                   	pop    edi
c001b833:	c3                   	ret    

c001b834 <getDevicesOfType(DeviceType)>:
c001b834:	53                   	push   ebx
c001b835:	83 ec 14             	sub    esp,0x14
c001b838:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b83c:	53                   	push   ebx
c001b83d:	e8 fc 35 01 00       	call   c002ee3e <LinkedList<Device>::LinkedList()>
c001b842:	83 c4 0c             	add    esp,0xc
c001b845:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b849:	53                   	push   ebx
c001b84a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b850:	e8 9b ff ff ff       	call   c001b7f0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b855:	89 d8                	mov    eax,ebx
c001b857:	83 c4 18             	add    esp,0x18
c001b85a:	5b                   	pop    ebx
c001b85b:	c2 04 00             	ret    0x4
c001b85e:	66 90                	xchg   ax,ax

c001b860 <HardDiskController::HardDiskController(char const*)>:
c001b860:	83 ec 0c             	sub    esp,0xc
c001b863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b867:	83 ec 08             	sub    esp,0x8
c001b86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b86e:	50                   	push   eax
c001b86f:	e8 f4 fd ff ff       	call   c001b668 <Device::Device(char const*)>
c001b874:	83 c4 10             	add    esp,0x10
c001b877:	ba 94 22 03 c0       	mov    edx,0xc0032294
c001b87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b880:	89 10                	mov    DWORD PTR [eax],edx
c001b882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b886:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b890:	90                   	nop
c001b891:	83 c4 0c             	add    esp,0xc
c001b894:	c3                   	ret    
c001b895:	90                   	nop
c001b896:	66 90                	xchg   ax,ax

c001b898 <HardDiskController::~HardDiskController()>:
c001b898:	83 ec 0c             	sub    esp,0xc
c001b89b:	ba 94 22 03 c0       	mov    edx,0xc0032294
c001b8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a4:	89 10                	mov    DWORD PTR [eax],edx
c001b8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8aa:	83 ec 0c             	sub    esp,0xc
c001b8ad:	50                   	push   eax
c001b8ae:	e8 55 fb ff ff       	call   c001b408 <Device::~Device()>
c001b8b3:	83 c4 10             	add    esp,0x10
c001b8b6:	90                   	nop
c001b8b7:	83 c4 0c             	add    esp,0xc
c001b8ba:	c3                   	ret    
c001b8bb:	90                   	nop

c001b8bc <HardDiskController::~HardDiskController()>:
c001b8bc:	83 ec 0c             	sub    esp,0xc
c001b8bf:	83 ec 0c             	sub    esp,0xc
c001b8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8c6:	e8 cd ff ff ff       	call   c001b898 <HardDiskController::~HardDiskController()>
c001b8cb:	83 c4 10             	add    esp,0x10
c001b8ce:	83 ec 08             	sub    esp,0x8
c001b8d1:	68 58 01 00 00       	push   0x158
c001b8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8da:	e8 79 da ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	83 c4 0c             	add    esp,0xc
c001b8e5:	c3                   	ret    

c001b8e6 <PhysicalDisk::eject()>:
c001b8e6:	83 c8 ff             	or     eax,0xffffffff
c001b8e9:	c3                   	ret    

c001b8ea <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b8ea:	83 ec 0c             	sub    esp,0xc
c001b8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f1:	83 ec 08             	sub    esp,0x8
c001b8f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8f8:	50                   	push   eax
c001b8f9:	e8 6a fd ff ff       	call   c001b668 <Device::Device(char const*)>
c001b8fe:	83 c4 10             	add    esp,0x10
c001b901:	ba c0 22 03 c0       	mov    edx,0xc00322c0
c001b906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90a:	89 10                	mov    DWORD PTR [eax],edx
c001b90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b910:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b926:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b934:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b938:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b942:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b94c:	90                   	nop
c001b94d:	83 c4 0c             	add    esp,0xc
c001b950:	c3                   	ret    
c001b951:	90                   	nop

c001b952 <PhysicalDisk::startCache()>:
c001b952:	56                   	push   esi
c001b953:	53                   	push   ebx
c001b954:	83 ec 10             	sub    esp,0x10
c001b957:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b95b:	6a 44                	push   0x44
c001b95d:	e8 94 ac ff ff       	call   c00165f6 <malloc>
c001b962:	89 c6                	mov    esi,eax
c001b964:	58                   	pop    eax
c001b965:	5a                   	pop    edx
c001b966:	53                   	push   ebx
c001b967:	56                   	push   esi
c001b968:	e8 6f 17 00 00       	call   c001d0dc <VCache::VCache(PhysicalDisk*)>
c001b96d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b973:	83 c4 14             	add    esp,0x14
c001b976:	5b                   	pop    ebx
c001b977:	5e                   	pop    esi
c001b978:	c3                   	ret    
c001b979:	90                   	nop

c001b97a <PhysicalDisk::~PhysicalDisk()>:
c001b97a:	83 ec 0c             	sub    esp,0xc
c001b97d:	ba c0 22 03 c0       	mov    edx,0xc00322c0
c001b982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b986:	89 10                	mov    DWORD PTR [eax],edx
c001b988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	50                   	push   eax
c001b990:	e8 73 fa ff ff       	call   c001b408 <Device::~Device()>
c001b995:	83 c4 10             	add    esp,0x10
c001b998:	90                   	nop
c001b999:	83 c4 0c             	add    esp,0xc
c001b99c:	c3                   	ret    
c001b99d:	90                   	nop

c001b99e <PhysicalDisk::~PhysicalDisk()>:
c001b99e:	83 ec 0c             	sub    esp,0xc
c001b9a1:	83 ec 0c             	sub    esp,0xc
c001b9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a8:	e8 cd ff ff ff       	call   c001b97a <PhysicalDisk::~PhysicalDisk()>
c001b9ad:	83 c4 10             	add    esp,0x10
c001b9b0:	83 ec 08             	sub    esp,0x8
c001b9b3:	68 6c 01 00 00       	push   0x16c
c001b9b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9bc:	e8 97 d9 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001b9c1:	83 c4 10             	add    esp,0x10
c001b9c4:	83 c4 0c             	add    esp,0xc
c001b9c7:	c3                   	ret    

c001b9c8 <int_handler>:
c001b9c8:	55                   	push   ebp
c001b9c9:	57                   	push   edi
c001b9ca:	56                   	push   esi
c001b9cb:	53                   	push   ebx
c001b9cc:	83 ec 0c             	sub    esp,0xc
c001b9cf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b9d3:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b9da:	74 0b                	je     c001b9e7 <int_handler+0x1f>
c001b9dc:	fa                   	cli    
c001b9dd:	f4                   	hlt    
c001b9de:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b9e5:	75 f5                	jne    c001b9dc <int_handler+0x14>
c001b9e7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b9ea:	8d 46 e0             	lea    eax,[esi-0x20]
c001b9ed:	83 f8 17             	cmp    eax,0x17
c001b9f0:	76 40                	jbe    c001ba32 <int_handler+0x6a>
c001b9f2:	c1 e6 04             	shl    esi,0x4
c001b9f5:	31 db                	xor    ebx,ebx
c001b9f7:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b9fd:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001ba03:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001ba07:	85 c0                	test   eax,eax
c001ba09:	74 13                	je     c001ba1e <int_handler+0x56>
c001ba0b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001ba0e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001ba12:	74 2c                	je     c001ba40 <int_handler+0x78>
c001ba14:	83 ec 08             	sub    esp,0x8
c001ba17:	52                   	push   edx
c001ba18:	57                   	push   edi
c001ba19:	ff d0                	call   eax
c001ba1b:	83 c4 10             	add    esp,0x10
c001ba1e:	83 c3 01             	add    ebx,0x1
c001ba21:	83 fb 04             	cmp    ebx,0x4
c001ba24:	75 dd                	jne    c001ba03 <int_handler+0x3b>
c001ba26:	83 c4 0c             	add    esp,0xc
c001ba29:	31 c0                	xor    eax,eax
c001ba2b:	5b                   	pop    ebx
c001ba2c:	31 d2                	xor    edx,edx
c001ba2e:	5e                   	pop    esi
c001ba2f:	5f                   	pop    edi
c001ba30:	5d                   	pop    ebp
c001ba31:	c3                   	ret    
c001ba32:	83 ec 0c             	sub    esp,0xc
c001ba35:	50                   	push   eax
c001ba36:	e8 95 ba 00 00       	call   c00274d0 <HalEndOfInterrupt(int)>
c001ba3b:	83 c4 10             	add    esp,0x10
c001ba3e:	eb b2                	jmp    c001b9f2 <int_handler+0x2a>
c001ba40:	83 ec 08             	sub    esp,0x8
c001ba43:	52                   	push   edx
c001ba44:	57                   	push   edi
c001ba45:	ff d0                	call   eax
c001ba47:	83 c4 10             	add    esp,0x10
c001ba4a:	83 c4 0c             	add    esp,0xc
c001ba4d:	5b                   	pop    ebx
c001ba4e:	5e                   	pop    esi
c001ba4f:	5f                   	pop    edi
c001ba50:	5d                   	pop    ebp
c001ba51:	c3                   	ret    

c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001ba52:	56                   	push   esi
c001ba53:	31 c0                	xor    eax,eax
c001ba55:	53                   	push   ebx
c001ba56:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba5e:	89 ca                	mov    edx,ecx
c001ba60:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ba64:	c1 e2 04             	shl    edx,0x4
c001ba67:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001ba6f:	74 17                	je     c001ba88 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ba71:	83 c0 01             	add    eax,0x1
c001ba74:	83 f8 04             	cmp    eax,0x4
c001ba77:	75 ee                	jne    c001ba67 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ba79:	c7 44 24 0c f0 22 03 c0 	mov    DWORD PTR [esp+0xc],0xc00322f0
c001ba81:	5b                   	pop    ebx
c001ba82:	5e                   	pop    esi
c001ba83:	e9 16 4a 00 00       	jmp    c002049e <KePanic(char const*)>
c001ba88:	8d 04 88             	lea    eax,[eax+ecx*4]
c001ba8b:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001ba92:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001ba99:	5b                   	pop    ebx
c001ba9a:	5e                   	pop    esi
c001ba9b:	c3                   	ret    

c001ba9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001ba9c:	57                   	push   edi
c001ba9d:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001baa3:	56                   	push   esi
c001baa4:	53                   	push   ebx
c001baa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001baa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baad:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bab4:	74 54                	je     c001bb0a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001bab6:	89 c7                	mov    edi,eax
c001bab8:	84 c0                	test   al,al
c001baba:	74 1d                	je     c001bad9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001babc:	83 fe 0f             	cmp    esi,0xf
c001babf:	0f 8f d5 00 00 00    	jg     c001bb9a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001bac5:	0f b6 b6 28 3f 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc0d8]
c001bacc:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001bad4:	d1 ef                	shr    edi,1
c001bad6:	83 e7 01             	and    edi,0x1
c001bad9:	83 ec 08             	sub    esp,0x8
c001badc:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001bae1:	31 db                	xor    ebx,ebx
c001bae3:	50                   	push   eax
c001bae4:	68 fd 22 03 c0       	push   0xc00322fd
c001bae9:	e8 97 d9 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001baee:	83 c4 10             	add    esp,0x10
c001baf1:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001baf6:	85 c0                	test   eax,eax
c001baf8:	7f 55                	jg     c001bb4f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001bafa:	83 ec 0c             	sub    esp,0xc
c001bafd:	68 14 23 03 c0       	push   0xc0032314
c001bb02:	e8 97 49 00 00       	call   c002049e <KePanic(char const*)>
c001bb07:	83 c4 10             	add    esp,0x10
c001bb0a:	8d 7e 20             	lea    edi,[esi+0x20]
c001bb0d:	89 f8                	mov    eax,edi
c001bb0f:	31 d2                	xor    edx,edx
c001bb11:	c1 e0 04             	shl    eax,0x4
c001bb14:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001bb1b:	85 c9                	test   ecx,ecx
c001bb1d:	0f 84 8e 00 00 00    	je     c001bbb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001bb23:	83 c2 01             	add    edx,0x1
c001bb26:	83 fa 04             	cmp    edx,0x4
c001bb29:	75 e9                	jne    c001bb14 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bb2b:	83 ec 0c             	sub    esp,0xc
c001bb2e:	68 68 23 03 c0       	push   0xc0032368
c001bb33:	e8 66 49 00 00       	call   c002049e <KePanic(char const*)>
c001bb38:	83 c4 10             	add    esp,0x10
c001bb3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb40:	5b                   	pop    ebx
c001bb41:	5e                   	pop    esi
c001bb42:	5f                   	pop    edi
c001bb43:	c3                   	ret    
c001bb44:	83 c3 01             	add    ebx,0x1
c001bb47:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001bb4d:	7e ab                	jle    c001bafa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001bb4f:	83 ec 08             	sub    esp,0x8
c001bb52:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001bb59:	56                   	push   esi
c001bb5a:	50                   	push   eax
c001bb5b:	e8 50 21 01 00       	call   c002dcb0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bb60:	83 c4 10             	add    esp,0x10
c001bb63:	84 c0                	test   al,al
c001bb65:	74 dd                	je     c001bb44 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001bb67:	83 ec 04             	sub    esp,0x4
c001bb6a:	89 f8                	mov    eax,edi
c001bb6c:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001bb73:	0f b6 f8             	movzx  edi,al
c001bb76:	57                   	push   edi
c001bb77:	8d 7e 20             	lea    edi,[esi+0x20]
c001bb7a:	6a 00                	push   0x0
c001bb7c:	89 f8                	mov    eax,edi
c001bb7e:	0f b6 c0             	movzx  eax,al
c001bb81:	50                   	push   eax
c001bb82:	89 f0                	mov    eax,esi
c001bb84:	6a 00                	push   0x0
c001bb86:	0f b6 c0             	movzx  eax,al
c001bb89:	6a 00                	push   0x0
c001bb8b:	50                   	push   eax
c001bb8c:	53                   	push   ebx
c001bb8d:	e8 8a 22 01 00       	call   c002de1c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bb92:	83 c4 20             	add    esp,0x20
c001bb95:	e9 73 ff ff ff       	jmp    c001bb0d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001bb9a:	83 ec 0c             	sub    esp,0xc
c001bb9d:	31 ff                	xor    edi,edi
c001bb9f:	68 30 23 03 c0       	push   0xc0032330
c001bba4:	e8 f5 48 00 00       	call   c002049e <KePanic(char const*)>
c001bba9:	83 c4 10             	add    esp,0x10
c001bbac:	e9 28 ff ff ff       	jmp    c001bad9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001bbb1:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bbb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bbb8:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001bbbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bbc3:	5b                   	pop    ebx
c001bbc4:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001bbcb:	89 f0                	mov    eax,esi
c001bbcd:	5e                   	pop    esi
c001bbce:	5f                   	pop    edi
c001bbcf:	c3                   	ret    

c001bbd0 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001bbd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbd8:	c1 e0 04             	shl    eax,0x4
c001bbdb:	8d 50 10             	lea    edx,[eax+0x10]
c001bbde:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001bbe4:	74 08                	je     c001bbee <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bbe6:	83 c0 04             	add    eax,0x4
c001bbe9:	39 d0                	cmp    eax,edx
c001bbeb:	75 f1                	jne    c001bbde <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bbed:	c3                   	ret    
c001bbee:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bbf8:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bc02:	eb e2                	jmp    c001bbe6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bc04 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bc04:	53                   	push   ebx
c001bc05:	83 ec 08             	sub    esp,0x8
c001bc08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bc0c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bc11:	74 0e                	je     c001bc21 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bc13:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001bc18:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001bc1f:	75 37                	jne    c001bc58 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001bc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc25:	83 c0 20             	add    eax,0x20
c001bc28:	c1 e0 04             	shl    eax,0x4
c001bc2b:	8d 50 10             	lea    edx,[eax+0x10]
c001bc2e:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001bc34:	74 0c                	je     c001bc42 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001bc36:	83 c0 04             	add    eax,0x4
c001bc39:	39 d0                	cmp    eax,edx
c001bc3b:	75 f1                	jne    c001bc2e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001bc3d:	83 c4 08             	add    esp,0x8
c001bc40:	5b                   	pop    ebx
c001bc41:	c3                   	ret    
c001bc42:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bc4c:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bc56:	eb de                	jmp    c001bc36 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001bc58:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001bc5d:	7f 11                	jg     c001bc70 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001bc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc63:	0f b6 80 28 3f 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc0d8]
c001bc6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bc6e:	eb b1                	jmp    c001bc21 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bc70:	83 ec 0c             	sub    esp,0xc
c001bc73:	68 21 23 03 c0       	push   0xc0032321
c001bc78:	e8 21 48 00 00       	call   c002049e <KePanic(char const*)>
c001bc7d:	83 c4 10             	add    esp,0x10
c001bc80:	eb 9f                	jmp    c001bc21 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001bc82 <setupINTS()>:
c001bc82:	31 c0                	xor    eax,eax
c001bc84:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bc8e:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bc98:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001bca2:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001bcac:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001bcb6:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001bcc0:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001bcca:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001bcd4:	83 c0 10             	add    eax,0x10
c001bcd7:	3d 00 10 00 00       	cmp    eax,0x1000
c001bcdc:	75 a6                	jne    c001bc84 <setupINTS()+0x2>
c001bcde:	c3                   	ret    

c001bcdf <convertLegacyIRQNumber(int)>:
c001bcdf:	83 ec 0c             	sub    esp,0xc
c001bce2:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcec:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bcf3:	74 0c                	je     c001bd01 <convertLegacyIRQNumber(int)+0x22>
c001bcf5:	83 f8 0f             	cmp    eax,0xf
c001bcf8:	7f 0b                	jg     c001bd05 <convertLegacyIRQNumber(int)+0x26>
c001bcfa:	0f b6 80 28 3f 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc0d8]
c001bd01:	83 c4 0c             	add    esp,0xc
c001bd04:	c3                   	ret    
c001bd05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bd09:	83 ec 0c             	sub    esp,0xc
c001bd0c:	68 30 23 03 c0       	push   0xc0032330
c001bd11:	e8 88 47 00 00       	call   c002049e <KePanic(char const*)>
c001bd16:	83 c4 10             	add    esp,0x10
c001bd19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd1d:	83 c4 0c             	add    esp,0xc
c001bd20:	c3                   	ret    
c001bd21:	90                   	nop

c001bd22 <startGUI(void*)>:
c001bd22:	55                   	push   ebp
c001bd23:	89 e5                	mov    ebp,esp
c001bd25:	53                   	push   ebx
c001bd26:	83 ec 04             	sub    esp,0x4
c001bd29:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd2e:	83 e8 01             	sub    eax,0x1
c001bd31:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bd36:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd3b:	85 c0                	test   eax,eax
c001bd3d:	75 01                	jne    c001bd40 <startGUI(void*)+0x1e>
c001bd3f:	fb                   	sti    
c001bd40:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bd46:	83 ec 08             	sub    esp,0x8
c001bd49:	6a 01                	push   0x1
c001bd4b:	68 8d 23 03 c0       	push   0xc003238d
c001bd50:	e8 dc 8c 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	83 ec 08             	sub    esp,0x8
c001bd5b:	53                   	push   ebx
c001bd5c:	50                   	push   eax
c001bd5d:	e8 21 8f 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bd6b:	83 ec 08             	sub    esp,0x8
c001bd6e:	6a 01                	push   0x1
c001bd70:	68 a7 23 03 c0       	push   0xc00323a7
c001bd75:	e8 b7 8c 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c001bd7a:	83 c4 10             	add    esp,0x10
c001bd7d:	83 ec 08             	sub    esp,0x8
c001bd80:	53                   	push   ebx
c001bd81:	50                   	push   eax
c001bd82:	e8 fc 8e 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	eb fe                	jmp    c001bd8a <startGUI(void*)+0x68>

c001bd8c <startGUIVESA(void*)>:
c001bd8c:	55                   	push   ebp
c001bd8d:	89 e5                	mov    ebp,esp
c001bd8f:	53                   	push   ebx
c001bd90:	83 ec 04             	sub    esp,0x4
c001bd93:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd98:	83 e8 01             	sub    eax,0x1
c001bd9b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bda0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bda5:	85 c0                	test   eax,eax
c001bda7:	75 01                	jne    c001bdaa <startGUIVESA(void*)+0x1e>
c001bda9:	fb                   	sti    
c001bdaa:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bdb0:	83 ec 08             	sub    esp,0x8
c001bdb3:	6a 01                	push   0x1
c001bdb5:	68 c5 23 03 c0       	push   0xc00323c5
c001bdba:	e8 72 8c 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	83 ec 08             	sub    esp,0x8
c001bdc5:	53                   	push   ebx
c001bdc6:	50                   	push   eax
c001bdc7:	e8 b7 8e 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c001bdcc:	83 c4 10             	add    esp,0x10
c001bdcf:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bdd5:	83 ec 08             	sub    esp,0x8
c001bdd8:	6a 01                	push   0x1
c001bdda:	68 a7 23 03 c0       	push   0xc00323a7
c001bddf:	e8 4d 8c 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c001bde4:	83 c4 10             	add    esp,0x10
c001bde7:	83 ec 08             	sub    esp,0x8
c001bdea:	53                   	push   ebx
c001bdeb:	50                   	push   eax
c001bdec:	e8 92 8e 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c001bdf1:	83 c4 10             	add    esp,0x10
c001bdf4:	eb fe                	jmp    c001bdf4 <startGUIVESA(void*)+0x68>

c001bdf6 <sendKeyToTerminal(unsigned char)>:
c001bdf6:	55                   	push   ebp
c001bdf7:	89 e5                	mov    ebp,esp
c001bdf9:	83 ec 28             	sub    esp,0x28
c001bdfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdff:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001be02:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001be07:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001be0b:	83 ec 08             	sub    esp,0x8
c001be0e:	52                   	push   edx
c001be0f:	50                   	push   eax
c001be10:	e8 e1 ba ff ff       	call   c00178f6 <VgaText::receiveKey(unsigned char)>
c001be15:	83 c4 10             	add    esp,0x10
c001be18:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001be1c:	83 f8 0a             	cmp    eax,0xa
c001be1f:	74 16                	je     c001be37 <sendKeyToTerminal(unsigned char)+0x41>
c001be21:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001be25:	83 f8 03             	cmp    eax,0x3
c001be28:	74 0d                	je     c001be37 <sendKeyToTerminal(unsigned char)+0x41>
c001be2a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001be2e:	83 f8 1c             	cmp    eax,0x1c
c001be31:	0f 85 97 00 00 00    	jne    c001bece <sendKeyToTerminal(unsigned char)+0xd8>
c001be37:	fa                   	cli    
c001be38:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001be3d:	83 c0 01             	add    eax,0x1
c001be40:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001be45:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001be4a:	83 c0 01             	add    eax,0x1
c001be4d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001be52:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001be57:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001be5a:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001be64:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001be68:	74 1f                	je     c001be89 <sendKeyToTerminal(unsigned char)+0x93>
c001be6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001be6d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001be70:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001be73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be76:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001be79:	83 ec 0c             	sub    esp,0xc
c001be7c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001be7f:	e8 28 99 00 00       	call   c00257ac <unblockTask(ThreadControlBlock*)>
c001be84:	83 c4 10             	add    esp,0x10
c001be87:	eb db                	jmp    c001be64 <sendKeyToTerminal(unsigned char)+0x6e>
c001be89:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001be8e:	83 e8 01             	sub    eax,0x1
c001be91:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001be96:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001be9b:	85 c0                	test   eax,eax
c001be9d:	75 18                	jne    c001beb7 <sendKeyToTerminal(unsigned char)+0xc1>
c001be9f:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bea4:	85 c0                	test   eax,eax
c001bea6:	74 0f                	je     c001beb7 <sendKeyToTerminal(unsigned char)+0xc1>
c001bea8:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001beb2:	e8 fd 95 00 00       	call   c00254b4 <schedule()>
c001beb7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bebc:	83 e8 01             	sub    eax,0x1
c001bebf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bec4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bec9:	85 c0                	test   eax,eax
c001becb:	75 01                	jne    c001bece <sendKeyToTerminal(unsigned char)+0xd8>
c001becd:	fb                   	sti    
c001bece:	90                   	nop
c001becf:	c9                   	leave  
c001bed0:	c3                   	ret    

c001bed1 <sendKeyboardToken(KeyboardToken)>:
c001bed1:	55                   	push   ebp
c001bed2:	89 e5                	mov    ebp,esp
c001bed4:	83 ec 18             	sub    esp,0x18
c001bed7:	e8 12 46 00 00       	call   c00204ee <KeUserIOReceived()>
c001bedc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bedf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bee2:	0f b7 c0             	movzx  eax,ax
c001bee5:	83 f2 01             	xor    edx,0x1
c001bee8:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001beee:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bef3:	85 c0                	test   eax,eax
c001bef5:	74 24                	je     c001bf1b <sendKeyboardToken(KeyboardToken)+0x4a>
c001bef7:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001befd:	83 ec 04             	sub    esp,0x4
c001bf00:	68 40 ef 03 c0       	push   0xc003ef40
c001bf05:	83 ec 08             	sub    esp,0x8
c001bf08:	89 e2                	mov    edx,esp
c001bf0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf0d:	89 02                	mov    DWORD PTR [edx],eax
c001bf0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf12:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bf16:	ff d1                	call   ecx
c001bf18:	83 c4 10             	add    esp,0x10
c001bf1b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bf1f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bf22:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bf27:	0f b6 d2             	movzx  edx,dl
c001bf2a:	0f b6 c0             	movzx  eax,al
c001bf2d:	39 c2                	cmp    edx,eax
c001bf2f:	74 1c                	je     c001bf4d <sendKeyboardToken(KeyboardToken)+0x7c>
c001bf31:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bf34:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bf39:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bf3e:	0f b6 c0             	movzx  eax,al
c001bf41:	83 ec 0c             	sub    esp,0xc
c001bf44:	50                   	push   eax
c001bf45:	e8 f8 b0 ff ff       	call   c0017042 <setTerminalScrollLock(bool)>
c001bf4a:	83 c4 10             	add    esp,0x10
c001bf4d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bf50:	0f b6 c0             	movzx  eax,al
c001bf53:	85 c0                	test   eax,eax
c001bf55:	0f 84 da 00 00 00    	je     c001c035 <sendKeyboardToken(KeyboardToken)+0x164>
c001bf5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf5e:	0f b7 c0             	movzx  eax,ax
c001bf61:	3d 18 03 00 00       	cmp    eax,0x318
c001bf66:	75 06                	jne    c001bf6e <sendKeyboardToken(KeyboardToken)+0x9d>
c001bf68:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bf6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf71:	0f b7 c0             	movzx  eax,ax
c001bf74:	3d 19 03 00 00       	cmp    eax,0x319
c001bf79:	75 06                	jne    c001bf81 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bf7b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bf81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf84:	0f b7 c0             	movzx  eax,ax
c001bf87:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bf8c:	75 06                	jne    c001bf94 <sendKeyboardToken(KeyboardToken)+0xc3>
c001bf8e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bf94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf97:	0f b7 c0             	movzx  eax,ax
c001bf9a:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bf9f:	75 06                	jne    c001bfa7 <sendKeyboardToken(KeyboardToken)+0xd6>
c001bfa1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bfa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfaa:	0f b7 c0             	movzx  eax,ax
c001bfad:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bfb2:	75 06                	jne    c001bfba <sendKeyboardToken(KeyboardToken)+0xe9>
c001bfb4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bfba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfbd:	0f b7 c0             	movzx  eax,ax
c001bfc0:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bfc5:	75 06                	jne    c001bfcd <sendKeyboardToken(KeyboardToken)+0xfc>
c001bfc7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bfcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfd0:	0f b7 c0             	movzx  eax,ax
c001bfd3:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bfd8:	75 06                	jne    c001bfe0 <sendKeyboardToken(KeyboardToken)+0x10f>
c001bfda:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bfe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfe3:	0f b7 c0             	movzx  eax,ax
c001bfe6:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bfeb:	75 06                	jne    c001bff3 <sendKeyboardToken(KeyboardToken)+0x122>
c001bfed:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bff6:	0f b7 c0             	movzx  eax,ax
c001bff9:	3d 20 03 00 00       	cmp    eax,0x320
c001bffe:	75 06                	jne    c001c006 <sendKeyboardToken(KeyboardToken)+0x135>
c001c000:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001c006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c009:	0f b7 c0             	movzx  eax,ax
c001c00c:	3d 21 03 00 00       	cmp    eax,0x321
c001c011:	75 06                	jne    c001c019 <sendKeyboardToken(KeyboardToken)+0x148>
c001c013:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001c019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c01c:	0f b7 c0             	movzx  eax,ax
c001c01f:	3d 22 03 00 00       	cmp    eax,0x322
c001c024:	0f 85 f1 00 00 00    	jne    c001c11b <sendKeyboardToken(KeyboardToken)+0x24a>
c001c02a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001c030:	e9 e6 00 00 00       	jmp    c001c11b <sendKeyboardToken(KeyboardToken)+0x24a>
c001c035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c038:	0f b7 c0             	movzx  eax,ax
c001c03b:	3d 18 03 00 00       	cmp    eax,0x318
c001c040:	75 0a                	jne    c001c04c <sendKeyboardToken(KeyboardToken)+0x17b>
c001c042:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001c048:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c04c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c04f:	0f b7 c0             	movzx  eax,ax
c001c052:	3d 19 03 00 00       	cmp    eax,0x319
c001c057:	75 0a                	jne    c001c063 <sendKeyboardToken(KeyboardToken)+0x192>
c001c059:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001c05f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c066:	0f b7 c0             	movzx  eax,ax
c001c069:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c06e:	75 0a                	jne    c001c07a <sendKeyboardToken(KeyboardToken)+0x1a9>
c001c070:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001c076:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c07a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c07d:	0f b7 c0             	movzx  eax,ax
c001c080:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c085:	75 0a                	jne    c001c091 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001c087:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001c08d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c094:	0f b7 c0             	movzx  eax,ax
c001c097:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c09c:	75 0a                	jne    c001c0a8 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001c09e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001c0a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ab:	0f b7 c0             	movzx  eax,ax
c001c0ae:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c0b3:	75 0a                	jne    c001c0bf <sendKeyboardToken(KeyboardToken)+0x1ee>
c001c0b5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c0bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c2:	0f b7 c0             	movzx  eax,ax
c001c0c5:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c0ca:	75 0a                	jne    c001c0d6 <sendKeyboardToken(KeyboardToken)+0x205>
c001c0cc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001c0d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0d9:	0f b7 c0             	movzx  eax,ax
c001c0dc:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c0e1:	75 0a                	jne    c001c0ed <sendKeyboardToken(KeyboardToken)+0x21c>
c001c0e3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001c0e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0f0:	0f b7 c0             	movzx  eax,ax
c001c0f3:	3d 20 03 00 00       	cmp    eax,0x320
c001c0f8:	75 0a                	jne    c001c104 <sendKeyboardToken(KeyboardToken)+0x233>
c001c0fa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001c100:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c107:	0f b7 c0             	movzx  eax,ax
c001c10a:	3d 21 03 00 00       	cmp    eax,0x321
c001c10f:	75 0a                	jne    c001c11b <sendKeyboardToken(KeyboardToken)+0x24a>
c001c111:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001c117:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c11b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c11e:	0f b7 c0             	movzx  eax,ax
c001c121:	3d 00 02 00 00       	cmp    eax,0x200
c001c126:	75 2f                	jne    c001c157 <sendKeyboardToken(KeyboardToken)+0x286>
c001c128:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c12d:	83 f0 01             	xor    eax,0x1
c001c130:	0f b6 c0             	movzx  eax,al
c001c133:	85 c0                	test   eax,eax
c001c135:	74 20                	je     c001c157 <sendKeyboardToken(KeyboardToken)+0x286>
c001c137:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c13c:	6a 01                	push   0x1
c001c13e:	6a 00                	push   0x0
c001c140:	68 22 bd 01 c0       	push   0xc001bd22
c001c145:	50                   	push   eax
c001c146:	e8 19 91 00 00       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c001c14b:	83 c4 10             	add    esp,0x10
c001c14e:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c155:	eb 3a                	jmp    c001c191 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c15a:	0f b7 c0             	movzx  eax,ax
c001c15d:	3d 01 02 00 00       	cmp    eax,0x201
c001c162:	75 2d                	jne    c001c191 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c164:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c169:	83 f0 01             	xor    eax,0x1
c001c16c:	0f b6 c0             	movzx  eax,al
c001c16f:	85 c0                	test   eax,eax
c001c171:	74 1e                	je     c001c191 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c173:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c178:	6a 01                	push   0x1
c001c17a:	6a 00                	push   0x0
c001c17c:	68 8c bd 01 c0       	push   0xc001bd8c
c001c181:	50                   	push   eax
c001c182:	e8 dd 90 00 00       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c001c187:	83 c4 10             	add    esp,0x10
c001c18a:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c194:	0f b7 c0             	movzx  eax,ax
c001c197:	3d 25 03 00 00       	cmp    eax,0x325
c001c19c:	75 06                	jne    c001c1a4 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c19e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c1a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1a7:	0f b7 c0             	movzx  eax,ax
c001c1aa:	3d 24 03 00 00       	cmp    eax,0x324
c001c1af:	75 06                	jne    c001c1b7 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c1b1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c1b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ba:	0f b7 c0             	movzx  eax,ax
c001c1bd:	3d 23 03 00 00       	cmp    eax,0x323
c001c1c2:	75 06                	jne    c001c1ca <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c1c4:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1cd:	0f b7 c0             	movzx  eax,ax
c001c1d0:	3d 26 03 00 00       	cmp    eax,0x326
c001c1d5:	75 06                	jne    c001c1dd <sendKeyboardToken(KeyboardToken)+0x30c>
c001c1d7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e0:	0f b7 c0             	movzx  eax,ax
c001c1e3:	3d 27 03 00 00       	cmp    eax,0x327
c001c1e8:	75 06                	jne    c001c1f0 <sendKeyboardToken(KeyboardToken)+0x31f>
c001c1ea:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1f3:	0f b7 c0             	movzx  eax,ax
c001c1f6:	3d 22 03 00 00       	cmp    eax,0x322
c001c1fb:	75 06                	jne    c001c203 <sendKeyboardToken(KeyboardToken)+0x332>
c001c1fd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c203:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c207:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c20a:	83 f0 01             	xor    eax,0x1
c001c20d:	0f b6 c0             	movzx  eax,al
c001c210:	85 c0                	test   eax,eax
c001c212:	74 7c                	je     c001c290 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c214:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001c219:	0f b6 c0             	movzx  eax,al
c001c21c:	85 c0                	test   eax,eax
c001c21e:	74 43                	je     c001c263 <sendKeyboardToken(KeyboardToken)+0x392>
c001c220:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c224:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c228:	85 c0                	test   eax,eax
c001c22a:	74 2b                	je     c001c257 <sendKeyboardToken(KeyboardToken)+0x386>
c001c22c:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001c232:	89 d0                	mov    eax,edx
c001c234:	c1 e0 02             	shl    eax,0x2
c001c237:	01 d0                	add    eax,edx
c001c239:	01 c0                	add    eax,eax
c001c23b:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c243:	0f b7 c0             	movzx  eax,ax
c001c246:	8d 50 d0             	lea    edx,[eax-0x30]
c001c249:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c24e:	01 d0                	add    eax,edx
c001c250:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c255:	eb 71                	jmp    c001c2c8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c257:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c261:	eb 65                	jmp    c001c2c8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c263:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c268:	85 c0                	test   eax,eax
c001c26a:	74 18                	je     c001c284 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c26c:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c271:	0f b6 c0             	movzx  eax,al
c001c274:	83 ec 0c             	sub    esp,0xc
c001c277:	50                   	push   eax
c001c278:	e8 79 fb ff ff       	call   c001bdf6 <sendKeyToTerminal(unsigned char)>
c001c27d:	83 c4 10             	add    esp,0x10
c001c280:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c284:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c28e:	eb 38                	jmp    c001c2c8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c293:	0f b7 c0             	movzx  eax,ax
c001c296:	3d 01 01 00 00       	cmp    eax,0x101
c001c29b:	75 2b                	jne    c001c2c8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c29d:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c2a2:	85 c0                	test   eax,eax
c001c2a4:	74 18                	je     c001c2be <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c2a6:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c2ab:	0f b6 c0             	movzx  eax,al
c001c2ae:	83 ec 0c             	sub    esp,0xc
c001c2b1:	50                   	push   eax
c001c2b2:	e8 3f fb ff ff       	call   c001bdf6 <sendKeyToTerminal(unsigned char)>
c001c2b7:	83 c4 10             	add    esp,0x10
c001c2ba:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c2be:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c2c8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c2cb:	83 f0 01             	xor    eax,0x1
c001c2ce:	0f b6 c0             	movzx  eax,al
c001c2d1:	85 c0                	test   eax,eax
c001c2d3:	74 5a                	je     c001c32f <sendKeyboardToken(KeyboardToken)+0x45e>
c001c2d5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c2d8:	83 f0 01             	xor    eax,0x1
c001c2db:	0f b6 c0             	movzx  eax,al
c001c2de:	85 c0                	test   eax,eax
c001c2e0:	74 4d                	je     c001c32f <sendKeyboardToken(KeyboardToken)+0x45e>
c001c2e2:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c2e7:	83 f0 01             	xor    eax,0x1
c001c2ea:	0f b6 c0             	movzx  eax,al
c001c2ed:	85 c0                	test   eax,eax
c001c2ef:	74 3e                	je     c001c32f <sendKeyboardToken(KeyboardToken)+0x45e>
c001c2f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2f4:	0f b7 c0             	movzx  eax,ax
c001c2f7:	83 f8 1f             	cmp    eax,0x1f
c001c2fa:	76 0b                	jbe    c001c307 <sendKeyboardToken(KeyboardToken)+0x436>
c001c2fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2ff:	0f b7 c0             	movzx  eax,ax
c001c302:	83 f8 7e             	cmp    eax,0x7e
c001c305:	76 16                	jbe    c001c31d <sendKeyboardToken(KeyboardToken)+0x44c>
c001c307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c30a:	0f b7 c0             	movzx  eax,ax
c001c30d:	83 f8 0a             	cmp    eax,0xa
c001c310:	74 0b                	je     c001c31d <sendKeyboardToken(KeyboardToken)+0x44c>
c001c312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c315:	0f b7 c0             	movzx  eax,ax
c001c318:	83 f8 08             	cmp    eax,0x8
c001c31b:	75 12                	jne    c001c32f <sendKeyboardToken(KeyboardToken)+0x45e>
c001c31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c320:	0f b6 c0             	movzx  eax,al
c001c323:	83 ec 0c             	sub    esp,0xc
c001c326:	50                   	push   eax
c001c327:	e8 ca fa ff ff       	call   c001bdf6 <sendKeyToTerminal(unsigned char)>
c001c32c:	83 c4 10             	add    esp,0x10
c001c32f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c332:	83 f0 01             	xor    eax,0x1
c001c335:	0f b6 c0             	movzx  eax,al
c001c338:	85 c0                	test   eax,eax
c001c33a:	74 5d                	je     c001c399 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c33c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c33f:	83 f0 01             	xor    eax,0x1
c001c342:	0f b6 c0             	movzx  eax,al
c001c345:	85 c0                	test   eax,eax
c001c347:	74 50                	je     c001c399 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c349:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c34e:	0f b6 c0             	movzx  eax,al
c001c351:	85 c0                	test   eax,eax
c001c353:	74 44                	je     c001c399 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c358:	0f b7 c0             	movzx  eax,ax
c001c35b:	83 f8 3f             	cmp    eax,0x3f
c001c35e:	76 39                	jbe    c001c399 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c363:	0f b7 c0             	movzx  eax,ax
c001c366:	83 f8 7f             	cmp    eax,0x7f
c001c369:	77 2e                	ja     c001c399 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c36b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c36e:	88 c2                	mov    dl,al
c001c370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c373:	0f b7 c0             	movzx  eax,ax
c001c376:	83 f8 5f             	cmp    eax,0x5f
c001c379:	76 04                	jbe    c001c37f <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c37b:	b0 20                	mov    al,0x20
c001c37d:	eb 02                	jmp    c001c381 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c37f:	b0 00                	mov    al,0x0
c001c381:	89 d1                	mov    ecx,edx
c001c383:	29 c1                	sub    ecx,eax
c001c385:	89 c8                	mov    eax,ecx
c001c387:	83 e8 40             	sub    eax,0x40
c001c38a:	0f b6 c0             	movzx  eax,al
c001c38d:	83 ec 0c             	sub    esp,0xc
c001c390:	50                   	push   eax
c001c391:	e8 60 fa ff ff       	call   c001bdf6 <sendKeyToTerminal(unsigned char)>
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c39c:	0f b7 c0             	movzx  eax,ax
c001c39f:	3d 00 03 00 00       	cmp    eax,0x300
c001c3a4:	75 12                	jne    c001c3b8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c3a6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c3a9:	83 f0 01             	xor    eax,0x1
c001c3ac:	0f b6 c0             	movzx  eax,al
c001c3af:	85 c0                	test   eax,eax
c001c3b1:	74 05                	je     c001c3b8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c3b3:	e8 8b ac ff ff       	call   c0017043 <doTerminalCycle()>
c001c3b8:	90                   	nop
c001c3b9:	c9                   	leave  
c001c3ba:	c3                   	ret    

c001c3bb <clearInternalKeybuffer(VgaText*)>:
c001c3bb:	55                   	push   ebp
c001c3bc:	89 e5                	mov    ebp,esp
c001c3be:	83 ec 08             	sub    esp,0x8
c001c3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3c4:	05 02 01 00 00       	add    eax,0x102
c001c3c9:	83 ec 0c             	sub    esp,0xc
c001c3cc:	50                   	push   eax
c001c3cd:	e8 9e 41 fe ff       	call   c0000570 <strlen>
c001c3d2:	83 c4 10             	add    esp,0x10
c001c3d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c3d8:	81 c2 02 01 00 00    	add    edx,0x102
c001c3de:	83 ec 04             	sub    esp,0x4
c001c3e1:	50                   	push   eax
c001c3e2:	6a 00                	push   0x0
c001c3e4:	52                   	push   edx
c001c3e5:	e8 06 41 fe ff       	call   c00004f0 <memset>
c001c3ea:	83 c4 10             	add    esp,0x10
c001c3ed:	90                   	nop
c001c3ee:	c9                   	leave  
c001c3ef:	c3                   	ret    

c001c3f0 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c3f0:	55                   	push   ebp
c001c3f1:	89 e5                	mov    ebp,esp
c001c3f3:	83 ec 18             	sub    esp,0x18
c001c3f6:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c3fb:	85 c0                	test   eax,eax
c001c3fd:	74 2a                	je     c001c429 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c3ff:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c405:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c40b:	83 ec 04             	sub    esp,0x4
c001c40e:	68 40 ef 03 c0       	push   0xc003ef40
c001c413:	83 ec 08             	sub    esp,0x8
c001c416:	89 e2                	mov    edx,esp
c001c418:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c41b:	89 02                	mov    DWORD PTR [edx],eax
c001c41d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c420:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c424:	ff d1                	call   ecx
c001c426:	83 c4 10             	add    esp,0x10
c001c429:	fb                   	sti    
c001c42a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c431:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c435:	0f 84 0d 01 00 00    	je     c001c548 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c43b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c43e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c444:	0f be c0             	movsx  eax,al
c001c447:	85 c0                	test   eax,eax
c001c449:	75 2c                	jne    c001c477 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c44b:	fa                   	cli    
c001c44c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c451:	83 c0 01             	add    eax,0x1
c001c454:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c459:	e8 56 90 00 00       	call   c00254b4 <schedule()>
c001c45e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c463:	83 e8 01             	sub    eax,0x1
c001c466:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c46b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c470:	85 c0                	test   eax,eax
c001c472:	75 c7                	jne    c001c43b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c474:	fb                   	sti    
c001c475:	eb c4                	jmp    c001c43b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c477:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c47a:	8d 50 01             	lea    edx,[eax+0x1]
c001c47d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c480:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c483:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c489:	88 10                	mov    BYTE PTR [eax],dl
c001c48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c48e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c494:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c497:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c49b:	83 f8 03             	cmp    eax,0x3
c001c49e:	75 1e                	jne    c001c4be <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c4a0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c4a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c4aa:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c4b0:	83 ec 08             	sub    esp,0x8
c001c4b3:	6a 02                	push   0x2
c001c4b5:	50                   	push   eax
c001c4b6:	e8 9c 48 00 00       	call   c0020d57 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c4bb:	83 c4 10             	add    esp,0x10
c001c4be:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c4c2:	83 f8 1c             	cmp    eax,0x1c
c001c4c5:	75 1e                	jne    c001c4e5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c4c7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c4cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c4d1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c4d7:	83 ec 08             	sub    esp,0x8
c001c4da:	6a 09                	push   0x9
c001c4dc:	50                   	push   eax
c001c4dd:	e8 75 48 00 00       	call   c0020d57 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4e8:	05 02 01 00 00       	add    eax,0x102
c001c4ed:	83 ec 0c             	sub    esp,0xc
c001c4f0:	50                   	push   eax
c001c4f1:	e8 7a 40 fe ff       	call   c0000570 <strlen>
c001c4f6:	83 c4 10             	add    esp,0x10
c001c4f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c4fc:	81 c2 02 01 00 00    	add    edx,0x102
c001c502:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c505:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c508:	81 c2 02 01 00 00    	add    edx,0x102
c001c50e:	83 ec 04             	sub    esp,0x4
c001c511:	50                   	push   eax
c001c512:	51                   	push   ecx
c001c513:	52                   	push   edx
c001c514:	e8 b7 3e fe ff       	call   c00003d0 <memmove>
c001c519:	83 c4 10             	add    esp,0x10
c001c51c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c520:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c524:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c528:	83 f8 0a             	cmp    eax,0xa
c001c52b:	74 16                	je     c001c543 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c52d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c531:	83 f8 03             	cmp    eax,0x3
c001c534:	74 0d                	je     c001c543 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c536:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c53a:	83 f8 1c             	cmp    eax,0x1c
c001c53d:	0f 85 ee fe ff ff    	jne    c001c431 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c543:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c546:	eb 03                	jmp    c001c54b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c548:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c54b:	c9                   	leave  
c001c54c:	c3                   	ret    
c001c54d:	90                   	nop

c001c54e <Keyboard::Keyboard(char const*)>:
c001c54e:	83 ec 0c             	sub    esp,0xc
c001c551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c555:	83 ec 08             	sub    esp,0x8
c001c558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c55c:	50                   	push   eax
c001c55d:	e8 06 f1 ff ff       	call   c001b668 <Device::Device(char const*)>
c001c562:	83 c4 10             	add    esp,0x10
c001c565:	ba e8 23 03 c0       	mov    edx,0xc00323e8
c001c56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56e:	89 10                	mov    DWORD PTR [eax],edx
c001c570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c574:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c57e:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c585:	90                   	nop
c001c586:	83 c4 0c             	add    esp,0xc
c001c589:	c3                   	ret    

c001c58a <Keyboard::~Keyboard()>:
c001c58a:	83 ec 0c             	sub    esp,0xc
c001c58d:	ba e8 23 03 c0       	mov    edx,0xc00323e8
c001c592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c596:	89 10                	mov    DWORD PTR [eax],edx
c001c598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59c:	83 ec 0c             	sub    esp,0xc
c001c59f:	50                   	push   eax
c001c5a0:	e8 63 ee ff ff       	call   c001b408 <Device::~Device()>
c001c5a5:	83 c4 10             	add    esp,0x10
c001c5a8:	90                   	nop
c001c5a9:	83 c4 0c             	add    esp,0xc
c001c5ac:	c3                   	ret    
c001c5ad:	90                   	nop

c001c5ae <Keyboard::~Keyboard()>:
c001c5ae:	83 ec 0c             	sub    esp,0xc
c001c5b1:	83 ec 0c             	sub    esp,0xc
c001c5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5b8:	e8 cd ff ff ff       	call   c001c58a <Keyboard::~Keyboard()>
c001c5bd:	83 c4 10             	add    esp,0x10
c001c5c0:	83 ec 08             	sub    esp,0x8
c001c5c3:	68 5c 01 00 00       	push   0x15c
c001c5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5cc:	e8 87 cd ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001c5d1:	83 c4 10             	add    esp,0x10
c001c5d4:	83 c4 0c             	add    esp,0xc
c001c5d7:	c3                   	ret    

c001c5d8 <LogicalDisk::close(int, int, void*)>:
c001c5d8:	83 c8 ff             	or     eax,0xffffffff
c001c5db:	c3                   	ret    

c001c5dc <LogicalDisk::~LogicalDisk()>:
c001c5dc:	83 ec 0c             	sub    esp,0xc
c001c5df:	ba 60 24 03 c0       	mov    edx,0xc0032460
c001c5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e8:	89 10                	mov    DWORD PTR [eax],edx
c001c5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	50                   	push   eax
c001c5f2:	e8 11 ee ff ff       	call   c001b408 <Device::~Device()>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	90                   	nop
c001c5fb:	83 c4 0c             	add    esp,0xc
c001c5fe:	c3                   	ret    
c001c5ff:	90                   	nop

c001c600 <LogicalDisk::~LogicalDisk()>:
c001c600:	83 ec 0c             	sub    esp,0xc
c001c603:	83 ec 0c             	sub    esp,0xc
c001c606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c60a:	e8 cd ff ff ff       	call   c001c5dc <LogicalDisk::~LogicalDisk()>
c001c60f:	83 c4 10             	add    esp,0x10
c001c612:	83 ec 08             	sub    esp,0x8
c001c615:	68 78 01 00 00       	push   0x178
c001c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c61e:	e8 35 cd ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	83 c4 0c             	add    esp,0xc
c001c629:	c3                   	ret    

c001c62a <LogicalDisk::open(int, int, void*)>:
c001c62a:	83 ec 18             	sub    esp,0x18
c001c62d:	68 14 24 03 c0       	push   0xc0032414
c001c632:	e8 67 3e 00 00       	call   c002049e <KePanic(char const*)>
c001c637:	83 c8 ff             	or     eax,0xffffffff
c001c63a:	83 c4 1c             	add    esp,0x1c
c001c63d:	c3                   	ret    

c001c63e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c63e:	53                   	push   ebx
c001c63f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c643:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c647:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c64b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c651:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c657:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c65d:	77 10                	ja     c001c66f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c65f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c665:	89 d3                	mov    ebx,edx
c001c667:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c66d:	72 05                	jb     c001c674 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c66f:	83 c8 ff             	or     eax,0xffffffff
c001c672:	89 c2                	mov    edx,eax
c001c674:	5b                   	pop    ebx
c001c675:	c3                   	ret    

c001c676 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c676:	56                   	push   esi
c001c677:	83 c8 ff             	or     eax,0xffffffff
c001c67a:	53                   	push   ebx
c001c67b:	89 c2                	mov    edx,eax
c001c67d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c681:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c689:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c68f:	77 27                	ja     c001c6b8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c691:	89 d8                	mov    eax,ebx
c001c693:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c699:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c69f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c6a4:	89 c2                	mov    edx,eax
c001c6a6:	73 10                	jae    c001c6b8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c6a8:	89 c8                	mov    eax,ecx
c001c6aa:	89 da                	mov    edx,ebx
c001c6ac:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c6b2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c6b8:	5b                   	pop    ebx
c001c6b9:	5e                   	pop    esi
c001c6ba:	c3                   	ret    
c001c6bb:	90                   	nop

c001c6bc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c6bc:	83 ec 1c             	sub    esp,0x1c
c001c6bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c6c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c6cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c6d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6e2:	83 ec 08             	sub    esp,0x8
c001c6e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c6e9:	50                   	push   eax
c001c6ea:	e8 79 ef ff ff       	call   c001b668 <Device::Device(char const*)>
c001c6ef:	83 c4 10             	add    esp,0x10
c001c6f2:	ba 60 24 03 c0       	mov    edx,0xc0032460
c001c6f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6fb:	89 10                	mov    DWORD PTR [eax],edx
c001c6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c701:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c70c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c717:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c71e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c722:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c72c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c734:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c738:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c73e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c744:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c748:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c74b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c74f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c755:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c75b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c75f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c763:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c76d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c777:	90                   	nop
c001c778:	83 c4 1c             	add    esp,0x1c
c001c77b:	c3                   	ret    

c001c77c <LogicalDisk::assignDriveLetter()>:
c001c77c:	55                   	push   ebp
c001c77d:	57                   	push   edi
c001c77e:	56                   	push   esi
c001c77f:	53                   	push   ebx
c001c780:	83 ec 14             	sub    esp,0x14
c001c783:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c787:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c78d:	b0 41                	mov    al,0x41
c001c78f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c795:	84 d2                	test   dl,dl
c001c797:	75 02                	jne    c001c79b <LogicalDisk::assignDriveLetter()+0x1f>
c001c799:	b0 43                	mov    al,0x43
c001c79b:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c7a1:	0f b6 ca             	movzx  ecx,dl
c001c7a4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c7a8:	0f be e8             	movsx  ebp,al
c001c7ab:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c7b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c7b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c7b9:	3c 43                	cmp    al,0x43
c001c7bb:	75 10                	jne    c001c7cd <LogicalDisk::assignDriveLetter()+0x51>
c001c7bd:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c7c4:	75 5a                	jne    c001c820 <LogicalDisk::assignDriveLetter()+0xa4>
c001c7c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c7cb:	75 53                	jne    c001c820 <LogicalDisk::assignDriveLetter()+0xa4>
c001c7cd:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c7d0:	ba 01 00 00 00       	mov    edx,0x1
c001c7d5:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7d8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c7db:	d3 e2                	shl    edx,cl
c001c7dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c7e1:	89 d7                	mov    edi,edx
c001c7e3:	89 d6                	mov    esi,edx
c001c7e5:	c1 ff 1f             	sar    edi,0x1f
c001c7e8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c7ec:	21 f9                	and    ecx,edi
c001c7ee:	09 d1                	or     ecx,edx
c001c7f0:	75 2e                	jne    c001c820 <LogicalDisk::assignDriveLetter()+0xa4>
c001c7f2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c7f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c7fa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c800:	09 f2                	or     edx,esi
c001c802:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c805:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c80b:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c812:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c816:	09 fa                	or     edx,edi
c001c818:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c81e:	eb 0d                	jmp    c001c82d <LogicalDisk::assignDriveLetter()+0xb1>
c001c820:	8d 50 01             	lea    edx,[eax+0x1]
c001c823:	45                   	inc    ebp
c001c824:	88 d0                	mov    al,dl
c001c826:	80 fa 5b             	cmp    dl,0x5b
c001c829:	75 8e                	jne    c001c7b9 <LogicalDisk::assignDriveLetter()+0x3d>
c001c82b:	31 c0                	xor    eax,eax
c001c82d:	83 c4 14             	add    esp,0x14
c001c830:	5b                   	pop    ebx
c001c831:	5e                   	pop    esi
c001c832:	5f                   	pop    edi
c001c833:	5d                   	pop    ebp
c001c834:	c3                   	ret    
c001c835:	90                   	nop

c001c836 <LogicalDisk::mount()>:
c001c836:	56                   	push   esi
c001c837:	53                   	push   ebx
c001c838:	53                   	push   ebx
c001c839:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c83d:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c843:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c84d:	85 db                	test   ebx,ebx
c001c84f:	74 27                	je     c001c878 <LogicalDisk::mount()+0x42>
c001c851:	51                   	push   ecx
c001c852:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c859:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c85b:	83 e8 41             	sub    eax,0x41
c001c85e:	50                   	push   eax
c001c85f:	56                   	push   esi
c001c860:	53                   	push   ebx
c001c861:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c864:	83 c4 10             	add    esp,0x10
c001c867:	84 c0                	test   al,al
c001c869:	74 08                	je     c001c873 <LogicalDisk::mount()+0x3d>
c001c86b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c871:	eb 07                	jmp    c001c87a <LogicalDisk::mount()+0x44>
c001c873:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c876:	eb d5                	jmp    c001c84d <LogicalDisk::mount()+0x17>
c001c878:	31 c0                	xor    eax,eax
c001c87a:	5a                   	pop    edx
c001c87b:	5b                   	pop    ebx
c001c87c:	5e                   	pop    esi
c001c87d:	c3                   	ret    

c001c87e <LogicalDisk::unmount()>:
c001c87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c882:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c88c:	c3                   	ret    
c001c88d:	90                   	nop

c001c88e <LogicalDisk::eject()>:
c001c88e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c892:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c898:	8b 10                	mov    edx,DWORD PTR [eax]
c001c89a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c89e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c8a1:	90                   	nop

c001c8a2 <LogicalDisk::unassignDriveLetter()>:
c001c8a2:	57                   	push   edi
c001c8a3:	56                   	push   esi
c001c8a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c8a8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c8af:	85 c9                	test   ecx,ecx
c001c8b1:	75 0f                	jne    c001c8c2 <LogicalDisk::unassignDriveLetter()+0x20>
c001c8b3:	c7 44 24 0c 38 24 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032438
c001c8bb:	5e                   	pop    esi
c001c8bc:	5f                   	pop    edi
c001c8bd:	e9 dc 3b 00 00       	jmp    c002049e <KePanic(char const*)>
c001c8c2:	83 e9 41             	sub    ecx,0x41
c001c8c5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c8cc:	b8 01 00 00 00       	mov    eax,0x1
c001c8d1:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c8dc:	d3 e0                	shl    eax,cl
c001c8de:	89 c7                	mov    edi,eax
c001c8e0:	f7 d0                	not    eax
c001c8e2:	c1 ff 1f             	sar    edi,0x1f
c001c8e5:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c8eb:	89 fe                	mov    esi,edi
c001c8ed:	f7 d6                	not    esi
c001c8ef:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c8f5:	5e                   	pop    esi
c001c8f6:	5f                   	pop    edi
c001c8f7:	c3                   	ret    

c001c8f8 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c8f8:	57                   	push   edi
c001c8f9:	56                   	push   esi
c001c8fa:	53                   	push   ebx
c001c8fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c8ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c903:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c907:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c90b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c911:	77 41                	ja     c001c954 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c913:	99                   	cdq    
c001c914:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c91a:	01 c8                	add    eax,ecx
c001c91c:	11 da                	adc    edx,ebx
c001c91e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c924:	19 d7                	sbb    edi,edx
c001c926:	72 33                	jb     c001c95b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c928:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c92e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c934:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c938:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c93c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c942:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c948:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c94c:	5b                   	pop    ebx
c001c94d:	5e                   	pop    esi
c001c94e:	5f                   	pop    edi
c001c94f:	e9 c8 0a 00 00       	jmp    c001d41c <VCache::read(unsigned long long, int, void*)>
c001c954:	b8 05 00 00 00       	mov    eax,0x5
c001c959:	eb 05                	jmp    c001c960 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c95b:	b8 07 00 00 00       	mov    eax,0x7
c001c960:	5b                   	pop    ebx
c001c961:	5e                   	pop    esi
c001c962:	5f                   	pop    edi
c001c963:	c3                   	ret    

c001c964 <LogicalDisk::write(unsigned long long, int, void*)>:
c001c964:	57                   	push   edi
c001c965:	56                   	push   esi
c001c966:	53                   	push   ebx
c001c967:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c96b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c96f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c973:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c977:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c97d:	77 41                	ja     c001c9c0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c97f:	99                   	cdq    
c001c980:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c986:	01 c8                	add    eax,ecx
c001c988:	11 da                	adc    edx,ebx
c001c98a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c990:	19 d7                	sbb    edi,edx
c001c992:	72 33                	jb     c001c9c7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c994:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c99a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c9a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c9a4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c9a8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c9ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c9b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9b8:	5b                   	pop    ebx
c001c9b9:	5e                   	pop    esi
c001c9ba:	5f                   	pop    edi
c001c9bb:	e9 68 09 00 00       	jmp    c001d328 <VCache::write(unsigned long long, int, void*)>
c001c9c0:	b8 05 00 00 00       	mov    eax,0x5
c001c9c5:	eb 05                	jmp    c001c9cc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c9c7:	b8 07 00 00 00       	mov    eax,0x7
c001c9cc:	5b                   	pop    ebx
c001c9cd:	5e                   	pop    esi
c001c9ce:	5f                   	pop    edi
c001c9cf:	c3                   	ret    

c001c9d0 <Mouse::Mouse(char const*)>:
c001c9d0:	83 ec 0c             	sub    esp,0xc
c001c9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d7:	83 ec 08             	sub    esp,0x8
c001c9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9de:	50                   	push   eax
c001c9df:	e8 84 ec ff ff       	call   c001b668 <Device::Device(char const*)>
c001c9e4:	83 c4 10             	add    esp,0x10
c001c9e7:	ba 8c 24 03 c0       	mov    edx,0xc003248c
c001c9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f0:	89 10                	mov    DWORD PTR [eax],edx
c001c9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001ca00:	90                   	nop
c001ca01:	83 c4 0c             	add    esp,0xc
c001ca04:	c3                   	ret    
c001ca05:	90                   	nop
c001ca06:	66 90                	xchg   ax,ax

c001ca08 <Mouse::~Mouse()>:
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	ba 8c 24 03 c0       	mov    edx,0xc003248c
c001ca10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca14:	89 10                	mov    DWORD PTR [eax],edx
c001ca16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1a:	83 ec 0c             	sub    esp,0xc
c001ca1d:	50                   	push   eax
c001ca1e:	e8 e5 e9 ff ff       	call   c001b408 <Device::~Device()>
c001ca23:	83 c4 10             	add    esp,0x10
c001ca26:	90                   	nop
c001ca27:	83 c4 0c             	add    esp,0xc
c001ca2a:	c3                   	ret    
c001ca2b:	90                   	nop

c001ca2c <Mouse::~Mouse()>:
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	83 ec 0c             	sub    esp,0xc
c001ca32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca36:	e8 cd ff ff ff       	call   c001ca08 <Mouse::~Mouse()>
c001ca3b:	83 c4 10             	add    esp,0x10
c001ca3e:	83 ec 08             	sub    esp,0x8
c001ca41:	68 58 01 00 00       	push   0x158
c001ca46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca4a:	e8 09 c9 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001ca4f:	83 c4 10             	add    esp,0x10
c001ca52:	83 c4 0c             	add    esp,0xc
c001ca55:	c3                   	ret    

c001ca56 <NIC::getMAC()>:
c001ca56:	31 c0                	xor    eax,eax
c001ca58:	31 d2                	xor    edx,edx
c001ca5a:	c3                   	ret    
c001ca5b:	90                   	nop

c001ca5c <NIC::write(int, unsigned char*, int*)>:
c001ca5c:	b8 01 00 00 00       	mov    eax,0x1
c001ca61:	c3                   	ret    

c001ca62 <NIC::NIC(char const*)>:
c001ca62:	83 ec 0c             	sub    esp,0xc
c001ca65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca69:	83 ec 08             	sub    esp,0x8
c001ca6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca70:	50                   	push   eax
c001ca71:	e8 f2 eb ff ff       	call   c001b668 <Device::Device(char const*)>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	ba b8 24 03 c0       	mov    edx,0xc00324b8
c001ca7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca82:	89 10                	mov    DWORD PTR [eax],edx
c001ca84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca88:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001ca92:	90                   	nop
c001ca93:	83 c4 0c             	add    esp,0xc
c001ca96:	c3                   	ret    
c001ca97:	90                   	nop

c001ca98 <NIC::~NIC()>:
c001ca98:	83 ec 0c             	sub    esp,0xc
c001ca9b:	ba b8 24 03 c0       	mov    edx,0xc00324b8
c001caa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa4:	89 10                	mov    DWORD PTR [eax],edx
c001caa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caaa:	83 ec 0c             	sub    esp,0xc
c001caad:	50                   	push   eax
c001caae:	e8 55 e9 ff ff       	call   c001b408 <Device::~Device()>
c001cab3:	83 c4 10             	add    esp,0x10
c001cab6:	90                   	nop
c001cab7:	83 c4 0c             	add    esp,0xc
c001caba:	c3                   	ret    
c001cabb:	90                   	nop

c001cabc <NIC::~NIC()>:
c001cabc:	83 ec 0c             	sub    esp,0xc
c001cabf:	83 ec 0c             	sub    esp,0xc
c001cac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cac6:	e8 cd ff ff ff       	call   c001ca98 <NIC::~NIC()>
c001cacb:	83 c4 10             	add    esp,0x10
c001cace:	83 ec 08             	sub    esp,0x8
c001cad1:	68 58 01 00 00       	push   0x158
c001cad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cada:	e8 79 c8 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001cadf:	83 c4 10             	add    esp,0x10
c001cae2:	83 c4 0c             	add    esp,0xc
c001cae5:	c3                   	ret    

c001cae6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001cae6:	55                   	push   ebp
c001cae7:	57                   	push   edi
c001cae8:	56                   	push   esi
c001cae9:	53                   	push   ebx
c001caea:	81 ec 28 01 00 00    	sub    esp,0x128
c001caf0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001caf7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cafe:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001cb05:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001cb0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb10:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cb14:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cb1b:	e8 44 ec ff ff       	call   c001b764 <Device::getName()>
c001cb20:	5a                   	pop    edx
c001cb21:	59                   	pop    ecx
c001cb22:	50                   	push   eax
c001cb23:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001cb27:	55                   	push   ebp
c001cb28:	e8 13 3b fe ff       	call   c0000640 <strcpy>
c001cb2d:	5b                   	pop    ebx
c001cb2e:	58                   	pop    eax
c001cb2f:	68 e4 24 03 c0       	push   0xc00324e4
c001cb34:	55                   	push   ebp
c001cb35:	e8 06 3d fe ff       	call   c0000840 <strcat>
c001cb3a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001cb41:	e8 b0 9a ff ff       	call   c00165f6 <malloc>
c001cb46:	83 c4 0c             	add    esp,0xc
c001cb49:	89 c3                	mov    ebx,eax
c001cb4b:	57                   	push   edi
c001cb4c:	56                   	push   esi
c001cb4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb55:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cb5c:	55                   	push   ebp
c001cb5d:	50                   	push   eax
c001cb5e:	e8 59 fb ff ff       	call   c001c6bc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cb63:	83 c4 14             	add    esp,0x14
c001cb66:	53                   	push   ebx
c001cb67:	e8 10 fc ff ff       	call   c001c77c <LogicalDisk::assignDriveLetter()>
c001cb6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb6f:	e8 c2 fc ff ff       	call   c001c836 <LogicalDisk::mount()>
c001cb74:	58                   	pop    eax
c001cb75:	5a                   	pop    edx
c001cb76:	53                   	push   ebx
c001cb77:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cb7e:	e8 83 e9 ff ff       	call   c001b506 <Device::addChild(Device*)>
c001cb83:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cb89:	5b                   	pop    ebx
c001cb8a:	5e                   	pop    esi
c001cb8b:	5f                   	pop    edi
c001cb8c:	5d                   	pop    ebp
c001cb8d:	c3                   	ret    

c001cb8e <createPartitionsForDisk(PhysicalDisk*)>:
c001cb8e:	55                   	push   ebp
c001cb8f:	57                   	push   edi
c001cb90:	56                   	push   esi
c001cb91:	53                   	push   ebx
c001cb92:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001cb98:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001cb9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cba5:	3d 00 02 00 00       	cmp    eax,0x200
c001cbaa:	74 27                	je     c001cbd3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001cbac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001cbb2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001cbb8:	83 ec 10             	sub    esp,0x10
c001cbbb:	0f a4 f7 0a          	shld   edi,esi,0xa
c001cbbf:	99                   	cdq    
c001cbc0:	c1 e6 0a             	shl    esi,0xa
c001cbc3:	52                   	push   edx
c001cbc4:	89 fd                	mov    ebp,edi
c001cbc6:	50                   	push   eax
c001cbc7:	55                   	push   ebp
c001cbc8:	56                   	push   esi
c001cbc9:	e8 e2 1c 01 00       	call   c002e8b0 <__udivdi3>
c001cbce:	e9 b9 00 00 00       	jmp    c001cc8c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cbd3:	83 ec 0c             	sub    esp,0xc
c001cbd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbd8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001cbdc:	56                   	push   esi
c001cbdd:	6a 01                	push   0x1
c001cbdf:	6a 00                	push   0x0
c001cbe1:	6a 00                	push   0x0
c001cbe3:	53                   	push   ebx
c001cbe4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cbe7:	83 c4 20             	add    esp,0x20
c001cbea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001cbf2:	75 0a                	jne    c001cbfe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001cbf4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001cbfc:	74 2c                	je     c001cc2a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001cbfe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cc04:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cc0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc10:	83 ec 10             	sub    esp,0x10
c001cc13:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cc17:	89 f7                	mov    edi,esi
c001cc19:	c1 e0 0a             	shl    eax,0xa
c001cc1c:	c1 ff 1f             	sar    edi,0x1f
c001cc1f:	57                   	push   edi
c001cc20:	56                   	push   esi
c001cc21:	52                   	push   edx
c001cc22:	50                   	push   eax
c001cc23:	e8 88 1c 01 00       	call   c002e8b0 <__udivdi3>
c001cc28:	eb 62                	jmp    c001cc8c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cc2a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001cc31:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cc38:	89 cf                	mov    edi,ecx
c001cc3a:	83 e2 7f             	and    edx,0x7f
c001cc3d:	83 e7 7f             	and    edi,0x7f
c001cc40:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cc47:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cc4a:	83 e0 7f             	and    eax,0x7f
c001cc4d:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cc50:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cc57:	83 e0 7f             	and    eax,0x7f
c001cc5a:	01 d0                	add    eax,edx
c001cc5c:	89 c5                	mov    ebp,eax
c001cc5e:	84 c0                	test   al,al
c001cc60:	74 41                	je     c001cca3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001cc62:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cc68:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cc6e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc74:	83 ec 10             	sub    esp,0x10
c001cc77:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cc7b:	89 f7                	mov    edi,esi
c001cc7d:	c1 e0 0a             	shl    eax,0xa
c001cc80:	c1 ff 1f             	sar    edi,0x1f
c001cc83:	57                   	push   edi
c001cc84:	56                   	push   esi
c001cc85:	52                   	push   edx
c001cc86:	50                   	push   eax
c001cc87:	e8 24 1c 01 00       	call   c002e8b0 <__udivdi3>
c001cc8c:	83 c4 14             	add    esp,0x14
c001cc8f:	52                   	push   edx
c001cc90:	50                   	push   eax
c001cc91:	6a 00                	push   0x0
c001cc93:	6a 00                	push   0x0
c001cc95:	53                   	push   ebx
c001cc96:	e8 4b fe ff ff       	call   c001cae6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cc9b:	83 c4 20             	add    esp,0x20
c001cc9e:	e9 73 01 00 00       	jmp    c001ce16 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001cca3:	89 f0                	mov    eax,esi
c001cca5:	31 c9                	xor    ecx,ecx
c001cca7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ccae:	75 02                	jne    c001ccb2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ccb0:	89 cd                	mov    ebp,ecx
c001ccb2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001ccb9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001ccc0:	c1 e2 08             	shl    edx,0x8
c001ccc3:	c1 e6 10             	shl    esi,0x10
c001ccc6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001ccce:	09 f2                	or     edx,esi
c001ccd0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001ccd8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001ccdf:	83 c0 10             	add    eax,0x10
c001cce2:	09 f2                	or     edx,esi
c001cce4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cceb:	c1 e6 18             	shl    esi,0x18
c001ccee:	09 f2                	or     edx,esi
c001ccf0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001ccf7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001ccfb:	c1 e6 10             	shl    esi,0x10
c001ccfe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cd05:	c1 e2 08             	shl    edx,0x8
c001cd08:	09 f2                	or     edx,esi
c001cd0a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cd11:	09 f2                	or     edx,esi
c001cd13:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cd1a:	c1 e6 18             	shl    esi,0x18
c001cd1d:	09 f2                	or     edx,esi
c001cd1f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cd23:	41                   	inc    ecx
c001cd24:	83 f9 04             	cmp    ecx,0x4
c001cd27:	0f 85 7a ff ff ff    	jne    c001cca7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001cd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd31:	83 f0 01             	xor    eax,0x1
c001cd34:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cd38:	75 4f                	jne    c001cd89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cd3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd3e:	83 f0 01             	xor    eax,0x1
c001cd41:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cd45:	75 42                	jne    c001cd89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cd47:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd57:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd5d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd63:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd69:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd6d:	89 f7                	mov    edi,esi
c001cd6f:	c1 e0 0a             	shl    eax,0xa
c001cd72:	c1 ff 1f             	sar    edi,0x1f
c001cd75:	57                   	push   edi
c001cd76:	56                   	push   esi
c001cd77:	52                   	push   edx
c001cd78:	50                   	push   eax
c001cd79:	e8 32 1b 01 00       	call   c002e8b0 <__udivdi3>
c001cd7e:	83 c4 10             	add    esp,0x10
c001cd81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cd85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd89:	89 e8                	mov    eax,ebp
c001cd8b:	0f b6 e8             	movzx  ebp,al
c001cd8e:	85 ed                	test   ebp,ebp
c001cd90:	74 50                	je     c001cde2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cd92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd96:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cd9a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd9e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cda2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cda6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cdaa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cdae:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cdb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cdba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cdbe:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cdc2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cdc6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cdca:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cdce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cdd2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cdd6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cdda:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cdde:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cde2:	31 ed                	xor    ebp,ebp
c001cde4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cde8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cdec:	89 f8                	mov    eax,edi
c001cdee:	09 f0                	or     eax,esi
c001cdf0:	74 1e                	je     c001ce10 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cdf2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cdf6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cdfa:	89 d1                	mov    ecx,edx
c001cdfc:	09 c1                	or     ecx,eax
c001cdfe:	74 10                	je     c001ce10 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001ce00:	83 ec 0c             	sub    esp,0xc
c001ce03:	57                   	push   edi
c001ce04:	56                   	push   esi
c001ce05:	52                   	push   edx
c001ce06:	50                   	push   eax
c001ce07:	53                   	push   ebx
c001ce08:	e8 d9 fc ff ff       	call   c001cae6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ce0d:	83 c4 20             	add    esp,0x20
c001ce10:	45                   	inc    ebp
c001ce11:	83 fd 04             	cmp    ebp,0x4
c001ce14:	75 ce                	jne    c001cde4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001ce16:	81 c4 5c 02 00 00    	add    esp,0x25c
c001ce1c:	5b                   	pop    ebx
c001ce1d:	5e                   	pop    esi
c001ce1e:	5f                   	pop    edi
c001ce1f:	5d                   	pop    ebp
c001ce20:	c3                   	ret    
c001ce21:	66 90                	xchg   ax,ax
c001ce23:	90                   	nop

c001ce24 <Serial::Serial(char const*)>:
c001ce24:	83 ec 0c             	sub    esp,0xc
c001ce27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2b:	83 ec 08             	sub    esp,0x8
c001ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce32:	50                   	push   eax
c001ce33:	e8 30 e8 ff ff       	call   c001b668 <Device::Device(char const*)>
c001ce38:	83 c4 10             	add    esp,0x10
c001ce3b:	ba f8 24 03 c0       	mov    edx,0xc00324f8
c001ce40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce44:	89 10                	mov    DWORD PTR [eax],edx
c001ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce4a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001ce54:	90                   	nop
c001ce55:	83 c4 0c             	add    esp,0xc
c001ce58:	c3                   	ret    
c001ce59:	90                   	nop
c001ce5a:	66 90                	xchg   ax,ax

c001ce5c <Serial::~Serial()>:
c001ce5c:	83 ec 0c             	sub    esp,0xc
c001ce5f:	ba f8 24 03 c0       	mov    edx,0xc00324f8
c001ce64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce68:	89 10                	mov    DWORD PTR [eax],edx
c001ce6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6e:	83 ec 0c             	sub    esp,0xc
c001ce71:	50                   	push   eax
c001ce72:	e8 91 e5 ff ff       	call   c001b408 <Device::~Device()>
c001ce77:	83 c4 10             	add    esp,0x10
c001ce7a:	90                   	nop
c001ce7b:	83 c4 0c             	add    esp,0xc
c001ce7e:	c3                   	ret    
c001ce7f:	90                   	nop

c001ce80 <Serial::~Serial()>:
c001ce80:	83 ec 0c             	sub    esp,0xc
c001ce83:	83 ec 0c             	sub    esp,0xc
c001ce86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce8a:	e8 cd ff ff ff       	call   c001ce5c <Serial::~Serial()>
c001ce8f:	83 c4 10             	add    esp,0x10
c001ce92:	83 ec 08             	sub    esp,0x8
c001ce95:	68 58 01 00 00       	push   0x158
c001ce9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce9e:	e8 b5 c4 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001cea3:	83 c4 10             	add    esp,0x10
c001cea6:	83 c4 0c             	add    esp,0xc
c001cea9:	c3                   	ret    
c001ceaa:	66 90                	xchg   ax,ax

c001ceac <Timer::Timer(char const*)>:
c001ceac:	83 ec 0c             	sub    esp,0xc
c001ceaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb3:	83 ec 08             	sub    esp,0x8
c001ceb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceba:	50                   	push   eax
c001cebb:	e8 a8 e7 ff ff       	call   c001b668 <Device::Device(char const*)>
c001cec0:	83 c4 10             	add    esp,0x10
c001cec3:	ba 3c 25 03 c0       	mov    edx,0xc003253c
c001cec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cecc:	89 10                	mov    DWORD PTR [eax],edx
c001cece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cedc:	90                   	nop
c001cedd:	83 c4 0c             	add    esp,0xc
c001cee0:	c3                   	ret    
c001cee1:	90                   	nop
c001cee2:	66 90                	xchg   ax,ax

c001cee4 <Timer::~Timer()>:
c001cee4:	83 ec 0c             	sub    esp,0xc
c001cee7:	ba 3c 25 03 c0       	mov    edx,0xc003253c
c001ceec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef0:	89 10                	mov    DWORD PTR [eax],edx
c001cef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef6:	83 ec 0c             	sub    esp,0xc
c001cef9:	50                   	push   eax
c001cefa:	e8 09 e5 ff ff       	call   c001b408 <Device::~Device()>
c001ceff:	83 c4 10             	add    esp,0x10
c001cf02:	90                   	nop
c001cf03:	83 c4 0c             	add    esp,0xc
c001cf06:	c3                   	ret    
c001cf07:	90                   	nop

c001cf08 <Timer::~Timer()>:
c001cf08:	83 ec 0c             	sub    esp,0xc
c001cf0b:	83 ec 0c             	sub    esp,0xc
c001cf0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf12:	e8 cd ff ff ff       	call   c001cee4 <Timer::~Timer()>
c001cf17:	83 c4 10             	add    esp,0x10
c001cf1a:	83 ec 08             	sub    esp,0x8
c001cf1d:	68 5c 01 00 00       	push   0x15c
c001cf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf26:	e8 2d c4 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001cf2b:	83 c4 10             	add    esp,0x10
c001cf2e:	83 c4 0c             	add    esp,0xc
c001cf31:	c3                   	ret    

c001cf32 <Timer::read()>:
c001cf32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf3c:	c3                   	ret    

c001cf3d <setupTimer(int)>:
c001cf3d:	53                   	push   ebx
c001cf3e:	83 ec 14             	sub    esp,0x14
c001cf41:	68 5c 01 00 00       	push   0x15c
c001cf46:	e8 ab 96 ff ff       	call   c00165f6 <malloc>
c001cf4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf4e:	89 c3                	mov    ebx,eax
c001cf50:	e8 e3 11 01 00       	call   c002e138 <PIT::PIT()>
c001cf55:	58                   	pop    eax
c001cf56:	5a                   	pop    edx
c001cf57:	53                   	push   ebx
c001cf58:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cf5e:	e8 a3 e5 ff ff       	call   c001b506 <Device::addChild(Device*)>
c001cf63:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf65:	6a 00                	push   0x0
c001cf67:	6a 00                	push   0x0
c001cf69:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cf6d:	53                   	push   ebx
c001cf6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf71:	89 d8                	mov    eax,ebx
c001cf73:	83 c4 28             	add    esp,0x28
c001cf76:	5b                   	pop    ebx
c001cf77:	c3                   	ret    

c001cf78 <timerHandler(unsigned int)>:
c001cf78:	57                   	push   edi
c001cf79:	56                   	push   esi
c001cf7a:	53                   	push   ebx
c001cf7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cf7f:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cf85:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cf8c:	0f 84 46 01 00 00    	je     c001d0d8 <timerHandler(unsigned int)+0x160>
c001cf92:	fa                   	cli    
c001cf93:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cf99:	83 ec 0c             	sub    esp,0xc
c001cf9c:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cfa2:	68 e0 01 04 c0       	push   0xc00401e0
c001cfa7:	e8 d4 1e 01 00       	call   c002ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cfac:	83 c4 10             	add    esp,0x10
c001cfaf:	84 c0                	test   al,al
c001cfb1:	0f 85 a1 00 00 00    	jne    c001d058 <timerHandler(unsigned int)+0xe0>
c001cfb7:	83 ec 0c             	sub    esp,0xc
c001cfba:	68 e0 01 04 c0       	push   0xc00401e0
c001cfbf:	e8 d8 1e 01 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cfc4:	83 c4 10             	add    esp,0x10
c001cfc7:	89 c6                	mov    esi,eax
c001cfc9:	8d 76 00             	lea    esi,[esi+0x0]
c001cfcc:	83 ec 0c             	sub    esp,0xc
c001cfcf:	68 e0 01 04 c0       	push   0xc00401e0
c001cfd4:	e8 c3 1e 01 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cfd9:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cfe0:	89 c3                	mov    ebx,eax
c001cfe2:	e8 bd 1e 01 00       	call   c002eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cfe7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cfea:	83 c4 10             	add    esp,0x10
c001cfed:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cff3:	77 23                	ja     c001d018 <timerHandler(unsigned int)+0xa0>
c001cff5:	83 ec 0c             	sub    esp,0xc
c001cff8:	53                   	push   ebx
c001cff9:	e8 ae 87 00 00       	call   c00257ac <unblockTask(ThreadControlBlock*)>
c001cffe:	83 c4 10             	add    esp,0x10
c001d001:	39 de                	cmp    esi,ebx
c001d003:	75 27                	jne    c001d02c <timerHandler(unsigned int)+0xb4>
c001d005:	83 ec 0c             	sub    esp,0xc
c001d008:	68 e0 01 04 c0       	push   0xc00401e0
c001d00d:	e8 8a 1e 01 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d012:	89 c6                	mov    esi,eax
c001d014:	eb 12                	jmp    c001d028 <timerHandler(unsigned int)+0xb0>
c001d016:	66 90                	xchg   ax,ax
c001d018:	50                   	push   eax
c001d019:	50                   	push   eax
c001d01a:	53                   	push   ebx
c001d01b:	68 e0 01 04 c0       	push   0xc00401e0
c001d020:	e8 3b 1f 01 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d025:	8d 76 00             	lea    esi,[esi+0x0]
c001d028:	83 c4 10             	add    esp,0x10
c001d02b:	90                   	nop
c001d02c:	83 ec 0c             	sub    esp,0xc
c001d02f:	68 e0 01 04 c0       	push   0xc00401e0
c001d034:	e8 47 1e 01 00       	call   c002ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d039:	83 c4 10             	add    esp,0x10
c001d03c:	84 c0                	test   al,al
c001d03e:	75 18                	jne    c001d058 <timerHandler(unsigned int)+0xe0>
c001d040:	83 ec 0c             	sub    esp,0xc
c001d043:	68 e0 01 04 c0       	push   0xc00401e0
c001d048:	e8 4f 1e 01 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d04d:	83 c4 10             	add    esp,0x10
c001d050:	39 f0                	cmp    eax,esi
c001d052:	0f 85 74 ff ff ff    	jne    c001cfcc <timerHandler(unsigned int)+0x54>
c001d058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d05d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001d061:	74 3d                	je     c001d0a0 <timerHandler(unsigned int)+0x128>
c001d063:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001d06a:	74 34                	je     c001d0a0 <timerHandler(unsigned int)+0x128>
c001d06c:	fa                   	cli    
c001d06d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001d073:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001d079:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d07e:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001d081:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d086:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001d089:	77 05                	ja     c001d090 <timerHandler(unsigned int)+0x118>
c001d08b:	e8 24 84 00 00       	call   c00254b4 <schedule()>
c001d090:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d095:	48                   	dec    eax
c001d096:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d09b:	75 03                	jne    c001d0a0 <timerHandler(unsigned int)+0x128>
c001d09d:	fb                   	sti    
c001d09e:	66 90                	xchg   ax,ax
c001d0a0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001d0a5:	48                   	dec    eax
c001d0a6:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001d0ab:	75 1b                	jne    c001d0c8 <timerHandler(unsigned int)+0x150>
c001d0ad:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001d0b4:	74 12                	je     c001d0c8 <timerHandler(unsigned int)+0x150>
c001d0b6:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001d0c0:	e8 ef 83 00 00       	call   c00254b4 <schedule()>
c001d0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0c8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d0cd:	48                   	dec    eax
c001d0ce:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d0d3:	75 03                	jne    c001d0d8 <timerHandler(unsigned int)+0x160>
c001d0d5:	fb                   	sti    
c001d0d6:	66 90                	xchg   ax,ax
c001d0d8:	5b                   	pop    ebx
c001d0d9:	5e                   	pop    esi
c001d0da:	5f                   	pop    edi
c001d0db:	c3                   	ret    

c001d0dc <VCache::VCache(PhysicalDisk*)>:
c001d0dc:	53                   	push   ebx
c001d0dd:	83 ec 18             	sub    esp,0x18
c001d0e0:	ba 6c 25 03 c0       	mov    edx,0xc003256c
c001d0e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0e9:	89 10                	mov    DWORD PTR [eax],edx
c001d0eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ef:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001d0f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0fa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001d101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d105:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001d10c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d117:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001d11e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d129:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d134:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d13c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001d143:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001d14a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d14e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d156:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001d15a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d15e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d166:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d16d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001d175:	83 ec 0c             	sub    esp,0xc
c001d178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d17c:	e8 75 94 ff ff       	call   c00165f6 <malloc>
c001d181:	83 c4 10             	add    esp,0x10
c001d184:	89 c3                	mov    ebx,eax
c001d186:	83 ec 0c             	sub    esp,0xc
c001d189:	53                   	push   ebx
c001d18a:	e8 f5 32 00 00       	call   c0020484 <Mutex::Mutex()>
c001d18f:	83 c4 10             	add    esp,0x10
c001d192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d196:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d199:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d19d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d1a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d1a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1a8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d1af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1b3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d1b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d1c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1c4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d1ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d1d4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d1d7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d1da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1de:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d1e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d1ec:	05 00 02 00 00       	add    eax,0x200
c001d1f1:	c1 e0 03             	shl    eax,0x3
c001d1f4:	83 ec 0c             	sub    esp,0xc
c001d1f7:	50                   	push   eax
c001d1f8:	e8 f9 93 ff ff       	call   c00165f6 <malloc>
c001d1fd:	83 c4 10             	add    esp,0x10
c001d200:	89 c2                	mov    edx,eax
c001d202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d206:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d20d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d218:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d21c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d220:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d226:	89 d0                	mov    eax,edx
c001d228:	c1 e0 02             	shl    eax,0x2
c001d22b:	01 d0                	add    eax,edx
c001d22d:	c1 e0 04             	shl    eax,0x4
c001d230:	83 ec 0c             	sub    esp,0xc
c001d233:	50                   	push   eax
c001d234:	e8 bd 93 ff ff       	call   c00165f6 <malloc>
c001d239:	83 c4 10             	add    esp,0x10
c001d23c:	89 c2                	mov    edx,eax
c001d23e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d242:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d245:	90                   	nop
c001d246:	83 c4 18             	add    esp,0x18
c001d249:	5b                   	pop    ebx
c001d24a:	c3                   	ret    
c001d24b:	90                   	nop

c001d24c <VCache::invalidateReadBuffer()>:
c001d24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d250:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d256:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d25a:	c3                   	ret    
c001d25b:	90                   	nop

c001d25c <VCache::writeWriteBuffer()>:
c001d25c:	53                   	push   ebx
c001d25d:	83 ec 08             	sub    esp,0x8
c001d260:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d264:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d268:	74 1e                	je     c001d288 <VCache::writeWriteBuffer()+0x2c>
c001d26a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d26d:	83 ec 0c             	sub    esp,0xc
c001d270:	8b 10                	mov    edx,DWORD PTR [eax]
c001d272:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d275:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d278:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d27b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d27e:	50                   	push   eax
c001d27f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d282:	83 c4 20             	add    esp,0x20
c001d285:	8d 76 00             	lea    esi,[esi+0x0]
c001d288:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d28f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d296:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d29a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d2a1:	83 c4 08             	add    esp,0x8
c001d2a4:	5b                   	pop    ebx
c001d2a5:	c3                   	ret    
c001d2a6:	66 90                	xchg   ax,ax

c001d2a8 <VCache::~VCache()>:
c001d2a8:	83 ec 0c             	sub    esp,0xc
c001d2ab:	ba 6c 25 03 c0       	mov    edx,0xc003256c
c001d2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b4:	89 10                	mov    DWORD PTR [eax],edx
c001d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ba:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d2bd:	0f b6 c0             	movzx  eax,al
c001d2c0:	85 c0                	test   eax,eax
c001d2c2:	74 10                	je     c001d2d4 <VCache::~VCache()+0x2c>
c001d2c4:	83 ec 0c             	sub    esp,0xc
c001d2c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2cb:	e8 8c ff ff ff       	call   c001d25c <VCache::writeWriteBuffer()>
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	90                   	nop
c001d2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d2db:	83 ec 0c             	sub    esp,0xc
c001d2de:	50                   	push   eax
c001d2df:	e8 22 93 ff ff       	call   c0016606 <free>
c001d2e4:	83 c4 10             	add    esp,0x10
c001d2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d2ee:	83 ec 0c             	sub    esp,0xc
c001d2f1:	50                   	push   eax
c001d2f2:	e8 0f 93 ff ff       	call   c0016606 <free>
c001d2f7:	83 c4 10             	add    esp,0x10
c001d2fa:	90                   	nop
c001d2fb:	83 c4 0c             	add    esp,0xc
c001d2fe:	c3                   	ret    
c001d2ff:	90                   	nop

c001d300 <VCache::~VCache()>:
c001d300:	83 ec 0c             	sub    esp,0xc
c001d303:	83 ec 0c             	sub    esp,0xc
c001d306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d30a:	e8 99 ff ff ff       	call   c001d2a8 <VCache::~VCache()>
c001d30f:	83 c4 10             	add    esp,0x10
c001d312:	83 ec 08             	sub    esp,0x8
c001d315:	6a 44                	push   0x44
c001d317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d31b:	e8 38 c0 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001d320:	83 c4 10             	add    esp,0x10
c001d323:	83 c4 0c             	add    esp,0xc
c001d326:	c3                   	ret    
c001d327:	90                   	nop

c001d328 <VCache::write(unsigned long long, int, void*)>:
c001d328:	55                   	push   ebp
c001d329:	57                   	push   edi
c001d32a:	56                   	push   esi
c001d32b:	53                   	push   ebx
c001d32c:	83 ec 1c             	sub    esp,0x1c
c001d32f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d333:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d337:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d33b:	e8 dc 7e 00 00       	call   c002521c <KeDisablePreemption()>
c001d340:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d344:	74 0e                	je     c001d354 <VCache::write(unsigned long long, int, void*)+0x2c>
c001d346:	83 ec 0c             	sub    esp,0xc
c001d349:	53                   	push   ebx
c001d34a:	e8 fd fe ff ff       	call   c001d24c <VCache::invalidateReadBuffer()>
c001d34f:	83 c4 10             	add    esp,0x10
c001d352:	66 90                	xchg   ax,ax
c001d354:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d358:	74 5e                	je     c001d3b8 <VCache::write(unsigned long long, int, void*)+0x90>
c001d35a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d35d:	89 e8                	mov    eax,ebp
c001d35f:	99                   	cdq    
c001d360:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d363:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d366:	89 c1                	mov    ecx,eax
c001d368:	89 d0                	mov    eax,edx
c001d36a:	31 f1                	xor    ecx,esi
c001d36c:	31 f8                	xor    eax,edi
c001d36e:	09 c1                	or     ecx,eax
c001d370:	75 3a                	jne    c001d3ac <VCache::write(unsigned long long, int, void*)+0x84>
c001d372:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d377:	75 33                	jne    c001d3ac <VCache::write(unsigned long long, int, void*)+0x84>
c001d379:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d37c:	89 ef                	mov    edi,ebp
c001d37e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d384:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d388:	0f af f9             	imul   edi,ecx
c001d38b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d38e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d390:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d393:	40                   	inc    eax
c001d394:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d397:	83 f8 50             	cmp    eax,0x50
c001d39a:	75 70                	jne    c001d40c <VCache::write(unsigned long long, int, void*)+0xe4>
c001d39c:	83 ec 0c             	sub    esp,0xc
c001d39f:	53                   	push   ebx
c001d3a0:	e8 b7 fe ff ff       	call   c001d25c <VCache::writeWriteBuffer()>
c001d3a5:	83 c4 10             	add    esp,0x10
c001d3a8:	eb 62                	jmp    c001d40c <VCache::write(unsigned long long, int, void*)+0xe4>
c001d3aa:	66 90                	xchg   ax,ax
c001d3ac:	83 ec 0c             	sub    esp,0xc
c001d3af:	53                   	push   ebx
c001d3b0:	e8 a7 fe ff ff       	call   c001d25c <VCache::writeWriteBuffer()>
c001d3b5:	83 c4 10             	add    esp,0x10
c001d3b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d3bb:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d3c0:	7f 22                	jg     c001d3e4 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d3c2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d3c5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d3c8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d3cc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d3d0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d3d3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d3d6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d3dc:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d3e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3e2:	eb 28                	jmp    c001d40c <VCache::write(unsigned long long, int, void*)+0xe4>
c001d3e4:	83 ec 0c             	sub    esp,0xc
c001d3e7:	8b 10                	mov    edx,DWORD PTR [eax]
c001d3e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3f1:	57                   	push   edi
c001d3f2:	56                   	push   esi
c001d3f3:	50                   	push   eax
c001d3f4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d3f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3fb:	83 c4 20             	add    esp,0x20
c001d3fe:	e8 41 7e 00 00       	call   c0025244 <KeRestorePreemption()>
c001d403:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d407:	eb 0b                	jmp    c001d414 <VCache::write(unsigned long long, int, void*)+0xec>
c001d409:	8d 76 00             	lea    esi,[esi+0x0]
c001d40c:	e8 33 7e 00 00       	call   c0025244 <KeRestorePreemption()>
c001d411:	31 c0                	xor    eax,eax
c001d413:	90                   	nop
c001d414:	83 c4 1c             	add    esp,0x1c
c001d417:	5b                   	pop    ebx
c001d418:	5e                   	pop    esi
c001d419:	5f                   	pop    edi
c001d41a:	5d                   	pop    ebp
c001d41b:	c3                   	ret    

c001d41c <VCache::read(unsigned long long, int, void*)>:
c001d41c:	55                   	push   ebp
c001d41d:	57                   	push   edi
c001d41e:	56                   	push   esi
c001d41f:	53                   	push   ebx
c001d420:	83 ec 1c             	sub    esp,0x1c
c001d423:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d427:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d42b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d42f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d433:	e8 e4 7d 00 00       	call   c002521c <KeDisablePreemption()>
c001d438:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d43c:	74 0e                	je     c001d44c <VCache::read(unsigned long long, int, void*)+0x30>
c001d43e:	83 ec 0c             	sub    esp,0xc
c001d441:	53                   	push   ebx
c001d442:	e8 15 fe ff ff       	call   c001d25c <VCache::writeWriteBuffer()>
c001d447:	83 c4 10             	add    esp,0x10
c001d44a:	66 90                	xchg   ax,ax
c001d44c:	83 fd 01             	cmp    ebp,0x1
c001d44f:	0f 85 97 00 00 00    	jne    c001d4ec <VCache::read(unsigned long long, int, void*)+0xd0>
c001d455:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d458:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d45c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d463:	0f 85 83 00 00 00    	jne    c001d4ec <VCache::read(unsigned long long, int, void*)+0xd0>
c001d469:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d46c:	89 e9                	mov    ecx,ebp
c001d46e:	f7 d9                	neg    ecx
c001d470:	89 c8                	mov    eax,ecx
c001d472:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d476:	c1 f8 1f             	sar    eax,0x1f
c001d479:	21 f1                	and    ecx,esi
c001d47b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d47f:	89 c8                	mov    eax,ecx
c001d481:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d485:	21 f9                	and    ecx,edi
c001d487:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d48b:	89 ca                	mov    edx,ecx
c001d48d:	74 31                	je     c001d4c0 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d48f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d492:	75 2c                	jne    c001d4c0 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d494:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d497:	75 27                	jne    c001d4c0 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d499:	8d 76 00             	lea    esi,[esi+0x0]
c001d49c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d49f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d4a3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d4a9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4ac:	48                   	dec    eax
c001d4ad:	21 c6                	and    esi,eax
c001d4af:	0f af f1             	imul   esi,ecx
c001d4b2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d4b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4b7:	e8 88 7d 00 00       	call   c0025244 <KeRestorePreemption()>
c001d4bc:	31 c0                	xor    eax,eax
c001d4be:	eb 58                	jmp    c001d518 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d4c0:	83 ec 0c             	sub    esp,0xc
c001d4c3:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d4c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d4cb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d4ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d4d1:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d4d3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d4d6:	55                   	push   ebp
c001d4d7:	52                   	push   edx
c001d4d8:	50                   	push   eax
c001d4d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d4dd:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d4e0:	83 c4 20             	add    esp,0x20
c001d4e3:	85 c0                	test   eax,eax
c001d4e5:	75 31                	jne    c001d518 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d4e7:	eb b3                	jmp    c001d49c <VCache::read(unsigned long long, int, void*)+0x80>
c001d4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	53                   	push   ebx
c001d4f0:	e8 57 fd ff ff       	call   c001d24c <VCache::invalidateReadBuffer()>
c001d4f5:	5a                   	pop    edx
c001d4f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4f9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4ff:	55                   	push   ebp
c001d500:	57                   	push   edi
c001d501:	56                   	push   esi
c001d502:	50                   	push   eax
c001d503:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d506:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d50a:	83 c4 20             	add    esp,0x20
c001d50d:	e8 32 7d 00 00       	call   c0025244 <KeRestorePreemption()>
c001d512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d516:	66 90                	xchg   ax,ax
c001d518:	83 c4 1c             	add    esp,0x1c
c001d51b:	5b                   	pop    ebx
c001d51c:	5e                   	pop    esi
c001d51d:	5f                   	pop    edi
c001d51e:	5d                   	pop    ebp
c001d51f:	c3                   	ret    

c001d520 <Video::putrect(int, int, int, int, unsigned int)>:
c001d520:	55                   	push   ebp
c001d521:	57                   	push   edi
c001d522:	56                   	push   esi
c001d523:	53                   	push   ebx
c001d524:	83 ec 1c             	sub    esp,0x1c
c001d527:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d52b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d52f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d533:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d537:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d53b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d53f:	01 df                	add    edi,ebx
c001d541:	39 fb                	cmp    ebx,edi
c001d543:	7d 1f                	jge    c001d564 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d545:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d549:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d54d:	7d 12                	jge    c001d561 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d54f:	8b 16                	mov    edx,DWORD PTR [esi]
c001d551:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d555:	53                   	push   ebx
c001d556:	55                   	push   ebp
c001d557:	45                   	inc    ebp
c001d558:	56                   	push   esi
c001d559:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	eb e8                	jmp    c001d549 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d561:	43                   	inc    ebx
c001d562:	eb dd                	jmp    c001d541 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d564:	83 c4 1c             	add    esp,0x1c
c001d567:	5b                   	pop    ebx
c001d568:	5e                   	pop    esi
c001d569:	5f                   	pop    edi
c001d56a:	5d                   	pop    ebp
c001d56b:	c3                   	ret    

c001d56c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d56c:	55                   	push   ebp
c001d56d:	57                   	push   edi
c001d56e:	31 ff                	xor    edi,edi
c001d570:	56                   	push   esi
c001d571:	53                   	push   ebx
c001d572:	83 ec 1c             	sub    esp,0x1c
c001d575:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d579:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d57d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d584:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d589:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d58d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d591:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d595:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d598:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d59c:	01 f9                	add    ecx,edi
c001d59e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d5a2:	7d 2f                	jge    c001d5d3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d5a4:	31 f6                	xor    esi,esi
c001d5a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d5aa:	01 f2                	add    edx,esi
c001d5ac:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d5b0:	7d 1a                	jge    c001d5cc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d5b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5b5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d5b8:	46                   	inc    esi
c001d5b9:	51                   	push   ecx
c001d5ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d5be:	52                   	push   edx
c001d5bf:	55                   	push   ebp
c001d5c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d5c3:	83 c4 10             	add    esp,0x10
c001d5c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5ca:	eb da                	jmp    c001d5a6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d5cc:	47                   	inc    edi
c001d5cd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d5d1:	eb c5                	jmp    c001d598 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d5d3:	83 c4 1c             	add    esp,0x1c
c001d5d6:	5b                   	pop    ebx
c001d5d7:	5e                   	pop    esi
c001d5d8:	5f                   	pop    edi
c001d5d9:	5d                   	pop    ebp
c001d5da:	c3                   	ret    
c001d5db:	90                   	nop

c001d5dc <Video::blit(unsigned int*, int, int, int, int)>:
c001d5dc:	55                   	push   ebp
c001d5dd:	57                   	push   edi
c001d5de:	56                   	push   esi
c001d5df:	53                   	push   ebx
c001d5e0:	83 ec 1c             	sub    esp,0x1c
c001d5e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d5e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d5eb:	85 c0                	test   eax,eax
c001d5ed:	79 02                	jns    c001d5f1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d5ef:	31 c0                	xor    eax,eax
c001d5f1:	c1 e0 02             	shl    eax,0x2
c001d5f4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d600:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d604:	39 d8                	cmp    eax,ebx
c001d606:	7e 49                	jle    c001d651 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d608:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d60e:	7c 41                	jl     c001d651 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d610:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d614:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d618:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d61c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d620:	39 f9                	cmp    ecx,edi
c001d622:	7e 22                	jle    c001d646 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d624:	83 c5 04             	add    ebp,0x4
c001d627:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d62d:	7c 14                	jl     c001d643 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d62f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d631:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d634:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d638:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d63c:	56                   	push   esi
c001d63d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d640:	83 c4 10             	add    esp,0x10
c001d643:	47                   	inc    edi
c001d644:	eb d2                	jmp    c001d618 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d64a:	43                   	inc    ebx
c001d64b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d64f:	eb ab                	jmp    c001d5fc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d651:	83 c4 1c             	add    esp,0x1c
c001d654:	5b                   	pop    ebx
c001d655:	5e                   	pop    esi
c001d656:	5f                   	pop    edi
c001d657:	5d                   	pop    ebp
c001d658:	c3                   	ret    
c001d659:	90                   	nop

c001d65a <Video::clearScreen(unsigned int)>:
c001d65a:	57                   	push   edi
c001d65b:	56                   	push   esi
c001d65c:	53                   	push   ebx
c001d65d:	31 db                	xor    ebx,ebx
c001d65f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d663:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d669:	7e 1f                	jle    c001d68a <Video::clearScreen(unsigned int)+0x30>
c001d66b:	31 ff                	xor    edi,edi
c001d66d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d673:	7e 12                	jle    c001d687 <Video::clearScreen(unsigned int)+0x2d>
c001d675:	8b 06                	mov    eax,DWORD PTR [esi]
c001d677:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d67b:	53                   	push   ebx
c001d67c:	57                   	push   edi
c001d67d:	47                   	inc    edi
c001d67e:	56                   	push   esi
c001d67f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d682:	83 c4 10             	add    esp,0x10
c001d685:	eb e6                	jmp    c001d66d <Video::clearScreen(unsigned int)+0x13>
c001d687:	43                   	inc    ebx
c001d688:	eb d9                	jmp    c001d663 <Video::clearScreen(unsigned int)+0x9>
c001d68a:	5b                   	pop    ebx
c001d68b:	5e                   	pop    esi
c001d68c:	5f                   	pop    edi
c001d68d:	c3                   	ret    

c001d68e <Video::putpixel(int, int, unsigned int)>:
c001d68e:	c7 44 24 04 74 25 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032574
c001d696:	e9 03 2e 00 00       	jmp    c002049e <KePanic(char const*)>
c001d69b:	90                   	nop

c001d69c <Video::readPixelApprox(int, int)>:
c001d69c:	83 ec 18             	sub    esp,0x18
c001d69f:	68 95 25 03 c0       	push   0xc0032595
c001d6a4:	e8 f5 2d 00 00       	call   c002049e <KePanic(char const*)>
c001d6a9:	31 c0                	xor    eax,eax
c001d6ab:	83 c4 1c             	add    esp,0x1c
c001d6ae:	c3                   	ret    
c001d6af:	90                   	nop

c001d6b0 <Video::Video(char const*)>:
c001d6b0:	83 ec 0c             	sub    esp,0xc
c001d6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6b7:	83 ec 08             	sub    esp,0x8
c001d6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6be:	50                   	push   eax
c001d6bf:	e8 a4 df ff ff       	call   c001b668 <Device::Device(char const*)>
c001d6c4:	83 c4 10             	add    esp,0x10
c001d6c7:	ba 38 26 03 c0       	mov    edx,0xc0032638
c001d6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6d0:	89 10                	mov    DWORD PTR [eax],edx
c001d6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6d6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d6e0:	90                   	nop
c001d6e1:	83 c4 0c             	add    esp,0xc
c001d6e4:	c3                   	ret    
c001d6e5:	90                   	nop

c001d6e6 <Video::~Video()>:
c001d6e6:	83 ec 0c             	sub    esp,0xc
c001d6e9:	ba 38 26 03 c0       	mov    edx,0xc0032638
c001d6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f2:	89 10                	mov    DWORD PTR [eax],edx
c001d6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f8:	83 ec 0c             	sub    esp,0xc
c001d6fb:	50                   	push   eax
c001d6fc:	e8 07 dd ff ff       	call   c001b408 <Device::~Device()>
c001d701:	83 c4 10             	add    esp,0x10
c001d704:	90                   	nop
c001d705:	83 c4 0c             	add    esp,0xc
c001d708:	c3                   	ret    
c001d709:	90                   	nop

c001d70a <Video::~Video()>:
c001d70a:	83 ec 0c             	sub    esp,0xc
c001d70d:	83 ec 0c             	sub    esp,0xc
c001d710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d714:	e8 cd ff ff ff       	call   c001d6e6 <Video::~Video()>
c001d719:	83 c4 10             	add    esp,0x10
c001d71c:	83 ec 08             	sub    esp,0x8
c001d71f:	68 64 01 00 00       	push   0x164
c001d724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d728:	e8 2b bc ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c001d72d:	83 c4 10             	add    esp,0x10
c001d730:	83 c4 0c             	add    esp,0xc
c001d733:	c3                   	ret    

c001d734 <Video::isMonochrome()>:
c001d734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d738:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d73e:	c3                   	ret    
c001d73f:	90                   	nop

c001d740 <Video::getWidth()>:
c001d740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d744:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d74a:	c3                   	ret    
c001d74b:	90                   	nop

c001d74c <Video::getHeight()>:
c001d74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d750:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d756:	c3                   	ret    
c001d757:	90                   	nop

c001d758 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d758:	55                   	push   ebp
c001d759:	57                   	push   edi
c001d75a:	56                   	push   esi
c001d75b:	53                   	push   ebx
c001d75c:	83 ec 2c             	sub    esp,0x2c
c001d75f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d763:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d767:	83 f8 01             	cmp    eax,0x1
c001d76a:	19 c9                	sbb    ecx,ecx
c001d76c:	31 db                	xor    ebx,ebx
c001d76e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d772:	89 cd                	mov    ebp,ecx
c001d774:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d77c:	f7 d5                	not    ebp
c001d77e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d784:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d788:	01 d8                	add    eax,ebx
c001d78a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d78e:	56                   	push   esi
c001d78f:	e8 b8 ff ff ff       	call   c001d74c <Video::getHeight()>
c001d794:	59                   	pop    ecx
c001d795:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d799:	7e 70                	jle    c001d80b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d79b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d79f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d7a3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d7a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7aa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7ae:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d7b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d7b9:	89 f8                	mov    eax,edi
c001d7bb:	83 c0 20             	add    eax,0x20
c001d7be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d7c2:	56                   	push   esi
c001d7c3:	e8 78 ff ff ff       	call   c001d740 <Video::getWidth()>
c001d7c8:	5a                   	pop    edx
c001d7c9:	39 c7                	cmp    edi,eax
c001d7cb:	7d 34                	jge    c001d801 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d7cd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d7d2:	74 05                	je     c001d7d9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d7d4:	8b 06                	mov    eax,DWORD PTR [esi]
c001d7d6:	55                   	push   ebp
c001d7d7:	eb 0d                	jmp    c001d7e6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d7d9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d7de:	74 12                	je     c001d7f2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d7e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d7e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7ea:	57                   	push   edi
c001d7eb:	56                   	push   esi
c001d7ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d7f6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d7fa:	47                   	inc    edi
c001d7fb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d7ff:	75 c1                	jne    c001d7c2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d801:	43                   	inc    ebx
c001d802:	83 fb 20             	cmp    ebx,0x20
c001d805:	0f 85 79 ff ff ff    	jne    c001d784 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d80b:	83 c4 2c             	add    esp,0x2c
c001d80e:	5b                   	pop    ebx
c001d80f:	5e                   	pop    esi
c001d810:	5f                   	pop    edi
c001d811:	5d                   	pop    ebp
c001d812:	c3                   	ret    
c001d813:	90                   	nop

c001d814 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d814:	55                   	push   ebp
c001d815:	57                   	push   edi
c001d816:	56                   	push   esi
c001d817:	53                   	push   ebx
c001d818:	83 ec 48             	sub    esp,0x48
c001d81b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d81f:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d823:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d827:	c1 e0 08             	shl    eax,0x8
c001d82a:	01 d0                	add    eax,edx
c001d82c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d830:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d834:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d838:	c1 e0 08             	shl    eax,0x8
c001d83b:	01 d0                	add    eax,edx
c001d83d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d841:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d845:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d84a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d84e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d852:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d859:	50                   	push   eax
c001d85a:	e8 97 8d ff ff       	call   c00165f6 <malloc>
c001d85f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d863:	83 c4 10             	add    esp,0x10
c001d866:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d86b:	75 10                	jne    c001d87d <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d86d:	83 ec 0c             	sub    esp,0xc
c001d870:	68 c0 25 03 c0       	push   0xc00325c0
c001d875:	e8 24 2c 00 00       	call   c002049e <KePanic(char const*)>
c001d87a:	83 c4 10             	add    esp,0x10
c001d87d:	51                   	push   ecx
c001d87e:	51                   	push   ecx
c001d87f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d883:	50                   	push   eax
c001d884:	68 d0 25 03 c0       	push   0xc00325d0
c001d889:	e8 f7 bb ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001d88e:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d891:	83 e0 20             	and    eax,0x20
c001d894:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d898:	85 c0                	test   eax,eax
c001d89a:	5e                   	pop    esi
c001d89b:	0f 94 c0             	sete   al
c001d89e:	5f                   	pop    edi
c001d89f:	0f b6 c0             	movzx  eax,al
c001d8a2:	be 12 00 00 00       	mov    esi,0x12
c001d8a7:	50                   	push   eax
c001d8a8:	68 da 25 03 c0       	push   0xc00325da
c001d8ad:	e8 d3 bb ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001d8b2:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d8b6:	83 c4 10             	add    esp,0x10
c001d8b9:	89 d0                	mov    eax,edx
c001d8bb:	85 d2                	test   edx,edx
c001d8bd:	74 11                	je     c001d8d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d8bf:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d8c3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d8c7:	c1 fe 03             	sar    esi,0x3
c001d8ca:	0f af f1             	imul   esi,ecx
c001d8cd:	83 c6 12             	add    esi,0x12
c001d8d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d8d5:	74 07                	je     c001d8de <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d8d7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d8dc:	75 12                	jne    c001d8f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d8de:	83 ec 0c             	sub    esp,0xc
c001d8e1:	68 e8 25 03 c0       	push   0xc00325e8
c001d8e6:	e8 9a bb ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001d8eb:	e9 a0 02 00 00       	jmp    c001db90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d8f0:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d8f4:	83 f9 02             	cmp    ecx,0x2
c001d8f7:	74 0e                	je     c001d907 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d8f9:	83 f9 0a             	cmp    ecx,0xa
c001d8fc:	0f 84 c8 00 00 00    	je     c001d9ca <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d902:	e9 72 02 00 00       	jmp    c001db79 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001d907:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d90c:	75 0e                	jne    c001d91c <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d90e:	84 c0                	test   al,al
c001d910:	75 0a                	jne    c001d91c <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d912:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d915:	83 e8 18             	sub    eax,0x18
c001d918:	a8 f7                	test   al,0xf7
c001d91a:	74 0d                	je     c001d929 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001d91c:	83 ec 0c             	sub    esp,0xc
c001d91f:	68 fd 25 03 c0       	push   0xc00325fd
c001d924:	e9 58 02 00 00       	jmp    c001db81 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d929:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001d92e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d936:	31 c0                	xor    eax,eax
c001d938:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d93c:	89 c7                	mov    edi,eax
c001d93e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d946:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001d94b:	75 15                	jne    c001d962 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d94d:	99                   	cdq    
c001d94e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d952:	85 d2                	test   edx,edx
c001d954:	75 0c                	jne    c001d962 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d956:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d95a:	29 c7                	sub    edi,eax
c001d95c:	4f                   	dec    edi
c001d95d:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001d962:	31 d2                	xor    edx,edx
c001d964:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d968:	75 08                	jne    c001d972 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001d96a:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001d96f:	c1 e2 18             	shl    edx,0x18
c001d972:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001d977:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d97b:	c1 e1 10             	shl    ecx,0x10
c001d97e:	8d 47 01             	lea    eax,[edi+0x1]
c001d981:	89 cd                	mov    ebp,ecx
c001d983:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001d988:	c1 e1 08             	shl    ecx,0x8
c001d98b:	09 e9                	or     ecx,ebp
c001d98d:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d991:	09 e9                	or     ecx,ebp
c001d993:	09 d1                	or     ecx,edx
c001d995:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d999:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001d99c:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d9a0:	c1 fa 03             	sar    edx,0x3
c001d9a3:	01 d6                	add    esi,edx
c001d9a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d9a9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d9ad:	7e 04                	jle    c001d9b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001d9af:	89 c7                	mov    edi,eax
c001d9b1:	eb 93                	jmp    c001d946 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001d9b3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d9b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9bb:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001d9bf:	0f 8f 77 ff ff ff    	jg     c001d93c <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001d9c5:	e9 d3 01 00 00       	jmp    c001db9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d9ca:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d9cf:	75 0e                	jne    c001d9df <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d9d1:	85 d2                	test   edx,edx
c001d9d3:	75 0a                	jne    c001d9df <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d9d5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d9d8:	83 e8 18             	sub    eax,0x18
c001d9db:	a8 f7                	test   al,0xf7
c001d9dd:	74 0d                	je     c001d9ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001d9df:	83 ec 0c             	sub    esp,0xc
c001d9e2:	68 0b 26 03 c0       	push   0xc003260b
c001d9e7:	e9 95 01 00 00       	jmp    c001db81 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d9ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d9f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d9fc:	31 c9                	xor    ecx,ecx
c001d9fe:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001da02:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001da06:	0f 8e 91 01 00 00    	jle    c001db9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001da0c:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001da10:	0f 8d 87 01 00 00    	jge    c001db9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001da16:	8d 46 01             	lea    eax,[esi+0x1]
c001da19:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001da1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da21:	83 fd 7f             	cmp    ebp,0x7f
c001da24:	89 e8                	mov    eax,ebp
c001da26:	0f 8e 9d 00 00 00    	jle    c001dac9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001da2c:	83 e0 7f             	and    eax,0x7f
c001da2f:	31 d2                	xor    edx,edx
c001da31:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001da35:	40                   	inc    eax
c001da36:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001da3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001da3e:	75 0a                	jne    c001da4a <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001da40:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001da45:	89 ea                	mov    edx,ebp
c001da47:	c1 e2 18             	shl    edx,0x18
c001da4a:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001da4f:	c1 e0 10             	shl    eax,0x10
c001da52:	89 c7                	mov    edi,eax
c001da54:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001da59:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001da5d:	c1 e0 08             	shl    eax,0x8
c001da60:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001da64:	09 f8                	or     eax,edi
c001da66:	31 f6                	xor    esi,esi
c001da68:	09 c5                	or     ebp,eax
c001da6a:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001da6f:	09 d5                	or     ebp,edx
c001da71:	85 ff                	test   edi,edi
c001da73:	75 1d                	jne    c001da92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001da75:	89 c8                	mov    eax,ecx
c001da77:	99                   	cdq    
c001da78:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001da7c:	85 d2                	test   edx,edx
c001da7e:	75 12                	jne    c001da92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001da80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da84:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001da88:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001da8c:	49                   	dec    ecx
c001da8d:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001da92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da96:	8d 51 01             	lea    edx,[ecx+0x1]
c001da99:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001da9c:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001daa0:	8d 46 01             	lea    eax,[esi+0x1]
c001daa3:	7e 06                	jle    c001daab <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001daa5:	89 c6                	mov    esi,eax
c001daa7:	89 d1                	mov    ecx,edx
c001daa9:	eb c6                	jmp    c001da71 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001daab:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001daaf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dab3:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001dab7:	c1 f8 03             	sar    eax,0x3
c001daba:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001dabe:	89 d1                	mov    ecx,edx
c001dac0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001dac4:	e9 35 ff ff ff       	jmp    c001d9fe <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001dac9:	8d 45 01             	lea    eax,[ebp+0x1]
c001dacc:	31 f6                	xor    esi,esi
c001dace:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dad2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001dad7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dadb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001dae0:	75 1d                	jne    c001daff <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001dae2:	89 c8                	mov    eax,ecx
c001dae4:	99                   	cdq    
c001dae5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001dae9:	85 d2                	test   edx,edx
c001daeb:	75 12                	jne    c001daff <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001daed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001daf1:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001daf5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001daf9:	49                   	dec    ecx
c001dafa:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001daff:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001db07:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001db0b:	75 10                	jne    c001db1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001db0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db11:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001db16:	c1 e7 18             	shl    edi,0x18
c001db19:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001db1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db21:	8d 51 01             	lea    edx,[ecx+0x1]
c001db24:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001db29:	c1 e0 10             	shl    eax,0x10
c001db2c:	89 c7                	mov    edi,eax
c001db2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db32:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001db37:	c1 e0 08             	shl    eax,0x8
c001db3a:	09 f8                	or     eax,edi
c001db3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001db40:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001db44:	09 f8                	or     eax,edi
c001db46:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001db4a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001db4e:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001db51:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001db55:	c1 f8 03             	sar    eax,0x3
c001db58:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001db5c:	8d 46 01             	lea    eax,[esi+0x1]
c001db5f:	39 f5                	cmp    ebp,esi
c001db61:	7e 09                	jle    c001db6c <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001db63:	89 c6                	mov    esi,eax
c001db65:	89 d1                	mov    ecx,edx
c001db67:	e9 6f ff ff ff       	jmp    c001dadb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001db6c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001db70:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001db74:	e9 45 ff ff ff       	jmp    c001dabe <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001db79:	52                   	push   edx
c001db7a:	52                   	push   edx
c001db7b:	51                   	push   ecx
c001db7c:	68 1a 26 03 c0       	push   0xc003261a
c001db81:	e8 ff b8 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001db86:	58                   	pop    eax
c001db87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db8b:	e8 76 8a ff ff       	call   c0016606 <free>
c001db90:	83 c4 10             	add    esp,0x10
c001db93:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001db9b:	eb 14                	jmp    c001dbb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001db9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dba1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dba5:	89 18                	mov    DWORD PTR [eax],ebx
c001dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dbab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dbaf:	89 18                	mov    DWORD PTR [eax],ebx
c001dbb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbb5:	83 c4 3c             	add    esp,0x3c
c001dbb8:	5b                   	pop    ebx
c001dbb9:	5e                   	pop    esi
c001dbba:	5f                   	pop    edi
c001dbbb:	5d                   	pop    ebp
c001dbbc:	c3                   	ret    
c001dbbd:	90                   	nop

c001dbbe <Video::putTGA(int, int, unsigned char*, int)>:
c001dbbe:	55                   	push   ebp
c001dbbf:	57                   	push   edi
c001dbc0:	56                   	push   esi
c001dbc1:	53                   	push   ebx
c001dbc2:	83 ec 28             	sub    esp,0x28
c001dbc5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dbc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dbcd:	50                   	push   eax
c001dbce:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dbd2:	50                   	push   eax
c001dbd3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dbd7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dbdb:	57                   	push   edi
c001dbdc:	e8 33 fc ff ff       	call   c001d814 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001dbe1:	83 c4 20             	add    esp,0x20
c001dbe4:	85 c0                	test   eax,eax
c001dbe6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dbea:	74 3a                	je     c001dc26 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dbec:	89 c6                	mov    esi,eax
c001dbee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dbf2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001dbf6:	39 d8                	cmp    eax,ebx
c001dbf8:	7e 2c                	jle    c001dc26 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dbfa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dbfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc02:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc06:	39 e8                	cmp    eax,ebp
c001dc08:	7e 19                	jle    c001dc23 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001dc0a:	83 c6 04             	add    esi,0x4
c001dc0d:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001dc10:	85 c0                	test   eax,eax
c001dc12:	79 0c                	jns    c001dc20 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001dc14:	8b 17                	mov    edx,DWORD PTR [edi]
c001dc16:	50                   	push   eax
c001dc17:	53                   	push   ebx
c001dc18:	55                   	push   ebp
c001dc19:	57                   	push   edi
c001dc1a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001dc1d:	83 c4 10             	add    esp,0x10
c001dc20:	45                   	inc    ebp
c001dc21:	eb db                	jmp    c001dbfe <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001dc23:	43                   	inc    ebx
c001dc24:	eb c8                	jmp    c001dbee <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001dc26:	83 c4 1c             	add    esp,0x1c
c001dc29:	5b                   	pop    ebx
c001dc2a:	5e                   	pop    esi
c001dc2b:	5f                   	pop    edi
c001dc2c:	5d                   	pop    ebp
c001dc2d:	c3                   	ret    
c001dc2e:	66 90                	xchg   ax,ax

c001dc30 <ACPI::close(int, int, void*)>:
c001dc30:	83 ec 1c             	sub    esp,0x1c
c001dc33:	83 ec 0c             	sub    esp,0xc
c001dc36:	68 7c 26 03 c0       	push   0xc003267c
c001dc3b:	e8 45 b8 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001dc40:	83 c4 10             	add    esp,0x10
c001dc43:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dc4b:	74 1b                	je     c001dc68 <ACPI::close(int, int, void*)+0x38>
c001dc4d:	83 ec 0c             	sub    esp,0xc
c001dc50:	68 8b 26 03 c0       	push   0xc003268b
c001dc55:	e8 2b b8 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	b8 00 00 00 00       	mov    eax,0x0
c001dc62:	e9 01 01 00 00       	jmp    c001dd68 <ACPI::close(int, int, void*)+0x138>
c001dc67:	90                   	nop
c001dc68:	83 ec 0c             	sub    esp,0xc
c001dc6b:	68 9c 26 03 c0       	push   0xc003269c
c001dc70:	e8 10 b8 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001dc7d:	75 45                	jne    c001dcc4 <ACPI::close(int, int, void*)+0x94>
c001dc7f:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dc84:	83 ec 08             	sub    esp,0x8
c001dc87:	50                   	push   eax
c001dc88:	68 ab 26 03 c0       	push   0xc00326ab
c001dc8d:	e8 f3 b7 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001dc92:	83 c4 10             	add    esp,0x10
c001dc95:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dc9a:	85 c0                	test   eax,eax
c001dc9c:	74 0a                	je     c001dca8 <ACPI::close(int, int, void*)+0x78>
c001dc9e:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dca3:	ff d0                	call   eax
c001dca5:	8d 76 00             	lea    esi,[esi+0x0]
c001dca8:	83 ec 0c             	sub    esp,0xc
c001dcab:	68 7c 28 03 c0       	push   0xc003287c
c001dcb0:	e8 e9 27 00 00       	call   c002049e <KePanic(char const*)>
c001dcb5:	83 c4 10             	add    esp,0x10
c001dcb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dcbd:	e9 a6 00 00 00       	jmp    c001dd68 <ACPI::close(int, int, void*)+0x138>
c001dcc2:	66 90                	xchg   ax,ax
c001dcc4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001dcc9:	0f 85 81 00 00 00    	jne    c001dd50 <ACPI::close(int, int, void*)+0x120>
c001dccf:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dcd4:	83 ec 08             	sub    esp,0x8
c001dcd7:	50                   	push   eax
c001dcd8:	68 c9 26 03 c0       	push   0xc00326c9
c001dcdd:	e8 a3 b7 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001dce2:	83 c4 10             	add    esp,0x10
c001dce5:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dcea:	85 c0                	test   eax,eax
c001dcec:	74 0a                	je     c001dcf8 <ACPI::close(int, int, void*)+0xc8>
c001dcee:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dcf3:	ff d0                	call   eax
c001dcf5:	8d 76 00             	lea    esi,[esi+0x0]
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	68 e4 26 03 c0       	push   0xc00326e4
c001dd00:	e8 80 b7 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001dd05:	83 c4 10             	add    esp,0x10
c001dd08:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dd0d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dd15:	83 e0 02             	and    eax,0x2
c001dd18:	74 1e                	je     c001dd38 <ACPI::close(int, int, void*)+0x108>
c001dd1a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001dd21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd25:	89 c2                	mov    edx,eax
c001dd27:	ec                   	in     al,dx
c001dd28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dd2c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001dd30:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dd34:	eb da                	jmp    c001dd10 <ACPI::close(int, int, void*)+0xe0>
c001dd36:	66 90                	xchg   ax,ax
c001dd38:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001dd3f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001dd44:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dd48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd4c:	ee                   	out    dx,al
c001dd4d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	68 f6 26 03 c0       	push   0xc00326f6
c001dd58:	e8 28 b7 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001dd5d:	83 c4 10             	add    esp,0x10
c001dd60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dd65:	8d 76 00             	lea    esi,[esi+0x0]
c001dd68:	83 c4 1c             	add    esp,0x1c
c001dd6b:	c3                   	ret    

c001dd6c <findRSDP()>:
c001dd6c:	83 ec 1c             	sub    esp,0x1c
c001dd6f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dd74:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dd7a:	83 e0 04             	and    eax,0x4
c001dd7d:	0f b6 c0             	movzx  eax,al
c001dd80:	85 c0                	test   eax,eax
c001dd82:	75 08                	jne    c001dd8c <findRSDP()+0x20>
c001dd84:	b8 00 00 00 00       	mov    eax,0x0
c001dd89:	eb 75                	jmp    c001de00 <findRSDP()+0x94>
c001dd8b:	90                   	nop
c001dd8c:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001dd91:	3d ff 07 00 00       	cmp    eax,0x7ff
c001dd96:	7f 1c                	jg     c001ddb4 <findRSDP()+0x48>
c001dd98:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dd9d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dda3:	83 e2 fb             	and    edx,0xfffffffb
c001dda6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001ddac:	b8 00 00 00 00       	mov    eax,0x0
c001ddb1:	eb 4d                	jmp    c001de00 <findRSDP()+0x94>
c001ddb3:	90                   	nop
c001ddb4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001ddbc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001ddc4:	77 32                	ja     c001ddf8 <findRSDP()+0x8c>
c001ddc6:	83 ec 04             	sub    esp,0x4
c001ddc9:	6a 08                	push   0x8
c001ddcb:	68 05 27 03 c0       	push   0xc0032705
c001ddd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ddd4:	e8 a7 25 fe ff       	call   c0000380 <memcmp>
c001ddd9:	83 c4 10             	add    esp,0x10
c001dddc:	85 c0                	test   eax,eax
c001ddde:	0f 94 c0             	sete   al
c001dde1:	0f b6 c0             	movzx  eax,al
c001dde4:	85 c0                	test   eax,eax
c001dde6:	74 08                	je     c001ddf0 <findRSDP()+0x84>
c001dde8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddec:	eb 12                	jmp    c001de00 <findRSDP()+0x94>
c001ddee:	66 90                	xchg   ax,ax
c001ddf0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001ddf5:	eb c5                	jmp    c001ddbc <findRSDP()+0x50>
c001ddf7:	90                   	nop
c001ddf8:	b8 00 00 00 00       	mov    eax,0x0
c001ddfd:	8d 76 00             	lea    esi,[esi+0x0]
c001de00:	83 c4 1c             	add    esp,0x1c
c001de03:	c3                   	ret    

c001de04 <loadACPITables(unsigned char*)>:
c001de04:	57                   	push   edi
c001de05:	56                   	push   esi
c001de06:	53                   	push   ebx
c001de07:	83 ec 60             	sub    esp,0x60
c001de0a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de0f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de15:	83 e0 04             	and    eax,0x4
c001de18:	0f b6 c0             	movzx  eax,al
c001de1b:	85 c0                	test   eax,eax
c001de1d:	0f 84 41 02 00 00    	je     c001e064 <loadACPITables(unsigned char*)+0x260>
c001de23:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001de28:	0f b6 c0             	movzx  eax,al
c001de2b:	85 c0                	test   eax,eax
c001de2d:	74 79                	je     c001dea8 <loadACPITables(unsigned char*)+0xa4>
c001de2f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001de33:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001de37:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001de3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de3e:	83 e8 24             	sub    eax,0x24
c001de41:	c1 e8 03             	shr    eax,0x3
c001de44:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de48:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001de50:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001de54:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001de58:	0f 8d ba 00 00 00    	jge    c001df18 <loadACPITables(unsigned char*)+0x114>
c001de5e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001de62:	83 c0 24             	add    eax,0x24
c001de65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001de69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001de6d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001de71:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001de75:	c1 e0 03             	shl    eax,0x3
c001de78:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001de7c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001de80:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001de83:	8b 00                	mov    eax,DWORD PTR [eax]
c001de85:	89 c1                	mov    ecx,eax
c001de87:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001de8c:	8d 50 01             	lea    edx,[eax+0x1]
c001de8f:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001de95:	89 ca                	mov    edx,ecx
c001de97:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001de9e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dea3:	eb ab                	jmp    c001de50 <loadACPITables(unsigned char*)+0x4c>
c001dea5:	8d 76 00             	lea    esi,[esi+0x0]
c001dea8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001deac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001deb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001deb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001deb7:	83 e8 24             	sub    eax,0x24
c001deba:	c1 e8 02             	shr    eax,0x2
c001debd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dec1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dec9:	8d 76 00             	lea    esi,[esi+0x0]
c001decc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ded0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001ded4:	7d 42                	jge    c001df18 <loadACPITables(unsigned char*)+0x114>
c001ded6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001deda:	83 c0 24             	add    eax,0x24
c001dedd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dee1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dee5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dee9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001deed:	c1 e0 02             	shl    eax,0x2
c001def0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001def4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001def8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001defa:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001deff:	8d 50 01             	lea    edx,[eax+0x1]
c001df02:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001df08:	89 ca                	mov    edx,ecx
c001df0a:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001df11:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001df16:	eb b4                	jmp    c001decc <loadACPITables(unsigned char*)+0xc8>
c001df18:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001df20:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001df25:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001df29:	0f 8d 39 01 00 00    	jge    c001e068 <loadACPITables(unsigned char*)+0x264>
c001df2f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001df33:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001df3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001df3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df42:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001df46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df4a:	25 ff 0f 00 00       	and    eax,0xfff
c001df4f:	89 c6                	mov    esi,eax
c001df51:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df57:	83 ec 0c             	sub    esp,0xc
c001df5a:	6a 01                	push   0x1
c001df5c:	e8 ec a1 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c001df61:	83 c4 10             	add    esp,0x10
c001df64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001df68:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001df6e:	83 ec 0c             	sub    esp,0xc
c001df71:	6a 01                	push   0x1
c001df73:	6a 01                	push   0x1
c001df75:	50                   	push   eax
c001df76:	52                   	push   edx
c001df77:	53                   	push   ebx
c001df78:	e8 dd aa ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df7d:	83 c4 20             	add    esp,0x20
c001df80:	09 f0                	or     eax,esi
c001df82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001df86:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001df8a:	c1 e0 03             	shl    eax,0x3
c001df8d:	05 20 f4 03 c0       	add    eax,0xc003f420
c001df92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df9e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dfa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dfae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dfb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfb6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dfba:	89 c6                	mov    esi,eax
c001dfbc:	89 d7                	mov    edi,edx
c001dfbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dfc0:	89 c8                	mov    eax,ecx
c001dfc2:	89 fa                	mov    edx,edi
c001dfc4:	89 f3                	mov    ebx,esi
c001dfc6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dfca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dfce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dfd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dfdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dfe1:	05 00 10 00 00       	add    eax,0x1000
c001dfe6:	c1 e8 0c             	shr    eax,0xc
c001dfe9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dfed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dff1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dff5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dff9:	25 ff 0f 00 00       	and    eax,0xfff
c001dffe:	89 c6                	mov    esi,eax
c001e000:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e006:	83 ec 0c             	sub    esp,0xc
c001e009:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e00d:	e8 3b a1 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c001e012:	83 c4 10             	add    esp,0x10
c001e015:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e019:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e01f:	83 ec 0c             	sub    esp,0xc
c001e022:	6a 01                	push   0x1
c001e024:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e028:	50                   	push   eax
c001e029:	52                   	push   edx
c001e02a:	53                   	push   ebx
c001e02b:	e8 2a aa ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e030:	83 c4 20             	add    esp,0x20
c001e033:	09 f0                	or     eax,esi
c001e035:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e03d:	83 ec 0c             	sub    esp,0xc
c001e040:	50                   	push   eax
c001e041:	e8 25 a4 ff ff       	call   c001846b <Virt::freeKernelVirtualPages(unsigned long)>
c001e046:	83 c4 10             	add    esp,0x10
c001e049:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e04d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e051:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001e058:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001e05d:	e9 be fe ff ff       	jmp    c001df20 <loadACPITables(unsigned char*)+0x11c>
c001e062:	66 90                	xchg   ax,ax
c001e064:	90                   	nop
c001e065:	8d 76 00             	lea    esi,[esi+0x0]
c001e068:	83 c4 60             	add    esp,0x60
c001e06b:	5b                   	pop    ebx
c001e06c:	5e                   	pop    esi
c001e06d:	5f                   	pop    edi
c001e06e:	c3                   	ret    
c001e06f:	90                   	nop

c001e070 <findRSDT(unsigned char*)>:
c001e070:	57                   	push   edi
c001e071:	56                   	push   esi
c001e072:	53                   	push   ebx
c001e073:	83 ec 50             	sub    esp,0x50
c001e076:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e07b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e081:	83 e0 04             	and    eax,0x4
c001e084:	0f b6 c0             	movzx  eax,al
c001e087:	85 c0                	test   eax,eax
c001e089:	75 0d                	jne    c001e098 <findRSDT(unsigned char*)+0x28>
c001e08b:	b8 00 00 00 00       	mov    eax,0x0
c001e090:	e9 2b 01 00 00       	jmp    c001e1c0 <findRSDT(unsigned char*)+0x150>
c001e095:	8d 76 00             	lea    esi,[esi+0x0]
c001e098:	89 e0                	mov    eax,esp
c001e09a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e09e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e0a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e0a6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001e0ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e0b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0be:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e0c2:	89 c6                	mov    esi,eax
c001e0c4:	89 d7                	mov    edi,edx
c001e0c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0c8:	89 c8                	mov    eax,ecx
c001e0ca:	89 fa                	mov    edx,edi
c001e0cc:	89 f3                	mov    ebx,esi
c001e0ce:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001e0d2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e0d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e0da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e0de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001e0e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001e0ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e0fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e102:	25 ff 0f 00 00       	and    eax,0xfff
c001e107:	89 c6                	mov    esi,eax
c001e109:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e10f:	83 ec 0c             	sub    esp,0xc
c001e112:	6a 02                	push   0x2
c001e114:	e8 34 a0 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c001e119:	83 c4 10             	add    esp,0x10
c001e11c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e120:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e126:	83 ec 0c             	sub    esp,0xc
c001e129:	6a 01                	push   0x1
c001e12b:	6a 02                	push   0x2
c001e12d:	50                   	push   eax
c001e12e:	52                   	push   edx
c001e12f:	53                   	push   ebx
c001e130:	e8 25 a9 ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e135:	83 c4 20             	add    esp,0x20
c001e138:	09 f0                	or     eax,esi
c001e13a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e13e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e142:	25 ff 0f 00 00       	and    eax,0xfff
c001e147:	89 c6                	mov    esi,eax
c001e149:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e14f:	83 ec 0c             	sub    esp,0xc
c001e152:	6a 02                	push   0x2
c001e154:	e8 f4 9f ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c001e159:	83 c4 10             	add    esp,0x10
c001e15c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e160:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e166:	83 ec 0c             	sub    esp,0xc
c001e169:	6a 01                	push   0x1
c001e16b:	6a 02                	push   0x2
c001e16d:	50                   	push   eax
c001e16e:	52                   	push   edx
c001e16f:	53                   	push   ebx
c001e170:	e8 e5 a8 ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e175:	83 c4 20             	add    esp,0x20
c001e178:	09 f0                	or     eax,esi
c001e17a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e17e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e183:	85 c0                	test   eax,eax
c001e185:	75 11                	jne    c001e198 <findRSDT(unsigned char*)+0x128>
c001e187:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001e18e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e192:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e196:	eb 24                	jmp    c001e1bc <findRSDT(unsigned char*)+0x14c>
c001e198:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e19d:	83 f8 02             	cmp    eax,0x2
c001e1a0:	75 12                	jne    c001e1b4 <findRSDT(unsigned char*)+0x144>
c001e1a2:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001e1a9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e1b1:	eb 09                	jmp    c001e1bc <findRSDT(unsigned char*)+0x14c>
c001e1b3:	90                   	nop
c001e1b4:	b8 00 00 00 00       	mov    eax,0x0
c001e1b9:	eb 05                	jmp    c001e1c0 <findRSDT(unsigned char*)+0x150>
c001e1bb:	90                   	nop
c001e1bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e1c0:	83 c4 50             	add    esp,0x50
c001e1c3:	5b                   	pop    ebx
c001e1c4:	5e                   	pop    esi
c001e1c5:	5f                   	pop    edi
c001e1c6:	c3                   	ret    
c001e1c7:	90                   	nop

c001e1c8 <findDataTable(unsigned char*, char*)>:
c001e1c8:	83 ec 1c             	sub    esp,0x1c
c001e1cb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e1d0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e1d6:	83 e0 04             	and    eax,0x4
c001e1d9:	0f b6 c0             	movzx  eax,al
c001e1dc:	85 c0                	test   eax,eax
c001e1de:	75 08                	jne    c001e1e8 <findDataTable(unsigned char*, char*)+0x20>
c001e1e0:	b8 00 00 00 00       	mov    eax,0x0
c001e1e5:	eb 5d                	jmp    c001e244 <findDataTable(unsigned char*, char*)+0x7c>
c001e1e7:	90                   	nop
c001e1e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e1f0:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e1f5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e1f9:	7d 41                	jge    c001e23c <findDataTable(unsigned char*, char*)+0x74>
c001e1fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1ff:	c1 e0 03             	shl    eax,0x3
c001e202:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e207:	83 ec 04             	sub    esp,0x4
c001e20a:	6a 04                	push   0x4
c001e20c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e210:	50                   	push   eax
c001e211:	e8 6a 21 fe ff       	call   c0000380 <memcmp>
c001e216:	83 c4 10             	add    esp,0x10
c001e219:	85 c0                	test   eax,eax
c001e21b:	0f 94 c0             	sete   al
c001e21e:	0f b6 c0             	movzx  eax,al
c001e221:	85 c0                	test   eax,eax
c001e223:	74 0f                	je     c001e234 <findDataTable(unsigned char*, char*)+0x6c>
c001e225:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e229:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e230:	eb 12                	jmp    c001e244 <findDataTable(unsigned char*, char*)+0x7c>
c001e232:	66 90                	xchg   ax,ax
c001e234:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e239:	eb b5                	jmp    c001e1f0 <findDataTable(unsigned char*, char*)+0x28>
c001e23b:	90                   	nop
c001e23c:	b8 00 00 00 00       	mov    eax,0x0
c001e241:	8d 76 00             	lea    esi,[esi+0x0]
c001e244:	83 c4 1c             	add    esp,0x1c
c001e247:	c3                   	ret    

c001e248 <scanMADT()>:
c001e248:	53                   	push   ebx
c001e249:	83 ec 38             	sub    esp,0x38
c001e24c:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e251:	25 00 04 00 00       	and    eax,0x400
c001e256:	74 14                	je     c001e26c <scanMADT()+0x24>
c001e258:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e25d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e263:	83 e2 fb             	and    edx,0xfffffffb
c001e266:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e26c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e271:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e277:	83 e0 04             	and    eax,0x4
c001e27a:	0f b6 c0             	movzx  eax,al
c001e27d:	85 c0                	test   eax,eax
c001e27f:	0f 84 6b 04 00 00    	je     c001e6f0 <scanMADT()+0x4a8>
c001e285:	e8 e2 fa ff ff       	call   c001dd6c <findRSDP()>
c001e28a:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e28f:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e294:	85 c0                	test   eax,eax
c001e296:	75 1c                	jne    c001e2b4 <scanMADT()+0x6c>
c001e298:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e29d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e2a3:	83 e2 fb             	and    edx,0xfffffffb
c001e2a6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e2ac:	e9 47 04 00 00       	jmp    c001e6f8 <scanMADT()+0x4b0>
c001e2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e2b4:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e2b9:	83 ec 0c             	sub    esp,0xc
c001e2bc:	50                   	push   eax
c001e2bd:	e8 ae fd ff ff       	call   c001e070 <findRSDT(unsigned char*)>
c001e2c2:	83 c4 10             	add    esp,0x10
c001e2c5:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e2ca:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e2cf:	85 c0                	test   eax,eax
c001e2d1:	75 19                	jne    c001e2ec <scanMADT()+0xa4>
c001e2d3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e2d8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e2de:	83 e2 fb             	and    edx,0xfffffffb
c001e2e1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e2e7:	e9 0c 04 00 00       	jmp    c001e6f8 <scanMADT()+0x4b0>
c001e2ec:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e2f1:	83 ec 0c             	sub    esp,0xc
c001e2f4:	50                   	push   eax
c001e2f5:	e8 0a fb ff ff       	call   c001de04 <loadACPITables(unsigned char*)>
c001e2fa:	83 c4 10             	add    esp,0x10
c001e2fd:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e302:	83 ec 08             	sub    esp,0x8
c001e305:	68 0e 27 03 c0       	push   0xc003270e
c001e30a:	50                   	push   eax
c001e30b:	e8 b8 fe ff ff       	call   c001e1c8 <findDataTable(unsigned char*, char*)>
c001e310:	83 c4 10             	add    esp,0x10
c001e313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e317:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e31c:	75 1a                	jne    c001e338 <scanMADT()+0xf0>
c001e31e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e323:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e329:	83 e2 fe             	and    edx,0xfffffffe
c001e32c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e332:	e9 c1 03 00 00       	jmp    c001e6f8 <scanMADT()+0x4b0>
c001e337:	90                   	nop
c001e338:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e340:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e344:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e347:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e34b:	0f 87 a7 03 00 00    	ja     c001e6f8 <scanMADT()+0x4b0>
c001e351:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e359:	0f 87 99 03 00 00    	ja     c001e6f8 <scanMADT()+0x4b0>
c001e35f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e363:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e36b:	8d 50 01             	lea    edx,[eax+0x1]
c001e36e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e372:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e376:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e37a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e37e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e382:	8d 50 01             	lea    edx,[eax+0x1]
c001e385:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e389:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e38d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e391:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e395:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e39a:	83 f8 02             	cmp    eax,0x2
c001e39d:	0f 86 51 03 00 00    	jbe    c001e6f4 <scanMADT()+0x4ac>
c001e3a3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3a8:	85 c0                	test   eax,eax
c001e3aa:	75 58                	jne    c001e404 <scanMADT()+0x1bc>
c001e3ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3b0:	8d 50 01             	lea    edx,[eax+0x1]
c001e3b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3b7:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e3bd:	0f b6 d2             	movzx  edx,dl
c001e3c0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e3c4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e3c8:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e3ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3d2:	8d 50 01             	lea    edx,[eax+0x1]
c001e3d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3d9:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e3df:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e3e2:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e3e8:	0f b6 d2             	movzx  edx,dl
c001e3eb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e3ef:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e3f3:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e3f9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e3fe:	e9 d9 02 00 00       	jmp    c001e6dc <scanMADT()+0x494>
c001e403:	90                   	nop
c001e404:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e409:	83 f8 01             	cmp    eax,0x1
c001e40c:	0f 85 1a 01 00 00    	jne    c001e52c <scanMADT()+0x2e4>
c001e412:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e416:	8d 50 01             	lea    edx,[eax+0x1]
c001e419:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e41d:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e423:	0f b6 d2             	movzx  edx,dl
c001e426:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e42a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e42e:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e434:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e439:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e43d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e441:	01 d0                	add    eax,edx
c001e443:	83 c0 2c             	add    eax,0x2c
c001e446:	8a 00                	mov    al,BYTE PTR [eax]
c001e448:	0f b6 d0             	movzx  edx,al
c001e44b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e44f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e452:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e456:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e45a:	0f b6 c0             	movzx  eax,al
c001e45d:	c1 e0 08             	shl    eax,0x8
c001e460:	89 d1                	mov    ecx,edx
c001e462:	09 c1                	or     ecx,eax
c001e464:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e468:	8d 50 02             	lea    edx,[eax+0x2]
c001e46b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e46f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e473:	0f b6 c0             	movzx  eax,al
c001e476:	c1 e0 10             	shl    eax,0x10
c001e479:	09 c1                	or     ecx,eax
c001e47b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e47f:	8d 50 03             	lea    edx,[eax+0x3]
c001e482:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e486:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e48a:	0f b6 c0             	movzx  eax,al
c001e48d:	c1 e0 18             	shl    eax,0x18
c001e490:	09 c1                	or     ecx,eax
c001e492:	89 ca                	mov    edx,ecx
c001e494:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e499:	0f b6 c0             	movzx  eax,al
c001e49c:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e4a3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e4a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e4ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4b0:	01 d0                	add    eax,edx
c001e4b2:	83 c0 2c             	add    eax,0x2c
c001e4b5:	8a 00                	mov    al,BYTE PTR [eax]
c001e4b7:	0f b6 d0             	movzx  edx,al
c001e4ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4be:	8d 48 01             	lea    ecx,[eax+0x1]
c001e4c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e4c9:	0f b6 c0             	movzx  eax,al
c001e4cc:	c1 e0 08             	shl    eax,0x8
c001e4cf:	89 d1                	mov    ecx,edx
c001e4d1:	09 c1                	or     ecx,eax
c001e4d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4d7:	8d 50 02             	lea    edx,[eax+0x2]
c001e4da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e4e2:	0f b6 c0             	movzx  eax,al
c001e4e5:	c1 e0 10             	shl    eax,0x10
c001e4e8:	09 c1                	or     ecx,eax
c001e4ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4ee:	8d 50 03             	lea    edx,[eax+0x3]
c001e4f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4f5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e4f9:	0f b6 c0             	movzx  eax,al
c001e4fc:	c1 e0 18             	shl    eax,0x18
c001e4ff:	09 c1                	or     ecx,eax
c001e501:	89 ca                	mov    edx,ecx
c001e503:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e508:	0f b6 c0             	movzx  eax,al
c001e50b:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e512:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e517:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e51c:	83 c0 01             	add    eax,0x1
c001e51f:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e524:	e9 b3 01 00 00       	jmp    c001e6dc <scanMADT()+0x494>
c001e529:	8d 76 00             	lea    esi,[esi+0x0]
c001e52c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e531:	83 f8 02             	cmp    eax,0x2
c001e534:	0f 85 ea 00 00 00    	jne    c001e624 <scanMADT()+0x3dc>
c001e53a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e53e:	8d 50 01             	lea    edx,[eax+0x1]
c001e541:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e545:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e549:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e54d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e551:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e555:	8d 50 01             	lea    edx,[eax+0x1]
c001e558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e55c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e560:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e564:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e568:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e56c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e570:	01 d0                	add    eax,edx
c001e572:	83 c0 2c             	add    eax,0x2c
c001e575:	8a 00                	mov    al,BYTE PTR [eax]
c001e577:	0f b6 d0             	movzx  edx,al
c001e57a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e57e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e581:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e585:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e589:	0f b6 c0             	movzx  eax,al
c001e58c:	c1 e0 08             	shl    eax,0x8
c001e58f:	89 d1                	mov    ecx,edx
c001e591:	09 c1                	or     ecx,eax
c001e593:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e597:	8d 50 02             	lea    edx,[eax+0x2]
c001e59a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e59e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5a2:	0f b6 c0             	movzx  eax,al
c001e5a5:	c1 e0 10             	shl    eax,0x10
c001e5a8:	09 c1                	or     ecx,eax
c001e5aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ae:	8d 50 03             	lea    edx,[eax+0x3]
c001e5b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5b5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5b9:	0f b6 c0             	movzx  eax,al
c001e5bc:	c1 e0 18             	shl    eax,0x18
c001e5bf:	09 c8                	or     eax,ecx
c001e5c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e5c5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e5ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5d2:	01 d0                	add    eax,edx
c001e5d4:	83 c0 2c             	add    eax,0x2c
c001e5d7:	8a 00                	mov    al,BYTE PTR [eax]
c001e5d9:	0f b6 c0             	movzx  eax,al
c001e5dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e5e0:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e5e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5e7:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e5eb:	0f b6 d2             	movzx  edx,dl
c001e5ee:	c1 e2 08             	shl    edx,0x8
c001e5f1:	09 d0                	or     eax,edx
c001e5f3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e5f8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e5fd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e602:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e606:	88 90 28 3f 03 c0    	mov    BYTE PTR [eax-0x3ffcc0d8],dl
c001e60c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e611:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e616:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e61e:	e9 b9 00 00 00       	jmp    c001e6dc <scanMADT()+0x494>
c001e623:	90                   	nop
c001e624:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e629:	83 f8 04             	cmp    eax,0x4
c001e62c:	0f 85 9a 00 00 00    	jne    c001e6cc <scanMADT()+0x484>
c001e632:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e636:	8d 50 01             	lea    edx,[eax+0x1]
c001e639:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e63d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e641:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e645:	0f b6 c0             	movzx  eax,al
c001e648:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e64c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e650:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e654:	01 d0                	add    eax,edx
c001e656:	83 c0 2c             	add    eax,0x2c
c001e659:	8a 00                	mov    al,BYTE PTR [eax]
c001e65b:	0f b6 d0             	movzx  edx,al
c001e65e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e662:	8d 48 01             	lea    ecx,[eax+0x1]
c001e665:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e669:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e66d:	0f b6 c0             	movzx  eax,al
c001e670:	c1 e0 08             	shl    eax,0x8
c001e673:	09 d0                	or     eax,edx
c001e675:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e679:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e67e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e682:	8d 50 01             	lea    edx,[eax+0x1]
c001e685:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e689:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e68d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e691:	0f b6 c0             	movzx  eax,al
c001e694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69c:	c1 e0 08             	shl    eax,0x8
c001e69f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e6a3:	89 c1                	mov    ecx,eax
c001e6a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6a9:	c1 e0 18             	shl    eax,0x18
c001e6ac:	89 c3                	mov    ebx,eax
c001e6ae:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e6b3:	8d 50 01             	lea    edx,[eax+0x1]
c001e6b6:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e6bc:	09 d9                	or     ecx,ebx
c001e6be:	89 ca                	mov    edx,ecx
c001e6c0:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e6c7:	eb 13                	jmp    c001e6dc <scanMADT()+0x494>
c001e6c9:	8d 76 00             	lea    esi,[esi+0x0]
c001e6cc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e6d1:	83 f8 05             	cmp    eax,0x5
c001e6d4:	75 06                	jne    c001e6dc <scanMADT()+0x494>
c001e6d6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e6db:	90                   	nop
c001e6dc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e6e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e6e5:	01 d0                	add    eax,edx
c001e6e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e6eb:	e9 50 fc ff ff       	jmp    c001e340 <scanMADT()+0xf8>
c001e6f0:	90                   	nop
c001e6f1:	eb 05                	jmp    c001e6f8 <scanMADT()+0x4b0>
c001e6f3:	90                   	nop
c001e6f4:	90                   	nop
c001e6f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e6f8:	83 c4 38             	add    esp,0x38
c001e6fb:	5b                   	pop    ebx
c001e6fc:	c3                   	ret    
c001e6fd:	90                   	nop
c001e6fe:	66 90                	xchg   ax,ax

c001e700 <ACPI::ACPI()>:
c001e700:	83 ec 0c             	sub    esp,0xc
c001e703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e707:	83 ec 08             	sub    esp,0x8
c001e70a:	68 13 27 03 c0       	push   0xc0032713
c001e70f:	50                   	push   eax
c001e710:	e8 53 cf ff ff       	call   c001b668 <Device::Device(char const*)>
c001e715:	83 c4 10             	add    esp,0x10
c001e718:	ba 20 29 03 c0       	mov    edx,0xc0032920
c001e71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e721:	89 10                	mov    DWORD PTR [eax],edx
c001e723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e727:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e732:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e740:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e74a:	e8 f9 fa ff ff       	call   c001e248 <scanMADT()>
c001e74f:	90                   	nop
c001e750:	83 c4 0c             	add    esp,0xc
c001e753:	c3                   	ret    

c001e754 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e754:	83 ec 2c             	sub    esp,0x2c
c001e757:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e75b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e75f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e763:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e767:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e76c:	88 d0                	mov    al,dl
c001e76e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e772:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e777:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e77f:	90                   	nop
c001e780:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e784:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e78a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e78e:	0f 8d b0 00 00 00    	jge    c001e844 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e794:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e798:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e79c:	83 c2 2a             	add    edx,0x2a
c001e79f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e7a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7a8:	0f b7 c0             	movzx  eax,ax
c001e7ab:	39 c2                	cmp    edx,eax
c001e7ad:	0f 85 85 00 00 00    	jne    c001e838 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e7b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e7b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7bb:	83 c2 2a             	add    edx,0x2a
c001e7be:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e7c2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e7c7:	0f b6 c0             	movzx  eax,al
c001e7ca:	39 c2                	cmp    edx,eax
c001e7cc:	75 6a                	jne    c001e838 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e7ce:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e7d3:	85 c0                	test   eax,eax
c001e7d5:	74 3d                	je     c001e814 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e7d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e7db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7df:	83 c2 2a             	add    edx,0x2a
c001e7e2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e7e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e7ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7ed:	39 c2                	cmp    edx,eax
c001e7ef:	74 13                	je     c001e804 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e7f1:	83 ec 0c             	sub    esp,0xc
c001e7f4:	68 a0 28 03 c0       	push   0xc00328a0
c001e7f9:	e8 a0 1c 00 00       	call   c002049e <KePanic(char const*)>
c001e7fe:	83 c4 10             	add    esp,0x10
c001e801:	8d 76 00             	lea    esi,[esi+0x0]
c001e804:	83 ec 0c             	sub    esp,0xc
c001e807:	68 18 27 03 c0       	push   0xc0032718
c001e80c:	e8 8d 1c 00 00       	call   c002049e <KePanic(char const*)>
c001e811:	83 c4 10             	add    esp,0x10
c001e814:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e81c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e820:	83 c2 2a             	add    edx,0x2a
c001e823:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e827:	8b 02                	mov    eax,DWORD PTR [edx]
c001e829:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e82c:	89 01                	mov    DWORD PTR [ecx],eax
c001e82e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e831:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e836:	66 90                	xchg   ax,ax
c001e838:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e83d:	e9 3e ff ff ff       	jmp    c001e780 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e842:	66 90                	xchg   ax,ax
c001e844:	90                   	nop
c001e845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e849:	83 c4 2c             	add    esp,0x2c
c001e84c:	c2 04 00             	ret    0x4
c001e84f:	90                   	nop

c001e850 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e850:	83 ec 1c             	sub    esp,0x1c
c001e853:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e857:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e85b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e85f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e864:	88 c8                	mov    al,cl
c001e866:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e86a:	88 d0                	mov    al,dl
c001e86c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e874:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e87a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e87e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e881:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e885:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e889:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e88d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e893:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e897:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e89a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e89e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e8a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8a7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e8ad:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e8b1:	83 c0 01             	add    eax,0x1
c001e8b4:	88 c1                	mov    cl,al
c001e8b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8ba:	83 c2 2a             	add    edx,0x2a
c001e8bd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8c5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e8cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8cf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e8d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e8d6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8de:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e8e4:	8d 50 01             	lea    edx,[eax+0x1]
c001e8e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8eb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8f5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e8fb:	3d 00 02 00 00       	cmp    eax,0x200
c001e900:	75 12                	jne    c001e914 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e902:	83 ec 0c             	sub    esp,0xc
c001e905:	68 27 27 03 c0       	push   0xc0032727
c001e90a:	e8 8f 1b 00 00       	call   c002049e <KePanic(char const*)>
c001e90f:	83 c4 10             	add    esp,0x10
c001e912:	66 90                	xchg   ax,ax
c001e914:	90                   	nop
c001e915:	83 c4 1c             	add    esp,0x1c
c001e918:	c3                   	ret    
c001e919:	90                   	nop
c001e91a:	66 90                	xchg   ax,ax

c001e91c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e91c:	b8 00 00 00 00       	mov    eax,0x0
c001e921:	c3                   	ret    
c001e922:	66 90                	xchg   ax,ax

c001e924 <ACPI::detectPCI()>:
c001e924:	53                   	push   ebx
c001e925:	83 ec 28             	sub    esp,0x28
c001e928:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e92d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e932:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e937:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e93d:	83 e0 04             	and    eax,0x4
c001e940:	0f b6 c0             	movzx  eax,al
c001e943:	85 c0                	test   eax,eax
c001e945:	74 2d                	je     c001e974 <ACPI::detectPCI()+0x50>
c001e947:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e94c:	83 ec 08             	sub    esp,0x8
c001e94f:	68 44 27 03 c0       	push   0xc0032744
c001e954:	50                   	push   eax
c001e955:	e8 6e f8 ff ff       	call   c001e1c8 <findDataTable(unsigned char*, char*)>
c001e95a:	83 c4 10             	add    esp,0x10
c001e95d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e961:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e966:	74 0c                	je     c001e974 <ACPI::detectPCI()+0x50>
c001e968:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e96d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e972:	66 90                	xchg   ax,ax
c001e974:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e97c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e980:	8a 00                	mov    al,BYTE PTR [eax]
c001e982:	0f b6 c0             	movzx  eax,al
c001e985:	83 f8 01             	cmp    eax,0x1
c001e988:	75 0e                	jne    c001e998 <ACPI::detectPCI()+0x74>
c001e98a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e98f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e994:	eb 2e                	jmp    c001e9c4 <ACPI::detectPCI()+0xa0>
c001e996:	66 90                	xchg   ax,ax
c001e998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e99c:	8a 00                	mov    al,BYTE PTR [eax]
c001e99e:	0f b6 c0             	movzx  eax,al
c001e9a1:	83 f8 02             	cmp    eax,0x2
c001e9a4:	75 1e                	jne    c001e9c4 <ACPI::detectPCI()+0xa0>
c001e9a6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9ab:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e9b0:	85 c0                	test   eax,eax
c001e9b2:	74 10                	je     c001e9c4 <ACPI::detectPCI()+0xa0>
c001e9b4:	83 ec 0c             	sub    esp,0xc
c001e9b7:	68 d0 28 03 c0       	push   0xc00328d0
c001e9bc:	e8 dd 1a 00 00       	call   c002049e <KePanic(char const*)>
c001e9c1:	83 c4 10             	add    esp,0x10
c001e9c4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e9c8:	83 f0 01             	xor    eax,0x1
c001e9cb:	0f b6 c0             	movzx  eax,al
c001e9ce:	85 c0                	test   eax,eax
c001e9d0:	74 46                	je     c001ea18 <ACPI::detectPCI()+0xf4>
c001e9d2:	e8 59 17 fe ff       	call   c0000130 <manualPCIProbe>
c001e9d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e9db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9e0:	75 0e                	jne    c001e9f0 <ACPI::detectPCI()+0xcc>
c001e9e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9e7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e9ec:	eb 2a                	jmp    c001ea18 <ACPI::detectPCI()+0xf4>
c001e9ee:	66 90                	xchg   ax,ax
c001e9f0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e9f5:	75 21                	jne    c001ea18 <ACPI::detectPCI()+0xf4>
c001e9f7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9fc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ea01:	85 c0                	test   eax,eax
c001ea03:	74 13                	je     c001ea18 <ACPI::detectPCI()+0xf4>
c001ea05:	83 ec 0c             	sub    esp,0xc
c001ea08:	68 d0 28 03 c0       	push   0xc00328d0
c001ea0d:	e8 8c 1a 00 00       	call   c002049e <KePanic(char const*)>
c001ea12:	83 c4 10             	add    esp,0x10
c001ea15:	8d 76 00             	lea    esi,[esi+0x0]
c001ea18:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001ea1d:	85 c0                	test   eax,eax
c001ea1f:	0f 84 87 00 00 00    	je     c001eaac <ACPI::detectPCI()+0x188>
c001ea25:	83 ec 0c             	sub    esp,0xc
c001ea28:	68 49 27 03 c0       	push   0xc0032749
c001ea2d:	e8 09 13 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001ea3d:	83 ec 0c             	sub    esp,0xc
c001ea40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea44:	e8 ad 7b ff ff       	call   c00165f6 <malloc>
c001ea49:	83 c4 10             	add    esp,0x10
c001ea4c:	89 c3                	mov    ebx,eax
c001ea4e:	83 ec 0c             	sub    esp,0xc
c001ea51:	53                   	push   ebx
c001ea52:	e8 89 b8 00 00       	call   c002a2e0 <PCI::PCI()>
c001ea57:	83 c4 10             	add    esp,0x10
c001ea5a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001ea5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea62:	83 ec 08             	sub    esp,0x8
c001ea65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ea69:	50                   	push   eax
c001ea6a:	e8 97 ca ff ff       	call   c001b506 <Device::addChild(Device*)>
c001ea6f:	83 c4 10             	add    esp,0x10
c001ea72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea76:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea78:	83 c0 08             	add    eax,0x8
c001ea7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea7d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001ea82:	85 d2                	test   edx,edx
c001ea84:	74 0a                	je     c001ea90 <ACPI::detectPCI()+0x16c>
c001ea86:	ba 01 00 00 00       	mov    edx,0x1
c001ea8b:	eb 0b                	jmp    c001ea98 <ACPI::detectPCI()+0x174>
c001ea8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ea90:	ba 02 00 00 00       	mov    edx,0x2
c001ea95:	8d 76 00             	lea    esi,[esi+0x0]
c001ea98:	6a 00                	push   0x0
c001ea9a:	6a 00                	push   0x0
c001ea9c:	52                   	push   edx
c001ea9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eaa1:	ff d0                	call   eax
c001eaa3:	83 c4 10             	add    esp,0x10
c001eaa6:	e9 91 00 00 00       	jmp    c001eb3c <ACPI::detectPCI()+0x218>
c001eaab:	90                   	nop
c001eaac:	83 ec 0c             	sub    esp,0xc
c001eaaf:	68 61 27 03 c0       	push   0xc0032761
c001eab4:	e8 82 12 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c001eab9:	83 c4 10             	add    esp,0x10
c001eabc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001eac3:	83 ec 0c             	sub    esp,0xc
c001eac6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001eaca:	e8 27 7b ff ff       	call   c00165f6 <malloc>
c001eacf:	83 c4 10             	add    esp,0x10
c001ead2:	89 c3                	mov    ebx,eax
c001ead4:	83 ec 0c             	sub    esp,0xc
c001ead7:	53                   	push   ebx
c001ead8:	e8 9d c3 00 00       	call   c002ae7a <IDE::IDE()>
c001eadd:	83 c4 10             	add    esp,0x10
c001eae0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001eae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eae8:	83 ec 08             	sub    esp,0x8
c001eaeb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eaef:	50                   	push   eax
c001eaf0:	e8 11 ca ff ff       	call   c001b506 <Device::addChild(Device*)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eafc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001eb06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb0a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001eb13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb17:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001eb20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb24:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb26:	83 c0 08             	add    eax,0x8
c001eb29:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb2b:	6a 00                	push   0x0
c001eb2d:	6a 00                	push   0x0
c001eb2f:	6a 00                	push   0x0
c001eb31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb35:	ff d0                	call   eax
c001eb37:	83 c4 10             	add    esp,0x10
c001eb3a:	66 90                	xchg   ax,ax
c001eb3c:	90                   	nop
c001eb3d:	83 c4 28             	add    esp,0x28
c001eb40:	5b                   	pop    ebx
c001eb41:	c3                   	ret    
c001eb42:	66 90                	xchg   ax,ax

c001eb44 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001eb44:	83 ec 1c             	sub    esp,0x1c
c001eb47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001eb4b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001eb4e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb52:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eb57:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001eb5c:	83 ec 08             	sub    esp,0x8
c001eb5f:	52                   	push   edx
c001eb60:	50                   	push   eax
c001eb61:	e8 b2 70 ff ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c001eb66:	83 c4 10             	add    esp,0x10
c001eb69:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001eb6d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eb72:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001eb77:	83 ec 04             	sub    esp,0x4
c001eb7a:	6a 01                	push   0x1
c001eb7c:	52                   	push   edx
c001eb7d:	50                   	push   eax
c001eb7e:	e8 af 71 ff ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c001eb83:	83 c4 10             	add    esp,0x10
c001eb86:	90                   	nop
c001eb87:	83 c4 1c             	add    esp,0x1c
c001eb8a:	c3                   	ret    
c001eb8b:	90                   	nop

c001eb8c <ACPI::sleep()>:
c001eb8c:	83 ec 0c             	sub    esp,0xc
c001eb8f:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001eb94:	85 c0                	test   eax,eax
c001eb96:	74 08                	je     c001eba0 <ACPI::sleep()+0x14>
c001eb98:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001eb9d:	ff d0                	call   eax
c001eb9f:	90                   	nop
c001eba0:	90                   	nop
c001eba1:	83 c4 0c             	add    esp,0xc
c001eba4:	c3                   	ret    
c001eba5:	90                   	nop
c001eba6:	66 90                	xchg   ax,ax

c001eba8 <ACPI::open(int, int, void*)>:
c001eba8:	57                   	push   edi
c001eba9:	56                   	push   esi
c001ebaa:	53                   	push   ebx
c001ebab:	81 ec 70 01 00 00    	sub    esp,0x170
c001ebb1:	83 ec 0c             	sub    esp,0xc
c001ebb4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001ebbb:	e8 64 fd ff ff       	call   c001e924 <ACPI::detectPCI()>
c001ebc0:	83 c4 10             	add    esp,0x10
c001ebc3:	83 ec 0c             	sub    esp,0xc
c001ebc6:	68 f8 28 03 c0       	push   0xc00328f8
c001ebcb:	e8 6b 11 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c001ebd0:	83 c4 10             	add    esp,0x10
c001ebd3:	b8 4c 05 00 00       	mov    eax,0x54c
c001ebd8:	8a 00                	mov    al,BYTE PTR [eax]
c001ebda:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001ebe1:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ebe9:	83 f8 01             	cmp    eax,0x1
c001ebec:	75 12                	jne    c001ec00 <ACPI::open(int, int, void*)+0x58>
c001ebee:	83 ec 0c             	sub    esp,0xc
c001ebf1:	68 76 27 03 c0       	push   0xc0032776
c001ebf6:	e8 bc 53 00 00       	call   c0023fb7 <Thr::loadKernelSymbolTable(char const*)>
c001ebfb:	83 c4 10             	add    esp,0x10
c001ebfe:	eb 34                	jmp    c001ec34 <ACPI::open(int, int, void*)+0x8c>
c001ec00:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ec08:	3d bb 00 00 00       	cmp    eax,0xbb
c001ec0d:	75 15                	jne    c001ec24 <ACPI::open(int, int, void*)+0x7c>
c001ec0f:	83 ec 0c             	sub    esp,0xc
c001ec12:	68 94 27 03 c0       	push   0xc0032794
c001ec17:	e8 9b 53 00 00       	call   c0023fb7 <Thr::loadKernelSymbolTable(char const*)>
c001ec1c:	83 c4 10             	add    esp,0x10
c001ec1f:	eb 13                	jmp    c001ec34 <ACPI::open(int, int, void*)+0x8c>
c001ec21:	8d 76 00             	lea    esi,[esi+0x0]
c001ec24:	83 ec 0c             	sub    esp,0xc
c001ec27:	68 b2 27 03 c0       	push   0xc00327b2
c001ec2c:	e8 6d 18 00 00       	call   c002049e <KePanic(char const*)>
c001ec31:	83 c4 10             	add    esp,0x10
c001ec34:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001ec3c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001ec47:	83 ec 0c             	sub    esp,0xc
c001ec4a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ec51:	e8 a0 79 ff ff       	call   c00165f6 <malloc>
c001ec56:	83 c4 10             	add    esp,0x10
c001ec59:	89 c3                	mov    ebx,eax
c001ec5b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec60:	83 ec 04             	sub    esp,0x4
c001ec63:	50                   	push   eax
c001ec64:	68 cc 27 03 c0       	push   0xc00327cc
c001ec69:	53                   	push   ebx
c001ec6a:	e8 1d ba ff ff       	call   c001a68c <File::File(char const*, Process*)>
c001ec6f:	83 c4 10             	add    esp,0x10
c001ec72:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001ec79:	83 ec 08             	sub    esp,0x8
c001ec7c:	6a 01                	push   0x1
c001ec7e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ec85:	e8 20 ba ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c001ec8a:	83 c4 10             	add    esp,0x10
c001ec8d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001ec94:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001ec9c:	75 16                	jne    c001ecb4 <ACPI::open(int, int, void*)+0x10c>
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001eca8:	e8 5b ba ff ff       	call   c001a708 <File::close()>
c001ecad:	83 c4 10             	add    esp,0x10
c001ecb0:	eb 0a                	jmp    c001ecbc <ACPI::open(int, int, void*)+0x114>
c001ecb2:	66 90                	xchg   ax,ax
c001ecb4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001ecbc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001ecc4:	74 1e                	je     c001ece4 <ACPI::open(int, int, void*)+0x13c>
c001ecc6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001eccd:	8b 00                	mov    eax,DWORD PTR [eax]
c001eccf:	83 c0 08             	add    eax,0x8
c001ecd2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd4:	83 ec 0c             	sub    esp,0xc
c001ecd7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ecde:	ff d0                	call   eax
c001ece0:	83 c4 10             	add    esp,0x10
c001ece3:	90                   	nop
c001ece4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001eceb:	83 f0 01             	xor    eax,0x1
c001ecee:	0f b6 c0             	movzx  eax,al
c001ecf1:	85 c0                	test   eax,eax
c001ecf3:	74 43                	je     c001ed38 <ACPI::open(int, int, void*)+0x190>
c001ecf5:	83 ec 0c             	sub    esp,0xc
c001ecf8:	68 ea 27 03 c0       	push   0xc00327ea
c001ecfd:	e8 39 10 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c001ed02:	83 c4 10             	add    esp,0x10
c001ed05:	83 ec 04             	sub    esp,0x4
c001ed08:	6a 0c                	push   0xc
c001ed0a:	68 05 28 03 c0       	push   0xc0032805
c001ed0f:	68 16 28 03 c0       	push   0xc0032816
c001ed14:	e8 da 44 00 00       	call   c00231f3 <Reg::readIntWithDefault(char*, char*, int)>
c001ed19:	83 c4 10             	add    esp,0x10
c001ed1c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001ed23:	83 ec 0c             	sub    esp,0xc
c001ed26:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001ed2d:	e8 4a 96 ff ff       	call   c001837c <Virt::setupPageSwapping(int)>
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	8d 76 00             	lea    esi,[esi+0x0]
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	68 e4 11 03 c0       	push   0xc00311e4
c001ed40:	e8 f6 0f 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c001ed45:	83 c4 10             	add    esp,0x10
c001ed48:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001ed4f:	83 ec 08             	sub    esp,0x8
c001ed52:	6a 13                	push   0x13
c001ed54:	50                   	push   eax
c001ed55:	e8 da ca ff ff       	call   c001b834 <getDevicesOfType(DeviceType)>
c001ed5a:	83 c4 0c             	add    esp,0xc
c001ed5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ed60:	83 ec 0c             	sub    esp,0xc
c001ed63:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ed6a:	50                   	push   eax
c001ed6b:	e8 20 03 01 00       	call   c002f090 <LinkedList<Device>::isEmpty()>
c001ed70:	83 c4 10             	add    esp,0x10
c001ed73:	83 f0 01             	xor    eax,0x1
c001ed76:	0f b6 c0             	movzx  eax,al
c001ed79:	85 c0                	test   eax,eax
c001ed7b:	0f 84 47 01 00 00    	je     c001eec8 <ACPI::open(int, int, void*)+0x320>
c001ed81:	83 ec 0c             	sub    esp,0xc
c001ed84:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ed8b:	50                   	push   eax
c001ed8c:	e8 1b 03 01 00       	call   c002f0ac <LinkedList<Device>::getFirstElement()>
c001ed91:	83 c4 10             	add    esp,0x10
c001ed94:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001ed9b:	83 ec 0c             	sub    esp,0xc
c001ed9e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eda5:	50                   	push   eax
c001eda6:	e8 09 03 01 00       	call   c002f0b4 <LinkedList<Device>::removeFirst()>
c001edab:	83 c4 10             	add    esp,0x10
c001edae:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001edb5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001edbc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001edc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edc7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001edcd:	ba 09 00 00 00       	mov    edx,0x9
c001edd2:	fc                   	cld    
c001edd3:	89 c7                	mov    edi,eax
c001edd5:	89 de                	mov    esi,ebx
c001edd7:	89 d1                	mov    ecx,edx
c001edd9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eddb:	83 ec 08             	sub    esp,0x8
c001edde:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ede2:	50                   	push   eax
c001ede3:	83 ec 24             	sub    esp,0x24
c001ede6:	89 e0                	mov    eax,esp
c001ede8:	89 c3                	mov    ebx,eax
c001edea:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001edee:	ba 09 00 00 00       	mov    edx,0x9
c001edf3:	89 df                	mov    edi,ebx
c001edf5:	89 c6                	mov    esi,eax
c001edf7:	89 d1                	mov    ecx,edx
c001edf9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001edfb:	e8 ca b9 00 00       	call   c002a7ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ee00:	83 c4 30             	add    esp,0x30
c001ee03:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001ee0a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001ee12:	0f 84 48 ff ff ff    	je     c001ed60 <ACPI::open(int, int, void*)+0x1b8>
c001ee18:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001ee23:	83 ec 0c             	sub    esp,0xc
c001ee26:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ee2d:	e8 c4 77 ff ff       	call   c00165f6 <malloc>
c001ee32:	83 c4 10             	add    esp,0x10
c001ee35:	89 c3                	mov    ebx,eax
c001ee37:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ee3c:	83 ec 04             	sub    esp,0x4
c001ee3f:	50                   	push   eax
c001ee40:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ee47:	53                   	push   ebx
c001ee48:	e8 3f b8 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c001ee4d:	83 c4 10             	add    esp,0x10
c001ee50:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001ee57:	83 ec 0c             	sub    esp,0xc
c001ee5a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ee61:	e8 08 bb ff ff       	call   c001a96e <File::exists()>
c001ee66:	83 c4 10             	add    esp,0x10
c001ee69:	0f b6 c0             	movzx  eax,al
c001ee6c:	85 c0                	test   eax,eax
c001ee6e:	74 28                	je     c001ee98 <ACPI::open(int, int, void*)+0x2f0>
c001ee70:	83 ec 08             	sub    esp,0x8
c001ee73:	6a 01                	push   0x1
c001ee75:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ee7c:	e8 b0 5b 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c001ee81:	83 c4 10             	add    esp,0x10
c001ee84:	83 ec 08             	sub    esp,0x8
c001ee87:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ee8e:	50                   	push   eax
c001ee8f:	e8 ef 5d 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c001ee94:	83 c4 10             	add    esp,0x10
c001ee97:	90                   	nop
c001ee98:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001eea0:	0f 84 ba fe ff ff    	je     c001ed60 <ACPI::open(int, int, void*)+0x1b8>
c001eea6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001eead:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeaf:	83 c0 08             	add    eax,0x8
c001eeb2:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001eebe:	ff d0                	call   eax
c001eec0:	83 c4 10             	add    esp,0x10
c001eec3:	e9 98 fe ff ff       	jmp    c001ed60 <ACPI::open(int, int, void*)+0x1b8>
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eed2:	50                   	push   eax
c001eed3:	e8 b4 01 01 00       	call   c002f08c <LinkedList<Device>::~LinkedList()>
c001eed8:	83 c4 10             	add    esp,0x10
c001eedb:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001eee1:	83 ec 08             	sub    esp,0x8
c001eee4:	6a 01                	push   0x1
c001eee6:	68 1d 28 03 c0       	push   0xc003281d
c001eeeb:	e8 41 5b 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c001eef0:	83 c4 10             	add    esp,0x10
c001eef3:	83 ec 08             	sub    esp,0x8
c001eef6:	53                   	push   ebx
c001eef7:	50                   	push   eax
c001eef8:	e8 86 5d 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c001eefd:	83 c4 10             	add    esp,0x10
c001ef00:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ef05:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ef0b:	83 e0 04             	and    eax,0x4
c001ef0e:	0f b6 c0             	movzx  eax,al
c001ef11:	85 c0                	test   eax,eax
c001ef13:	0f 84 1b 01 00 00    	je     c001f034 <ACPI::open(int, int, void*)+0x48c>
c001ef19:	83 ec 0c             	sub    esp,0xc
c001ef1c:	68 3a 28 03 c0       	push   0xc003283a
c001ef21:	e8 15 0e 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c001ef26:	83 c4 10             	add    esp,0x10
c001ef29:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001ef34:	83 ec 0c             	sub    esp,0xc
c001ef37:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001ef3e:	e8 b3 76 ff ff       	call   c00165f6 <malloc>
c001ef43:	83 c4 10             	add    esp,0x10
c001ef46:	89 c3                	mov    ebx,eax
c001ef48:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ef4d:	83 ec 04             	sub    esp,0x4
c001ef50:	50                   	push   eax
c001ef51:	68 57 28 03 c0       	push   0xc0032857
c001ef56:	53                   	push   ebx
c001ef57:	e8 30 b7 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c001ef5c:	83 c4 10             	add    esp,0x10
c001ef5f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001ef66:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ef6e:	74 20                	je     c001ef90 <ACPI::open(int, int, void*)+0x3e8>
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ef7a:	e8 ef b9 ff ff       	call   c001a96e <File::exists()>
c001ef7f:	83 c4 10             	add    esp,0x10
c001ef82:	0f b6 c0             	movzx  eax,al
c001ef85:	85 c0                	test   eax,eax
c001ef87:	74 07                	je     c001ef90 <ACPI::open(int, int, void*)+0x3e8>
c001ef89:	b0 01                	mov    al,0x1
c001ef8b:	eb 07                	jmp    c001ef94 <ACPI::open(int, int, void*)+0x3ec>
c001ef8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ef90:	b0 00                	mov    al,0x0
c001ef92:	66 90                	xchg   ax,ax
c001ef94:	0f b6 c0             	movzx  eax,al
c001ef97:	85 c0                	test   eax,eax
c001ef99:	74 25                	je     c001efc0 <ACPI::open(int, int, void*)+0x418>
c001ef9b:	83 ec 08             	sub    esp,0x8
c001ef9e:	6a 01                	push   0x1
c001efa0:	68 57 28 03 c0       	push   0xc0032857
c001efa5:	e8 87 5a 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c001efaa:	83 c4 10             	add    esp,0x10
c001efad:	83 ec 08             	sub    esp,0x8
c001efb0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001efb7:	50                   	push   eax
c001efb8:	e8 c6 5c 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001efc8:	74 2a                	je     c001eff4 <ACPI::open(int, int, void*)+0x44c>
c001efca:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001efd2:	74 20                	je     c001eff4 <ACPI::open(int, int, void*)+0x44c>
c001efd4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001efdb:	8b 00                	mov    eax,DWORD PTR [eax]
c001efdd:	83 c0 08             	add    eax,0x8
c001efe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001efe2:	83 ec 0c             	sub    esp,0xc
c001efe5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001efec:	ff d0                	call   eax
c001efee:	83 c4 10             	add    esp,0x10
c001eff1:	8d 76 00             	lea    esi,[esi+0x0]
c001eff4:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001eff9:	83 ec 08             	sub    esp,0x8
c001effc:	68 74 28 03 c0       	push   0xc0032874
c001f001:	50                   	push   eax
c001f002:	e8 c1 f1 ff ff       	call   c001e1c8 <findDataTable(unsigned char*, char*)>
c001f007:	83 c4 10             	add    esp,0x10
c001f00a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001f011:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001f019:	74 19                	je     c001f034 <ACPI::open(int, int, void*)+0x48c>
c001f01b:	83 ec 08             	sub    esp,0x8
c001f01e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f025:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001f02c:	e8 13 fb ff ff       	call   c001eb44 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	b8 00 00 00 00       	mov    eax,0x0
c001f039:	81 c4 70 01 00 00    	add    esp,0x170
c001f03f:	5b                   	pop    ebx
c001f040:	5e                   	pop    esi
c001f041:	5f                   	pop    edi
c001f042:	c3                   	ret    
c001f043:	90                   	nop

c001f044 <CPU::close(int, int, void*)>:
c001f044:	31 c0                	xor    eax,eax
c001f046:	c3                   	ret    
c001f047:	90                   	nop

c001f048 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001f048:	60                   	pusha  
c001f049:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f04d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f055:	9c                   	pushf  
c001f056:	fa                   	cli    
c001f057:	0f 09                	wbinvd 
c001f059:	0f 30                	wrmsr  
c001f05b:	9d                   	popf   
c001f05c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f060:	89 02                	mov    DWORD PTR [edx],eax
c001f062:	61                   	popa   
c001f063:	c3                   	ret    

c001f064 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001f064:	60                   	pusha  
c001f065:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f069:	9c                   	pushf  
c001f06a:	fa                   	cli    
c001f06b:	0f 09                	wbinvd 
c001f06d:	31 c0                	xor    eax,eax
c001f06f:	31 d2                	xor    edx,edx
c001f071:	0f 32                	rdmsr  
c001f073:	9d                   	popf   
c001f074:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f078:	89 02                	mov    DWORD PTR [edx],eax
c001f07a:	61                   	popa   
c001f07b:	c3                   	ret    

c001f07c <CPU::AMD_K6_writeback(int, int, int)>:
c001f07c:	56                   	push   esi
c001f07d:	53                   	push   ebx
c001f07e:	83 ec 10             	sub    esp,0x10
c001f081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f085:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001f08a:	75 5d                	jne    c001f0e9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f08c:	83 f8 08             	cmp    eax,0x8
c001f08f:	75 09                	jne    c001f09a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001f091:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001f096:	7e 13                	jle    c001f0ab <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f098:	eb 30                	jmp    c001f0ca <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f09a:	83 f8 06             	cmp    eax,0x6
c001f09d:	7c 4a                	jl     c001f0e9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f09f:	83 f8 07             	cmp    eax,0x7
c001f0a2:	7e 07                	jle    c001f0ab <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f0a4:	83 f8 09             	cmp    eax,0x9
c001f0a7:	74 21                	je     c001f0ca <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f0a9:	eb 3e                	jmp    c001f0e9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f0ab:	89 e6                	mov    esi,esp
c001f0ad:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001f0b3:	56                   	push   esi
c001f0b4:	c1 eb 15             	shr    ebx,0x15
c001f0b7:	68 82 00 00 c0       	push   0xc0000082
c001f0bc:	83 e3 7e             	and    ebx,0x7e
c001f0bf:	e8 a0 ff ff ff       	call   c001f064 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f0c4:	56                   	push   esi
c001f0c5:	6a 00                	push   0x0
c001f0c7:	53                   	push   ebx
c001f0c8:	eb 12                	jmp    c001f0dc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001f0ca:	89 e3                	mov    ebx,esp
c001f0cc:	53                   	push   ebx
c001f0cd:	68 82 00 00 c0       	push   0xc0000082
c001f0d2:	e8 8d ff ff ff       	call   c001f064 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f0d7:	53                   	push   ebx
c001f0d8:	6a 00                	push   0x0
c001f0da:	6a 00                	push   0x0
c001f0dc:	68 82 00 00 c0       	push   0xc0000082
c001f0e1:	e8 62 ff ff ff       	call   c001f048 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001f0e6:	83 c4 18             	add    esp,0x18
c001f0e9:	83 c4 10             	add    esp,0x10
c001f0ec:	5b                   	pop    ebx
c001f0ed:	5e                   	pop    esi
c001f0ee:	c3                   	ret    
c001f0ef:	90                   	nop

c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001f0f0:	55                   	push   ebp
c001f0f1:	57                   	push   edi
c001f0f2:	56                   	push   esi
c001f0f3:	53                   	push   ebx
c001f0f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f0fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f100:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f104:	39 05 38 3f 03 c0    	cmp    DWORD PTR ds:0xc0033f38,eax
c001f10a:	75 23                	jne    c001f12f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001f10c:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001f111:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f115:	89 06                	mov    DWORD PTR [esi],eax
c001f117:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001f11c:	89 07                	mov    DWORD PTR [edi],eax
c001f11e:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001f123:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001f126:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001f12b:	89 02                	mov    DWORD PTR [edx],eax
c001f12d:	eb 3f                	jmp    c001f16e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001f12f:	31 c9                	xor    ecx,ecx
c001f131:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f135:	0f a2                	cpuid  
c001f137:	89 06                	mov    DWORD PTR [esi],eax
c001f139:	89 1f                	mov    DWORD PTR [edi],ebx
c001f13b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f13f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001f142:	89 10                	mov    DWORD PTR [eax],edx
c001f144:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f148:	a3 38 3f 03 c0       	mov    ds:0xc0033f38,eax
c001f14d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f14f:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001f154:	8b 07                	mov    eax,DWORD PTR [edi]
c001f156:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001f15b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f15e:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001f163:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f167:	8b 00                	mov    eax,DWORD PTR [eax]
c001f169:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001f16e:	5b                   	pop    ebx
c001f16f:	5e                   	pop    esi
c001f170:	5f                   	pop    edi
c001f171:	5d                   	pop    ebp
c001f172:	c3                   	ret    
c001f173:	90                   	nop

c001f174 <CPU::cpuidCheckEDX(unsigned int)>:
c001f174:	83 ec 10             	sub    esp,0x10
c001f177:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f17b:	50                   	push   eax
c001f17c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f180:	50                   	push   eax
c001f181:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f185:	50                   	push   eax
c001f186:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f18a:	50                   	push   eax
c001f18b:	6a 01                	push   0x1
c001f18d:	e8 5e ff ff ff       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f192:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f196:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001f19a:	0f 95 c0             	setne  al
c001f19d:	83 c4 24             	add    esp,0x24
c001f1a0:	c3                   	ret    
c001f1a1:	90                   	nop

c001f1a2 <CPU::cpuidCheckECX(unsigned int)>:
c001f1a2:	83 ec 10             	sub    esp,0x10
c001f1a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1a9:	50                   	push   eax
c001f1aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1ae:	50                   	push   eax
c001f1af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1b3:	50                   	push   eax
c001f1b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1b8:	50                   	push   eax
c001f1b9:	6a 01                	push   0x1
c001f1bb:	e8 30 ff ff ff       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1c4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f1c8:	0f 95 c0             	setne  al
c001f1cb:	83 c4 24             	add    esp,0x24
c001f1ce:	c3                   	ret    
c001f1cf:	90                   	nop

c001f1d0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001f1d0:	83 ec 10             	sub    esp,0x10
c001f1d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1d7:	50                   	push   eax
c001f1d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1dc:	50                   	push   eax
c001f1dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1e1:	50                   	push   eax
c001f1e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1e6:	50                   	push   eax
c001f1e7:	6a 07                	push   0x7
c001f1e9:	e8 02 ff ff ff       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1f2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001f1f6:	0f 95 c0             	setne  al
c001f1f9:	83 c4 24             	add    esp,0x24
c001f1fc:	c3                   	ret    
c001f1fd:	90                   	nop

c001f1fe <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001f1fe:	83 ec 10             	sub    esp,0x10
c001f201:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f205:	50                   	push   eax
c001f206:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f20a:	50                   	push   eax
c001f20b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f20f:	50                   	push   eax
c001f210:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f214:	50                   	push   eax
c001f215:	6a 07                	push   0x7
c001f217:	e8 d4 fe ff ff       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f21c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f220:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f224:	0f 95 c0             	setne  al
c001f227:	83 c4 24             	add    esp,0x24
c001f22a:	c3                   	ret    
c001f22b:	90                   	nop

c001f22c <CPU::CPU()>:
c001f22c:	83 ec 0c             	sub    esp,0xc
c001f22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f233:	83 ec 08             	sub    esp,0x8
c001f236:	68 35 2a 03 c0       	push   0xc0032a35
c001f23b:	50                   	push   eax
c001f23c:	e8 27 c4 ff ff       	call   c001b668 <Device::Device(char const*)>
c001f241:	83 c4 10             	add    esp,0x10
c001f244:	ba c8 2a 03 c0       	mov    edx,0xc0032ac8
c001f249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24d:	89 10                	mov    DWORD PTR [eax],edx
c001f24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f253:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f261:	05 78 01 00 00       	add    eax,0x178
c001f266:	83 ec 0c             	sub    esp,0xc
c001f269:	50                   	push   eax
c001f26a:	e8 8d 6b ff ff       	call   c0015dfc <GDT::GDT()>
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f276:	05 7c 09 00 00       	add    eax,0x97c
c001f27b:	83 ec 0c             	sub    esp,0xc
c001f27e:	50                   	push   eax
c001f27f:	e8 c8 6d ff ff       	call   c001604c <IDT::IDT()>
c001f284:	83 c4 10             	add    esp,0x10
c001f287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f28b:	05 7c 11 00 00       	add    eax,0x117c
c001f290:	83 ec 0c             	sub    esp,0xc
c001f293:	50                   	push   eax
c001f294:	e8 eb 87 ff ff       	call   c0017a84 <TSS::TSS()>
c001f299:	83 c4 10             	add    esp,0x10
c001f29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ab:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f2b5:	90                   	nop
c001f2b6:	83 c4 0c             	add    esp,0xc
c001f2b9:	c3                   	ret    

c001f2ba <CPU::displayFeatures()>:
c001f2ba:	c3                   	ret    
c001f2bb:	90                   	nop

c001f2bc <CPU::detectFeatures()>:
c001f2bc:	55                   	push   ebp
c001f2bd:	57                   	push   edi
c001f2be:	56                   	push   esi
c001f2bf:	53                   	push   ebx
c001f2c0:	83 ec 30             	sub    esp,0x30
c001f2c3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f2c7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f2d1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f2d8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f2de:	6a 0d                	push   0xd
c001f2e0:	6a 00                	push   0x0
c001f2e2:	55                   	push   ebp
c001f2e3:	e8 08 12 fe ff       	call   c00004f0 <memset>
c001f2e8:	83 c4 10             	add    esp,0x10
c001f2eb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f2f0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f2f7:	0f 84 db 05 00 00    	je     c001f8d8 <CPU::detectFeatures()+0x61c>
c001f2fd:	83 ec 0c             	sub    esp,0xc
c001f300:	89 ef                	mov    edi,ebp
c001f302:	6a 10                	push   0x10
c001f304:	e8 6b fe ff ff       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c001f309:	83 e0 01             	and    eax,0x1
c001f30c:	8d 14 00             	lea    edx,[eax+eax*1]
c001f30f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f315:	83 e0 fd             	and    eax,0xfffffffd
c001f318:	09 d0                	or     eax,edx
c001f31a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f320:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f327:	e8 48 fe ff ff       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c001f32c:	83 e0 01             	and    eax,0x1
c001f32f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f336:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f33c:	83 e0 fb             	and    eax,0xfffffffb
c001f33f:	09 d0                	or     eax,edx
c001f341:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f347:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f34e:	e8 21 fe ff ff       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c001f353:	83 e0 01             	and    eax,0x1
c001f356:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f35d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f363:	83 e0 f7             	and    eax,0xfffffff7
c001f366:	09 d0                	or     eax,edx
c001f368:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f36e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f375:	e8 fa fd ff ff       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c001f37a:	83 e0 01             	and    eax,0x1
c001f37d:	c1 e0 04             	shl    eax,0x4
c001f380:	89 c2                	mov    edx,eax
c001f382:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f388:	83 e0 ef             	and    eax,0xffffffef
c001f38b:	09 d0                	or     eax,edx
c001f38d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f393:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f39a:	e8 d5 fd ff ff       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c001f39f:	83 e0 01             	and    eax,0x1
c001f3a2:	c1 e0 05             	shl    eax,0x5
c001f3a5:	89 c2                	mov    edx,eax
c001f3a7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3ad:	83 e0 df             	and    eax,0xffffffdf
c001f3b0:	09 d0                	or     eax,edx
c001f3b2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3b8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f3bf:	e8 b0 fd ff ff       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c001f3c4:	83 e0 01             	and    eax,0x1
c001f3c7:	8d 14 00             	lea    edx,[eax+eax*1]
c001f3ca:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f3d0:	83 e0 fd             	and    eax,0xfffffffd
c001f3d3:	09 d0                	or     eax,edx
c001f3d5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f3db:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f3e2:	e8 8d fd ff ff       	call   c001f174 <CPU::cpuidCheckEDX(unsigned int)>
c001f3e7:	83 e0 01             	and    eax,0x1
c001f3ea:	c1 e0 06             	shl    eax,0x6
c001f3ed:	89 c2                	mov    edx,eax
c001f3ef:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f3f5:	83 e0 bf             	and    eax,0xffffffbf
c001f3f8:	09 d0                	or     eax,edx
c001f3fa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f400:	58                   	pop    eax
c001f401:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f405:	50                   	push   eax
c001f406:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f40a:	50                   	push   eax
c001f40b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f40f:	56                   	push   esi
c001f410:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f414:	50                   	push   eax
c001f415:	6a 00                	push   0x0
c001f417:	e8 d4 fc ff ff       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f41c:	b8 04 00 00 00       	mov    eax,0x4
c001f421:	89 c1                	mov    ecx,eax
c001f423:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f425:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f42b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f42f:	89 c1                	mov    ecx,eax
c001f431:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f433:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f439:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f43d:	89 c1                	mov    ecx,eax
c001f43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f441:	83 c4 18             	add    esp,0x18
c001f444:	68 44 29 03 c0       	push   0xc0032944
c001f449:	55                   	push   ebp
c001f44a:	e8 01 13 fe ff       	call   c0000750 <strcmp>
c001f44f:	83 c4 10             	add    esp,0x10
c001f452:	85 c0                	test   eax,eax
c001f454:	75 0f                	jne    c001f465 <CPU::detectFeatures()+0x1a9>
c001f456:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f460:	e9 22 02 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f465:	50                   	push   eax
c001f466:	50                   	push   eax
c001f467:	68 51 29 03 c0       	push   0xc0032951
c001f46c:	55                   	push   ebp
c001f46d:	e8 de 12 fe ff       	call   c0000750 <strcmp>
c001f472:	83 c4 10             	add    esp,0x10
c001f475:	85 c0                	test   eax,eax
c001f477:	74 dd                	je     c001f456 <CPU::detectFeatures()+0x19a>
c001f479:	50                   	push   eax
c001f47a:	50                   	push   eax
c001f47b:	68 5e 29 03 c0       	push   0xc003295e
c001f480:	55                   	push   ebp
c001f481:	e8 ca 12 fe ff       	call   c0000750 <strcmp>
c001f486:	83 c4 10             	add    esp,0x10
c001f489:	85 c0                	test   eax,eax
c001f48b:	74 2a                	je     c001f4b7 <CPU::detectFeatures()+0x1fb>
c001f48d:	50                   	push   eax
c001f48e:	50                   	push   eax
c001f48f:	68 6b 29 03 c0       	push   0xc003296b
c001f494:	55                   	push   ebp
c001f495:	e8 b6 12 fe ff       	call   c0000750 <strcmp>
c001f49a:	83 c4 10             	add    esp,0x10
c001f49d:	85 c0                	test   eax,eax
c001f49f:	74 16                	je     c001f4b7 <CPU::detectFeatures()+0x1fb>
c001f4a1:	50                   	push   eax
c001f4a2:	50                   	push   eax
c001f4a3:	68 78 29 03 c0       	push   0xc0032978
c001f4a8:	55                   	push   ebp
c001f4a9:	e8 a2 12 fe ff       	call   c0000750 <strcmp>
c001f4ae:	83 c4 10             	add    esp,0x10
c001f4b1:	85 c0                	test   eax,eax
c001f4b3:	74 48                	je     c001f4fd <CPU::detectFeatures()+0x241>
c001f4b5:	eb 0f                	jmp    c001f4c6 <CPU::detectFeatures()+0x20a>
c001f4b7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f4c1:	e9 c1 01 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f4c6:	50                   	push   eax
c001f4c7:	50                   	push   eax
c001f4c8:	68 85 29 03 c0       	push   0xc0032985
c001f4cd:	55                   	push   ebp
c001f4ce:	e8 7d 12 fe ff       	call   c0000750 <strcmp>
c001f4d3:	83 c4 10             	add    esp,0x10
c001f4d6:	85 c0                	test   eax,eax
c001f4d8:	74 23                	je     c001f4fd <CPU::detectFeatures()+0x241>
c001f4da:	57                   	push   edi
c001f4db:	57                   	push   edi
c001f4dc:	68 92 29 03 c0       	push   0xc0032992
c001f4e1:	55                   	push   ebp
c001f4e2:	e8 69 12 fe ff       	call   c0000750 <strcmp>
c001f4e7:	83 c4 10             	add    esp,0x10
c001f4ea:	85 c0                	test   eax,eax
c001f4ec:	75 1e                	jne    c001f50c <CPU::detectFeatures()+0x250>
c001f4ee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f4f8:	e9 8a 01 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f4fd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f507:	e9 7b 01 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f50c:	56                   	push   esi
c001f50d:	56                   	push   esi
c001f50e:	68 9f 29 03 c0       	push   0xc003299f
c001f513:	55                   	push   ebp
c001f514:	e8 37 12 fe ff       	call   c0000750 <strcmp>
c001f519:	83 c4 10             	add    esp,0x10
c001f51c:	85 c0                	test   eax,eax
c001f51e:	75 0f                	jne    c001f52f <CPU::detectFeatures()+0x273>
c001f520:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f52a:	e9 58 01 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f52f:	51                   	push   ecx
c001f530:	51                   	push   ecx
c001f531:	68 5e 29 03 c0       	push   0xc003295e
c001f536:	55                   	push   ebp
c001f537:	e8 14 12 fe ff       	call   c0000750 <strcmp>
c001f53c:	83 c4 10             	add    esp,0x10
c001f53f:	85 c0                	test   eax,eax
c001f541:	75 0f                	jne    c001f552 <CPU::detectFeatures()+0x296>
c001f543:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f54d:	e9 35 01 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f552:	52                   	push   edx
c001f553:	52                   	push   edx
c001f554:	68 ac 29 03 c0       	push   0xc00329ac
c001f559:	55                   	push   ebp
c001f55a:	e8 f1 11 fe ff       	call   c0000750 <strcmp>
c001f55f:	83 c4 10             	add    esp,0x10
c001f562:	85 c0                	test   eax,eax
c001f564:	75 0f                	jne    c001f575 <CPU::detectFeatures()+0x2b9>
c001f566:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f570:	e9 12 01 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f575:	50                   	push   eax
c001f576:	50                   	push   eax
c001f577:	68 b9 29 03 c0       	push   0xc00329b9
c001f57c:	55                   	push   ebp
c001f57d:	e8 ce 11 fe ff       	call   c0000750 <strcmp>
c001f582:	83 c4 10             	add    esp,0x10
c001f585:	85 c0                	test   eax,eax
c001f587:	75 0f                	jne    c001f598 <CPU::detectFeatures()+0x2dc>
c001f589:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f593:	e9 ef 00 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f598:	50                   	push   eax
c001f599:	50                   	push   eax
c001f59a:	68 c6 29 03 c0       	push   0xc00329c6
c001f59f:	55                   	push   ebp
c001f5a0:	e8 ab 11 fe ff       	call   c0000750 <strcmp>
c001f5a5:	83 c4 10             	add    esp,0x10
c001f5a8:	85 c0                	test   eax,eax
c001f5aa:	75 0f                	jne    c001f5bb <CPU::detectFeatures()+0x2ff>
c001f5ac:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f5b6:	e9 cc 00 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f5bb:	50                   	push   eax
c001f5bc:	50                   	push   eax
c001f5bd:	68 d3 29 03 c0       	push   0xc00329d3
c001f5c2:	55                   	push   ebp
c001f5c3:	e8 88 11 fe ff       	call   c0000750 <strcmp>
c001f5c8:	83 c4 10             	add    esp,0x10
c001f5cb:	85 c0                	test   eax,eax
c001f5cd:	75 0f                	jne    c001f5de <CPU::detectFeatures()+0x322>
c001f5cf:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f5d9:	e9 a9 00 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f5de:	50                   	push   eax
c001f5df:	50                   	push   eax
c001f5e0:	68 e0 29 03 c0       	push   0xc00329e0
c001f5e5:	55                   	push   ebp
c001f5e6:	e8 65 11 fe ff       	call   c0000750 <strcmp>
c001f5eb:	83 c4 10             	add    esp,0x10
c001f5ee:	85 c0                	test   eax,eax
c001f5f0:	75 0f                	jne    c001f601 <CPU::detectFeatures()+0x345>
c001f5f2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f5fc:	e9 86 00 00 00       	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f601:	50                   	push   eax
c001f602:	50                   	push   eax
c001f603:	68 ed 29 03 c0       	push   0xc00329ed
c001f608:	55                   	push   ebp
c001f609:	e8 42 11 fe ff       	call   c0000750 <strcmp>
c001f60e:	83 c4 10             	add    esp,0x10
c001f611:	85 c0                	test   eax,eax
c001f613:	75 0c                	jne    c001f621 <CPU::detectFeatures()+0x365>
c001f615:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f61f:	eb 66                	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f621:	50                   	push   eax
c001f622:	50                   	push   eax
c001f623:	68 fa 29 03 c0       	push   0xc00329fa
c001f628:	55                   	push   ebp
c001f629:	e8 22 11 fe ff       	call   c0000750 <strcmp>
c001f62e:	83 c4 10             	add    esp,0x10
c001f631:	85 c0                	test   eax,eax
c001f633:	75 0c                	jne    c001f641 <CPU::detectFeatures()+0x385>
c001f635:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f63f:	eb 46                	jmp    c001f687 <CPU::detectFeatures()+0x3cb>
c001f641:	57                   	push   edi
c001f642:	57                   	push   edi
c001f643:	68 07 2a 03 c0       	push   0xc0032a07
c001f648:	55                   	push   ebp
c001f649:	e8 02 11 fe ff       	call   c0000750 <strcmp>
c001f64e:	83 c4 10             	add    esp,0x10
c001f651:	85 c0                	test   eax,eax
c001f653:	74 e0                	je     c001f635 <CPU::detectFeatures()+0x379>
c001f655:	56                   	push   esi
c001f656:	56                   	push   esi
c001f657:	68 14 2a 03 c0       	push   0xc0032a14
c001f65c:	55                   	push   ebp
c001f65d:	e8 ee 10 fe ff       	call   c0000750 <strcmp>
c001f662:	83 c4 10             	add    esp,0x10
c001f665:	85 c0                	test   eax,eax
c001f667:	74 cc                	je     c001f635 <CPU::detectFeatures()+0x379>
c001f669:	51                   	push   ecx
c001f66a:	51                   	push   ecx
c001f66b:	68 21 2a 03 c0       	push   0xc0032a21
c001f670:	55                   	push   ebp
c001f671:	e8 da 10 fe ff       	call   c0000750 <strcmp>
c001f676:	83 c4 10             	add    esp,0x10
c001f679:	85 c0                	test   eax,eax
c001f67b:	74 b8                	je     c001f635 <CPU::detectFeatures()+0x379>
c001f67d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f687:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f68c:	0f 86 be 00 00 00    	jbe    c001f750 <CPU::detectFeatures()+0x494>
c001f692:	83 ec 0c             	sub    esp,0xc
c001f695:	68 80 00 00 00       	push   0x80
c001f69a:	e8 31 fb ff ff       	call   c001f1d0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f69f:	83 e0 01             	and    eax,0x1
c001f6a2:	c1 e0 06             	shl    eax,0x6
c001f6a5:	89 c2                	mov    edx,eax
c001f6a7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f6ad:	83 e0 bf             	and    eax,0xffffffbf
c001f6b0:	09 d0                	or     eax,edx
c001f6b2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f6b8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f6bf:	e8 0c fb ff ff       	call   c001f1d0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f6c4:	83 e0 01             	and    eax,0x1
c001f6c7:	c1 e0 04             	shl    eax,0x4
c001f6ca:	89 c2                	mov    edx,eax
c001f6cc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f6d2:	83 e0 ef             	and    eax,0xffffffef
c001f6d5:	09 d0                	or     eax,edx
c001f6d7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f6dd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f6e4:	e8 e7 fa ff ff       	call   c001f1d0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f6e9:	89 c2                	mov    edx,eax
c001f6eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f6f1:	c1 e2 07             	shl    edx,0x7
c001f6f4:	83 e0 7f             	and    eax,0x7f
c001f6f7:	09 d0                	or     eax,edx
c001f6f9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f6ff:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f706:	e8 f3 fa ff ff       	call   c001f1fe <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f70b:	83 e0 01             	and    eax,0x1
c001f70e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f715:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f71b:	83 e0 f7             	and    eax,0xfffffff7
c001f71e:	09 d0                	or     eax,edx
c001f720:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f726:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f72d:	e8 cc fa ff ff       	call   c001f1fe <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f732:	83 c4 10             	add    esp,0x10
c001f735:	83 e0 01             	and    eax,0x1
c001f738:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f73f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f745:	83 e0 fb             	and    eax,0xfffffffb
c001f748:	09 d0                	or     eax,edx
c001f74a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f750:	83 ec 0c             	sub    esp,0xc
c001f753:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f757:	50                   	push   eax
c001f758:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f75c:	50                   	push   eax
c001f75d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f761:	57                   	push   edi
c001f762:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f766:	56                   	push   esi
c001f767:	6a 01                	push   0x1
c001f769:	e8 82 f9 ff ff       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f76e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f772:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f778:	89 c1                	mov    ecx,eax
c001f77a:	83 e2 f0             	and    edx,0xfffffff0
c001f77d:	83 e1 0f             	and    ecx,0xf
c001f780:	09 ca                	or     edx,ecx
c001f782:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f788:	89 c2                	mov    edx,eax
c001f78a:	c1 ea 04             	shr    edx,0x4
c001f78d:	83 e2 0f             	and    edx,0xf
c001f790:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f794:	89 d1                	mov    ecx,edx
c001f796:	83 c4 20             	add    esp,0x20
c001f799:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f79f:	c1 e1 06             	shl    ecx,0x6
c001f7a2:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f7a8:	09 ca                	or     edx,ecx
c001f7aa:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f7b1:	89 c2                	mov    edx,eax
c001f7b3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f7b9:	c1 ea 08             	shr    edx,0x8
c001f7bc:	83 e1 3f             	and    ecx,0x3f
c001f7bf:	83 e2 0f             	and    edx,0xf
c001f7c2:	89 d5                	mov    ebp,edx
c001f7c4:	83 e5 03             	and    ebp,0x3
c001f7c7:	c1 e5 06             	shl    ebp,0x6
c001f7ca:	09 e9                	or     ecx,ebp
c001f7cc:	89 d5                	mov    ebp,edx
c001f7ce:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f7d4:	c1 ed 02             	shr    ebp,0x2
c001f7d7:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f7dd:	83 e1 c0             	and    ecx,0xffffffc0
c001f7e0:	09 e9                	or     ecx,ebp
c001f7e2:	89 c5                	mov    ebp,eax
c001f7e4:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f7ea:	c1 ed 08             	shr    ebp,0x8
c001f7ed:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f7f3:	83 e5 30             	and    ebp,0x30
c001f7f6:	83 e1 cf             	and    ecx,0xffffffcf
c001f7f9:	09 e9                	or     ecx,ebp
c001f7fb:	83 fa 06             	cmp    edx,0x6
c001f7fe:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f804:	74 05                	je     c001f80b <CPU::detectFeatures()+0x54f>
c001f806:	83 fa 0f             	cmp    edx,0xf
c001f809:	75 64                	jne    c001f86f <CPU::detectFeatures()+0x5b3>
c001f80b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f811:	89 c1                	mov    ecx,eax
c001f813:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f819:	c1 e9 10             	shr    ecx,0x10
c001f81c:	c1 e1 04             	shl    ecx,0x4
c001f81f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f823:	0f b6 c9             	movzx  ecx,cl
c001f826:	c1 e1 06             	shl    ecx,0x6
c001f829:	09 e9                	or     ecx,ebp
c001f82b:	83 fa 0f             	cmp    edx,0xf
c001f82e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f835:	75 38                	jne    c001f86f <CPU::detectFeatures()+0x5b3>
c001f837:	c1 e8 14             	shr    eax,0x14
c001f83a:	83 c0 0f             	add    eax,0xf
c001f83d:	0f b6 c0             	movzx  eax,al
c001f840:	89 c2                	mov    edx,eax
c001f842:	c1 e8 02             	shr    eax,0x2
c001f845:	83 e2 03             	and    edx,0x3
c001f848:	89 d1                	mov    ecx,edx
c001f84a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f850:	c1 e1 06             	shl    ecx,0x6
c001f853:	83 e2 3f             	and    edx,0x3f
c001f856:	09 ca                	or     edx,ecx
c001f858:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f85e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f864:	83 e2 c0             	and    edx,0xffffffc0
c001f867:	09 d0                	or     eax,edx
c001f869:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f86f:	83 ec 0c             	sub    esp,0xc
c001f872:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f878:	83 c8 07             	or     eax,0x7
c001f87b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f881:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f885:	50                   	push   eax
c001f886:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f88a:	55                   	push   ebp
c001f88b:	57                   	push   edi
c001f88c:	56                   	push   esi
c001f88d:	68 00 00 00 80       	push   0x80000000
c001f892:	e8 59 f8 ff ff       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f897:	83 c4 20             	add    esp,0x20
c001f89a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f8a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8a6:	76 1e                	jbe    c001f8c6 <CPU::detectFeatures()+0x60a>
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	50                   	push   eax
c001f8ac:	55                   	push   ebp
c001f8ad:	57                   	push   edi
c001f8ae:	56                   	push   esi
c001f8af:	68 01 00 00 80       	push   0x80000001
c001f8b4:	e8 37 f8 ff ff       	call   c001f0f0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f8b9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f8c3:	83 c4 20             	add    esp,0x20
c001f8c6:	52                   	push   edx
c001f8c7:	52                   	push   edx
c001f8c8:	68 2d 2a 03 c0       	push   0xc0032a2d
c001f8cd:	53                   	push   ebx
c001f8ce:	e8 87 bd ff ff       	call   c001b65a <Device::setName(char const*)>
c001f8d3:	83 c4 10             	add    esp,0x10
c001f8d6:	eb 69                	jmp    c001f941 <CPU::detectFeatures()+0x685>
c001f8d8:	50                   	push   eax
c001f8d9:	50                   	push   eax
c001f8da:	68 92 29 03 c0       	push   0xc0032992
c001f8df:	55                   	push   ebp
c001f8e0:	e8 5b 0d fe ff       	call   c0000640 <strcpy>
c001f8e5:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f8ef:	e8 cf 08 fe ff       	call   c00001c3 <is486>
c001f8f4:	83 c4 10             	add    esp,0x10
c001f8f7:	85 c0                	test   eax,eax
c001f8f9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f8ff:	74 1f                	je     c001f920 <CPU::detectFeatures()+0x664>
c001f901:	83 c8 07             	or     eax,0x7
c001f904:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f90a:	0f 20 c0             	mov    eax,cr0
c001f90d:	83 e0 14             	and    eax,0x14
c001f910:	83 f8 04             	cmp    eax,0x4
c001f913:	75 10                	jne    c001f925 <CPU::detectFeatures()+0x669>
c001f915:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f91b:	83 e0 fd             	and    eax,0xfffffffd
c001f91e:	eb 1b                	jmp    c001f93b <CPU::detectFeatures()+0x67f>
c001f920:	83 e0 f8             	and    eax,0xfffffff8
c001f923:	eb df                	jmp    c001f904 <CPU::detectFeatures()+0x648>
c001f925:	e8 74 08 fe ff       	call   c000019e <hasLegacyFPU>
c001f92a:	83 e0 01             	and    eax,0x1
c001f92d:	8d 14 00             	lea    edx,[eax+eax*1]
c001f930:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f936:	83 e0 fd             	and    eax,0xfffffffd
c001f939:	09 d0                	or     eax,edx
c001f93b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f941:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f948:	74 17                	je     c001f961 <CPU::detectFeatures()+0x6a5>
c001f94a:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f950:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f956:	83 c8 10             	or     eax,0x10
c001f959:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f95f:	eb 20                	jmp    c001f981 <CPU::detectFeatures()+0x6c5>
c001f961:	e8 38 08 fe ff       	call   c000019e <hasLegacyFPU>
c001f966:	83 e0 01             	and    eax,0x1
c001f969:	8d 14 00             	lea    edx,[eax+eax*1]
c001f96c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f972:	83 e0 fd             	and    eax,0xfffffffd
c001f975:	09 d0                	or     eax,edx
c001f977:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f97d:	a8 02                	test   al,0x2
c001f97f:	75 c9                	jne    c001f94a <CPU::detectFeatures()+0x68e>
c001f981:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f988:	83 c4 2c             	add    esp,0x2c
c001f98b:	5b                   	pop    ebx
c001f98c:	5e                   	pop    esi
c001f98d:	5f                   	pop    edi
c001f98e:	5d                   	pop    ebp
c001f98f:	c3                   	ret    

c001f990 <CPU::setupSMEP()>:
c001f990:	0f 20 e0             	mov    eax,cr4
c001f993:	0d 00 00 10 00       	or     eax,0x100000
c001f998:	0f 22 e0             	mov    cr4,eax
c001f99b:	c3                   	ret    

c001f99c <CPU::setupUMIP()>:
c001f99c:	0f 20 e0             	mov    eax,cr4
c001f99f:	80 cc 08             	or     ah,0x8
c001f9a2:	0f 22 e0             	mov    cr4,eax
c001f9a5:	c3                   	ret    

c001f9a6 <CPU::setupTSC()>:
c001f9a6:	0f 20 e0             	mov    eax,cr4
c001f9a9:	83 c8 04             	or     eax,0x4
c001f9ac:	0f 22 e0             	mov    cr4,eax
c001f9af:	c3                   	ret    

c001f9b0 <CPU::setupLargePages()>:
c001f9b0:	0f 20 e0             	mov    eax,cr4
c001f9b3:	83 c8 10             	or     eax,0x10
c001f9b6:	0f 22 e0             	mov    cr4,eax
c001f9b9:	c3                   	ret    

c001f9ba <CPU::setupPAT()>:
c001f9ba:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f9bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f9c6:	74 2c                	je     c001f9f4 <CPU::setupPAT()+0x3a>
c001f9c8:	53                   	push   ebx
c001f9c9:	83 ec 10             	sub    esp,0x10
c001f9cc:	68 77 02 00 00       	push   0x277
c001f9d1:	50                   	push   eax
c001f9d2:	e8 89 61 ff ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c001f9d7:	83 e2 f8             	and    edx,0xfffffff8
c001f9da:	83 ca 01             	or     edx,0x1
c001f9dd:	52                   	push   edx
c001f9de:	50                   	push   eax
c001f9df:	68 77 02 00 00       	push   0x277
c001f9e4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f9ea:	e8 9d 61 ff ff       	call   c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>
c001f9ef:	83 c4 28             	add    esp,0x28
c001f9f2:	5b                   	pop    ebx
c001f9f3:	c3                   	ret    
c001f9f4:	c3                   	ret    
c001f9f5:	90                   	nop

c001f9f6 <CPU::setupMTRR()>:
c001f9f6:	c3                   	ret    
c001f9f7:	90                   	nop

c001f9f8 <CPU::setupGlobalPages()>:
c001f9f8:	0f 20 e0             	mov    eax,cr4
c001f9fb:	0c 80                	or     al,0x80
c001f9fd:	0f 22 e0             	mov    cr4,eax
c001fa00:	c3                   	ret    
c001fa01:	90                   	nop

c001fa02 <CPU::allowUsermodeDataAccess()>:
c001fa02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa06:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fa0d:	74 03                	je     c001fa12 <CPU::allowUsermodeDataAccess()+0x10>
c001fa0f:	0f 01 cb             	stac   
c001fa12:	c3                   	ret    
c001fa13:	90                   	nop

c001fa14 <CPU::prohibitUsermodeDataAccess()>:
c001fa14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa18:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fa1f:	74 03                	je     c001fa24 <CPU::prohibitUsermodeDataAccess()+0x10>
c001fa21:	0f 01 ca             	clac   
c001fa24:	c3                   	ret    
c001fa25:	90                   	nop

c001fa26 <CPU::setupSMAP()>:
c001fa26:	0f 20 e0             	mov    eax,cr4
c001fa29:	0d 00 00 20 00       	or     eax,0x200000
c001fa2e:	0f 22 e0             	mov    cr4,eax
c001fa31:	eb e1                	jmp    c001fa14 <CPU::prohibitUsermodeDataAccess()>
c001fa33:	90                   	nop

c001fa34 <CPU::setupFeatures()>:
c001fa34:	53                   	push   ebx
c001fa35:	83 ec 08             	sub    esp,0x8
c001fa38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa3c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001fa43:	74 18                	je     c001fa5d <CPU::setupFeatures()+0x29>
c001fa45:	83 ec 0c             	sub    esp,0xc
c001fa48:	68 39 2a 03 c0       	push   0xc0032a39
c001fa4d:	e8 33 9a ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fa52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa55:	e8 42 ff ff ff       	call   c001f99c <CPU::setupUMIP()>
c001fa5a:	83 c4 10             	add    esp,0x10
c001fa5d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001fa64:	74 18                	je     c001fa7e <CPU::setupFeatures()+0x4a>
c001fa66:	83 ec 0c             	sub    esp,0xc
c001fa69:	68 43 2a 03 c0       	push   0xc0032a43
c001fa6e:	e8 12 9a ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fa73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa76:	e8 2b ff ff ff       	call   c001f9a6 <CPU::setupTSC()>
c001fa7b:	83 c4 10             	add    esp,0x10
c001fa7e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001fa85:	74 18                	je     c001fa9f <CPU::setupFeatures()+0x6b>
c001fa87:	83 ec 0c             	sub    esp,0xc
c001fa8a:	68 4c 2a 03 c0       	push   0xc0032a4c
c001fa8f:	e8 f1 99 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fa94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa97:	e8 14 ff ff ff       	call   c001f9b0 <CPU::setupLargePages()>
c001fa9c:	83 c4 10             	add    esp,0x10
c001fa9f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001faa6:	74 18                	je     c001fac0 <CPU::setupFeatures()+0x8c>
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	68 55 2a 03 c0       	push   0xc0032a55
c001fab0:	e8 d0 99 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fab5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fab8:	e8 3b ff ff ff       	call   c001f9f8 <CPU::setupGlobalPages()>
c001fabd:	83 c4 10             	add    esp,0x10
c001fac0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001fac7:	74 18                	je     c001fae1 <CPU::setupFeatures()+0xad>
c001fac9:	83 ec 0c             	sub    esp,0xc
c001facc:	68 67 2a 03 c0       	push   0xc0032a67
c001fad1:	e8 af 99 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fad9:	e8 dc fe ff ff       	call   c001f9ba <CPU::setupPAT()>
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001fae8:	74 11                	je     c001fafb <CPU::setupFeatures()+0xc7>
c001faea:	c7 44 24 10 70 2a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032a70
c001faf2:	83 c4 08             	add    esp,0x8
c001faf5:	5b                   	pop    ebx
c001faf6:	e9 8a 99 ff ff       	jmp    c0019485 <Dbg::kprintf(char const*, ...)>
c001fafb:	83 c4 08             	add    esp,0x8
c001fafe:	5b                   	pop    ebx
c001faff:	c3                   	ret    

c001fb00 <CPU::open(int, int, void*)>:
c001fb00:	55                   	push   ebp
c001fb01:	57                   	push   edi
c001fb02:	56                   	push   esi
c001fb03:	53                   	push   ebx
c001fb04:	83 ec 18             	sub    esp,0x18
c001fb07:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001fb0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fb0f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fb13:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001fb19:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001fb1f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001fb25:	50                   	push   eax
c001fb26:	e8 33 63 ff ff       	call   c0015e5e <GDT::setup()>
c001fb2b:	83 c4 0c             	add    esp,0xc
c001fb2e:	6a 00                	push   0x0
c001fb30:	68 ef be ad de       	push   0xdeadbeef
c001fb35:	55                   	push   ebp
c001fb36:	e8 8d 7f ff ff       	call   c0017ac8 <TSS::setup(unsigned long, unsigned long)>
c001fb3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fb3e:	e8 65 7f ff ff       	call   c0017aa8 <TSS::flush()>
c001fb43:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001fb49:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb4c:	e8 71 65 ff ff       	call   c00160c2 <IDT::setup()>
c001fb51:	b8 00 04 00 00       	mov    eax,0x400
c001fb56:	0f 23 f8             	mov    db7,eax
c001fb59:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001fb63:	e8 97 6d ff ff       	call   c00168ff <Phys::allocatePage()>
c001fb68:	83 c4 10             	add    esp,0x10
c001fb6b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fb71:	85 f6                	test   esi,esi
c001fb73:	89 38                	mov    DWORD PTR [eax],edi
c001fb75:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fb7b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001fb7e:	74 10                	je     c001fb90 <CPU::open(int, int, void*)+0x90>
c001fb80:	50                   	push   eax
c001fb81:	50                   	push   eax
c001fb82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb88:	56                   	push   esi
c001fb89:	e8 60 88 ff ff       	call   c00183ee <VAS::setCPUSpecific(unsigned long)>
c001fb8e:	eb 0d                	jmp    c001fb9d <CPU::open(int, int, void*)+0x9d>
c001fb90:	83 ec 0c             	sub    esp,0xc
c001fb93:	68 7a 2a 03 c0       	push   0xc0032a7a
c001fb98:	e8 01 09 00 00       	call   c002049e <KePanic(char const*)>
c001fb9d:	83 c4 10             	add    esp,0x10
c001fba0:	83 ec 0c             	sub    esp,0xc
c001fba3:	68 88 2a 03 c0       	push   0xc0032a88
c001fba8:	e8 8e 01 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c001fbad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbb0:	e8 07 f7 ff ff       	call   c001f2bc <CPU::detectFeatures()>
c001fbb5:	c7 04 24 ab 2a 03 c0 	mov    DWORD PTR [esp],0xc0032aab
c001fbbc:	e8 7a 01 00 00       	call   c001fd3b <KeSetBootMessage(char const*)>
c001fbc1:	e8 17 77 00 00       	call   c00272dd <HalInitialise()>
c001fbc6:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001fbcb:	83 e0 10             	and    eax,0x10
c001fbce:	83 f8 01             	cmp    eax,0x1
c001fbd1:	19 c0                	sbb    eax,eax
c001fbd3:	83 e0 46             	and    eax,0x46
c001fbd6:	83 c0 1e             	add    eax,0x1e
c001fbd9:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbdc:	e8 5c d3 ff ff       	call   c001cf3d <setupTimer(int)>
c001fbe1:	83 c4 10             	add    esp,0x10
c001fbe4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001fbea:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001fbf1:	74 0c                	je     c001fbff <CPU::open(int, int, void*)+0xff>
c001fbf3:	83 ec 0c             	sub    esp,0xc
c001fbf6:	53                   	push   ebx
c001fbf7:	e8 38 fe ff ff       	call   c001fa34 <CPU::setupFeatures()>
c001fbfc:	83 c4 10             	add    esp,0x10
c001fbff:	83 c4 0c             	add    esp,0xc
c001fc02:	31 c0                	xor    eax,eax
c001fc04:	5b                   	pop    ebx
c001fc05:	5e                   	pop    esi
c001fc06:	5f                   	pop    edi
c001fc07:	5d                   	pop    ebp
c001fc08:	c3                   	ret    

c001fc09 <KeInitialiseAtexit()>:
c001fc09:	83 ec 10             	sub    esp,0x10
c001fc0c:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001fc16:	6a 60                	push   0x60
c001fc18:	6a 00                	push   0x0
c001fc1a:	68 20 f9 03 c0       	push   0xc003f920
c001fc1f:	e8 cc 08 fe ff       	call   c00004f0 <memset>
c001fc24:	83 c4 1c             	add    esp,0x1c
c001fc27:	c3                   	ret    

c001fc28 <KeRegisterAtexit(void (*)(void*), void*)>:
c001fc28:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001fc2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc31:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001fc38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fc3c:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fc43:	40                   	inc    eax
c001fc44:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fc49:	83 f8 17             	cmp    eax,0x17
c001fc4c:	7e 0d                	jle    c001fc5b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fc4e:	c7 44 24 04 ec 2a 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032aec
c001fc56:	e9 43 08 00 00       	jmp    c002049e <KePanic(char const*)>
c001fc5b:	c3                   	ret    

c001fc5c <KeExecuteAtexit()>:
c001fc5c:	53                   	push   ebx
c001fc5d:	31 db                	xor    ebx,ebx
c001fc5f:	83 ec 08             	sub    esp,0x8
c001fc62:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fc68:	7e 50                	jle    c001fcba <KeExecuteAtexit()+0x5e>
c001fc6a:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fc71:	85 c0                	test   eax,eax
c001fc73:	74 42                	je     c001fcb7 <KeExecuteAtexit()+0x5b>
c001fc75:	51                   	push   ecx
c001fc76:	50                   	push   eax
c001fc77:	53                   	push   ebx
c001fc78:	68 05 2b 03 c0       	push   0xc0032b05
c001fc7d:	e8 03 98 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fc82:	58                   	pop    eax
c001fc83:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fc8a:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fc91:	c7 04 24 27 2b 03 c0 	mov    DWORD PTR [esp],0xc0032b27
c001fc98:	e8 e8 97 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fc9d:	c7 04 24 d3 3c 03 c0 	mov    DWORD PTR [esp],0xc0033cd3
c001fca4:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fcaf:	e8 d1 97 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fcb4:	83 c4 10             	add    esp,0x10
c001fcb7:	43                   	inc    ebx
c001fcb8:	eb a8                	jmp    c001fc62 <KeExecuteAtexit()+0x6>
c001fcba:	83 c4 08             	add    esp,0x8
c001fcbd:	5b                   	pop    ebx
c001fcbe:	c3                   	ret    

c001fcbf <KeDisplaySplashScreen()>:
c001fcbf:	55                   	push   ebp
c001fcc0:	bd 05 00 00 00       	mov    ebp,0x5
c001fcc5:	57                   	push   edi
c001fcc6:	bf 0a 00 00 00       	mov    edi,0xa
c001fccb:	56                   	push   esi
c001fccc:	31 f6                	xor    esi,esi
c001fcce:	53                   	push   ebx
c001fccf:	31 db                	xor    ebx,ebx
c001fcd1:	83 ec 0c             	sub    esp,0xc
c001fcd4:	0f b6 96 40 3f 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc0c0]
c001fcdb:	89 d0                	mov    eax,edx
c001fcdd:	85 d2                	test   edx,edx
c001fcdf:	74 52                	je     c001fd33 <KeDisplaySplashScreen()+0x74>
c001fce1:	80 bb 76 3f 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc08a],0xdb
c001fce8:	75 13                	jne    c001fcfd <KeDisplaySplashScreen()+0x3e>
c001fcea:	0f b6 8b 75 3f 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc08b]
c001fcf1:	83 e1 fe             	and    ecx,0xfffffffe
c001fcf4:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fcfa:	75 01                	jne    c001fcfd <KeDisplaySplashScreen()+0x3e>
c001fcfc:	47                   	inc    edi
c001fcfd:	83 fa 0d             	cmp    edx,0xd
c001fd00:	74 28                	je     c001fd2a <KeDisplaySplashScreen()+0x6b>
c001fd02:	83 fa 0a             	cmp    edx,0xa
c001fd05:	75 0a                	jne    c001fd11 <KeDisplaySplashScreen()+0x52>
c001fd07:	45                   	inc    ebp
c001fd08:	bf 0a 00 00 00       	mov    edi,0xa
c001fd0d:	31 db                	xor    ebx,ebx
c001fd0f:	eb 19                	jmp    c001fd2a <KeDisplaySplashScreen()+0x6b>
c001fd11:	83 ec 0c             	sub    esp,0xc
c001fd14:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fd17:	55                   	push   ebp
c001fd18:	0f be c0             	movsx  eax,al
c001fd1b:	52                   	push   edx
c001fd1c:	43                   	inc    ebx
c001fd1d:	6a 00                	push   0x0
c001fd1f:	6a 0e                	push   0xe
c001fd21:	50                   	push   eax
c001fd22:	e8 35 82 00 00       	call   c0027f5c <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fd27:	83 c4 20             	add    esp,0x20
c001fd2a:	46                   	inc    esi
c001fd2b:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fd31:	75 a1                	jne    c001fcd4 <KeDisplaySplashScreen()+0x15>
c001fd33:	83 c4 0c             	add    esp,0xc
c001fd36:	5b                   	pop    ebx
c001fd37:	5e                   	pop    esi
c001fd38:	5f                   	pop    edi
c001fd39:	5d                   	pop    ebp
c001fd3a:	c3                   	ret    

c001fd3b <KeSetBootMessage(char const*)>:
c001fd3b:	57                   	push   edi
c001fd3c:	56                   	push   esi
c001fd3d:	53                   	push   ebx
c001fd3e:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fd44:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fd4b:	68 9e 00 00 00       	push   0x9e
c001fd50:	6a 00                	push   0x0
c001fd52:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fd56:	56                   	push   esi
c001fd57:	e8 94 07 fe ff       	call   c00004f0 <memset>
c001fd5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd5f:	e8 0c 08 fe ff       	call   c0000570 <strlen>
c001fd64:	ba 50 00 00 00       	mov    edx,0x50
c001fd69:	83 c4 10             	add    esp,0x10
c001fd6c:	29 c2                	sub    edx,eax
c001fd6e:	31 c9                	xor    ecx,ecx
c001fd70:	83 e2 fe             	and    edx,0xfffffffe
c001fd73:	01 f2                	add    edx,esi
c001fd75:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fd7a:	84 c0                	test   al,al
c001fd7c:	74 0a                	je     c001fd88 <KeSetBootMessage(char const*)+0x4d>
c001fd7e:	80 cc 0f             	or     ah,0xf
c001fd81:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fd85:	41                   	inc    ecx
c001fd86:	eb ed                	jmp    c001fd75 <KeSetBootMessage(char const*)+0x3a>
c001fd88:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fd8d:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fd92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd94:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fd9a:	5b                   	pop    ebx
c001fd9b:	5e                   	pop    esi
c001fd9c:	5f                   	pop    edi
c001fd9d:	c3                   	ret    
c001fd9e:	66 90                	xchg   ax,ax

c001fda0 <CUnlockScheduler>:
c001fda0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fda5:	83 e8 01             	sub    eax,0x1
c001fda8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fdad:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fdb2:	85 c0                	test   eax,eax
c001fdb4:	75 02                	jne    c001fdb8 <CUnlockScheduler+0x18>
c001fdb6:	fb                   	sti    
c001fdb7:	90                   	nop
c001fdb8:	90                   	nop
c001fdb9:	c3                   	ret    
c001fdba:	66 90                	xchg   ax,ax

c001fdbc <CLockScheduler>:
c001fdbc:	fa                   	cli    
c001fdbd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fdc2:	83 c0 01             	add    eax,0x1
c001fdc5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fdca:	90                   	nop
c001fdcb:	c3                   	ret    

c001fdcc <CPrintf>:
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	83 ec 08             	sub    esp,0x8
c001fdd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdd6:	68 50 fd 02 c0       	push   0xc002fd50
c001fddb:	e8 a5 96 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c001fde0:	83 c4 10             	add    esp,0x10
c001fde3:	90                   	nop
c001fde4:	83 c4 0c             	add    esp,0xc
c001fde7:	c3                   	ret    

c001fde8 <Krnl::handlePowerButton()>:
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	e8 09 07 00 00       	call   c00204f9 <KeHandlePowerButton()>
c001fdf0:	90                   	nop
c001fdf1:	83 c4 0c             	add    esp,0xc
c001fdf4:	c3                   	ret    
c001fdf5:	8d 76 00             	lea    esi,[esi+0x0]

c001fdf8 <Krnl::handleSleepButton()>:
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	e8 2e 07 00 00       	call   c002052e <KeHandleSleepButton()>
c001fe00:	90                   	nop
c001fe01:	83 c4 0c             	add    esp,0xc
c001fe04:	c3                   	ret    

c001fe05 <KeCalculateCRC32(unsigned char*, int)>:
c001fe05:	53                   	push   ebx
c001fe06:	83 c8 ff             	or     eax,0xffffffff
c001fe09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe0d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fe11:	01 cb                	add    ebx,ecx
c001fe13:	39 d9                	cmp    ecx,ebx
c001fe15:	74 15                	je     c001fe2c <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fe17:	41                   	inc    ecx
c001fe18:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fe1b:	31 c2                	xor    edx,eax
c001fe1d:	c1 e8 08             	shr    eax,0x8
c001fe20:	0f b6 d2             	movzx  edx,dl
c001fe23:	33 04 95 a0 40 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcbf60]
c001fe2a:	eb e7                	jmp    c001fe13 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fe2c:	f7 d0                	not    eax
c001fe2e:	5b                   	pop    ebx
c001fe2f:	c3                   	ret    

c001fe30 <EnvVarContainer::getEnv(char const*)>:
c001fe30:	57                   	push   edi
c001fe31:	56                   	push   esi
c001fe32:	53                   	push   ebx
c001fe33:	31 db                	xor    ebx,ebx
c001fe35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe39:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fe3b:	7e 2b                	jle    c001fe68 <EnvVarContainer::getEnv(char const*)+0x38>
c001fe3d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fe44:	50                   	push   eax
c001fe45:	50                   	push   eax
c001fe46:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fe49:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fe4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fe50:	e8 fb 08 fe ff       	call   c0000750 <strcmp>
c001fe55:	83 c4 10             	add    esp,0x10
c001fe58:	85 c0                	test   eax,eax
c001fe5a:	75 09                	jne    c001fe65 <EnvVarContainer::getEnv(char const*)+0x35>
c001fe5c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fe5f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fe63:	eb 05                	jmp    c001fe6a <EnvVarContainer::getEnv(char const*)+0x3a>
c001fe65:	43                   	inc    ebx
c001fe66:	eb d1                	jmp    c001fe39 <EnvVarContainer::getEnv(char const*)+0x9>
c001fe68:	31 c0                	xor    eax,eax
c001fe6a:	5b                   	pop    ebx
c001fe6b:	5e                   	pop    esi
c001fe6c:	5f                   	pop    edi
c001fe6d:	c3                   	ret    

c001fe6e <EnvVarContainer::setEnv(char const*, char const*)>:
c001fe6e:	55                   	push   ebp
c001fe6f:	57                   	push   edi
c001fe70:	56                   	push   esi
c001fe71:	53                   	push   ebx
c001fe72:	83 ec 28             	sub    esp,0x28
c001fe75:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fe79:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fe7d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fe81:	56                   	push   esi
c001fe82:	e8 e9 06 fe ff       	call   c0000570 <strlen>
c001fe87:	40                   	inc    eax
c001fe88:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe8b:	e8 66 67 ff ff       	call   c00165f6 <malloc>
c001fe90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe97:	e8 d4 06 fe ff       	call   c0000570 <strlen>
c001fe9c:	40                   	inc    eax
c001fe9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fea0:	e8 51 67 ff ff       	call   c00165f6 <malloc>
c001fea5:	89 34 24             	mov    DWORD PTR [esp],esi
c001fea8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001feac:	e8 bf 06 fe ff       	call   c0000570 <strlen>
c001feb1:	83 c4 0c             	add    esp,0xc
c001feb4:	40                   	inc    eax
c001feb5:	50                   	push   eax
c001feb6:	6a 00                	push   0x0
c001feb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001febc:	e8 2f 06 fe ff       	call   c00004f0 <memset>
c001fec1:	89 34 24             	mov    DWORD PTR [esp],esi
c001fec4:	e8 a7 06 fe ff       	call   c0000570 <strlen>
c001fec9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fecd:	8d 48 01             	lea    ecx,[eax+0x1]
c001fed0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fed2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fed5:	89 de                	mov    esi,ebx
c001fed7:	e8 94 06 fe ff       	call   c0000570 <strlen>
c001fedc:	83 c4 0c             	add    esp,0xc
c001fedf:	40                   	inc    eax
c001fee0:	50                   	push   eax
c001fee1:	6a 00                	push   0x0
c001fee3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fee7:	e8 04 06 fe ff       	call   c00004f0 <memset>
c001feec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001feef:	e8 7c 06 fe ff       	call   c0000570 <strlen>
c001fef4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fef8:	8d 48 01             	lea    ecx,[eax+0x1]
c001fefb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fefd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ff00:	40                   	inc    eax
c001ff01:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ff04:	c1 e0 03             	shl    eax,0x3
c001ff07:	5a                   	pop    edx
c001ff08:	59                   	pop    ecx
c001ff09:	50                   	push   eax
c001ff0a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ff0d:	e8 d0 66 ff ff       	call   c00165e2 <realloc>
c001ff12:	8d 74 24 18          	lea    esi,[esp+0x18]
c001ff16:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ff19:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001ff1c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001ff20:	b9 08 00 00 00       	mov    ecx,0x8
c001ff25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff27:	83 c4 2c             	add    esp,0x2c
c001ff2a:	5b                   	pop    ebx
c001ff2b:	5e                   	pop    esi
c001ff2c:	5f                   	pop    edi
c001ff2d:	5d                   	pop    ebp
c001ff2e:	c3                   	ret    
c001ff2f:	90                   	nop

c001ff30 <EnvVarContainer::deleteEnv(char const*)>:
c001ff30:	c3                   	ret    
c001ff31:	90                   	nop

c001ff32 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001ff32:	55                   	push   ebp
c001ff33:	57                   	push   edi
c001ff34:	56                   	push   esi
c001ff35:	53                   	push   ebx
c001ff36:	81 ec 38 01 00 00    	sub    esp,0x138
c001ff3c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ff43:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001ff4a:	68 14 01 00 00       	push   0x114
c001ff4f:	e8 a2 66 ff ff       	call   c00165f6 <malloc>
c001ff54:	83 c4 0c             	add    esp,0xc
c001ff57:	89 c3                	mov    ebx,eax
c001ff59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ff5c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ff63:	50                   	push   eax
c001ff64:	e8 23 a7 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c001ff69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff6c:	e8 fd a9 ff ff       	call   c001a96e <File::exists()>
c001ff71:	83 c4 10             	add    esp,0x10
c001ff74:	84 c0                	test   al,al
c001ff76:	75 31                	jne    c001ffa9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001ff78:	50                   	push   eax
c001ff79:	50                   	push   eax
c001ff7a:	6a 12                	push   0x12
c001ff7c:	53                   	push   ebx
c001ff7d:	e8 28 a7 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c001ff82:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff84:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001ff87:	89 34 24             	mov    DWORD PTR [esp],esi
c001ff8a:	e8 e1 05 fe ff       	call   c0000570 <strlen>
c001ff8f:	5a                   	pop    edx
c001ff90:	31 d2                	xor    edx,edx
c001ff92:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ff96:	51                   	push   ecx
c001ff97:	56                   	push   esi
c001ff98:	52                   	push   edx
c001ff99:	50                   	push   eax
c001ff9a:	53                   	push   ebx
c001ff9b:	ff d7                	call   edi
c001ff9d:	83 c4 14             	add    esp,0x14
c001ffa0:	53                   	push   ebx
c001ffa1:	e8 62 a7 ff ff       	call   c001a708 <File::close()>
c001ffa6:	83 c4 10             	add    esp,0x10
c001ffa9:	56                   	push   esi
c001ffaa:	31 f6                	xor    esi,esi
c001ffac:	68 00 01 00 00       	push   0x100
c001ffb1:	6a 00                	push   0x0
c001ffb3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001ffb7:	50                   	push   eax
c001ffb8:	e8 33 05 fe ff       	call   c00004f0 <memset>
c001ffbd:	5f                   	pop    edi
c001ffbe:	58                   	pop    eax
c001ffbf:	6a 01                	push   0x1
c001ffc1:	53                   	push   ebx
c001ffc2:	e8 e3 a6 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ffd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ffdf:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ffe3:	51                   	push   ecx
c001ffe4:	8d 54 24 23          	lea    edx,[esp+0x23]
c001ffe8:	52                   	push   edx
c001ffe9:	6a 00                	push   0x0
c001ffeb:	6a 01                	push   0x1
c001ffed:	53                   	push   ebx
c001ffee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fff1:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fff6:	83 c4 20             	add    esp,0x20
c001fff9:	89 c2                	mov    edx,eax
c001fffb:	85 c0                	test   eax,eax
c001fffd:	0f 84 36 01 00 00    	je     c0020139 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0020003:	83 f8 0d             	cmp    eax,0xd
c0020006:	0f 84 22 01 00 00    	je     c002012e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c002000c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020011:	0f 84 f0 00 00 00    	je     c0020107 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0020017:	83 f8 0a             	cmp    eax,0xa
c002001a:	74 13                	je     c002002f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c002001c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020021:	74 0c                	je     c002002f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0020023:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020029:	0f 8e f6 00 00 00    	jle    c0020125 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c002002f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020033:	83 ec 0c             	sub    esp,0xc
c0020036:	8d 78 01             	lea    edi,[eax+0x1]
c0020039:	57                   	push   edi
c002003a:	e8 b7 65 ff ff       	call   c00165f6 <malloc>
c002003f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0020043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020047:	8d 56 04             	lea    edx,[esi+0x4]
c002004a:	89 14 24             	mov    DWORD PTR [esp],edx
c002004d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020051:	e8 a0 65 ff ff       	call   c00165f6 <malloc>
c0020056:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002005a:	83 c4 0c             	add    esp,0xc
c002005d:	57                   	push   edi
c002005e:	6a 00                	push   0x0
c0020060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020064:	e8 87 04 fe ff       	call   c00004f0 <memset>
c0020069:	8d 74 24 30          	lea    esi,[esp+0x30]
c002006d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020071:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020075:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020077:	83 c4 0c             	add    esp,0xc
c002007a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002007e:	52                   	push   edx
c002007f:	6a 00                	push   0x0
c0020081:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020085:	e8 66 04 fe ff       	call   c00004f0 <memset>
c002008a:	8d 74 24 30          	lea    esi,[esp+0x30]
c002008e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0020092:	89 34 24             	mov    DWORD PTR [esp],esi
c0020095:	e8 d6 04 fe ff       	call   c0000570 <strlen>
c002009a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002009e:	89 c1                	mov    ecx,eax
c00200a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00200a5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00200a8:	40                   	inc    eax
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00200af:	85 d2                	test   edx,edx
c00200b1:	75 0c                	jne    c00200bf <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00200b3:	83 ec 0c             	sub    esp,0xc
c00200b6:	6a 08                	push   0x8
c00200b8:	e8 39 65 ff ff       	call   c00165f6 <malloc>
c00200bd:	eb 0c                	jmp    c00200cb <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00200bf:	c1 e0 03             	shl    eax,0x3
c00200c2:	51                   	push   ecx
c00200c3:	51                   	push   ecx
c00200c4:	50                   	push   eax
c00200c5:	52                   	push   edx
c00200c6:	e8 17 65 ff ff       	call   c00165e2 <realloc>
c00200cb:	83 c4 10             	add    esp,0x10
c00200ce:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00200d1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00200d4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00200d7:	8d 74 24 18          	lea    esi,[esp+0x18]
c00200db:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00200df:	b9 08 00 00 00       	mov    ecx,0x8
c00200e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200e6:	31 f6                	xor    esi,esi
c00200e8:	50                   	push   eax
c00200e9:	68 00 01 00 00       	push   0x100
c00200ee:	6a 00                	push   0x0
c00200f0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00200f4:	50                   	push   eax
c00200f5:	e8 f6 03 fe ff       	call   c00004f0 <memset>
c00200fa:	83 c4 10             	add    esp,0x10
c00200fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020105:	eb 27                	jmp    c002012e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020107:	83 f8 3d             	cmp    eax,0x3d
c002010a:	74 1e                	je     c002012a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c002010c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020112:	7f 07                	jg     c002011b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0020114:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0020118:	46                   	inc    esi
c0020119:	eb 13                	jmp    c002012e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c002011b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020123:	eb 09                	jmp    c002012e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020125:	83 f8 3d             	cmp    eax,0x3d
c0020128:	75 ea                	jne    c0020114 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c002012a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002012e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020133:	0f 85 99 fe ff ff    	jne    c001ffd2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0020139:	83 ec 0c             	sub    esp,0xc
c002013c:	53                   	push   ebx
c002013d:	e8 c6 a5 ff ff       	call   c001a708 <File::close()>
c0020142:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020144:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020147:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002014a:	81 c4 3c 01 00 00    	add    esp,0x13c
c0020150:	5b                   	pop    ebx
c0020151:	5e                   	pop    esi
c0020152:	5f                   	pop    edi
c0020153:	5d                   	pop    ebp
c0020154:	c3                   	ret    
c0020155:	90                   	nop

c0020156 <EnvVarContainer::__loadSystem()>:
c0020156:	83 ec 10             	sub    esp,0x10
c0020159:	68 a0 44 03 c0       	push   0xc00344a0
c002015e:	68 2c 2b 03 c0       	push   0xc0032b2c
c0020163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020167:	e8 c6 fd ff ff       	call   c001ff32 <EnvVarContainer::loadFrom(char const*, char const*)>
c002016c:	83 c4 1c             	add    esp,0x1c
c002016f:	c3                   	ret    

c0020170 <EnvVarContainer::__loadUser()>:
c0020170:	c3                   	ret    
c0020171:	90                   	nop

c0020172 <EnvVarContainer::EnvVarContainer(Process*)>:
c0020172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020176:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002017c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020184:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020187:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002018b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020192:	90                   	nop
c0020193:	c3                   	ret    

c0020194 <EnvVarContainer::~EnvVarContainer()>:
c0020194:	83 ec 0c             	sub    esp,0xc
c0020197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002019e:	85 c0                	test   eax,eax
c00201a0:	74 1d                	je     c00201bf <EnvVarContainer::~EnvVarContainer()+0x2b>
c00201a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00201a8:	85 c0                	test   eax,eax
c00201aa:	74 13                	je     c00201bf <EnvVarContainer::~EnvVarContainer()+0x2b>
c00201ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201b3:	83 ec 0c             	sub    esp,0xc
c00201b6:	50                   	push   eax
c00201b7:	e8 4a 64 ff ff       	call   c0016606 <free>
c00201bc:	83 c4 10             	add    esp,0x10
c00201bf:	90                   	nop
c00201c0:	83 c4 0c             	add    esp,0xc
c00201c3:	c3                   	ret    

c00201c4 <KeGetEnv(Process*, char const*)>:
c00201c4:	53                   	push   ebx
c00201c5:	83 ec 08             	sub    esp,0x8
c00201c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00201d0:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c00201d6:	74 04                	je     c00201dc <KeGetEnv(Process*, char const*)+0x18>
c00201d8:	85 c0                	test   eax,eax
c00201da:	75 0b                	jne    c00201e7 <KeGetEnv(Process*, char const*)+0x23>
c00201dc:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c00201e1:	85 c0                	test   eax,eax
c00201e3:	75 19                	jne    c00201fe <KeGetEnv(Process*, char const*)+0x3a>
c00201e5:	eb 27                	jmp    c002020e <KeGetEnv(Process*, char const*)+0x4a>
c00201e7:	52                   	push   edx
c00201e8:	52                   	push   edx
c00201e9:	53                   	push   ebx
c00201ea:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00201f0:	e8 3b fc ff ff       	call   c001fe30 <EnvVarContainer::getEnv(char const*)>
c00201f5:	83 c4 10             	add    esp,0x10
c00201f8:	85 c0                	test   eax,eax
c00201fa:	75 28                	jne    c0020224 <KeGetEnv(Process*, char const*)+0x60>
c00201fc:	eb de                	jmp    c00201dc <KeGetEnv(Process*, char const*)+0x18>
c00201fe:	52                   	push   edx
c00201ff:	52                   	push   edx
c0020200:	53                   	push   ebx
c0020201:	50                   	push   eax
c0020202:	e8 29 fc ff ff       	call   c001fe30 <EnvVarContainer::getEnv(char const*)>
c0020207:	83 c4 10             	add    esp,0x10
c002020a:	85 c0                	test   eax,eax
c002020c:	75 16                	jne    c0020224 <KeGetEnv(Process*, char const*)+0x60>
c002020e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0020212:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020217:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002021b:	83 c4 08             	add    esp,0x8
c002021e:	5b                   	pop    ebx
c002021f:	e9 0c fc ff ff       	jmp    c001fe30 <EnvVarContainer::getEnv(char const*)>
c0020224:	83 c4 08             	add    esp,0x8
c0020227:	5b                   	pop    ebx
c0020228:	c3                   	ret    

c0020229 <KeSetEnvSystem(char const*, char const*)>:
c0020229:	83 ec 10             	sub    esp,0x10
c002022c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020230:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020234:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c002023a:	e8 2f fc ff ff       	call   c001fe6e <EnvVarContainer::setEnv(char const*, char const*)>
c002023f:	83 c4 1c             	add    esp,0x1c
c0020242:	c3                   	ret    

c0020243 <KeSetEnvUser(char const*, char const*)>:
c0020243:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020248:	85 c0                	test   eax,eax
c002024a:	74 15                	je     c0020261 <KeSetEnvUser(char const*, char const*)+0x1e>
c002024c:	83 ec 10             	sub    esp,0x10
c002024f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020253:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020257:	50                   	push   eax
c0020258:	e8 11 fc ff ff       	call   c001fe6e <EnvVarContainer::setEnv(char const*, char const*)>
c002025d:	83 c4 1c             	add    esp,0x1c
c0020260:	c3                   	ret    
c0020261:	c3                   	ret    

c0020262 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0020262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020266:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c002026c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020270:	e9 f9 fb ff ff       	jmp    c001fe6e <EnvVarContainer::setEnv(char const*, char const*)>

c0020275 <KeDeleteEnvSystem(char const*)>:
c0020275:	c3                   	ret    

c0020276 <KeDeleteEnvUser(char const*)>:
c0020276:	c3                   	ret    

c0020277 <KeDeleteEnvProcess(Process*, char const*)>:
c0020277:	c3                   	ret    

c0020278 <KeNewProcessEnv(Process*)>:
c0020278:	83 ec 28             	sub    esp,0x28
c002027b:	6a 0c                	push   0xc
c002027d:	e8 74 63 ff ff       	call   c00165f6 <malloc>
c0020282:	5a                   	pop    edx
c0020283:	59                   	pop    ecx
c0020284:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020288:	50                   	push   eax
c0020289:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002028d:	e8 e0 fe ff ff       	call   c0020172 <EnvVarContainer::EnvVarContainer(Process*)>
c0020292:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020296:	83 c4 2c             	add    esp,0x2c
c0020299:	c3                   	ret    

c002029a <KeCopyProcessEnv(Process*, Process*)>:
c002029a:	57                   	push   edi
c002029b:	56                   	push   esi
c002029c:	53                   	push   ebx
c002029d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00202aa:	6a 0c                	push   0xc
c00202ac:	e8 45 63 ff ff       	call   c00165f6 <malloc>
c00202b1:	89 c3                	mov    ebx,eax
c00202b3:	58                   	pop    eax
c00202b4:	5a                   	pop    edx
c00202b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202b9:	53                   	push   ebx
c00202ba:	e8 b3 fe ff ff       	call   c0020172 <EnvVarContainer::EnvVarContainer(Process*)>
c00202bf:	8b 07                	mov    eax,DWORD PTR [edi]
c00202c1:	89 03                	mov    DWORD PTR [ebx],eax
c00202c3:	c1 e0 03             	shl    eax,0x3
c00202c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00202c9:	e8 28 63 ff ff       	call   c00165f6 <malloc>
c00202ce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00202d1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00202d3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00202d6:	c1 e1 03             	shl    ecx,0x3
c00202d9:	89 c7                	mov    edi,eax
c00202db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00202dd:	83 c4 10             	add    esp,0x10
c00202e0:	89 d8                	mov    eax,ebx
c00202e2:	5b                   	pop    ebx
c00202e3:	5e                   	pop    esi
c00202e4:	5f                   	pop    edi
c00202e5:	c3                   	ret    

c00202e6 <KeLoadSystemEnv()>:
c00202e6:	53                   	push   ebx
c00202e7:	83 ec 14             	sub    esp,0x14
c00202ea:	6a 0c                	push   0xc
c00202ec:	e8 05 63 ff ff       	call   c00165f6 <malloc>
c00202f1:	89 c3                	mov    ebx,eax
c00202f3:	58                   	pop    eax
c00202f4:	5a                   	pop    edx
c00202f5:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00202fb:	53                   	push   ebx
c00202fc:	e8 71 fe ff ff       	call   c0020172 <EnvVarContainer::EnvVarContainer(Process*)>
c0020301:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020304:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c002030a:	e8 47 fe ff ff       	call   c0020156 <EnvVarContainer::__loadSystem()>
c002030f:	83 c4 18             	add    esp,0x18
c0020312:	5b                   	pop    ebx
c0020313:	c3                   	ret    

c0020314 <KeLoadUserEnv()>:
c0020314:	53                   	push   ebx
c0020315:	83 ec 14             	sub    esp,0x14
c0020318:	6a 0c                	push   0xc
c002031a:	e8 d7 62 ff ff       	call   c00165f6 <malloc>
c002031f:	89 c3                	mov    ebx,eax
c0020321:	58                   	pop    eax
c0020322:	5a                   	pop    edx
c0020323:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020329:	53                   	push   ebx
c002032a:	e8 43 fe ff ff       	call   c0020172 <EnvVarContainer::EnvVarContainer(Process*)>
c002032f:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c0020335:	83 c4 18             	add    esp,0x18
c0020338:	5b                   	pop    ebx
c0020339:	c3                   	ret    

c002033a <KeFlushEnv()>:
c002033a:	c3                   	ret    

c002033b <KeGetProcessTotalEnvCount(Process*)>:
c002033b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002033f:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020345:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002034b:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020350:	8b 00                	mov    eax,DWORD PTR [eax]
c0020352:	03 01                	add    eax,DWORD PTR [ecx]
c0020354:	85 d2                	test   edx,edx
c0020356:	74 02                	je     c002035a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020358:	03 02                	add    eax,DWORD PTR [edx]
c002035a:	c3                   	ret    

c002035b <KeGetProcessEnvPair(Process*, int)>:
c002035b:	57                   	push   edi
c002035c:	56                   	push   esi
c002035d:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c0020363:	53                   	push   ebx
c0020364:	85 f6                	test   esi,esi
c0020366:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002036a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002036e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020374:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020378:	8b 01                	mov    eax,DWORD PTR [ecx]
c002037a:	75 16                	jne    c0020392 <KeGetProcessEnvPair(Process*, int)+0x37>
c002037c:	39 c2                	cmp    edx,eax
c002037e:	7c 16                	jl     c0020396 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020380:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c0020386:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020388:	01 c6                	add    esi,eax
c002038a:	39 d6                	cmp    esi,edx
c002038c:	7e 3c                	jle    c00203ca <KeGetProcessEnvPair(Process*, int)+0x6f>
c002038e:	29 c2                	sub    edx,eax
c0020390:	eb 04                	jmp    c0020396 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020392:	39 c2                	cmp    edx,eax
c0020394:	7d 05                	jge    c002039b <KeGetProcessEnvPair(Process*, int)+0x40>
c0020396:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020399:	eb 20                	jmp    c00203bb <KeGetProcessEnvPair(Process*, int)+0x60>
c002039b:	8b 3e                	mov    edi,DWORD PTR [esi]
c002039d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00203a0:	39 d1                	cmp    ecx,edx
c00203a2:	7e 04                	jle    c00203a8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00203a4:	29 c2                	sub    edx,eax
c00203a6:	eb 10                	jmp    c00203b8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00203a8:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c00203ae:	03 0e                	add    ecx,DWORD PTR [esi]
c00203b0:	39 d1                	cmp    ecx,edx
c00203b2:	7e 16                	jle    c00203ca <KeGetProcessEnvPair(Process*, int)+0x6f>
c00203b4:	29 c2                	sub    edx,eax
c00203b6:	29 fa                	sub    edx,edi
c00203b8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00203bb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00203be:	8b 02                	mov    eax,DWORD PTR [edx]
c00203c0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00203c3:	89 03                	mov    DWORD PTR [ebx],eax
c00203c5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00203c8:	eb 1d                	jmp    c00203e7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	68 4e 2b 03 c0       	push   0xc0032b4e
c00203d2:	e8 c7 00 00 00       	call   c002049e <KePanic(char const*)>
c00203d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00203dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00203e4:	83 c4 10             	add    esp,0x10
c00203e7:	89 d8                	mov    eax,ebx
c00203e9:	5b                   	pop    ebx
c00203ea:	5e                   	pop    esi
c00203eb:	5f                   	pop    edi
c00203ec:	c2 04 00             	ret    0x4

c00203ef <CPU::current()>:
c00203ef:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00203f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00203fa:	c3                   	ret    

c00203fb <operator new(unsigned long)>:
c00203fb:	e9 f6 61 ff ff       	jmp    c00165f6 <malloc>

c0020400 <operator delete(void*)>:
c0020400:	e9 11 62 ff ff       	jmp    c0016616 <rfree>

c0020405 <disableIRQs()>:
c0020405:	fa                   	cli    
c0020406:	c3                   	ret    

c0020407 <enableIRQs()>:
c0020407:	fb                   	sti    
c0020408:	c3                   	ret    

c0020409 <lockScheduler()>:
c0020409:	fa                   	cli    
c002040a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020410:	c3                   	ret    

c0020411 <unlockScheduler()>:
c0020411:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020416:	48                   	dec    eax
c0020417:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002041c:	75 01                	jne    c002041f <unlockScheduler()+0xe>
c002041e:	fb                   	sti    
c002041f:	c3                   	ret    

c0020420 <lockStuff()>:
c0020420:	fa                   	cli    
c0020421:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020427:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c002042d:	c3                   	ret    

c002042e <unlockStuff()>:
c002042e:	83 ec 0c             	sub    esp,0xc
c0020431:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020436:	48                   	dec    eax
c0020437:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002043c:	75 18                	jne    c0020456 <unlockStuff()+0x28>
c002043e:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020445:	74 0f                	je     c0020456 <unlockStuff()+0x28>
c0020447:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020451:	e8 5e 50 00 00       	call   c00254b4 <schedule()>
c0020456:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002045b:	48                   	dec    eax
c002045c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020461:	75 01                	jne    c0020464 <unlockStuff()+0x36>
c0020463:	fb                   	sti    
c0020464:	83 c4 0c             	add    esp,0xc
c0020467:	c3                   	ret    

c0020468 <Virt::getAKernelVAS()>:
c0020468:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002046d:	c3                   	ret    

c002046e <__not_memcpy>:
c002046e:	57                   	push   edi
c002046f:	56                   	push   esi
c0020470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020474:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020478:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002047c:	89 c7                	mov    edi,eax
c002047e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020480:	5e                   	pop    esi
c0020481:	5f                   	pop    edi
c0020482:	c3                   	ret    
c0020483:	90                   	nop

c0020484 <Mutex::Mutex()>:
c0020484:	83 ec 0c             	sub    esp,0xc
c0020487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002048b:	83 ec 08             	sub    esp,0x8
c002048e:	6a 01                	push   0x1
c0020490:	50                   	push   eax
c0020491:	e8 b2 03 00 00       	call   c0020848 <Semaphore::Semaphore(int)>
c0020496:	83 c4 10             	add    esp,0x10
c0020499:	90                   	nop
c002049a:	83 c4 0c             	add    esp,0xc
c002049d:	c3                   	ret    

c002049e <KePanic(char const*)>:
c002049e:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c00204a5:	e9 04 6d 00 00       	jmp    c00271ae <HalPanic(char const*)>

c00204aa <KePowerThread(void*)>:
c00204aa:	83 ec 0c             	sub    esp,0xc
c00204ad:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00204b2:	48                   	dec    eax
c00204b3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00204b8:	75 01                	jne    c00204bb <KePowerThread(void*)+0x11>
c00204ba:	fb                   	sti    
c00204bb:	83 ec 0c             	sub    esp,0xc
c00204be:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00204c5:	6a 0a                	push   0xa
c00204c7:	e8 d4 51 00 00       	call   c00256a0 <sleep(unsigned int)>
c00204cc:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00204d3:	83 c4 10             	add    esp,0x10
c00204d6:	eb e3                	jmp    c00204bb <KePowerThread(void*)+0x11>

c00204d8 <KeChangePowerSettings(PowerSettings)>:
c00204d8:	57                   	push   edi
c00204d9:	b9 09 00 00 00       	mov    ecx,0x9
c00204de:	56                   	push   esi
c00204df:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00204e4:	fc                   	cld    
c00204e5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00204e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204eb:	5e                   	pop    esi
c00204ec:	5f                   	pop    edi
c00204ed:	c3                   	ret    

c00204ee <KeUserIOReceived()>:
c00204ee:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00204f8:	c3                   	ret    

c00204f9 <KeHandlePowerButton()>:
c00204f9:	83 ec 0c             	sub    esp,0xc
c00204fc:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c0020501:	83 f8 02             	cmp    eax,0x2
c0020504:	75 10                	jne    c0020516 <KeHandlePowerButton()+0x1d>
c0020506:	83 ec 0c             	sub    esp,0xc
c0020509:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002050f:	e8 b4 56 ff ff       	call   c0015bc8 <Computer::shutdown()>
c0020514:	eb 11                	jmp    c0020527 <KeHandlePowerButton()+0x2e>
c0020516:	48                   	dec    eax
c0020517:	75 11                	jne    c002052a <KeHandlePowerButton()+0x31>
c0020519:	83 ec 0c             	sub    esp,0xc
c002051c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020522:	e8 d1 56 ff ff       	call   c0015bf8 <Computer::sleep()>
c0020527:	83 c4 10             	add    esp,0x10
c002052a:	83 c4 0c             	add    esp,0xc
c002052d:	c3                   	ret    

c002052e <KeHandleSleepButton()>:
c002052e:	83 ec 0c             	sub    esp,0xc
c0020531:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c0020536:	83 f8 02             	cmp    eax,0x2
c0020539:	75 10                	jne    c002054b <KeHandleSleepButton()+0x1d>
c002053b:	83 ec 0c             	sub    esp,0xc
c002053e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020544:	e8 7f 56 ff ff       	call   c0015bc8 <Computer::shutdown()>
c0020549:	eb 11                	jmp    c002055c <KeHandleSleepButton()+0x2e>
c002054b:	48                   	dec    eax
c002054c:	75 11                	jne    c002055f <KeHandleSleepButton()+0x31>
c002054e:	83 ec 0c             	sub    esp,0xc
c0020551:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020557:	e8 9c 56 ff ff       	call   c0015bf8 <Computer::sleep()>
c002055c:	83 c4 10             	add    esp,0x10
c002055f:	83 c4 0c             	add    esp,0xc
c0020562:	c3                   	ret    

c0020563 <KeSetupPowerManager()>:
c0020563:	83 ec 0c             	sub    esp,0xc
c0020566:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020570:	68 f0 00 00 00       	push   0xf0
c0020575:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c002057c:	6a 00                	push   0x0
c002057e:	68 aa 04 02 c0       	push   0xc00204aa
c0020583:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020589:	e8 d6 4c 00 00       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c002058e:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020598:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c00205a2:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c00205ac:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c00205b6:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c00205c0:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c00205ca:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00205d4:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00205de:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00205e8:	83 c4 1c             	add    esp,0x1c
c00205eb:	c3                   	ret    

c00205ec <KeRand()>:
c00205ec:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00205f6:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c0020600:	53                   	push   ebx
c0020601:	01 c1                	add    ecx,eax
c0020603:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0020608:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c002060e:	01 ca                	add    edx,ecx
c0020610:	05 ef 04 b5 00       	add    eax,0xb504ef
c0020615:	83 d2 00             	adc    edx,0x0
c0020618:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002061d:	0f b7 da             	movzx  ebx,dx
c0020620:	89 da                	mov    edx,ebx
c0020622:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c0020628:	0f ac d0 0e          	shrd   eax,edx,0xe
c002062c:	5b                   	pop    ebx
c002062d:	c3                   	ret    

c002062e <KeSeedRand(unsigned int)>:
c002062e:	53                   	push   ebx
c002062f:	83 ec 08             	sub    esp,0x8
c0020632:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020636:	e8 92 6e 00 00       	call   c00274cd <HalGetRand()>
c002063b:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c0020645:	31 d8                	xor    eax,ebx
c0020647:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002064c:	e8 9b ff ff ff       	call   c00205ec <KeRand()>
c0020651:	83 c4 08             	add    esp,0x8
c0020654:	5b                   	pop    ebx
c0020655:	eb 95                	jmp    c00205ec <KeRand()>

c0020657 <KeInitRand()>:
c0020657:	83 ec 0c             	sub    esp,0xc
c002065a:	e8 63 6c 00 00       	call   c00272c2 <HalQueryPerformanceCounter()>
c002065f:	0f 20 da             	mov    edx,cr3
c0020662:	0f 22 da             	mov    cr3,edx
c0020665:	0f 20 da             	mov    edx,cr3
c0020668:	0f 22 da             	mov    cr3,edx
c002066b:	0f 20 da             	mov    edx,cr3
c002066e:	0f 22 da             	mov    cr3,edx
c0020671:	0f 20 da             	mov    edx,cr3
c0020674:	0f 22 da             	mov    cr3,edx
c0020677:	83 ec 0c             	sub    esp,0xc
c002067a:	35 03 8a 95 38       	xor    eax,0x38958a03
c002067f:	50                   	push   eax
c0020680:	e8 a9 ff ff ff       	call   c002062e <KeSeedRand(unsigned int)>
c0020685:	83 c4 1c             	add    esp,0x1c
c0020688:	c3                   	ret    
c0020689:	66 90                	xchg   ax,ax
c002068b:	90                   	nop

c002068c <KeResolveCompatibilitySymbol(char*)>:
c002068c:	83 ec 0c             	sub    esp,0xc
c002068f:	83 ec 08             	sub    esp,0x8
c0020692:	68 68 2b 03 c0       	push   0xc0032b68
c0020697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002069b:	e8 b0 00 fe ff       	call   c0000750 <strcmp>
c00206a0:	83 c4 10             	add    esp,0x10
c00206a3:	85 c0                	test   eax,eax
c00206a5:	0f 94 c0             	sete   al
c00206a8:	0f b6 c0             	movzx  eax,al
c00206ab:	85 c0                	test   eax,eax
c00206ad:	74 0d                	je     c00206bc <KeResolveCompatibilitySymbol(char*)+0x30>
c00206af:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c00206b4:	e9 8b 01 00 00       	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00206b9:	8d 76 00             	lea    esi,[esi+0x0]
c00206bc:	83 ec 08             	sub    esp,0x8
c00206bf:	68 71 2b 03 c0       	push   0xc0032b71
c00206c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206c8:	e8 83 00 fe ff       	call   c0000750 <strcmp>
c00206cd:	83 c4 10             	add    esp,0x10
c00206d0:	85 c0                	test   eax,eax
c00206d2:	0f 94 c0             	sete   al
c00206d5:	0f b6 c0             	movzx  eax,al
c00206d8:	85 c0                	test   eax,eax
c00206da:	74 0c                	je     c00206e8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00206dc:	b8 b0 e8 02 c0       	mov    eax,0xc002e8b0
c00206e1:	e9 5e 01 00 00       	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00206e6:	66 90                	xchg   ax,ax
c00206e8:	83 ec 08             	sub    esp,0x8
c00206eb:	68 7b 2b 03 c0       	push   0xc0032b7b
c00206f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206f4:	e8 57 00 fe ff       	call   c0000750 <strcmp>
c00206f9:	83 c4 10             	add    esp,0x10
c00206fc:	85 c0                	test   eax,eax
c00206fe:	0f 94 c0             	sete   al
c0020701:	0f b6 c0             	movzx  eax,al
c0020704:	85 c0                	test   eax,eax
c0020706:	74 0c                	je     c0020714 <KeResolveCompatibilitySymbol(char*)+0x88>
c0020708:	b8 e4 e5 02 c0       	mov    eax,0xc002e5e4
c002070d:	e9 32 01 00 00       	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020712:	66 90                	xchg   ax,ax
c0020714:	83 ec 08             	sub    esp,0x8
c0020717:	68 84 2b 03 c0       	push   0xc0032b84
c002071c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020720:	e8 2b 00 fe ff       	call   c0000750 <strcmp>
c0020725:	83 c4 10             	add    esp,0x10
c0020728:	85 c0                	test   eax,eax
c002072a:	0f 94 c0             	sete   al
c002072d:	0f b6 c0             	movzx  eax,al
c0020730:	85 c0                	test   eax,eax
c0020732:	74 0c                	je     c0020740 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020734:	b8 9e 04 02 c0       	mov    eax,0xc002049e
c0020739:	e9 06 01 00 00       	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002073e:	66 90                	xchg   ax,ax
c0020740:	83 ec 08             	sub    esp,0x8
c0020743:	68 97 2b 03 c0       	push   0xc0032b97
c0020748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002074c:	e8 ff ff fd ff       	call   c0000750 <strcmp>
c0020751:	83 c4 10             	add    esp,0x10
c0020754:	85 c0                	test   eax,eax
c0020756:	0f 94 c0             	sete   al
c0020759:	0f b6 c0             	movzx  eax,al
c002075c:	85 c0                	test   eax,eax
c002075e:	74 0c                	je     c002076c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020760:	b8 3b fd 01 c0       	mov    eax,0xc001fd3b
c0020765:	e9 da 00 00 00       	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002076a:	66 90                	xchg   ax,ax
c002076c:	83 ec 08             	sub    esp,0x8
c002076f:	68 b4 2b 03 c0       	push   0xc0032bb4
c0020774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020778:	e8 d3 ff fd ff       	call   c0000750 <strcmp>
c002077d:	83 c4 10             	add    esp,0x10
c0020780:	85 c0                	test   eax,eax
c0020782:	0f 94 c0             	sete   al
c0020785:	0f b6 c0             	movzx  eax,al
c0020788:	85 c0                	test   eax,eax
c002078a:	74 0c                	je     c0020798 <KeResolveCompatibilitySymbol(char*)+0x10c>
c002078c:	b8 b0 e9 02 c0       	mov    eax,0xc002e9b0
c0020791:	e9 ae 00 00 00       	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020796:	66 90                	xchg   ax,ax
c0020798:	83 ec 08             	sub    esp,0x8
c002079b:	68 be 2b 03 c0       	push   0xc0032bbe
c00207a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207a4:	e8 a7 ff fd ff       	call   c0000750 <strcmp>
c00207a9:	83 c4 10             	add    esp,0x10
c00207ac:	85 c0                	test   eax,eax
c00207ae:	0f 94 c0             	sete   al
c00207b1:	0f b6 c0             	movzx  eax,al
c00207b4:	85 c0                	test   eax,eax
c00207b6:	74 0c                	je     c00207c4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00207b8:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c00207bd:	e9 82 00 00 00       	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207c2:	66 90                	xchg   ax,ax
c00207c4:	83 ec 08             	sub    esp,0x8
c00207c7:	68 c7 2b 03 c0       	push   0xc0032bc7
c00207cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207d0:	e8 7b ff fd ff       	call   c0000750 <strcmp>
c00207d5:	83 c4 10             	add    esp,0x10
c00207d8:	85 c0                	test   eax,eax
c00207da:	0f 94 c0             	sete   al
c00207dd:	0f b6 c0             	movzx  eax,al
c00207e0:	85 c0                	test   eax,eax
c00207e2:	74 08                	je     c00207ec <KeResolveCompatibilitySymbol(char*)+0x160>
c00207e4:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00207e9:	eb 59                	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207eb:	90                   	nop
c00207ec:	83 ec 08             	sub    esp,0x8
c00207ef:	68 df 2b 03 c0       	push   0xc0032bdf
c00207f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207f8:	e8 53 ff fd ff       	call   c0000750 <strcmp>
c00207fd:	83 c4 10             	add    esp,0x10
c0020800:	85 c0                	test   eax,eax
c0020802:	0f 94 c0             	sete   al
c0020805:	0f b6 c0             	movzx  eax,al
c0020808:	85 c0                	test   eax,eax
c002080a:	74 08                	je     c0020814 <KeResolveCompatibilitySymbol(char*)+0x188>
c002080c:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020811:	eb 31                	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020813:	90                   	nop
c0020814:	83 ec 08             	sub    esp,0x8
c0020817:	68 ec 2b 03 c0       	push   0xc0032bec
c002081c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020820:	e8 2b ff fd ff       	call   c0000750 <strcmp>
c0020825:	83 c4 10             	add    esp,0x10
c0020828:	85 c0                	test   eax,eax
c002082a:	0f 94 c0             	sete   al
c002082d:	0f b6 c0             	movzx  eax,al
c0020830:	85 c0                	test   eax,eax
c0020832:	74 08                	je     c002083c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020834:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020839:	eb 09                	jmp    c0020844 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002083b:	90                   	nop
c002083c:	b8 00 00 00 00       	mov    eax,0x0
c0020841:	8d 76 00             	lea    esi,[esi+0x0]
c0020844:	83 c4 0c             	add    esp,0xc
c0020847:	c3                   	ret    

c0020848 <Semaphore::Semaphore(int)>:
c0020848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002084c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020850:	89 10                	mov    DWORD PTR [eax],edx
c0020852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020856:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002085d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020861:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002086c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020873:	90                   	nop
c0020874:	c3                   	ret    
c0020875:	90                   	nop
c0020876:	66 90                	xchg   ax,ax

c0020878 <Semaphore::tryAcquire()>:
c0020878:	83 ec 0c             	sub    esp,0xc
c002087b:	fa                   	cli    
c002087c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020881:	83 c0 01             	add    eax,0x1
c0020884:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020889:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002088e:	83 c0 01             	add    eax,0x1
c0020891:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002089a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002089d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00208a3:	39 c2                	cmp    edx,eax
c00208a5:	7d 5d                	jge    c0020904 <Semaphore::tryAcquire()+0x8c>
c00208a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00208ae:	8d 50 01             	lea    edx,[eax+0x1]
c00208b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00208b8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208bd:	83 e8 01             	sub    eax,0x1
c00208c0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208c5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208ca:	85 c0                	test   eax,eax
c00208cc:	75 1a                	jne    c00208e8 <Semaphore::tryAcquire()+0x70>
c00208ce:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00208d3:	85 c0                	test   eax,eax
c00208d5:	74 11                	je     c00208e8 <Semaphore::tryAcquire()+0x70>
c00208d7:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00208e1:	e8 ce 4b 00 00       	call   c00254b4 <schedule()>
c00208e6:	66 90                	xchg   ax,ax
c00208e8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208ed:	83 e8 01             	sub    eax,0x1
c00208f0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208f5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208fa:	85 c0                	test   eax,eax
c00208fc:	75 02                	jne    c0020900 <Semaphore::tryAcquire()+0x88>
c00208fe:	fb                   	sti    
c00208ff:	90                   	nop
c0020900:	b0 01                	mov    al,0x1
c0020902:	eb 4c                	jmp    c0020950 <Semaphore::tryAcquire()+0xd8>
c0020904:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020909:	83 e8 01             	sub    eax,0x1
c002090c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020911:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020916:	85 c0                	test   eax,eax
c0020918:	75 1a                	jne    c0020934 <Semaphore::tryAcquire()+0xbc>
c002091a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002091f:	85 c0                	test   eax,eax
c0020921:	74 11                	je     c0020934 <Semaphore::tryAcquire()+0xbc>
c0020923:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002092d:	e8 82 4b 00 00       	call   c00254b4 <schedule()>
c0020932:	66 90                	xchg   ax,ax
c0020934:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020939:	83 e8 01             	sub    eax,0x1
c002093c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020941:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020946:	85 c0                	test   eax,eax
c0020948:	75 02                	jne    c002094c <Semaphore::tryAcquire()+0xd4>
c002094a:	fb                   	sti    
c002094b:	90                   	nop
c002094c:	b0 00                	mov    al,0x0
c002094e:	66 90                	xchg   ax,ax
c0020950:	83 c4 0c             	add    esp,0xc
c0020953:	c3                   	ret    

c0020954 <Semaphore::assertLocked(char const*)>:
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	fa                   	cli    
c0020958:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002095d:	83 c0 01             	add    eax,0x1
c0020960:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020965:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002096a:	83 c0 01             	add    eax,0x1
c002096d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020976:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002097d:	8b 00                	mov    eax,DWORD PTR [eax]
c002097f:	39 c2                	cmp    edx,eax
c0020981:	7d 11                	jge    c0020994 <Semaphore::assertLocked(char const*)+0x40>
c0020983:	83 ec 0c             	sub    esp,0xc
c0020986:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002098a:	e8 0f fb ff ff       	call   c002049e <KePanic(char const*)>
c002098f:	83 c4 10             	add    esp,0x10
c0020992:	66 90                	xchg   ax,ax
c0020994:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020999:	83 e8 01             	sub    eax,0x1
c002099c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209a1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209a6:	85 c0                	test   eax,eax
c00209a8:	75 1a                	jne    c00209c4 <Semaphore::assertLocked(char const*)+0x70>
c00209aa:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00209af:	85 c0                	test   eax,eax
c00209b1:	74 11                	je     c00209c4 <Semaphore::assertLocked(char const*)+0x70>
c00209b3:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00209bd:	e8 f2 4a 00 00       	call   c00254b4 <schedule()>
c00209c2:	66 90                	xchg   ax,ax
c00209c4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00209c9:	83 e8 01             	sub    eax,0x1
c00209cc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00209d1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00209d6:	85 c0                	test   eax,eax
c00209d8:	75 02                	jne    c00209dc <Semaphore::assertLocked(char const*)+0x88>
c00209da:	fb                   	sti    
c00209db:	90                   	nop
c00209dc:	90                   	nop
c00209dd:	83 c4 0c             	add    esp,0xc
c00209e0:	c3                   	ret    
c00209e1:	90                   	nop
c00209e2:	66 90                	xchg   ax,ax

c00209e4 <Semaphore::acquire(int)>:
c00209e4:	83 ec 1c             	sub    esp,0x1c
c00209e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00209ec:	0f 84 9a 00 00 00    	je     c0020a8c <Semaphore::acquire(int)+0xa8>
c00209f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00209fa:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00209ff:	90                   	nop
c0020a00:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020a05:	85 c0                	test   eax,eax
c0020a07:	74 77                	je     c0020a80 <Semaphore::acquire(int)+0x9c>
c0020a09:	83 ec 0c             	sub    esp,0xc
c0020a0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020a10:	e8 63 fe ff ff       	call   c0020878 <Semaphore::tryAcquire()>
c0020a15:	83 c4 10             	add    esp,0x10
c0020a18:	83 f0 01             	xor    eax,0x1
c0020a1b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020a1f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020a23:	83 f0 01             	xor    eax,0x1
c0020a26:	0f b6 c0             	movzx  eax,al
c0020a29:	85 c0                	test   eax,eax
c0020a2b:	75 4f                	jne    c0020a7c <Semaphore::acquire(int)+0x98>
c0020a2d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020a32:	7f 2c                	jg     c0020a60 <Semaphore::acquire(int)+0x7c>
c0020a34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020a38:	89 d0                	mov    eax,edx
c0020a3a:	c1 e0 02             	shl    eax,0x2
c0020a3d:	01 d0                	add    eax,edx
c0020a3f:	01 c0                	add    eax,eax
c0020a41:	83 ec 0c             	sub    esp,0xc
c0020a44:	50                   	push   eax
c0020a45:	e8 42 4c 00 00       	call   c002568c <milliTenthSleep(unsigned int)>
c0020a4a:	83 c4 10             	add    esp,0x10
c0020a4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020a51:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020a55:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020a5d:	eb a1                	jmp    c0020a00 <Semaphore::acquire(int)+0x1c>
c0020a5f:	90                   	nop
c0020a60:	83 ec 0c             	sub    esp,0xc
c0020a63:	68 90 01 00 00       	push   0x190
c0020a68:	e8 1f 4c 00 00       	call   c002568c <milliTenthSleep(unsigned int)>
c0020a6d:	83 c4 10             	add    esp,0x10
c0020a70:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020a75:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020a7a:	eb 84                	jmp    c0020a00 <Semaphore::acquire(int)+0x1c>
c0020a7c:	90                   	nop
c0020a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0020a80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a84:	e9 ff 00 00 00       	jmp    c0020b88 <Semaphore::acquire(int)+0x1a4>
c0020a89:	8d 76 00             	lea    esi,[esi+0x0]
c0020a8c:	fa                   	cli    
c0020a8d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a92:	83 c0 01             	add    eax,0x1
c0020a95:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a9a:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020a9f:	83 c0 01             	add    eax,0x1
c0020aa2:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020aae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ab4:	39 c2                	cmp    edx,eax
c0020ab6:	7d 14                	jge    c0020acc <Semaphore::acquire(int)+0xe8>
c0020ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020abc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020abf:	8d 50 01             	lea    edx,[eax+0x1]
c0020ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ac6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020ac9:	eb 6d                	jmp    c0020b38 <Semaphore::acquire(int)+0x154>
c0020acb:	90                   	nop
c0020acc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ad3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020ada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ade:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ae1:	85 c0                	test   eax,eax
c0020ae3:	75 13                	jne    c0020af8 <Semaphore::acquire(int)+0x114>
c0020ae5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020aea:	8b 10                	mov    edx,DWORD PTR [eax]
c0020aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020af0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020af3:	eb 17                	jmp    c0020b0c <Semaphore::acquire(int)+0x128>
c0020af5:	8d 76 00             	lea    esi,[esi+0x0]
c0020af8:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020b04:	8b 12                	mov    edx,DWORD PTR [edx]
c0020b06:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020b09:	8d 76 00             	lea    esi,[esi+0x0]
c0020b0c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020b11:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b17:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020b1a:	83 ec 0c             	sub    esp,0xc
c0020b1d:	68 fc 2b 03 c0       	push   0xc0032bfc
c0020b22:	e8 5e 89 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0020b27:	83 c4 10             	add    esp,0x10
c0020b2a:	83 ec 0c             	sub    esp,0xc
c0020b2d:	6a 05                	push   0x5
c0020b2f:	e8 3c 4a 00 00       	call   c0025570 <blockTask(TaskState)>
c0020b34:	83 c4 10             	add    esp,0x10
c0020b37:	90                   	nop
c0020b38:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b3d:	83 e8 01             	sub    eax,0x1
c0020b40:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020b45:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b4a:	85 c0                	test   eax,eax
c0020b4c:	75 1a                	jne    c0020b68 <Semaphore::acquire(int)+0x184>
c0020b4e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020b53:	85 c0                	test   eax,eax
c0020b55:	74 11                	je     c0020b68 <Semaphore::acquire(int)+0x184>
c0020b57:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020b61:	e8 4e 49 00 00       	call   c00254b4 <schedule()>
c0020b66:	66 90                	xchg   ax,ax
c0020b68:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020b6d:	83 e8 01             	sub    eax,0x1
c0020b70:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020b75:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020b7a:	85 c0                	test   eax,eax
c0020b7c:	75 02                	jne    c0020b80 <Semaphore::acquire(int)+0x19c>
c0020b7e:	fb                   	sti    
c0020b7f:	90                   	nop
c0020b80:	b8 00 00 00 00       	mov    eax,0x0
c0020b85:	8d 76 00             	lea    esi,[esi+0x0]
c0020b88:	83 c4 1c             	add    esp,0x1c
c0020b8b:	c3                   	ret    

c0020b8c <Semaphore::acquire()>:
c0020b8c:	83 ec 0c             	sub    esp,0xc
c0020b8f:	83 ec 08             	sub    esp,0x8
c0020b92:	6a 00                	push   0x0
c0020b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b98:	e8 47 fe ff ff       	call   c00209e4 <Semaphore::acquire(int)>
c0020b9d:	83 c4 10             	add    esp,0x10
c0020ba0:	90                   	nop
c0020ba1:	83 c4 0c             	add    esp,0xc
c0020ba4:	c3                   	ret    
c0020ba5:	90                   	nop
c0020ba6:	66 90                	xchg   ax,ax

c0020ba8 <Semaphore::release()>:
c0020ba8:	83 ec 1c             	sub    esp,0x1c
c0020bab:	fa                   	cli    
c0020bac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020bb1:	83 c0 01             	add    eax,0x1
c0020bb4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020bb9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020bbe:	83 c0 01             	add    eax,0x1
c0020bc1:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020bcd:	85 c0                	test   eax,eax
c0020bcf:	74 2b                	je     c0020bfc <Semaphore::release()+0x54>
c0020bd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020be0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020be7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020bea:	83 ec 0c             	sub    esp,0xc
c0020bed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020bf1:	e8 b6 4b 00 00       	call   c00257ac <unblockTask(ThreadControlBlock*)>
c0020bf6:	83 c4 10             	add    esp,0x10
c0020bf9:	eb 15                	jmp    c0020c10 <Semaphore::release()+0x68>
c0020bfb:	90                   	nop
c0020bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020c03:	8d 50 ff             	lea    edx,[eax-0x1]
c0020c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0020c10:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c15:	83 e8 01             	sub    eax,0x1
c0020c18:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020c1d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c22:	85 c0                	test   eax,eax
c0020c24:	75 1a                	jne    c0020c40 <Semaphore::release()+0x98>
c0020c26:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020c2b:	85 c0                	test   eax,eax
c0020c2d:	74 11                	je     c0020c40 <Semaphore::release()+0x98>
c0020c2f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020c39:	e8 76 48 00 00       	call   c00254b4 <schedule()>
c0020c3e:	66 90                	xchg   ax,ax
c0020c40:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c45:	83 e8 01             	sub    eax,0x1
c0020c48:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020c4d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c52:	85 c0                	test   eax,eax
c0020c54:	75 02                	jne    c0020c58 <Semaphore::release()+0xb0>
c0020c56:	fb                   	sti    
c0020c57:	90                   	nop
c0020c58:	90                   	nop
c0020c59:	83 c4 1c             	add    esp,0x1c
c0020c5c:	c3                   	ret    

c0020c5d <KiSigKill(int)>:
c0020c5d:	83 ec 0c             	sub    esp,0xc
c0020c60:	6a 00                	push   0x0
c0020c62:	6a 00                	push   0x0
c0020c64:	6a ff                	push   0xffffffff
c0020c66:	6a 01                	push   0x1
c0020c68:	e8 e5 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020c6d:	83 c4 1c             	add    esp,0x1c
c0020c70:	c3                   	ret    

c0020c71 <KiDefaultSignalHandlerIgnore(int)>:
c0020c71:	c3                   	ret    

c0020c72 <KiDefaultSignalHandlerPause(int)>:
c0020c72:	57                   	push   edi
c0020c73:	b9 07 00 00 00       	mov    ecx,0x7
c0020c78:	56                   	push   esi
c0020c79:	be 57 2c 03 c0       	mov    esi,0xc0032c57
c0020c7e:	83 ec 24             	sub    esp,0x24
c0020c81:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020c85:	fc                   	cld    
c0020c86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020c88:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020c8c:	50                   	push   eax
c0020c8d:	6a 00                	push   0x0
c0020c8f:	6a 00                	push   0x0
c0020c91:	6a 27                	push   0x27
c0020c93:	e8 ba 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020c98:	83 c4 34             	add    esp,0x34
c0020c9b:	5e                   	pop    esi
c0020c9c:	5f                   	pop    edi
c0020c9d:	c3                   	ret    

c0020c9e <KiDefaultSignalHandlerResume(int)>:
c0020c9e:	57                   	push   edi
c0020c9f:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020ca4:	56                   	push   esi
c0020ca5:	be 73 2c 03 c0       	mov    esi,0xc0032c73
c0020caa:	83 ec 24             	sub    esp,0x24
c0020cad:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020cb1:	fc                   	cld    
c0020cb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020cb4:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020cb8:	50                   	push   eax
c0020cb9:	6a 00                	push   0x0
c0020cbb:	6a 00                	push   0x0
c0020cbd:	6a 27                	push   0x27
c0020cbf:	e8 8e 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020cc4:	83 c4 34             	add    esp,0x34
c0020cc7:	5e                   	pop    esi
c0020cc8:	5f                   	pop    edi
c0020cc9:	c3                   	ret    

c0020cca <KeDeinitSignals(SigHandlerBlock*)>:
c0020cca:	e9 37 59 ff ff       	jmp    c0016606 <free>

c0020ccf <KeInitSignals()>:
c0020ccf:	53                   	push   ebx
c0020cd0:	83 ec 14             	sub    esp,0x14
c0020cd3:	68 c8 00 00 00       	push   0xc8
c0020cd8:	e8 19 59 ff ff       	call   c00165f6 <malloc>
c0020cdd:	83 c4 0c             	add    esp,0xc
c0020ce0:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020cea:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020cf4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020cfb:	89 c3                	mov    ebx,eax
c0020cfd:	6a 20                	push   0x20
c0020cff:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020d05:	6a 00                	push   0x0
c0020d07:	50                   	push   eax
c0020d08:	e8 e3 f7 fd ff       	call   c00004f0 <memset>
c0020d0d:	83 c4 0c             	add    esp,0xc
c0020d10:	6a 44                	push   0x44
c0020d12:	6a 00                	push   0x0
c0020d14:	53                   	push   ebx
c0020d15:	e8 d6 f7 fd ff       	call   c00004f0 <memset>
c0020d1a:	89 d8                	mov    eax,ebx
c0020d1c:	83 c4 18             	add    esp,0x18
c0020d1f:	5b                   	pop    ebx
c0020d20:	c3                   	ret    

c0020d21 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020d21:	53                   	push   ebx
c0020d22:	b8 01 00 00 00       	mov    eax,0x1
c0020d27:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d2f:	83 f9 10             	cmp    ecx,0x10
c0020d32:	7f 21                	jg     c0020d55 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020d34:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d3b:	89 03                	mov    DWORD PTR [ebx],eax
c0020d3d:	b8 01 00 00 00       	mov    eax,0x1
c0020d42:	d3 e0                	shl    eax,cl
c0020d44:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020d48:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020d4b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020d53:	31 c0                	xor    eax,eax
c0020d55:	5b                   	pop    ebx
c0020d56:	c3                   	ret    

c0020d57 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020d57:	55                   	push   ebp
c0020d58:	57                   	push   edi
c0020d59:	bf 08 00 00 00       	mov    edi,0x8
c0020d5e:	56                   	push   esi
c0020d5f:	53                   	push   ebx
c0020d60:	83 ec 18             	sub    esp,0x18
c0020d63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020d67:	68 90 2c 03 c0       	push   0xc0032c90
c0020d6c:	e8 14 87 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0020d71:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020d78:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020d7e:	83 c4 10             	add    esp,0x10
c0020d81:	31 c9                	xor    ecx,ecx
c0020d83:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020d87:	99                   	cdq    
c0020d88:	f7 ff                	idiv   edi
c0020d8a:	8d 42 24             	lea    eax,[edx+0x24]
c0020d8d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020d91:	85 f6                	test   esi,esi
c0020d93:	75 1a                	jne    c0020daf <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020d95:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020d99:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020d9d:	50                   	push   eax
c0020d9e:	50                   	push   eax
c0020d9f:	52                   	push   edx
c0020da0:	68 a1 2c 03 c0       	push   0xc0032ca1
c0020da5:	e8 db 86 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0020daa:	83 c4 10             	add    esp,0x10
c0020dad:	eb 1b                	jmp    c0020dca <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020daf:	41                   	inc    ecx
c0020db0:	83 f9 08             	cmp    ecx,0x8
c0020db3:	75 ce                	jne    c0020d83 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020db5:	83 ec 0c             	sub    esp,0xc
c0020db8:	be 01 00 00 00       	mov    esi,0x1
c0020dbd:	68 c2 2c 03 c0       	push   0xc0032cc2
c0020dc2:	e8 be 86 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0020dc7:	83 c4 10             	add    esp,0x10
c0020dca:	83 c4 0c             	add    esp,0xc
c0020dcd:	89 f0                	mov    eax,esi
c0020dcf:	5b                   	pop    ebx
c0020dd0:	5e                   	pop    esi
c0020dd1:	5f                   	pop    edi
c0020dd2:	5d                   	pop    ebp
c0020dd3:	c3                   	ret    

c0020dd4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020dd4:	55                   	push   ebp
c0020dd5:	57                   	push   edi
c0020dd6:	56                   	push   esi
c0020dd7:	53                   	push   ebx
c0020dd8:	51                   	push   ecx
c0020dd9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ddd:	85 db                	test   ebx,ebx
c0020ddf:	0f 84 bc 00 00 00    	je     c0020ea1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020de5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020dec:	0f 84 af 00 00 00    	je     c0020ea1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020df2:	31 c9                	xor    ecx,ecx
c0020df4:	bf 08 00 00 00       	mov    edi,0x8
c0020df9:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020dff:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020e02:	99                   	cdq    
c0020e03:	f7 ff                	idiv   edi
c0020e05:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020e0c:	85 ed                	test   ebp,ebp
c0020e0e:	0f 84 9e 00 00 00    	je     c0020eb2 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020e14:	89 e9                	mov    ecx,ebp
c0020e16:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020e1c:	bf 01 00 00 00       	mov    edi,0x1
c0020e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e24:	d3 e7                	shl    edi,cl
c0020e26:	31 c9                	xor    ecx,ecx
c0020e28:	b8 01 00 00 00       	mov    eax,0x1
c0020e2d:	d3 e0                	shl    eax,cl
c0020e2f:	85 04 24             	test   DWORD PTR [esp],eax
c0020e32:	74 06                	je     c0020e3a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020e34:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020e38:	75 67                	jne    c0020ea1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020e3a:	41                   	inc    ecx
c0020e3b:	83 f9 11             	cmp    ecx,0x11
c0020e3e:	75 e8                	jne    c0020e28 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020e40:	46                   	inc    esi
c0020e41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020e44:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020e4a:	09 f8                	or     eax,edi
c0020e4c:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020e57:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020e5d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020e64:	31 c0                	xor    eax,eax
c0020e66:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020e6e:	74 09                	je     c0020e79 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020e70:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020e77:	eb 06                	jmp    c0020e7f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020e79:	40                   	inc    eax
c0020e7a:	83 f8 08             	cmp    eax,0x8
c0020e7d:	75 e7                	jne    c0020e66 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020e7f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020e82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e86:	83 fd 09             	cmp    ebp,0x9
c0020e89:	89 2a                	mov    DWORD PTR [edx],ebp
c0020e8b:	75 07                	jne    c0020e94 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020e8d:	b8 5d 0c 02 c0       	mov    eax,0xc0020c5d
c0020e92:	eb 31                	jmp    c0020ec5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020e94:	83 f8 01             	cmp    eax,0x1
c0020e97:	75 0c                	jne    c0020ea5 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020e99:	f7 d7                	not    edi
c0020e9b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020ea1:	31 c0                	xor    eax,eax
c0020ea3:	eb 20                	jmp    c0020ec5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ea5:	85 c0                	test   eax,eax
c0020ea7:	75 1c                	jne    c0020ec5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ea9:	8b 04 ad 00 45 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbb00]
c0020eb0:	eb 13                	jmp    c0020ec5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020eb2:	46                   	inc    esi
c0020eb3:	41                   	inc    ecx
c0020eb4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020eba:	83 f9 08             	cmp    ecx,0x8
c0020ebd:	0f 85 36 ff ff ff    	jne    c0020df9 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020ec3:	eb dc                	jmp    c0020ea1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ec5:	5a                   	pop    edx
c0020ec6:	5b                   	pop    ebx
c0020ec7:	5e                   	pop    esi
c0020ec8:	5f                   	pop    edi
c0020ec9:	5d                   	pop    ebp
c0020eca:	c3                   	ret    

c0020ecb <KiCheckSignalZ>:
c0020ecb:	83 ec 10             	sub    esp,0x10
c0020ece:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ed2:	50                   	push   eax
c0020ed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020ed8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020edb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020ee1:	e8 ee fe ff ff       	call   c0020dd4 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020ee6:	5a                   	pop    edx
c0020ee7:	31 d2                	xor    edx,edx
c0020ee9:	59                   	pop    ecx
c0020eea:	85 c0                	test   eax,eax
c0020eec:	74 19                	je     c0020f07 <KiCheckSignalZ+0x3c>
c0020eee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020ef4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020ef7:	89 02                	mov    DWORD PTR [edx],eax
c0020ef9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020f00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f04:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020f07:	89 d0                	mov    eax,edx
c0020f09:	83 c4 10             	add    esp,0x10
c0020f0c:	c3                   	ret    

c0020f0d <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020f0d:	56                   	push   esi
c0020f0e:	53                   	push   ebx
c0020f0f:	bb 01 00 00 00       	mov    ebx,0x1
c0020f14:	52                   	push   edx
c0020f15:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020f1d:	d3 e3                	shl    ebx,cl
c0020f1f:	83 f9 10             	cmp    ecx,0x10
c0020f22:	7f 08                	jg     c0020f2c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020f24:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020f2a:	75 10                	jne    c0020f3c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020f2c:	83 ec 0c             	sub    esp,0xc
c0020f2f:	68 d3 2c 03 c0       	push   0xc0032cd3
c0020f34:	e8 65 f5 ff ff       	call   c002049e <KePanic(char const*)>
c0020f39:	83 c4 10             	add    esp,0x10
c0020f3c:	f7 d3                	not    ebx
c0020f3e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020f44:	58                   	pop    eax
c0020f45:	5b                   	pop    ebx
c0020f46:	5e                   	pop    esi
c0020f47:	c3                   	ret    

c0020f48 <KiFinishSignalZ>:
c0020f48:	53                   	push   ebx
c0020f49:	83 ec 10             	sub    esp,0x10
c0020f4c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020f50:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020f53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f5b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020f61:	e8 a7 ff ff ff       	call   c0020f0d <KeCompleteSignal(SigHandlerBlock*, int)>
c0020f66:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020f6c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f73:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020f7a:	83 c4 18             	add    esp,0x18
c0020f7d:	5b                   	pop    ebx
c0020f7e:	c3                   	ret    

c0020f7f <SysSeekDir(regs*)>:
c0020f7f:	31 c0                	xor    eax,eax
c0020f81:	31 d2                	xor    edx,edx
c0020f83:	c3                   	ret    

c0020f84 <SysTellDir(regs*)>:
c0020f84:	31 c0                	xor    eax,eax
c0020f86:	31 d2                	xor    edx,edx
c0020f88:	c3                   	ret    

c0020f89 <SysVerify(regs*)>:
c0020f89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f8d:	31 d2                	xor    edx,edx
c0020f8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f92:	c3                   	ret    

c0020f93 <SysGetArgc(regs*)>:
c0020f93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f9b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020fa1:	89 c2                	mov    edx,eax
c0020fa3:	c1 fa 1f             	sar    edx,0x1f
c0020fa6:	c3                   	ret    

c0020fa7 <SysTTYName(regs*)>:
c0020fa7:	b8 01 00 00 00       	mov    eax,0x1
c0020fac:	31 d2                	xor    edx,edx
c0020fae:	c3                   	ret    

c0020faf <SysFormatDisk(regs*)>:
c0020faf:	56                   	push   esi
c0020fb0:	53                   	push   ebx
c0020fb1:	83 ec 04             	sub    esp,0x4
c0020fb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020fb8:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020fbe:	eb 28                	jmp    c0020fe8 <SysFormatDisk(regs*)+0x39>
c0020fc0:	83 ec 0c             	sub    esp,0xc
c0020fc3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020fc6:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020fc9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020fcb:	51                   	push   ecx
c0020fcc:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020fcf:	51                   	push   ecx
c0020fd0:	50                   	push   eax
c0020fd1:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020fd8:	50                   	push   eax
c0020fd9:	53                   	push   ebx
c0020fda:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020fdd:	83 c4 20             	add    esp,0x20
c0020fe0:	83 f8 08             	cmp    eax,0x8
c0020fe3:	75 14                	jne    c0020ff9 <SysFormatDisk(regs*)+0x4a>
c0020fe5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020fe8:	85 db                	test   ebx,ebx
c0020fea:	75 d4                	jne    c0020fc0 <SysFormatDisk(regs*)+0x11>
c0020fec:	83 c4 04             	add    esp,0x4
c0020fef:	b8 03 00 00 00       	mov    eax,0x3
c0020ff4:	31 d2                	xor    edx,edx
c0020ff6:	5b                   	pop    ebx
c0020ff7:	5e                   	pop    esi
c0020ff8:	c3                   	ret    
c0020ff9:	85 c0                	test   eax,eax
c0020ffb:	74 1f                	je     c002101c <SysFormatDisk(regs*)+0x6d>
c0020ffd:	83 f8 09             	cmp    eax,0x9
c0021000:	74 0d                	je     c002100f <SysFormatDisk(regs*)+0x60>
c0021002:	83 c4 04             	add    esp,0x4
c0021005:	b8 02 00 00 00       	mov    eax,0x2
c002100a:	31 d2                	xor    edx,edx
c002100c:	5b                   	pop    ebx
c002100d:	5e                   	pop    esi
c002100e:	c3                   	ret    
c002100f:	83 c4 04             	add    esp,0x4
c0021012:	b8 01 00 00 00       	mov    eax,0x1
c0021017:	31 d2                	xor    edx,edx
c0021019:	5b                   	pop    ebx
c002101a:	5e                   	pop    esi
c002101b:	c3                   	ret    
c002101c:	83 c4 04             	add    esp,0x4
c002101f:	31 c0                	xor    eax,eax
c0021021:	31 d2                	xor    edx,edx
c0021023:	5b                   	pop    ebx
c0021024:	5e                   	pop    esi
c0021025:	c3                   	ret    

c0021026 <SysSetDiskVolumeLabel(regs*)>:
c0021026:	56                   	push   esi
c0021027:	53                   	push   ebx
c0021028:	83 ec 04             	sub    esp,0x4
c002102b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002102f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021032:	83 f8 19             	cmp    eax,0x19
c0021035:	77 33                	ja     c002106a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021037:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002103e:	85 c9                	test   ecx,ecx
c0021040:	74 28                	je     c002106a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021042:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0021045:	85 db                	test   ebx,ebx
c0021047:	74 21                	je     c002106a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021049:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c002104f:	85 d2                	test   edx,edx
c0021051:	74 17                	je     c002106a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021053:	8b 32                	mov    esi,DWORD PTR [edx]
c0021055:	53                   	push   ebx
c0021056:	50                   	push   eax
c0021057:	51                   	push   ecx
c0021058:	52                   	push   edx
c0021059:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c002105c:	83 c4 10             	add    esp,0x10
c002105f:	89 c2                	mov    edx,eax
c0021061:	83 c4 04             	add    esp,0x4
c0021064:	c1 fa 1f             	sar    edx,0x1f
c0021067:	5b                   	pop    ebx
c0021068:	5e                   	pop    esi
c0021069:	c3                   	ret    
c002106a:	83 c4 04             	add    esp,0x4
c002106d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0021072:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021077:	5b                   	pop    ebx
c0021078:	5e                   	pop    esi
c0021079:	c3                   	ret    

c002107a <SysGetDiskVolumeLabel(regs*)>:
c002107a:	57                   	push   edi
c002107b:	56                   	push   esi
c002107c:	53                   	push   ebx
c002107d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021081:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021084:	83 fa 19             	cmp    edx,0x19
c0021087:	77 3c                	ja     c00210c5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021089:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0021090:	85 c9                	test   ecx,ecx
c0021092:	74 31                	je     c00210c5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021094:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0021097:	85 db                	test   ebx,ebx
c0021099:	74 2a                	je     c00210c5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002109b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002109e:	85 f6                	test   esi,esi
c00210a0:	74 23                	je     c00210c5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210a2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00210a8:	85 c0                	test   eax,eax
c00210aa:	74 19                	je     c00210c5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210ac:	83 ec 0c             	sub    esp,0xc
c00210af:	8b 38                	mov    edi,DWORD PTR [eax]
c00210b1:	56                   	push   esi
c00210b2:	53                   	push   ebx
c00210b3:	52                   	push   edx
c00210b4:	51                   	push   ecx
c00210b5:	50                   	push   eax
c00210b6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00210b9:	83 c4 20             	add    esp,0x20
c00210bc:	89 c2                	mov    edx,eax
c00210be:	5b                   	pop    ebx
c00210bf:	c1 fa 1f             	sar    edx,0x1f
c00210c2:	5e                   	pop    esi
c00210c3:	5f                   	pop    edi
c00210c4:	c3                   	ret    
c00210c5:	5b                   	pop    ebx
c00210c6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00210cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210d0:	5e                   	pop    esi
c00210d1:	5f                   	pop    edi
c00210d2:	c3                   	ret    

c00210d3 <SysShutdown(regs*)>:
c00210d3:	83 ec 0c             	sub    esp,0xc
c00210d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210da:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00210dd:	85 c0                	test   eax,eax
c00210df:	74 18                	je     c00210f9 <SysShutdown(regs*)+0x26>
c00210e1:	83 f8 01             	cmp    eax,0x1
c00210e4:	74 38                	je     c002111e <SysShutdown(regs*)+0x4b>
c00210e6:	83 f8 02             	cmp    eax,0x2
c00210e9:	74 24                	je     c002110f <SysShutdown(regs*)+0x3c>
c00210eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210f5:	83 c4 0c             	add    esp,0xc
c00210f8:	c3                   	ret    
c00210f9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00210fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0021100:	6a 00                	push   0x0
c0021102:	6a 00                	push   0x0
c0021104:	6a 00                	push   0x0
c0021106:	50                   	push   eax
c0021107:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002110a:	83 c4 10             	add    esp,0x10
c002110d:	eb dc                	jmp    c00210eb <SysShutdown(regs*)+0x18>
c002110f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021114:	8b 10                	mov    edx,DWORD PTR [eax]
c0021116:	6a 00                	push   0x0
c0021118:	6a 00                	push   0x0
c002111a:	6a 01                	push   0x1
c002111c:	eb e8                	jmp    c0021106 <SysShutdown(regs*)+0x33>
c002111e:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0021123:	85 c0                	test   eax,eax
c0021125:	74 02                	je     c0021129 <SysShutdown(regs*)+0x56>
c0021127:	ff d0                	call   eax
c0021129:	31 c0                	xor    eax,eax
c002112b:	31 d2                	xor    edx,edx
c002112d:	83 c4 0c             	add    esp,0xc
c0021130:	c3                   	ret    

c0021131 <SysRealpath(regs*)>:
c0021131:	83 ec 0c             	sub    esp,0xc
c0021134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021138:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c002113b:	85 d2                	test   edx,edx
c002113d:	74 07                	je     c0021146 <SysRealpath(regs*)+0x15>
c002113f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021142:	85 c0                	test   eax,eax
c0021144:	75 0b                	jne    c0021151 <SysRealpath(regs*)+0x20>
c0021146:	b8 01 00 00 00       	mov    eax,0x1
c002114b:	31 d2                	xor    edx,edx
c002114d:	83 c4 0c             	add    esp,0xc
c0021150:	c3                   	ret    
c0021151:	6a 00                	push   0x0
c0021153:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021159:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c002115c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0021162:	51                   	push   ecx
c0021163:	52                   	push   edx
c0021164:	50                   	push   eax
c0021165:	e8 2a 92 ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002116a:	83 c4 10             	add    esp,0x10
c002116d:	31 c0                	xor    eax,eax
c002116f:	31 d2                	xor    edx,edx
c0021171:	83 c4 0c             	add    esp,0xc
c0021174:	c3                   	ret    

c0021175 <SysReadDir(regs*)>:
c0021175:	53                   	push   ebx
c0021176:	83 ec 18             	sub    esp,0x18
c0021179:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002117d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021180:	83 f8 02             	cmp    eax,0x2
c0021183:	76 61                	jbe    c00211e6 <SysReadDir(regs*)+0x71>
c0021185:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c002118c:	77 49                	ja     c00211d7 <SysReadDir(regs*)+0x62>
c002118e:	83 ec 0c             	sub    esp,0xc
c0021191:	50                   	push   eax
c0021192:	e8 5c 6e ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c0021197:	83 c4 10             	add    esp,0x10
c002119a:	85 c0                	test   eax,eax
c002119c:	74 39                	je     c00211d7 <SysReadDir(regs*)+0x62>
c002119e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211a6:	83 ec 0c             	sub    esp,0xc
c00211a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00211ab:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00211af:	51                   	push   ecx
c00211b0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00211b3:	51                   	push   ecx
c00211b4:	6a 00                	push   0x0
c00211b6:	68 10 01 00 00       	push   0x110
c00211bb:	50                   	push   eax
c00211bc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00211bf:	83 c4 20             	add    esp,0x20
c00211c2:	85 c0                	test   eax,eax
c00211c4:	74 29                	je     c00211ef <SysReadDir(regs*)+0x7a>
c00211c6:	83 f8 07             	cmp    eax,0x7
c00211c9:	74 1b                	je     c00211e6 <SysReadDir(regs*)+0x71>
c00211cb:	b8 02 00 00 00       	mov    eax,0x2
c00211d0:	31 d2                	xor    edx,edx
c00211d2:	83 c4 18             	add    esp,0x18
c00211d5:	5b                   	pop    ebx
c00211d6:	c3                   	ret    
c00211d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00211dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00211e1:	83 c4 18             	add    esp,0x18
c00211e4:	5b                   	pop    ebx
c00211e5:	c3                   	ret    
c00211e6:	b8 01 00 00 00       	mov    eax,0x1
c00211eb:	31 d2                	xor    edx,edx
c00211ed:	eb e3                	jmp    c00211d2 <SysReadDir(regs*)+0x5d>
c00211ef:	31 c0                	xor    eax,eax
c00211f1:	31 d2                	xor    edx,edx
c00211f3:	eb dd                	jmp    c00211d2 <SysReadDir(regs*)+0x5d>

c00211f5 <SysIsATTY(regs*)>:
c00211f5:	83 ec 0c             	sub    esp,0xc
c00211f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211fc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00211ff:	83 f8 02             	cmp    eax,0x2
c0021202:	76 07                	jbe    c002120b <SysIsATTY(regs*)+0x16>
c0021204:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0021209:	75 26                	jne    c0021231 <SysIsATTY(regs*)+0x3c>
c002120b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021210:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021213:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0021219:	85 c0                	test   eax,eax
c002121b:	74 24                	je     c0021241 <SysIsATTY(regs*)+0x4c>
c002121d:	83 ec 0c             	sub    esp,0xc
c0021220:	8b 10                	mov    edx,DWORD PTR [eax]
c0021222:	50                   	push   eax
c0021223:	ff 12                	call   DWORD PTR [edx]
c0021225:	31 d2                	xor    edx,edx
c0021227:	0f b6 c0             	movzx  eax,al
c002122a:	83 c4 10             	add    esp,0x10
c002122d:	83 c4 0c             	add    esp,0xc
c0021230:	c3                   	ret    
c0021231:	83 ec 0c             	sub    esp,0xc
c0021234:	50                   	push   eax
c0021235:	e8 b9 6d ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c002123a:	83 c4 10             	add    esp,0x10
c002123d:	85 c0                	test   eax,eax
c002123f:	75 dc                	jne    c002121d <SysIsATTY(regs*)+0x28>
c0021241:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021246:	ba ff ff ff ff       	mov    edx,0xffffffff
c002124b:	83 c4 0c             	add    esp,0xc
c002124e:	c3                   	ret    

c002124f <SysSeek(regs*)>:
c002124f:	53                   	push   ebx
c0021250:	83 ec 08             	sub    esp,0x8
c0021253:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021257:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002125a:	8d 50 fd             	lea    edx,[eax-0x3]
c002125d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021263:	77 32                	ja     c0021297 <SysSeek(regs*)+0x48>
c0021265:	83 ec 0c             	sub    esp,0xc
c0021268:	50                   	push   eax
c0021269:	e8 85 6d ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c002126e:	83 c4 0c             	add    esp,0xc
c0021271:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0021274:	31 db                	xor    ebx,ebx
c0021276:	53                   	push   ebx
c0021277:	51                   	push   ecx
c0021278:	50                   	push   eax
c0021279:	e8 ea 94 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c002127e:	83 c4 10             	add    esp,0x10
c0021281:	85 c0                	test   eax,eax
c0021283:	0f 95 c0             	setne  al
c0021286:	31 d2                	xor    edx,edx
c0021288:	0f b6 c0             	movzx  eax,al
c002128b:	f7 d8                	neg    eax
c002128d:	83 d2 00             	adc    edx,0x0
c0021290:	83 c4 08             	add    esp,0x8
c0021293:	f7 da                	neg    edx
c0021295:	5b                   	pop    ebx
c0021296:	c3                   	ret    
c0021297:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002129c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212a1:	83 c4 08             	add    esp,0x8
c00212a4:	5b                   	pop    ebx
c00212a5:	c3                   	ret    

c00212a6 <SysTell(regs*)>:
c00212a6:	53                   	push   ebx
c00212a7:	83 ec 08             	sub    esp,0x8
c00212aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00212ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212b1:	83 f8 02             	cmp    eax,0x2
c00212b4:	76 4e                	jbe    c0021304 <SysTell(regs*)+0x5e>
c00212b6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00212bb:	76 19                	jbe    c00212d6 <SysTell(regs*)+0x30>
c00212bd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00212c0:	31 d2                	xor    edx,edx
c00212c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212cf:	31 c0                	xor    eax,eax
c00212d1:	83 c4 08             	add    esp,0x8
c00212d4:	5b                   	pop    ebx
c00212d5:	c3                   	ret    
c00212d6:	83 ec 0c             	sub    esp,0xc
c00212d9:	50                   	push   eax
c00212da:	e8 14 6d ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c00212df:	5a                   	pop    edx
c00212e0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00212e3:	59                   	pop    ecx
c00212e4:	53                   	push   ebx
c00212e5:	50                   	push   eax
c00212e6:	e8 29 95 ff ff       	call   c001a814 <File::tell(unsigned long long*)>
c00212eb:	83 c4 10             	add    esp,0x10
c00212ee:	85 c0                	test   eax,eax
c00212f0:	0f 95 c0             	setne  al
c00212f3:	31 d2                	xor    edx,edx
c00212f5:	0f b6 c0             	movzx  eax,al
c00212f8:	f7 d8                	neg    eax
c00212fa:	83 d2 00             	adc    edx,0x0
c00212fd:	83 c4 08             	add    esp,0x8
c0021300:	f7 da                	neg    edx
c0021302:	5b                   	pop    ebx
c0021303:	c3                   	ret    
c0021304:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021309:	ba ff ff ff ff       	mov    edx,0xffffffff
c002130e:	83 c4 08             	add    esp,0x8
c0021311:	5b                   	pop    ebx
c0021312:	c3                   	ret    

c0021313 <SysSize(regs*)>:
c0021313:	53                   	push   ebx
c0021314:	83 ec 18             	sub    esp,0x18
c0021317:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002131b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002131e:	83 f8 02             	cmp    eax,0x2
c0021321:	76 54                	jbe    c0021377 <SysSize(regs*)+0x64>
c0021323:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021328:	76 19                	jbe    c0021343 <SysSize(regs*)+0x30>
c002132a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002132d:	31 d2                	xor    edx,edx
c002132f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021335:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002133c:	31 c0                	xor    eax,eax
c002133e:	83 c4 18             	add    esp,0x18
c0021341:	5b                   	pop    ebx
c0021342:	c3                   	ret    
c0021343:	83 ec 0c             	sub    esp,0xc
c0021346:	50                   	push   eax
c0021347:	e8 a7 6c ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c002134c:	83 c4 0c             	add    esp,0xc
c002134f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021353:	52                   	push   edx
c0021354:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021357:	52                   	push   edx
c0021358:	50                   	push   eax
c0021359:	e8 4e 96 ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c002135e:	83 c4 10             	add    esp,0x10
c0021361:	85 c0                	test   eax,eax
c0021363:	0f 95 c0             	setne  al
c0021366:	31 d2                	xor    edx,edx
c0021368:	0f b6 c0             	movzx  eax,al
c002136b:	f7 d8                	neg    eax
c002136d:	83 d2 00             	adc    edx,0x0
c0021370:	83 c4 18             	add    esp,0x18
c0021373:	f7 da                	neg    edx
c0021375:	5b                   	pop    ebx
c0021376:	c3                   	ret    
c0021377:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002137c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021381:	83 c4 18             	add    esp,0x18
c0021384:	5b                   	pop    ebx
c0021385:	c3                   	ret    

c0021386 <SysSizeFromFilename(regs*)>:
c0021386:	55                   	push   ebp
c0021387:	57                   	push   edi
c0021388:	56                   	push   esi
c0021389:	53                   	push   ebx
c002138a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021390:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0021397:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002139a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002139d:	85 f6                	test   esi,esi
c002139f:	74 34                	je     c00213d5 <SysSizeFromFilename(regs*)+0x4f>
c00213a1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00213a7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00213aa:	83 f8 02             	cmp    eax,0x2
c00213ad:	76 2d                	jbe    c00213dc <SysSizeFromFilename(regs*)+0x56>
c00213af:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00213b4:	76 3b                	jbe    c00213f1 <SysSizeFromFilename(regs*)+0x6b>
c00213b6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00213b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213c6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00213cc:	31 c0                	xor    eax,eax
c00213ce:	5b                   	pop    ebx
c00213cf:	31 d2                	xor    edx,edx
c00213d1:	5e                   	pop    esi
c00213d2:	5f                   	pop    edi
c00213d3:	5d                   	pop    ebp
c00213d4:	c3                   	ret    
c00213d5:	89 f8                	mov    eax,edi
c00213d7:	83 f8 02             	cmp    eax,0x2
c00213da:	77 d3                	ja     c00213af <SysSizeFromFilename(regs*)+0x29>
c00213dc:	81 c4 5c 02 00 00    	add    esp,0x25c
c00213e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213e7:	5b                   	pop    ebx
c00213e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213ed:	5e                   	pop    esi
c00213ee:	5f                   	pop    edi
c00213ef:	5d                   	pop    ebp
c00213f0:	c3                   	ret    
c00213f1:	83 ec 0c             	sub    esp,0xc
c00213f4:	68 14 01 00 00       	push   0x114
c00213f9:	e8 f8 51 ff ff       	call   c00165f6 <malloc>
c00213fe:	6a 01                	push   0x1
c0021400:	89 c5                	mov    ebp,eax
c0021402:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021407:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002140a:	51                   	push   ecx
c002140b:	57                   	push   edi
c002140c:	55                   	push   ebp
c002140d:	e8 9c 91 ff ff       	call   c001a5ae <File::File(char const*, Process*, bool)>
c0021412:	83 c4 1c             	add    esp,0x1c
c0021415:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021419:	50                   	push   eax
c002141a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002141d:	53                   	push   ebx
c002141e:	55                   	push   ebp
c002141f:	e8 88 95 ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c0021424:	83 c4 10             	add    esp,0x10
c0021427:	85 ed                	test   ebp,ebp
c0021429:	74 15                	je     c0021440 <SysSizeFromFilename(regs*)+0xba>
c002142b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002142f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021432:	83 ec 0c             	sub    esp,0xc
c0021435:	55                   	push   ebp
c0021436:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021439:	83 c4 10             	add    esp,0x10
c002143c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021440:	85 c0                	test   eax,eax
c0021442:	75 98                	jne    c00213dc <SysSizeFromFilename(regs*)+0x56>
c0021444:	6a 00                	push   0x0
c0021446:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002144b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002144e:	05 0c 01 00 00       	add    eax,0x10c
c0021453:	50                   	push   eax
c0021454:	57                   	push   edi
c0021455:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c002145c:	53                   	push   ebx
c002145d:	e8 32 8f ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021462:	58                   	pop    eax
c0021463:	5a                   	pop    edx
c0021464:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021468:	50                   	push   eax
c0021469:	53                   	push   ebx
c002146a:	e8 8d 89 ff ff       	call   c0019dfc <KeDereferenceSymlink(char const*, char*)>
c002146f:	83 c4 10             	add    esp,0x10
c0021472:	83 f8 01             	cmp    eax,0x1
c0021475:	74 1a                	je     c0021491 <SysSizeFromFilename(regs*)+0x10b>
c0021477:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c002147c:	74 26                	je     c00214a4 <SysSizeFromFilename(regs*)+0x11e>
c002147e:	85 f6                	test   esi,esi
c0021480:	0f 84 40 ff ff ff    	je     c00213c6 <SysSizeFromFilename(regs*)+0x40>
c0021486:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002148c:	e9 35 ff ff ff       	jmp    c00213c6 <SysSizeFromFilename(regs*)+0x40>
c0021491:	85 f6                	test   esi,esi
c0021493:	0f 84 2d ff ff ff    	je     c00213c6 <SysSizeFromFilename(regs*)+0x40>
c0021499:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002149f:	e9 22 ff ff ff       	jmp    c00213c6 <SysSizeFromFilename(regs*)+0x40>
c00214a4:	85 f6                	test   esi,esi
c00214a6:	0f 84 1a ff ff ff    	je     c00213c6 <SysSizeFromFilename(regs*)+0x40>
c00214ac:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00214b2:	e9 0f ff ff ff       	jmp    c00213c6 <SysSizeFromFilename(regs*)+0x40>

c00214b7 <SysSizeFromFilenameNoSymlink(regs*)>:
c00214b7:	55                   	push   ebp
c00214b8:	57                   	push   edi
c00214b9:	56                   	push   esi
c00214ba:	53                   	push   ebx
c00214bb:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00214c1:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00214c8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00214cb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00214ce:	85 f6                	test   esi,esi
c00214d0:	74 34                	je     c0021506 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00214d2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00214d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00214db:	83 f8 02             	cmp    eax,0x2
c00214de:	76 2d                	jbe    c002150d <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00214e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00214e5:	76 3b                	jbe    c0021522 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00214e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00214ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214f7:	81 c4 5c 02 00 00    	add    esp,0x25c
c00214fd:	31 c0                	xor    eax,eax
c00214ff:	5b                   	pop    ebx
c0021500:	31 d2                	xor    edx,edx
c0021502:	5e                   	pop    esi
c0021503:	5f                   	pop    edi
c0021504:	5d                   	pop    ebp
c0021505:	c3                   	ret    
c0021506:	89 f8                	mov    eax,edi
c0021508:	83 f8 02             	cmp    eax,0x2
c002150b:	77 d3                	ja     c00214e0 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c002150d:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021513:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021518:	5b                   	pop    ebx
c0021519:	ba ff ff ff ff       	mov    edx,0xffffffff
c002151e:	5e                   	pop    esi
c002151f:	5f                   	pop    edi
c0021520:	5d                   	pop    ebp
c0021521:	c3                   	ret    
c0021522:	83 ec 0c             	sub    esp,0xc
c0021525:	68 14 01 00 00       	push   0x114
c002152a:	e8 c7 50 ff ff       	call   c00165f6 <malloc>
c002152f:	6a 00                	push   0x0
c0021531:	89 c5                	mov    ebp,eax
c0021533:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021538:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002153b:	51                   	push   ecx
c002153c:	57                   	push   edi
c002153d:	55                   	push   ebp
c002153e:	e8 6b 90 ff ff       	call   c001a5ae <File::File(char const*, Process*, bool)>
c0021543:	83 c4 1c             	add    esp,0x1c
c0021546:	8d 44 24 23          	lea    eax,[esp+0x23]
c002154a:	50                   	push   eax
c002154b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002154e:	53                   	push   ebx
c002154f:	55                   	push   ebp
c0021550:	e8 57 94 ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c0021555:	83 c4 10             	add    esp,0x10
c0021558:	85 ed                	test   ebp,ebp
c002155a:	74 15                	je     c0021571 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c002155c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021560:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021563:	83 ec 0c             	sub    esp,0xc
c0021566:	55                   	push   ebp
c0021567:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002156a:	83 c4 10             	add    esp,0x10
c002156d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021571:	85 c0                	test   eax,eax
c0021573:	75 98                	jne    c002150d <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0021575:	6a 00                	push   0x0
c0021577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002157c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002157f:	05 0c 01 00 00       	add    eax,0x10c
c0021584:	50                   	push   eax
c0021585:	57                   	push   edi
c0021586:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c002158d:	53                   	push   ebx
c002158e:	e8 01 8e ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021593:	58                   	pop    eax
c0021594:	5a                   	pop    edx
c0021595:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021599:	50                   	push   eax
c002159a:	53                   	push   ebx
c002159b:	e8 5c 88 ff ff       	call   c0019dfc <KeDereferenceSymlink(char const*, char*)>
c00215a0:	83 c4 10             	add    esp,0x10
c00215a3:	83 f8 01             	cmp    eax,0x1
c00215a6:	74 1a                	je     c00215c2 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00215a8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00215ad:	74 26                	je     c00215d5 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00215af:	85 f6                	test   esi,esi
c00215b1:	0f 84 40 ff ff ff    	je     c00214f7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00215b7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00215bd:	e9 35 ff ff ff       	jmp    c00214f7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00215c2:	85 f6                	test   esi,esi
c00215c4:	0f 84 2d ff ff ff    	je     c00214f7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00215ca:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00215d0:	e9 22 ff ff ff       	jmp    c00214f7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00215d5:	85 f6                	test   esi,esi
c00215d7:	0f 84 1a ff ff ff    	je     c00214f7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00215dd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00215e3:	e9 0f ff ff ff       	jmp    c00214f7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00215e8 <SysClose(regs*)>:
c00215e8:	53                   	push   ebx
c00215e9:	83 ec 08             	sub    esp,0x8
c00215ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215f3:	83 f8 02             	cmp    eax,0x2
c00215f6:	76 41                	jbe    c0021639 <SysClose(regs*)+0x51>
c00215f8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00215fe:	83 fa 01             	cmp    edx,0x1
c0021601:	76 2d                	jbe    c0021630 <SysClose(regs*)+0x48>
c0021603:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021608:	77 2f                	ja     c0021639 <SysClose(regs*)+0x51>
c002160a:	83 ec 0c             	sub    esp,0xc
c002160d:	50                   	push   eax
c002160e:	e8 e0 69 ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c0021613:	89 c3                	mov    ebx,eax
c0021615:	89 04 24             	mov    DWORD PTR [esp],eax
c0021618:	e8 eb 90 ff ff       	call   c001a708 <File::close()>
c002161d:	83 c4 10             	add    esp,0x10
c0021620:	85 db                	test   ebx,ebx
c0021622:	74 0c                	je     c0021630 <SysClose(regs*)+0x48>
c0021624:	83 ec 0c             	sub    esp,0xc
c0021627:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021629:	53                   	push   ebx
c002162a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002162d:	83 c4 10             	add    esp,0x10
c0021630:	31 c0                	xor    eax,eax
c0021632:	31 d2                	xor    edx,edx
c0021634:	83 c4 08             	add    esp,0x8
c0021637:	5b                   	pop    ebx
c0021638:	c3                   	ret    
c0021639:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002163e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021643:	83 c4 08             	add    esp,0x8
c0021646:	5b                   	pop    ebx
c0021647:	c3                   	ret    

c0021648 <SysOpenDir(regs*)>:
c0021648:	56                   	push   esi
c0021649:	53                   	push   ebx
c002164a:	83 ec 04             	sub    esp,0x4
c002164d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021651:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021654:	85 c9                	test   ecx,ecx
c0021656:	74 5d                	je     c00216b5 <SysOpenDir(regs*)+0x6d>
c0021658:	83 ec 0c             	sub    esp,0xc
c002165b:	68 14 01 00 00       	push   0x114
c0021660:	e8 91 4f ff ff       	call   c00165f6 <malloc>
c0021665:	83 c4 0c             	add    esp,0xc
c0021668:	89 c6                	mov    esi,eax
c002166a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002166f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021672:	50                   	push   eax
c0021673:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021676:	52                   	push   edx
c0021677:	56                   	push   esi
c0021678:	e8 ef 94 ff ff       	call   c001ab6c <Directory::Directory(char const*, Process*)>
c002167d:	83 c4 10             	add    esp,0x10
c0021680:	85 f6                	test   esi,esi
c0021682:	74 31                	je     c00216b5 <SysOpenDir(regs*)+0x6d>
c0021684:	83 ec 0c             	sub    esp,0xc
c0021687:	56                   	push   esi
c0021688:	e8 a7 95 ff ff       	call   c001ac34 <Directory::open()>
c002168d:	83 c4 10             	add    esp,0x10
c0021690:	85 c0                	test   eax,eax
c0021692:	75 21                	jne    c00216b5 <SysOpenDir(regs*)+0x6d>
c0021694:	83 ec 0c             	sub    esp,0xc
c0021697:	56                   	push   esi
c0021698:	e8 59 66 ff ff       	call   c0017cf6 <UnixFile::getFileDescriptor()>
c002169d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00216a0:	83 c4 10             	add    esp,0x10
c00216a3:	89 02                	mov    DWORD PTR [edx],eax
c00216a5:	c1 f8 1f             	sar    eax,0x1f
c00216a8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00216ab:	83 c4 04             	add    esp,0x4
c00216ae:	31 c0                	xor    eax,eax
c00216b0:	31 d2                	xor    edx,edx
c00216b2:	5b                   	pop    ebx
c00216b3:	5e                   	pop    esi
c00216b4:	c3                   	ret    
c00216b5:	83 c4 04             	add    esp,0x4
c00216b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00216bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00216c2:	5b                   	pop    ebx
c00216c3:	5e                   	pop    esi
c00216c4:	c3                   	ret    

c00216c5 <SysMakeDir(regs*)>:
c00216c5:	56                   	push   esi
c00216c6:	53                   	push   ebx
c00216c7:	83 ec 10             	sub    esp,0x10
c00216ca:	68 14 01 00 00       	push   0x114
c00216cf:	e8 22 4f ff ff       	call   c00165f6 <malloc>
c00216d4:	83 c4 0c             	add    esp,0xc
c00216d7:	89 c3                	mov    ebx,eax
c00216d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00216e1:	50                   	push   eax
c00216e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00216e6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00216e9:	52                   	push   edx
c00216ea:	53                   	push   ebx
c00216eb:	e8 7c 94 ff ff       	call   c001ab6c <Directory::Directory(char const*, Process*)>
c00216f0:	83 c4 10             	add    esp,0x10
c00216f3:	85 db                	test   ebx,ebx
c00216f5:	74 2c                	je     c0021723 <SysMakeDir(regs*)+0x5e>
c00216f7:	83 ec 0c             	sub    esp,0xc
c00216fa:	53                   	push   ebx
c00216fb:	e8 14 97 ff ff       	call   c001ae14 <Directory::create()>
c0021700:	89 c6                	mov    esi,eax
c0021702:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021704:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021707:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002170a:	83 c4 10             	add    esp,0x10
c002170d:	31 c0                	xor    eax,eax
c002170f:	85 f6                	test   esi,esi
c0021711:	0f 95 c0             	setne  al
c0021714:	31 d2                	xor    edx,edx
c0021716:	f7 d8                	neg    eax
c0021718:	83 d2 00             	adc    edx,0x0
c002171b:	83 c4 04             	add    esp,0x4
c002171e:	f7 da                	neg    edx
c0021720:	5b                   	pop    ebx
c0021721:	5e                   	pop    esi
c0021722:	c3                   	ret    
c0021723:	83 c4 04             	add    esp,0x4
c0021726:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002172b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021730:	5b                   	pop    ebx
c0021731:	5e                   	pop    esi
c0021732:	c3                   	ret    

c0021733 <SysCloseDir(regs*)>:
c0021733:	53                   	push   ebx
c0021734:	83 ec 08             	sub    esp,0x8
c0021737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002173b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002173e:	8d 50 fd             	lea    edx,[eax-0x3]
c0021741:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021747:	77 2f                	ja     c0021778 <SysCloseDir(regs*)+0x45>
c0021749:	83 ec 0c             	sub    esp,0xc
c002174c:	50                   	push   eax
c002174d:	e8 a1 68 ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c0021752:	89 c3                	mov    ebx,eax
c0021754:	89 04 24             	mov    DWORD PTR [esp],eax
c0021757:	e8 34 95 ff ff       	call   c001ac90 <Directory::close()>
c002175c:	83 c4 10             	add    esp,0x10
c002175f:	85 db                	test   ebx,ebx
c0021761:	74 0c                	je     c002176f <SysCloseDir(regs*)+0x3c>
c0021763:	83 ec 0c             	sub    esp,0xc
c0021766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021768:	53                   	push   ebx
c0021769:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002176c:	83 c4 10             	add    esp,0x10
c002176f:	31 c0                	xor    eax,eax
c0021771:	31 d2                	xor    edx,edx
c0021773:	83 c4 08             	add    esp,0x8
c0021776:	5b                   	pop    ebx
c0021777:	c3                   	ret    
c0021778:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002177d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021782:	83 c4 08             	add    esp,0x8
c0021785:	5b                   	pop    ebx
c0021786:	c3                   	ret    

c0021787 <SysWait(regs*)>:
c0021787:	83 ec 10             	sub    esp,0x10
c002178a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002178e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021791:	52                   	push   edx
c0021792:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0021795:	51                   	push   ecx
c0021796:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021799:	50                   	push   eax
c002179a:	e8 09 3e 00 00       	call   c00255a8 <waitTask(int, int*, int)>
c002179f:	83 c4 1c             	add    esp,0x1c
c00217a2:	89 c2                	mov    edx,eax
c00217a4:	c1 fa 1f             	sar    edx,0x1f
c00217a7:	c3                   	ret    

c00217a8 <SysNotImpl(regs*)>:
c00217a8:	83 ec 18             	sub    esp,0x18
c00217ab:	68 e4 2c 03 c0       	push   0xc0032ce4
c00217b0:	e8 e9 ec ff ff       	call   c002049e <KePanic(char const*)>
c00217b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00217ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00217bf:	83 c4 1c             	add    esp,0x1c
c00217c2:	c3                   	ret    

c00217c3 <SysPanic(regs*)>:
c00217c3:	83 ec 18             	sub    esp,0x18
c00217c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217ca:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00217cd:	50                   	push   eax
c00217ce:	e8 cb ec ff ff       	call   c002049e <KePanic(char const*)>
c00217d3:	b8 01 00 00 00       	mov    eax,0x1
c00217d8:	31 d2                	xor    edx,edx
c00217da:	83 c4 1c             	add    esp,0x1c
c00217dd:	c3                   	ret    

c00217de <SysRmdir(regs*)>:
c00217de:	56                   	push   esi
c00217df:	53                   	push   ebx
c00217e0:	83 ec 20             	sub    esp,0x20
c00217e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00217e7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00217ea:	68 14 01 00 00       	push   0x114
c00217ef:	e8 02 4e ff ff       	call   c00165f6 <malloc>
c00217f4:	6a 00                	push   0x0
c00217f6:	89 c3                	mov    ebx,eax
c00217f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00217fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021800:	50                   	push   eax
c0021801:	56                   	push   esi
c0021802:	53                   	push   ebx
c0021803:	e8 a6 8d ff ff       	call   c001a5ae <File::File(char const*, Process*, bool)>
c0021808:	83 c4 14             	add    esp,0x14
c002180b:	53                   	push   ebx
c002180c:	e8 67 90 ff ff       	call   c001a878 <File::unlink()>
c0021811:	83 c4 10             	add    esp,0x10
c0021814:	85 db                	test   ebx,ebx
c0021816:	74 14                	je     c002182c <SysRmdir(regs*)+0x4e>
c0021818:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002181c:	8b 13                	mov    edx,DWORD PTR [ebx]
c002181e:	83 ec 0c             	sub    esp,0xc
c0021821:	53                   	push   ebx
c0021822:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021825:	83 c4 10             	add    esp,0x10
c0021828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002182c:	85 c0                	test   eax,eax
c002182e:	0f 95 c0             	setne  al
c0021831:	31 d2                	xor    edx,edx
c0021833:	0f b6 c0             	movzx  eax,al
c0021836:	f7 d8                	neg    eax
c0021838:	83 d2 00             	adc    edx,0x0
c002183b:	83 c4 14             	add    esp,0x14
c002183e:	f7 da                	neg    edx
c0021840:	5b                   	pop    ebx
c0021841:	5e                   	pop    esi
c0021842:	c3                   	ret    

c0021843 <SysUnlink(regs*)>:
c0021843:	56                   	push   esi
c0021844:	53                   	push   ebx
c0021845:	83 ec 20             	sub    esp,0x20
c0021848:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002184c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c002184f:	68 14 01 00 00       	push   0x114
c0021854:	e8 9d 4d ff ff       	call   c00165f6 <malloc>
c0021859:	6a 00                	push   0x0
c002185b:	89 c3                	mov    ebx,eax
c002185d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021862:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021865:	50                   	push   eax
c0021866:	56                   	push   esi
c0021867:	53                   	push   ebx
c0021868:	e8 41 8d ff ff       	call   c001a5ae <File::File(char const*, Process*, bool)>
c002186d:	83 c4 14             	add    esp,0x14
c0021870:	53                   	push   ebx
c0021871:	e8 02 90 ff ff       	call   c001a878 <File::unlink()>
c0021876:	83 c4 10             	add    esp,0x10
c0021879:	85 db                	test   ebx,ebx
c002187b:	74 14                	je     c0021891 <SysUnlink(regs*)+0x4e>
c002187d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021881:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021883:	83 ec 0c             	sub    esp,0xc
c0021886:	53                   	push   ebx
c0021887:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002188a:	83 c4 10             	add    esp,0x10
c002188d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021891:	85 c0                	test   eax,eax
c0021893:	0f 95 c0             	setne  al
c0021896:	31 d2                	xor    edx,edx
c0021898:	0f b6 c0             	movzx  eax,al
c002189b:	f7 d8                	neg    eax
c002189d:	83 d2 00             	adc    edx,0x0
c00218a0:	83 c4 14             	add    esp,0x14
c00218a3:	f7 da                	neg    edx
c00218a5:	5b                   	pop    ebx
c00218a6:	5e                   	pop    esi
c00218a7:	c3                   	ret    

c00218a8 <SysGetArgv(regs*)>:
c00218a8:	83 ec 0c             	sub    esp,0xc
c00218ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00218af:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00218b2:	85 c0                	test   eax,eax
c00218b4:	78 2c                	js     c00218e2 <SysGetArgv(regs*)+0x3a>
c00218b6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00218bc:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00218bf:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00218c5:	7d 1b                	jge    c00218e2 <SysGetArgv(regs*)+0x3a>
c00218c7:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00218ce:	85 c0                	test   eax,eax
c00218d0:	74 18                	je     c00218ea <SysGetArgv(regs*)+0x42>
c00218d2:	83 ec 08             	sub    esp,0x8
c00218d5:	50                   	push   eax
c00218d6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00218d9:	50                   	push   eax
c00218da:	e8 61 ed fd ff       	call   c0000640 <strcpy>
c00218df:	83 c4 10             	add    esp,0x10
c00218e2:	31 c0                	xor    eax,eax
c00218e4:	31 d2                	xor    edx,edx
c00218e6:	83 c4 0c             	add    esp,0xc
c00218e9:	c3                   	ret    
c00218ea:	b8 01 00 00 00       	mov    eax,0x1
c00218ef:	31 d2                	xor    edx,edx
c00218f1:	83 c4 0c             	add    esp,0xc
c00218f4:	c3                   	ret    

c00218f5 <SysUSleep(regs*)>:
c00218f5:	83 ec 1c             	sub    esp,0x1c
c00218f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00218fc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00218ff:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0021902:	6a 00                	push   0x0
c0021904:	6a 64                	push   0x64
c0021906:	52                   	push   edx
c0021907:	50                   	push   eax
c0021908:	e8 a3 cf 00 00       	call   c002e8b0 <__udivdi3>
c002190d:	83 c4 14             	add    esp,0x14
c0021910:	50                   	push   eax
c0021911:	e8 76 3d 00 00       	call   c002568c <milliTenthSleep(unsigned int)>
c0021916:	31 c0                	xor    eax,eax
c0021918:	31 d2                	xor    edx,edx
c002191a:	83 c4 1c             	add    esp,0x1c
c002191d:	c3                   	ret    

c002191e <SysSpawn(regs*)>:
c002191e:	56                   	push   esi
c002191f:	53                   	push   ebx
c0021920:	83 ec 04             	sub    esp,0x4
c0021923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021927:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002192a:	85 f6                	test   esi,esi
c002192c:	75 0a                	jne    c0021938 <SysSpawn(regs*)+0x1a>
c002192e:	83 c4 04             	add    esp,0x4
c0021931:	31 c0                	xor    eax,eax
c0021933:	31 d2                	xor    edx,edx
c0021935:	5b                   	pop    ebx
c0021936:	5e                   	pop    esi
c0021937:	c3                   	ret    
c0021938:	83 ec 0c             	sub    esp,0xc
c002193b:	68 24 07 00 00       	push   0x724
c0021940:	e8 b1 4c ff ff       	call   c00165f6 <malloc>
c0021945:	83 c4 10             	add    esp,0x10
c0021948:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002194b:	89 c6                	mov    esi,eax
c002194d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021950:	85 c9                	test   ecx,ecx
c0021952:	75 39                	jne    c002198d <SysSpawn(regs*)+0x6f>
c0021954:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021959:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002195c:	52                   	push   edx
c002195d:	50                   	push   eax
c002195e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021961:	50                   	push   eax
c0021962:	56                   	push   esi
c0021963:	e8 c8 34 00 00       	call   c0024e30 <Process::Process(char const*, Process*, char**)>
c0021968:	83 c4 10             	add    esp,0x10
c002196b:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021972:	75 ba                	jne    c002192e <SysSpawn(regs*)+0x10>
c0021974:	83 ec 0c             	sub    esp,0xc
c0021977:	56                   	push   esi
c0021978:	e8 f3 39 00 00       	call   c0025370 <Process::createUserThread()>
c002197d:	8b 06                	mov    eax,DWORD PTR [esi]
c002197f:	83 c4 10             	add    esp,0x10
c0021982:	89 c2                	mov    edx,eax
c0021984:	83 c4 04             	add    esp,0x4
c0021987:	c1 fa 1f             	sar    edx,0x1f
c002198a:	5b                   	pop    ebx
c002198b:	5e                   	pop    esi
c002198c:	c3                   	ret    
c002198d:	31 c0                	xor    eax,eax
c002198f:	eb cb                	jmp    c002195c <SysSpawn(regs*)+0x3e>

c0021991 <SysGetEnv(regs*)>:
c0021991:	57                   	push   edi
c0021992:	56                   	push   esi
c0021993:	53                   	push   ebx
c0021994:	83 ec 1c             	sub    esp,0x1c
c0021997:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002199b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219a0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00219a3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00219a6:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00219a9:	51                   	push   ecx
c00219aa:	e8 8c e9 ff ff       	call   c002033b <KeGetProcessTotalEnvCount(Process*)>
c00219af:	83 c4 10             	add    esp,0x10
c00219b2:	39 c7                	cmp    edi,eax
c00219b4:	7c 14                	jl     c00219ca <SysGetEnv(regs*)+0x39>
c00219b6:	85 f6                	test   esi,esi
c00219b8:	75 0b                	jne    c00219c5 <SysGetEnv(regs*)+0x34>
c00219ba:	83 c4 10             	add    esp,0x10
c00219bd:	31 c0                	xor    eax,eax
c00219bf:	5b                   	pop    ebx
c00219c0:	31 d2                	xor    edx,edx
c00219c2:	5e                   	pop    esi
c00219c3:	5f                   	pop    edi
c00219c4:	c3                   	ret    
c00219c5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00219c8:	eb f0                	jmp    c00219ba <SysGetEnv(regs*)+0x29>
c00219ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219ce:	83 ec 04             	sub    esp,0x4
c00219d1:	57                   	push   edi
c00219d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00219d8:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00219db:	57                   	push   edi
c00219dc:	50                   	push   eax
c00219dd:	e8 79 e9 ff ff       	call   c002035b <KeGetProcessEnvPair(Process*, int)>
c00219e2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00219e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00219ed:	83 c4 0c             	add    esp,0xc
c00219f0:	85 d2                	test   edx,edx
c00219f2:	75 23                	jne    c0021a17 <SysGetEnv(regs*)+0x86>
c00219f4:	83 ec 0c             	sub    esp,0xc
c00219f7:	50                   	push   eax
c00219f8:	e8 73 eb fd ff       	call   c0000570 <strlen>
c00219fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021a00:	89 c3                	mov    ebx,eax
c0021a02:	e8 69 eb fd ff       	call   c0000570 <strlen>
c0021a07:	83 c4 10             	add    esp,0x10
c0021a0a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021a0e:	83 c4 10             	add    esp,0x10
c0021a11:	31 d2                	xor    edx,edx
c0021a13:	5b                   	pop    ebx
c0021a14:	5e                   	pop    esi
c0021a15:	5f                   	pop    edi
c0021a16:	c3                   	ret    
c0021a17:	83 ec 08             	sub    esp,0x8
c0021a1a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a1d:	50                   	push   eax
c0021a1e:	56                   	push   esi
c0021a1f:	e8 1c ec fd ff       	call   c0000640 <strcpy>
c0021a24:	58                   	pop    eax
c0021a25:	5a                   	pop    edx
c0021a26:	68 fe 2c 03 c0       	push   0xc0032cfe
c0021a2b:	56                   	push   esi
c0021a2c:	e8 0f ee fd ff       	call   c0000840 <strcat>
c0021a31:	59                   	pop    ecx
c0021a32:	5b                   	pop    ebx
c0021a33:	57                   	push   edi
c0021a34:	56                   	push   esi
c0021a35:	e8 06 ee fd ff       	call   c0000840 <strcat>
c0021a3a:	83 c4 10             	add    esp,0x10
c0021a3d:	e9 78 ff ff ff       	jmp    c00219ba <SysGetEnv(regs*)+0x29>

c0021a42 <SysSetFatAttrib(regs*)>:
c0021a42:	57                   	push   edi
c0021a43:	56                   	push   esi
c0021a44:	53                   	push   ebx
c0021a45:	83 ec 1c             	sub    esp,0x1c
c0021a48:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a4c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021a4f:	68 14 01 00 00       	push   0x114
c0021a54:	e8 9d 4b ff ff       	call   c00165f6 <malloc>
c0021a59:	83 c4 0c             	add    esp,0xc
c0021a5c:	89 c3                	mov    ebx,eax
c0021a5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021a63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021a66:	50                   	push   eax
c0021a67:	57                   	push   edi
c0021a68:	53                   	push   ebx
c0021a69:	e8 1e 8c ff ff       	call   c001a68c <File::File(char const*, Process*)>
c0021a6e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021a71:	83 c4 0c             	add    esp,0xc
c0021a74:	0f b6 d4             	movzx  edx,ah
c0021a77:	0f b6 c0             	movzx  eax,al
c0021a7a:	52                   	push   edx
c0021a7b:	50                   	push   eax
c0021a7c:	53                   	push   ebx
c0021a7d:	e8 90 8e ff ff       	call   c001a912 <File::chfatattr(unsigned char, unsigned char)>
c0021a82:	83 c4 10             	add    esp,0x10
c0021a85:	85 db                	test   ebx,ebx
c0021a87:	74 14                	je     c0021a9d <SysSetFatAttrib(regs*)+0x5b>
c0021a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021a8d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021a8f:	83 ec 0c             	sub    esp,0xc
c0021a92:	53                   	push   ebx
c0021a93:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021a96:	83 c4 10             	add    esp,0x10
c0021a99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a9d:	85 c0                	test   eax,eax
c0021a9f:	0f 95 c0             	setne  al
c0021aa2:	31 d2                	xor    edx,edx
c0021aa4:	0f b6 c0             	movzx  eax,al
c0021aa7:	f7 d8                	neg    eax
c0021aa9:	83 d2 00             	adc    edx,0x0
c0021aac:	83 c4 10             	add    esp,0x10
c0021aaf:	f7 da                	neg    edx
c0021ab1:	5b                   	pop    ebx
c0021ab2:	5e                   	pop    esi
c0021ab3:	5f                   	pop    edi
c0021ab4:	c3                   	ret    

c0021ab5 <SysPipe(regs*)>:
c0021ab5:	57                   	push   edi
c0021ab6:	56                   	push   esi
c0021ab7:	53                   	push   ebx
c0021ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021ac2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021ac5:	6a 20                	push   0x20
c0021ac7:	e8 2a 4b ff ff       	call   c00165f6 <malloc>
c0021acc:	89 c3                	mov    ebx,eax
c0021ace:	58                   	pop    eax
c0021acf:	5a                   	pop    edx
c0021ad0:	68 00 50 00 00       	push   0x5000
c0021ad5:	53                   	push   ebx
c0021ad6:	e8 8d 54 ff ff       	call   c0016f68 <Pipe::Pipe(int)>
c0021adb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021ade:	e8 13 62 ff ff       	call   c0017cf6 <UnixFile::getFileDescriptor()>
c0021ae3:	89 07                	mov    DWORD PTR [edi],eax
c0021ae5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021ae8:	e8 09 62 ff ff       	call   c0017cf6 <UnixFile::getFileDescriptor()>
c0021aed:	83 c4 10             	add    esp,0x10
c0021af0:	89 06                	mov    DWORD PTR [esi],eax
c0021af2:	31 d2                	xor    edx,edx
c0021af4:	5b                   	pop    ebx
c0021af5:	31 c0                	xor    eax,eax
c0021af7:	5e                   	pop    esi
c0021af8:	5f                   	pop    edi
c0021af9:	c3                   	ret    

c0021afa <SysGetUnixTime(regs*)>:
c0021afa:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021aff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021b05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b09:	e9 4c 95 ff ff       	jmp    c001b05a <Clock::timeInSecondsLocal()>

c0021b0e <string_ends_with(char const*, char const*)>:
c0021b0e:	57                   	push   edi
c0021b0f:	56                   	push   esi
c0021b10:	53                   	push   ebx
c0021b11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021b15:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021b19:	83 ec 0c             	sub    esp,0xc
c0021b1c:	53                   	push   ebx
c0021b1d:	e8 4e ea fd ff       	call   c0000570 <strlen>
c0021b22:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021b25:	89 c6                	mov    esi,eax
c0021b27:	e8 44 ea fd ff       	call   c0000570 <strlen>
c0021b2c:	83 c4 10             	add    esp,0x10
c0021b2f:	39 c6                	cmp    esi,eax
c0021b31:	7d 06                	jge    c0021b39 <string_ends_with(char const*, char const*)+0x2b>
c0021b33:	5b                   	pop    ebx
c0021b34:	31 c0                	xor    eax,eax
c0021b36:	5e                   	pop    esi
c0021b37:	5f                   	pop    edi
c0021b38:	c3                   	ret    
c0021b39:	83 ec 08             	sub    esp,0x8
c0021b3c:	29 c6                	sub    esi,eax
c0021b3e:	57                   	push   edi
c0021b3f:	01 f3                	add    ebx,esi
c0021b41:	53                   	push   ebx
c0021b42:	e8 09 ec fd ff       	call   c0000750 <strcmp>
c0021b47:	83 c4 10             	add    esp,0x10
c0021b4a:	85 c0                	test   eax,eax
c0021b4c:	5b                   	pop    ebx
c0021b4d:	0f 94 c0             	sete   al
c0021b50:	5e                   	pop    esi
c0021b51:	0f b6 c0             	movzx  eax,al
c0021b54:	5f                   	pop    edi
c0021b55:	c3                   	ret    

c0021b56 <SysOpen(regs*)>:
c0021b56:	56                   	push   esi
c0021b57:	53                   	push   ebx
c0021b58:	81 ec 04 01 00 00    	sub    esp,0x104
c0021b5e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021b65:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021b68:	85 c0                	test   eax,eax
c0021b6a:	0f 84 bc 01 00 00    	je     c0021d2c <SysOpen(regs*)+0x1d6>
c0021b70:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021b73:	85 c0                	test   eax,eax
c0021b75:	0f 84 b1 01 00 00    	je     c0021d2c <SysOpen(regs*)+0x1d6>
c0021b7b:	6a 00                	push   0x0
c0021b7d:	68 00 2d 03 c0       	push   0xc0032d00
c0021b82:	50                   	push   eax
c0021b83:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021b87:	56                   	push   esi
c0021b88:	e8 07 88 ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021b90:	e8 db e9 fd ff       	call   c0000570 <strlen>
c0021b95:	83 c4 10             	add    esp,0x10
c0021b98:	83 e8 01             	sub    eax,0x1
c0021b9b:	74 21                	je     c0021bbe <SysOpen(regs*)+0x68>
c0021b9d:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021ba1:	eb 12                	jmp    c0021bb5 <SysOpen(regs*)+0x5f>
c0021ba3:	83 fa 3a             	cmp    edx,0x3a
c0021ba6:	74 12                	je     c0021bba <SysOpen(regs*)+0x64>
c0021ba8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021bac:	83 e8 01             	sub    eax,0x1
c0021baf:	74 0d                	je     c0021bbe <SysOpen(regs*)+0x68>
c0021bb1:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021bb5:	83 fa 2e             	cmp    edx,0x2e
c0021bb8:	75 e9                	jne    c0021ba3 <SysOpen(regs*)+0x4d>
c0021bba:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021bbe:	83 ec 08             	sub    esp,0x8
c0021bc1:	68 04 2d 03 c0       	push   0xc0032d04
c0021bc6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021bc9:	50                   	push   eax
c0021bca:	e8 3f ff ff ff       	call   c0021b0e <string_ends_with(char const*, char const*)>
c0021bcf:	83 c4 10             	add    esp,0x10
c0021bd2:	85 c0                	test   eax,eax
c0021bd4:	74 1d                	je     c0021bf3 <SysOpen(regs*)+0x9d>
c0021bd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021bd9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021bdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021be6:	81 c4 04 01 00 00    	add    esp,0x104
c0021bec:	31 c0                	xor    eax,eax
c0021bee:	31 d2                	xor    edx,edx
c0021bf0:	5b                   	pop    ebx
c0021bf1:	5e                   	pop    esi
c0021bf2:	c3                   	ret    
c0021bf3:	83 ec 08             	sub    esp,0x8
c0021bf6:	68 09 2d 03 c0       	push   0xc0032d09
c0021bfb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021bfe:	50                   	push   eax
c0021bff:	e8 0a ff ff ff       	call   c0021b0e <string_ends_with(char const*, char const*)>
c0021c04:	83 c4 10             	add    esp,0x10
c0021c07:	85 c0                	test   eax,eax
c0021c09:	75 cb                	jne    c0021bd6 <SysOpen(regs*)+0x80>
c0021c0b:	83 ec 08             	sub    esp,0x8
c0021c0e:	68 05 2d 03 c0       	push   0xc0032d05
c0021c13:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c16:	50                   	push   eax
c0021c17:	e8 34 eb fd ff       	call   c0000750 <strcmp>
c0021c1c:	83 c4 10             	add    esp,0x10
c0021c1f:	85 c0                	test   eax,eax
c0021c21:	74 b3                	je     c0021bd6 <SysOpen(regs*)+0x80>
c0021c23:	83 ec 08             	sub    esp,0x8
c0021c26:	68 04 2d 03 c0       	push   0xc0032d04
c0021c2b:	56                   	push   esi
c0021c2c:	e8 dd fe ff ff       	call   c0021b0e <string_ends_with(char const*, char const*)>
c0021c31:	83 c4 10             	add    esp,0x10
c0021c34:	85 c0                	test   eax,eax
c0021c36:	75 9e                	jne    c0021bd6 <SysOpen(regs*)+0x80>
c0021c38:	83 ec 08             	sub    esp,0x8
c0021c3b:	68 0e 2d 03 c0       	push   0xc0032d0e
c0021c40:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c43:	50                   	push   eax
c0021c44:	e8 c5 fe ff ff       	call   c0021b0e <string_ends_with(char const*, char const*)>
c0021c49:	83 c4 10             	add    esp,0x10
c0021c4c:	85 c0                	test   eax,eax
c0021c4e:	0f 85 eb 00 00 00    	jne    c0021d3f <SysOpen(regs*)+0x1e9>
c0021c54:	83 ec 08             	sub    esp,0x8
c0021c57:	68 13 2d 03 c0       	push   0xc0032d13
c0021c5c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c5f:	50                   	push   eax
c0021c60:	e8 a9 fe ff ff       	call   c0021b0e <string_ends_with(char const*, char const*)>
c0021c65:	83 c4 10             	add    esp,0x10
c0021c68:	85 c0                	test   eax,eax
c0021c6a:	0f 85 cf 00 00 00    	jne    c0021d3f <SysOpen(regs*)+0x1e9>
c0021c70:	83 ec 08             	sub    esp,0x8
c0021c73:	68 0f 2d 03 c0       	push   0xc0032d0f
c0021c78:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021c7b:	51                   	push   ecx
c0021c7c:	e8 cf ea fd ff       	call   c0000750 <strcmp>
c0021c81:	83 c4 10             	add    esp,0x10
c0021c84:	85 c0                	test   eax,eax
c0021c86:	0f 84 b3 00 00 00    	je     c0021d3f <SysOpen(regs*)+0x1e9>
c0021c8c:	83 ec 08             	sub    esp,0x8
c0021c8f:	68 0e 2d 03 c0       	push   0xc0032d0e
c0021c94:	56                   	push   esi
c0021c95:	e8 74 fe ff ff       	call   c0021b0e <string_ends_with(char const*, char const*)>
c0021c9a:	83 c4 10             	add    esp,0x10
c0021c9d:	85 c0                	test   eax,eax
c0021c9f:	0f 85 9a 00 00 00    	jne    c0021d3f <SysOpen(regs*)+0x1e9>
c0021ca5:	83 ec 0c             	sub    esp,0xc
c0021ca8:	68 14 01 00 00       	push   0x114
c0021cad:	e8 44 49 ff ff       	call   c00165f6 <malloc>
c0021cb2:	83 c4 0c             	add    esp,0xc
c0021cb5:	89 c6                	mov    esi,eax
c0021cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021cbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021cbf:	50                   	push   eax
c0021cc0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021cc3:	52                   	push   edx
c0021cc4:	56                   	push   esi
c0021cc5:	e8 c2 89 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c0021cca:	83 c4 10             	add    esp,0x10
c0021ccd:	85 f6                	test   esi,esi
c0021ccf:	74 5b                	je     c0021d2c <SysOpen(regs*)+0x1d6>
c0021cd1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021cd4:	0f b6 c2             	movzx  eax,dl
c0021cd7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021cda:	89 d0                	mov    eax,edx
c0021cdc:	83 e0 01             	and    eax,0x1
c0021cdf:	f6 c2 02             	test   dl,0x2
c0021ce2:	74 03                	je     c0021ce7 <SysOpen(regs*)+0x191>
c0021ce4:	83 c8 02             	or     eax,0x2
c0021ce7:	f6 c2 04             	test   dl,0x4
c0021cea:	74 03                	je     c0021cef <SysOpen(regs*)+0x199>
c0021cec:	83 c8 04             	or     eax,0x4
c0021cef:	f6 c2 08             	test   dl,0x8
c0021cf2:	74 03                	je     c0021cf7 <SysOpen(regs*)+0x1a1>
c0021cf4:	83 c8 0a             	or     eax,0xa
c0021cf7:	80 e2 10             	and    dl,0x10
c0021cfa:	74 03                	je     c0021cff <SysOpen(regs*)+0x1a9>
c0021cfc:	83 c8 12             	or     eax,0x12
c0021cff:	83 ec 08             	sub    esp,0x8
c0021d02:	50                   	push   eax
c0021d03:	56                   	push   esi
c0021d04:	e8 a1 89 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0021d09:	83 c4 10             	add    esp,0x10
c0021d0c:	85 c0                	test   eax,eax
c0021d0e:	75 1c                	jne    c0021d2c <SysOpen(regs*)+0x1d6>
c0021d10:	83 ec 0c             	sub    esp,0xc
c0021d13:	56                   	push   esi
c0021d14:	e8 dd 5f ff ff       	call   c0017cf6 <UnixFile::getFileDescriptor()>
c0021d19:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021d1c:	83 c4 10             	add    esp,0x10
c0021d1f:	89 02                	mov    DWORD PTR [edx],eax
c0021d21:	c1 f8 1f             	sar    eax,0x1f
c0021d24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021d27:	e9 ba fe ff ff       	jmp    c0021be6 <SysOpen(regs*)+0x90>
c0021d2c:	81 c4 04 01 00 00    	add    esp,0x104
c0021d32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021d37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021d3c:	5b                   	pop    ebx
c0021d3d:	5e                   	pop    esi
c0021d3e:	c3                   	ret    
c0021d3f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021d42:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021d48:	e9 92 fe ff ff       	jmp    c0021bdf <SysOpen(regs*)+0x89>

c0021d4d <KeSystemCall(regs*, void*)>:
c0021d4d:	53                   	push   ebx
c0021d4e:	83 ec 08             	sub    esp,0x8
c0021d51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d55:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021d58:	83 f8 3e             	cmp    eax,0x3e
c0021d5b:	77 16                	ja     c0021d73 <KeSystemCall(regs*, void*)+0x26>
c0021d5d:	8b 14 85 60 45 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbaa0]
c0021d64:	85 d2                	test   edx,edx
c0021d66:	74 0b                	je     c0021d73 <KeSystemCall(regs*, void*)+0x26>
c0021d68:	83 ec 0c             	sub    esp,0xc
c0021d6b:	53                   	push   ebx
c0021d6c:	ff d2                	call   edx
c0021d6e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021d71:	eb 0d                	jmp    c0021d80 <KeSystemCall(regs*, void*)+0x33>
c0021d73:	52                   	push   edx
c0021d74:	52                   	push   edx
c0021d75:	50                   	push   eax
c0021d76:	68 18 2d 03 c0       	push   0xc0032d18
c0021d7b:	e8 05 77 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0021d80:	83 c4 10             	add    esp,0x10
c0021d83:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021d88:	31 d2                	xor    edx,edx
c0021d8a:	83 c4 08             	add    esp,0x8
c0021d8d:	5b                   	pop    ebx
c0021d8e:	c3                   	ret    
c0021d8f:	90                   	nop

c0021d90 <KeSwitchEndian16(unsigned short)>:
c0021d90:	83 ec 04             	sub    esp,0x4
c0021d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d97:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021d9b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021d9f:	c1 f8 08             	sar    eax,0x8
c0021da2:	89 c2                	mov    edx,eax
c0021da4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021da8:	c1 e0 08             	shl    eax,0x8
c0021dab:	09 d0                	or     eax,edx
c0021dad:	83 c4 04             	add    esp,0x4
c0021db0:	c3                   	ret    
c0021db1:	8d 76 00             	lea    esi,[esi+0x0]

c0021db4 <KeSwitchEndian32(unsigned int)>:
c0021db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021db8:	c1 e8 18             	shr    eax,0x18
c0021dbb:	89 c2                	mov    edx,eax
c0021dbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dc1:	c1 e0 08             	shl    eax,0x8
c0021dc4:	25 00 00 ff 00       	and    eax,0xff0000
c0021dc9:	09 c2                	or     edx,eax
c0021dcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dcf:	c1 e8 08             	shr    eax,0x8
c0021dd2:	25 00 ff 00 00       	and    eax,0xff00
c0021dd7:	09 c2                	or     edx,eax
c0021dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ddd:	c1 e0 18             	shl    eax,0x18
c0021de0:	09 d0                	or     eax,edx
c0021de2:	c3                   	ret    
c0021de3:	90                   	nop

c0021de4 <EthernetCRC32(unsigned char*, int)>:
c0021de4:	83 ec 10             	sub    esp,0x10
c0021de7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021dec:	75 0a                	jne    c0021df8 <EthernetCRC32(unsigned char*, int)+0x14>
c0021dee:	b8 00 00 00 00       	mov    eax,0x0
c0021df3:	e9 8c 00 00 00       	jmp    c0021e84 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021df8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021dfd:	7f 09                	jg     c0021e08 <EthernetCRC32(unsigned char*, int)+0x24>
c0021dff:	b8 00 00 00 00       	mov    eax,0x0
c0021e04:	eb 7e                	jmp    c0021e84 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021e06:	66 90                	xchg   ax,ax
c0021e08:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021e10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021e18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e1c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021e20:	7d 5a                	jge    c0021e7c <EthernetCRC32(unsigned char*, int)+0x98>
c0021e22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e2a:	01 d0                	add    eax,edx
c0021e2c:	8a 00                	mov    al,BYTE PTR [eax]
c0021e2e:	0f b6 c0             	movzx  eax,al
c0021e31:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021e35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0021e40:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021e45:	7f 2d                	jg     c0021e74 <EthernetCRC32(unsigned char*, int)+0x90>
c0021e47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e4b:	83 e0 01             	and    eax,0x1
c0021e4e:	74 10                	je     c0021e60 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e54:	d1 e8                	shr    eax,1
c0021e56:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021e5b:	eb 0b                	jmp    c0021e68 <EthernetCRC32(unsigned char*, int)+0x84>
c0021e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0021e60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e64:	d1 e8                	shr    eax,1
c0021e66:	66 90                	xchg   ax,ax
c0021e68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021e6c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021e71:	eb cd                	jmp    c0021e40 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021e73:	90                   	nop
c0021e74:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021e79:	eb 9d                	jmp    c0021e18 <EthernetCRC32(unsigned char*, int)+0x34>
c0021e7b:	90                   	nop
c0021e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e80:	f7 d0                	not    eax
c0021e82:	66 90                	xchg   ax,ax
c0021e84:	83 c4 10             	add    esp,0x10
c0021e87:	c3                   	ret    

c0021e88 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021e88:	83 ec 2c             	sub    esp,0x2c
c0021e8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e8f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021e94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021e98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021e9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ea0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021ea3:	0f b7 c0             	movzx  eax,ax
c0021ea6:	3d 06 08 00 00       	cmp    eax,0x806
c0021eab:	75 13                	jne    c0021ec0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021ead:	83 ec 0c             	sub    esp,0xc
c0021eb0:	68 2c 2d 03 c0       	push   0xc0032d2c
c0021eb5:	e8 cb 75 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0021eba:	83 c4 10             	add    esp,0x10
c0021ebd:	eb 25                	jmp    c0021ee4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021ebf:	90                   	nop
c0021ec0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ec4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021ec7:	0f b7 c0             	movzx  eax,ax
c0021eca:	3d 00 08 00 00       	cmp    eax,0x800
c0021ecf:	75 13                	jne    c0021ee4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021ed1:	83 ec 0c             	sub    esp,0xc
c0021ed4:	68 42 2d 03 c0       	push   0xc0032d42
c0021ed9:	e8 a7 75 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0021ede:	83 c4 10             	add    esp,0x10
c0021ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0021ee4:	90                   	nop
c0021ee5:	83 c4 2c             	add    esp,0x2c
c0021ee8:	c3                   	ret    
c0021ee9:	66 90                	xchg   ax,ax
c0021eeb:	90                   	nop

c0021eec <KeNetCreateSemaphore>:
c0021eec:	53                   	push   ebx
c0021eed:	83 ec 18             	sub    esp,0x18
c0021ef0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021ef8:	83 ec 0c             	sub    esp,0xc
c0021efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021eff:	e8 f2 46 ff ff       	call   c00165f6 <malloc>
c0021f04:	83 c4 10             	add    esp,0x10
c0021f07:	89 c3                	mov    ebx,eax
c0021f09:	83 ec 08             	sub    esp,0x8
c0021f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f10:	53                   	push   ebx
c0021f11:	e8 32 e9 ff ff       	call   c0020848 <Semaphore::Semaphore(int)>
c0021f16:	83 c4 10             	add    esp,0x10
c0021f19:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021f1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f25:	89 10                	mov    DWORD PTR [eax],edx
c0021f27:	90                   	nop
c0021f28:	83 c4 18             	add    esp,0x18
c0021f2b:	5b                   	pop    ebx
c0021f2c:	c3                   	ret    
c0021f2d:	8d 76 00             	lea    esi,[esi+0x0]

c0021f30 <KeNetFreeSemaphore>:
c0021f30:	83 ec 0c             	sub    esp,0xc
c0021f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f37:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f39:	83 ec 08             	sub    esp,0x8
c0021f3c:	6a 10                	push   0x10
c0021f3e:	50                   	push   eax
c0021f3f:	e8 14 74 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c0021f44:	83 c4 10             	add    esp,0x10
c0021f47:	90                   	nop
c0021f48:	83 c4 0c             	add    esp,0xc
c0021f4b:	c3                   	ret    

c0021f4c <KeNetSignalSemaphore>:
c0021f4c:	83 ec 0c             	sub    esp,0xc
c0021f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f53:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f55:	83 ec 0c             	sub    esp,0xc
c0021f58:	50                   	push   eax
c0021f59:	e8 4a ec ff ff       	call   c0020ba8 <Semaphore::release()>
c0021f5e:	83 c4 10             	add    esp,0x10
c0021f61:	90                   	nop
c0021f62:	83 c4 0c             	add    esp,0xc
c0021f65:	c3                   	ret    
c0021f66:	66 90                	xchg   ax,ax

c0021f68 <KeNetWaitSemaphore>:
c0021f68:	83 ec 0c             	sub    esp,0xc
c0021f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f71:	83 ec 08             	sub    esp,0x8
c0021f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f78:	50                   	push   eax
c0021f79:	e8 66 ea ff ff       	call   c00209e4 <Semaphore::acquire(int)>
c0021f7e:	83 c4 10             	add    esp,0x10
c0021f81:	83 c4 0c             	add    esp,0xc
c0021f84:	c3                   	ret    
c0021f85:	8d 76 00             	lea    esi,[esi+0x0]

c0021f88 <KeNetCreateThread>:
c0021f88:	83 ec 0c             	sub    esp,0xc
c0021f8b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021f90:	68 80 00 00 00       	push   0x80
c0021f95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021f99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021f9d:	50                   	push   eax
c0021f9e:	e8 c1 32 00 00       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c0021fa3:	83 c4 10             	add    esp,0x10
c0021fa6:	90                   	nop
c0021fa7:	83 c4 0c             	add    esp,0xc
c0021faa:	c3                   	ret    
c0021fab:	90                   	nop

c0021fac <KeCPanic>:
c0021fac:	83 ec 0c             	sub    esp,0xc
c0021faf:	83 ec 0c             	sub    esp,0xc
c0021fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fb6:	e8 e3 e4 ff ff       	call   c002049e <KePanic(char const*)>
c0021fbb:	83 c4 10             	add    esp,0x10
c0021fbe:	90                   	nop
c0021fbf:	83 c4 0c             	add    esp,0xc
c0021fc2:	c3                   	ret    
c0021fc3:	90                   	nop

c0021fc4 <KeCPuts>:
c0021fc4:	83 ec 0c             	sub    esp,0xc
c0021fc7:	83 ec 08             	sub    esp,0x8
c0021fca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021fce:	68 f6 33 03 c0       	push   0xc00333f6
c0021fd3:	e8 ad 74 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0021fd8:	83 c4 10             	add    esp,0x10
c0021fdb:	90                   	nop
c0021fdc:	83 c4 0c             	add    esp,0xc
c0021fdf:	c3                   	ret    

c0021fe0 <CmOpen(char const*)>:
c0021fe0:	57                   	push   edi
c0021fe1:	56                   	push   esi
c0021fe2:	53                   	push   ebx
c0021fe3:	83 ec 1c             	sub    esp,0x1c
c0021fe6:	6a 30                	push   0x30
c0021fe8:	e8 09 46 ff ff       	call   c00165f6 <malloc>
c0021fed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021ff4:	89 c3                	mov    ebx,eax
c0021ff6:	e8 fb 45 ff ff       	call   c00165f6 <malloc>
c0021ffb:	83 c4 0c             	add    esp,0xc
c0021ffe:	89 c6                	mov    esi,eax
c0022000:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022006:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002200a:	50                   	push   eax
c002200b:	e8 7c 86 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c0022010:	83 c4 0c             	add    esp,0xc
c0022013:	89 33                	mov    DWORD PTR [ebx],esi
c0022015:	8d 44 24 07          	lea    eax,[esp+0x7]
c0022019:	50                   	push   eax
c002201a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002201e:	50                   	push   eax
c002201f:	56                   	push   esi
c0022020:	e8 87 89 ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c0022025:	5a                   	pop    edx
c0022026:	59                   	pop    ecx
c0022027:	6a 01                	push   0x1
c0022029:	ff 33                	push   DWORD PTR [ebx]
c002202b:	e8 7a 86 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0022030:	5e                   	pop    esi
c0022031:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022035:	e8 bc 45 ff ff       	call   c00165f6 <malloc>
c002203a:	5a                   	pop    edx
c002203b:	89 c7                	mov    edi,eax
c002203d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0022041:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022043:	8b 10                	mov    edx,DWORD PTR [eax]
c0022045:	56                   	push   esi
c0022046:	57                   	push   edi
c0022047:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002204b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002204f:	50                   	push   eax
c0022050:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022053:	83 c4 14             	add    esp,0x14
c0022056:	ff 33                	push   DWORD PTR [ebx]
c0022058:	e8 ab 86 ff ff       	call   c001a708 <File::close()>
c002205d:	59                   	pop    ecx
c002205e:	58                   	pop    eax
c002205f:	6a 13                	push   0x13
c0022061:	ff 33                	push   DWORD PTR [ebx]
c0022063:	e8 42 86 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0022068:	8b 03                	mov    eax,DWORD PTR [ebx]
c002206a:	8b 10                	mov    edx,DWORD PTR [eax]
c002206c:	89 34 24             	mov    DWORD PTR [esp],esi
c002206f:	57                   	push   edi
c0022070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022074:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022078:	50                   	push   eax
c0022079:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002207c:	83 c4 14             	add    esp,0x14
c002207f:	57                   	push   edi
c0022080:	e8 81 45 ff ff       	call   c0016606 <free>
c0022085:	83 c4 10             	add    esp,0x10
c0022088:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c002208b:	75 10                	jne    c002209d <CmOpen(char const*)+0xbd>
c002208d:	83 ec 0c             	sub    esp,0xc
c0022090:	68 57 2d 03 c0       	push   0xc0032d57
c0022095:	e8 04 e4 ff ff       	call   c002049e <KePanic(char const*)>
c002209a:	83 c4 10             	add    esp,0x10
c002209d:	8d 7b 05             	lea    edi,[ebx+0x5]
c00220a0:	50                   	push   eax
c00220a1:	6a 00                	push   0x0
c00220a3:	6a 00                	push   0x0
c00220a5:	ff 33                	push   DWORD PTR [ebx]
c00220a7:	e8 bc 86 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c00220ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00220b0:	89 34 24             	mov    DWORD PTR [esp],esi
c00220b3:	57                   	push   edi
c00220b4:	6a 00                	push   0x0
c00220b6:	6a 2b                	push   0x2b
c00220b8:	50                   	push   eax
c00220b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00220bc:	83 c4 1c             	add    esp,0x1c
c00220bf:	6a 00                	push   0x0
c00220c1:	6a 00                	push   0x0
c00220c3:	ff 33                	push   DWORD PTR [ebx]
c00220c5:	e8 9e 86 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c00220ca:	83 c4 0c             	add    esp,0xc
c00220cd:	6a 08                	push   0x8
c00220cf:	68 68 2d 03 c0       	push   0xc0032d68
c00220d4:	57                   	push   edi
c00220d5:	e8 a6 e2 fd ff       	call   c0000380 <memcmp>
c00220da:	83 c4 10             	add    esp,0x10
c00220dd:	85 c0                	test   eax,eax
c00220df:	74 10                	je     c00220f1 <CmOpen(char const*)+0x111>
c00220e1:	83 ec 0c             	sub    esp,0xc
c00220e4:	68 71 2d 03 c0       	push   0xc0032d71
c00220e9:	e8 b0 e3 ff ff       	call   c002049e <KePanic(char const*)>
c00220ee:	83 c4 10             	add    esp,0x10
c00220f1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00220f5:	89 d8                	mov    eax,ebx
c00220f7:	83 c4 10             	add    esp,0x10
c00220fa:	5b                   	pop    ebx
c00220fb:	5e                   	pop    esi
c00220fc:	5f                   	pop    edi
c00220fd:	c3                   	ret    

c00220fe <CmClose(Reghive_Tag*)>:
c00220fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022102:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022106:	74 0b                	je     c0022113 <CmClose(Reghive_Tag*)+0x15>
c0022108:	8b 00                	mov    eax,DWORD PTR [eax]
c002210a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002210e:	e9 f5 85 ff ff       	jmp    c001a708 <File::close()>
c0022113:	c3                   	ret    

c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0022114:	53                   	push   ebx
c0022115:	83 ec 18             	sub    esp,0x18
c0022118:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002211c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022120:	74 29                	je     c002214b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022122:	50                   	push   eax
c0022123:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022128:	99                   	cdq    
c0022129:	52                   	push   edx
c002212a:	50                   	push   eax
c002212b:	ff 33                	push   DWORD PTR [ebx]
c002212d:	e8 36 86 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0022132:	5a                   	pop    edx
c0022133:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022135:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022139:	8b 10                	mov    edx,DWORD PTR [eax]
c002213b:	51                   	push   ecx
c002213c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022140:	6a 00                	push   0x0
c0022142:	6a 2b                	push   0x2b
c0022144:	50                   	push   eax
c0022145:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022148:	83 c4 20             	add    esp,0x20
c002214b:	83 c4 18             	add    esp,0x18
c002214e:	5b                   	pop    ebx
c002214f:	c3                   	ret    

c0022150 <CmGetString(Reghive_Tag*, int, char*)>:
c0022150:	55                   	push   ebp
c0022151:	57                   	push   edi
c0022152:	56                   	push   esi
c0022153:	53                   	push   ebx
c0022154:	31 db                	xor    ebx,ebx
c0022156:	83 ec 70             	sub    esp,0x70
c0022159:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0022160:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0022164:	50                   	push   eax
c0022165:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002216c:	55                   	push   ebp
c002216d:	e8 a2 ff ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022172:	83 c4 10             	add    esp,0x10
c0022175:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c002217a:	c1 e0 08             	shl    eax,0x8
c002217d:	89 c2                	mov    edx,eax
c002217f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0022184:	09 d0                	or     eax,edx
c0022186:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c002218b:	c1 e0 08             	shl    eax,0x8
c002218e:	09 d0                	or     eax,edx
c0022190:	74 25                	je     c00221b7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0022192:	6b fb 0d             	imul   edi,ebx,0xd
c0022195:	52                   	push   edx
c0022196:	8d 54 24 39          	lea    edx,[esp+0x39]
c002219a:	52                   	push   edx
c002219b:	50                   	push   eax
c002219c:	55                   	push   ebp
c002219d:	e8 72 ff ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221a2:	8d 74 24 49          	lea    esi,[esp+0x49]
c00221a6:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00221ad:	b9 27 00 00 00       	mov    ecx,0x27
c00221b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00221b4:	83 c4 10             	add    esp,0x10
c00221b7:	83 c3 03             	add    ebx,0x3
c00221ba:	83 fb 15             	cmp    ebx,0x15
c00221bd:	75 b6                	jne    c0022175 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00221bf:	83 c4 6c             	add    esp,0x6c
c00221c2:	5b                   	pop    ebx
c00221c3:	5e                   	pop    esi
c00221c4:	5f                   	pop    edi
c00221c5:	5d                   	pop    ebp
c00221c6:	c3                   	ret    

c00221c7 <CmEnterDirectory(Reghive_Tag*, int)>:
c00221c7:	83 ec 40             	sub    esp,0x40
c00221ca:	8d 44 24 09          	lea    eax,[esp+0x9]
c00221ce:	50                   	push   eax
c00221cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00221d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00221d7:	e8 38 ff ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221dc:	83 c4 10             	add    esp,0x10
c00221df:	83 c8 ff             	or     eax,0xffffffff
c00221e2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00221e7:	75 19                	jne    c0022202 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00221e9:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00221ee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00221f3:	c1 e0 08             	shl    eax,0x8
c00221f6:	09 c2                	or     edx,eax
c00221f8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00221fd:	c1 e0 10             	shl    eax,0x10
c0022200:	09 d0                	or     eax,edx
c0022202:	83 c4 3c             	add    esp,0x3c
c0022205:	c3                   	ret    

c0022206 <CmGetNext(Reghive_Tag*, int)>:
c0022206:	83 ec 40             	sub    esp,0x40
c0022209:	8d 44 24 09          	lea    eax,[esp+0x9]
c002220d:	50                   	push   eax
c002220e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022212:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022216:	e8 f9 fe ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002221b:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0022220:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0022225:	c1 e0 08             	shl    eax,0x8
c0022228:	09 c2                	or     edx,eax
c002222a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c002222f:	83 c4 4c             	add    esp,0x4c
c0022232:	c1 e0 10             	shl    eax,0x10
c0022235:	09 d0                	or     eax,edx
c0022237:	c3                   	ret    

c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0022238:	53                   	push   ebx
c0022239:	83 ec 18             	sub    esp,0x18
c002223c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022240:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022244:	74 29                	je     c002226f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022246:	50                   	push   eax
c0022247:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c002224c:	99                   	cdq    
c002224d:	52                   	push   edx
c002224e:	50                   	push   eax
c002224f:	ff 33                	push   DWORD PTR [ebx]
c0022251:	e8 12 85 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0022256:	5a                   	pop    edx
c0022257:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022259:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002225d:	8b 10                	mov    edx,DWORD PTR [eax]
c002225f:	51                   	push   ecx
c0022260:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022264:	6a 00                	push   0x0
c0022266:	6a 2b                	push   0x2b
c0022268:	50                   	push   eax
c0022269:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002226c:	83 c4 20             	add    esp,0x20
c002226f:	83 c4 18             	add    esp,0x18
c0022272:	5b                   	pop    ebx
c0022273:	c3                   	ret    

c0022274 <CmFreeExtent(Reghive_Tag*, int)>:
c0022274:	53                   	push   ebx
c0022275:	83 ec 3c             	sub    esp,0x3c
c0022278:	6a 2b                	push   0x2b
c002227a:	6a 00                	push   0x0
c002227c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022280:	53                   	push   ebx
c0022281:	e8 6a e2 fd ff       	call   c00004f0 <memset>
c0022286:	83 c4 0c             	add    esp,0xc
c0022289:	53                   	push   ebx
c002228a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002228e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022292:	e8 a1 ff ff ff       	call   c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022297:	83 c4 48             	add    esp,0x48
c002229a:	5b                   	pop    ebx
c002229b:	c3                   	ret    

c002229c <CmUpdateHeader(Reghive_Tag*)>:
c002229c:	83 ec 0c             	sub    esp,0xc
c002229f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00222a7:	74 10                	je     c00222b9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00222a9:	52                   	push   edx
c00222aa:	8d 50 05             	lea    edx,[eax+0x5]
c00222ad:	52                   	push   edx
c00222ae:	6a 00                	push   0x0
c00222b0:	50                   	push   eax
c00222b1:	e8 82 ff ff ff       	call   c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00222b6:	83 c4 10             	add    esp,0x10
c00222b9:	83 c4 0c             	add    esp,0xc
c00222bc:	c3                   	ret    

c00222bd <CmExpand(Reghive_Tag*, int)>:
c00222bd:	57                   	push   edi
c00222be:	56                   	push   esi
c00222bf:	83 ce ff             	or     esi,0xffffffff
c00222c2:	53                   	push   ebx
c00222c3:	83 ec 30             	sub    esp,0x30
c00222c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00222ca:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00222ce:	74 5f                	je     c002232f <CmExpand(Reghive_Tag*, int)+0x72>
c00222d0:	31 d2                	xor    edx,edx
c00222d2:	31 f6                	xor    esi,esi
c00222d4:	50                   	push   eax
c00222d5:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00222d9:	52                   	push   edx
c00222da:	50                   	push   eax
c00222db:	ff 33                	push   DWORD PTR [ebx]
c00222dd:	e8 86 84 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c00222e2:	83 c4 0c             	add    esp,0xc
c00222e5:	6a 2b                	push   0x2b
c00222e7:	6a 00                	push   0x0
c00222e9:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00222ed:	57                   	push   edi
c00222ee:	e8 fd e1 fd ff       	call   c00004f0 <memset>
c00222f3:	83 c4 10             	add    esp,0x10
c00222f6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00222fa:	7d 1b                	jge    c0022317 <CmExpand(Reghive_Tag*, int)+0x5a>
c00222fc:	83 ec 0c             	sub    esp,0xc
c00222ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022301:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0022305:	8b 10                	mov    edx,DWORD PTR [eax]
c0022307:	46                   	inc    esi
c0022308:	51                   	push   ecx
c0022309:	57                   	push   edi
c002230a:	6a 00                	push   0x0
c002230c:	6a 2b                	push   0x2b
c002230e:	50                   	push   eax
c002230f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022312:	83 c4 20             	add    esp,0x20
c0022315:	eb df                	jmp    c00222f6 <CmExpand(Reghive_Tag*, int)+0x39>
c0022317:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c002231b:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c002231e:	83 ec 0c             	sub    esp,0xc
c0022321:	01 f2                	add    edx,esi
c0022323:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0022326:	53                   	push   ebx
c0022327:	e8 70 ff ff ff       	call   c002229c <CmUpdateHeader(Reghive_Tag*)>
c002232c:	83 c4 10             	add    esp,0x10
c002232f:	83 c4 30             	add    esp,0x30
c0022332:	89 f0                	mov    eax,esi
c0022334:	5b                   	pop    ebx
c0022335:	5e                   	pop    esi
c0022336:	5f                   	pop    edi
c0022337:	c3                   	ret    

c0022338 <CmFindUnusedExtent(Reghive_Tag*)>:
c0022338:	55                   	push   ebp
c0022339:	57                   	push   edi
c002233a:	56                   	push   esi
c002233b:	53                   	push   ebx
c002233c:	83 cb ff             	or     ebx,0xffffffff
c002233f:	83 ec 1c             	sub    esp,0x1c
c0022342:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022346:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c002234a:	74 68                	je     c00223b4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002234c:	be 2b 00 00 00       	mov    esi,0x2b
c0022351:	51                   	push   ecx
c0022352:	31 ff                	xor    edi,edi
c0022354:	6a 00                	push   0x0
c0022356:	31 db                	xor    ebx,ebx
c0022358:	6a 00                	push   0x0
c002235a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002235d:	e8 06 84 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0022362:	83 c4 10             	add    esp,0x10
c0022365:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022368:	76 3b                	jbe    c00223a5 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c002236a:	83 ec 0c             	sub    esp,0xc
c002236d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022370:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022374:	8b 10                	mov    edx,DWORD PTR [eax]
c0022376:	51                   	push   ecx
c0022377:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c002237b:	51                   	push   ecx
c002237c:	6a 00                	push   0x0
c002237e:	6a 01                	push   0x1
c0022380:	50                   	push   eax
c0022381:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022384:	83 c4 20             	add    esp,0x20
c0022387:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002238c:	74 26                	je     c00223b4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002238e:	43                   	inc    ebx
c002238f:	52                   	push   edx
c0022390:	57                   	push   edi
c0022391:	56                   	push   esi
c0022392:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022395:	e8 ce 83 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c002239a:	83 c6 2b             	add    esi,0x2b
c002239d:	83 d7 00             	adc    edi,0x0
c00223a0:	83 c4 10             	add    esp,0x10
c00223a3:	eb c0                	jmp    c0022365 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00223a5:	50                   	push   eax
c00223a6:	50                   	push   eax
c00223a7:	6a 40                	push   0x40
c00223a9:	55                   	push   ebp
c00223aa:	e8 0e ff ff ff       	call   c00222bd <CmExpand(Reghive_Tag*, int)>
c00223af:	83 c4 10             	add    esp,0x10
c00223b2:	89 c3                	mov    ebx,eax
c00223b4:	83 c4 1c             	add    esp,0x1c
c00223b7:	89 d8                	mov    eax,ebx
c00223b9:	5b                   	pop    ebx
c00223ba:	5e                   	pop    esi
c00223bb:	5f                   	pop    edi
c00223bc:	5d                   	pop    ebp
c00223bd:	c3                   	ret    

c00223be <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00223be:	55                   	push   ebp
c00223bf:	57                   	push   edi
c00223c0:	56                   	push   esi
c00223c1:	53                   	push   ebx
c00223c2:	81 ec 88 00 00 00    	sub    esp,0x88
c00223c8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00223cf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00223d6:	e8 5d ff ff ff       	call   c0022338 <CmFindUnusedExtent(Reghive_Tag*)>
c00223db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223df:	83 c4 0c             	add    esp,0xc
c00223e2:	6a 2b                	push   0x2b
c00223e4:	6a 00                	push   0x0
c00223e6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00223ea:	55                   	push   ebp
c00223eb:	e8 00 e1 fd ff       	call   c00004f0 <memset>
c00223f0:	83 c4 10             	add    esp,0x10
c00223f3:	85 db                	test   ebx,ebx
c00223f5:	74 12                	je     c0022409 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00223f7:	51                   	push   ecx
c00223f8:	55                   	push   ebp
c00223f9:	53                   	push   ebx
c00223fa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022401:	e8 0e fd ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022406:	83 c4 10             	add    esp,0x10
c0022409:	8d 7c 24 45          	lea    edi,[esp+0x45]
c002240d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022414:	b9 2b 00 00 00       	mov    ecx,0x2b
c0022419:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002241b:	85 db                	test   ebx,ebx
c002241d:	74 49                	je     c0022468 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c002241f:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0022424:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0022429:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002242d:	c1 e0 08             	shl    eax,0x8
c0022430:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0022436:	09 c8                	or     eax,ecx
c0022438:	74 11                	je     c002244b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c002243a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002243e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0022442:	c1 e8 10             	shr    eax,0x10
c0022445:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022449:	eb 0f                	jmp    c002245a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c002244b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022450:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022455:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002245a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c002245e:	c1 ea 08             	shr    edx,0x8
c0022461:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0022466:	eb 0f                	jmp    c0022477 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022468:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c002246d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022472:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022477:	52                   	push   edx
c0022478:	8d 44 24 49          	lea    eax,[esp+0x49]
c002247c:	50                   	push   eax
c002247d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022481:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022488:	e8 ab fd ff ff       	call   c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002248d:	83 c4 10             	add    esp,0x10
c0022490:	85 db                	test   ebx,ebx
c0022492:	74 12                	je     c00224a6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0022494:	50                   	push   eax
c0022495:	55                   	push   ebp
c0022496:	53                   	push   ebx
c0022497:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002249e:	e8 95 fd ff ff       	call   c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224a3:	83 c4 10             	add    esp,0x10
c00224a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224aa:	83 c4 7c             	add    esp,0x7c
c00224ad:	5b                   	pop    ebx
c00224ae:	5e                   	pop    esi
c00224af:	5f                   	pop    edi
c00224b0:	5d                   	pop    ebp
c00224b1:	c3                   	ret    

c00224b2 <CmSetString(Reghive_Tag*, int, char const*)>:
c00224b2:	55                   	push   ebp
c00224b3:	57                   	push   edi
c00224b4:	56                   	push   esi
c00224b5:	53                   	push   ebx
c00224b6:	bb 27 00 00 00       	mov    ebx,0x27
c00224bb:	81 ec 88 00 00 00    	sub    esp,0x88
c00224c1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00224c8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00224cf:	e8 9c e0 fd ff       	call   c0000570 <strlen>
c00224d4:	8d 48 26             	lea    ecx,[eax+0x26]
c00224d7:	89 c8                	mov    eax,ecx
c00224d9:	99                   	cdq    
c00224da:	f7 fb                	idiv   ebx
c00224dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224e0:	83 c4 10             	add    esp,0x10
c00224e3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00224e9:	7e 10                	jle    c00224fb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00224eb:	83 ec 0c             	sub    esp,0xc
c00224ee:	68 82 2d 03 c0       	push   0xc0032d82
c00224f3:	e8 a6 df ff ff       	call   c002049e <KePanic(char const*)>
c00224f8:	83 c4 10             	add    esp,0x10
c00224fb:	31 ff                	xor    edi,edi
c00224fd:	50                   	push   eax
c00224fe:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0022502:	53                   	push   ebx
c0022503:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002250a:	56                   	push   esi
c002250b:	e8 04 fc ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022510:	83 c4 10             	add    esp,0x10
c0022513:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0022517:	89 d0                	mov    eax,edx
c0022519:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c002251d:	c1 e0 08             	shl    eax,0x8
c0022520:	09 c2                	or     edx,eax
c0022522:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0022526:	c1 e2 08             	shl    edx,0x8
c0022529:	09 c2                	or     edx,eax
c002252b:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002252f:	7e 76                	jle    c00225a7 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0022531:	85 d2                	test   edx,edx
c0022533:	75 25                	jne    c002255a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0022535:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c002253a:	8d 44 24 45          	lea    eax,[esp+0x45]
c002253e:	50                   	push   eax
c002253f:	6a 00                	push   0x0
c0022541:	6a 00                	push   0x0
c0022543:	56                   	push   esi
c0022544:	e8 75 fe ff ff       	call   c00223be <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022549:	83 c4 10             	add    esp,0x10
c002254c:	89 c2                	mov    edx,eax
c002254e:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022551:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0022554:	c1 f8 10             	sar    eax,0x10
c0022557:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c002255a:	55                   	push   ebp
c002255b:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c002255f:	55                   	push   ebp
c0022560:	52                   	push   edx
c0022561:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022565:	56                   	push   esi
c0022566:	e8 a9 fb ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002256b:	83 c4 0c             	add    esp,0xc
c002256e:	6a 27                	push   0x27
c0022570:	6a 00                	push   0x0
c0022572:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022576:	51                   	push   ecx
c0022577:	e8 74 df fd ff       	call   c00004f0 <memset>
c002257c:	83 c4 0c             	add    esp,0xc
c002257f:	6b c7 27             	imul   eax,edi,0x27
c0022582:	6a 27                	push   0x27
c0022584:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c002258b:	50                   	push   eax
c002258c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022590:	51                   	push   ecx
c0022591:	e8 ea e0 fd ff       	call   c0000680 <strncpy>
c0022596:	83 c4 0c             	add    esp,0xc
c0022599:	55                   	push   ebp
c002259a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002259e:	52                   	push   edx
c002259f:	56                   	push   esi
c00225a0:	e8 93 fc ff ff       	call   c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00225a5:	eb 19                	jmp    c00225c0 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00225a7:	85 d2                	test   edx,edx
c00225a9:	74 18                	je     c00225c3 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00225ab:	51                   	push   ecx
c00225ac:	51                   	push   ecx
c00225ad:	52                   	push   edx
c00225ae:	56                   	push   esi
c00225af:	e8 c0 fc ff ff       	call   c0022274 <CmFreeExtent(Reghive_Tag*, int)>
c00225b4:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00225b8:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00225bc:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00225c0:	83 c4 10             	add    esp,0x10
c00225c3:	47                   	inc    edi
c00225c4:	83 c3 03             	add    ebx,0x3
c00225c7:	83 ff 07             	cmp    edi,0x7
c00225ca:	0f 85 43 ff ff ff    	jne    c0022513 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00225d0:	50                   	push   eax
c00225d1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00225d5:	50                   	push   eax
c00225d6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00225dd:	56                   	push   esi
c00225de:	e8 55 fc ff ff       	call   c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00225e3:	81 c4 8c 00 00 00    	add    esp,0x8c
c00225e9:	5b                   	pop    ebx
c00225ea:	5e                   	pop    esi
c00225eb:	5f                   	pop    edi
c00225ec:	5d                   	pop    ebp
c00225ed:	c3                   	ret    

c00225ee <CmGetMatch(char*, char*, bool, bool*)>:
c00225ee:	56                   	push   esi
c00225ef:	53                   	push   ebx
c00225f0:	50                   	push   eax
c00225f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00225f5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00225fa:	74 25                	je     c0022621 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00225fc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00225ff:	31 db                	xor    ebx,ebx
c0022601:	50                   	push   eax
c0022602:	50                   	push   eax
c0022603:	8d 04 9d 60 46 03 c0 	lea    eax,[ebx*4-0x3ffcb9a0]
c002260a:	50                   	push   eax
c002260b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002260f:	e8 3c e1 fd ff       	call   c0000750 <strcmp>
c0022614:	83 c4 10             	add    esp,0x10
c0022617:	85 c0                	test   eax,eax
c0022619:	74 2e                	je     c0022649 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c002261b:	43                   	inc    ebx
c002261c:	83 fb 3f             	cmp    ebx,0x3f
c002261f:	75 e0                	jne    c0022601 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0022621:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022624:	31 db                	xor    ebx,ebx
c0022626:	8d 04 9d 60 46 03 c0 	lea    eax,[ebx*4-0x3ffcb9a0]
c002262d:	51                   	push   ecx
c002262e:	51                   	push   ecx
c002262f:	50                   	push   eax
c0022630:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022634:	e8 17 e1 fd ff       	call   c0000750 <strcmp>
c0022639:	83 c4 10             	add    esp,0x10
c002263c:	85 c0                	test   eax,eax
c002263e:	74 09                	je     c0022649 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022640:	43                   	inc    ebx
c0022641:	83 fb 3f             	cmp    ebx,0x3f
c0022644:	75 e0                	jne    c0022626 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0022646:	83 cb ff             	or     ebx,0xffffffff
c0022649:	89 d8                	mov    eax,ebx
c002264b:	5a                   	pop    edx
c002264c:	5b                   	pop    ebx
c002264d:	5e                   	pop    esi
c002264e:	c3                   	ret    

c002264f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c002264f:	55                   	push   ebp
c0022650:	31 c0                	xor    eax,eax
c0022652:	57                   	push   edi
c0022653:	56                   	push   esi
c0022654:	53                   	push   ebx
c0022655:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022659:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002265d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002265f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022663:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0022666:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002266a:	83 fd 1f             	cmp    ebp,0x1f
c002266d:	7f 0b                	jg     c002267a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c002266f:	0f b6 c2             	movzx  eax,dl
c0022672:	d3 e0                	shl    eax,cl
c0022674:	09 07                	or     DWORD PTR [edi],eax
c0022676:	b0 01                	mov    al,0x1
c0022678:	01 33                	add    DWORD PTR [ebx],esi
c002267a:	5b                   	pop    ebx
c002267b:	5e                   	pop    esi
c002267c:	5f                   	pop    edi
c002267d:	5d                   	pop    ebp
c002267e:	c3                   	ret    

c002267f <CmGetShift(unsigned int*, int*, int, bool*)>:
c002267f:	57                   	push   edi
c0022680:	56                   	push   esi
c0022681:	53                   	push   ebx
c0022682:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022686:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002268a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002268e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022692:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022694:	7c 17                	jl     c00226ad <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022696:	8b 17                	mov    edx,DWORD PTR [edi]
c0022698:	b8 01 00 00 00       	mov    eax,0x1
c002269d:	d3 e0                	shl    eax,cl
c002269f:	48                   	dec    eax
c00226a0:	21 d0                	and    eax,edx
c00226a2:	d3 ea                	shr    edx,cl
c00226a4:	89 17                	mov    DWORD PTR [edi],edx
c00226a6:	29 0b                	sub    DWORD PTR [ebx],ecx
c00226a8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00226ab:	eb 05                	jmp    c00226b2 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00226ad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00226b0:	31 c0                	xor    eax,eax
c00226b2:	5b                   	pop    ebx
c00226b3:	5e                   	pop    esi
c00226b4:	5f                   	pop    edi
c00226b5:	c3                   	ret    

c00226b6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00226b6:	83 ec 40             	sub    esp,0x40
c00226b9:	8d 44 24 09          	lea    eax,[esp+0x9]
c00226bd:	50                   	push   eax
c00226be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00226c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00226c6:	e8 49 fa ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00226cb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00226cf:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00226d3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00226d7:	89 10                	mov    DWORD PTR [eax],edx
c00226d9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00226dc:	83 c4 4c             	add    esp,0x4c
c00226df:	c3                   	ret    

c00226e0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00226e0:	55                   	push   ebp
c00226e1:	57                   	push   edi
c00226e2:	56                   	push   esi
c00226e3:	53                   	push   ebx
c00226e4:	83 ec 40             	sub    esp,0x40
c00226e7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00226eb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00226ef:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00226f3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00226f7:	53                   	push   ebx
c00226f8:	56                   	push   esi
c00226f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226fd:	e8 12 fa ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022702:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0022706:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c002270a:	83 c4 0c             	add    esp,0xc
c002270d:	53                   	push   ebx
c002270e:	56                   	push   esi
c002270f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022713:	e8 20 fb ff ff       	call   c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022718:	83 c4 4c             	add    esp,0x4c
c002271b:	5b                   	pop    ebx
c002271c:	5e                   	pop    esi
c002271d:	5f                   	pop    edi
c002271e:	5d                   	pop    ebp
c002271f:	c3                   	ret    

c0022720 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0022720:	55                   	push   ebp
c0022721:	57                   	push   edi
c0022722:	56                   	push   esi
c0022723:	31 f6                	xor    esi,esi
c0022725:	53                   	push   ebx
c0022726:	31 db                	xor    ebx,ebx
c0022728:	83 ec 40             	sub    esp,0x40
c002272b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022733:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002273b:	6a 12                	push   0x12
c002273d:	68 ee 00 00 00       	push   0xee
c0022742:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022746:	e8 a5 dd fd ff       	call   c00004f0 <memset>
c002274b:	83 c4 10             	add    esp,0x10
c002274e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022752:	6a 08                	push   0x8
c0022754:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022758:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c002275c:	50                   	push   eax
c002275d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022761:	55                   	push   ebp
c0022762:	57                   	push   edi
c0022763:	e8 e7 fe ff ff       	call   c002264f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022768:	83 c4 10             	add    esp,0x10
c002276b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002276f:	50                   	push   eax
c0022770:	6a 06                	push   0x6
c0022772:	55                   	push   ebp
c0022773:	57                   	push   edi
c0022774:	e8 06 ff ff ff       	call   c002267f <CmGetShift(unsigned int*, int*, int, bool*)>
c0022779:	83 c4 10             	add    esp,0x10
c002277c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022781:	74 07                	je     c002278a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022783:	46                   	inc    esi
c0022784:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022788:	eb e1                	jmp    c002276b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c002278a:	43                   	inc    ebx
c002278b:	83 fb 12             	cmp    ebx,0x12
c002278e:	75 c2                	jne    c0022752 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022790:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022794:	31 db                	xor    ebx,ebx
c0022796:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022799:	50                   	push   eax
c002279a:	50                   	push   eax
c002279b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00227a0:	43                   	inc    ebx
c00227a1:	8d 04 85 60 46 03 c0 	lea    eax,[eax*4-0x3ffcb9a0]
c00227a8:	50                   	push   eax
c00227a9:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00227ad:	e8 8e e0 fd ff       	call   c0000840 <strcat>
c00227b2:	83 c4 10             	add    esp,0x10
c00227b5:	83 fb 18             	cmp    ebx,0x18
c00227b8:	75 df                	jne    c0022799 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00227ba:	83 c4 3c             	add    esp,0x3c
c00227bd:	31 c0                	xor    eax,eax
c00227bf:	5b                   	pop    ebx
c00227c0:	5e                   	pop    esi
c00227c1:	5f                   	pop    edi
c00227c2:	5d                   	pop    ebp
c00227c3:	c3                   	ret    

c00227c4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00227c4:	83 ec 40             	sub    esp,0x40
c00227c7:	8d 44 24 09          	lea    eax,[esp+0x9]
c00227cb:	50                   	push   eax
c00227cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227d4:	e8 3b f9 ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227d9:	58                   	pop    eax
c00227da:	5a                   	pop    edx
c00227db:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00227df:	8d 44 24 15          	lea    eax,[esp+0x15]
c00227e3:	50                   	push   eax
c00227e4:	e8 37 ff ff ff       	call   c0022720 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00227e9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00227ee:	83 c4 4c             	add    esp,0x4c
c00227f1:	c3                   	ret    

c00227f2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00227f2:	55                   	push   ebp
c00227f3:	57                   	push   edi
c00227f4:	56                   	push   esi
c00227f5:	53                   	push   ebx
c00227f6:	31 db                	xor    ebx,ebx
c00227f8:	83 ec 70             	sub    esp,0x70
c00227fb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0022802:	6a 30                	push   0x30
c0022804:	6a 00                	push   0x0
c0022806:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c002280a:	56                   	push   esi
c002280b:	e8 e0 dc fd ff       	call   c00004f0 <memset>
c0022810:	83 c4 10             	add    esp,0x10
c0022813:	83 ec 0c             	sub    esp,0xc
c0022816:	57                   	push   edi
c0022817:	e8 54 dd fd ff       	call   c0000570 <strlen>
c002281c:	83 c4 10             	add    esp,0x10
c002281f:	39 d8                	cmp    eax,ebx
c0022821:	76 16                	jbe    c0022839 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0022823:	83 ec 0c             	sub    esp,0xc
c0022826:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c002282a:	50                   	push   eax
c002282b:	e8 00 e1 fd ff       	call   c0000930 <toupper>
c0022830:	83 c4 10             	add    esp,0x10
c0022833:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022836:	43                   	inc    ebx
c0022837:	eb da                	jmp    c0022813 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0022839:	31 f6                	xor    esi,esi
c002283b:	52                   	push   edx
c002283c:	31 ff                	xor    edi,edi
c002283e:	6a 18                	push   0x18
c0022840:	6a 3f                	push   0x3f
c0022842:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022846:	50                   	push   eax
c0022847:	e8 a4 dc fd ff       	call   c00004f0 <memset>
c002284c:	83 c4 10             	add    esp,0x10
c002284f:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0022853:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0022857:	84 c0                	test   al,al
c0022859:	0f 84 b0 00 00 00    	je     c002290f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c002285f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022863:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0022868:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c002286c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0022871:	8d 6e 01             	lea    ebp,[esi+0x1]
c0022874:	83 ec 0c             	sub    esp,0xc
c0022877:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c002287b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c002287f:	53                   	push   ebx
c0022880:	e8 eb dc fd ff       	call   c0000570 <strlen>
c0022885:	83 c4 10             	add    esp,0x10
c0022888:	85 c0                	test   eax,eax
c002288a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002288e:	74 0b                	je     c002289b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022890:	50                   	push   eax
c0022891:	6a 01                	push   0x1
c0022893:	53                   	push   ebx
c0022894:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022898:	50                   	push   eax
c0022899:	eb 0a                	jmp    c00228a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c002289b:	50                   	push   eax
c002289c:	6a 00                	push   0x0
c002289e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228a2:	50                   	push   eax
c00228a3:	6a 00                	push   0x0
c00228a5:	e8 44 fd ff ff       	call   c00225ee <CmGetMatch(char*, char*, bool, bool*)>
c00228aa:	83 c4 10             	add    esp,0x10
c00228ad:	83 f8 ff             	cmp    eax,0xffffffff
c00228b0:	75 1a                	jne    c00228cc <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00228b2:	83 ec 0c             	sub    esp,0xc
c00228b5:	68 97 2d 03 c0       	push   0xc0032d97
c00228ba:	e8 df db ff ff       	call   c002049e <KePanic(char const*)>
c00228bf:	83 c4 10             	add    esp,0x10
c00228c2:	b8 02 00 00 00       	mov    eax,0x2
c00228c7:	e9 bc 00 00 00       	jmp    c0022988 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00228cc:	83 ff 18             	cmp    edi,0x18
c00228cf:	75 1a                	jne    c00228eb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00228d1:	83 ec 0c             	sub    esp,0xc
c00228d4:	68 ac 2d 03 c0       	push   0xc0032dac
c00228d9:	e8 c0 db ff ff       	call   c002049e <KePanic(char const*)>
c00228de:	83 c4 10             	add    esp,0x10
c00228e1:	b8 01 00 00 00       	mov    eax,0x1
c00228e6:	e9 9d 00 00 00       	jmp    c0022988 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00228eb:	47                   	inc    edi
c00228ec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00228f1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00228f5:	74 02                	je     c00228f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00228f7:	89 ee                	mov    esi,ebp
c00228f9:	83 ec 0c             	sub    esp,0xc
c00228fc:	53                   	push   ebx
c00228fd:	e8 6e dc fd ff       	call   c0000570 <strlen>
c0022902:	83 c4 10             	add    esp,0x10
c0022905:	85 c0                	test   eax,eax
c0022907:	74 06                	je     c002290f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022909:	46                   	inc    esi
c002290a:	e9 40 ff ff ff       	jmp    c002284f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c002290f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022917:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002291f:	31 f6                	xor    esi,esi
c0022921:	50                   	push   eax
c0022922:	31 ff                	xor    edi,edi
c0022924:	6a 12                	push   0x12
c0022926:	68 ee 00 00 00       	push   0xee
c002292b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022932:	e8 b9 db fd ff       	call   c00004f0 <memset>
c0022937:	83 c4 10             	add    esp,0x10
c002293a:	83 fe 17             	cmp    esi,0x17
c002293d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022941:	7e 26                	jle    c0022969 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0022943:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022947:	50                   	push   eax
c0022948:	6a 08                	push   0x8
c002294a:	55                   	push   ebp
c002294b:	53                   	push   ebx
c002294c:	e8 2e fd ff ff       	call   c002267f <CmGetShift(unsigned int*, int*, int, bool*)>
c0022951:	83 c4 10             	add    esp,0x10
c0022954:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022959:	74 26                	je     c0022981 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c002295b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022962:	4e                   	dec    esi
c0022963:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022966:	47                   	inc    edi
c0022967:	eb 1c                	jmp    c0022985 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022969:	6a 06                	push   0x6
c002296b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0022970:	50                   	push   eax
c0022971:	55                   	push   ebp
c0022972:	53                   	push   ebx
c0022973:	e8 d7 fc ff ff       	call   c002264f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022978:	83 c4 10             	add    esp,0x10
c002297b:	84 c0                	test   al,al
c002297d:	75 06                	jne    c0022985 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c002297f:	eb c2                	jmp    c0022943 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0022981:	31 c0                	xor    eax,eax
c0022983:	eb 03                	jmp    c0022988 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022985:	46                   	inc    esi
c0022986:	eb b2                	jmp    c002293a <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0022988:	83 c4 6c             	add    esp,0x6c
c002298b:	5b                   	pop    ebx
c002298c:	5e                   	pop    esi
c002298d:	5f                   	pop    edi
c002298e:	5d                   	pop    ebp
c002298f:	c3                   	ret    

c0022990 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022990:	53                   	push   ebx
c0022991:	83 ec 3c             	sub    esp,0x3c
c0022994:	6a 2b                	push   0x2b
c0022996:	6a 00                	push   0x0
c0022998:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002299c:	53                   	push   ebx
c002299d:	e8 4e db fd ff       	call   c00004f0 <memset>
c00229a2:	58                   	pop    eax
c00229a3:	5a                   	pop    edx
c00229a4:	8d 44 24 11          	lea    eax,[esp+0x11]
c00229a8:	50                   	push   eax
c00229a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00229ad:	e8 40 fe ff ff       	call   c00227f2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00229b2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00229b7:	83 c4 0c             	add    esp,0xc
c00229ba:	6a 15                	push   0x15
c00229bc:	6a 00                	push   0x0
c00229be:	8d 44 24 27          	lea    eax,[esp+0x27]
c00229c2:	50                   	push   eax
c00229c3:	e8 28 db fd ff       	call   c00004f0 <memset>
c00229c8:	53                   	push   ebx
c00229c9:	6a 00                	push   0x0
c00229cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00229cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00229d3:	e8 e6 f9 ff ff       	call   c00223be <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00229d8:	83 c4 58             	add    esp,0x58
c00229db:	5b                   	pop    ebx
c00229dc:	c3                   	ret    

c00229dd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00229dd:	56                   	push   esi
c00229de:	53                   	push   ebx
c00229df:	83 ec 48             	sub    esp,0x48
c00229e2:	6a 12                	push   0x12
c00229e4:	68 ff 00 00 00       	push   0xff
c00229e9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00229ed:	56                   	push   esi
c00229ee:	e8 fd da fd ff       	call   c00004f0 <memset>
c00229f3:	5a                   	pop    edx
c00229f4:	59                   	pop    ecx
c00229f5:	56                   	push   esi
c00229f6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00229fa:	e8 f3 fd ff ff       	call   c00227f2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00229ff:	83 c4 10             	add    esp,0x10
c0022a02:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022a06:	85 db                	test   ebx,ebx
c0022a08:	74 42                	je     c0022a4c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0022a0a:	50                   	push   eax
c0022a0b:	8d 44 24 19          	lea    eax,[esp+0x19]
c0022a0f:	50                   	push   eax
c0022a10:	53                   	push   ebx
c0022a11:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a15:	e8 fa f6 ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022a1a:	83 c4 0c             	add    esp,0xc
c0022a1d:	6a 12                	push   0x12
c0022a1f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022a23:	50                   	push   eax
c0022a24:	56                   	push   esi
c0022a25:	e8 56 d9 fd ff       	call   c0000380 <memcmp>
c0022a2a:	83 c4 10             	add    esp,0x10
c0022a2d:	85 c0                	test   eax,eax
c0022a2f:	74 1e                	je     c0022a4f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022a31:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022a36:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022a3b:	c1 e3 08             	shl    ebx,0x8
c0022a3e:	09 d8                	or     eax,ebx
c0022a40:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022a45:	c1 e3 10             	shl    ebx,0x10
c0022a48:	09 c3                	or     ebx,eax
c0022a4a:	eb ba                	jmp    c0022a06 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022a4c:	83 cb ff             	or     ebx,0xffffffff
c0022a4f:	89 d8                	mov    eax,ebx
c0022a51:	83 c4 44             	add    esp,0x44
c0022a54:	5b                   	pop    ebx
c0022a55:	5e                   	pop    esi
c0022a56:	c3                   	ret    

c0022a57 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022a57:	57                   	push   edi
c0022a58:	56                   	push   esi
c0022a59:	53                   	push   ebx
c0022a5a:	83 ec 34             	sub    esp,0x34
c0022a5d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022a61:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022a65:	6a 2b                	push   0x2b
c0022a67:	6a 00                	push   0x0
c0022a69:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022a6d:	53                   	push   ebx
c0022a6e:	e8 7d da fd ff       	call   c00004f0 <memset>
c0022a73:	58                   	pop    eax
c0022a74:	5a                   	pop    edx
c0022a75:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022a79:	50                   	push   eax
c0022a7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022a7e:	e8 6f fd ff ff       	call   c00227f2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022a83:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0022a87:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022a8b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022a8f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022a93:	53                   	push   ebx
c0022a94:	6a 00                	push   0x0
c0022a96:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a9e:	e8 1b f9 ff ff       	call   c00223be <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022aa3:	83 c4 50             	add    esp,0x50
c0022aa6:	5b                   	pop    ebx
c0022aa7:	5e                   	pop    esi
c0022aa8:	5f                   	pop    edi
c0022aa9:	c3                   	ret    

c0022aaa <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022aaa:	55                   	push   ebp
c0022aab:	57                   	push   edi
c0022aac:	56                   	push   esi
c0022aad:	53                   	push   ebx
c0022aae:	83 ec 40             	sub    esp,0x40
c0022ab1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022ab5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022ab9:	6a 2b                	push   0x2b
c0022abb:	6a 00                	push   0x0
c0022abd:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022ac1:	56                   	push   esi
c0022ac2:	e8 29 da fd ff       	call   c00004f0 <memset>
c0022ac7:	5f                   	pop    edi
c0022ac8:	89 ef                	mov    edi,ebp
c0022aca:	58                   	pop    eax
c0022acb:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022acf:	50                   	push   eax
c0022ad0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022ad4:	e8 19 fd ff ff       	call   c00227f2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022ad9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022ade:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022ae3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022ae8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022aed:	83 c4 10             	add    esp,0x10
c0022af0:	85 ed                	test   ebp,ebp
c0022af2:	74 14                	je     c0022b08 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022af4:	51                   	push   ecx
c0022af5:	51                   	push   ecx
c0022af6:	57                   	push   edi
c0022af7:	53                   	push   ebx
c0022af8:	e8 09 f7 ff ff       	call   c0022206 <CmGetNext(Reghive_Tag*, int)>
c0022afd:	83 c4 10             	add    esp,0x10
c0022b00:	85 c0                	test   eax,eax
c0022b02:	74 04                	je     c0022b08 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022b04:	89 c7                	mov    edi,eax
c0022b06:	eb e8                	jmp    c0022af0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0022b08:	56                   	push   esi
c0022b09:	6a 00                	push   0x0
c0022b0b:	57                   	push   edi
c0022b0c:	53                   	push   ebx
c0022b0d:	e8 ac f8 ff ff       	call   c00223be <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022b12:	83 c4 0c             	add    esp,0xc
c0022b15:	89 c7                	mov    edi,eax
c0022b17:	56                   	push   esi
c0022b18:	50                   	push   eax
c0022b19:	53                   	push   ebx
c0022b1a:	e8 f5 f5 ff ff       	call   c0022114 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022b1f:	58                   	pop    eax
c0022b20:	5a                   	pop    edx
c0022b21:	6a 6c                	push   0x6c
c0022b23:	6a 00                	push   0x0
c0022b25:	6a 00                	push   0x0
c0022b27:	68 bd 2d 03 c0       	push   0xc0032dbd
c0022b2c:	57                   	push   edi
c0022b2d:	53                   	push   ebx
c0022b2e:	e8 24 ff ff ff       	call   c0022a57 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022b33:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022b37:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022b3b:	c1 e8 10             	shr    eax,0x10
c0022b3e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022b42:	83 c4 1c             	add    esp,0x1c
c0022b45:	56                   	push   esi
c0022b46:	57                   	push   edi
c0022b47:	53                   	push   ebx
c0022b48:	e8 eb f6 ff ff       	call   c0022238 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022b4d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022b52:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b57:	c1 e0 08             	shl    eax,0x8
c0022b5a:	09 c2                	or     edx,eax
c0022b5c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022b61:	83 c4 4c             	add    esp,0x4c
c0022b64:	c1 e0 10             	shl    eax,0x10
c0022b67:	5b                   	pop    ebx
c0022b68:	09 d0                	or     eax,edx
c0022b6a:	5e                   	pop    esi
c0022b6b:	5f                   	pop    edi
c0022b6c:	5d                   	pop    ebp
c0022b6d:	c3                   	ret    

c0022b6e <zStrtok(char*, char const*)>:
c0022b6e:	55                   	push   ebp
c0022b6f:	57                   	push   edi
c0022b70:	56                   	push   esi
c0022b71:	53                   	push   ebx
c0022b72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022b76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b7a:	85 db                	test   ebx,ebx
c0022b7c:	74 2f                	je     c0022bad <zStrtok(char*, char const*)+0x3f>
c0022b7e:	85 c0                	test   eax,eax
c0022b80:	75 09                	jne    c0022b8b <zStrtok(char*, char const*)+0x1d>
c0022b82:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022b87:	85 c0                	test   eax,eax
c0022b89:	74 50                	je     c0022bdb <zStrtok(char*, char const*)+0x6d>
c0022b8b:	31 c9                	xor    ecx,ecx
c0022b8d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022b91:	74 03                	je     c0022b96 <zStrtok(char*, char const*)+0x28>
c0022b93:	41                   	inc    ecx
c0022b94:	eb f7                	jmp    c0022b8d <zStrtok(char*, char const*)+0x1f>
c0022b96:	31 d2                	xor    edx,edx
c0022b98:	39 ca                	cmp    edx,ecx
c0022b9a:	74 15                	je     c0022bb1 <zStrtok(char*, char const*)+0x43>
c0022b9c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022ba0:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022ba3:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022ba6:	39 ee                	cmp    esi,ebp
c0022ba8:	74 13                	je     c0022bbd <zStrtok(char*, char const*)+0x4f>
c0022baa:	42                   	inc    edx
c0022bab:	eb eb                	jmp    c0022b98 <zStrtok(char*, char const*)+0x2a>
c0022bad:	31 c0                	xor    eax,eax
c0022baf:	eb 2a                	jmp    c0022bdb <zStrtok(char*, char const*)+0x6d>
c0022bb1:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022bbb:	eb 1e                	jmp    c0022bdb <zStrtok(char*, char const*)+0x6d>
c0022bbd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022bc0:	39 ce                	cmp    esi,ecx
c0022bc2:	75 0a                	jne    c0022bce <zStrtok(char*, char const*)+0x60>
c0022bc4:	40                   	inc    eax
c0022bc5:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022bca:	89 d8                	mov    eax,ebx
c0022bcc:	eb 0d                	jmp    c0022bdb <zStrtok(char*, char const*)+0x6d>
c0022bce:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022bd2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022bd5:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022bdb:	5b                   	pop    ebx
c0022bdc:	5e                   	pop    esi
c0022bdd:	5f                   	pop    edi
c0022bde:	5d                   	pop    ebp
c0022bdf:	c3                   	ret    

c0022be0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022be0:	57                   	push   edi
c0022be1:	56                   	push   esi
c0022be2:	53                   	push   ebx
c0022be3:	81 ec 08 01 00 00    	sub    esp,0x108
c0022be9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022bf0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022bf7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0022bfb:	53                   	push   ebx
c0022bfc:	e8 3f da fd ff       	call   c0000640 <strcpy>
c0022c01:	59                   	pop    ecx
c0022c02:	5e                   	pop    esi
c0022c03:	68 5f 31 03 c0       	push   0xc003315f
c0022c08:	53                   	push   ebx
c0022c09:	bb 01 00 00 00       	mov    ebx,0x1
c0022c0e:	e8 5b ff ff ff       	call   c0022b6e <zStrtok(char*, char const*)>
c0022c13:	83 c4 10             	add    esp,0x10
c0022c16:	85 c0                	test   eax,eax
c0022c18:	74 3b                	je     c0022c55 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c1a:	52                   	push   edx
c0022c1b:	50                   	push   eax
c0022c1c:	6a 01                	push   0x1
c0022c1e:	57                   	push   edi
c0022c1f:	e8 b9 fd ff ff       	call   c00229dd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022c24:	59                   	pop    ecx
c0022c25:	89 c3                	mov    ebx,eax
c0022c27:	5e                   	pop    esi
c0022c28:	68 5f 31 03 c0       	push   0xc003315f
c0022c2d:	6a 00                	push   0x0
c0022c2f:	e8 3a ff ff ff       	call   c0022b6e <zStrtok(char*, char const*)>
c0022c34:	83 c4 10             	add    esp,0x10
c0022c37:	89 c6                	mov    esi,eax
c0022c39:	85 c0                	test   eax,eax
c0022c3b:	74 18                	je     c0022c55 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c3d:	52                   	push   edx
c0022c3e:	52                   	push   edx
c0022c3f:	53                   	push   ebx
c0022c40:	57                   	push   edi
c0022c41:	e8 81 f5 ff ff       	call   c00221c7 <CmEnterDirectory(Reghive_Tag*, int)>
c0022c46:	83 c4 10             	add    esp,0x10
c0022c49:	89 c3                	mov    ebx,eax
c0022c4b:	83 f8 ff             	cmp    eax,0xffffffff
c0022c4e:	74 05                	je     c0022c55 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c50:	50                   	push   eax
c0022c51:	56                   	push   esi
c0022c52:	53                   	push   ebx
c0022c53:	eb c9                	jmp    c0022c1e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022c55:	81 c4 00 01 00 00    	add    esp,0x100
c0022c5b:	89 d8                	mov    eax,ebx
c0022c5d:	5b                   	pop    ebx
c0022c5e:	5e                   	pop    esi
c0022c5f:	5f                   	pop    edi
c0022c60:	c3                   	ret    

c0022c61 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022c61:	55                   	push   ebp
c0022c62:	57                   	push   edi
c0022c63:	56                   	push   esi
c0022c64:	53                   	push   ebx
c0022c65:	83 ec 5c             	sub    esp,0x5c
c0022c68:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022c6c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022c70:	85 db                	test   ebx,ebx
c0022c72:	0f 8e 84 00 00 00    	jle    c0022cfc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022c78:	31 ed                	xor    ebp,ebp
c0022c7a:	57                   	push   edi
c0022c7b:	6a 32                	push   0x32
c0022c7d:	6a 00                	push   0x0
c0022c7f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022c83:	57                   	push   edi
c0022c84:	e8 67 d8 fd ff       	call   c00004f0 <memset>
c0022c89:	83 c4 0c             	add    esp,0xc
c0022c8c:	57                   	push   edi
c0022c8d:	53                   	push   ebx
c0022c8e:	56                   	push   esi
c0022c8f:	e8 30 fb ff ff       	call   c00227c4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c98:	83 c4 10             	add    esp,0x10
c0022c9b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022c9f:	7d 13                	jge    c0022cb4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022ca1:	83 ec 0c             	sub    esp,0xc
c0022ca4:	45                   	inc    ebp
c0022ca5:	68 e3 34 03 c0       	push   0xc00334e3
c0022caa:	e8 d6 67 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0022caf:	83 c4 10             	add    esp,0x10
c0022cb2:	eb e7                	jmp    c0022c9b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022cb4:	51                   	push   ecx
c0022cb5:	57                   	push   edi
c0022cb6:	53                   	push   ebx
c0022cb7:	68 c3 2d 03 c0       	push   0xc0032dc3
c0022cbc:	e8 c4 67 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0022cc1:	83 c4 10             	add    esp,0x10
c0022cc4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022cc9:	75 1e                	jne    c0022ce9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022ccb:	52                   	push   edx
c0022ccc:	52                   	push   edx
c0022ccd:	53                   	push   ebx
c0022cce:	56                   	push   esi
c0022ccf:	e8 f3 f4 ff ff       	call   c00221c7 <CmEnterDirectory(Reghive_Tag*, int)>
c0022cd4:	83 c4 0c             	add    esp,0xc
c0022cd7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022cdb:	8d 51 04             	lea    edx,[ecx+0x4]
c0022cde:	52                   	push   edx
c0022cdf:	50                   	push   eax
c0022ce0:	56                   	push   esi
c0022ce1:	e8 7b ff ff ff       	call   c0022c61 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022ce6:	83 c4 10             	add    esp,0x10
c0022ce9:	50                   	push   eax
c0022cea:	50                   	push   eax
c0022ceb:	53                   	push   ebx
c0022cec:	56                   	push   esi
c0022ced:	e8 14 f5 ff ff       	call   c0022206 <CmGetNext(Reghive_Tag*, int)>
c0022cf2:	83 c4 10             	add    esp,0x10
c0022cf5:	89 c3                	mov    ebx,eax
c0022cf7:	e9 74 ff ff ff       	jmp    c0022c70 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022cfc:	83 c4 5c             	add    esp,0x5c
c0022cff:	5b                   	pop    ebx
c0022d00:	5e                   	pop    esi
c0022d01:	5f                   	pop    edi
c0022d02:	5d                   	pop    ebp
c0022d03:	c3                   	ret    

c0022d04 <CmSplitFinalSlashInPlace(char*)>:
c0022d04:	53                   	push   ebx
c0022d05:	83 ec 14             	sub    esp,0x14
c0022d08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022d0c:	53                   	push   ebx
c0022d0d:	e8 5e d8 fd ff       	call   c0000570 <strlen>
c0022d12:	83 c4 10             	add    esp,0x10
c0022d15:	48                   	dec    eax
c0022d16:	85 c0                	test   eax,eax
c0022d18:	74 15                	je     c0022d2f <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022d1a:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022d1d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022d21:	75 09                	jne    c0022d2c <CmSplitFinalSlashInPlace(char*)+0x28>
c0022d23:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022d26:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022d2a:	eb 05                	jmp    c0022d31 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022d2c:	48                   	dec    eax
c0022d2d:	eb e7                	jmp    c0022d16 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022d2f:	31 c0                	xor    eax,eax
c0022d31:	83 c4 08             	add    esp,0x8
c0022d34:	5b                   	pop    ebx
c0022d35:	c3                   	ret    

c0022d36 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022d36:	55                   	push   ebp
c0022d37:	57                   	push   edi
c0022d38:	56                   	push   esi
c0022d39:	53                   	push   ebx
c0022d3a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022d40:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022d47:	8a 13                	mov    dl,BYTE PTR [ebx]
c0022d49:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022d4c:	80 fa 40             	cmp    dl,0x40
c0022d4f:	75 1c                	jne    c0022d6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0022d51:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0022d54:	85 c9                	test   ecx,ecx
c0022d56:	0f 84 09 01 00 00    	je     c0022e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022d5c:	8d 43 01             	lea    eax,[ebx+0x1]
c0022d5f:	83 f9 3a             	cmp    ecx,0x3a
c0022d62:	74 04                	je     c0022d68 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022d64:	89 c3                	mov    ebx,eax
c0022d66:	eb e9                	jmp    c0022d51 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022d68:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022d6b:	89 c3                	mov    ebx,eax
c0022d6d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022d71:	50                   	push   eax
c0022d72:	6a 40                	push   0x40
c0022d74:	6a 00                	push   0x0
c0022d76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022d7a:	50                   	push   eax
c0022d7b:	e8 70 d7 fd ff       	call   c00004f0 <memset>
c0022d80:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022d87:	31 c0                	xor    eax,eax
c0022d89:	83 c4 10             	add    esp,0x10
c0022d8c:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022d91:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022d94:	89 d1                	mov    ecx,edx
c0022d96:	85 d2                	test   edx,edx
c0022d98:	0f 84 c7 00 00 00    	je     c0022e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022d9e:	3d c7 00 00 00       	cmp    eax,0xc7
c0022da3:	0f 8f bc 00 00 00    	jg     c0022e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022da9:	83 fa 0a             	cmp    edx,0xa
c0022dac:	0f 85 a4 00 00 00    	jne    c0022e56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022db2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022db7:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022dbc:	89 c8                	mov    eax,ecx
c0022dbe:	a8 df                	test   al,0xdf
c0022dc0:	0f 94 c2             	sete   dl
c0022dc3:	83 f9 23             	cmp    ecx,0x23
c0022dc6:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022dcb:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022dcf:	80 e2 01             	and    dl,0x1
c0022dd2:	75 4a                	jne    c0022e1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022dd4:	83 e8 09             	sub    eax,0x9
c0022dd7:	3c 01                	cmp    al,0x1
c0022dd9:	76 43                	jbe    c0022e1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022ddb:	83 f9 5b             	cmp    ecx,0x5b
c0022dde:	75 42                	jne    c0022e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022de0:	83 fe 40             	cmp    esi,0x40
c0022de3:	75 39                	jne    c0022e1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022de5:	83 ec 0c             	sub    esp,0xc
c0022de8:	8d 54 24 65          	lea    edx,[esp+0x65]
c0022dec:	52                   	push   edx
c0022ded:	e8 7e d7 fd ff       	call   c0000570 <strlen>
c0022df2:	83 c4 10             	add    esp,0x10
c0022df5:	83 f8 3f             	cmp    eax,0x3f
c0022df8:	77 6b                	ja     c0022e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022dfa:	50                   	push   eax
c0022dfb:	50                   	push   eax
c0022dfc:	8d 54 24 61          	lea    edx,[esp+0x61]
c0022e00:	52                   	push   edx
c0022e01:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022e05:	52                   	push   edx
c0022e06:	e8 35 d8 fd ff       	call   c0000640 <strcpy>
c0022e0b:	58                   	pop    eax
c0022e0c:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022e10:	52                   	push   edx
c0022e11:	e8 5a d7 fd ff       	call   c0000570 <strlen>
c0022e16:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022e1b:	83 c4 10             	add    esp,0x10
c0022e1e:	31 d2                	xor    edx,edx
c0022e20:	eb 3b                	jmp    c0022e5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0022e22:	83 fe 40             	cmp    esi,0x40
c0022e25:	74 06                	je     c0022e2d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0022e27:	8d 44 24 58          	lea    eax,[esp+0x58]
c0022e2b:	eb 20                	jmp    c0022e4d <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0022e2d:	50                   	push   eax
c0022e2e:	50                   	push   eax
c0022e2f:	55                   	push   ebp
c0022e30:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022e34:	50                   	push   eax
c0022e35:	e8 16 d9 fd ff       	call   c0000750 <strcmp>
c0022e3a:	83 c4 10             	add    esp,0x10
c0022e3d:	85 c0                	test   eax,eax
c0022e3f:	75 dd                	jne    c0022e1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022e41:	eb e4                	jmp    c0022e27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022e43:	8d 50 01             	lea    edx,[eax+0x1]
c0022e46:	83 f9 3d             	cmp    ecx,0x3d
c0022e49:	74 1e                	je     c0022e69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0022e4b:	89 d0                	mov    eax,edx
c0022e4d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022e50:	85 c9                	test   ecx,ecx
c0022e52:	75 ef                	jne    c0022e43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0022e54:	eb 0f                	jmp    c0022e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022e56:	8d 50 01             	lea    edx,[eax+0x1]
c0022e59:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022e5d:	47                   	inc    edi
c0022e5e:	89 d0                	mov    eax,edx
c0022e60:	e9 2c ff ff ff       	jmp    c0022d91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022e65:	31 c0                	xor    eax,eax
c0022e67:	eb 33                	jmp    c0022e9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0022e69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022e70:	50                   	push   eax
c0022e71:	50                   	push   eax
c0022e72:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022e76:	50                   	push   eax
c0022e77:	53                   	push   ebx
c0022e78:	e8 d3 d8 fd ff       	call   c0000750 <strcmp>
c0022e7d:	83 c4 10             	add    esp,0x10
c0022e80:	85 c0                	test   eax,eax
c0022e82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e86:	75 96                	jne    c0022e1e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022e88:	51                   	push   ecx
c0022e89:	51                   	push   ecx
c0022e8a:	52                   	push   edx
c0022e8b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022e92:	e8 a9 d7 fd ff       	call   c0000640 <strcpy>
c0022e97:	83 c4 10             	add    esp,0x10
c0022e9a:	b0 01                	mov    al,0x1
c0022e9c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022ea2:	5b                   	pop    ebx
c0022ea3:	5e                   	pop    esi
c0022ea4:	5f                   	pop    edi
c0022ea5:	5d                   	pop    ebp
c0022ea6:	c3                   	ret    

c0022ea7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022ea7:	57                   	push   edi
c0022ea8:	56                   	push   esi
c0022ea9:	53                   	push   ebx
c0022eaa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022eb0:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022eb7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022ebe:	53                   	push   ebx
c0022ebf:	e8 ac d6 fd ff       	call   c0000570 <strlen>
c0022ec4:	89 34 24             	mov    DWORD PTR [esp],esi
c0022ec7:	89 c7                	mov    edi,eax
c0022ec9:	e8 a2 d6 fd ff       	call   c0000570 <strlen>
c0022ece:	83 c4 10             	add    esp,0x10
c0022ed1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022ed5:	3d ff 00 00 00       	cmp    eax,0xff
c0022eda:	0f 87 d3 00 00 00    	ja     c0022fb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022ee0:	57                   	push   edi
c0022ee1:	57                   	push   edi
c0022ee2:	56                   	push   esi
c0022ee3:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022ee7:	56                   	push   esi
c0022ee8:	e8 53 d7 fd ff       	call   c0000640 <strcpy>
c0022eed:	58                   	pop    eax
c0022eee:	5a                   	pop    edx
c0022eef:	68 5f 31 03 c0       	push   0xc003315f
c0022ef4:	56                   	push   esi
c0022ef5:	e8 46 d9 fd ff       	call   c0000840 <strcat>
c0022efa:	59                   	pop    ecx
c0022efb:	5f                   	pop    edi
c0022efc:	53                   	push   ebx
c0022efd:	56                   	push   esi
c0022efe:	e8 3d d9 fd ff       	call   c0000840 <strcat>
c0022f03:	58                   	pop    eax
c0022f04:	5a                   	pop    edx
c0022f05:	68 cd 2d 03 c0       	push   0xc0032dcd
c0022f0a:	56                   	push   esi
c0022f0b:	e8 30 d9 fd ff       	call   c0000840 <strcat>
c0022f10:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022f17:	e8 da 36 ff ff       	call   c00165f6 <malloc>
c0022f1c:	83 c4 0c             	add    esp,0xc
c0022f1f:	89 c3                	mov    ebx,eax
c0022f21:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022f27:	56                   	push   esi
c0022f28:	50                   	push   eax
c0022f29:	e8 5e 77 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c0022f2e:	83 c4 10             	add    esp,0x10
c0022f31:	85 db                	test   ebx,ebx
c0022f33:	74 7e                	je     c0022fb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022f35:	51                   	push   ecx
c0022f36:	51                   	push   ecx
c0022f37:	6a 01                	push   0x1
c0022f39:	53                   	push   ebx
c0022f3a:	e8 6b 77 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0022f3f:	83 c4 10             	add    esp,0x10
c0022f42:	85 c0                	test   eax,eax
c0022f44:	74 08                	je     c0022f4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022f46:	83 ec 0c             	sub    esp,0xc
c0022f49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022f4b:	53                   	push   ebx
c0022f4c:	eb 5f                	jmp    c0022fad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022f4e:	52                   	push   edx
c0022f4f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022f53:	50                   	push   eax
c0022f54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022f58:	50                   	push   eax
c0022f59:	53                   	push   ebx
c0022f5a:	e8 4d 7a ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c0022f5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022f63:	83 c4 10             	add    esp,0x10
c0022f66:	89 c1                	mov    ecx,eax
c0022f68:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022f6c:	74 31                	je     c0022f9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022f6e:	83 ec 0c             	sub    esp,0xc
c0022f71:	50                   	push   eax
c0022f72:	e8 7f 36 ff ff       	call   c00165f6 <malloc>
c0022f77:	89 c6                	mov    esi,eax
c0022f79:	58                   	pop    eax
c0022f7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022f7c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022f80:	52                   	push   edx
c0022f81:	56                   	push   esi
c0022f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022f8a:	53                   	push   ebx
c0022f8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022f8e:	83 c4 20             	add    esp,0x20
c0022f91:	85 c0                	test   eax,eax
c0022f93:	75 0a                	jne    c0022f9f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022f95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f99:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022f9d:	74 18                	je     c0022fb7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022f9f:	83 ec 0c             	sub    esp,0xc
c0022fa2:	53                   	push   ebx
c0022fa3:	e8 60 77 ff ff       	call   c001a708 <File::close()>
c0022fa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022faa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022fad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022fb0:	83 c4 10             	add    esp,0x10
c0022fb3:	31 c0                	xor    eax,eax
c0022fb5:	eb 3b                	jmp    c0022ff2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022fb7:	83 ec 0c             	sub    esp,0xc
c0022fba:	53                   	push   ebx
c0022fbb:	e8 48 77 ff ff       	call   c001a708 <File::close()>
c0022fc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022fc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022fc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022fc8:	83 c4 0c             	add    esp,0xc
c0022fcb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022fd2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022fd9:	56                   	push   esi
c0022fda:	e8 57 fd ff ff       	call   c0022d36 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022fdf:	89 34 24             	mov    DWORD PTR [esp],esi
c0022fe2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022fe6:	e8 1b 36 ff ff       	call   c0016606 <free>
c0022feb:	83 c4 10             	add    esp,0x10
c0022fee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022ff2:	81 c4 20 01 00 00    	add    esp,0x120
c0022ff8:	5b                   	pop    ebx
c0022ff9:	5e                   	pop    esi
c0022ffa:	5f                   	pop    edi
c0022ffb:	c3                   	ret    

c0022ffc <Reg::getLine(char*, char*, char*)>:
c0022ffc:	57                   	push   edi
c0022ffd:	56                   	push   esi
c0022ffe:	53                   	push   ebx
c0022fff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023003:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023007:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002300b:	57                   	push   edi
c002300c:	56                   	push   esi
c002300d:	53                   	push   ebx
c002300e:	68 d2 2d 03 c0       	push   0xc0032dd2
c0023013:	e8 8f fe ff ff       	call   c0022ea7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0023018:	83 c4 10             	add    esp,0x10
c002301b:	84 c0                	test   al,al
c002301d:	75 10                	jne    c002302f <Reg::getLine(char*, char*, char*)+0x33>
c002301f:	57                   	push   edi
c0023020:	56                   	push   esi
c0023021:	53                   	push   ebx
c0023022:	68 f7 2d 03 c0       	push   0xc0032df7
c0023027:	e8 7b fe ff ff       	call   c0022ea7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c002302c:	83 c4 10             	add    esp,0x10
c002302f:	5b                   	pop    ebx
c0023030:	5e                   	pop    esi
c0023031:	5f                   	pop    edi
c0023032:	c3                   	ret    

c0023033 <Reg::readInt(char*, char*, int*)>:
c0023033:	55                   	push   ebp
c0023034:	57                   	push   edi
c0023035:	56                   	push   esi
c0023036:	53                   	push   ebx
c0023037:	81 ec f0 00 00 00    	sub    esp,0xf0
c002303d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0023041:	55                   	push   ebp
c0023042:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023049:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023050:	e8 a7 ff ff ff       	call   c0022ffc <Reg::getLine(char*, char*, char*)>
c0023055:	83 c4 10             	add    esp,0x10
c0023058:	84 c0                	test   al,al
c002305a:	0f 84 b6 00 00 00    	je     c0023116 <Reg::readInt(char*, char*, int*)+0xe3>
c0023060:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0023065:	83 fa 2b             	cmp    edx,0x2b
c0023068:	74 0c                	je     c0023076 <Reg::readInt(char*, char*, int*)+0x43>
c002306a:	83 fa 2d             	cmp    edx,0x2d
c002306d:	75 0e                	jne    c002307d <Reg::readInt(char*, char*, int*)+0x4a>
c002306f:	ba 01 00 00 00       	mov    edx,0x1
c0023074:	eb 0b                	jmp    c0023081 <Reg::readInt(char*, char*, int*)+0x4e>
c0023076:	ba 01 00 00 00       	mov    edx,0x1
c002307b:	eb 02                	jmp    c002307f <Reg::readInt(char*, char*, int*)+0x4c>
c002307d:	31 d2                	xor    edx,edx
c002307f:	31 c0                	xor    eax,eax
c0023081:	be 0a 00 00 00       	mov    esi,0xa
c0023086:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c002308b:	75 21                	jne    c00230ae <Reg::readInt(char*, char*, int*)+0x7b>
c002308d:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0023092:	83 f9 78             	cmp    ecx,0x78
c0023095:	75 0a                	jne    c00230a1 <Reg::readInt(char*, char*, int*)+0x6e>
c0023097:	83 c2 02             	add    edx,0x2
c002309a:	be 10 00 00 00       	mov    esi,0x10
c002309f:	eb 0d                	jmp    c00230ae <Reg::readInt(char*, char*, int*)+0x7b>
c00230a1:	83 f9 62             	cmp    ecx,0x62
c00230a4:	75 08                	jne    c00230ae <Reg::readInt(char*, char*, int*)+0x7b>
c00230a6:	83 c2 02             	add    edx,0x2
c00230a9:	be 02 00 00 00       	mov    esi,0x2
c00230ae:	01 d5                	add    ebp,edx
c00230b0:	31 d2                	xor    edx,edx
c00230b2:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00230b6:	83 f9 0d             	cmp    ecx,0xd
c00230b9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00230bd:	0f 94 c3             	sete   bl
c00230c0:	85 c9                	test   ecx,ecx
c00230c2:	89 df                	mov    edi,ebx
c00230c4:	0f 94 c3             	sete   bl
c00230c7:	09 df                	or     edi,ebx
c00230c9:	89 fb                	mov    ebx,edi
c00230cb:	83 e7 01             	and    edi,0x1
c00230ce:	75 35                	jne    c0023105 <Reg::readInt(char*, char*, int*)+0xd2>
c00230d0:	0f af d6             	imul   edx,esi
c00230d3:	83 fe 10             	cmp    esi,0x10
c00230d6:	75 26                	jne    c00230fe <Reg::readInt(char*, char*, int*)+0xcb>
c00230d8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00230dc:	83 ef 41             	sub    edi,0x41
c00230df:	89 fb                	mov    ebx,edi
c00230e1:	80 fb 05             	cmp    bl,0x5
c00230e4:	77 06                	ja     c00230ec <Reg::readInt(char*, char*, int*)+0xb9>
c00230e6:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00230ea:	eb 16                	jmp    c0023102 <Reg::readInt(char*, char*, int*)+0xcf>
c00230ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00230f0:	83 eb 61             	sub    ebx,0x61
c00230f3:	80 fb 05             	cmp    bl,0x5
c00230f6:	77 06                	ja     c00230fe <Reg::readInt(char*, char*, int*)+0xcb>
c00230f8:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00230fc:	eb 04                	jmp    c0023102 <Reg::readInt(char*, char*, int*)+0xcf>
c00230fe:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0023102:	45                   	inc    ebp
c0023103:	eb ad                	jmp    c00230b2 <Reg::readInt(char*, char*, int*)+0x7f>
c0023105:	84 c0                	test   al,al
c0023107:	74 02                	je     c002310b <Reg::readInt(char*, char*, int*)+0xd8>
c0023109:	f7 da                	neg    edx
c002310b:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0023112:	89 10                	mov    DWORD PTR [eax],edx
c0023114:	88 d8                	mov    al,bl
c0023116:	81 c4 ec 00 00 00    	add    esp,0xec
c002311c:	5b                   	pop    ebx
c002311d:	5e                   	pop    esi
c002311e:	5f                   	pop    edi
c002311f:	5d                   	pop    ebp
c0023120:	c3                   	ret    

c0023121 <Reg::readString(char*, char*, char*, int)>:
c0023121:	57                   	push   edi
c0023122:	56                   	push   esi
c0023123:	53                   	push   ebx
c0023124:	81 ec d4 00 00 00    	sub    esp,0xd4
c002312a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0023131:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0023135:	57                   	push   edi
c0023136:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c002313d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0023144:	e8 b3 fe ff ff       	call   c0022ffc <Reg::getLine(char*, char*, char*)>
c0023149:	83 c4 10             	add    esp,0x10
c002314c:	89 c6                	mov    esi,eax
c002314e:	84 c0                	test   al,al
c0023150:	74 44                	je     c0023196 <Reg::readString(char*, char*, char*, int)+0x75>
c0023152:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0023159:	31 c0                	xor    eax,eax
c002315b:	4a                   	dec    edx
c002315c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c002315f:	84 c9                	test   cl,cl
c0023161:	74 0f                	je     c0023172 <Reg::readString(char*, char*, char*, int)+0x51>
c0023163:	39 c2                	cmp    edx,eax
c0023165:	7e 0b                	jle    c0023172 <Reg::readString(char*, char*, char*, int)+0x51>
c0023167:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c002316a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c002316f:	40                   	inc    eax
c0023170:	eb ea                	jmp    c002315c <Reg::readString(char*, char*, char*, int)+0x3b>
c0023172:	83 ec 0c             	sub    esp,0xc
c0023175:	53                   	push   ebx
c0023176:	e8 f5 d3 fd ff       	call   c0000570 <strlen>
c002317b:	83 c4 10             	add    esp,0x10
c002317e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0023183:	75 11                	jne    c0023196 <Reg::readString(char*, char*, char*, int)+0x75>
c0023185:	83 ec 0c             	sub    esp,0xc
c0023188:	53                   	push   ebx
c0023189:	e8 e2 d3 fd ff       	call   c0000570 <strlen>
c002318e:	83 c4 10             	add    esp,0x10
c0023191:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0023196:	81 c4 d0 00 00 00    	add    esp,0xd0
c002319c:	89 f0                	mov    eax,esi
c002319e:	5b                   	pop    ebx
c002319f:	5e                   	pop    esi
c00231a0:	5f                   	pop    edi
c00231a1:	c3                   	ret    

c00231a2 <Reg::readBool(char*, char*, bool*)>:
c00231a2:	83 ec 20             	sub    esp,0x20
c00231a5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00231a9:	50                   	push   eax
c00231aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231b2:	e8 7c fe ff ff       	call   c0023033 <Reg::readInt(char*, char*, int*)>
c00231b7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00231bc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00231c0:	0f 95 02             	setne  BYTE PTR [edx]
c00231c3:	83 c4 2c             	add    esp,0x2c
c00231c6:	c3                   	ret    

c00231c7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00231c7:	53                   	push   ebx
c00231c8:	83 ec 1c             	sub    esp,0x1c
c00231cb:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00231cf:	8d 44 24 13          	lea    eax,[esp+0x13]
c00231d3:	50                   	push   eax
c00231d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231dc:	e8 c1 ff ff ff       	call   c00231a2 <Reg::readBool(char*, char*, bool*)>
c00231e1:	83 c4 10             	add    esp,0x10
c00231e4:	84 c0                	test   al,al
c00231e6:	74 04                	je     c00231ec <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00231e8:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00231ec:	88 d8                	mov    al,bl
c00231ee:	83 c4 18             	add    esp,0x18
c00231f1:	5b                   	pop    ebx
c00231f2:	c3                   	ret    

c00231f3 <Reg::readIntWithDefault(char*, char*, int)>:
c00231f3:	53                   	push   ebx
c00231f4:	83 ec 1c             	sub    esp,0x1c
c00231f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00231fb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00231ff:	50                   	push   eax
c0023200:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023204:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023208:	e8 26 fe ff ff       	call   c0023033 <Reg::readInt(char*, char*, int*)>
c002320d:	83 c4 10             	add    esp,0x10
c0023210:	84 c0                	test   al,al
c0023212:	74 04                	je     c0023218 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0023214:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023218:	89 d8                	mov    eax,ebx
c002321a:	83 c4 18             	add    esp,0x18
c002321d:	5b                   	pop    ebx
c002321e:	c3                   	ret    

c002321f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c002321f:	57                   	push   edi
c0023220:	56                   	push   esi
c0023221:	56                   	push   esi
c0023222:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023226:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002322a:	56                   	push   esi
c002322b:	57                   	push   edi
c002322c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023234:	e8 e8 fe ff ff       	call   c0023121 <Reg::readString(char*, char*, char*, int)>
c0023239:	83 c4 10             	add    esp,0x10
c002323c:	84 c0                	test   al,al
c002323e:	75 1a                	jne    c002325a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0023240:	51                   	push   ecx
c0023241:	56                   	push   esi
c0023242:	6a 00                	push   0x0
c0023244:	57                   	push   edi
c0023245:	e8 a6 d2 fd ff       	call   c00004f0 <memset>
c002324a:	8d 4e ff             	lea    ecx,[esi-0x1]
c002324d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023251:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023253:	83 c4 10             	add    esp,0x10
c0023256:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002325a:	89 f8                	mov    eax,edi
c002325c:	5a                   	pop    edx
c002325d:	5e                   	pop    esi
c002325e:	5f                   	pop    edi
c002325f:	c3                   	ret    

c0023260 <SysEject(regs*)>:
c0023260:	83 ec 0c             	sub    esp,0xc
c0023263:	83 ca ff             	or     edx,0xffffffff
c0023266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002326a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002326d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0023272:	83 e9 41             	sub    ecx,0x41
c0023275:	83 f9 19             	cmp    ecx,0x19
c0023278:	77 18                	ja     c0023292 <SysEject(regs*)+0x32>
c002327a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0023281:	85 c9                	test   ecx,ecx
c0023283:	74 0d                	je     c0023292 <SysEject(regs*)+0x32>
c0023285:	83 ec 0c             	sub    esp,0xc
c0023288:	51                   	push   ecx
c0023289:	e8 00 96 ff ff       	call   c001c88e <LogicalDisk::eject()>
c002328e:	83 c4 10             	add    esp,0x10
c0023291:	99                   	cdq    
c0023292:	83 c4 0c             	add    esp,0xc
c0023295:	c3                   	ret    

c0023296 <SysExit(regs*)>:
c0023296:	83 ec 18             	sub    esp,0x18
c0023299:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002329d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00232a0:	e8 8f 29 00 00       	call   c0025c34 <terminateTask(int)>
c00232a5:	83 c8 ff             	or     eax,0xffffffff
c00232a8:	83 c4 1c             	add    esp,0x1c
c00232ab:	89 c2                	mov    edx,eax
c00232ad:	c3                   	ret    

c00232ae <SysGetCwd(regs*)>:
c00232ae:	83 ec 10             	sub    esp,0x10
c00232b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00232b5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00232b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00232bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232c0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00232c3:	e8 78 70 ff ff       	call   c001a340 <Fs::getcwd(Process*, char*, int)>
c00232c8:	83 c4 1c             	add    esp,0x1c
c00232cb:	99                   	cdq    
c00232cc:	c3                   	ret    

c00232cd <SysGetPID(regs*)>:
c00232cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00232d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00232d7:	99                   	cdq    
c00232d8:	c3                   	ret    

c00232d9 <SysGetRAMData(regs*)>:
c00232d9:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c00232df:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c00232e9:	99                   	cdq    
c00232ea:	f7 f9                	idiv   ecx
c00232ec:	c1 e0 18             	shl    eax,0x18
c00232ef:	09 c8                	or     eax,ecx
c00232f1:	99                   	cdq    
c00232f2:	c3                   	ret    

c00232f3 <SysGetVGAPtr(regs*)>:
c00232f3:	55                   	push   ebp
c00232f4:	57                   	push   edi
c00232f5:	56                   	push   esi
c00232f6:	53                   	push   ebx
c00232f7:	83 ec 18             	sub    esp,0x18
c00232fa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00232fe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023301:	e8 fa 23 00 00       	call   c0025700 <Thr::processFromPID(int)>
c0023306:	83 c4 10             	add    esp,0x10
c0023309:	89 c1                	mov    ecx,eax
c002330b:	b8 01 00 00 00       	mov    eax,0x1
c0023310:	85 c9                	test   ecx,ecx
c0023312:	74 57                	je     c002336b <SysGetVGAPtr(regs*)+0x78>
c0023314:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c002331a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c002331e:	74 0c                	je     c002332c <SysGetVGAPtr(regs*)+0x39>
c0023320:	83 ec 0c             	sub    esp,0xc
c0023323:	55                   	push   ebp
c0023324:	e8 70 3f ff ff       	call   c0017299 <setActiveTerminal(VgaText*)>
c0023329:	83 c4 10             	add    esp,0x10
c002332c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002332f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0023332:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0023337:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023339:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002333c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002333f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023345:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023348:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002334b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0023351:	50                   	push   eax
c0023352:	50                   	push   eax
c0023353:	68 12 2e 03 c0       	push   0xc0032e12
c0023358:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002335b:	05 a8 0f 00 00       	add    eax,0xfa8
c0023360:	50                   	push   eax
c0023361:	e8 da d2 fd ff       	call   c0000640 <strcpy>
c0023366:	83 c4 10             	add    esp,0x10
c0023369:	31 c0                	xor    eax,eax
c002336b:	83 c4 0c             	add    esp,0xc
c002336e:	31 d2                	xor    edx,edx
c0023370:	5b                   	pop    ebx
c0023371:	5e                   	pop    esi
c0023372:	5f                   	pop    edi
c0023373:	5d                   	pop    ebp
c0023374:	c3                   	ret    
c0023375:	66 90                	xchg   ax,ax
c0023377:	90                   	nop

c0023378 <SysKill(regs*)>:
c0023378:	53                   	push   ebx
c0023379:	83 ec 08             	sub    esp,0x8
c002337c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023380:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023384:	75 16                	jne    c002339c <SysKill(regs*)+0x24>
c0023386:	83 ec 0c             	sub    esp,0xc
c0023389:	68 1c 2e 03 c0       	push   0xc0032e1c
c002338e:	e8 0b d1 ff ff       	call   c002049e <KePanic(char const*)>
c0023393:	83 c4 10             	add    esp,0x10
c0023396:	e9 89 00 00 00       	jmp    c0023424 <SysKill(regs*)+0xac>
c002339b:	90                   	nop
c002339c:	83 ec 0c             	sub    esp,0xc
c002339f:	68 ec 01 04 c0       	push   0xc00401ec
c00233a4:	e8 f3 ba 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00233a9:	8d 76 00             	lea    esi,[esi+0x0]
c00233ac:	83 c4 10             	add    esp,0x10
c00233af:	85 c0                	test   eax,eax
c00233b1:	74 19                	je     c00233cc <SysKill(regs*)+0x54>
c00233b3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00233b6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00233b9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00233bb:	74 33                	je     c00233f0 <SysKill(regs*)+0x78>
c00233bd:	52                   	push   edx
c00233be:	52                   	push   edx
c00233bf:	50                   	push   eax
c00233c0:	68 ec 01 04 c0       	push   0xc00401ec
c00233c5:	e8 f2 bd 00 00       	call   c002f1bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00233ca:	eb e0                	jmp    c00233ac <SysKill(regs*)+0x34>
c00233cc:	83 ec 0c             	sub    esp,0xc
c00233cf:	68 e0 01 04 c0       	push   0xc00401e0
c00233d4:	e8 c3 ba 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00233d9:	8d 76 00             	lea    esi,[esi+0x0]
c00233dc:	83 c4 10             	add    esp,0x10
c00233df:	85 c0                	test   eax,eax
c00233e1:	74 41                	je     c0023424 <SysKill(regs*)+0xac>
c00233e3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00233e6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00233e9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00233eb:	75 27                	jne    c0023414 <SysKill(regs*)+0x9c>
c00233ed:	8d 76 00             	lea    esi,[esi+0x0]
c00233f0:	51                   	push   ecx
c00233f1:	51                   	push   ecx
c00233f2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00233f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00233fd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023403:	e8 4f d9 ff ff       	call   c0020d57 <KeRaiseSignal(SigHandlerBlock*, int)>
c0023408:	83 c4 10             	add    esp,0x10
c002340b:	31 c0                	xor    eax,eax
c002340d:	31 d2                	xor    edx,edx
c002340f:	eb 1b                	jmp    c002342c <SysKill(regs*)+0xb4>
c0023411:	8d 76 00             	lea    esi,[esi+0x0]
c0023414:	52                   	push   edx
c0023415:	52                   	push   edx
c0023416:	50                   	push   eax
c0023417:	68 e0 01 04 c0       	push   0xc00401e0
c002341c:	e8 9b bd 00 00       	call   c002f1bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023421:	eb b9                	jmp    c00233dc <SysKill(regs*)+0x64>
c0023423:	90                   	nop
c0023424:	83 c8 ff             	or     eax,0xffffffff
c0023427:	89 c2                	mov    edx,eax
c0023429:	8d 76 00             	lea    esi,[esi+0x0]
c002342c:	83 c4 08             	add    esp,0x8
c002342f:	5b                   	pop    ebx
c0023430:	c3                   	ret    

c0023431 <SysLoadDLL(regs*)>:
c0023431:	56                   	push   esi
c0023432:	53                   	push   ebx
c0023433:	31 d2                	xor    edx,edx
c0023435:	51                   	push   ecx
c0023436:	b8 01 00 00 00       	mov    eax,0x1
c002343b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002343f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0023443:	0f 84 8c 00 00 00    	je     c00234d5 <SysLoadDLL(regs*)+0xa4>
c0023449:	83 ec 0c             	sub    esp,0xc
c002344c:	68 14 01 00 00       	push   0x114
c0023451:	e8 a0 31 ff ff       	call   c00165f6 <malloc>
c0023456:	83 c4 0c             	add    esp,0xc
c0023459:	89 c3                	mov    ebx,eax
c002345b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023460:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023463:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023466:	53                   	push   ebx
c0023467:	e8 20 72 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c002346c:	83 c4 10             	add    esp,0x10
c002346f:	31 d2                	xor    edx,edx
c0023471:	b8 02 00 00 00       	mov    eax,0x2
c0023476:	85 db                	test   ebx,ebx
c0023478:	74 5b                	je     c00234d5 <SysLoadDLL(regs*)+0xa4>
c002347a:	83 ec 0c             	sub    esp,0xc
c002347d:	53                   	push   ebx
c002347e:	e8 eb 74 ff ff       	call   c001a96e <File::exists()>
c0023483:	83 c4 10             	add    esp,0x10
c0023486:	84 c0                	test   al,al
c0023488:	8b 03                	mov    eax,DWORD PTR [ebx]
c002348a:	75 11                	jne    c002349d <SysLoadDLL(regs*)+0x6c>
c002348c:	83 ec 0c             	sub    esp,0xc
c002348f:	53                   	push   ebx
c0023490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023493:	83 c4 10             	add    esp,0x10
c0023496:	b8 03 00 00 00       	mov    eax,0x3
c002349b:	eb 36                	jmp    c00234d3 <SysLoadDLL(regs*)+0xa2>
c002349d:	83 ec 0c             	sub    esp,0xc
c00234a0:	53                   	push   ebx
c00234a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00234a4:	58                   	pop    eax
c00234a5:	5a                   	pop    edx
c00234a6:	6a 00                	push   0x0
c00234a8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00234ab:	e8 81 15 00 00       	call   c0024a31 <Thr::loadDLL(char const*, bool)>
c00234b0:	83 c4 10             	add    esp,0x10
c00234b3:	89 c1                	mov    ecx,eax
c00234b5:	31 d2                	xor    edx,edx
c00234b7:	b8 04 00 00 00       	mov    eax,0x4
c00234bc:	85 c9                	test   ecx,ecx
c00234be:	74 15                	je     c00234d5 <SysLoadDLL(regs*)+0xa4>
c00234c0:	53                   	push   ebx
c00234c1:	53                   	push   ebx
c00234c2:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00234c8:	51                   	push   ecx
c00234c9:	e8 b5 17 00 00       	call   c0024c83 <Thr::executeDLL(unsigned long, void*)>
c00234ce:	83 c4 10             	add    esp,0x10
c00234d1:	31 c0                	xor    eax,eax
c00234d3:	31 d2                	xor    edx,edx
c00234d5:	59                   	pop    ecx
c00234d6:	5b                   	pop    ebx
c00234d7:	5e                   	pop    esi
c00234d8:	c3                   	ret    

c00234d9 <SysRead(regs*)>:
c00234d9:	57                   	push   edi
c00234da:	56                   	push   esi
c00234db:	53                   	push   ebx
c00234dc:	83 ec 10             	sub    esp,0x10
c00234df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00234e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00234e6:	83 f8 02             	cmp    eax,0x2
c00234e9:	77 10                	ja     c00234fb <SysRead(regs*)+0x22>
c00234eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234f3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00234f9:	eb 0e                	jmp    c0023509 <SysRead(regs*)+0x30>
c00234fb:	83 ec 0c             	sub    esp,0xc
c00234fe:	50                   	push   eax
c00234ff:	e8 ef 4a ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c0023504:	83 c4 10             	add    esp,0x10
c0023507:	89 c1                	mov    ecx,eax
c0023509:	83 c8 ff             	or     eax,0xffffffff
c002350c:	85 c9                	test   ecx,ecx
c002350e:	89 c2                	mov    edx,eax
c0023510:	74 28                	je     c002353a <SysRead(regs*)+0x61>
c0023512:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002351a:	31 ff                	xor    edi,edi
c002351c:	83 ec 0c             	sub    esp,0xc
c002351f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023521:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023525:	52                   	push   edx
c0023526:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023529:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c002352c:	57                   	push   edi
c002352d:	56                   	push   esi
c002352e:	51                   	push   ecx
c002352f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023532:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023536:	83 c4 20             	add    esp,0x20
c0023539:	99                   	cdq    
c002353a:	83 c4 10             	add    esp,0x10
c002353d:	5b                   	pop    ebx
c002353e:	5e                   	pop    esi
c002353f:	5f                   	pop    edi
c0023540:	c3                   	ret    

c0023541 <SysRegisterSignal(regs*)>:
c0023541:	83 ec 18             	sub    esp,0x18
c0023544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023548:	6a 00                	push   0x0
c002354a:	6a 00                	push   0x0
c002354c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002354f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023552:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023557:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002355a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023560:	e8 bc d7 ff ff       	call   c0020d21 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023565:	83 c4 2c             	add    esp,0x2c
c0023568:	99                   	cdq    
c0023569:	c3                   	ret    

c002356a <SysRegistryGetTypeFromPath(regs*)>:
c002356a:	57                   	push   edi
c002356b:	56                   	push   esi
c002356c:	53                   	push   ebx
c002356d:	81 ec 38 01 00 00    	sub    esp,0x138
c0023573:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c002357a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002357d:	68 3d 2e 03 c0       	push   0xc0032e3d
c0023582:	e8 fe 5e ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0023587:	5a                   	pop    edx
c0023588:	59                   	pop    ecx
c0023589:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002358c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002358f:	e8 4c f6 ff ff       	call   c0022be0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023594:	5f                   	pop    edi
c0023595:	89 c6                	mov    esi,eax
c0023597:	5a                   	pop    edx
c0023598:	50                   	push   eax
c0023599:	68 5d 2e 03 c0       	push   0xc0032e5d
c002359e:	e8 e2 5e ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00235a3:	83 c4 10             	add    esp,0x10
c00235a6:	85 f6                	test   esi,esi
c00235a8:	74 28                	je     c00235d2 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00235aa:	50                   	push   eax
c00235ab:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00235af:	57                   	push   edi
c00235b0:	56                   	push   esi
c00235b1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00235b4:	e8 0b f2 ff ff       	call   c00227c4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00235b9:	83 c4 0c             	add    esp,0xc
c00235bc:	89 c3                	mov    ebx,eax
c00235be:	57                   	push   edi
c00235bf:	50                   	push   eax
c00235c0:	68 65 2e 03 c0       	push   0xc0032e65
c00235c5:	e8 bb 5e ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00235ca:	89 d8                	mov    eax,ebx
c00235cc:	83 c4 10             	add    esp,0x10
c00235cf:	99                   	cdq    
c00235d0:	eb 05                	jmp    c00235d7 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00235d2:	83 c8 ff             	or     eax,0xffffffff
c00235d5:	89 c2                	mov    edx,eax
c00235d7:	81 c4 30 01 00 00    	add    esp,0x130
c00235dd:	5b                   	pop    ebx
c00235de:	5e                   	pop    esi
c00235df:	5f                   	pop    edi
c00235e0:	c3                   	ret    

c00235e1 <SysRegistryReadExtent(regs*)>:
c00235e1:	83 ec 1c             	sub    esp,0x1c
c00235e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00235e8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00235eb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00235ee:	85 c0                	test   eax,eax
c00235f0:	79 1f                	jns    c0023611 <SysRegistryReadExtent(regs*)+0x30>
c00235f2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00235f7:	52                   	push   edx
c00235f8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00235fc:	52                   	push   edx
c00235fd:	50                   	push   eax
c00235fe:	51                   	push   ecx
c00235ff:	e8 b2 f0 ff ff       	call   c00226b6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0023604:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023608:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002360c:	83 c4 10             	add    esp,0x10
c002360f:	eb 14                	jmp    c0023625 <SysRegistryReadExtent(regs*)+0x44>
c0023611:	83 ec 04             	sub    esp,0x4
c0023614:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0023617:	50                   	push   eax
c0023618:	51                   	push   ecx
c0023619:	e8 32 eb ff ff       	call   c0022150 <CmGetString(Reghive_Tag*, int, char*)>
c002361e:	83 c4 10             	add    esp,0x10
c0023621:	31 c0                	xor    eax,eax
c0023623:	31 d2                	xor    edx,edx
c0023625:	83 c4 1c             	add    esp,0x1c
c0023628:	c3                   	ret    

c0023629 <SysRegistryPathToExtentLookup(regs*)>:
c0023629:	53                   	push   ebx
c002362a:	83 ec 10             	sub    esp,0x10
c002362d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023631:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023634:	68 7b 2e 03 c0       	push   0xc0032e7b
c0023639:	e8 47 5e ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002363e:	58                   	pop    eax
c002363f:	5a                   	pop    edx
c0023640:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023643:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023646:	e8 95 f5 ff ff       	call   c0022be0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c002364b:	83 c4 18             	add    esp,0x18
c002364e:	99                   	cdq    
c002364f:	5b                   	pop    ebx
c0023650:	c3                   	ret    

c0023651 <SysRegistryEnterDirectory(regs*)>:
c0023651:	53                   	push   ebx
c0023652:	83 ec 10             	sub    esp,0x10
c0023655:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023659:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002365c:	68 9e 2e 03 c0       	push   0xc0032e9e
c0023661:	e8 1f 5e ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0023666:	58                   	pop    eax
c0023667:	5a                   	pop    edx
c0023668:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002366b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002366e:	e8 54 eb ff ff       	call   c00221c7 <CmEnterDirectory(Reghive_Tag*, int)>
c0023673:	83 c4 18             	add    esp,0x18
c0023676:	99                   	cdq    
c0023677:	5b                   	pop    ebx
c0023678:	c3                   	ret    

c0023679 <SysRegistryGetNext(regs*)>:
c0023679:	53                   	push   ebx
c002367a:	83 ec 10             	sub    esp,0x10
c002367d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023681:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023684:	68 bc 2e 03 c0       	push   0xc0032ebc
c0023689:	e8 f7 5d ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002368e:	58                   	pop    eax
c002368f:	5a                   	pop    edx
c0023690:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023693:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023696:	e8 6b eb ff ff       	call   c0022206 <CmGetNext(Reghive_Tag*, int)>
c002369b:	83 c4 18             	add    esp,0x18
c002369e:	99                   	cdq    
c002369f:	5b                   	pop    ebx
c00236a0:	c3                   	ret    

c00236a1 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00236a1:	57                   	push   edi
c00236a2:	56                   	push   esi
c00236a3:	53                   	push   ebx
c00236a4:	81 ec 34 01 00 00    	sub    esp,0x134
c00236aa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00236b1:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00236b5:	57                   	push   edi
c00236b6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00236b9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00236bc:	e8 03 f1 ff ff       	call   c00227c4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00236c1:	89 c3                	mov    ebx,eax
c00236c3:	58                   	pop    eax
c00236c4:	5a                   	pop    edx
c00236c5:	57                   	push   edi
c00236c6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00236c9:	e8 72 cf fd ff       	call   c0000640 <strcpy>
c00236ce:	89 d8                	mov    eax,ebx
c00236d0:	81 c4 40 01 00 00    	add    esp,0x140
c00236d6:	99                   	cdq    
c00236d7:	5b                   	pop    ebx
c00236d8:	5e                   	pop    esi
c00236d9:	5f                   	pop    edi
c00236da:	c3                   	ret    

c00236db <SysRegistryOpen(regs*)>:
c00236db:	83 ec 18             	sub    esp,0x18
c00236de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236e2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00236e5:	e8 f6 e8 ff ff       	call   c0021fe0 <CmOpen(char const*)>
c00236ea:	83 c4 1c             	add    esp,0x1c
c00236ed:	99                   	cdq    
c00236ee:	c3                   	ret    

c00236ef <SysRegistryClose(regs*)>:
c00236ef:	83 ec 18             	sub    esp,0x18
c00236f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00236f9:	e8 00 ea ff ff       	call   c00220fe <CmClose(Reghive_Tag*)>
c00236fe:	31 c0                	xor    eax,eax
c0023700:	31 d2                	xor    edx,edx
c0023702:	83 c4 1c             	add    esp,0x1c
c0023705:	c3                   	ret    

c0023706 <SysSbrk(regs*)>:
c0023706:	56                   	push   esi
c0023707:	53                   	push   ebx
c0023708:	50                   	push   eax
c0023709:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002370e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023712:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023715:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0023718:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c002371e:	85 db                	test   ebx,ebx
c0023720:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0023723:	74 02                	je     c0023727 <SysSbrk(regs*)+0x21>
c0023725:	79 06                	jns    c002372d <SysSbrk(regs*)+0x27>
c0023727:	89 f0                	mov    eax,esi
c0023729:	31 d2                	xor    edx,edx
c002372b:	eb 2a                	jmp    c0023757 <SysSbrk(regs*)+0x51>
c002372d:	83 c8 ff             	or     eax,0xffffffff
c0023730:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0023736:	89 c2                	mov    edx,eax
c0023738:	77 1d                	ja     c0023757 <SysSbrk(regs*)+0x51>
c002373a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0023740:	50                   	push   eax
c0023741:	c1 ea 0c             	shr    edx,0xc
c0023744:	68 07 0c 00 00       	push   0xc07
c0023749:	52                   	push   edx
c002374a:	51                   	push   ecx
c002374b:	e8 14 52 ff ff       	call   c0018964 <VAS::allocatePages(int, int)>
c0023750:	89 f0                	mov    eax,esi
c0023752:	31 d2                	xor    edx,edx
c0023754:	83 c4 10             	add    esp,0x10
c0023757:	59                   	pop    ecx
c0023758:	5b                   	pop    ebx
c0023759:	5e                   	pop    esi
c002375a:	c3                   	ret    

c002375b <SysSetCwd(regs*)>:
c002375b:	83 ec 14             	sub    esp,0x14
c002375e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023762:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023765:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002376a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002376d:	e8 9b 72 ff ff       	call   c001aa0d <Fs::setcwd(Process*, char*)>
c0023772:	83 c4 1c             	add    esp,0x1c
c0023775:	99                   	cdq    
c0023776:	c3                   	ret    

c0023777 <SysSetTime(regs*)>:
c0023777:	55                   	push   ebp
c0023778:	31 c9                	xor    ecx,ecx
c002377a:	57                   	push   edi
c002377b:	bd 0c 00 00 00       	mov    ebp,0xc
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	31 db                	xor    ebx,ebx
c0023784:	83 ec 10             	sub    esp,0x10
c0023787:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002378b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c002378e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023791:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023794:	89 c2                	mov    edx,eax
c0023796:	81 ef 6c 07 00 00    	sub    edi,0x76c
c002379c:	83 e2 1f             	and    edx,0x1f
c002379f:	c1 e7 10             	shl    edi,0x10
c00237a2:	42                   	inc    edx
c00237a3:	c1 e8 05             	shr    eax,0x5
c00237a6:	88 d1                	mov    cl,dl
c00237a8:	31 d2                	xor    edx,edx
c00237aa:	f7 f5                	div    ebp
c00237ac:	89 dd                	mov    ebp,ebx
c00237ae:	88 d5                	mov    ch,dl
c00237b0:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00237b6:	0f b7 c1             	movzx  eax,cx
c00237b9:	31 d2                	xor    edx,edx
c00237bb:	09 f8                	or     eax,edi
c00237bd:	bf 3c 00 00 00       	mov    edi,0x3c
c00237c2:	89 c1                	mov    ecx,eax
c00237c4:	89 f0                	mov    eax,esi
c00237c6:	f7 f7                	div    edi
c00237c8:	c1 e2 10             	shl    edx,0x10
c00237cb:	09 d5                	or     ebp,edx
c00237cd:	31 d2                	xor    edx,edx
c00237cf:	89 eb                	mov    ebx,ebp
c00237d1:	f7 f7                	div    edi
c00237d3:	bf 10 0e 00 00       	mov    edi,0xe10
c00237d8:	88 d7                	mov    bh,dl
c00237da:	89 f0                	mov    eax,esi
c00237dc:	31 d2                	xor    edx,edx
c00237de:	f7 f7                	div    edi
c00237e0:	bf 18 00 00 00       	mov    edi,0x18
c00237e5:	31 d2                	xor    edx,edx
c00237e7:	f7 f7                	div    edi
c00237e9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00237ee:	88 d3                	mov    bl,dl
c00237f0:	53                   	push   ebx
c00237f1:	51                   	push   ecx
c00237f2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00237f8:	e8 1d 7a ff ff       	call   c001b21a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00237fd:	83 c4 1c             	add    esp,0x1c
c0023800:	83 f0 01             	xor    eax,0x1
c0023803:	5b                   	pop    ebx
c0023804:	0f b6 c0             	movzx  eax,al
c0023807:	5e                   	pop    esi
c0023808:	31 d2                	xor    edx,edx
c002380a:	5f                   	pop    edi
c002380b:	5d                   	pop    ebp
c002380c:	c3                   	ret    

c002380d <SysSymlink(regs*)>:
c002380d:	56                   	push   esi
c002380e:	83 c8 ff             	or     eax,0xffffffff
c0023811:	53                   	push   ebx
c0023812:	89 c2                	mov    edx,eax
c0023814:	81 ec 34 02 00 00    	sub    esp,0x234
c002381a:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0023821:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023825:	74 50                	je     c0023877 <SysSymlink(regs*)+0x6a>
c0023827:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c002382a:	85 c9                	test   ecx,ecx
c002382c:	74 49                	je     c0023877 <SysSymlink(regs*)+0x6a>
c002382e:	6a 01                	push   0x1
c0023830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023835:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023838:	05 0c 01 00 00       	add    eax,0x10c
c002383d:	50                   	push   eax
c002383e:	51                   	push   ecx
c002383f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0023843:	56                   	push   esi
c0023844:	e8 4b 6b ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023849:	6a 01                	push   0x1
c002384b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023850:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023853:	05 0c 01 00 00       	add    eax,0x10c
c0023858:	50                   	push   eax
c0023859:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002385c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0023863:	53                   	push   ebx
c0023864:	e8 2b 6b ff ff       	call   c001a394 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023869:	83 c4 18             	add    esp,0x18
c002386c:	56                   	push   esi
c002386d:	53                   	push   ebx
c002386e:	e8 30 67 ff ff       	call   c0019fa3 <KeCreateSymlink(char const*, char const*)>
c0023873:	83 c4 10             	add    esp,0x10
c0023876:	99                   	cdq    
c0023877:	81 c4 34 02 00 00    	add    esp,0x234
c002387d:	5b                   	pop    ebx
c002387e:	5e                   	pop    esi
c002387f:	c3                   	ret    

c0023880 <SysTimezone(regs*)>:
c0023880:	53                   	push   ebx
c0023881:	83 ec 08             	sub    esp,0x8
c0023884:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023888:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c002388c:	75 17                	jne    c00238a5 <SysTimezone(regs*)+0x25>
c002388e:	83 ec 0c             	sub    esp,0xc
c0023891:	68 d3 2e 03 c0       	push   0xc0032ed3
c0023896:	e8 ea 5b ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002389b:	83 c8 ff             	or     eax,0xffffffff
c002389e:	83 c4 10             	add    esp,0x10
c00238a1:	89 c2                	mov    edx,eax
c00238a3:	eb 20                	jmp    c00238c5 <SysTimezone(regs*)+0x45>
c00238a5:	83 ec 0c             	sub    esp,0xc
c00238a8:	68 e8 2e 03 c0       	push   0xc0032ee8
c00238ad:	e8 d3 5b ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00238b2:	58                   	pop    eax
c00238b3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00238b6:	e8 c9 76 ff ff       	call   c001af84 <User::loadClockSettings(int)>
c00238bb:	83 c4 10             	add    esp,0x10
c00238be:	b8 01 00 00 00       	mov    eax,0x1
c00238c3:	31 d2                	xor    edx,edx
c00238c5:	83 c4 08             	add    esp,0x8
c00238c8:	5b                   	pop    ebx
c00238c9:	c3                   	ret    

c00238ca <SysTruncate(regs*)>:
c00238ca:	55                   	push   ebp
c00238cb:	57                   	push   edi
c00238cc:	31 ff                	xor    edi,edi
c00238ce:	56                   	push   esi
c00238cf:	53                   	push   ebx
c00238d0:	83 ec 0c             	sub    esp,0xc
c00238d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00238d7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00238da:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00238dd:	89 ce                	mov    esi,ecx
c00238df:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00238e3:	0f 84 9a 00 00 00    	je     c0023983 <SysTruncate(regs*)+0xb9>
c00238e9:	83 ec 0c             	sub    esp,0xc
c00238ec:	68 14 01 00 00       	push   0x114
c00238f1:	e8 00 2d ff ff       	call   c00165f6 <malloc>
c00238f6:	83 c4 0c             	add    esp,0xc
c00238f9:	89 c3                	mov    ebx,eax
c00238fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023900:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023903:	55                   	push   ebp
c0023904:	53                   	push   ebx
c0023905:	e8 82 6d ff ff       	call   c001a68c <File::File(char const*, Process*)>
c002390a:	83 c4 10             	add    esp,0x10
c002390d:	31 d2                	xor    edx,edx
c002390f:	b8 03 00 00 00       	mov    eax,0x3
c0023914:	85 db                	test   ebx,ebx
c0023916:	0f 84 a2 00 00 00    	je     c00239be <SysTruncate(regs*)+0xf4>
c002391c:	51                   	push   ecx
c002391d:	51                   	push   ecx
c002391e:	6a 02                	push   0x2
c0023920:	53                   	push   ebx
c0023921:	e8 84 6d ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0023926:	83 c4 10             	add    esp,0x10
c0023929:	85 c0                	test   eax,eax
c002392b:	74 13                	je     c0023940 <SysTruncate(regs*)+0x76>
c002392d:	83 ec 0c             	sub    esp,0xc
c0023930:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023932:	53                   	push   ebx
c0023933:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023936:	83 c4 10             	add    esp,0x10
c0023939:	b8 04 00 00 00       	mov    eax,0x4
c002393e:	eb 7c                	jmp    c00239bc <SysTruncate(regs*)+0xf2>
c0023940:	52                   	push   edx
c0023941:	57                   	push   edi
c0023942:	56                   	push   esi
c0023943:	53                   	push   ebx
c0023944:	e8 75 6e ff ff       	call   c001a7be <File::truncate(unsigned long long)>
c0023949:	83 c4 10             	add    esp,0x10
c002394c:	85 c0                	test   eax,eax
c002394e:	74 1b                	je     c002396b <SysTruncate(regs*)+0xa1>
c0023950:	83 ec 0c             	sub    esp,0xc
c0023953:	53                   	push   ebx
c0023954:	e8 af 6d ff ff       	call   c001a708 <File::close()>
c0023959:	8b 03                	mov    eax,DWORD PTR [ebx]
c002395b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002395e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023961:	83 c4 10             	add    esp,0x10
c0023964:	b8 05 00 00 00       	mov    eax,0x5
c0023969:	eb 51                	jmp    c00239bc <SysTruncate(regs*)+0xf2>
c002396b:	83 ec 0c             	sub    esp,0xc
c002396e:	53                   	push   ebx
c002396f:	e8 94 6d ff ff       	call   c001a708 <File::close()>
c0023974:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023979:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002397c:	83 c4 10             	add    esp,0x10
c002397f:	31 c0                	xor    eax,eax
c0023981:	eb 39                	jmp    c00239bc <SysTruncate(regs*)+0xf2>
c0023983:	31 d2                	xor    edx,edx
c0023985:	b8 01 00 00 00       	mov    eax,0x1
c002398a:	83 fd 02             	cmp    ebp,0x2
c002398d:	7e 2f                	jle    c00239be <SysTruncate(regs*)+0xf4>
c002398f:	83 ec 0c             	sub    esp,0xc
c0023992:	51                   	push   ecx
c0023993:	e8 5b 46 ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c0023998:	83 c4 10             	add    esp,0x10
c002399b:	89 c1                	mov    ecx,eax
c002399d:	31 d2                	xor    edx,edx
c002399f:	b8 02 00 00 00       	mov    eax,0x2
c00239a4:	85 c9                	test   ecx,ecx
c00239a6:	74 16                	je     c00239be <SysTruncate(regs*)+0xf4>
c00239a8:	50                   	push   eax
c00239a9:	57                   	push   edi
c00239aa:	56                   	push   esi
c00239ab:	51                   	push   ecx
c00239ac:	e8 0d 6e ff ff       	call   c001a7be <File::truncate(unsigned long long)>
c00239b1:	83 c4 10             	add    esp,0x10
c00239b4:	85 c0                	test   eax,eax
c00239b6:	0f 95 c0             	setne  al
c00239b9:	0f b6 c0             	movzx  eax,al
c00239bc:	31 d2                	xor    edx,edx
c00239be:	83 c4 0c             	add    esp,0xc
c00239c1:	5b                   	pop    ebx
c00239c2:	5e                   	pop    esi
c00239c3:	5f                   	pop    edi
c00239c4:	5d                   	pop    ebp
c00239c5:	c3                   	ret    

c00239c6 <SysWrite(regs*)>:
c00239c6:	57                   	push   edi
c00239c7:	56                   	push   esi
c00239c8:	53                   	push   ebx
c00239c9:	83 ec 10             	sub    esp,0x10
c00239cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00239d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00239d3:	83 f8 02             	cmp    eax,0x2
c00239d6:	77 10                	ja     c00239e8 <SysWrite(regs*)+0x22>
c00239d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239e0:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00239e6:	eb 0e                	jmp    c00239f6 <SysWrite(regs*)+0x30>
c00239e8:	83 ec 0c             	sub    esp,0xc
c00239eb:	50                   	push   eax
c00239ec:	e8 02 46 ff ff       	call   c0017ff3 <KeGetFileFromDescriptor(int)>
c00239f1:	83 c4 10             	add    esp,0x10
c00239f4:	89 c1                	mov    ecx,eax
c00239f6:	83 c8 ff             	or     eax,0xffffffff
c00239f9:	85 c9                	test   ecx,ecx
c00239fb:	89 c2                	mov    edx,eax
c00239fd:	74 28                	je     c0023a27 <SysWrite(regs*)+0x61>
c00239ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023a07:	31 ff                	xor    edi,edi
c0023a09:	83 ec 0c             	sub    esp,0xc
c0023a0c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023a0e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023a12:	52                   	push   edx
c0023a13:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023a16:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023a19:	57                   	push   edi
c0023a1a:	56                   	push   esi
c0023a1b:	51                   	push   ecx
c0023a1c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0023a1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023a23:	83 c4 20             	add    esp,0x20
c0023a26:	99                   	cdq    
c0023a27:	83 c4 10             	add    esp,0x10
c0023a2a:	5b                   	pop    ebx
c0023a2b:	5e                   	pop    esi
c0023a2c:	5f                   	pop    edi
c0023a2d:	c3                   	ret    

c0023a2e <SysWsbe(regs*)>:
c0023a2e:	57                   	push   edi
c0023a2f:	b9 0b 00 00 00       	mov    ecx,0xb
c0023a34:	56                   	push   esi
c0023a35:	be 27 2f 03 c0       	mov    esi,0xc0032f27
c0023a3a:	53                   	push   ebx
c0023a3b:	83 ec 30             	sub    esp,0x30
c0023a3e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023a42:	fc                   	cld    
c0023a43:	83 ec 0c             	sub    esp,0xc
c0023a46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023a48:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023a4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a54:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023a5a:	8b 06                	mov    eax,DWORD PTR [esi]
c0023a5c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023a5f:	57                   	push   edi
c0023a60:	e8 0b cb fd ff       	call   c0000570 <strlen>
c0023a65:	5a                   	pop    edx
c0023a66:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023a6a:	52                   	push   edx
c0023a6b:	31 d2                	xor    edx,edx
c0023a6d:	57                   	push   edi
c0023a6e:	52                   	push   edx
c0023a6f:	50                   	push   eax
c0023a70:	56                   	push   esi
c0023a71:	ff d3                	call   ebx
c0023a73:	83 c4 14             	add    esp,0x14
c0023a76:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023a7a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023a7d:	e8 b2 21 00 00       	call   c0025c34 <terminateTask(int)>
c0023a82:	83 c4 40             	add    esp,0x40
c0023a85:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023a8a:	5b                   	pop    ebx
c0023a8b:	31 d2                	xor    edx,edx
c0023a8d:	5e                   	pop    esi
c0023a8e:	5f                   	pop    edi
c0023a8f:	c3                   	ret    

c0023a90 <SysYield(regs*)>:
c0023a90:	83 ec 0c             	sub    esp,0xc
c0023a93:	fa                   	cli    
c0023a94:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023a9a:	e8 15 1a 00 00       	call   c00254b4 <schedule()>
c0023a9f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023aa4:	48                   	dec    eax
c0023aa5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023aaa:	75 01                	jne    c0023aad <SysYield(regs*)+0x1d>
c0023aac:	fb                   	sti    
c0023aad:	31 c0                	xor    eax,eax
c0023aaf:	31 d2                	xor    edx,edx
c0023ab1:	83 c4 0c             	add    esp,0xc
c0023ab4:	c3                   	ret    

c0023ab5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023ab5:	55                   	push   ebp
c0023ab6:	57                   	push   edi
c0023ab7:	56                   	push   esi
c0023ab8:	53                   	push   ebx
c0023ab9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023abf:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023ac7:	0f 95 c0             	setne  al
c0023aca:	31 d2                	xor    edx,edx
c0023acc:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023ad4:	0f 94 c2             	sete   dl
c0023ad7:	85 c2                	test   edx,eax
c0023ad9:	74 34                	je     c0023b0f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023adb:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023ae6:	74 27                	je     c0023b0f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023ae8:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023aef:	05 00 10 00 00       	add    eax,0x1000
c0023af4:	89 c1                	mov    ecx,eax
c0023af6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023afb:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0023b01:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0023b08:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0023b0f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023b16:	83 ec 0c             	sub    esp,0xc
c0023b19:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023b1f:	6a 01                	push   0x1
c0023b21:	e8 27 46 ff ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c0023b26:	83 c4 10             	add    esp,0x10
c0023b29:	89 c3                	mov    ebx,eax
c0023b2b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023b31:	0f 86 25 01 00 00    	jbe    c0023c5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023b37:	c1 ee 0c             	shr    esi,0xc
c0023b3a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023b41:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023b45:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023b4d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023b54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023b58:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023b5f:	29 ef                	sub    edi,ebp
c0023b61:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0023b65:	0f 83 f8 00 00 00    	jae    c0023c63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0023b6b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023b71:	76 05                	jbe    c0023b78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0023b73:	bf 00 10 00 00       	mov    edi,0x1000
c0023b78:	83 ec 0c             	sub    esp,0xc
c0023b7b:	31 d2                	xor    edx,edx
c0023b7d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023b84:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b86:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023b8a:	50                   	push   eax
c0023b8b:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023b8f:	56                   	push   esi
c0023b90:	52                   	push   edx
c0023b91:	57                   	push   edi
c0023b92:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023b99:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023b9c:	83 c4 20             	add    esp,0x20
c0023b9f:	85 c0                	test   eax,eax
c0023ba1:	75 06                	jne    c0023ba9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0023ba3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023ba7:	74 13                	je     c0023bbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023ba9:	83 ec 0c             	sub    esp,0xc
c0023bac:	53                   	push   ebx
c0023bad:	e8 b9 48 ff ff       	call   c001846b <Virt::freeKernelVirtualPages(unsigned long)>
c0023bb2:	83 c4 10             	add    esp,0x10
c0023bb5:	31 c0                	xor    eax,eax
c0023bb7:	e9 7c 01 00 00       	jmp    c0023d38 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023bbc:	fa                   	cli    
c0023bbd:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023bc3:	e8 37 2d ff ff       	call   c00168ff <Phys::allocatePage()>
c0023bc8:	6a 07                	push   0x7
c0023bca:	89 c7                	mov    edi,eax
c0023bcc:	53                   	push   ebx
c0023bcd:	50                   	push   eax
c0023bce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023bd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023bd6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023bdc:	e8 7f 4c ff ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023be1:	83 c4 0c             	add    esp,0xc
c0023be4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023beb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023bf1:	6a 00                	push   0x0
c0023bf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023bf8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023bfb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c01:	e8 c0 4a ff ff       	call   c00186c6 <VAS::mapOtherVASIn(bool, VAS*)>
c0023c06:	58                   	pop    eax
c0023c07:	5a                   	pop    edx
c0023c08:	68 07 0c 00 00       	push   0xc07
c0023c0d:	55                   	push   ebp
c0023c0e:	57                   	push   edi
c0023c0f:	89 df                	mov    edi,ebx
c0023c11:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023c18:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c1e:	6a 00                	push   0x0
c0023c20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c28:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c2e:	e8 7f 4e ff ff       	call   c0018ab2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023c33:	b9 00 10 00 00       	mov    ecx,0x1000
c0023c38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023c3a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023c3f:	83 c4 20             	add    esp,0x20
c0023c42:	48                   	dec    eax
c0023c43:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023c48:	85 c0                	test   eax,eax
c0023c4a:	75 01                	jne    c0023c4d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0023c4c:	fb                   	sti    
c0023c4d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023c53:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023c57:	e9 f1 fe ff ff       	jmp    c0023b4d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023c5c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023c63:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023c6a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023c70:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023c76:	0f 86 ae 00 00 00    	jbe    c0023d2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023c7c:	fa                   	cli    
c0023c7d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023c83:	c1 ee 0c             	shr    esi,0xc
c0023c86:	51                   	push   ecx
c0023c87:	31 ff                	xor    edi,edi
c0023c89:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023c90:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c96:	6a 00                	push   0x0
c0023c98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023ca0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ca6:	e8 1b 4a ff ff       	call   c00186c6 <VAS::mapOtherVASIn(bool, VAS*)>
c0023cab:	83 c4 10             	add    esp,0x10
c0023cae:	e8 4c 2c ff ff       	call   c00168ff <Phys::allocatePage()>
c0023cb3:	47                   	inc    edi
c0023cb4:	6a 07                	push   0x7
c0023cb6:	53                   	push   ebx
c0023cb7:	50                   	push   eax
c0023cb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023cbc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023cc2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023cc5:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023ccb:	e8 90 4b ff ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023cd0:	58                   	pop    eax
c0023cd1:	5a                   	pop    edx
c0023cd2:	68 07 0c 00 00       	push   0xc07
c0023cd7:	55                   	push   ebp
c0023cd8:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023cde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ce2:	50                   	push   eax
c0023ce3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023cea:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023cf0:	6a 00                	push   0x0
c0023cf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023cf7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023cfa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d00:	e8 ad 4d ff ff       	call   c0018ab2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023d05:	83 c4 1c             	add    esp,0x1c
c0023d08:	68 00 10 00 00       	push   0x1000
c0023d0d:	6a 00                	push   0x0
c0023d0f:	53                   	push   ebx
c0023d10:	e8 db c7 fd ff       	call   c00004f0 <memset>
c0023d15:	83 c4 10             	add    esp,0x10
c0023d18:	39 fe                	cmp    esi,edi
c0023d1a:	77 92                	ja     c0023cae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0023d1c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023d21:	48                   	dec    eax
c0023d22:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023d27:	75 01                	jne    c0023d2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023d29:	fb                   	sti    
c0023d2a:	83 ec 0c             	sub    esp,0xc
c0023d2d:	53                   	push   ebx
c0023d2e:	e8 38 47 ff ff       	call   c001846b <Virt::freeKernelVirtualPages(unsigned long)>
c0023d33:	83 c4 10             	add    esp,0x10
c0023d36:	b0 01                	mov    al,0x1
c0023d38:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023d3e:	5b                   	pop    ebx
c0023d3f:	5e                   	pop    esi
c0023d40:	5f                   	pop    edi
c0023d41:	5d                   	pop    ebp
c0023d42:	c3                   	ret    

c0023d43 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023d43:	55                   	push   ebp
c0023d44:	57                   	push   edi
c0023d45:	56                   	push   esi
c0023d46:	53                   	push   ebx
c0023d47:	83 ec 48             	sub    esp,0x48
c0023d4a:	68 14 01 00 00       	push   0x114
c0023d4f:	e8 a2 28 ff ff       	call   c00165f6 <malloc>
c0023d54:	83 c4 0c             	add    esp,0xc
c0023d57:	89 c6                	mov    esi,eax
c0023d59:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023d5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023d61:	50                   	push   eax
c0023d62:	e8 25 69 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c0023d67:	58                   	pop    eax
c0023d68:	5a                   	pop    edx
c0023d69:	6a 01                	push   0x1
c0023d6b:	56                   	push   esi
c0023d6c:	e8 39 69 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0023d71:	83 c4 10             	add    esp,0x10
c0023d74:	85 c0                	test   eax,eax
c0023d76:	0f 85 43 01 00 00    	jne    c0023ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023d7c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023d84:	83 ec 0c             	sub    esp,0xc
c0023d87:	6a 34                	push   0x34
c0023d89:	e8 68 28 ff ff       	call   c00165f6 <malloc>
c0023d8e:	89 c3                	mov    ebx,eax
c0023d90:	58                   	pop    eax
c0023d91:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d93:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023d97:	57                   	push   edi
c0023d98:	53                   	push   ebx
c0023d99:	6a 00                	push   0x0
c0023d9b:	6a 34                	push   0x34
c0023d9d:	56                   	push   esi
c0023d9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023da1:	83 c4 20             	add    esp,0x20
c0023da4:	85 c0                	test   eax,eax
c0023da6:	0f 85 13 01 00 00    	jne    c0023ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023dac:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023db2:	0f 85 07 01 00 00    	jne    c0023ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023db8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023dbb:	85 c0                	test   eax,eax
c0023dbd:	0f 84 fc 00 00 00    	je     c0023ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023dc3:	31 d2                	xor    edx,edx
c0023dc5:	55                   	push   ebp
c0023dc6:	52                   	push   edx
c0023dc7:	50                   	push   eax
c0023dc8:	56                   	push   esi
c0023dc9:	e8 9a 69 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0023dce:	83 c4 10             	add    esp,0x10
c0023dd1:	85 c0                	test   eax,eax
c0023dd3:	0f 85 e6 00 00 00    	jne    c0023ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023dd9:	83 ec 0c             	sub    esp,0xc
c0023ddc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023ddf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023de3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023de7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023deb:	0f af c2             	imul   eax,edx
c0023dee:	50                   	push   eax
c0023def:	e8 02 28 ff ff       	call   c00165f6 <malloc>
c0023df4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023df6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023dfa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023dfd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023e01:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023e05:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023e09:	0f af c2             	imul   eax,edx
c0023e0c:	99                   	cdq    
c0023e0d:	52                   	push   edx
c0023e0e:	50                   	push   eax
c0023e0f:	56                   	push   esi
c0023e10:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023e16:	83 c4 20             	add    esp,0x20
c0023e19:	85 c0                	test   eax,eax
c0023e1b:	0f 84 9e 00 00 00    	je     c0023ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023e21:	31 d2                	xor    edx,edx
c0023e23:	51                   	push   ecx
c0023e24:	52                   	push   edx
c0023e25:	50                   	push   eax
c0023e26:	56                   	push   esi
c0023e27:	e8 3c 69 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0023e2c:	83 c4 10             	add    esp,0x10
c0023e2f:	85 c0                	test   eax,eax
c0023e31:	0f 85 88 00 00 00    	jne    c0023ebf <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023e37:	83 ec 0c             	sub    esp,0xc
c0023e3a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023e3e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023e42:	31 ed                	xor    ebp,ebp
c0023e44:	0f af c2             	imul   eax,edx
c0023e47:	50                   	push   eax
c0023e48:	e8 a9 27 ff ff       	call   c00165f6 <malloc>
c0023e4d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023e4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e53:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e5a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023e5e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023e62:	0f af c2             	imul   eax,edx
c0023e65:	99                   	cdq    
c0023e66:	52                   	push   edx
c0023e67:	50                   	push   eax
c0023e68:	56                   	push   esi
c0023e69:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e6c:	83 c4 20             	add    esp,0x20
c0023e6f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023e77:	0f b7 fd             	movzx  edi,bp
c0023e7a:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0023e7e:	73 7d                	jae    c0023efd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023e80:	c1 e7 05             	shl    edi,0x5
c0023e83:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023e87:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023e8a:	75 6b                	jne    c0023ef7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023e8c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0023e8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023e93:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023e96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e9a:	52                   	push   edx
c0023e9b:	31 d2                	xor    edx,edx
c0023e9d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023ea0:	52                   	push   edx
c0023ea1:	50                   	push   eax
c0023ea2:	56                   	push   esi
c0023ea3:	e8 c0 68 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0023ea8:	83 c4 10             	add    esp,0x10
c0023eab:	85 c0                	test   eax,eax
c0023ead:	74 17                	je     c0023ec6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0023eaf:	83 ec 0c             	sub    esp,0xc
c0023eb2:	68 53 2f 03 c0       	push   0xc0032f53
c0023eb7:	e8 c9 55 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0023ebc:	83 c4 10             	add    esp,0x10
c0023ebf:	31 c0                	xor    eax,eax
c0023ec1:	e9 87 00 00 00       	jmp    c0023f4d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023ec6:	83 ec 0c             	sub    esp,0xc
c0023ec9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023ecc:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023ecf:	50                   	push   eax
c0023ed0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023ed4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023ed8:	56                   	push   esi
c0023ed9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023edd:	e8 d3 fb ff ff       	call   c0023ab5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023ee2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023ee6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0023eea:	83 c4 20             	add    esp,0x20
c0023eed:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023ef1:	73 04                	jae    c0023ef7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023ef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023ef7:	45                   	inc    ebp
c0023ef8:	e9 7a ff ff ff       	jmp    c0023e77 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023efd:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023f01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023f09:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0023f0f:	83 ec 0c             	sub    esp,0xc
c0023f12:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0023f18:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023f1d:	05 00 10 00 00       	add    eax,0x1000
c0023f22:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023f25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f29:	e8 d8 26 ff ff       	call   c0016606 <free>
c0023f2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f31:	e8 d0 26 ff ff       	call   c0016606 <free>
c0023f36:	58                   	pop    eax
c0023f37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023f3b:	e8 c6 26 ff ff       	call   c0016606 <free>
c0023f40:	89 34 24             	mov    DWORD PTR [esp],esi
c0023f43:	e8 c0 67 ff ff       	call   c001a708 <File::close()>
c0023f48:	83 c4 10             	add    esp,0x10
c0023f4b:	b0 01                	mov    al,0x1
c0023f4d:	83 c4 3c             	add    esp,0x3c
c0023f50:	5b                   	pop    ebx
c0023f51:	5e                   	pop    esi
c0023f52:	5f                   	pop    edi
c0023f53:	5d                   	pop    ebp
c0023f54:	c3                   	ret    

c0023f55 <Thr::runtimeReferenceHelper()>:
c0023f55:	83 ec 18             	sub    esp,0x18
c0023f58:	68 5b 2f 03 c0       	push   0xc0032f5b
c0023f5d:	e8 23 55 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0023f62:	fa                   	cli    
c0023f63:	83 c4 10             	add    esp,0x10
c0023f66:	eb fe                	jmp    c0023f66 <Thr::runtimeReferenceHelper()+0x11>

c0023f68 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023f68:	57                   	push   edi
c0023f69:	56                   	push   esi
c0023f6a:	53                   	push   ebx
c0023f6b:	31 db                	xor    ebx,ebx
c0023f6d:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023f73:	7e 3c                	jle    c0023fb1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023f75:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023f7c:	31 ff                	xor    edi,edi
c0023f7e:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023f85:	7e 27                	jle    c0023fae <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023f87:	50                   	push   eax
c0023f88:	50                   	push   eax
c0023f89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023f8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0023f8f:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023f96:	50                   	push   eax
c0023f97:	e8 b4 c7 fd ff       	call   c0000750 <strcmp>
c0023f9c:	83 c4 10             	add    esp,0x10
c0023f9f:	85 c0                	test   eax,eax
c0023fa1:	75 05                	jne    c0023fa8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023fa3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023fa6:	eb 0b                	jmp    c0023fb3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023fa8:	83 c6 10             	add    esi,0x10
c0023fab:	47                   	inc    edi
c0023fac:	eb d0                	jmp    c0023f7e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023fae:	43                   	inc    ebx
c0023faf:	eb bc                	jmp    c0023f6d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023fb1:	31 c0                	xor    eax,eax
c0023fb3:	5b                   	pop    ebx
c0023fb4:	5e                   	pop    esi
c0023fb5:	5f                   	pop    edi
c0023fb6:	c3                   	ret    

c0023fb7 <Thr::loadKernelSymbolTable(char const*)>:
c0023fb7:	55                   	push   ebp
c0023fb8:	57                   	push   edi
c0023fb9:	56                   	push   esi
c0023fba:	53                   	push   ebx
c0023fbb:	83 ec 68             	sub    esp,0x68
c0023fbe:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023fc4:	68 14 01 00 00       	push   0x114
c0023fc9:	e8 28 26 ff ff       	call   c00165f6 <malloc>
c0023fce:	83 c4 0c             	add    esp,0xc
c0023fd1:	89 c3                	mov    ebx,eax
c0023fd3:	56                   	push   esi
c0023fd4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023fd8:	50                   	push   eax
c0023fd9:	e8 ae 66 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c0023fde:	5e                   	pop    esi
c0023fdf:	5f                   	pop    edi
c0023fe0:	6a 01                	push   0x1
c0023fe2:	53                   	push   ebx
c0023fe3:	e8 c2 66 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0023fe8:	83 c4 10             	add    esp,0x10
c0023feb:	85 c0                	test   eax,eax
c0023fed:	74 0a                	je     c0023ff9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023fef:	83 ec 0c             	sub    esp,0xc
c0023ff2:	68 7d 2f 03 c0       	push   0xc0032f7d
c0023ff7:	eb 34                	jmp    c002402d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023ff9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0024001:	83 ec 0c             	sub    esp,0xc
c0024004:	6a 34                	push   0x34
c0024006:	e8 eb 25 ff ff       	call   c00165f6 <malloc>
c002400b:	59                   	pop    ecx
c002400c:	89 c7                	mov    edi,eax
c002400e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0024012:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024014:	56                   	push   esi
c0024015:	57                   	push   edi
c0024016:	6a 00                	push   0x0
c0024018:	6a 34                	push   0x34
c002401a:	53                   	push   ebx
c002401b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002401e:	83 c4 20             	add    esp,0x20
c0024021:	85 c0                	test   eax,eax
c0024023:	74 17                	je     c002403c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0024025:	83 ec 0c             	sub    esp,0xc
c0024028:	68 94 2f 03 c0       	push   0xc0032f94
c002402d:	e8 6c c4 ff ff       	call   c002049e <KePanic(char const*)>
c0024032:	83 c4 10             	add    esp,0x10
c0024035:	31 c0                	xor    eax,eax
c0024037:	e9 31 02 00 00       	jmp    c002426d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c002403c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0024042:	75 e1                	jne    c0024025 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024044:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0024047:	85 c0                	test   eax,eax
c0024049:	74 da                	je     c0024025 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c002404b:	52                   	push   edx
c002404c:	31 d2                	xor    edx,edx
c002404e:	52                   	push   edx
c002404f:	50                   	push   eax
c0024050:	53                   	push   ebx
c0024051:	e8 12 67 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0024056:	83 c4 10             	add    esp,0x10
c0024059:	85 c0                	test   eax,eax
c002405b:	75 c8                	jne    c0024025 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c002405d:	83 ec 0c             	sub    esp,0xc
c0024060:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024064:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024068:	31 ed                	xor    ebp,ebp
c002406a:	0f af c2             	imul   eax,edx
c002406d:	50                   	push   eax
c002406e:	e8 83 25 ff ff       	call   c00165f6 <malloc>
c0024073:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024079:	89 34 24             	mov    DWORD PTR [esp],esi
c002407c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024080:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024084:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024088:	0f af c2             	imul   eax,edx
c002408b:	99                   	cdq    
c002408c:	52                   	push   edx
c002408d:	50                   	push   eax
c002408e:	53                   	push   ebx
c002408f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024092:	83 c4 20             	add    esp,0x20
c0024095:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002409d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00240a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00240ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00240b5:	0f b7 f5             	movzx  esi,bp
c00240b8:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00240bc:	0f 83 a7 00 00 00    	jae    c0024169 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00240c2:	6b f6 28             	imul   esi,esi,0x28
c00240c5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00240c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00240cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00240d0:	50                   	push   eax
c00240d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00240d5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00240d9:	8b 16                	mov    edx,DWORD PTR [esi]
c00240db:	6b c0 28             	imul   eax,eax,0x28
c00240de:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00240e2:	89 d0                	mov    eax,edx
c00240e4:	31 d2                	xor    edx,edx
c00240e6:	52                   	push   edx
c00240e7:	50                   	push   eax
c00240e8:	53                   	push   ebx
c00240e9:	e8 7a 66 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c00240ee:	83 c4 0c             	add    esp,0xc
c00240f1:	6a 20                	push   0x20
c00240f3:	6a 00                	push   0x0
c00240f5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00240f9:	52                   	push   edx
c00240fa:	e8 f1 c3 fd ff       	call   c00004f0 <memset>
c00240ff:	58                   	pop    eax
c0024100:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024102:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0024106:	51                   	push   ecx
c0024107:	8d 54 24 40          	lea    edx,[esp+0x40]
c002410b:	52                   	push   edx
c002410c:	6a 00                	push   0x0
c002410e:	6a 1f                	push   0x1f
c0024110:	53                   	push   ebx
c0024111:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024114:	83 c4 18             	add    esp,0x18
c0024117:	68 ab 2f 03 c0       	push   0xc0032fab
c002411c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0024120:	52                   	push   edx
c0024121:	e8 2a c6 fd ff       	call   c0000750 <strcmp>
c0024126:	83 c4 10             	add    esp,0x10
c0024129:	85 c0                	test   eax,eax
c002412b:	75 0f                	jne    c002413c <Thr::loadKernelSymbolTable(char const*)+0x185>
c002412d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024130:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024134:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024138:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002413c:	50                   	push   eax
c002413d:	50                   	push   eax
c002413e:	68 b3 2f 03 c0       	push   0xc0032fb3
c0024143:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0024147:	50                   	push   eax
c0024148:	e8 03 c6 fd ff       	call   c0000750 <strcmp>
c002414d:	83 c4 10             	add    esp,0x10
c0024150:	85 c0                	test   eax,eax
c0024152:	75 0f                	jne    c0024163 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0024154:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024157:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002415b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002415f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024163:	45                   	inc    ebp
c0024164:	e9 4c ff ff ff       	jmp    c00240b5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0024169:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002416e:	75 10                	jne    c0024180 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0024170:	83 ec 0c             	sub    esp,0xc
c0024173:	68 bb 2f 03 c0       	push   0xc0032fbb
c0024178:	e8 21 c3 ff ff       	call   c002049e <KePanic(char const*)>
c002417d:	83 c4 10             	add    esp,0x10
c0024180:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0024185:	75 10                	jne    c0024197 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0024187:	83 ec 0c             	sub    esp,0xc
c002418a:	68 bb 2f 03 c0       	push   0xc0032fbb
c002418f:	e8 0a c3 ff ff       	call   c002049e <KePanic(char const*)>
c0024194:	83 c4 10             	add    esp,0x10
c0024197:	31 d2                	xor    edx,edx
c0024199:	50                   	push   eax
c002419a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002419e:	52                   	push   edx
c002419f:	50                   	push   eax
c00241a0:	53                   	push   ebx
c00241a1:	e8 c2 65 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c00241a6:	5a                   	pop    edx
c00241a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00241ab:	e8 46 24 ff ff       	call   c00165f6 <malloc>
c00241b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00241b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00241b8:	31 c9                	xor    ecx,ecx
c00241ba:	5e                   	pop    esi
c00241bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241bd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00241c1:	55                   	push   ebp
c00241c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00241c6:	51                   	push   ecx
c00241c7:	52                   	push   edx
c00241c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00241cc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00241d0:	53                   	push   ebx
c00241d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00241d4:	83 c4 14             	add    esp,0x14
c00241d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00241db:	e8 16 24 ff ff       	call   c00165f6 <malloc>
c00241e0:	89 c6                	mov    esi,eax
c00241e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00241e7:	56                   	push   esi
c00241e8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00241ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00241f0:	51                   	push   ecx
c00241f1:	52                   	push   edx
c00241f2:	53                   	push   ebx
c00241f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00241f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00241fa:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0024200:	83 c4 1c             	add    esp,0x1c
c0024203:	c1 e8 04             	shr    eax,0x4
c0024206:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c002420d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024211:	31 d2                	xor    edx,edx
c0024213:	52                   	push   edx
c0024214:	50                   	push   eax
c0024215:	53                   	push   ebx
c0024216:	e8 4d 65 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c002421b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002421d:	31 d2                	xor    edx,edx
c002421f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024222:	56                   	push   esi
c0024223:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024227:	52                   	push   edx
c0024228:	50                   	push   eax
c0024229:	53                   	push   ebx
c002422a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002422d:	83 c4 14             	add    esp,0x14
c0024230:	53                   	push   ebx
c0024231:	e8 d2 64 ff ff       	call   c001a708 <File::close()>
c0024236:	5d                   	pop    ebp
c0024237:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002423b:	e8 c6 23 ff ff       	call   c0016606 <free>
c0024240:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024243:	e8 be 23 ff ff       	call   c0016606 <free>
c0024248:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c002424d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024251:	8d 50 01             	lea    edx,[eax+0x1]
c0024254:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c002425b:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c0024262:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0024268:	83 c4 10             	add    esp,0x10
c002426b:	b0 01                	mov    al,0x1
c002426d:	83 c4 5c             	add    esp,0x5c
c0024270:	5b                   	pop    ebx
c0024271:	5e                   	pop    esi
c0024272:	5f                   	pop    edi
c0024273:	5d                   	pop    ebp
c0024274:	c3                   	ret    

c0024275 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0024275:	55                   	push   ebp
c0024276:	57                   	push   edi
c0024277:	56                   	push   esi
c0024278:	53                   	push   ebx
c0024279:	81 ec 68 03 00 00    	sub    esp,0x368
c002427f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0024286:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c002428c:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0024290:	68 14 01 00 00       	push   0x114
c0024295:	e8 5c 23 ff ff       	call   c00165f6 <malloc>
c002429a:	83 c4 0c             	add    esp,0xc
c002429d:	89 c5                	mov    ebp,eax
c002429f:	53                   	push   ebx
c00242a0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00242a7:	50                   	push   eax
c00242a8:	e8 df 63 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c00242ad:	5e                   	pop    esi
c00242ae:	5f                   	pop    edi
c00242af:	6a 01                	push   0x1
c00242b1:	55                   	push   ebp
c00242b2:	e8 f3 63 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c00242b7:	83 c4 10             	add    esp,0x10
c00242ba:	85 c0                	test   eax,eax
c00242bc:	0f 85 aa 06 00 00    	jne    c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00242c2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00242ca:	83 ec 0c             	sub    esp,0xc
c00242cd:	6a 34                	push   0x34
c00242cf:	e8 22 23 ff ff       	call   c00165f6 <malloc>
c00242d4:	5b                   	pop    ebx
c00242d5:	89 c7                	mov    edi,eax
c00242d7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00242db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00242de:	53                   	push   ebx
c00242df:	57                   	push   edi
c00242e0:	6a 00                	push   0x0
c00242e2:	6a 34                	push   0x34
c00242e4:	55                   	push   ebp
c00242e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242e8:	83 c4 20             	add    esp,0x20
c00242eb:	85 c0                	test   eax,eax
c00242ed:	0f 85 79 06 00 00    	jne    c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00242f3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00242f9:	0f 85 6d 06 00 00    	jne    c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00242ff:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0024302:	85 c0                	test   eax,eax
c0024304:	0f 84 62 06 00 00    	je     c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002430a:	31 d2                	xor    edx,edx
c002430c:	51                   	push   ecx
c002430d:	52                   	push   edx
c002430e:	50                   	push   eax
c002430f:	55                   	push   ebp
c0024310:	e8 53 64 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0024315:	83 c4 10             	add    esp,0x10
c0024318:	85 c0                	test   eax,eax
c002431a:	0f 85 4c 06 00 00    	jne    c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024320:	83 ec 0c             	sub    esp,0xc
c0024323:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0024326:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c002432a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002432e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024332:	0f af c2             	imul   eax,edx
c0024335:	50                   	push   eax
c0024336:	e8 bb 22 ff ff       	call   c00165f6 <malloc>
c002433b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002433e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024342:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024345:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024349:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c002434d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024351:	0f af c2             	imul   eax,edx
c0024354:	99                   	cdq    
c0024355:	52                   	push   edx
c0024356:	50                   	push   eax
c0024357:	55                   	push   ebp
c0024358:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002435b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c002435e:	83 c4 20             	add    esp,0x20
c0024361:	85 c0                	test   eax,eax
c0024363:	0f 84 03 06 00 00    	je     c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024369:	52                   	push   edx
c002436a:	31 d2                	xor    edx,edx
c002436c:	52                   	push   edx
c002436d:	50                   	push   eax
c002436e:	55                   	push   ebp
c002436f:	e8 f4 63 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0024374:	83 c4 10             	add    esp,0x10
c0024377:	85 c0                	test   eax,eax
c0024379:	0f 85 ed 05 00 00    	jne    c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002437f:	83 ec 0c             	sub    esp,0xc
c0024382:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0024386:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c002438a:	31 f6                	xor    esi,esi
c002438c:	0f af c2             	imul   eax,edx
c002438f:	50                   	push   eax
c0024390:	e8 61 22 ff ff       	call   c00165f6 <malloc>
c0024395:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024398:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002439c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002439f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00243a3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00243a7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00243ab:	0f af c2             	imul   eax,edx
c00243ae:	99                   	cdq    
c00243af:	52                   	push   edx
c00243b0:	50                   	push   eax
c00243b1:	55                   	push   ebp
c00243b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243b5:	83 c4 20             	add    esp,0x20
c00243b8:	0f b7 de             	movzx  ebx,si
c00243bb:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00243bf:	0f 83 87 00 00 00    	jae    c002444c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00243c5:	c1 e3 05             	shl    ebx,0x5
c00243c8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00243cc:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00243cf:	75 75                	jne    c0024446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00243d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00243d4:	31 d2                	xor    edx,edx
c00243d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00243da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00243dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243e1:	50                   	push   eax
c00243e2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00243e5:	52                   	push   edx
c00243e6:	50                   	push   eax
c00243e7:	55                   	push   ebp
c00243e8:	e8 7b 63 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c00243ed:	83 c4 10             	add    esp,0x10
c00243f0:	85 c0                	test   eax,eax
c00243f2:	0f 85 74 05 00 00    	jne    c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00243f8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00243ff:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024402:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0024406:	31 d2                	xor    edx,edx
c0024408:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c002440c:	83 ec 0c             	sub    esp,0xc
c002440f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024413:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002441a:	50                   	push   eax
c002441b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002441f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024423:	52                   	push   edx
c0024424:	50                   	push   eax
c0024425:	55                   	push   ebp
c0024426:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024429:	83 c4 1c             	add    esp,0x1c
c002442c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002442f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0024432:	50                   	push   eax
c0024433:	6a 00                	push   0x0
c0024435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024439:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c002443d:	50                   	push   eax
c002443e:	e8 ad c0 fd ff       	call   c00004f0 <memset>
c0024443:	83 c4 10             	add    esp,0x10
c0024446:	46                   	inc    esi
c0024447:	e9 6c ff ff ff       	jmp    c00243b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c002444c:	53                   	push   ebx
c002444d:	31 db                	xor    ebx,ebx
c002444f:	68 00 01 00 00       	push   0x100
c0024454:	6a 00                	push   0x0
c0024456:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002445a:	50                   	push   eax
c002445b:	e8 90 c0 fd ff       	call   c00004f0 <memset>
c0024460:	83 c4 0c             	add    esp,0xc
c0024463:	68 00 01 00 00       	push   0x100
c0024468:	6a 00                	push   0x0
c002446a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024471:	50                   	push   eax
c0024472:	e8 79 c0 fd ff       	call   c00004f0 <memset>
c0024477:	83 c4 10             	add    esp,0x10
c002447a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024482:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002448a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0024492:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002449a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00244a2:	0f b7 f3             	movzx  esi,bx
c00244a5:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00244a9:	0f 83 2d 01 00 00    	jae    c00245dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00244af:	6b f6 28             	imul   esi,esi,0x28
c00244b2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00244b6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00244b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244bd:	52                   	push   edx
c00244be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00244c2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00244c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00244c8:	6b d2 28             	imul   edx,edx,0x28
c00244cb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00244cf:	31 d2                	xor    edx,edx
c00244d1:	52                   	push   edx
c00244d2:	50                   	push   eax
c00244d3:	55                   	push   ebp
c00244d4:	e8 8f 62 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c00244d9:	83 c4 0c             	add    esp,0xc
c00244dc:	6a 20                	push   0x20
c00244de:	6a 00                	push   0x0
c00244e0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00244e7:	51                   	push   ecx
c00244e8:	e8 03 c0 fd ff       	call   c00004f0 <memset>
c00244ed:	59                   	pop    ecx
c00244ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00244f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00244f5:	52                   	push   edx
c00244f6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00244fd:	51                   	push   ecx
c00244fe:	6a 00                	push   0x0
c0024500:	6a 1f                	push   0x1f
c0024502:	55                   	push   ebp
c0024503:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024506:	83 c4 1c             	add    esp,0x1c
c0024509:	6a 09                	push   0x9
c002450b:	68 d5 2f 03 c0       	push   0xc0032fd5
c0024510:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024517:	51                   	push   ecx
c0024518:	e8 63 be fd ff       	call   c0000380 <memcmp>
c002451d:	83 c4 10             	add    esp,0x10
c0024520:	85 c0                	test   eax,eax
c0024522:	75 21                	jne    c0024545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0024524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002452c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0024530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024534:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024537:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c002453e:	89 d0                	mov    eax,edx
c0024540:	40                   	inc    eax
c0024541:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024545:	50                   	push   eax
c0024546:	6a 09                	push   0x9
c0024548:	68 df 2f 03 c0       	push   0xc0032fdf
c002454d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024554:	50                   	push   eax
c0024555:	e8 26 be fd ff       	call   c0000380 <memcmp>
c002455a:	83 c4 10             	add    esp,0x10
c002455d:	85 c0                	test   eax,eax
c002455f:	75 21                	jne    c0024582 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0024561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024565:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002456d:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0024571:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024574:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c002457b:	89 d0                	mov    eax,edx
c002457d:	40                   	inc    eax
c002457e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024582:	50                   	push   eax
c0024583:	50                   	push   eax
c0024584:	68 ab 2f 03 c0       	push   0xc0032fab
c0024589:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024590:	50                   	push   eax
c0024591:	e8 ba c1 fd ff       	call   c0000750 <strcmp>
c0024596:	83 c4 10             	add    esp,0x10
c0024599:	85 c0                	test   eax,eax
c002459b:	75 0f                	jne    c00245ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c002459d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00245a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00245a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00245ac:	50                   	push   eax
c00245ad:	50                   	push   eax
c00245ae:	68 b3 2f 03 c0       	push   0xc0032fb3
c00245b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00245ba:	50                   	push   eax
c00245bb:	e8 90 c1 fd ff       	call   c0000750 <strcmp>
c00245c0:	83 c4 10             	add    esp,0x10
c00245c3:	85 c0                	test   eax,eax
c00245c5:	75 0f                	jne    c00245d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00245c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00245ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00245ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00245d6:	43                   	inc    ebx
c00245d7:	e9 c6 fe ff ff       	jmp    c00244a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00245dc:	31 d2                	xor    edx,edx
c00245de:	50                   	push   eax
c00245df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245e3:	52                   	push   edx
c00245e4:	50                   	push   eax
c00245e5:	55                   	push   ebp
c00245e6:	e8 7d 61 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c00245eb:	58                   	pop    eax
c00245ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00245f0:	e8 01 20 ff ff       	call   c00165f6 <malloc>
c00245f5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00245f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00245fc:	31 d2                	xor    edx,edx
c00245fe:	58                   	pop    eax
c00245ff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0024603:	53                   	push   ebx
c0024604:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0024608:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002460c:	52                   	push   edx
c002460d:	50                   	push   eax
c002460e:	55                   	push   ebp
c002460f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024612:	83 c4 14             	add    esp,0x14
c0024615:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024619:	e8 d8 1f ff ff       	call   c00165f6 <malloc>
c002461e:	31 d2                	xor    edx,edx
c0024620:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024624:	83 c4 0c             	add    esp,0xc
c0024627:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002462b:	52                   	push   edx
c002462c:	50                   	push   eax
c002462d:	55                   	push   ebp
c002462e:	e8 35 61 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0024633:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024636:	31 d2                	xor    edx,edx
c0024638:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002463b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002463f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0024643:	52                   	push   edx
c0024644:	50                   	push   eax
c0024645:	55                   	push   ebp
c0024646:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024649:	83 c4 20             	add    esp,0x20
c002464c:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0024651:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024659:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002465d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024661:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0024665:	0f 84 05 03 00 00    	je     c0024970 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c002466b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0024672:	31 d2                	xor    edx,edx
c0024674:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024678:	c1 e8 03             	shr    eax,0x3
c002467b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c002467f:	51                   	push   ecx
c0024680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024684:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0024688:	52                   	push   edx
c0024689:	50                   	push   eax
c002468a:	55                   	push   ebp
c002468b:	e8 d8 60 ff ff       	call   c001a768 <File::seek(unsigned long long)>
c0024690:	5b                   	pop    ebx
c0024691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024695:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c002469c:	e8 55 1f ff ff       	call   c00165f6 <malloc>
c00246a1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00246a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246a8:	31 d2                	xor    edx,edx
c00246aa:	5e                   	pop    esi
c00246ab:	8d 44 24 58          	lea    eax,[esp+0x58]
c00246af:	50                   	push   eax
c00246b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00246b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00246b8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00246bf:	52                   	push   edx
c00246c0:	50                   	push   eax
c00246c1:	55                   	push   ebp
c00246c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00246c5:	83 c4 20             	add    esp,0x20
c00246c8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00246d0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246d4:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00246d8:	0f 8d 76 02 00 00    	jge    c0024954 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00246de:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00246e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246e6:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00246eb:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00246ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00246f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246f6:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00246fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00246fe:	c1 e8 08             	shr    eax,0x8
c0024701:	89 c6                	mov    esi,eax
c0024703:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024707:	c1 e6 04             	shl    esi,0x4
c002470a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c002470e:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0024711:	85 db                	test   ebx,ebx
c0024713:	0f 85 b3 00 00 00    	jne    c00247cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024719:	83 ec 0c             	sub    esp,0xc
c002471c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024720:	03 06                	add    eax,DWORD PTR [esi]
c0024722:	50                   	push   eax
c0024723:	e8 40 f8 ff ff       	call   c0023f68 <Thr::getAddressOfKernelSymbol(char const*)>
c0024728:	83 c4 10             	add    esp,0x10
c002472b:	89 c3                	mov    ebx,eax
c002472d:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0024732:	85 c0                	test   eax,eax
c0024734:	0f 85 92 00 00 00    	jne    c00247cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c002473a:	83 ec 0c             	sub    esp,0xc
c002473d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024741:	03 06                	add    eax,DWORD PTR [esi]
c0024743:	50                   	push   eax
c0024744:	e8 43 bf ff ff       	call   c002068c <KeResolveCompatibilitySymbol(char*)>
c0024749:	83 c4 10             	add    esp,0x10
c002474c:	89 c3                	mov    ebx,eax
c002474e:	85 c0                	test   eax,eax
c0024750:	75 7a                	jne    c00247cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024752:	51                   	push   ecx
c0024753:	51                   	push   ecx
c0024754:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024758:	03 06                	add    eax,DWORD PTR [esi]
c002475a:	50                   	push   eax
c002475b:	68 e9 2f 03 c0       	push   0xc0032fe9
c0024760:	e8 20 4d ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0024765:	58                   	pop    eax
c0024766:	5a                   	pop    edx
c0024767:	68 03 30 03 c0       	push   0xc0033003
c002476c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024773:	50                   	push   eax
c0024774:	e8 c7 be fd ff       	call   c0000640 <strcpy>
c0024779:	59                   	pop    ecx
c002477a:	58                   	pop    eax
c002477b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002477f:	03 06                	add    eax,DWORD PTR [esi]
c0024781:	50                   	push   eax
c0024782:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024789:	50                   	push   eax
c002478a:	e8 b1 c0 fd ff       	call   c0000840 <strcat>
c002478f:	58                   	pop    eax
c0024790:	5a                   	pop    edx
c0024791:	68 9d 30 03 c0       	push   0xc003309d
c0024796:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002479d:	50                   	push   eax
c002479e:	e8 9d c0 fd ff       	call   c0000840 <strcat>
c00247a3:	83 c4 10             	add    esp,0x10
c00247a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00247ab:	0f 84 5d 01 00 00    	je     c002490e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00247b1:	83 ec 0c             	sub    esp,0xc
c00247b4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00247bb:	50                   	push   eax
c00247bc:	e8 dd bc ff ff       	call   c002049e <KePanic(char const*)>
c00247c1:	83 c4 10             	add    esp,0x10
c00247c4:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00247c8:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00247cc:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00247d1:	83 f8 01             	cmp    eax,0x1
c00247d4:	0f 85 8f 00 00 00    	jne    c0024869 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00247da:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00247e1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00247e5:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00247e9:	01 ce                	add    esi,ecx
c00247eb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00247f3:	0f 94 c0             	sete   al
c00247f6:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00247fe:	0f 94 c2             	sete   dl
c0024801:	09 c2                	or     edx,eax
c0024803:	8b 06                	mov    eax,DWORD PTR [esi]
c0024805:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c002480a:	0f b6 d2             	movzx  edx,dl
c002480d:	74 41                	je     c0024850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c002480f:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0024812:	85 d2                	test   edx,edx
c0024814:	75 15                	jne    c002482b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0024816:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002481a:	66 83 f8 0c          	cmp    ax,0xc
c002481e:	76 05                	jbe    c0024825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0024820:	b8 0c 00 00 00       	mov    eax,0xc
c0024825:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024829:	76 37                	jbe    c0024862 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c002482b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c002482f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024834:	0f 84 d4 00 00 00    	je     c002490e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c002483a:	83 ec 0c             	sub    esp,0xc
c002483d:	68 1a 30 03 c0       	push   0xc003301a
c0024842:	e8 57 bc ff ff       	call   c002049e <KePanic(char const*)>
c0024847:	83 c4 10             	add    esp,0x10
c002484a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002484e:	eb 12                	jmp    c0024862 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024850:	01 c1                	add    ecx,eax
c0024852:	85 d2                	test   edx,edx
c0024854:	75 0c                	jne    c0024862 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024856:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002485a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c002485e:	77 02                	ja     c0024862 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024860:	01 d9                	add    ecx,ebx
c0024862:	89 0e                	mov    DWORD PTR [esi],ecx
c0024864:	e9 e2 00 00 00       	jmp    c002494b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024869:	83 f8 02             	cmp    eax,0x2
c002486c:	75 77                	jne    c00248e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c002486e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0024875:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0024879:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c002487d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024885:	74 21                	je     c00248a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024887:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c002488f:	74 17                	je     c00248a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024891:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0024895:	b8 0a 00 00 00       	mov    eax,0xa
c002489a:	83 fa 0e             	cmp    edx,0xe
c002489d:	77 03                	ja     c00248a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c002489f:	8d 42 fc             	lea    eax,[edx-0x4]
c00248a2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00248a6:	76 17                	jbe    c00248bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00248a8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00248ad:	74 5f                	je     c002490e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00248af:	83 ec 0c             	sub    esp,0xc
c00248b2:	68 36 30 03 c0       	push   0xc0033036
c00248b7:	e8 e2 bb ff ff       	call   c002049e <KePanic(char const*)>
c00248bc:	83 c4 10             	add    esp,0x10
c00248bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00248c1:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00248c6:	74 13                	je     c00248db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00248c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00248cc:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00248d3:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00248d7:	01 d0                	add    eax,edx
c00248d9:	eb 04                	jmp    c00248df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00248db:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00248df:	01 c3                	add    ebx,eax
c00248e1:	89 1e                	mov    DWORD PTR [esi],ebx
c00248e3:	eb 66                	jmp    c002494b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00248e5:	52                   	push   edx
c00248e6:	52                   	push   edx
c00248e7:	50                   	push   eax
c00248e8:	68 52 30 03 c0       	push   0xc0033052
c00248ed:	e8 93 4b ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00248f2:	83 c4 10             	add    esp,0x10
c00248f5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00248fa:	74 12                	je     c002490e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00248fc:	83 ec 0c             	sub    esp,0xc
c00248ff:	68 5d 30 03 c0       	push   0xc003305d
c0024904:	e8 95 bb ff ff       	call   c002049e <KePanic(char const*)>
c0024909:	83 c4 10             	add    esp,0x10
c002490c:	eb 3d                	jmp    c002494b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c002490e:	83 ec 0c             	sub    esp,0xc
c0024911:	55                   	push   ebp
c0024912:	e8 f1 5d ff ff       	call   c001a708 <File::close()>
c0024917:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002491a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002491d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024920:	59                   	pop    ecx
c0024921:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024925:	e8 dc 1c ff ff       	call   c0016606 <free>
c002492a:	5b                   	pop    ebx
c002492b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002492f:	e8 d2 1c ff ff       	call   c0016606 <free>
c0024934:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024937:	e8 ca 1c ff ff       	call   c0016606 <free>
c002493c:	5e                   	pop    esi
c002493d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024941:	e8 c0 1c ff ff       	call   c0016606 <free>
c0024946:	83 c4 10             	add    esp,0x10
c0024949:	eb 21                	jmp    c002496c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002494b:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c002494f:	e9 7c fd ff ff       	jmp    c00246d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0024954:	83 ec 0c             	sub    esp,0xc
c0024957:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002495b:	e8 a6 1c ff ff       	call   c0016606 <free>
c0024960:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0024964:	83 c4 10             	add    esp,0x10
c0024967:	e9 f1 fc ff ff       	jmp    c002465d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c002496c:	31 c0                	xor    eax,eax
c002496e:	eb 33                	jmp    c00249a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024970:	83 ec 0c             	sub    esp,0xc
c0024973:	55                   	push   ebp
c0024974:	e8 8f 5d ff ff       	call   c001a708 <File::close()>
c0024979:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002497c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002497f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024982:	58                   	pop    eax
c0024983:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024987:	e8 7a 1c ff ff       	call   c0016606 <free>
c002498c:	89 3c 24             	mov    DWORD PTR [esp],edi
c002498f:	e8 72 1c ff ff       	call   c0016606 <free>
c0024994:	5a                   	pop    edx
c0024995:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024999:	e8 68 1c ff ff       	call   c0016606 <free>
c002499e:	83 c4 10             	add    esp,0x10
c00249a1:	b0 01                	mov    al,0x1
c00249a3:	81 c4 5c 03 00 00    	add    esp,0x35c
c00249a9:	5b                   	pop    ebx
c00249aa:	5e                   	pop    esi
c00249ab:	5f                   	pop    edi
c00249ac:	5d                   	pop    ebp
c00249ad:	c3                   	ret    

c00249ae <Thr::getDriverBaseFromAddress(unsigned long)>:
c00249ae:	56                   	push   esi
c00249af:	31 d2                	xor    edx,edx
c00249b1:	53                   	push   ebx
c00249b2:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00249b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00249bc:	39 d3                	cmp    ebx,edx
c00249be:	7e 1b                	jle    c00249db <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00249c0:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c00249c7:	39 c8                	cmp    eax,ecx
c00249c9:	77 0d                	ja     c00249d8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00249cb:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c00249d2:	01 c6                	add    esi,eax
c00249d4:	39 ce                	cmp    esi,ecx
c00249d6:	77 05                	ja     c00249dd <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00249d8:	42                   	inc    edx
c00249d9:	eb e1                	jmp    c00249bc <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00249db:	31 c0                	xor    eax,eax
c00249dd:	5b                   	pop    ebx
c00249de:	5e                   	pop    esi
c00249df:	c3                   	ret    

c00249e0 <Thr::getDriverNameFromAddress(unsigned long)>:
c00249e0:	53                   	push   ebx
c00249e1:	31 c0                	xor    eax,eax
c00249e3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00249e7:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00249ed:	39 c3                	cmp    ebx,eax
c00249ef:	7e 22                	jle    c0024a13 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00249f1:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00249f8:	39 ca                	cmp    edx,ecx
c00249fa:	77 14                	ja     c0024a10 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00249fc:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c0024a03:	39 ca                	cmp    edx,ecx
c0024a05:	76 09                	jbe    c0024a10 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024a07:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c0024a0e:	eb 05                	jmp    c0024a15 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0024a10:	40                   	inc    eax
c0024a11:	eb da                	jmp    c00249ed <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0024a13:	31 c0                	xor    eax,eax
c0024a15:	5b                   	pop    ebx
c0024a16:	c3                   	ret    

c0024a17 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0024a17:	53                   	push   ebx
c0024a18:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024a1c:	53                   	push   ebx
c0024a1d:	e8 8c ff ff ff       	call   c00249ae <Thr::getDriverBaseFromAddress(unsigned long)>
c0024a22:	5a                   	pop    edx
c0024a23:	31 d2                	xor    edx,edx
c0024a25:	85 c0                	test   eax,eax
c0024a27:	74 04                	je     c0024a2d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024a29:	89 da                	mov    edx,ebx
c0024a2b:	29 c2                	sub    edx,eax
c0024a2d:	89 d0                	mov    eax,edx
c0024a2f:	5b                   	pop    ebx
c0024a30:	c3                   	ret    

c0024a31 <Thr::loadDLL(char const*, bool)>:
c0024a31:	55                   	push   ebp
c0024a32:	57                   	push   edi
c0024a33:	56                   	push   esi
c0024a34:	53                   	push   ebx
c0024a35:	81 ec 34 01 00 00    	sub    esp,0x134
c0024a3b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024a42:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0024a49:	56                   	push   esi
c0024a4a:	68 75 30 03 c0       	push   0xc0033075
c0024a4f:	e8 31 4a ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0024a54:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024a5b:	e8 96 1b ff ff       	call   c00165f6 <malloc>
c0024a60:	83 c4 0c             	add    esp,0xc
c0024a63:	89 c3                	mov    ebx,eax
c0024a65:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024a6b:	56                   	push   esi
c0024a6c:	50                   	push   eax
c0024a6d:	e8 1a 5c ff ff       	call   c001a68c <File::File(char const*, Process*)>
c0024a72:	83 c4 10             	add    esp,0x10
c0024a75:	85 db                	test   ebx,ebx
c0024a77:	75 3c                	jne    c0024ab5 <Thr::loadDLL(char const*, bool)+0x84>
c0024a79:	89 f8                	mov    eax,edi
c0024a7b:	84 c0                	test   al,al
c0024a7d:	0f 84 f3 01 00 00    	je     c0024c76 <Thr::loadDLL(char const*, bool)+0x245>
c0024a83:	55                   	push   ebp
c0024a84:	55                   	push   ebp
c0024a85:	68 86 30 03 c0       	push   0xc0033086
c0024a8a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024a8e:	55                   	push   ebp
c0024a8f:	e8 ac bb fd ff       	call   c0000640 <strcpy>
c0024a94:	58                   	pop    eax
c0024a95:	5a                   	pop    edx
c0024a96:	56                   	push   esi
c0024a97:	55                   	push   ebp
c0024a98:	e8 a3 bd fd ff       	call   c0000840 <strcat>
c0024a9d:	59                   	pop    ecx
c0024a9e:	58                   	pop    eax
c0024a9f:	68 9d 30 03 c0       	push   0xc003309d
c0024aa4:	55                   	push   ebp
c0024aa5:	e8 96 bd fd ff       	call   c0000840 <strcat>
c0024aaa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024aad:	e8 ec b9 ff ff       	call   c002049e <KePanic(char const*)>
c0024ab2:	83 c4 10             	add    esp,0x10
c0024ab5:	51                   	push   ecx
c0024ab6:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024aba:	50                   	push   eax
c0024abb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024abf:	50                   	push   eax
c0024ac0:	53                   	push   ebx
c0024ac1:	e8 e6 5e ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c0024ac6:	83 c4 10             	add    esp,0x10
c0024ac9:	89 c5                	mov    ebp,eax
c0024acb:	85 db                	test   ebx,ebx
c0024acd:	74 0c                	je     c0024adb <Thr::loadDLL(char const*, bool)+0xaa>
c0024acf:	83 ec 0c             	sub    esp,0xc
c0024ad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024ad4:	53                   	push   ebx
c0024ad5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024ad8:	83 c4 10             	add    esp,0x10
c0024adb:	83 ec 0c             	sub    esp,0xc
c0024ade:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024ae3:	50                   	push   eax
c0024ae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ae8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024aec:	55                   	push   ebp
c0024aed:	68 9f 30 03 c0       	push   0xc003309f
c0024af2:	e8 8e 49 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0024af7:	83 c4 20             	add    esp,0x20
c0024afa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024aff:	75 0a                	jne    c0024b0b <Thr::loadDLL(char const*, bool)+0xda>
c0024b01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b05:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024b09:	75 3c                	jne    c0024b47 <Thr::loadDLL(char const*, bool)+0x116>
c0024b0b:	89 f8                	mov    eax,edi
c0024b0d:	84 c0                	test   al,al
c0024b0f:	0f 84 49 01 00 00    	je     c0024c5e <Thr::loadDLL(char const*, bool)+0x22d>
c0024b15:	51                   	push   ecx
c0024b16:	51                   	push   ecx
c0024b17:	68 c0 30 03 c0       	push   0xc00330c0
c0024b1c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024b20:	53                   	push   ebx
c0024b21:	e8 1a bb fd ff       	call   c0000640 <strcpy>
c0024b26:	5d                   	pop    ebp
c0024b27:	58                   	pop    eax
c0024b28:	56                   	push   esi
c0024b29:	53                   	push   ebx
c0024b2a:	e8 11 bd fd ff       	call   c0000840 <strcat>
c0024b2f:	58                   	pop    eax
c0024b30:	5a                   	pop    edx
c0024b31:	68 9d 30 03 c0       	push   0xc003309d
c0024b36:	53                   	push   ebx
c0024b37:	e8 04 bd fd ff       	call   c0000840 <strcat>
c0024b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b3f:	e8 5a b9 ff ff       	call   c002049e <KePanic(char const*)>
c0024b44:	83 c4 10             	add    esp,0x10
c0024b47:	52                   	push   edx
c0024b48:	6a 03                	push   0x3
c0024b4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b4e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024b52:	05 ff 0f 00 00       	add    eax,0xfff
c0024b57:	83 d2 00             	adc    edx,0x0
c0024b5a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024b5e:	50                   	push   eax
c0024b5f:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024b65:	e8 fa 3d ff ff       	call   c0018964 <VAS::allocatePages(int, int)>
c0024b6a:	59                   	pop    ecx
c0024b6b:	89 c3                	mov    ebx,eax
c0024b6d:	5d                   	pop    ebp
c0024b6e:	50                   	push   eax
c0024b6f:	68 de 14 03 c0       	push   0xc00314de
c0024b74:	e8 0c 49 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0024b79:	89 34 24             	mov    DWORD PTR [esp],esi
c0024b7c:	e8 ef b9 fd ff       	call   c0000570 <strlen>
c0024b81:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c0024b87:	40                   	inc    eax
c0024b88:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b8b:	e8 66 1a ff ff       	call   c00165f6 <malloc>
c0024b90:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c0024b97:	58                   	pop    eax
c0024b98:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024b9d:	5a                   	pop    edx
c0024b9e:	56                   	push   esi
c0024b9f:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024ba6:	e8 95 ba fd ff       	call   c0000640 <strcpy>
c0024bab:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024bb0:	8d 50 01             	lea    edx,[eax+0x1]
c0024bb3:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024bba:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024bc0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024bc4:	83 c4 0c             	add    esp,0xc
c0024bc7:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c0024bce:	6a 01                	push   0x1
c0024bd0:	53                   	push   ebx
c0024bd1:	56                   	push   esi
c0024bd2:	e8 9e f6 ff ff       	call   c0024275 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024bd7:	83 c4 10             	add    esp,0x10
c0024bda:	0f b6 c0             	movzx  eax,al
c0024bdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024be1:	85 c0                	test   eax,eax
c0024be3:	0f 85 89 00 00 00    	jne    c0024c72 <Thr::loadDLL(char const*, bool)+0x241>
c0024be9:	89 f8                	mov    eax,edi
c0024beb:	84 c0                	test   al,al
c0024bed:	74 73                	je     c0024c62 <Thr::loadDLL(char const*, bool)+0x231>
c0024bef:	83 ec 0c             	sub    esp,0xc
c0024bf2:	68 d9 30 03 c0       	push   0xc00330d9
c0024bf7:	e8 a2 b8 ff ff       	call   c002049e <KePanic(char const*)>
c0024bfc:	83 c4 10             	add    esp,0x10
c0024bff:	eb 61                	jmp    c0024c62 <Thr::loadDLL(char const*, bool)+0x231>
c0024c01:	50                   	push   eax
c0024c02:	50                   	push   eax
c0024c03:	89 e8                	mov    eax,ebp
c0024c05:	c1 e0 0c             	shl    eax,0xc
c0024c08:	01 d8                	add    eax,ebx
c0024c0a:	50                   	push   eax
c0024c0b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024c11:	e8 36 38 ff ff       	call   c001844c <VAS::getPageTableEntry(unsigned long)>
c0024c16:	83 c4 10             	add    esp,0x10
c0024c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c1b:	a8 60                	test   al,0x60
c0024c1d:	75 11                	jne    c0024c30 <Thr::loadDLL(char const*, bool)+0x1ff>
c0024c1f:	83 ec 0c             	sub    esp,0xc
c0024c22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024c27:	50                   	push   eax
c0024c28:	e8 69 1c ff ff       	call   c0016896 <Phys::freePage(unsigned long)>
c0024c2d:	83 c4 10             	add    esp,0x10
c0024c30:	45                   	inc    ebp
c0024c31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c39:	05 ff 0f 00 00       	add    eax,0xfff
c0024c3e:	bf 00 00 00 00       	mov    edi,0x0
c0024c43:	83 d2 00             	adc    edx,0x0
c0024c46:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024c4a:	c1 ea 0c             	shr    edx,0xc
c0024c4d:	39 c5                	cmp    ebp,eax
c0024c4f:	89 d1                	mov    ecx,edx
c0024c51:	89 f8                	mov    eax,edi
c0024c53:	19 c8                	sbb    eax,ecx
c0024c55:	72 aa                	jb     c0024c01 <Thr::loadDLL(char const*, bool)+0x1d0>
c0024c57:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024c5c:	75 18                	jne    c0024c76 <Thr::loadDLL(char const*, bool)+0x245>
c0024c5e:	31 db                	xor    ebx,ebx
c0024c60:	eb 14                	jmp    c0024c76 <Thr::loadDLL(char const*, bool)+0x245>
c0024c62:	83 ec 0c             	sub    esp,0xc
c0024c65:	68 f8 30 03 c0       	push   0xc00330f8
c0024c6a:	e8 2f b8 ff ff       	call   c002049e <KePanic(char const*)>
c0024c6f:	83 c4 10             	add    esp,0x10
c0024c72:	31 ed                	xor    ebp,ebp
c0024c74:	eb bb                	jmp    c0024c31 <Thr::loadDLL(char const*, bool)+0x200>
c0024c76:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024c7c:	89 d8                	mov    eax,ebx
c0024c7e:	5b                   	pop    ebx
c0024c7f:	5e                   	pop    esi
c0024c80:	5f                   	pop    edi
c0024c81:	5d                   	pop    ebp
c0024c82:	c3                   	ret    

c0024c83 <Thr::executeDLL(unsigned long, void*)>:
c0024c83:	56                   	push   esi
c0024c84:	53                   	push   ebx
c0024c85:	52                   	push   edx
c0024c86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c8a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024c8e:	85 db                	test   ebx,ebx
c0024c90:	75 10                	jne    c0024ca2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024c92:	83 ec 0c             	sub    esp,0xc
c0024c95:	68 14 31 03 c0       	push   0xc0033114
c0024c9a:	e8 ff b7 ff ff       	call   c002049e <KePanic(char const*)>
c0024c9f:	83 c4 10             	add    esp,0x10
c0024ca2:	50                   	push   eax
c0024ca3:	50                   	push   eax
c0024ca4:	53                   	push   ebx
c0024ca5:	68 3e 31 03 c0       	push   0xc003313e
c0024caa:	e8 d6 47 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0024caf:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024cb3:	89 d8                	mov    eax,ebx
c0024cb5:	83 c4 14             	add    esp,0x14
c0024cb8:	5b                   	pop    ebx
c0024cb9:	5e                   	pop    esi
c0024cba:	ff e0                	jmp    eax

c0024cbc <userModeEntryPoint(void*)>:
c0024cbc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024cc1:	83 e8 01             	sub    eax,0x1
c0024cc4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024cc9:	75 01                	jne    c0024ccc <userModeEntryPoint(void*)+0x10>
c0024ccb:	fb                   	sti    
c0024ccc:	fb                   	sti    
c0024ccd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024cd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024cd5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024cdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024cdf:	e9 5b b5 fd ff       	jmp    c000023f <goToUsermode>

c0024ce4 <changeTSS>:
c0024ce4:	83 ec 14             	sub    esp,0x14
c0024ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024cec:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024cef:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024cf4:	c1 e2 15             	shl    edx,0x15
c0024cf7:	29 d0                	sub    eax,edx
c0024cf9:	50                   	push   eax
c0024cfa:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024cff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d05:	05 7c 11 00 00       	add    eax,0x117c
c0024d0a:	50                   	push   eax
c0024d0b:	e8 84 2d ff ff       	call   c0017a94 <TSS::setESP(unsigned long)>
c0024d10:	83 c4 1c             	add    esp,0x1c
c0024d13:	c3                   	ret    

c0024d14 <switchToThread(ThreadControlBlock*)>:
c0024d14:	57                   	push   edi
c0024d15:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024d1b:	56                   	push   esi
c0024d1c:	85 c9                	test   ecx,ecx
c0024d1e:	53                   	push   ebx
c0024d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d23:	0f 85 8b 00 00 00    	jne    c0024db4 <switchToThread(ThreadControlBlock*)+0xa0>
c0024d29:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024d2d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024d33:	74 7b                	je     c0024db0 <switchToThread(ThreadControlBlock*)+0x9c>
c0024d35:	b8 00 04 00 00       	mov    eax,0x400
c0024d3a:	29 d0                	sub    eax,edx
c0024d3c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024d3f:	d1 f8                	sar    eax,1
c0024d41:	01 d0                	add    eax,edx
c0024d43:	90                   	nop
c0024d44:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024d47:	e8 76 25 00 00       	call   c00272c2 <HalQueryPerformanceCounter()>
c0024d4c:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024d51:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024d57:	89 c6                	mov    esi,eax
c0024d59:	89 d7                	mov    edi,edx
c0024d5b:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024d61:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024d66:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024d6c:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024d72:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024d78:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024d7e:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024d84:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024d87:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024d8a:	01 c6                	add    esi,eax
c0024d8c:	11 d7                	adc    edi,edx
c0024d8e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024d91:	83 ec 0c             	sub    esp,0xc
c0024d94:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024d97:	53                   	push   ebx
c0024d98:	e8 da b4 fd ff       	call   c0000277 <switchToThreadASM>
c0024d9d:	0f 20 c0             	mov    eax,cr0
c0024da0:	83 c8 08             	or     eax,0x8
c0024da3:	0f 22 c0             	mov    cr0,eax
c0024da6:	83 c4 10             	add    esp,0x10
c0024da9:	5b                   	pop    ebx
c0024daa:	5e                   	pop    esi
c0024dab:	5f                   	pop    edi
c0024dac:	c3                   	ret    
c0024dad:	8d 76 00             	lea    esi,[esi+0x0]
c0024db0:	31 c0                	xor    eax,eax
c0024db2:	eb 90                	jmp    c0024d44 <switchToThread(ThreadControlBlock*)+0x30>
c0024db4:	5b                   	pop    ebx
c0024db5:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024dbf:	5e                   	pop    esi
c0024dc0:	5f                   	pop    edi
c0024dc1:	c3                   	ret    
c0024dc2:	66 90                	xchg   ax,ax

c0024dc4 <Process::addArgs(char**)>:
c0024dc4:	57                   	push   edi
c0024dc5:	56                   	push   esi
c0024dc6:	53                   	push   ebx
c0024dc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024dcb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0024dcf:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024dd9:	85 ff                	test   edi,edi
c0024ddb:	74 4f                	je     c0024e2c <Process::addArgs(char**)+0x68>
c0024ddd:	8b 07                	mov    eax,DWORD PTR [edi]
c0024ddf:	85 c0                	test   eax,eax
c0024de1:	74 49                	je     c0024e2c <Process::addArgs(char**)+0x68>
c0024de3:	31 db                	xor    ebx,ebx
c0024de5:	8d 76 00             	lea    esi,[esi+0x0]
c0024de8:	83 ec 0c             	sub    esp,0xc
c0024deb:	50                   	push   eax
c0024dec:	e8 7f b7 fd ff       	call   c0000570 <strlen>
c0024df1:	83 c0 01             	add    eax,0x1
c0024df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0024df7:	e8 fa 17 ff ff       	call   c00165f6 <malloc>
c0024dfc:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0024e03:	5a                   	pop    edx
c0024e04:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0024e07:	59                   	pop    ecx
c0024e08:	83 c3 01             	add    ebx,0x1
c0024e0b:	52                   	push   edx
c0024e0c:	50                   	push   eax
c0024e0d:	e8 2e b8 fd ff       	call   c0000640 <strcpy>
c0024e12:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0024e18:	83 c4 10             	add    esp,0x10
c0024e1b:	83 c1 01             	add    ecx,0x1
c0024e1e:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0024e24:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0024e27:	85 c0                	test   eax,eax
c0024e29:	75 bd                	jne    c0024de8 <Process::addArgs(char**)+0x24>
c0024e2b:	90                   	nop
c0024e2c:	5b                   	pop    ebx
c0024e2d:	5e                   	pop    esi
c0024e2e:	5f                   	pop    edi
c0024e2f:	c3                   	ret    

c0024e30 <Process::Process(char const*, Process*, char**)>:
c0024e30:	56                   	push   esi
c0024e31:	53                   	push   ebx
c0024e32:	83 ec 14             	sub    esp,0x14
c0024e35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e39:	05 0c 02 00 00       	add    eax,0x20c
c0024e3e:	bb 07 00 00 00       	mov    ebx,0x7
c0024e43:	89 c6                	mov    esi,eax
c0024e45:	8d 76 00             	lea    esi,[esi+0x0]
c0024e48:	85 db                	test   ebx,ebx
c0024e4a:	78 14                	js     c0024e60 <Process::Process(char const*, Process*, char**)+0x30>
c0024e4c:	83 ec 0c             	sub    esp,0xc
c0024e4f:	56                   	push   esi
c0024e50:	e8 73 a3 00 00       	call   c002f1c8 <ThreadControlBlock::ThreadControlBlock()>
c0024e55:	83 c4 10             	add    esp,0x10
c0024e58:	83 c6 5f             	add    esi,0x5f
c0024e5b:	83 eb 01             	sub    ebx,0x1
c0024e5e:	eb e8                	jmp    c0024e48 <Process::Process(char const*, Process*, char**)+0x18>
c0024e60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e64:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e6f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024e76:	83 ec 0c             	sub    esp,0xc
c0024e79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e7d:	e8 f6 b3 ff ff       	call   c0020278 <KeNewProcessEnv(Process*)>
c0024e82:	83 c4 10             	add    esp,0x10
c0024e85:	89 c2                	mov    edx,eax
c0024e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e8b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e95:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024e9e:	a1 60 47 03 c0       	mov    eax,ds:0xc0034760
c0024ea3:	8d 50 01             	lea    edx,[eax+0x1]
c0024ea6:	89 15 60 47 03 c0    	mov    DWORD PTR ds:0xc0034760,edx
c0024eac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024eb0:	89 02                	mov    DWORD PTR [edx],eax
c0024eb2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024eba:	83 ec 0c             	sub    esp,0xc
c0024ebd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024ec1:	e8 30 17 ff ff       	call   c00165f6 <malloc>
c0024ec6:	83 c4 10             	add    esp,0x10
c0024ec9:	89 c3                	mov    ebx,eax
c0024ecb:	83 ec 08             	sub    esp,0x8
c0024ece:	6a 00                	push   0x0
c0024ed0:	53                   	push   ebx
c0024ed1:	e8 d2 3c ff ff       	call   c0018ba8 <VAS::VAS(bool)>
c0024ed6:	83 c4 10             	add    esp,0x10
c0024ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024edd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024ee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ee7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ef5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024ef9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024eff:	e8 cb bd ff ff       	call   c0020ccf <KeInitSignals()>
c0024f04:	89 c2                	mov    edx,eax
c0024f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f0a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f14:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f1a:	85 c0                	test   eax,eax
c0024f1c:	74 42                	je     c0024f60 <Process::Process(char const*, Process*, char**)+0x130>
c0024f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f22:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f28:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f32:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f3c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f42:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f4c:	05 0c 01 00 00       	add    eax,0x10c
c0024f51:	83 ec 08             	sub    esp,0x8
c0024f54:	52                   	push   edx
c0024f55:	50                   	push   eax
c0024f56:	e8 e5 b6 fd ff       	call   c0000640 <strcpy>
c0024f5b:	83 c4 10             	add    esp,0x10
c0024f5e:	eb 64                	jmp    c0024fc4 <Process::Process(char const*, Process*, char**)+0x194>
c0024f60:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024f68:	83 ec 0c             	sub    esp,0xc
c0024f6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024f6f:	e8 82 16 ff ff       	call   c00165f6 <malloc>
c0024f74:	83 c4 10             	add    esp,0x10
c0024f77:	89 c3                	mov    ebx,eax
c0024f79:	83 ec 08             	sub    esp,0x8
c0024f7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024f80:	53                   	push   ebx
c0024f81:	e8 20 28 ff ff       	call   c00177a6 <VgaText::VgaText(char const*)>
c0024f86:	83 c4 10             	add    esp,0x10
c0024f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f8d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024f9d:	83 ec 0c             	sub    esp,0xc
c0024fa0:	50                   	push   eax
c0024fa1:	e8 9e 20 ff ff       	call   c0017044 <addToTerminalCycle(VgaText*)>
c0024fa6:	83 c4 10             	add    esp,0x10
c0024fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fad:	05 0c 01 00 00       	add    eax,0x10c
c0024fb2:	83 ec 08             	sub    esp,0x8
c0024fb5:	68 5d 31 03 c0       	push   0xc003315d
c0024fba:	50                   	push   eax
c0024fbb:	e8 80 b6 fd ff       	call   c0000640 <strcpy>
c0024fc0:	83 c4 10             	add    esp,0x10
c0024fc3:	90                   	nop
c0024fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fc8:	83 c0 0c             	add    eax,0xc
c0024fcb:	83 ec 08             	sub    esp,0x8
c0024fce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024fd2:	50                   	push   eax
c0024fd3:	e8 68 b6 fd ff       	call   c0000640 <strcpy>
c0024fd8:	83 c4 10             	add    esp,0x10
c0024fdb:	83 ec 08             	sub    esp,0x8
c0024fde:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024fe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024fe6:	e8 d9 fd ff ff       	call   c0024dc4 <Process::addArgs(char**)>
c0024feb:	83 c4 10             	add    esp,0x10
c0024fee:	83 ec 08             	sub    esp,0x8
c0024ff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ff9:	e8 45 ed ff ff       	call   c0023d43 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024ffe:	83 c4 10             	add    esp,0x10
c0025001:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025005:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025009:	83 f0 01             	xor    eax,0x1
c002500c:	88 c2                	mov    dl,al
c002500e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025012:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0025018:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002501d:	83 ec 04             	sub    esp,0x4
c0025020:	50                   	push   eax
c0025021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025025:	68 b4 31 03 c0       	push   0xc00331b4
c002502a:	e8 56 44 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002502f:	83 c4 10             	add    esp,0x10
c0025032:	90                   	nop
c0025033:	83 c4 14             	add    esp,0x14
c0025036:	5b                   	pop    ebx
c0025037:	5e                   	pop    esi
c0025038:	c3                   	ret    
c0025039:	90                   	nop
c002503a:	66 90                	xchg   ax,ax

c002503c <Process::Process(bool, char const*, Process*, char**)>:
c002503c:	56                   	push   esi
c002503d:	53                   	push   ebx
c002503e:	83 ec 24             	sub    esp,0x24
c0025041:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0025045:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0025049:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002504d:	05 0c 02 00 00       	add    eax,0x20c
c0025052:	bb 07 00 00 00       	mov    ebx,0x7
c0025057:	89 c6                	mov    esi,eax
c0025059:	8d 76 00             	lea    esi,[esi+0x0]
c002505c:	85 db                	test   ebx,ebx
c002505e:	78 14                	js     c0025074 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0025060:	83 ec 0c             	sub    esp,0xc
c0025063:	56                   	push   esi
c0025064:	e8 5f a1 00 00       	call   c002f1c8 <ThreadControlBlock::ThreadControlBlock()>
c0025069:	83 c4 10             	add    esp,0x10
c002506c:	83 c6 5f             	add    esi,0x5f
c002506f:	83 eb 01             	sub    ebx,0x1
c0025072:	eb e8                	jmp    c002505c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0025074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025078:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c002507f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025083:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c002508a:	83 ec 0c             	sub    esp,0xc
c002508d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025091:	e8 e2 b1 ff ff       	call   c0020278 <KeNewProcessEnv(Process*)>
c0025096:	83 c4 10             	add    esp,0x10
c0025099:	89 c2                	mov    edx,eax
c002509b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002509f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00250a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250a9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00250b2:	a1 60 47 03 c0       	mov    eax,ds:0xc0034760
c00250b7:	8d 50 01             	lea    edx,[eax+0x1]
c00250ba:	89 15 60 47 03 c0    	mov    DWORD PTR ds:0xc0034760,edx
c00250c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00250c4:	89 02                	mov    DWORD PTR [edx],eax
c00250c6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00250ce:	83 ec 0c             	sub    esp,0xc
c00250d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00250d5:	e8 1c 15 ff ff       	call   c00165f6 <malloc>
c00250da:	83 c4 10             	add    esp,0x10
c00250dd:	89 c3                	mov    ebx,eax
c00250df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00250e4:	83 ec 08             	sub    esp,0x8
c00250e7:	50                   	push   eax
c00250e8:	53                   	push   ebx
c00250e9:	e8 ba 3a ff ff       	call   c0018ba8 <VAS::VAS(bool)>
c00250ee:	83 c4 10             	add    esp,0x10
c00250f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250f5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00250fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250ff:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025109:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002510d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025111:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0025117:	e8 b3 bb ff ff       	call   c0020ccf <KeInitSignals()>
c002511c:	89 c2                	mov    edx,eax
c002511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025122:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0025128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002512c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025132:	85 c0                	test   eax,eax
c0025134:	74 42                	je     c0025178 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0025136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002513a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025140:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025146:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002514a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0025150:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025154:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002515a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0025160:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025164:	05 0c 01 00 00       	add    eax,0x10c
c0025169:	83 ec 08             	sub    esp,0x8
c002516c:	52                   	push   edx
c002516d:	50                   	push   eax
c002516e:	e8 cd b4 fd ff       	call   c0000640 <strcpy>
c0025173:	83 c4 10             	add    esp,0x10
c0025176:	eb 64                	jmp    c00251dc <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0025178:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0025180:	83 ec 0c             	sub    esp,0xc
c0025183:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0025187:	e8 6a 14 ff ff       	call   c00165f6 <malloc>
c002518c:	83 c4 10             	add    esp,0x10
c002518f:	89 c3                	mov    ebx,eax
c0025191:	83 ec 08             	sub    esp,0x8
c0025194:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025198:	53                   	push   ebx
c0025199:	e8 08 26 ff ff       	call   c00177a6 <VgaText::VgaText(char const*)>
c002519e:	83 c4 10             	add    esp,0x10
c00251a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251a5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00251ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00251b5:	83 ec 0c             	sub    esp,0xc
c00251b8:	50                   	push   eax
c00251b9:	e8 86 1e ff ff       	call   c0017044 <addToTerminalCycle(VgaText*)>
c00251be:	83 c4 10             	add    esp,0x10
c00251c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251c5:	05 0c 01 00 00       	add    eax,0x10c
c00251ca:	83 ec 08             	sub    esp,0x8
c00251cd:	68 5d 31 03 c0       	push   0xc003315d
c00251d2:	50                   	push   eax
c00251d3:	e8 68 b4 fd ff       	call   c0000640 <strcpy>
c00251d8:	83 c4 10             	add    esp,0x10
c00251db:	90                   	nop
c00251dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251e0:	83 c0 0c             	add    eax,0xc
c00251e3:	83 ec 08             	sub    esp,0x8
c00251e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00251ea:	50                   	push   eax
c00251eb:	e8 50 b4 fd ff       	call   c0000640 <strcpy>
c00251f0:	83 c4 10             	add    esp,0x10
c00251f3:	83 ec 08             	sub    esp,0x8
c00251f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00251fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251fe:	e8 c1 fb ff ff       	call   c0024dc4 <Process::addArgs(char**)>
c0025203:	83 c4 10             	add    esp,0x10
c0025206:	90                   	nop
c0025207:	83 c4 24             	add    esp,0x24
c002520a:	5b                   	pop    ebx
c002520b:	5e                   	pop    esi
c002520c:	c3                   	ret    
c002520d:	8d 76 00             	lea    esi,[esi+0x0]

c0025210 <taskStartupFunction>:
c0025210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025215:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0025218:	c3                   	ret    
c0025219:	8d 76 00             	lea    esi,[esi+0x0]

c002521c <KeDisablePreemption()>:
c002521c:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0025221:	85 c0                	test   eax,eax
c0025223:	75 13                	jne    c0025238 <KeDisablePreemption()+0x1c>
c0025225:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c002522b:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c0025232:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0025238:	83 c0 01             	add    eax,0x1
c002523b:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0025240:	c3                   	ret    
c0025241:	8d 76 00             	lea    esi,[esi+0x0]

c0025244 <KeRestorePreemption()>:
c0025244:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0025249:	83 e8 01             	sub    eax,0x1
c002524c:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0025251:	75 0d                	jne    c0025260 <KeRestorePreemption()+0x1c>
c0025253:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0025258:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c002525d:	8d 76 00             	lea    esi,[esi+0x0]
c0025260:	c3                   	ret    
c0025261:	90                   	nop
c0025262:	66 90                	xchg   ax,ax

c0025264 <Process::createThread(void (*)(void*), void*, int)>:
c0025264:	57                   	push   edi
c0025265:	31 c9                	xor    ecx,ecx
c0025267:	56                   	push   esi
c0025268:	53                   	push   ebx
c0025269:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002526d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0025274:	89 f2                	mov    edx,esi
c0025276:	66 90                	xchg   ax,ax
c0025278:	0f b7 c2             	movzx  eax,dx
c002527b:	80 e2 01             	and    dl,0x1
c002527e:	74 14                	je     c0025294 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0025280:	d1 f8                	sar    eax,1
c0025282:	83 c1 01             	add    ecx,0x1
c0025285:	89 c2                	mov    edx,eax
c0025287:	83 f9 10             	cmp    ecx,0x10
c002528a:	75 ec                	jne    c0025278 <Process::createThread(void (*)(void*), void*, int)+0x14>
c002528c:	31 db                	xor    ebx,ebx
c002528e:	89 d8                	mov    eax,ebx
c0025290:	5b                   	pop    ebx
c0025291:	5e                   	pop    esi
c0025292:	5f                   	pop    edi
c0025293:	c3                   	ret    
c0025294:	b8 01 00 00 00       	mov    eax,0x1
c0025299:	d3 e0                	shl    eax,cl
c002529b:	09 c6                	or     esi,eax
c002529d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00252a0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00252a7:	01 c0                	add    eax,eax
c00252a9:	01 c8                	add    eax,ecx
c00252ab:	8d 04 80             	lea    eax,[eax+eax*4]
c00252ae:	01 d8                	add    eax,ebx
c00252b0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00252b7:	75 0b                	jne    c00252c4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00252b9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00252c3:	90                   	nop
c00252c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00252ca:	83 ec 0c             	sub    esp,0xc
c00252cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00252d0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00252d3:	01 c0                	add    eax,eax
c00252d5:	01 c8                	add    eax,ecx
c00252d7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00252da:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00252dd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00252e3:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00252e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00252ed:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00252f3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00252f9:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00252ff:	89 ca                	mov    edx,ecx
c0025301:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0025308:	f7 da                	neg    edx
c002530a:	c1 e2 15             	shl    edx,0x15
c002530d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0025313:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0025319:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002531d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0025327:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c002532d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025331:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0025337:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0025341:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c002534b:	68 00 01 00 00       	push   0x100
c0025350:	e8 a1 12 ff ff       	call   c00165f6 <malloc>
c0025355:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0025358:	58                   	pop    eax
c0025359:	5a                   	pop    edx
c002535a:	53                   	push   ebx
c002535b:	68 ec 01 04 c0       	push   0xc00401ec
c0025360:	e8 fb 9b 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025365:	83 c4 10             	add    esp,0x10
c0025368:	89 d8                	mov    eax,ebx
c002536a:	5b                   	pop    ebx
c002536b:	5e                   	pop    esi
c002536c:	5f                   	pop    edi
c002536d:	c3                   	ret    
c002536e:	66 90                	xchg   ax,ax

c0025370 <Process::createUserThread()>:
c0025370:	83 ec 0c             	sub    esp,0xc
c0025373:	68 80 00 00 00       	push   0x80
c0025378:	6a 00                	push   0x0
c002537a:	68 bc 4c 02 c0       	push   0xc0024cbc
c002537f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025383:	50                   	push   eax
c0025384:	e8 db fe ff ff       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c0025389:	83 c4 1c             	add    esp,0x1c
c002538c:	c3                   	ret    
c002538d:	8d 76 00             	lea    esi,[esi+0x0]

c0025390 <setupMultitasking(void (*)())>:
c0025390:	56                   	push   esi
c0025391:	53                   	push   ebx
c0025392:	83 ec 04             	sub    esp,0x4
c0025395:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025399:	eb 11                	jmp    c00253ac <setupMultitasking(void (*)())+0x1c>
c002539b:	90                   	nop
c002539c:	83 ec 0c             	sub    esp,0xc
c002539f:	68 ec 01 04 c0       	push   0xc00401ec
c00253a4:	e8 fb 9a 00 00       	call   c002eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00253a9:	83 c4 10             	add    esp,0x10
c00253ac:	83 ec 0c             	sub    esp,0xc
c00253af:	68 ec 01 04 c0       	push   0xc00401ec
c00253b4:	e8 c7 9a 00 00       	call   c002ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00253b9:	83 c4 10             	add    esp,0x10
c00253bc:	84 c0                	test   al,al
c00253be:	74 dc                	je     c002539c <setupMultitasking(void (*)())+0xc>
c00253c0:	83 ec 0c             	sub    esp,0xc
c00253c3:	68 24 07 00 00       	push   0x724
c00253c8:	e8 29 12 ff ff       	call   c00165f6 <malloc>
c00253cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00253d4:	89 c3                	mov    ebx,eax
c00253d6:	6a 00                	push   0x0
c00253d8:	68 61 31 03 c0       	push   0xc0033161
c00253dd:	6a 01                	push   0x1
c00253df:	50                   	push   eax
c00253e0:	e8 57 fc ff ff       	call   c002503c <Process::Process(bool, char const*, Process*, char**)>
c00253e5:	83 c4 14             	add    esp,0x14
c00253e8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00253ee:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c00253f4:	50                   	push   eax
c00253f5:	e8 9f 1e ff ff       	call   c0017299 <setActiveTerminal(VgaText*)>
c00253fa:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0025401:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c002540b:	83 c8 01             	or     eax,0x1
c002540e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0025415:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c002541b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002541e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025428:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c002542e:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0025434:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c002543e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025448:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0025452:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025458:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0025462:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025468:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0025472:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025479:	e8 78 11 ff ff       	call   c00165f6 <malloc>
c002547e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0025484:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c002548a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025490:	5a                   	pop    edx
c0025491:	59                   	pop    ecx
c0025492:	68 5d 31 03 c0       	push   0xc003315d
c0025497:	50                   	push   eax
c0025498:	e8 a3 b1 fd ff       	call   c0000640 <strcpy>
c002549d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00254a4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00254a8:	83 c4 14             	add    esp,0x14
c00254ab:	5b                   	pop    ebx
c00254ac:	5e                   	pop    esi
c00254ad:	e9 b7 ad fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00254b2:	66 90                	xchg   ax,ax

c00254b4 <schedule()>:
c00254b4:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c00254ba:	85 d2                	test   edx,edx
c00254bc:	74 0e                	je     c00254cc <schedule()+0x18>
c00254be:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c00254c8:	c3                   	ret    
c00254c9:	8d 76 00             	lea    esi,[esi+0x0]
c00254cc:	53                   	push   ebx
c00254cd:	83 ec 14             	sub    esp,0x14
c00254d0:	68 ec 01 04 c0       	push   0xc00401ec
c00254d5:	e8 a6 99 00 00       	call   c002ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00254da:	83 c4 10             	add    esp,0x10
c00254dd:	84 c0                	test   al,al
c00254df:	75 3f                	jne    c0025520 <schedule()+0x6c>
c00254e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00254e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00254e9:	83 fa 01             	cmp    edx,0x1
c00254ec:	74 3a                	je     c0025528 <schedule()+0x74>
c00254ee:	66 90                	xchg   ax,ax
c00254f0:	83 ec 0c             	sub    esp,0xc
c00254f3:	68 ec 01 04 c0       	push   0xc00401ec
c00254f8:	e8 9f 99 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254fd:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025504:	89 c3                	mov    ebx,eax
c0025506:	e8 99 99 00 00       	call   c002eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002550b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0025512:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025515:	e8 fa f7 ff ff       	call   c0024d14 <switchToThread(ThreadControlBlock*)>
c002551a:	83 c4 10             	add    esp,0x10
c002551d:	8d 76 00             	lea    esi,[esi+0x0]
c0025520:	83 c4 08             	add    esp,0x8
c0025523:	5b                   	pop    ebx
c0025524:	c3                   	ret    
c0025525:	8d 76 00             	lea    esi,[esi+0x0]
c0025528:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002552f:	83 ec 08             	sub    esp,0x8
c0025532:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025537:	50                   	push   eax
c0025538:	68 ec 01 04 c0       	push   0xc00401ec
c002553d:	e8 1e 9a 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025542:	83 c4 10             	add    esp,0x10
c0025545:	eb a9                	jmp    c00254f0 <schedule()+0x3c>
c0025547:	90                   	nop

c0025548 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025548:	83 ec 0c             	sub    esp,0xc
c002554b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025550:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025554:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025557:	e8 58 ff ff ff       	call   c00254b4 <schedule()>
c002555c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025561:	83 e8 01             	sub    eax,0x1
c0025564:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025569:	75 01                	jne    c002556c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c002556b:	fb                   	sti    
c002556c:	83 c4 0c             	add    esp,0xc
c002556f:	c3                   	ret    

c0025570 <blockTask(TaskState)>:
c0025570:	83 ec 0c             	sub    esp,0xc
c0025573:	fa                   	cli    
c0025574:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025579:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002557d:	83 c0 01             	add    eax,0x1
c0025580:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002558a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002558d:	e8 22 ff ff ff       	call   c00254b4 <schedule()>
c0025592:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025597:	83 e8 01             	sub    eax,0x1
c002559a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002559f:	75 03                	jne    c00255a4 <blockTask(TaskState)+0x34>
c00255a1:	fb                   	sti    
c00255a2:	66 90                	xchg   ax,ax
c00255a4:	83 c4 0c             	add    esp,0xc
c00255a7:	c3                   	ret    

c00255a8 <waitTask(int, int*, int)>:
c00255a8:	83 ec 18             	sub    esp,0x18
c00255ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00255b4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00255b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00255bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255c0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00255c3:	6a 07                	push   0x7
c00255c5:	e8 a6 ff ff ff       	call   c0025570 <blockTask(TaskState)>
c00255ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255cf:	83 c4 10             	add    esp,0x10
c00255d2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00255d5:	85 d2                	test   edx,edx
c00255d7:	74 0b                	je     c00255e4 <waitTask(int, int*, int)+0x3c>
c00255d9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00255dc:	89 02                	mov    DWORD PTR [edx],eax
c00255de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255e3:	90                   	nop
c00255e4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00255e7:	83 c4 0c             	add    esp,0xc
c00255ea:	c3                   	ret    
c00255eb:	90                   	nop

c00255ec <milliTenthSleepUntil(unsigned int)>:
c00255ec:	83 ec 0c             	sub    esp,0xc
c00255ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f3:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00255f9:	76 05                	jbe    c0025600 <milliTenthSleepUntil(unsigned int)+0x14>
c00255fb:	90                   	nop
c00255fc:	83 c4 0c             	add    esp,0xc
c00255ff:	c3                   	ret    
c0025600:	fa                   	cli    
c0025601:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025607:	83 ec 08             	sub    esp,0x8
c002560a:	83 c2 01             	add    edx,0x1
c002560d:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025613:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025619:	83 c1 01             	add    ecx,0x1
c002561c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025622:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025628:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c002562b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025630:	50                   	push   eax
c0025631:	68 e0 01 04 c0       	push   0xc00401e0
c0025636:	e8 25 99 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002563b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0025642:	e8 29 ff ff ff       	call   c0025570 <blockTask(TaskState)>
c0025647:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002564c:	83 c4 10             	add    esp,0x10
c002564f:	83 e8 01             	sub    eax,0x1
c0025652:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025657:	85 c0                	test   eax,eax
c0025659:	75 09                	jne    c0025664 <milliTenthSleepUntil(unsigned int)+0x78>
c002565b:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025660:	85 c0                	test   eax,eax
c0025662:	75 14                	jne    c0025678 <milliTenthSleepUntil(unsigned int)+0x8c>
c0025664:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025669:	83 e8 01             	sub    eax,0x1
c002566c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025671:	75 89                	jne    c00255fc <milliTenthSleepUntil(unsigned int)+0x10>
c0025673:	fb                   	sti    
c0025674:	83 c4 0c             	add    esp,0xc
c0025677:	c3                   	ret    
c0025678:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025682:	e8 2d fe ff ff       	call   c00254b4 <schedule()>
c0025687:	eb db                	jmp    c0025664 <milliTenthSleepUntil(unsigned int)+0x78>
c0025689:	8d 76 00             	lea    esi,[esi+0x0]

c002568c <milliTenthSleep(unsigned int)>:
c002568c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025690:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c0025695:	01 c2                	add    edx,eax
c0025697:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002569b:	e9 4c ff ff ff       	jmp    c00255ec <milliTenthSleepUntil(unsigned int)>

c00256a0 <sleep(unsigned int)>:
c00256a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256a4:	8d 04 80             	lea    eax,[eax+eax*4]
c00256a7:	8d 04 80             	lea    eax,[eax+eax*4]
c00256aa:	8d 04 80             	lea    eax,[eax+eax*4]
c00256ad:	8d 04 80             	lea    eax,[eax+eax*4]
c00256b0:	c1 e0 04             	shl    eax,0x4
c00256b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00256b7:	eb d3                	jmp    c002568c <milliTenthSleep(unsigned int)>
c00256b9:	8d 76 00             	lea    esi,[esi+0x0]

c00256bc <taskReturned>:
c00256bc:	83 ec 18             	sub    esp,0x18
c00256bf:	68 e0 31 03 c0       	push   0xc00331e0
c00256c4:	e8 d5 ad ff ff       	call   c002049e <KePanic(char const*)>
c00256c9:	83 c4 10             	add    esp,0x10
c00256cc:	83 ec 0c             	sub    esp,0xc
c00256cf:	6a 02                	push   0x2
c00256d1:	e8 9a fe ff ff       	call   c0025570 <blockTask(TaskState)>
c00256d6:	fa                   	cli    
c00256d7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00256dc:	83 c0 01             	add    eax,0x1
c00256df:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256e4:	e8 cb fd ff ff       	call   c00254b4 <schedule()>
c00256e9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00256ee:	83 c4 10             	add    esp,0x10
c00256f1:	83 e8 01             	sub    eax,0x1
c00256f4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256f9:	85 c0                	test   eax,eax
c00256fb:	75 cf                	jne    c00256cc <taskReturned+0x10>
c00256fd:	fb                   	sti    
c00256fe:	eb cc                	jmp    c00256cc <taskReturned+0x10>

c0025700 <Thr::processFromPID(int)>:
c0025700:	57                   	push   edi
c0025701:	56                   	push   esi
c0025702:	53                   	push   ebx
c0025703:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025707:	fa                   	cli    
c0025708:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c002570e:	83 ec 0c             	sub    esp,0xc
c0025711:	83 c1 01             	add    ecx,0x1
c0025714:	68 ec 01 04 c0       	push   0xc00401ec
c0025719:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c002571f:	e8 78 97 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025724:	83 c4 10             	add    esp,0x10
c0025727:	89 c7                	mov    edi,eax
c0025729:	eb 15                	jmp    c0025740 <Thr::processFromPID(int)+0x40>
c002572b:	90                   	nop
c002572c:	83 ec 0c             	sub    esp,0xc
c002572f:	68 ec 01 04 c0       	push   0xc00401ec
c0025734:	e8 63 97 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025739:	83 c4 10             	add    esp,0x10
c002573c:	39 f8                	cmp    eax,edi
c002573e:	74 50                	je     c0025790 <Thr::processFromPID(int)+0x90>
c0025740:	83 ec 0c             	sub    esp,0xc
c0025743:	68 ec 01 04 c0       	push   0xc00401ec
c0025748:	e8 4f 97 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002574d:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025754:	89 c3                	mov    ebx,eax
c0025756:	e8 49 97 00 00       	call   c002eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002575b:	58                   	pop    eax
c002575c:	5a                   	pop    edx
c002575d:	53                   	push   ebx
c002575e:	68 ec 01 04 c0       	push   0xc00401ec
c0025763:	e8 f8 97 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025768:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002576b:	83 c4 10             	add    esp,0x10
c002576e:	39 30                	cmp    DWORD PTR [eax],esi
c0025770:	75 ba                	jne    c002572c <Thr::processFromPID(int)+0x2c>
c0025772:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025777:	83 e8 01             	sub    eax,0x1
c002577a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002577f:	74 0b                	je     c002578c <Thr::processFromPID(int)+0x8c>
c0025781:	8d 76 00             	lea    esi,[esi+0x0]
c0025784:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025787:	5b                   	pop    ebx
c0025788:	5e                   	pop    esi
c0025789:	5f                   	pop    edi
c002578a:	c3                   	ret    
c002578b:	90                   	nop
c002578c:	fb                   	sti    
c002578d:	eb f5                	jmp    c0025784 <Thr::processFromPID(int)+0x84>
c002578f:	90                   	nop
c0025790:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025795:	83 e8 01             	sub    eax,0x1
c0025798:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002579d:	75 05                	jne    c00257a4 <Thr::processFromPID(int)+0xa4>
c002579f:	fb                   	sti    
c00257a0:	5b                   	pop    ebx
c00257a1:	5e                   	pop    esi
c00257a2:	5f                   	pop    edi
c00257a3:	c3                   	ret    
c00257a4:	5b                   	pop    ebx
c00257a5:	31 c0                	xor    eax,eax
c00257a7:	5e                   	pop    esi
c00257a8:	5f                   	pop    edi
c00257a9:	c3                   	ret    
c00257aa:	66 90                	xchg   ax,ax

c00257ac <unblockTask(ThreadControlBlock*)>:
c00257ac:	53                   	push   ebx
c00257ad:	83 ec 08             	sub    esp,0x8
c00257b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00257b4:	fa                   	cli    
c00257b5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00257ba:	83 c0 01             	add    eax,0x1
c00257bd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00257c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00257c5:	85 c0                	test   eax,eax
c00257c7:	74 67                	je     c0025830 <unblockTask(ThreadControlBlock*)+0x84>
c00257c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00257cc:	83 f8 01             	cmp    eax,0x1
c00257cf:	74 37                	je     c0025808 <unblockTask(ThreadControlBlock*)+0x5c>
c00257d1:	83 ec 0c             	sub    esp,0xc
c00257d4:	68 ec 01 04 c0       	push   0xc00401ec
c00257d9:	e8 be 96 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257de:	83 c4 10             	add    esp,0x10
c00257e1:	85 c0                	test   eax,eax
c00257e3:	75 1b                	jne    c0025800 <unblockTask(ThreadControlBlock*)+0x54>
c00257e5:	eb 5d                	jmp    c0025844 <unblockTask(ThreadControlBlock*)+0x98>
c00257e7:	90                   	nop
c00257e8:	83 ec 08             	sub    esp,0x8
c00257eb:	50                   	push   eax
c00257ec:	68 ec 01 04 c0       	push   0xc00401ec
c00257f1:	e8 c6 99 00 00       	call   c002f1bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00257f6:	83 c4 10             	add    esp,0x10
c00257f9:	85 c0                	test   eax,eax
c00257fb:	74 47                	je     c0025844 <unblockTask(ThreadControlBlock*)+0x98>
c00257fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025800:	39 c3                	cmp    ebx,eax
c0025802:	75 e4                	jne    c00257e8 <unblockTask(ThreadControlBlock*)+0x3c>
c0025804:	eb 12                	jmp    c0025818 <unblockTask(ThreadControlBlock*)+0x6c>
c0025806:	66 90                	xchg   ax,ax
c0025808:	83 ec 0c             	sub    esp,0xc
c002580b:	68 7f 31 03 c0       	push   0xc003317f
c0025810:	e8 70 3c ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0025815:	83 c4 10             	add    esp,0x10
c0025818:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002581d:	83 e8 01             	sub    eax,0x1
c0025820:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025825:	75 01                	jne    c0025828 <unblockTask(ThreadControlBlock*)+0x7c>
c0025827:	fb                   	sti    
c0025828:	83 c4 08             	add    esp,0x8
c002582b:	5b                   	pop    ebx
c002582c:	c3                   	ret    
c002582d:	8d 76 00             	lea    esi,[esi+0x0]
c0025830:	83 ec 0c             	sub    esp,0xc
c0025833:	68 68 31 03 c0       	push   0xc0033168
c0025838:	e8 48 3c ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002583d:	83 c4 10             	add    esp,0x10
c0025840:	eb d6                	jmp    c0025818 <unblockTask(ThreadControlBlock*)+0x6c>
c0025842:	66 90                	xchg   ax,ax
c0025844:	83 ec 08             	sub    esp,0x8
c0025847:	53                   	push   ebx
c0025848:	68 ec 01 04 c0       	push   0xc00401ec
c002584d:	e8 0e 97 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025852:	83 c4 10             	add    esp,0x10
c0025855:	eb c1                	jmp    c0025818 <unblockTask(ThreadControlBlock*)+0x6c>
c0025857:	90                   	nop

c0025858 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025858:	55                   	push   ebp
c0025859:	57                   	push   edi
c002585a:	56                   	push   esi
c002585b:	53                   	push   ebx
c002585c:	83 ec 1c             	sub    esp,0x1c
c002585f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0025863:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025866:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c002586c:	85 ed                	test   ebp,ebp
c002586e:	7e 28                	jle    c0025898 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025870:	31 f6                	xor    esi,esi
c0025872:	66 90                	xchg   ax,ax
c0025874:	83 ec 0c             	sub    esp,0xc
c0025877:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c002587e:	83 c6 01             	add    esi,0x1
c0025881:	57                   	push   edi
c0025882:	e8 7f 0d ff ff       	call   c0016606 <free>
c0025887:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002588a:	83 c4 10             	add    esp,0x10
c002588d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025893:	7f df                	jg     c0025874 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025895:	8d 76 00             	lea    esi,[esi+0x0]
c0025898:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00258a2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00258a7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00258aa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00258ad:	d3 c0                	rol    eax,cl
c00258af:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00258b6:	21 c8                	and    eax,ecx
c00258b8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00258bf:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00258c2:	89 f7                	mov    edi,esi
c00258c4:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00258cc:	0f 85 72 01 00 00    	jne    c0025a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00258d2:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00258d8:	85 ed                	test   ebp,ebp
c00258da:	74 1c                	je     c00258f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00258dc:	83 ec 0c             	sub    esp,0xc
c00258df:	55                   	push   ebp
c00258e0:	e8 af a8 ff ff       	call   c0020194 <EnvVarContainer::~EnvVarContainer()>
c00258e5:	59                   	pop    ecx
c00258e6:	5e                   	pop    esi
c00258e7:	6a 0c                	push   0xc
c00258e9:	55                   	push   ebp
c00258ea:	e8 69 3a ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c00258ef:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00258f2:	83 c4 10             	add    esp,0x10
c00258f5:	89 f7                	mov    edi,esi
c00258f7:	90                   	nop
c00258f8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00258fe:	85 c0                	test   eax,eax
c0025900:	0f 84 b2 00 00 00    	je     c00259b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025906:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0025909:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002590d:	31 c9                	xor    ecx,ecx
c002590f:	eb 17                	jmp    c0025928 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0025911:	8d 76 00             	lea    esi,[esi+0x0]
c0025914:	83 c1 01             	add    ecx,0x1
c0025917:	83 f9 10             	cmp    ecx,0x10
c002591a:	0f 84 98 00 00 00    	je     c00259b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025920:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025926:	66 90                	xchg   ax,ax
c0025928:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c002592f:	d3 fa                	sar    edx,cl
c0025931:	80 e2 01             	and    dl,0x1
c0025934:	74 de                	je     c0025914 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025936:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0025939:	01 d2                	add    edx,edx
c002593b:	01 ca                	add    edx,ecx
c002593d:	8d 14 92             	lea    edx,[edx+edx*4]
c0025940:	01 d0                	add    eax,edx
c0025942:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025948:	83 fd 07             	cmp    ebp,0x7
c002594b:	75 c7                	jne    c0025914 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002594d:	05 40 02 00 00       	add    eax,0x240
c0025952:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025955:	83 fd ff             	cmp    ebp,0xffffffff
c0025958:	0f 8c ee 00 00 00    	jl     c0025a4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c002595e:	0f 84 ac 01 00 00    	je     c0025b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025964:	85 ed                	test   ebp,ebp
c0025966:	0f 84 90 01 00 00    	je     c0025afc <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c002596c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c002596e:	75 a4                	jne    c0025914 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025970:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025976:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002597a:	01 d0                	add    eax,edx
c002597c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025980:	83 ec 0c             	sub    esp,0xc
c0025983:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025989:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002598c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025992:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025999:	50                   	push   eax
c002599a:	e8 0d fe ff ff       	call   c00257ac <unblockTask(ThreadControlBlock*)>
c002599f:	83 c4 10             	add    esp,0x10
c00259a2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00259a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00259a9:	89 f7                	mov    edi,esi
c00259ab:	83 c1 01             	add    ecx,0x1
c00259ae:	83 f9 10             	cmp    ecx,0x10
c00259b1:	0f 85 69 ff ff ff    	jne    c0025920 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00259b7:	90                   	nop
c00259b8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00259be:	85 c0                	test   eax,eax
c00259c0:	74 62                	je     c0025a24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00259c2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00259c8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00259ce:	74 54                	je     c0025a24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00259d0:	83 ec 0c             	sub    esp,0xc
c00259d3:	68 ec 01 04 c0       	push   0xc00401ec
c00259d8:	e8 bf 94 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00259dd:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00259e4:	89 c7                	mov    edi,eax
c00259e6:	e8 95 94 00 00       	call   c002ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00259eb:	83 c4 10             	add    esp,0x10
c00259ee:	84 c0                	test   al,al
c00259f0:	0f 84 ce 00 00 00    	je     c0025ac4 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00259f6:	66 90                	xchg   ax,ax
c00259f8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00259fb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025a01:	85 d2                	test   edx,edx
c0025a03:	74 0f                	je     c0025a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025a05:	83 ec 0c             	sub    esp,0xc
c0025a08:	8b 02                	mov    eax,DWORD PTR [edx]
c0025a0a:	52                   	push   edx
c0025a0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025a0e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a11:	83 c4 10             	add    esp,0x10
c0025a14:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025a1e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025a21:	8d 76 00             	lea    esi,[esi+0x0]
c0025a24:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025a2a:	85 db                	test   ebx,ebx
c0025a2c:	74 16                	je     c0025a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025a2e:	83 ec 0c             	sub    esp,0xc
c0025a31:	53                   	push   ebx
c0025a32:	e8 bb 2c ff ff       	call   c00186f2 <VAS::~VAS()>
c0025a37:	58                   	pop    eax
c0025a38:	5a                   	pop    edx
c0025a39:	6a 14                	push   0x14
c0025a3b:	53                   	push   ebx
c0025a3c:	e8 17 39 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c0025a41:	83 c4 10             	add    esp,0x10
c0025a44:	83 c4 1c             	add    esp,0x1c
c0025a47:	5b                   	pop    ebx
c0025a48:	5e                   	pop    esi
c0025a49:	5f                   	pop    edi
c0025a4a:	5d                   	pop    ebp
c0025a4b:	c3                   	ret    
c0025a4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025a50:	83 ec 0c             	sub    esp,0xc
c0025a53:	68 14 32 03 c0       	push   0xc0033214
c0025a58:	e8 41 aa ff ff       	call   c002049e <KePanic(char const*)>
c0025a5d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025a60:	83 c4 10             	add    esp,0x10
c0025a63:	89 f7                	mov    edi,esi
c0025a65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025a69:	e9 a6 fe ff ff       	jmp    c0025914 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025a6e:	66 90                	xchg   ax,ax
c0025a70:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025a76:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025a7c:	75 1e                	jne    c0025a9c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025a7e:	83 ec 0c             	sub    esp,0xc
c0025a81:	68 7c 32 03 c0       	push   0xc003327c
c0025a86:	e8 fa 39 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0025a8b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025a92:	e8 d9 fa ff ff       	call   c0025570 <blockTask(TaskState)>
c0025a97:	83 c4 10             	add    esp,0x10
c0025a9a:	66 90                	xchg   ax,ax
c0025a9c:	83 ec 08             	sub    esp,0x8
c0025a9f:	56                   	push   esi
c0025aa0:	68 ec 01 04 c0       	push   0xc00401ec
c0025aa5:	e8 b6 94 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025aaa:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025ab1:	e8 e6 93 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025ab6:	83 c4 10             	add    esp,0x10
c0025ab9:	39 f8                	cmp    eax,edi
c0025abb:	0f 84 37 ff ff ff    	je     c00259f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0025ac4:	83 ec 0c             	sub    esp,0xc
c0025ac7:	68 ec 01 04 c0       	push   0xc00401ec
c0025acc:	e8 cb 93 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025ad1:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025ad8:	89 c6                	mov    esi,eax
c0025ada:	e8 c5 93 00 00       	call   c002eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025adf:	83 c4 10             	add    esp,0x10
c0025ae2:	39 f3                	cmp    ebx,esi
c0025ae4:	74 b6                	je     c0025a9c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025ae6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025ae9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025aec:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025af2:	75 a8                	jne    c0025a9c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025af4:	e9 77 ff ff ff       	jmp    c0025a70 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025af9:	8d 76 00             	lea    esi,[esi+0x0]
c0025afc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025b00:	83 ec 0c             	sub    esp,0xc
c0025b03:	68 48 32 03 c0       	push   0xc0033248
c0025b08:	e9 4b ff ff ff       	jmp    c0025a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0025b10:	8b 36                	mov    esi,DWORD PTR [esi]
c0025b12:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025b16:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025b19:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b1c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025b22:	01 d7                	add    edi,edx
c0025b24:	89 f8                	mov    eax,edi
c0025b26:	e9 51 fe ff ff       	jmp    c002597c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025b2b:	90                   	nop

c0025b2c <cleanerTaskFunction(void*)>:
c0025b2c:	53                   	push   ebx
c0025b2d:	83 ec 08             	sub    esp,0x8
c0025b30:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b35:	83 e8 01             	sub    eax,0x1
c0025b38:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b3d:	75 01                	jne    c0025b40 <cleanerTaskFunction(void*)+0x14>
c0025b3f:	fb                   	sti    
c0025b40:	fa                   	cli    
c0025b41:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b46:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025b4d:	8d 50 01             	lea    edx,[eax+0x1]
c0025b50:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025b56:	0f 84 c4 00 00 00    	je     c0025c20 <cleanerTaskFunction(void*)+0xf4>
c0025b5c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b61:	85 c0                	test   eax,eax
c0025b63:	75 03                	jne    c0025b68 <cleanerTaskFunction(void*)+0x3c>
c0025b65:	fb                   	sti    
c0025b66:	66 90                	xchg   ax,ax
c0025b68:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025b6f:	fa                   	cli    
c0025b70:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025b76:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025b7c:	83 c2 01             	add    edx,0x1
c0025b7f:	83 c1 01             	add    ecx,0x1
c0025b82:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025b88:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025b8e:	fa                   	cli    
c0025b8f:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025b95:	83 c3 01             	add    ebx,0x1
c0025b98:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025b9e:	eb 28                	jmp    c0025bc8 <cleanerTaskFunction(void*)+0x9c>
c0025ba0:	83 ec 0c             	sub    esp,0xc
c0025ba3:	68 d4 01 04 c0       	push   0xc00401d4
c0025ba8:	e8 ef 92 00 00       	call   c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025bad:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025bb4:	89 c3                	mov    ebx,eax
c0025bb6:	e8 e9 92 00 00       	call   c002eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025bbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025bbe:	e8 95 fc ff ff       	call   c0025858 <cleanupTerminatedTask(ThreadControlBlock*)>
c0025bc3:	83 c4 10             	add    esp,0x10
c0025bc6:	66 90                	xchg   ax,ax
c0025bc8:	83 ec 0c             	sub    esp,0xc
c0025bcb:	68 d4 01 04 c0       	push   0xc00401d4
c0025bd0:	e8 ab 92 00 00       	call   c002ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025bd5:	83 c4 10             	add    esp,0x10
c0025bd8:	84 c0                	test   al,al
c0025bda:	74 c4                	je     c0025ba0 <cleanerTaskFunction(void*)+0x74>
c0025bdc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025be1:	83 e8 01             	sub    eax,0x1
c0025be4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025be9:	75 01                	jne    c0025bec <cleanerTaskFunction(void*)+0xc0>
c0025beb:	fb                   	sti    
c0025bec:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025bf1:	83 e8 01             	sub    eax,0x1
c0025bf4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025bf9:	0f 85 31 ff ff ff    	jne    c0025b30 <cleanerTaskFunction(void*)+0x4>
c0025bff:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025c04:	85 c0                	test   eax,eax
c0025c06:	0f 84 24 ff ff ff    	je     c0025b30 <cleanerTaskFunction(void*)+0x4>
c0025c0c:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025c16:	e8 99 f8 ff ff       	call   c00254b4 <schedule()>
c0025c1b:	e9 10 ff ff ff       	jmp    c0025b30 <cleanerTaskFunction(void*)+0x4>
c0025c20:	83 ec 0c             	sub    esp,0xc
c0025c23:	6a 02                	push   0x2
c0025c25:	e8 1e f9 ff ff       	call   c0025548 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c2a:	83 c4 10             	add    esp,0x10
c0025c2d:	e9 36 ff ff ff       	jmp    c0025b68 <cleanerTaskFunction(void*)+0x3c>
c0025c32:	66 90                	xchg   ax,ax

c0025c34 <terminateTask(int)>:
c0025c34:	83 ec 14             	sub    esp,0x14
c0025c37:	fa                   	cli    
c0025c38:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025c3e:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025c44:	83 c2 01             	add    edx,0x1
c0025c47:	83 c1 01             	add    ecx,0x1
c0025c4a:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025c50:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025c56:	fa                   	cli    
c0025c57:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025c60:	83 c0 01             	add    eax,0x1
c0025c63:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c6d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025c70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c75:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025c78:	50                   	push   eax
c0025c79:	68 d4 01 04 c0       	push   0xc00401d4
c0025c7e:	e8 dd 92 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025c83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c88:	83 c4 10             	add    esp,0x10
c0025c8b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025c92:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025c97:	85 c0                	test   eax,eax
c0025c99:	74 65                	je     c0025d00 <terminateTask(int)+0xcc>
c0025c9b:	83 ec 0c             	sub    esp,0xc
c0025c9e:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025ca5:	50                   	push   eax
c0025ca6:	e8 01 fb ff ff       	call   c00257ac <unblockTask(ThreadControlBlock*)>
c0025cab:	83 c4 10             	add    esp,0x10
c0025cae:	66 90                	xchg   ax,ax
c0025cb0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cb5:	83 e8 01             	sub    eax,0x1
c0025cb8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cbd:	75 01                	jne    c0025cc0 <terminateTask(int)+0x8c>
c0025cbf:	fb                   	sti    
c0025cc0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025cc5:	83 e8 01             	sub    eax,0x1
c0025cc8:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025ccd:	75 09                	jne    c0025cd8 <terminateTask(int)+0xa4>
c0025ccf:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025cd6:	75 3c                	jne    c0025d14 <terminateTask(int)+0xe0>
c0025cd8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cdd:	83 e8 01             	sub    eax,0x1
c0025ce0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ce5:	75 01                	jne    c0025ce8 <terminateTask(int)+0xb4>
c0025ce7:	fb                   	sti    
c0025ce8:	fa                   	cli    
c0025ce9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cee:	83 c0 01             	add    eax,0x1
c0025cf1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cf6:	66 90                	xchg   ax,ax
c0025cf8:	e8 b7 f7 ff ff       	call   c00254b4 <schedule()>
c0025cfd:	eb d9                	jmp    c0025cd8 <terminateTask(int)+0xa4>
c0025cff:	90                   	nop
c0025d00:	83 ec 0c             	sub    esp,0xc
c0025d03:	68 96 31 03 c0       	push   0xc0033196
c0025d08:	e8 78 37 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0025d0d:	83 c4 10             	add    esp,0x10
c0025d10:	eb 9e                	jmp    c0025cb0 <terminateTask(int)+0x7c>
c0025d12:	66 90                	xchg   ax,ax
c0025d14:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025d1e:	eb d8                	jmp    c0025cf8 <terminateTask(int)+0xc4>

c0025d20 <Thr::terminateFromIRQ(int)>:
c0025d20:	83 ec 18             	sub    esp,0x18
c0025d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d27:	50                   	push   eax
c0025d28:	e8 07 ff ff ff       	call   c0025c34 <terminateTask(int)>
c0025d2d:	8d 76 00             	lea    esi,[esi+0x0]

c0025d30 <__static_initialization_and_destruction_0(int, int)>:
c0025d30:	83 ec 0c             	sub    esp,0xc
c0025d33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025d38:	0f 85 8e 00 00 00    	jne    c0025dcc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025d3e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025d46:	0f 85 80 00 00 00    	jne    c0025dcc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025d4c:	83 ec 0c             	sub    esp,0xc
c0025d4f:	68 ec 01 04 c0       	push   0xc00401ec
c0025d54:	e8 bb 94 00 00       	call   c002f214 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025d59:	83 c4 10             	add    esp,0x10
c0025d5c:	83 ec 04             	sub    esp,0x4
c0025d5f:	68 58 3e 03 c0       	push   0xc0033e58
c0025d64:	68 ec 01 04 c0       	push   0xc00401ec
c0025d69:	68 c4 f1 02 c0       	push   0xc002f1c4
c0025d6e:	e8 95 35 ff ff       	call   c0019308 <__cxa_atexit>
c0025d73:	83 c4 10             	add    esp,0x10
c0025d76:	83 ec 0c             	sub    esp,0xc
c0025d79:	68 e0 01 04 c0       	push   0xc00401e0
c0025d7e:	e8 91 94 00 00       	call   c002f214 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025d83:	83 c4 10             	add    esp,0x10
c0025d86:	83 ec 04             	sub    esp,0x4
c0025d89:	68 58 3e 03 c0       	push   0xc0033e58
c0025d8e:	68 e0 01 04 c0       	push   0xc00401e0
c0025d93:	68 c4 f1 02 c0       	push   0xc002f1c4
c0025d98:	e8 6b 35 ff ff       	call   c0019308 <__cxa_atexit>
c0025d9d:	83 c4 10             	add    esp,0x10
c0025da0:	83 ec 0c             	sub    esp,0xc
c0025da3:	68 d4 01 04 c0       	push   0xc00401d4
c0025da8:	e8 67 94 00 00       	call   c002f214 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025dad:	83 c4 10             	add    esp,0x10
c0025db0:	83 ec 04             	sub    esp,0x4
c0025db3:	68 58 3e 03 c0       	push   0xc0033e58
c0025db8:	68 d4 01 04 c0       	push   0xc00401d4
c0025dbd:	68 c4 f1 02 c0       	push   0xc002f1c4
c0025dc2:	e8 41 35 ff ff       	call   c0019308 <__cxa_atexit>
c0025dc7:	83 c4 10             	add    esp,0x10
c0025dca:	66 90                	xchg   ax,ax
c0025dcc:	90                   	nop
c0025dcd:	83 c4 0c             	add    esp,0xc
c0025dd0:	c3                   	ret    
c0025dd1:	8d 76 00             	lea    esi,[esi+0x0]

c0025dd4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025dd4:	83 ec 0c             	sub    esp,0xc
c0025dd7:	83 ec 08             	sub    esp,0x8
c0025dda:	68 ff ff 00 00       	push   0xffff
c0025ddf:	6a 01                	push   0x1
c0025de1:	e8 4a ff ff ff       	call   c0025d30 <__static_initialization_and_destruction_0(int, int)>
c0025de6:	83 c4 10             	add    esp,0x10
c0025de9:	83 c4 0c             	add    esp,0xc
c0025dec:	c3                   	ret    

c0025ded <Vm::inbv(unsigned short)>:
c0025ded:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025df1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025df6:	75 06                	jne    c0025dfe <Vm::inbv(unsigned short)+0x11>
c0025df8:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025dfd:	c3                   	ret    
c0025dfe:	ec                   	in     al,dx
c0025dff:	c3                   	ret    

c0025e00 <Vm::outbv(unsigned short, unsigned char)>:
c0025e00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e08:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025e0d:	75 25                	jne    c0025e34 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025e0f:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025e15:	8d 51 01             	lea    edx,[ecx+0x1]
c0025e18:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025e1e:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025e24:	83 fa 20             	cmp    edx,0x20
c0025e27:	75 0c                	jne    c0025e35 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025e29:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025e33:	c3                   	ret    
c0025e34:	ee                   	out    dx,al
c0025e35:	c3                   	ret    

c0025e36 <Vm::realToLinear(unsigned short, unsigned short)>:
c0025e36:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025e3b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025e40:	c1 e0 04             	shl    eax,0x4
c0025e43:	01 d0                	add    eax,edx
c0025e45:	c3                   	ret    

c0025e46 <Vm::getSegment(unsigned int)>:
c0025e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e4a:	c1 e8 10             	shr    eax,0x10
c0025e4d:	c3                   	ret    

c0025e4e <Vm::getOffset(unsigned int)>:
c0025e4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e52:	c3                   	ret    

c0025e53 <Vm::mainloop2()>:
c0025e53:	83 ec 18             	sub    esp,0x18
c0025e56:	fa                   	cli    
c0025e57:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025e5d:	6a 02                	push   0x2
c0025e5f:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025e66:	e8 dd f6 ff ff       	call   c0025548 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025e6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025e70:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025e74:	52                   	push   edx
c0025e75:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025e79:	52                   	push   edx
c0025e7a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025e7e:	52                   	push   edx
c0025e7f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025e83:	50                   	push   eax
c0025e84:	e8 86 a3 fd ff       	call   c000020f <goToVM86>
c0025e89:	83 c4 2c             	add    esp,0x2c
c0025e8c:	c3                   	ret    

c0025e8d <Vm::mainVm8086Loop(void*)>:
c0025e8d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e92:	48                   	dec    eax
c0025e93:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e98:	75 01                	jne    c0025e9b <Vm::mainVm8086Loop(void*)+0xe>
c0025e9a:	fb                   	sti    
c0025e9b:	eb b6                	jmp    c0025e53 <Vm::mainloop2()>

c0025e9d <Vm::mainloop3(unsigned long)>:
c0025e9d:	83 ec 18             	sub    esp,0x18
c0025ea0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ea4:	fa                   	cli    
c0025ea5:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025eab:	6a 02                	push   0x2
c0025ead:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025eb4:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025eb9:	e8 8a f6 ff ff       	call   c0025548 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025ebe:	83 c4 1c             	add    esp,0x1c
c0025ec1:	eb 90                	jmp    c0025e53 <Vm::mainloop2()>

c0025ec3 <Vm::initialise8086()>:
c0025ec3:	83 ec 0c             	sub    esp,0xc
c0025ec6:	68 80 00 00 00       	push   0x80
c0025ecb:	6a 00                	push   0x0
c0025ecd:	68 8d 5e 02 c0       	push   0xc0025e8d
c0025ed2:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025ed8:	e8 87 f3 ff ff       	call   c0025264 <Process::createThread(void (*)(void*), void*, int)>
c0025edd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025ee4:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025ee9:	68 00 01 00 00       	push   0x100
c0025eee:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025ef3:	6a 00                	push   0x0
c0025ef5:	6a 00                	push   0x0
c0025ef7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025efd:	e8 58 2b ff ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025f02:	83 c4 2c             	add    esp,0x2c
c0025f05:	c3                   	ret    

c0025f06 <Vm::finish8086()>:
c0025f06:	53                   	push   ebx
c0025f07:	83 ec 08             	sub    esp,0x8
c0025f0a:	fa                   	cli    
c0025f0b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025f11:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025f18:	75 15                	jne    c0025f2f <Vm::finish8086()+0x29>
c0025f1a:	e8 95 f5 ff ff       	call   c00254b4 <schedule()>
c0025f1f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f24:	48                   	dec    eax
c0025f25:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f2a:	75 de                	jne    c0025f0a <Vm::finish8086()+0x4>
c0025f2c:	fb                   	sti    
c0025f2d:	eb db                	jmp    c0025f0a <Vm::finish8086()+0x4>
c0025f2f:	83 ec 0c             	sub    esp,0xc
c0025f32:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025f38:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025f3e:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025f45:	e8 62 f8 ff ff       	call   c00257ac <unblockTask(ThreadControlBlock*)>
c0025f4a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f4f:	83 c4 10             	add    esp,0x10
c0025f52:	8d 50 ff             	lea    edx,[eax-0x1]
c0025f55:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025f5b:	85 d2                	test   edx,edx
c0025f5d:	75 01                	jne    c0025f60 <Vm::finish8086()+0x5a>
c0025f5f:	fb                   	sti    
c0025f60:	89 d8                	mov    eax,ebx
c0025f62:	83 c4 08             	add    esp,0x8
c0025f65:	5b                   	pop    ebx
c0025f66:	c3                   	ret    

c0025f67 <Vm::getOutput8086(unsigned char*)>:
c0025f67:	57                   	push   edi
c0025f68:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025f6e:	56                   	push   esi
c0025f6f:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025f74:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025f78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025f7a:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025f7f:	5e                   	pop    esi
c0025f80:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025f8a:	5f                   	pop    edi
c0025f8b:	c3                   	ret    

c0025f8c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025f8c:	55                   	push   ebp
c0025f8d:	57                   	push   edi
c0025f8e:	56                   	push   esi
c0025f8f:	53                   	push   ebx
c0025f90:	83 ec 0c             	sub    esp,0xc
c0025f93:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025f97:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025f9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025f9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025fa3:	fa                   	cli    
c0025fa4:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025faa:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025fb1:	75 15                	jne    c0025fc8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025fb3:	e8 fc f4 ff ff       	call   c00254b4 <schedule()>
c0025fb8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025fbd:	48                   	dec    eax
c0025fbe:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025fc3:	75 de                	jne    c0025fa3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025fc5:	fb                   	sti    
c0025fc6:	eb db                	jmp    c0025fa3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025fc8:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025fcd:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025fd7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025fdb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025fdf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025fe3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025fe7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025feb:	0f b7 ff             	movzx  edi,di
c0025fee:	0f b7 f6             	movzx  esi,si
c0025ff1:	50                   	push   eax
c0025ff2:	6a 20                	push   0x20
c0025ff4:	6a 00                	push   0x0
c0025ff6:	68 40 02 04 c0       	push   0xc0040240
c0025ffb:	e8 f0 a4 fd ff       	call   c00004f0 <memset>
c0026000:	5a                   	pop    edx
c0026001:	59                   	pop    ecx
c0026002:	57                   	push   edi
c0026003:	56                   	push   esi
c0026004:	e8 2d fe ff ff       	call   c0025e36 <Vm::realToLinear(unsigned short, unsigned short)>
c0026009:	83 c4 10             	add    esp,0x10
c002600c:	89 c7                	mov    edi,eax
c002600e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0026012:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0026016:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0026018:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002601d:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0026024:	48                   	dec    eax
c0026025:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002602a:	75 01                	jne    c002602d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c002602c:	fb                   	sti    
c002602d:	83 ec 0c             	sub    esp,0xc
c0026030:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0026036:	e8 71 f7 ff ff       	call   c00257ac <unblockTask(ThreadControlBlock*)>
c002603b:	83 c4 1c             	add    esp,0x1c
c002603e:	b0 01                	mov    al,0x1
c0026040:	5b                   	pop    ebx
c0026041:	5e                   	pop    esi
c0026042:	5f                   	pop    edi
c0026043:	5d                   	pop    ebp
c0026044:	c3                   	ret    

c0026045 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0026045:	55                   	push   ebp
c0026046:	57                   	push   edi
c0026047:	56                   	push   esi
c0026048:	53                   	push   ebx
c0026049:	83 ec 34             	sub    esp,0x34
c002604c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0026050:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0026054:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0026058:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c002605c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0026060:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026064:	68 a4 32 03 c0       	push   0xc00332a4
c0026069:	e8 17 34 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002606e:	83 c4 10             	add    esp,0x10
c0026071:	fa                   	cli    
c0026072:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0026078:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c002607e:	84 db                	test   bl,bl
c0026080:	75 15                	jne    c0026097 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0026082:	e8 2d f4 ff ff       	call   c00254b4 <schedule()>
c0026087:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002608c:	48                   	dec    eax
c002608d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026092:	75 dd                	jne    c0026071 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0026094:	fb                   	sti    
c0026095:	eb da                	jmp    c0026071 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0026097:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002609b:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c00260a0:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c00260aa:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00260ae:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00260b2:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00260b6:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00260ba:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00260be:	50                   	push   eax
c00260bf:	6a 20                	push   0x20
c00260c1:	6a 00                	push   0x0
c00260c3:	68 40 02 04 c0       	push   0xc0040240
c00260c8:	e8 23 a4 fd ff       	call   c00004f0 <memset>
c00260cd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00260d4:	e8 1d 05 ff ff       	call   c00165f6 <malloc>
c00260d9:	83 c4 0c             	add    esp,0xc
c00260dc:	89 c5                	mov    ebp,eax
c00260de:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00260e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00260e8:	50                   	push   eax
c00260e9:	e8 9e 45 ff ff       	call   c001a68c <File::File(char const*, Process*)>
c00260ee:	83 c4 10             	add    esp,0x10
c00260f1:	85 ed                	test   ebp,ebp
c00260f3:	75 0a                	jne    c00260ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00260f5:	83 ec 0c             	sub    esp,0xc
c00260f8:	68 c6 32 03 c0       	push   0xc00332c6
c00260fd:	eb 2b                	jmp    c002612a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00260ff:	50                   	push   eax
c0026100:	8d 44 24 17          	lea    eax,[esp+0x17]
c0026104:	50                   	push   eax
c0026105:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026109:	50                   	push   eax
c002610a:	55                   	push   ebp
c002610b:	e8 9c 48 ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c0026110:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0026114:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0026118:	83 c4 10             	add    esp,0x10
c002611b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0026120:	74 27                	je     c0026149 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0026122:	83 ec 0c             	sub    esp,0xc
c0026125:	68 da 32 03 c0       	push   0xc00332da
c002612a:	e8 6f a3 ff ff       	call   c002049e <KePanic(char const*)>
c002612f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026134:	83 c4 10             	add    esp,0x10
c0026137:	48                   	dec    eax
c0026138:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002613d:	85 c0                	test   eax,eax
c002613f:	75 01                	jne    c0026142 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0026141:	fb                   	sti    
c0026142:	31 db                	xor    ebx,ebx
c0026144:	e9 90 00 00 00       	jmp    c00261d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0026149:	51                   	push   ecx
c002614a:	51                   	push   ecx
c002614b:	6a 01                	push   0x1
c002614d:	55                   	push   ebp
c002614e:	e8 57 45 ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0026153:	83 c4 10             	add    esp,0x10
c0026156:	85 c0                	test   eax,eax
c0026158:	74 26                	je     c0026180 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c002615a:	83 ec 0c             	sub    esp,0xc
c002615d:	68 f3 32 03 c0       	push   0xc00332f3
c0026162:	e8 37 a3 ff ff       	call   c002049e <KePanic(char const*)>
c0026167:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002616c:	83 c4 10             	add    esp,0x10
c002616f:	48                   	dec    eax
c0026170:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026175:	85 c0                	test   eax,eax
c0026177:	75 c9                	jne    c0026142 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0026179:	fb                   	sti    
c002617a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c002617e:	eb 59                	jmp    c00261d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0026180:	0f b7 ff             	movzx  edi,di
c0026183:	50                   	push   eax
c0026184:	0f b7 f6             	movzx  esi,si
c0026187:	50                   	push   eax
c0026188:	57                   	push   edi
c0026189:	56                   	push   esi
c002618a:	e8 a7 fc ff ff       	call   c0025e36 <Vm::realToLinear(unsigned short, unsigned short)>
c002618f:	5a                   	pop    edx
c0026190:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0026193:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0026197:	51                   	push   ecx
c0026198:	50                   	push   eax
c0026199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002619d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00261a1:	55                   	push   ebp
c00261a2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00261a5:	83 c4 14             	add    esp,0x14
c00261a8:	55                   	push   ebp
c00261a9:	e8 5a 45 ff ff       	call   c001a708 <File::close()>
c00261ae:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00261b3:	83 c4 10             	add    esp,0x10
c00261b6:	48                   	dec    eax
c00261b7:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c00261be:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00261c3:	85 c0                	test   eax,eax
c00261c5:	75 01                	jne    c00261c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00261c7:	fb                   	sti    
c00261c8:	83 ec 0c             	sub    esp,0xc
c00261cb:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c00261d1:	e8 d6 f5 ff ff       	call   c00257ac <unblockTask(ThreadControlBlock*)>
c00261d6:	83 c4 10             	add    esp,0x10
c00261d9:	83 c4 2c             	add    esp,0x2c
c00261dc:	88 d8                	mov    al,bl
c00261de:	5b                   	pop    ebx
c00261df:	5e                   	pop    esi
c00261e0:	5f                   	pop    edi
c00261e1:	5d                   	pop    ebp
c00261e2:	c3                   	ret    

c00261e3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00261e3:	57                   	push   edi
c00261e4:	56                   	push   esi
c00261e5:	53                   	push   ebx
c00261e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00261ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00261f2:	83 e8 06             	sub    eax,0x6
c00261f5:	0f b7 c0             	movzx  eax,ax
c00261f8:	50                   	push   eax
c00261f9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00261fe:	50                   	push   eax
c00261ff:	e8 32 fc ff ff       	call   c0025e36 <Vm::realToLinear(unsigned short, unsigned short)>
c0026204:	5a                   	pop    edx
c0026205:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0026208:	59                   	pop    ecx
c0026209:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c002620c:	8d 51 fa             	lea    edx,[ecx-0x6]
c002620f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026215:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0026218:	8d 56 02             	lea    edx,[esi+0x2]
c002621b:	66 89 10             	mov    WORD PTR [eax],dx
c002621e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0026222:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0026226:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026229:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c002622d:	0f b6 f1             	movzx  esi,cl
c0026230:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026234:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002623a:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c002623e:	0f b6 d5             	movzx  edx,ch
c0026241:	74 0a                	je     c002624d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0026243:	c1 e2 08             	shl    edx,0x8
c0026246:	09 f2                	or     edx,esi
c0026248:	80 ce 02             	or     dh,0x2
c002624b:	eb 08                	jmp    c0026255 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c002624d:	c1 e2 08             	shl    edx,0x8
c0026250:	09 f2                	or     edx,esi
c0026252:	80 e6 fd             	and    dh,0xfd
c0026255:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026259:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002625e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026262:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c002626a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c002626d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0026275:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0026278:	5b                   	pop    ebx
c0026279:	5e                   	pop    esi
c002627a:	5f                   	pop    edi
c002627b:	c3                   	ret    

c002627c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c002627c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026281:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026286:	c1 e0 04             	shl    eax,0x4
c0026289:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c002628c:	c3                   	ret    

c002628d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c002628d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026292:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026297:	c1 e0 04             	shl    eax,0x4
c002629a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c002629e:	c3                   	ret    

c002629f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c002629f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00262a4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262a9:	c1 e0 04             	shl    eax,0x4
c00262ac:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00262af:	c3                   	ret    

c00262b0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00262b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00262b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262ba:	c1 e0 04             	shl    eax,0x4
c00262bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00262c1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00262c4:	c3                   	ret    

c00262c5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00262c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00262ca:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262cf:	c1 e0 04             	shl    eax,0x4
c00262d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00262d6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00262da:	c3                   	ret    

c00262db <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00262db:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00262e0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262e5:	c1 e0 04             	shl    eax,0x4
c00262e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00262ec:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00262ef:	c3                   	ret    

c00262f0 <Vm::faultHandler(regs*)>:
c00262f0:	55                   	push   ebp
c00262f1:	57                   	push   edi
c00262f2:	56                   	push   esi
c00262f3:	53                   	push   ebx
c00262f4:	83 ec 2c             	sub    esp,0x2c
c00262f7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00262fb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00262fe:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0026302:	0f b7 f8             	movzx  edi,ax
c0026305:	52                   	push   edx
c0026306:	0f b7 c0             	movzx  eax,ax
c0026309:	50                   	push   eax
c002630a:	e8 27 fb ff ff       	call   c0025e36 <Vm::realToLinear(unsigned short, unsigned short)>
c002630f:	5a                   	pop    edx
c0026310:	59                   	pop    ecx
c0026311:	89 c1                	mov    ecx,eax
c0026313:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026316:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002631a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c002631f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026323:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0026326:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002632a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c002632f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026333:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026337:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002633b:	e8 f6 fa ff ff       	call   c0025e36 <Vm::realToLinear(unsigned short, unsigned short)>
c0026340:	5e                   	pop    esi
c0026341:	be 06 00 00 00       	mov    esi,0x6
c0026346:	5d                   	pop    ebp
c0026347:	31 ed                	xor    ebp,ebp
c0026349:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002634e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026351:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0026357:	0f 84 74 02 00 00    	je     c00265d1 <Vm::faultHandler(regs*)+0x2e1>
c002635d:	0f 87 94 00 00 00    	ja     c00263f7 <Vm::faultHandler(regs*)+0x107>
c0026363:	83 fa 66             	cmp    edx,0x66
c0026366:	0f 84 e2 01 00 00    	je     c002654e <Vm::faultHandler(regs*)+0x25e>
c002636c:	77 47                	ja     c00263b5 <Vm::faultHandler(regs*)+0xc5>
c002636e:	83 fa 36             	cmp    edx,0x36
c0026371:	0f 84 ca 01 00 00    	je     c0026541 <Vm::faultHandler(regs*)+0x251>
c0026377:	77 1a                	ja     c0026393 <Vm::faultHandler(regs*)+0xa3>
c0026379:	83 fa 26             	cmp    edx,0x26
c002637c:	0f 84 98 01 00 00    	je     c002651a <Vm::faultHandler(regs*)+0x22a>
c0026382:	83 fa 2e             	cmp    edx,0x2e
c0026385:	0f 85 21 06 00 00    	jne    c00269ac <Vm::faultHandler(regs*)+0x6bc>
c002638b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002638e:	31 f6                	xor    esi,esi
c0026390:	41                   	inc    ecx
c0026391:	eb bb                	jmp    c002634e <Vm::faultHandler(regs*)+0x5e>
c0026393:	83 fa 64             	cmp    edx,0x64
c0026396:	0f 84 8b 01 00 00    	je     c0026527 <Vm::faultHandler(regs*)+0x237>
c002639c:	0f 87 92 01 00 00    	ja     c0026534 <Vm::faultHandler(regs*)+0x244>
c00263a2:	83 fa 3e             	cmp    edx,0x3e
c00263a5:	0f 85 01 06 00 00    	jne    c00269ac <Vm::faultHandler(regs*)+0x6bc>
c00263ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00263ae:	be 01 00 00 00       	mov    esi,0x1
c00263b3:	eb db                	jmp    c0026390 <Vm::faultHandler(regs*)+0xa0>
c00263b5:	83 fa 6d             	cmp    edx,0x6d
c00263b8:	0f 84 34 03 00 00    	je     c00266f2 <Vm::faultHandler(regs*)+0x402>
c00263be:	77 17                	ja     c00263d7 <Vm::faultHandler(regs*)+0xe7>
c00263c0:	83 fa 67             	cmp    edx,0x67
c00263c3:	0f 84 92 01 00 00    	je     c002655b <Vm::faultHandler(regs*)+0x26b>
c00263c9:	83 fa 6c             	cmp    edx,0x6c
c00263cc:	0f 84 b1 02 00 00    	je     c0026683 <Vm::faultHandler(regs*)+0x393>
c00263d2:	e9 d5 05 00 00       	jmp    c00269ac <Vm::faultHandler(regs*)+0x6bc>
c00263d7:	83 fa 6f             	cmp    edx,0x6f
c00263da:	0f 84 3d 04 00 00    	je     c002681d <Vm::faultHandler(regs*)+0x52d>
c00263e0:	0f 82 9f 03 00 00    	jb     c0026785 <Vm::faultHandler(regs*)+0x495>
c00263e6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00263ec:	0f 84 76 01 00 00    	je     c0026568 <Vm::faultHandler(regs*)+0x278>
c00263f2:	e9 b5 05 00 00       	jmp    c00269ac <Vm::faultHandler(regs*)+0x6bc>
c00263f7:	81 fa ec 00 00 00    	cmp    edx,0xec
c00263fd:	0f 84 51 05 00 00    	je     c0026954 <Vm::faultHandler(regs*)+0x664>
c0026403:	0f 87 a9 00 00 00    	ja     c00264b2 <Vm::faultHandler(regs*)+0x1c2>
c0026409:	81 fa e4 00 00 00    	cmp    edx,0xe4
c002640f:	0f 84 d0 04 00 00    	je     c00268e5 <Vm::faultHandler(regs*)+0x5f5>
c0026415:	77 78                	ja     c002648f <Vm::faultHandler(regs*)+0x19f>
c0026417:	81 fa cd 00 00 00    	cmp    edx,0xcd
c002641d:	0f 84 0e 02 00 00    	je     c0026631 <Vm::faultHandler(regs*)+0x341>
c0026423:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0026429:	0f 85 7d 05 00 00    	jne    c00269ac <Vm::faultHandler(regs*)+0x6bc>
c002642f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0026433:	89 d1                	mov    ecx,edx
c0026435:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0026438:	c1 e1 08             	shl    ecx,0x8
c002643b:	09 ca                	or     edx,ecx
c002643d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026440:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0026444:	89 d1                	mov    ecx,edx
c0026446:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c002644a:	c1 e1 08             	shl    ecx,0x8
c002644d:	09 ca                	or     edx,ecx
c002644f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0026452:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0026456:	89 d1                	mov    ecx,edx
c0026458:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c002645c:	c1 e1 08             	shl    ecx,0x8
c002645f:	09 ca                	or     edx,ecx
c0026461:	81 ca 00 02 02 00    	or     edx,0x20200
c0026467:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002646a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c002646e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026474:	d1 e8                	shr    eax,1
c0026476:	83 e0 01             	and    eax,0x1
c0026479:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002647c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002647f:	83 c0 06             	add    eax,0x6
c0026482:	25 ff ff 00 00       	and    eax,0xffff
c0026487:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002648a:	e9 19 05 00 00       	jmp    c00269a8 <Vm::faultHandler(regs*)+0x6b8>
c002648f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026495:	0f 84 8f 04 00 00    	je     c002692a <Vm::faultHandler(regs*)+0x63a>
c002649b:	0f 82 60 04 00 00    	jb     c0026901 <Vm::faultHandler(regs*)+0x611>
c00264a1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00264a7:	0f 84 94 04 00 00    	je     c0026941 <Vm::faultHandler(regs*)+0x651>
c00264ad:	e9 fa 04 00 00       	jmp    c00269ac <Vm::faultHandler(regs*)+0x6bc>
c00264b2:	81 fa ef 00 00 00    	cmp    edx,0xef
c00264b8:	0f 84 d7 04 00 00    	je     c0026995 <Vm::faultHandler(regs*)+0x6a5>
c00264be:	77 2e                	ja     c00264ee <Vm::faultHandler(regs*)+0x1fe>
c00264c0:	81 fa ed 00 00 00    	cmp    edx,0xed
c00264c6:	0f 84 a4 04 00 00    	je     c0026970 <Vm::faultHandler(regs*)+0x680>
c00264cc:	81 fa ee 00 00 00    	cmp    edx,0xee
c00264d2:	0f 85 d4 04 00 00    	jne    c00269ac <Vm::faultHandler(regs*)+0x6bc>
c00264d8:	50                   	push   eax
c00264d9:	50                   	push   eax
c00264da:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00264de:	50                   	push   eax
c00264df:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00264e3:	50                   	push   eax
c00264e4:	e8 17 f9 ff ff       	call   c0025e00 <Vm::outbv(unsigned short, unsigned char)>
c00264e9:	e9 9f 04 00 00       	jmp    c002698d <Vm::faultHandler(regs*)+0x69d>
c00264ee:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00264f4:	0f 84 6d 01 00 00    	je     c0026667 <Vm::faultHandler(regs*)+0x377>
c00264fa:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0026500:	0f 84 6f 01 00 00    	je     c0026675 <Vm::faultHandler(regs*)+0x385>
c0026506:	81 fa f3 00 00 00    	cmp    edx,0xf3
c002650c:	0f 85 9a 04 00 00    	jne    c00269ac <Vm::faultHandler(regs*)+0x6bc>
c0026512:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026515:	e9 76 fe ff ff       	jmp    c0026390 <Vm::faultHandler(regs*)+0xa0>
c002651a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002651d:	be 02 00 00 00       	mov    esi,0x2
c0026522:	e9 69 fe ff ff       	jmp    c0026390 <Vm::faultHandler(regs*)+0xa0>
c0026527:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002652a:	be 03 00 00 00       	mov    esi,0x3
c002652f:	e9 5c fe ff ff       	jmp    c0026390 <Vm::faultHandler(regs*)+0xa0>
c0026534:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026537:	be 04 00 00 00       	mov    esi,0x4
c002653c:	e9 4f fe ff ff       	jmp    c0026390 <Vm::faultHandler(regs*)+0xa0>
c0026541:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026544:	be 05 00 00 00       	mov    esi,0x5
c0026549:	e9 42 fe ff ff       	jmp    c0026390 <Vm::faultHandler(regs*)+0xa0>
c002654e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026551:	bd 01 00 00 00       	mov    ebp,0x1
c0026556:	e9 35 fe ff ff       	jmp    c0026390 <Vm::faultHandler(regs*)+0xa0>
c002655b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002655e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0026563:	e9 28 fe ff ff       	jmp    c0026390 <Vm::faultHandler(regs*)+0xa0>
c0026568:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c002656b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002656f:	83 e5 01             	and    ebp,0x1
c0026572:	74 30                	je     c00265a4 <Vm::faultHandler(regs*)+0x2b4>
c0026574:	83 e9 04             	sub    ecx,0x4
c0026577:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002657d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026583:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026586:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026589:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002658f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026593:	0f 84 0c 04 00 00    	je     c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c0026599:	80 ce 02             	or     dh,0x2
c002659c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c002659f:	e9 01 04 00 00       	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c00265a4:	83 e9 02             	sub    ecx,0x2
c00265a7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00265ad:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00265b0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00265b4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00265ba:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00265be:	74 05                	je     c00265c5 <Vm::faultHandler(regs*)+0x2d5>
c00265c0:	80 ce 02             	or     dh,0x2
c00265c3:	eb 03                	jmp    c00265c8 <Vm::faultHandler(regs*)+0x2d8>
c00265c5:	80 e6 fd             	and    dh,0xfd
c00265c8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00265cc:	e9 d4 03 00 00       	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c00265d1:	83 e5 01             	and    ebp,0x1
c00265d4:	74 2a                	je     c0026600 <Vm::faultHandler(regs*)+0x310>
c00265d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00265d8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00265de:	81 ca 00 02 02 00    	or     edx,0x20200
c00265e4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00265e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00265e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00265ef:	c1 e8 09             	shr    eax,0x9
c00265f2:	83 e0 01             	and    eax,0x1
c00265f5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00265f8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00265fb:	83 c0 04             	add    eax,0x4
c00265fe:	eb 24                	jmp    c0026624 <Vm::faultHandler(regs*)+0x334>
c0026600:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0026603:	81 ca 00 02 02 00    	or     edx,0x20200
c0026609:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002660c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c002660f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026615:	c1 e8 09             	shr    eax,0x9
c0026618:	83 e0 01             	and    eax,0x1
c002661b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002661e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026621:	83 c0 02             	add    eax,0x2
c0026624:	25 ff ff 00 00       	and    eax,0xffff
c0026629:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002662c:	e9 74 03 00 00       	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c0026631:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026635:	3d ee 00 00 00       	cmp    eax,0xee
c002663a:	75 10                	jne    c002664c <Vm::faultHandler(regs*)+0x35c>
c002663c:	83 ec 0c             	sub    esp,0xc
c002663f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0026642:	e8 56 f8 ff ff       	call   c0025e9d <Vm::mainloop3(unsigned long)>
c0026647:	e9 44 03 00 00       	jmp    c0026990 <Vm::faultHandler(regs*)+0x6a0>
c002664c:	83 ec 0c             	sub    esp,0xc
c002664f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0026653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026657:	51                   	push   ecx
c0026658:	50                   	push   eax
c0026659:	53                   	push   ebx
c002665a:	e8 84 fb ff ff       	call   c00261e3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c002665f:	83 c4 20             	add    esp,0x20
c0026662:	e9 41 03 00 00       	jmp    c00269a8 <Vm::faultHandler(regs*)+0x6b8>
c0026667:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002666c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026670:	e9 30 03 00 00       	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c0026675:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002667a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c002667e:	e9 22 03 00 00       	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c0026683:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026686:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002668b:	74 2b                	je     c00266b8 <Vm::faultHandler(regs*)+0x3c8>
c002668d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026694:	76 22                	jbe    c00266b8 <Vm::faultHandler(regs*)+0x3c8>
c0026696:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002669a:	50                   	push   eax
c002669b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002669f:	50                   	push   eax
c00266a0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00266a4:	50                   	push   eax
c00266a5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00266a9:	50                   	push   eax
c00266aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266ae:	50                   	push   eax
c00266af:	6a 6c                	push   0x6c
c00266b1:	6a 6c                	push   0x6c
c00266b3:	e9 bd 01 00 00       	jmp    c0026875 <Vm::faultHandler(regs*)+0x585>
c00266b8:	83 ec 0c             	sub    esp,0xc
c00266bb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00266bf:	0f b7 f6             	movzx  esi,si
c00266c2:	50                   	push   eax
c00266c3:	e8 25 f7 ff ff       	call   c0025ded <Vm::inbv(unsigned short)>
c00266c8:	83 c4 0c             	add    esp,0xc
c00266cb:	0f b6 c0             	movzx  eax,al
c00266ce:	50                   	push   eax
c00266cf:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00266d3:	50                   	push   eax
c00266d4:	56                   	push   esi
c00266d5:	e8 d6 fb ff ff       	call   c00262b0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00266da:	83 c4 10             	add    esp,0x10
c00266dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00266e0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00266e4:	74 03                	je     c00266e9 <Vm::faultHandler(regs*)+0x3f9>
c00266e6:	48                   	dec    eax
c00266e7:	eb 01                	jmp    c00266ea <Vm::faultHandler(regs*)+0x3fa>
c00266e9:	40                   	inc    eax
c00266ea:	0f b7 c0             	movzx  eax,ax
c00266ed:	e9 8b 00 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x48d>
c00266f2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00266f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00266f8:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00266fd:	74 29                	je     c0026728 <Vm::faultHandler(regs*)+0x438>
c00266ff:	3d ff ff 00 00       	cmp    eax,0xffff
c0026704:	76 22                	jbe    c0026728 <Vm::faultHandler(regs*)+0x438>
c0026706:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002670a:	50                   	push   eax
c002670b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002670f:	50                   	push   eax
c0026710:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026714:	50                   	push   eax
c0026715:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026719:	50                   	push   eax
c002671a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002671e:	50                   	push   eax
c002671f:	6a 6d                	push   0x6d
c0026721:	6a 6d                	push   0x6d
c0026723:	e9 4d 01 00 00       	jmp    c0026875 <Vm::faultHandler(regs*)+0x585>
c0026728:	0f b7 c8             	movzx  ecx,ax
c002672b:	0f b7 f6             	movzx  esi,si
c002672e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026731:	83 e5 01             	and    ebp,0x1
c0026734:	74 20                	je     c0026756 <Vm::faultHandler(regs*)+0x466>
c0026736:	ed                   	in     eax,dx
c0026737:	55                   	push   ebp
c0026738:	50                   	push   eax
c0026739:	51                   	push   ecx
c002673a:	56                   	push   esi
c002673b:	e8 9b fb ff ff       	call   c00262db <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026740:	83 c4 10             	add    esp,0x10
c0026743:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026746:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002674a:	74 05                	je     c0026751 <Vm::faultHandler(regs*)+0x461>
c002674c:	83 e8 04             	sub    eax,0x4
c002674f:	eb 27                	jmp    c0026778 <Vm::faultHandler(regs*)+0x488>
c0026751:	83 c0 04             	add    eax,0x4
c0026754:	eb 22                	jmp    c0026778 <Vm::faultHandler(regs*)+0x488>
c0026756:	66 ed                	in     ax,dx
c0026758:	0f b7 c0             	movzx  eax,ax
c002675b:	57                   	push   edi
c002675c:	50                   	push   eax
c002675d:	51                   	push   ecx
c002675e:	56                   	push   esi
c002675f:	e8 61 fb ff ff       	call   c00262c5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026764:	83 c4 10             	add    esp,0x10
c0026767:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002676a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002676e:	74 05                	je     c0026775 <Vm::faultHandler(regs*)+0x485>
c0026770:	83 e8 02             	sub    eax,0x2
c0026773:	eb 03                	jmp    c0026778 <Vm::faultHandler(regs*)+0x488>
c0026775:	83 c0 02             	add    eax,0x2
c0026778:	25 ff ff 00 00       	and    eax,0xffff
c002677d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026780:	e9 20 02 00 00       	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c0026785:	8d 46 ff             	lea    eax,[esi-0x1]
c0026788:	0f b6 f0             	movzx  esi,al
c002678b:	83 fe 05             	cmp    esi,0x5
c002678e:	77 23                	ja     c00267b3 <Vm::faultHandler(regs*)+0x4c3>
c0026790:	ff 24 b5 68 33 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccc98]
c0026797:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c002679c:	eb 15                	jmp    c00267b3 <Vm::faultHandler(regs*)+0x4c3>
c002679e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00267a2:	eb 0f                	jmp    c00267b3 <Vm::faultHandler(regs*)+0x4c3>
c00267a4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00267a8:	eb 09                	jmp    c00267b3 <Vm::faultHandler(regs*)+0x4c3>
c00267aa:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00267ae:	eb 03                	jmp    c00267b3 <Vm::faultHandler(regs*)+0x4c3>
c00267b0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00267b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00267b6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00267bb:	74 29                	je     c00267e6 <Vm::faultHandler(regs*)+0x4f6>
c00267bd:	3d ff ff 00 00       	cmp    eax,0xffff
c00267c2:	76 22                	jbe    c00267e6 <Vm::faultHandler(regs*)+0x4f6>
c00267c4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00267c8:	50                   	push   eax
c00267c9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00267cd:	50                   	push   eax
c00267ce:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00267d2:	50                   	push   eax
c00267d3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00267d7:	50                   	push   eax
c00267d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00267dc:	50                   	push   eax
c00267dd:	6a 6e                	push   0x6e
c00267df:	6a 6e                	push   0x6e
c00267e1:	e9 8f 00 00 00       	jmp    c0026875 <Vm::faultHandler(regs*)+0x585>
c00267e6:	0f b7 c0             	movzx  eax,ax
c00267e9:	52                   	push   edx
c00267ea:	52                   	push   edx
c00267eb:	50                   	push   eax
c00267ec:	57                   	push   edi
c00267ed:	e8 8a fa ff ff       	call   c002627c <Vm::readByteFromReal(unsigned short, unsigned short)>
c00267f2:	59                   	pop    ecx
c00267f3:	0f b6 c0             	movzx  eax,al
c00267f6:	5e                   	pop    esi
c00267f7:	50                   	push   eax
c00267f8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00267fc:	50                   	push   eax
c00267fd:	e8 fe f5 ff ff       	call   c0025e00 <Vm::outbv(unsigned short, unsigned char)>
c0026802:	83 c4 10             	add    esp,0x10
c0026805:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026808:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002680c:	74 03                	je     c0026811 <Vm::faultHandler(regs*)+0x521>
c002680e:	48                   	dec    eax
c002680f:	eb 01                	jmp    c0026812 <Vm::faultHandler(regs*)+0x522>
c0026811:	40                   	inc    eax
c0026812:	0f b7 c0             	movzx  eax,ax
c0026815:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0026818:	e9 88 01 00 00       	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c002681d:	8d 46 ff             	lea    eax,[esi-0x1]
c0026820:	0f b6 f0             	movzx  esi,al
c0026823:	83 fe 05             	cmp    esi,0x5
c0026826:	77 1e                	ja     c0026846 <Vm::faultHandler(regs*)+0x556>
c0026828:	ff 24 b5 80 33 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccc80]
c002682f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026833:	eb 11                	jmp    c0026846 <Vm::faultHandler(regs*)+0x556>
c0026835:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026838:	eb 0c                	jmp    c0026846 <Vm::faultHandler(regs*)+0x556>
c002683a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c002683d:	eb 07                	jmp    c0026846 <Vm::faultHandler(regs*)+0x556>
c002683f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026842:	eb 02                	jmp    c0026846 <Vm::faultHandler(regs*)+0x556>
c0026844:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026846:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026849:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002684e:	74 37                	je     c0026887 <Vm::faultHandler(regs*)+0x597>
c0026850:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026856:	76 2f                	jbe    c0026887 <Vm::faultHandler(regs*)+0x597>
c0026858:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002685c:	50                   	push   eax
c002685d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026861:	50                   	push   eax
c0026862:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026866:	50                   	push   eax
c0026867:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002686b:	50                   	push   eax
c002686c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026870:	50                   	push   eax
c0026871:	6a 6f                	push   0x6f
c0026873:	6a 6f                	push   0x6f
c0026875:	68 0c 33 03 c0       	push   0xc003330c
c002687a:	e8 06 2c ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002687f:	83 c4 20             	add    esp,0x20
c0026882:	e9 83 01 00 00       	jmp    c0026a0a <Vm::faultHandler(regs*)+0x71a>
c0026887:	0f b7 d7             	movzx  edx,di
c002688a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c002688d:	0f b7 c6             	movzx  eax,si
c0026890:	81 e1 00 04 00 00    	and    ecx,0x400
c0026896:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026899:	83 e5 01             	and    ebp,0x1
c002689c:	74 1d                	je     c00268bb <Vm::faultHandler(regs*)+0x5cb>
c002689e:	55                   	push   ebp
c002689f:	55                   	push   ebp
c00268a0:	50                   	push   eax
c00268a1:	52                   	push   edx
c00268a2:	e8 f8 f9 ff ff       	call   c002629f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00268a7:	83 c4 10             	add    esp,0x10
c00268aa:	89 fa                	mov    edx,edi
c00268ac:	ef                   	out    dx,eax
c00268ad:	85 c9                	test   ecx,ecx
c00268af:	74 05                	je     c00268b6 <Vm::faultHandler(regs*)+0x5c6>
c00268b1:	83 ee 04             	sub    esi,0x4
c00268b4:	eb 21                	jmp    c00268d7 <Vm::faultHandler(regs*)+0x5e7>
c00268b6:	83 c6 04             	add    esi,0x4
c00268b9:	eb 1c                	jmp    c00268d7 <Vm::faultHandler(regs*)+0x5e7>
c00268bb:	55                   	push   ebp
c00268bc:	55                   	push   ebp
c00268bd:	50                   	push   eax
c00268be:	52                   	push   edx
c00268bf:	e8 c9 f9 ff ff       	call   c002628d <Vm::readWordFromReal(unsigned short, unsigned short)>
c00268c4:	83 c4 10             	add    esp,0x10
c00268c7:	89 fa                	mov    edx,edi
c00268c9:	66 ef                	out    dx,ax
c00268cb:	85 c9                	test   ecx,ecx
c00268cd:	74 05                	je     c00268d4 <Vm::faultHandler(regs*)+0x5e4>
c00268cf:	83 ee 02             	sub    esi,0x2
c00268d2:	eb 03                	jmp    c00268d7 <Vm::faultHandler(regs*)+0x5e7>
c00268d4:	83 c6 02             	add    esi,0x2
c00268d7:	81 e6 ff ff 00 00    	and    esi,0xffff
c00268dd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00268e0:	e9 c0 00 00 00       	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c00268e5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00268ec:	83 ec 0c             	sub    esp,0xc
c00268ef:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00268f3:	50                   	push   eax
c00268f4:	e8 f4 f4 ff ff       	call   c0025ded <Vm::inbv(unsigned short)>
c00268f9:	0f b6 c0             	movzx  eax,al
c00268fc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00268ff:	eb 3a                	jmp    c002693b <Vm::faultHandler(regs*)+0x64b>
c0026901:	83 e5 01             	and    ebp,0x1
c0026904:	74 07                	je     c002690d <Vm::faultHandler(regs*)+0x61d>
c0026906:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c002690a:	ed                   	in     eax,dx
c002690b:	eb 14                	jmp    c0026921 <Vm::faultHandler(regs*)+0x631>
c002690d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0026910:	66 31 f6             	xor    si,si
c0026913:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0026916:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c002691a:	66 ed                	in     ax,dx
c002691c:	0f b7 c0             	movzx  eax,ax
c002691f:	09 f0                	or     eax,esi
c0026921:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026924:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026928:	eb 7e                	jmp    c00269a8 <Vm::faultHandler(regs*)+0x6b8>
c002692a:	52                   	push   edx
c002692b:	52                   	push   edx
c002692c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026930:	50                   	push   eax
c0026931:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026935:	50                   	push   eax
c0026936:	e8 c5 f4 ff ff       	call   c0025e00 <Vm::outbv(unsigned short, unsigned char)>
c002693b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002693f:	eb 4f                	jmp    c0026990 <Vm::faultHandler(regs*)+0x6a0>
c0026941:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026944:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026948:	83 e5 01             	and    ebp,0x1
c002694b:	74 03                	je     c0026950 <Vm::faultHandler(regs*)+0x660>
c002694d:	ef                   	out    dx,eax
c002694e:	eb d4                	jmp    c0026924 <Vm::faultHandler(regs*)+0x634>
c0026950:	66 ef                	out    dx,ax
c0026952:	eb d0                	jmp    c0026924 <Vm::faultHandler(regs*)+0x634>
c0026954:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c002695b:	83 ec 0c             	sub    esp,0xc
c002695e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026962:	50                   	push   eax
c0026963:	e8 85 f4 ff ff       	call   c0025ded <Vm::inbv(unsigned short)>
c0026968:	0f b6 c0             	movzx  eax,al
c002696b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c002696e:	eb 1d                	jmp    c002698d <Vm::faultHandler(regs*)+0x69d>
c0026970:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026973:	83 e5 01             	and    ebp,0x1
c0026976:	74 03                	je     c002697b <Vm::faultHandler(regs*)+0x68b>
c0026978:	ed                   	in     eax,dx
c0026979:	eb 0d                	jmp    c0026988 <Vm::faultHandler(regs*)+0x698>
c002697b:	66 ed                	in     ax,dx
c002697d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026980:	0f b7 c0             	movzx  eax,ax
c0026983:	66 31 d2             	xor    dx,dx
c0026986:	09 d0                	or     eax,edx
c0026988:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c002698b:	eb 18                	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c002698d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026990:	83 c4 10             	add    esp,0x10
c0026993:	eb 13                	jmp    c00269a8 <Vm::faultHandler(regs*)+0x6b8>
c0026995:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026998:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002699b:	83 e5 01             	and    ebp,0x1
c002699e:	74 03                	je     c00269a3 <Vm::faultHandler(regs*)+0x6b3>
c00269a0:	ef                   	out    dx,eax
c00269a1:	eb 02                	jmp    c00269a5 <Vm::faultHandler(regs*)+0x6b5>
c00269a3:	66 ef                	out    dx,ax
c00269a5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00269a8:	b0 01                	mov    al,0x1
c00269aa:	eb 60                	jmp    c0026a0c <Vm::faultHandler(regs*)+0x71c>
c00269ac:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00269b0:	50                   	push   eax
c00269b1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00269b5:	50                   	push   eax
c00269b6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00269ba:	50                   	push   eax
c00269bb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00269bf:	50                   	push   eax
c00269c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00269c4:	50                   	push   eax
c00269c5:	52                   	push   edx
c00269c6:	52                   	push   edx
c00269c7:	68 39 33 03 c0       	push   0xc0033339
c00269cc:	e8 b4 2a ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00269d1:	83 c4 20             	add    esp,0x20
c00269d4:	83 ec 0c             	sub    esp,0xc
c00269d7:	6a 60                	push   0x60
c00269d9:	e8 0f f4 ff ff       	call   c0025ded <Vm::inbv(unsigned short)>
c00269de:	83 c4 10             	add    esp,0x10
c00269e1:	0f b6 d0             	movzx  edx,al
c00269e4:	83 fa 1c             	cmp    edx,0x1c
c00269e7:	74 05                	je     c00269ee <Vm::faultHandler(regs*)+0x6fe>
c00269e9:	83 fa 5a             	cmp    edx,0x5a
c00269ec:	75 e6                	jne    c00269d4 <Vm::faultHandler(regs*)+0x6e4>
c00269ee:	0f b6 c0             	movzx  eax,al
c00269f1:	83 f8 1c             	cmp    eax,0x1c
c00269f4:	74 05                	je     c00269fb <Vm::faultHandler(regs*)+0x70b>
c00269f6:	83 f8 5a             	cmp    eax,0x5a
c00269f9:	75 0f                	jne    c0026a0a <Vm::faultHandler(regs*)+0x71a>
c00269fb:	83 ec 0c             	sub    esp,0xc
c00269fe:	6a 60                	push   0x60
c0026a00:	e8 e8 f3 ff ff       	call   c0025ded <Vm::inbv(unsigned short)>
c0026a05:	83 c4 10             	add    esp,0x10
c0026a08:	eb e4                	jmp    c00269ee <Vm::faultHandler(regs*)+0x6fe>
c0026a0a:	31 c0                	xor    eax,eax
c0026a0c:	83 c4 2c             	add    esp,0x2c
c0026a0f:	5b                   	pop    ebx
c0026a10:	5e                   	pop    esi
c0026a11:	5f                   	pop    edi
c0026a12:	5d                   	pop    ebp
c0026a13:	c3                   	ret    

c0026a14 <noCopro(unsigned long)>:
c0026a14:	c3                   	ret    

c0026a15 <nmiHandler(regs*, void*)>:
c0026a15:	83 ec 0c             	sub    esp,0xc
c0026a18:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026a1d:	83 ec 0c             	sub    esp,0xc
c0026a20:	50                   	push   eax
c0026a21:	e8 30 f3 fe ff       	call   c0015d56 <Computer::handleNMI()>
c0026a26:	83 c4 10             	add    esp,0x10
c0026a29:	90                   	nop
c0026a2a:	83 c4 0c             	add    esp,0xc
c0026a2d:	c3                   	ret    

c0026a2e <doubleFault(regs*, void*)>:
c0026a2e:	55                   	push   ebp
c0026a2f:	89 e5                	mov    ebp,esp
c0026a31:	83 ec 08             	sub    esp,0x8
c0026a34:	83 ec 0c             	sub    esp,0xc
c0026a37:	68 98 33 03 c0       	push   0xc0033398
c0026a3c:	e8 5d 9a ff ff       	call   c002049e <KePanic(char const*)>
c0026a41:	83 c4 10             	add    esp,0x10
c0026a44:	90                   	nop
c0026a45:	c9                   	leave  
c0026a46:	c3                   	ret    

c0026a47 <displayDebugInfo(regs*)>:
c0026a47:	83 ec 1c             	sub    esp,0x1c
c0026a4a:	0f 20 c0             	mov    eax,cr0
c0026a4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a51:	0f 20 d0             	mov    eax,cr2
c0026a54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a58:	0f 20 d8             	mov    eax,cr3
c0026a5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026a5f:	0f 20 e0             	mov    eax,cr4
c0026a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0026a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a69:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026a6c:	83 ec 08             	sub    esp,0x8
c0026a6f:	50                   	push   eax
c0026a70:	68 b4 33 03 c0       	push   0xc00333b4
c0026a75:	e8 0b 2a ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026a7a:	83 c4 10             	add    esp,0x10
c0026a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a81:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026a84:	83 ec 08             	sub    esp,0x8
c0026a87:	50                   	push   eax
c0026a88:	68 a5 33 03 c0       	push   0xc00333a5
c0026a8d:	e8 f3 29 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026a92:	83 c4 10             	add    esp,0x10
c0026a95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a99:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026a9c:	83 ec 08             	sub    esp,0x8
c0026a9f:	50                   	push   eax
c0026aa0:	68 b0 33 03 c0       	push   0xc00333b0
c0026aa5:	e8 db 29 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026aaa:	83 c4 10             	add    esp,0x10
c0026aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ab1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026ab4:	83 ec 08             	sub    esp,0x8
c0026ab7:	50                   	push   eax
c0026ab8:	68 bf 33 03 c0       	push   0xc00333bf
c0026abd:	e8 c3 29 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026ac2:	83 c4 10             	add    esp,0x10
c0026ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ac9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026acc:	83 ec 08             	sub    esp,0x8
c0026acf:	50                   	push   eax
c0026ad0:	68 ca 33 03 c0       	push   0xc00333ca
c0026ad5:	e8 ab 29 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026ada:	83 c4 10             	add    esp,0x10
c0026add:	83 ec 08             	sub    esp,0x8
c0026ae0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026ae4:	68 d5 33 03 c0       	push   0xc00333d5
c0026ae9:	e8 97 29 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026aee:	83 c4 10             	add    esp,0x10
c0026af1:	83 ec 08             	sub    esp,0x8
c0026af4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026af8:	68 e0 33 03 c0       	push   0xc00333e0
c0026afd:	e8 83 29 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026b02:	83 c4 10             	add    esp,0x10
c0026b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b09:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026b0c:	c1 e0 05             	shl    eax,0x5
c0026b0f:	8d 90 80 47 03 c0    	lea    edx,[eax-0x3ffcb880]
c0026b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b19:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026b1c:	83 ec 04             	sub    esp,0x4
c0026b1f:	52                   	push   edx
c0026b20:	50                   	push   eax
c0026b21:	68 eb 33 03 c0       	push   0xc00333eb
c0026b26:	e8 5a 29 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026b2b:	83 c4 10             	add    esp,0x10
c0026b2e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b39:	83 ec 0c             	sub    esp,0xc
c0026b3c:	50                   	push   eax
c0026b3d:	e8 57 07 ff ff       	call   c0017299 <setActiveTerminal(VgaText*)>
c0026b42:	83 c4 10             	add    esp,0x10
c0026b45:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b50:	83 ec 08             	sub    esp,0x8
c0026b53:	68 fa 33 03 c0       	push   0xc00333fa
c0026b58:	50                   	push   eax
c0026b59:	e8 88 0a ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026b5e:	83 c4 10             	add    esp,0x10
c0026b61:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026b70:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026b73:	83 ec 08             	sub    esp,0x8
c0026b76:	52                   	push   edx
c0026b77:	50                   	push   eax
c0026b78:	e8 23 0a ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026b7d:	83 c4 10             	add    esp,0x10
c0026b80:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b8b:	83 ec 08             	sub    esp,0x8
c0026b8e:	68 08 34 03 c0       	push   0xc0033408
c0026b93:	50                   	push   eax
c0026b94:	e8 4d 0a ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026b99:	83 c4 10             	add    esp,0x10
c0026b9c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ba1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ba7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026bac:	8b 12                	mov    edx,DWORD PTR [edx]
c0026bae:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026bb1:	83 c2 0c             	add    edx,0xc
c0026bb4:	83 ec 08             	sub    esp,0x8
c0026bb7:	52                   	push   edx
c0026bb8:	50                   	push   eax
c0026bb9:	e8 28 0a ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026bbe:	83 c4 10             	add    esp,0x10
c0026bc1:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bc6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bcc:	83 ec 08             	sub    esp,0x8
c0026bcf:	68 11 34 03 c0       	push   0xc0033411
c0026bd4:	50                   	push   eax
c0026bd5:	e8 0c 0a ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026bda:	83 c4 10             	add    esp,0x10
c0026bdd:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026be2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026be8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026bec:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026bef:	83 ec 08             	sub    esp,0x8
c0026bf2:	52                   	push   edx
c0026bf3:	50                   	push   eax
c0026bf4:	e8 a7 09 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026bf9:	83 c4 10             	add    esp,0x10
c0026bfc:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c01:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c07:	83 ec 08             	sub    esp,0x8
c0026c0a:	68 19 34 03 c0       	push   0xc0033419
c0026c0f:	50                   	push   eax
c0026c10:	e8 d1 09 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026c15:	83 c4 10             	add    esp,0x10
c0026c18:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c1d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c27:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026c2a:	83 ec 08             	sub    esp,0x8
c0026c2d:	52                   	push   edx
c0026c2e:	50                   	push   eax
c0026c2f:	e8 6c 09 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026c34:	83 c4 10             	add    esp,0x10
c0026c37:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c42:	83 ec 08             	sub    esp,0x8
c0026c45:	68 21 34 03 c0       	push   0xc0033421
c0026c4a:	50                   	push   eax
c0026c4b:	e8 96 09 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026c50:	83 c4 10             	add    esp,0x10
c0026c53:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c58:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c62:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026c65:	83 ec 08             	sub    esp,0x8
c0026c68:	52                   	push   edx
c0026c69:	50                   	push   eax
c0026c6a:	e8 31 09 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026c6f:	83 c4 10             	add    esp,0x10
c0026c72:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c7d:	83 ec 08             	sub    esp,0x8
c0026c80:	68 29 34 03 c0       	push   0xc0033429
c0026c85:	50                   	push   eax
c0026c86:	e8 5b 09 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026c8b:	83 c4 10             	add    esp,0x10
c0026c8e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c99:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c9d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026ca0:	83 ec 08             	sub    esp,0x8
c0026ca3:	52                   	push   edx
c0026ca4:	50                   	push   eax
c0026ca5:	e8 f6 08 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026caa:	83 c4 10             	add    esp,0x10
c0026cad:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026cb8:	83 ec 08             	sub    esp,0x8
c0026cbb:	68 31 34 03 c0       	push   0xc0033431
c0026cc0:	50                   	push   eax
c0026cc1:	e8 20 09 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026cc6:	83 c4 10             	add    esp,0x10
c0026cc9:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026cd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026cd8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026cdb:	83 ec 08             	sub    esp,0x8
c0026cde:	52                   	push   edx
c0026cdf:	50                   	push   eax
c0026ce0:	e8 bb 08 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026ce5:	83 c4 10             	add    esp,0x10
c0026ce8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ced:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026cf3:	83 ec 08             	sub    esp,0x8
c0026cf6:	68 39 34 03 c0       	push   0xc0033439
c0026cfb:	50                   	push   eax
c0026cfc:	e8 e5 08 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026d01:	83 c4 10             	add    esp,0x10
c0026d04:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026d13:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026d16:	83 ec 08             	sub    esp,0x8
c0026d19:	52                   	push   edx
c0026d1a:	50                   	push   eax
c0026d1b:	e8 80 08 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026d20:	83 c4 10             	add    esp,0x10
c0026d23:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d2e:	83 ec 08             	sub    esp,0x8
c0026d31:	68 41 34 03 c0       	push   0xc0033441
c0026d36:	50                   	push   eax
c0026d37:	e8 aa 08 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026d3c:	83 c4 10             	add    esp,0x10
c0026d3f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d4a:	83 ec 08             	sub    esp,0x8
c0026d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026d51:	50                   	push   eax
c0026d52:	e8 49 08 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026d57:	83 c4 10             	add    esp,0x10
c0026d5a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d65:	83 ec 08             	sub    esp,0x8
c0026d68:	68 4a 34 03 c0       	push   0xc003344a
c0026d6d:	50                   	push   eax
c0026d6e:	e8 73 08 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026d73:	83 c4 10             	add    esp,0x10
c0026d76:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d81:	83 ec 08             	sub    esp,0x8
c0026d84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026d88:	50                   	push   eax
c0026d89:	e8 12 08 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026d8e:	83 c4 10             	add    esp,0x10
c0026d91:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d9c:	83 ec 08             	sub    esp,0x8
c0026d9f:	68 52 34 03 c0       	push   0xc0033452
c0026da4:	50                   	push   eax
c0026da5:	e8 3c 08 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0026daa:	83 c4 10             	add    esp,0x10
c0026dad:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026db2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026db8:	83 ec 08             	sub    esp,0x8
c0026dbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026dbf:	50                   	push   eax
c0026dc0:	e8 db 07 ff ff       	call   c00175a0 <VgaText::putx(unsigned int)>
c0026dc5:	83 c4 10             	add    esp,0x10
c0026dc8:	fa                   	cli    
c0026dc9:	f4                   	hlt    
c0026dca:	eb fe                	jmp    c0026dca <displayDebugInfo(regs*)+0x383>

c0026dcc <HalSystemIdle()>:
c0026dcc:	56                   	push   esi
c0026dcd:	53                   	push   ebx
c0026dce:	83 ec 14             	sub    esp,0x14
c0026dd1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026dd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026ddc:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026de2:	83 e0 04             	and    eax,0x4
c0026de5:	0f b6 c0             	movzx  eax,al
c0026de8:	85 c0                	test   eax,eax
c0026dea:	0f 95 c0             	setne  al
c0026ded:	0f b6 c0             	movzx  eax,al
c0026df0:	85 c0                	test   eax,eax
c0026df2:	74 4c                	je     c0026e40 <HalSystemIdle()+0x74>
c0026df4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026df9:	83 ec 08             	sub    esp,0x8
c0026dfc:	68 e1 00 00 00       	push   0xe1
c0026e01:	50                   	push   eax
c0026e02:	e8 59 ed fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c0026e07:	83 c4 10             	add    esp,0x10
c0026e0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026e0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026e12:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026e1b:	83 e2 02             	and    edx,0x2
c0026e1e:	89 d3                	mov    ebx,edx
c0026e20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026e24:	83 e2 00             	and    edx,0x0
c0026e27:	89 d6                	mov    esi,edx
c0026e29:	56                   	push   esi
c0026e2a:	53                   	push   ebx
c0026e2b:	68 e1 00 00 00       	push   0xe1
c0026e30:	50                   	push   eax
c0026e31:	e8 56 ed fe ff       	call   c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>
c0026e36:	83 c4 10             	add    esp,0x10
c0026e39:	e8 56 93 fd ff       	call   c0000194 <doTPAUSE>
c0026e3e:	eb 01                	jmp    c0026e41 <HalSystemIdle()+0x75>
c0026e40:	f4                   	hlt    
c0026e41:	90                   	nop
c0026e42:	83 c4 14             	add    esp,0x14
c0026e45:	5b                   	pop    ebx
c0026e46:	5e                   	pop    esi
c0026e47:	c3                   	ret    

c0026e48 <displayProgramFault(char const*)>:
c0026e48:	83 ec 0c             	sub    esp,0xc
c0026e4b:	83 ec 0c             	sub    esp,0xc
c0026e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e52:	e8 2e 26 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026e57:	83 c4 10             	add    esp,0x10
c0026e5a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026e5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026e64:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e6a:	85 c0                	test   eax,eax
c0026e6c:	74 21                	je     c0026e8f <displayProgramFault(char const*)+0x47>
c0026e6e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026e78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e7e:	6a 04                	push   0x4
c0026e80:	6a 0f                	push   0xf
c0026e82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026e86:	50                   	push   eax
c0026e87:	e8 cc 07 ff ff       	call   c0017658 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026e8c:	83 c4 10             	add    esp,0x10
c0026e8f:	90                   	nop
c0026e90:	83 c4 0c             	add    esp,0xc
c0026e93:	c3                   	ret    

c0026e94 <gpFault(regs*, void*)>:
c0026e94:	83 ec 1c             	sub    esp,0x1c
c0026e97:	c7 05 74 02 04 c0 f0 62 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc00262f0
c0026ea1:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026ea6:	85 c0                	test   eax,eax
c0026ea8:	74 1e                	je     c0026ec8 <gpFault(regs*, void*)+0x34>
c0026eaa:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026eaf:	83 ec 0c             	sub    esp,0xc
c0026eb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026eb6:	ff d0                	call   eax
c0026eb8:	83 c4 10             	add    esp,0x10
c0026ebb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026ebf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026ec4:	85 c0                	test   eax,eax
c0026ec6:	75 2e                	jne    c0026ef6 <gpFault(regs*, void*)+0x62>
c0026ec8:	83 ec 0c             	sub    esp,0xc
c0026ecb:	68 5a 34 03 c0       	push   0xc003345a
c0026ed0:	e8 73 ff ff ff       	call   c0026e48 <displayProgramFault(char const*)>
c0026ed5:	83 c4 10             	add    esp,0x10
c0026ed8:	83 ec 0c             	sub    esp,0xc
c0026edb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026edf:	e8 63 fb ff ff       	call   c0026a47 <displayDebugInfo(regs*)>
c0026ee4:	83 c4 10             	add    esp,0x10
c0026ee7:	83 ec 0c             	sub    esp,0xc
c0026eea:	6a 00                	push   0x0
c0026eec:	e8 2f ee ff ff       	call   c0025d20 <Thr::terminateFromIRQ(int)>
c0026ef1:	83 c4 10             	add    esp,0x10
c0026ef4:	eb 01                	jmp    c0026ef7 <gpFault(regs*, void*)+0x63>
c0026ef6:	90                   	nop
c0026ef7:	83 c4 1c             	add    esp,0x1c
c0026efa:	c3                   	ret    

c0026efb <pgFault(regs*, void*)>:
c0026efb:	83 ec 1c             	sub    esp,0x1c
c0026efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f02:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026f05:	0f 20 d0             	mov    eax,cr2
c0026f08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026f10:	83 ec 04             	sub    esp,0x4
c0026f13:	52                   	push   edx
c0026f14:	50                   	push   eax
c0026f15:	68 38 35 03 c0       	push   0xc0033538
c0026f1a:	e8 66 25 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026f1f:	83 c4 10             	add    esp,0x10
c0026f22:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026f27:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026f2c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026f32:	0f 20 d2             	mov    edx,cr2
c0026f35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026f39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026f3d:	83 ec 08             	sub    esp,0x8
c0026f40:	52                   	push   edx
c0026f41:	50                   	push   eax
c0026f42:	e8 89 1f ff ff       	call   c0018ed0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026f47:	83 c4 10             	add    esp,0x10
c0026f4a:	0f b6 c0             	movzx  eax,al
c0026f4d:	85 c0                	test   eax,eax
c0026f4f:	75 2e                	jne    c0026f7f <pgFault(regs*, void*)+0x84>
c0026f51:	83 ec 0c             	sub    esp,0xc
c0026f54:	68 73 34 03 c0       	push   0xc0033473
c0026f59:	e8 ea fe ff ff       	call   c0026e48 <displayProgramFault(char const*)>
c0026f5e:	83 c4 10             	add    esp,0x10
c0026f61:	83 ec 0c             	sub    esp,0xc
c0026f64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026f68:	e8 da fa ff ff       	call   c0026a47 <displayDebugInfo(regs*)>
c0026f6d:	83 c4 10             	add    esp,0x10
c0026f70:	83 ec 0c             	sub    esp,0xc
c0026f73:	6a 00                	push   0x0
c0026f75:	e8 a6 ed ff ff       	call   c0025d20 <Thr::terminateFromIRQ(int)>
c0026f7a:	83 c4 10             	add    esp,0x10
c0026f7d:	eb 01                	jmp    c0026f80 <pgFault(regs*, void*)+0x85>
c0026f7f:	90                   	nop
c0026f80:	83 c4 1c             	add    esp,0x1c
c0026f83:	c3                   	ret    

c0026f84 <otherISRHandler(regs*, void*)>:
c0026f84:	83 ec 0c             	sub    esp,0xc
c0026f87:	83 ec 0c             	sub    esp,0xc
c0026f8a:	68 60 35 03 c0       	push   0xc0033560
c0026f8f:	e8 b4 fe ff ff       	call   c0026e48 <displayProgramFault(char const*)>
c0026f94:	83 c4 10             	add    esp,0x10
c0026f97:	83 ec 0c             	sub    esp,0xc
c0026f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f9e:	e8 a4 fa ff ff       	call   c0026a47 <displayDebugInfo(regs*)>
c0026fa3:	83 c4 10             	add    esp,0x10
c0026fa6:	83 ec 0c             	sub    esp,0xc
c0026fa9:	6a 00                	push   0x0
c0026fab:	e8 70 ed ff ff       	call   c0025d20 <Thr::terminateFromIRQ(int)>
c0026fb0:	83 c4 10             	add    esp,0x10
c0026fb3:	90                   	nop
c0026fb4:	83 c4 0c             	add    esp,0xc
c0026fb7:	c3                   	ret    

c0026fb8 <opcodeFault(regs*, void*)>:
c0026fb8:	55                   	push   ebp
c0026fb9:	89 e5                	mov    ebp,esp
c0026fbb:	83 ec 08             	sub    esp,0x8
c0026fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fc1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026fc4:	83 ec 08             	sub    esp,0x8
c0026fc7:	50                   	push   eax
c0026fc8:	68 7e 34 03 c0       	push   0xc003347e
c0026fcd:	e8 b3 24 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026fd2:	83 c4 10             	add    esp,0x10
c0026fd5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026fda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026fe0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026fe6:	0f b6 c0             	movzx  eax,al
c0026fe9:	85 c0                	test   eax,eax
c0026feb:	74 21                	je     c002700e <opcodeFault(regs*, void*)+0x56>
c0026fed:	83 ec 0c             	sub    esp,0xc
c0026ff0:	68 88 35 03 c0       	push   0xc0033588
c0026ff5:	e8 8b 24 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0026ffa:	83 c4 10             	add    esp,0x10
c0026ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027000:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0027003:	8d 50 19             	lea    edx,[eax+0x19]
c0027006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027009:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c002700c:	eb 2b                	jmp    c0027039 <opcodeFault(regs*, void*)+0x81>
c002700e:	83 ec 0c             	sub    esp,0xc
c0027011:	68 8c 34 03 c0       	push   0xc003348c
c0027016:	e8 2d fe ff ff       	call   c0026e48 <displayProgramFault(char const*)>
c002701b:	83 c4 10             	add    esp,0x10
c002701e:	83 ec 0c             	sub    esp,0xc
c0027021:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027024:	e8 1e fa ff ff       	call   c0026a47 <displayDebugInfo(regs*)>
c0027029:	83 c4 10             	add    esp,0x10
c002702c:	83 ec 0c             	sub    esp,0xc
c002702f:	6a 00                	push   0x0
c0027031:	e8 ea ec ff ff       	call   c0025d20 <Thr::terminateFromIRQ(int)>
c0027036:	83 c4 10             	add    esp,0x10
c0027039:	c9                   	leave  
c002703a:	c3                   	ret    

c002703b <i386SaveCoprocessor(void*)>:
c002703b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002703f:	83 c0 3f             	add    eax,0x3f
c0027042:	83 e0 c0             	and    eax,0xffffffc0
c0027045:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027049:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c002704f <i386LoadCoprocessor(void*)>:
c002704f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027053:	83 c0 3f             	add    eax,0x3f
c0027056:	83 e0 c0             	and    eax,0xffffffc0
c0027059:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002705d:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0027063 <x87EmulHandler(regs*, void*)>:
c0027063:	53                   	push   ebx
c0027064:	83 ec 08             	sub    esp,0x8
c0027067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002706c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0027070:	74 10                	je     c0027082 <x87EmulHandler(regs*, void*)+0x1f>
c0027072:	83 ec 0c             	sub    esp,0xc
c0027075:	68 99 34 03 c0       	push   0xc0033499
c002707a:	e8 1f 94 ff ff       	call   c002049e <KePanic(char const*)>
c002707f:	83 c4 10             	add    esp,0x10
c0027082:	0f 20 c0             	mov    eax,cr0
c0027085:	a8 08                	test   al,0x8
c0027087:	74 59                	je     c00270e2 <x87EmulHandler(regs*, void*)+0x7f>
c0027089:	0f 06                	clts   
c002708b:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0027090:	85 c0                	test   eax,eax
c0027092:	74 0e                	je     c00270a2 <x87EmulHandler(regs*, void*)+0x3f>
c0027094:	83 ec 0c             	sub    esp,0xc
c0027097:	ff 70 55             	push   DWORD PTR [eax+0x55]
c002709a:	e8 9c ff ff ff       	call   c002703b <i386SaveCoprocessor(void*)>
c002709f:	83 c4 10             	add    esp,0x10
c00270a2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00270a8:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00270ac:	75 12                	jne    c00270c0 <x87EmulHandler(regs*, void*)+0x5d>
c00270ae:	83 ec 0c             	sub    esp,0xc
c00270b1:	68 40 02 00 00       	push   0x240
c00270b6:	e8 3b f5 fe ff       	call   c00165f6 <malloc>
c00270bb:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00270be:	eb 10                	jmp    c00270d0 <x87EmulHandler(regs*, void*)+0x6d>
c00270c0:	83 ec 0c             	sub    esp,0xc
c00270c3:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c00270c8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00270cb:	e8 7f ff ff ff       	call   c002704f <i386LoadCoprocessor(void*)>
c00270d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00270d5:	83 c4 10             	add    esp,0x10
c00270d8:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c00270dd:	83 c4 08             	add    esp,0x8
c00270e0:	5b                   	pop    ebx
c00270e1:	c3                   	ret    
c00270e2:	83 ec 0c             	sub    esp,0xc
c00270e5:	68 ad 34 03 c0       	push   0xc00334ad
c00270ea:	e8 96 23 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00270ef:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00270f7:	83 c4 18             	add    esp,0x18
c00270fa:	5b                   	pop    ebx
c00270fb:	e9 20 ec ff ff       	jmp    c0025d20 <Thr::terminateFromIRQ(int)>

c0027100 <HalInitialiseCoprocessor()>:
c0027100:	83 ec 10             	sub    esp,0x10
c0027103:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c002710d:	6a 00                	push   0x0
c002710f:	68 63 70 02 c0       	push   0xc0027063
c0027114:	6a 07                	push   0x7
c0027116:	e8 37 49 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002711b:	e8 a0 70 00 00       	call   c002e1c0 <avxDetect>
c0027120:	83 c4 10             	add    esp,0x10
c0027123:	85 c0                	test   eax,eax
c0027125:	74 1c                	je     c0027143 <HalInitialiseCoprocessor()+0x43>
c0027127:	c7 05 70 02 04 c0 ea e1 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e1ea
c0027131:	c7 05 6c 02 04 c0 fb e1 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e1fb
c002713b:	83 c4 0c             	add    esp,0xc
c002713e:	e9 c9 70 00 00       	jmp    c002e20c <avxInit>
c0027143:	e8 e8 73 00 00       	call   c002e530 <sseDetect>
c0027148:	85 c0                	test   eax,eax
c002714a:	74 1c                	je     c0027168 <HalInitialiseCoprocessor()+0x68>
c002714c:	c7 05 70 02 04 c0 48 e5 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e548
c0027156:	c7 05 6c 02 04 c0 50 e5 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e550
c0027160:	83 c4 0c             	add    esp,0xc
c0027163:	e9 f0 73 00 00       	jmp    c002e558 <sseInit>
c0027168:	e8 09 74 00 00       	call   c002e576 <x87Detect>
c002716d:	85 c0                	test   eax,eax
c002716f:	74 1c                	je     c002718d <HalInitialiseCoprocessor()+0x8d>
c0027171:	c7 05 70 02 04 c0 91 e5 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e591
c002717b:	c7 05 6c 02 04 c0 98 e5 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e598
c0027185:	83 c4 0c             	add    esp,0xc
c0027188:	e9 12 74 00 00       	jmp    c002e59f <x87Init>
c002718d:	c7 05 70 02 04 c0 14 6a 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc0026a14
c0027197:	c7 05 6c 02 04 c0 14 6a 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc0026a14
c00271a1:	0f 20 c0             	mov    eax,cr0
c00271a4:	83 c8 04             	or     eax,0x4
c00271a7:	0f 22 c0             	mov    cr0,eax
c00271aa:	83 c4 0c             	add    esp,0xc
c00271ad:	c3                   	ret    

c00271ae <HalPanic(char const*)>:
c00271ae:	53                   	push   ebx
c00271af:	83 ec 10             	sub    esp,0x10
c00271b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00271b6:	fa                   	cli    
c00271b7:	53                   	push   ebx
c00271b8:	68 c3 34 03 c0       	push   0xc00334c3
c00271bd:	e8 c3 22 ff ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00271c2:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c00271c7:	83 c4 10             	add    esp,0x10
c00271ca:	85 c0                	test   eax,eax
c00271cc:	74 09                	je     c00271d7 <HalPanic(char const*)+0x29>
c00271ce:	83 ec 0c             	sub    esp,0xc
c00271d1:	53                   	push   ebx
c00271d2:	ff d0                	call   eax
c00271d4:	83 c4 10             	add    esp,0x10
c00271d7:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c00271dc:	85 c0                	test   eax,eax
c00271de:	0f 84 dc 00 00 00    	je     c00272c0 <HalPanic(char const*)+0x112>
c00271e4:	52                   	push   edx
c00271e5:	6a 01                	push   0x1
c00271e7:	6a 0f                	push   0xf
c00271e9:	50                   	push   eax
c00271ea:	e8 05 ff fe ff       	call   c00170f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00271ef:	59                   	pop    ecx
c00271f0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00271f6:	e8 e9 00 ff ff       	call   c00172e4 <VgaText::clearScreen()>
c00271fb:	58                   	pop    eax
c00271fc:	5a                   	pop    edx
c00271fd:	68 90 15 03 c0       	push   0xc0031590
c0027202:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027208:	e8 1f ff fe ff       	call   c001712c <VgaText::setTitle(char*)>
c002720d:	83 c4 0c             	add    esp,0xc
c0027210:	6a 01                	push   0x1
c0027212:	6a 0f                	push   0xf
c0027214:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002721a:	e8 d5 fe fe ff       	call   c00170f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002721f:	59                   	pop    ecx
c0027220:	58                   	pop    eax
c0027221:	68 dc 34 03 c0       	push   0xc00334dc
c0027226:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002722c:	e8 b5 03 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0027231:	83 c4 0c             	add    esp,0xc
c0027234:	6a 0f                	push   0xf
c0027236:	6a 01                	push   0x1
c0027238:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002723e:	e8 b1 fe fe ff       	call   c00170f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027243:	58                   	pop    eax
c0027244:	5a                   	pop    edx
c0027245:	68 e5 34 03 c0       	push   0xc00334e5
c002724a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027250:	e8 91 03 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0027255:	83 c4 0c             	add    esp,0xc
c0027258:	6a 01                	push   0x1
c002725a:	6a 0f                	push   0xf
c002725c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027262:	e8 8d fe fe ff       	call   c00170f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027267:	59                   	pop    ecx
c0027268:	58                   	pop    eax
c0027269:	68 29 35 03 c0       	push   0xc0033529
c002726e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027274:	e8 6d 03 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c0027279:	58                   	pop    eax
c002727a:	5a                   	pop    edx
c002727b:	68 f2 34 03 c0       	push   0xc00334f2
c0027280:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027286:	e8 5b 03 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c002728b:	59                   	pop    ecx
c002728c:	58                   	pop    eax
c002728d:	68 2c 35 03 c0       	push   0xc003352c
c0027292:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027298:	e8 49 03 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c002729d:	58                   	pop    eax
c002729e:	5a                   	pop    edx
c002729f:	53                   	push   ebx
c00272a0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272a6:	e8 3b 03 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c00272ab:	59                   	pop    ecx
c00272ac:	5b                   	pop    ebx
c00272ad:	68 29 35 03 c0       	push   0xc0033529
c00272b2:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272b8:	e8 29 03 ff ff       	call   c00175e6 <VgaText::puts(char const*)>
c00272bd:	83 c4 10             	add    esp,0x10
c00272c0:	eb fe                	jmp    c00272c0 <HalPanic(char const*)+0x112>

c00272c2 <HalQueryPerformanceCounter()>:
c00272c2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00272c7:	31 d2                	xor    edx,edx
c00272c9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00272cf:	31 c0                	xor    eax,eax
c00272d1:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00272d8:	74 02                	je     c00272dc <HalQueryPerformanceCounter()+0x1a>
c00272da:	0f 31                	rdtsc  
c00272dc:	c3                   	ret    

c00272dd <HalInitialise()>:
c00272dd:	53                   	push   ebx
c00272de:	83 ec 08             	sub    esp,0x8
c00272e1:	e8 9c 49 ff ff       	call   c001bc82 <setupINTS()>
c00272e6:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c00272ed:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00272f2:	75 0f                	jne    c0027303 <HalInitialise()+0x26>
c00272f4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00272fa:	83 e2 fe             	and    edx,0xfffffffe
c00272fd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027303:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0027309:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0027310:	83 e2 fe             	and    edx,0xfffffffe
c0027313:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027319:	e8 9e 02 00 00       	call   c00275bc <picOpen()>
c002731e:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0027325:	74 0a                	je     c0027331 <HalInitialise()+0x54>
c0027327:	e8 e0 01 00 00       	call   c002750c <picDisable()>
c002732c:	e8 03 68 00 00       	call   c002db34 <apicOpen()>
c0027331:	bb 0f 00 00 00       	mov    ebx,0xf
c0027336:	50                   	push   eax
c0027337:	6a 00                	push   0x0
c0027339:	68 84 6f 02 c0       	push   0xc0026f84
c002733e:	6a 00                	push   0x0
c0027340:	e8 0d 47 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027345:	83 c4 0c             	add    esp,0xc
c0027348:	6a 00                	push   0x0
c002734a:	68 84 6f 02 c0       	push   0xc0026f84
c002734f:	6a 01                	push   0x1
c0027351:	e8 fc 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027356:	83 c4 0c             	add    esp,0xc
c0027359:	6a 00                	push   0x0
c002735b:	68 15 6a 02 c0       	push   0xc0026a15
c0027360:	6a 02                	push   0x2
c0027362:	e8 eb 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027367:	83 c4 0c             	add    esp,0xc
c002736a:	6a 00                	push   0x0
c002736c:	68 84 6f 02 c0       	push   0xc0026f84
c0027371:	6a 03                	push   0x3
c0027373:	e8 da 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027378:	83 c4 0c             	add    esp,0xc
c002737b:	6a 00                	push   0x0
c002737d:	68 84 6f 02 c0       	push   0xc0026f84
c0027382:	6a 04                	push   0x4
c0027384:	e8 c9 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027389:	83 c4 0c             	add    esp,0xc
c002738c:	6a 00                	push   0x0
c002738e:	68 84 6f 02 c0       	push   0xc0026f84
c0027393:	6a 05                	push   0x5
c0027395:	e8 b8 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002739a:	83 c4 0c             	add    esp,0xc
c002739d:	6a 00                	push   0x0
c002739f:	68 b8 6f 02 c0       	push   0xc0026fb8
c00273a4:	6a 06                	push   0x6
c00273a6:	e8 a7 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273ab:	83 c4 0c             	add    esp,0xc
c00273ae:	6a 00                	push   0x0
c00273b0:	68 2e 6a 02 c0       	push   0xc0026a2e
c00273b5:	6a 08                	push   0x8
c00273b7:	e8 96 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273bc:	83 c4 0c             	add    esp,0xc
c00273bf:	6a 00                	push   0x0
c00273c1:	68 84 6f 02 c0       	push   0xc0026f84
c00273c6:	6a 09                	push   0x9
c00273c8:	e8 85 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273cd:	83 c4 0c             	add    esp,0xc
c00273d0:	6a 00                	push   0x0
c00273d2:	68 84 6f 02 c0       	push   0xc0026f84
c00273d7:	6a 0a                	push   0xa
c00273d9:	e8 74 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273de:	83 c4 0c             	add    esp,0xc
c00273e1:	6a 00                	push   0x0
c00273e3:	68 84 6f 02 c0       	push   0xc0026f84
c00273e8:	6a 0b                	push   0xb
c00273ea:	e8 63 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273ef:	83 c4 0c             	add    esp,0xc
c00273f2:	6a 00                	push   0x0
c00273f4:	68 94 6e 02 c0       	push   0xc0026e94
c00273f9:	6a 0d                	push   0xd
c00273fb:	e8 52 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027400:	83 c4 0c             	add    esp,0xc
c0027403:	6a 00                	push   0x0
c0027405:	68 fb 6e 02 c0       	push   0xc0026efb
c002740a:	6a 0e                	push   0xe
c002740c:	e8 41 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027411:	83 c4 10             	add    esp,0x10
c0027414:	50                   	push   eax
c0027415:	6a 00                	push   0x0
c0027417:	68 84 6f 02 c0       	push   0xc0026f84
c002741c:	53                   	push   ebx
c002741d:	43                   	inc    ebx
c002741e:	e8 2f 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027423:	83 c4 10             	add    esp,0x10
c0027426:	83 fb 1e             	cmp    ebx,0x1e
c0027429:	75 e9                	jne    c0027414 <HalInitialise()+0x137>
c002742b:	50                   	push   eax
c002742c:	6a 00                	push   0x0
c002742e:	68 4d 1d 02 c0       	push   0xc0021d4d
c0027433:	6a 60                	push   0x60
c0027435:	e8 18 46 ff ff       	call   c001ba52 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002743a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002743f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0027449:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0027450:	e8 a1 f1 fe ff       	call   c00165f6 <malloc>
c0027455:	89 04 24             	mov    DWORD PTR [esp],eax
c0027458:	89 c3                	mov    ebx,eax
c002745a:	e8 3b 09 00 00       	call   c0027d9a <RTC::RTC()>
c002745f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0027469:	5a                   	pop    edx
c002746a:	59                   	pop    ecx
c002746b:	53                   	push   ebx
c002746c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027472:	e8 8f 40 ff ff       	call   c001b506 <Device::addChild(Device*)>
c0027477:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027479:	6a 00                	push   0x0
c002747b:	6a 00                	push   0x0
c002747d:	6a 00                	push   0x0
c002747f:	53                   	push   ebx
c0027480:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027483:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027488:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c002748e:	83 c4 28             	add    esp,0x28
c0027491:	5b                   	pop    ebx
c0027492:	c3                   	ret    

c0027493 <HalMakeBeep(int)>:
c0027493:	53                   	push   ebx
c0027494:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027498:	85 db                	test   ebx,ebx
c002749a:	75 07                	jne    c00274a3 <HalMakeBeep(int)+0x10>
c002749c:	e4 61                	in     al,0x61
c002749e:	83 e0 fc             	and    eax,0xfffffffc
c00274a1:	eb 26                	jmp    c00274c9 <HalMakeBeep(int)+0x36>
c00274a3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00274a8:	99                   	cdq    
c00274a9:	f7 fb                	idiv   ebx
c00274ab:	89 c1                	mov    ecx,eax
c00274ad:	b0 b6                	mov    al,0xb6
c00274af:	e6 43                	out    0x43,al
c00274b1:	88 c8                	mov    al,cl
c00274b3:	e6 42                	out    0x42,al
c00274b5:	89 c8                	mov    eax,ecx
c00274b7:	c1 e8 08             	shr    eax,0x8
c00274ba:	e6 42                	out    0x42,al
c00274bc:	e4 61                	in     al,0x61
c00274be:	89 c2                	mov    edx,eax
c00274c0:	83 ca 03             	or     edx,0x3
c00274c3:	38 d0                	cmp    al,dl
c00274c5:	74 04                	je     c00274cb <HalMakeBeep(int)+0x38>
c00274c7:	88 d0                	mov    al,dl
c00274c9:	e6 61                	out    0x61,al
c00274cb:	5b                   	pop    ebx
c00274cc:	c3                   	ret    

c00274cd <HalGetRand()>:
c00274cd:	31 c0                	xor    eax,eax
c00274cf:	c3                   	ret    

c00274d0 <HalEndOfInterrupt(int)>:
c00274d0:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00274d7:	74 23                	je     c00274fc <HalEndOfInterrupt(int)+0x2c>
c00274d9:	83 ec 14             	sub    esp,0x14
c00274dc:	6a 1b                	push   0x1b
c00274de:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00274e4:	e8 77 e6 fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c00274e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00274ee:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00274f8:	83 c4 1c             	add    esp,0x1c
c00274fb:	c3                   	ret    
c00274fc:	e9 3f 02 00 00       	jmp    c0027740 <picEOI(int)>

c0027501 <HalRestart()>:
c0027501:	c3                   	ret    

c0027502 <HalShutdown()>:
c0027502:	c3                   	ret    

c0027503 <HalSleep()>:
c0027503:	c3                   	ret    

c0027504 <picIoWait()>:
c0027504:	eb 00                	jmp    c0027506 <picIoWait()+0x2>
c0027506:	eb 00                	jmp    c0027508 <picIoWait()+0x4>
c0027508:	90                   	nop
c0027509:	c3                   	ret    
c002750a:	66 90                	xchg   ax,ax

c002750c <picDisable()>:
c002750c:	83 ec 10             	sub    esp,0x10
c002750f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0027516:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c002751b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002751f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027524:	ee                   	out    dx,al
c0027525:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c002752c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0027531:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027535:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c002753a:	ee                   	out    dx,al
c002753b:	90                   	nop
c002753c:	83 c4 10             	add    esp,0x10
c002753f:	c3                   	ret    

c0027540 <picGetIRQReg(int)>:
c0027540:	83 ec 10             	sub    esp,0x10
c0027543:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027547:	0f b6 c0             	movzx  eax,al
c002754a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027551:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0027555:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027559:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002755e:	ee                   	out    dx,al
c002755f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027563:	0f b6 c0             	movzx  eax,al
c0027566:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002756d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027571:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027575:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002757a:	ee                   	out    dx,al
c002757b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0027582:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0027587:	89 c2                	mov    edx,eax
c0027589:	ec                   	in     al,dx
c002758a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002758e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027592:	0f b6 c0             	movzx  eax,al
c0027595:	c1 e0 08             	shl    eax,0x8
c0027598:	89 c1                	mov    ecx,eax
c002759a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00275a1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00275a6:	89 c2                	mov    edx,eax
c00275a8:	ec                   	in     al,dx
c00275a9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00275ad:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00275b1:	0f b6 c0             	movzx  eax,al
c00275b4:	09 c8                	or     eax,ecx
c00275b6:	83 c4 10             	add    esp,0x10
c00275b9:	c3                   	ret    
c00275ba:	66 90                	xchg   ax,ax

c00275bc <picOpen()>:
c00275bc:	83 ec 50             	sub    esp,0x50
c00275bf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00275c6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00275cb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00275cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00275d3:	ee                   	out    dx,al
c00275d4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00275db:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00275e0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00275e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275e8:	ee                   	out    dx,al
c00275e9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00275f1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00275f9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0027600:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027604:	89 c2                	mov    edx,eax
c0027606:	ec                   	in     al,dx
c0027607:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c002760b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002760f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0027613:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c002761a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002761e:	89 c2                	mov    edx,eax
c0027620:	ec                   	in     al,dx
c0027621:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027625:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027629:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002762d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0027634:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027639:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c002763d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027641:	ee                   	out    dx,al
c0027642:	e8 bd fe ff ff       	call   c0027504 <picIoWait()>
c0027647:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c002764e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0027653:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0027657:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002765b:	ee                   	out    dx,al
c002765c:	e8 a3 fe ff ff       	call   c0027504 <picIoWait()>
c0027661:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027665:	0f b6 c0             	movzx  eax,al
c0027668:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c002766f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027673:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027677:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002767b:	ee                   	out    dx,al
c002767c:	e8 83 fe ff ff       	call   c0027504 <picIoWait()>
c0027681:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027685:	0f b6 c0             	movzx  eax,al
c0027688:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002768f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027693:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027697:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002769b:	ee                   	out    dx,al
c002769c:	e8 63 fe ff ff       	call   c0027504 <picIoWait()>
c00276a1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00276a8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00276ad:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00276b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00276b5:	ee                   	out    dx,al
c00276b6:	e8 49 fe ff ff       	call   c0027504 <picIoWait()>
c00276bb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00276c2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00276c7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00276cb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00276cf:	ee                   	out    dx,al
c00276d0:	e8 2f fe ff ff       	call   c0027504 <picIoWait()>
c00276d5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00276dc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00276e1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00276e5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00276e9:	ee                   	out    dx,al
c00276ea:	e8 15 fe ff ff       	call   c0027504 <picIoWait()>
c00276ef:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00276f6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00276fb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00276ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027703:	ee                   	out    dx,al
c0027704:	e8 fb fd ff ff       	call   c0027504 <picIoWait()>
c0027709:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c002770e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0027715:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027719:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c002771d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027721:	ee                   	out    dx,al
c0027722:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0027727:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c002772e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0027732:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0027736:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c002773a:	ee                   	out    dx,al
c002773b:	90                   	nop
c002773c:	83 c4 50             	add    esp,0x50
c002773f:	c3                   	ret    

c0027740 <picEOI(int)>:
c0027740:	83 ec 10             	sub    esp,0x10
c0027743:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027748:	75 1e                	jne    c0027768 <picEOI(int)+0x28>
c002774a:	6a 0b                	push   0xb
c002774c:	e8 ef fd ff ff       	call   c0027540 <picGetIRQReg(int)>
c0027751:	83 c4 04             	add    esp,0x4
c0027754:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027759:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c002775e:	25 80 00 00 00       	and    eax,0x80
c0027763:	74 73                	je     c00277d8 <picEOI(int)+0x98>
c0027765:	8d 76 00             	lea    esi,[esi+0x0]
c0027768:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c002776d:	75 31                	jne    c00277a0 <picEOI(int)+0x60>
c002776f:	6a 0b                	push   0xb
c0027771:	e8 ca fd ff ff       	call   c0027540 <picGetIRQReg(int)>
c0027776:	83 c4 04             	add    esp,0x4
c0027779:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c002777e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027782:	98                   	cwde   
c0027783:	85 c0                	test   eax,eax
c0027785:	78 19                	js     c00277a0 <picEOI(int)+0x60>
c0027787:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c002778e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027793:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027797:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002779c:	ee                   	out    dx,al
c002779d:	eb 3d                	jmp    c00277dc <picEOI(int)+0x9c>
c002779f:	90                   	nop
c00277a0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00277a5:	7e 19                	jle    c00277c0 <picEOI(int)+0x80>
c00277a7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00277ae:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00277b3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00277b7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00277bc:	ee                   	out    dx,al
c00277bd:	8d 76 00             	lea    esi,[esi+0x0]
c00277c0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00277c7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00277cc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00277d0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00277d5:	ee                   	out    dx,al
c00277d6:	eb 04                	jmp    c00277dc <picEOI(int)+0x9c>
c00277d8:	90                   	nop
c00277d9:	8d 76 00             	lea    esi,[esi+0x0]
c00277dc:	83 c4 10             	add    esp,0x10
c00277df:	c3                   	ret    

c00277e0 <RTC::open(int, int, void*)>:
c00277e0:	31 c0                	xor    eax,eax
c00277e2:	c3                   	ret    
c00277e3:	90                   	nop

c00277e4 <RTC::close(int, int, void*)>:
c00277e4:	31 c0                	xor    eax,eax
c00277e6:	c3                   	ret    
c00277e7:	90                   	nop

c00277e8 <RTC::timeInSecondsUTC()>:
c00277e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00277ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00277f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00277f8:	c3                   	ret    
c00277f9:	90                   	nop

c00277fa <RTC::timeInDatetimeUTC()>:
c00277fa:	53                   	push   ebx
c00277fb:	83 ec 14             	sub    esp,0x14
c00277fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027806:	8b 10                	mov    edx,DWORD PTR [eax]
c0027808:	50                   	push   eax
c0027809:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002780c:	83 c4 0c             	add    esp,0xc
c002780f:	52                   	push   edx
c0027810:	50                   	push   eax
c0027811:	53                   	push   ebx
c0027812:	e8 63 3a ff ff       	call   c001b27a <secondsToDatetime(unsigned long long)>
c0027817:	89 d8                	mov    eax,ebx
c0027819:	83 c4 14             	add    esp,0x14
c002781c:	5b                   	pop    ebx
c002781d:	c2 04 00             	ret    0x4

c0027820 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027820:	56                   	push   esi
c0027821:	53                   	push   ebx
c0027822:	83 ec 14             	sub    esp,0x14
c0027825:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027829:	8b 03                	mov    eax,DWORD PTR [ebx]
c002782b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c002782e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027832:	52                   	push   edx
c0027833:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027837:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002783b:	50                   	push   eax
c002783c:	e8 39 3a ff ff       	call   c001b27a <secondsToDatetime(unsigned long long)>
c0027841:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027845:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027849:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002784d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027851:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027855:	89 f0                	mov    eax,esi
c0027857:	83 c4 20             	add    esp,0x20
c002785a:	5b                   	pop    ebx
c002785b:	5e                   	pop    esi
c002785c:	ff e0                	jmp    eax

c002785e <RTC::~RTC()>:
c002785e:	83 ec 0c             	sub    esp,0xc
c0027861:	ba c8 35 03 c0       	mov    edx,0xc00335c8
c0027866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002786a:	89 10                	mov    DWORD PTR [eax],edx
c002786c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027870:	83 ec 0c             	sub    esp,0xc
c0027873:	50                   	push   eax
c0027874:	e8 93 37 ff ff       	call   c001b00c <Clock::~Clock()>
c0027879:	83 c4 10             	add    esp,0x10
c002787c:	90                   	nop
c002787d:	83 c4 0c             	add    esp,0xc
c0027880:	c3                   	ret    
c0027881:	90                   	nop

c0027882 <RTC::~RTC()>:
c0027882:	83 ec 0c             	sub    esp,0xc
c0027885:	83 ec 0c             	sub    esp,0xc
c0027888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002788c:	e8 cd ff ff ff       	call   c002785e <RTC::~RTC()>
c0027891:	83 c4 10             	add    esp,0x10
c0027894:	83 ec 08             	sub    esp,0x8
c0027897:	68 60 01 00 00       	push   0x160
c002789c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278a0:	e8 b3 1a ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c00278a5:	83 c4 10             	add    esp,0x10
c00278a8:	83 c4 0c             	add    esp,0xc
c00278ab:	c3                   	ret    

c00278ac <RTC::get_update_in_progress_flag()>:
c00278ac:	83 ec 14             	sub    esp,0x14
c00278af:	6a 0a                	push   0xa
c00278b1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278b7:	e8 5c e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00278bc:	83 c4 1c             	add    esp,0x1c
c00278bf:	0f b6 c0             	movzx  eax,al
c00278c2:	c1 e8 07             	shr    eax,0x7
c00278c5:	c3                   	ret    

c00278c6 <RTC::completeRTCRefresh()>:
c00278c6:	55                   	push   ebp
c00278c7:	57                   	push   edi
c00278c8:	56                   	push   esi
c00278c9:	53                   	push   ebx
c00278ca:	83 ec 3c             	sub    esp,0x3c
c00278cd:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00278d3:	83 ec 0c             	sub    esp,0xc
c00278d6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00278da:	e8 cd ff ff ff       	call   c00278ac <RTC::get_update_in_progress_flag()>
c00278df:	83 c4 10             	add    esp,0x10
c00278e2:	84 c0                	test   al,al
c00278e4:	74 0e                	je     c00278f4 <RTC::completeRTCRefresh()+0x2e>
c00278e6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00278ec:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00278f2:	73 df                	jae    c00278d3 <RTC::completeRTCRefresh()+0xd>
c00278f4:	51                   	push   ecx
c00278f5:	51                   	push   ecx
c00278f6:	6a 00                	push   0x0
c00278f8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278fe:	e8 15 e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027903:	5b                   	pop    ebx
c0027904:	89 c7                	mov    edi,eax
c0027906:	5e                   	pop    esi
c0027907:	6a 02                	push   0x2
c0027909:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002790f:	e8 04 e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027914:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027918:	5d                   	pop    ebp
c0027919:	58                   	pop    eax
c002791a:	6a 04                	push   0x4
c002791c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027922:	e8 f1 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027927:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c002792b:	58                   	pop    eax
c002792c:	5a                   	pop    edx
c002792d:	6a 07                	push   0x7
c002792f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027935:	e8 de e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c002793a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002793e:	59                   	pop    ecx
c002793f:	5b                   	pop    ebx
c0027940:	6a 08                	push   0x8
c0027942:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027948:	e8 cb e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c002794d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027951:	5e                   	pop    esi
c0027952:	5d                   	pop    ebp
c0027953:	6a 09                	push   0x9
c0027955:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002795b:	e8 b8 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027960:	0f b6 c0             	movzx  eax,al
c0027963:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027967:	83 c4 10             	add    esp,0x10
c002796a:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027970:	83 ec 0c             	sub    esp,0xc
c0027973:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027977:	e8 30 ff ff ff       	call   c00278ac <RTC::get_update_in_progress_flag()>
c002797c:	83 c4 10             	add    esp,0x10
c002797f:	84 c0                	test   al,al
c0027981:	74 0e                	je     c0027991 <RTC::completeRTCRefresh()+0xcb>
c0027983:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027989:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002798f:	73 df                	jae    c0027970 <RTC::completeRTCRefresh()+0xaa>
c0027991:	51                   	push   ecx
c0027992:	51                   	push   ecx
c0027993:	6a 00                	push   0x0
c0027995:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002799b:	e8 78 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279a0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00279a4:	5b                   	pop    ebx
c00279a5:	5e                   	pop    esi
c00279a6:	6a 02                	push   0x2
c00279a8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279ae:	e8 65 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279b3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00279b7:	5d                   	pop    ebp
c00279b8:	58                   	pop    eax
c00279b9:	6a 04                	push   0x4
c00279bb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279c1:	e8 52 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279c6:	88 c3                	mov    bl,al
c00279c8:	58                   	pop    eax
c00279c9:	5a                   	pop    edx
c00279ca:	6a 07                	push   0x7
c00279cc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279d2:	e8 41 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279d7:	59                   	pop    ecx
c00279d8:	89 c6                	mov    esi,eax
c00279da:	5d                   	pop    ebp
c00279db:	6a 08                	push   0x8
c00279dd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279e3:	e8 30 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279e8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00279ec:	58                   	pop    eax
c00279ed:	5a                   	pop    edx
c00279ee:	6a 09                	push   0x9
c00279f0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279f6:	e8 1d e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279fb:	89 f9                	mov    ecx,edi
c00279fd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027a01:	0f b6 e8             	movzx  ebp,al
c0027a04:	83 c4 10             	add    esp,0x10
c0027a07:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027a0b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a10:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0027a15:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0027a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027a1d:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0027a21:	0f 94 c0             	sete   al
c0027a24:	0f b6 fb             	movzx  edi,bl
c0027a27:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0027a2b:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0027a30:	0f 94 c2             	sete   dl
c0027a33:	21 d0                	and    eax,edx
c0027a35:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027a39:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027a3d:	0f 94 c2             	sete   dl
c0027a40:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0027a44:	21 c2                	and    edx,eax
c0027a46:	89 f0                	mov    eax,esi
c0027a48:	0f b6 c0             	movzx  eax,al
c0027a4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027a4f:	89 f0                	mov    eax,esi
c0027a51:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027a55:	0f 94 c0             	sete   al
c0027a58:	21 d0                	and    eax,edx
c0027a5a:	31 d2                	xor    edx,edx
c0027a5c:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027a60:	0f 94 c2             	sete   dl
c0027a63:	85 c2                	test   edx,eax
c0027a65:	75 27                	jne    c0027a8e <RTC::completeRTCRefresh()+0x1c8>
c0027a67:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027a6b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027a6f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027a73:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027a77:	89 f0                	mov    eax,esi
c0027a79:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027a7d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027a81:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027a85:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027a89:	e9 dc fe ff ff       	jmp    c002796a <RTC::completeRTCRefresh()+0xa4>
c0027a8e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027a92:	75 d3                	jne    c0027a67 <RTC::completeRTCRefresh()+0x1a1>
c0027a94:	52                   	push   edx
c0027a95:	52                   	push   edx
c0027a96:	6a 0b                	push   0xb
c0027a98:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a9e:	e8 75 e1 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027aa3:	83 c4 10             	add    esp,0x10
c0027aa6:	a8 04                	test   al,0x4
c0027aa8:	75 7a                	jne    c0027b24 <RTC::completeRTCRefresh()+0x25e>
c0027aaa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027aae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027ab2:	83 e1 0f             	and    ecx,0xf
c0027ab5:	c1 ea 04             	shr    edx,0x4
c0027ab8:	c1 ef 04             	shr    edi,0x4
c0027abb:	6b d2 0a             	imul   edx,edx,0xa
c0027abe:	83 e6 0f             	and    esi,0xf
c0027ac1:	01 d1                	add    ecx,edx
c0027ac3:	c1 ed 04             	shr    ebp,0x4
c0027ac6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027aca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027ace:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027ad2:	c1 ea 04             	shr    edx,0x4
c0027ad5:	83 e1 0f             	and    ecx,0xf
c0027ad8:	6b d2 0a             	imul   edx,edx,0xa
c0027adb:	6b ed 0a             	imul   ebp,ebp,0xa
c0027ade:	01 d1                	add    ecx,edx
c0027ae0:	89 fa                	mov    edx,edi
c0027ae2:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027ae6:	83 e2 07             	and    edx,0x7
c0027ae9:	89 d9                	mov    ecx,ebx
c0027aeb:	6b d2 0a             	imul   edx,edx,0xa
c0027aee:	83 e1 0f             	and    ecx,0xf
c0027af1:	83 e3 80             	and    ebx,0xffffff80
c0027af4:	01 d1                	add    ecx,edx
c0027af6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027afa:	09 cb                	or     ebx,ecx
c0027afc:	c1 ea 04             	shr    edx,0x4
c0027aff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027b03:	6b d2 0a             	imul   edx,edx,0xa
c0027b06:	83 e1 0f             	and    ecx,0xf
c0027b09:	01 d6                	add    esi,edx
c0027b0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027b0f:	c1 ea 04             	shr    edx,0x4
c0027b12:	6b d2 0a             	imul   edx,edx,0xa
c0027b15:	01 d1                	add    ecx,edx
c0027b17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027b1b:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027b1f:	83 e2 0f             	and    edx,0xf
c0027b22:	01 d5                	add    ebp,edx
c0027b24:	a8 02                	test   al,0x2
c0027b26:	75 15                	jne    c0027b3d <RTC::completeRTCRefresh()+0x277>
c0027b28:	f6 c3 80             	test   bl,0x80
c0027b2b:	74 10                	je     c0027b3d <RTC::completeRTCRefresh()+0x277>
c0027b2d:	83 e3 7f             	and    ebx,0x7f
c0027b30:	b9 18 00 00 00       	mov    ecx,0x18
c0027b35:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027b38:	99                   	cdq    
c0027b39:	f7 f9                	idiv   ecx
c0027b3b:	88 d3                	mov    bl,dl
c0027b3d:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027b43:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027b49:	77 06                	ja     c0027b51 <RTC::completeRTCRefresh()+0x28b>
c0027b4b:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027b51:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027b56:	31 c9                	xor    ecx,ecx
c0027b58:	c1 e0 10             	shl    eax,0x10
c0027b5b:	89 cd                	mov    ebp,ecx
c0027b5d:	c1 e7 10             	shl    edi,0x10
c0027b60:	31 d2                	xor    edx,edx
c0027b62:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027b68:	09 c5                	or     ebp,eax
c0027b6a:	89 f0                	mov    eax,esi
c0027b6c:	89 e9                	mov    ecx,ebp
c0027b6e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0027b72:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027b76:	88 c2                	mov    dl,al
c0027b78:	88 d9                	mov    cl,bl
c0027b7a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027b7e:	0f b7 c2             	movzx  eax,dx
c0027b81:	09 f8                	or     eax,edi
c0027b83:	89 c2                	mov    edx,eax
c0027b85:	50                   	push   eax
c0027b86:	50                   	push   eax
c0027b87:	51                   	push   ecx
c0027b88:	52                   	push   edx
c0027b89:	e8 6d 35 ff ff       	call   c001b0fb <datetimeToSeconds(datetime_t)>
c0027b8e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027b92:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027b98:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027b9e:	83 c4 4c             	add    esp,0x4c
c0027ba1:	5b                   	pop    ebx
c0027ba2:	5e                   	pop    esi
c0027ba3:	5f                   	pop    edi
c0027ba4:	5d                   	pop    ebp
c0027ba5:	c3                   	ret    

c0027ba6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027ba6:	55                   	push   ebp
c0027ba7:	57                   	push   edi
c0027ba8:	56                   	push   esi
c0027ba9:	53                   	push   ebx
c0027baa:	83 ec 30             	sub    esp,0x30
c0027bad:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027bb1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027bb5:	6a 00                	push   0x0
c0027bb7:	6a 00                	push   0x0
c0027bb9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027bbf:	e8 6e e1 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027bc4:	83 c4 0c             	add    esp,0xc
c0027bc7:	6a 00                	push   0x0
c0027bc9:	6a 02                	push   0x2
c0027bcb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027bd1:	e8 5c e1 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027bd6:	31 d2                	xor    edx,edx
c0027bd8:	89 f9                	mov    ecx,edi
c0027bda:	89 f8                	mov    eax,edi
c0027bdc:	c1 e9 10             	shr    ecx,0x10
c0027bdf:	0f b6 c4             	movzx  eax,ah
c0027be2:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027be6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027bea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027bee:	b9 64 00 00 00       	mov    ecx,0x64
c0027bf3:	89 f0                	mov    eax,esi
c0027bf5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027bf9:	89 f0                	mov    eax,esi
c0027bfb:	0f b6 c4             	movzx  eax,ah
c0027bfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027c02:	89 f0                	mov    eax,esi
c0027c04:	c1 e8 10             	shr    eax,0x10
c0027c07:	f7 f1                	div    ecx
c0027c09:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027c0d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027c11:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027c15:	59                   	pop    ecx
c0027c16:	5b                   	pop    ebx
c0027c17:	89 fb                	mov    ebx,edi
c0027c19:	6a 0b                	push   0xb
c0027c1b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c21:	e8 f2 df fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027c26:	83 c4 10             	add    esp,0x10
c0027c29:	89 c5                	mov    ebp,eax
c0027c2b:	a8 04                	test   al,0x4
c0027c2d:	75 6e                	jne    c0027c9d <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027c2f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027c33:	31 d2                	xor    edx,edx
c0027c35:	0f b6 c1             	movzx  eax,cl
c0027c38:	b9 0a 00 00 00       	mov    ecx,0xa
c0027c3d:	f7 f1                	div    ecx
c0027c3f:	c1 e0 04             	shl    eax,0x4
c0027c42:	09 d0                	or     eax,edx
c0027c44:	31 d2                	xor    edx,edx
c0027c46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027c4a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027c4f:	f7 f1                	div    ecx
c0027c51:	c1 e0 04             	shl    eax,0x4
c0027c54:	09 d0                	or     eax,edx
c0027c56:	31 d2                	xor    edx,edx
c0027c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027c5c:	0f b6 c3             	movzx  eax,bl
c0027c5f:	f7 f1                	div    ecx
c0027c61:	c1 e0 04             	shl    eax,0x4
c0027c64:	09 d0                	or     eax,edx
c0027c66:	31 d2                	xor    edx,edx
c0027c68:	89 c3                	mov    ebx,eax
c0027c6a:	89 f0                	mov    eax,esi
c0027c6c:	0f b6 c0             	movzx  eax,al
c0027c6f:	f7 f1                	div    ecx
c0027c71:	c1 e0 04             	shl    eax,0x4
c0027c74:	09 d0                	or     eax,edx
c0027c76:	31 d2                	xor    edx,edx
c0027c78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027c7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027c81:	f7 f1                	div    ecx
c0027c83:	c1 e0 04             	shl    eax,0x4
c0027c86:	09 d0                	or     eax,edx
c0027c88:	31 d2                	xor    edx,edx
c0027c8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027c8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027c92:	f7 f1                	div    ecx
c0027c94:	c1 e0 04             	shl    eax,0x4
c0027c97:	09 d0                	or     eax,edx
c0027c99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027c9d:	83 e5 02             	and    ebp,0x2
c0027ca0:	75 1e                	jne    c0027cc0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027ca2:	0f b6 c3             	movzx  eax,bl
c0027ca5:	83 f8 0b             	cmp    eax,0xb
c0027ca8:	76 10                	jbe    c0027cba <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027caa:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027cad:	88 d3                	mov    bl,dl
c0027caf:	84 d2                	test   dl,dl
c0027cb1:	75 02                	jne    c0027cb5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027cb3:	b3 0c                	mov    bl,0xc
c0027cb5:	83 cb 80             	or     ebx,0xffffff80
c0027cb8:	eb 06                	jmp    c0027cc0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027cba:	85 c0                	test   eax,eax
c0027cbc:	75 02                	jne    c0027cc0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027cbe:	b3 0c                	mov    bl,0xc
c0027cc0:	0f b6 db             	movzx  ebx,bl
c0027cc3:	50                   	push   eax
c0027cc4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027cc9:	52                   	push   edx
c0027cca:	6a 00                	push   0x0
c0027ccc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027cd2:	e8 5b e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027cd7:	83 c4 0c             	add    esp,0xc
c0027cda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027cdf:	50                   	push   eax
c0027ce0:	6a 02                	push   0x2
c0027ce2:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ce8:	e8 45 e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ced:	83 c4 0c             	add    esp,0xc
c0027cf0:	53                   	push   ebx
c0027cf1:	6a 04                	push   0x4
c0027cf3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027cf9:	e8 34 e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027cfe:	83 c4 0c             	add    esp,0xc
c0027d01:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027d06:	52                   	push   edx
c0027d07:	6a 07                	push   0x7
c0027d09:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d0f:	e8 1e e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d14:	83 c4 0c             	add    esp,0xc
c0027d17:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027d1c:	50                   	push   eax
c0027d1d:	6a 08                	push   0x8
c0027d1f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d25:	e8 08 e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d2a:	83 c4 0c             	add    esp,0xc
c0027d2d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027d32:	55                   	push   ebp
c0027d33:	6a 09                	push   0x9
c0027d35:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d3b:	e8 f2 df fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d40:	5a                   	pop    edx
c0027d41:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027d45:	e8 7c fb ff ff       	call   c00278c6 <RTC::completeRTCRefresh()>
c0027d4a:	83 c4 3c             	add    esp,0x3c
c0027d4d:	b0 01                	mov    al,0x1
c0027d4f:	5b                   	pop    ebx
c0027d50:	5e                   	pop    esi
c0027d51:	5f                   	pop    edi
c0027d52:	5d                   	pop    ebp
c0027d53:	c3                   	ret    

c0027d54 <rtcIRQHandler(regs*, void*)>:
c0027d54:	53                   	push   ebx
c0027d55:	83 ec 10             	sub    esp,0x10
c0027d58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027d5c:	6a 0c                	push   0xc
c0027d5e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d64:	e8 af de fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027d69:	83 c4 10             	add    esp,0x10
c0027d6c:	a8 80                	test   al,0x80
c0027d6e:	74 24                	je     c0027d94 <rtcIRQHandler(regs*, void*)+0x40>
c0027d70:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027d77:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027d7e:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027d85:	75 0d                	jne    c0027d94 <rtcIRQHandler(regs*, void*)+0x40>
c0027d87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027d8b:	83 c4 08             	add    esp,0x8
c0027d8e:	5b                   	pop    ebx
c0027d8f:	e9 32 fb ff ff       	jmp    c00278c6 <RTC::completeRTCRefresh()>
c0027d94:	83 c4 08             	add    esp,0x8
c0027d97:	5b                   	pop    ebx
c0027d98:	c3                   	ret    
c0027d99:	90                   	nop

c0027d9a <RTC::RTC()>:
c0027d9a:	83 ec 1c             	sub    esp,0x1c
c0027d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027da1:	83 ec 08             	sub    esp,0x8
c0027da4:	68 ab 35 03 c0       	push   0xc00335ab
c0027da9:	50                   	push   eax
c0027daa:	e8 27 32 ff ff       	call   c001afd6 <Clock::Clock(char const*)>
c0027daf:	83 c4 10             	add    esp,0x10
c0027db2:	ba c8 35 03 c0       	mov    edx,0xc00335c8
c0027db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027dbb:	89 10                	mov    DWORD PTR [eax],edx
c0027dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027dc1:	83 ec 0c             	sub    esp,0xc
c0027dc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027dc8:	6a 01                	push   0x1
c0027dca:	68 54 7d 02 c0       	push   0xc0027d54
c0027dcf:	6a 08                	push   0x8
c0027dd1:	50                   	push   eax
c0027dd2:	e8 db 36 ff ff       	call   c001b4b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027dd7:	83 c4 20             	add    esp,0x20
c0027dda:	89 c2                	mov    edx,eax
c0027ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027de0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027de6:	fa                   	cli    
c0027de7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027dec:	83 c0 01             	add    eax,0x1
c0027def:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027df4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027df9:	83 ec 08             	sub    esp,0x8
c0027dfc:	6a 0b                	push   0xb
c0027dfe:	50                   	push   eax
c0027dff:	e8 14 de fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027e04:	83 c4 10             	add    esp,0x10
c0027e07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027e0b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027e10:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027e14:	83 ca 10             	or     edx,0x10
c0027e17:	0f b6 d2             	movzx  edx,dl
c0027e1a:	83 ec 04             	sub    esp,0x4
c0027e1d:	52                   	push   edx
c0027e1e:	6a 0b                	push   0xb
c0027e20:	50                   	push   eax
c0027e21:	e8 0c df fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027e26:	83 c4 10             	add    esp,0x10
c0027e29:	83 ec 0c             	sub    esp,0xc
c0027e2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027e30:	e8 91 fa ff ff       	call   c00278c6 <RTC::completeRTCRefresh()>
c0027e35:	83 c4 10             	add    esp,0x10
c0027e38:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027e3d:	83 e8 01             	sub    eax,0x1
c0027e40:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027e45:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027e4a:	85 c0                	test   eax,eax
c0027e4c:	75 01                	jne    c0027e4f <RTC::RTC()+0xb5>
c0027e4e:	fb                   	sti    
c0027e4f:	90                   	nop
c0027e50:	83 c4 1c             	add    esp,0x1c
c0027e53:	c3                   	ret    

c0027e54 <HalConsoleScroll(int, int)>:
c0027e54:	83 ec 10             	sub    esp,0x10
c0027e57:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027e5f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027e67:	90                   	nop
c0027e68:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027e6d:	0f 8f e1 00 00 00    	jg     c0027f54 <HalConsoleScroll(int, int)+0x100>
c0027e73:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027e7b:	90                   	nop
c0027e7c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027e84:	0f 8f be 00 00 00    	jg     c0027f48 <HalConsoleScroll(int, int)+0xf4>
c0027e8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027e8e:	89 d0                	mov    eax,edx
c0027e90:	c1 e0 02             	shl    eax,0x2
c0027e93:	01 d0                	add    eax,edx
c0027e95:	c1 e0 05             	shl    eax,0x5
c0027e98:	89 c2                	mov    edx,eax
c0027e9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e9e:	01 d0                	add    eax,edx
c0027ea0:	89 c2                	mov    edx,eax
c0027ea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ea6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027ea9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027ead:	89 d0                	mov    eax,edx
c0027eaf:	c1 e0 02             	shl    eax,0x2
c0027eb2:	01 d0                	add    eax,edx
c0027eb4:	c1 e0 05             	shl    eax,0x5
c0027eb7:	89 c2                	mov    edx,eax
c0027eb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027ebd:	01 d0                	add    eax,edx
c0027ebf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027ec5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ec9:	01 c2                	add    edx,eax
c0027ecb:	8a 01                	mov    al,BYTE PTR [ecx]
c0027ecd:	88 02                	mov    BYTE PTR [edx],al
c0027ecf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027ed4:	75 66                	jne    c0027f3c <HalConsoleScroll(int, int)+0xe8>
c0027ed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027eda:	83 e0 01             	and    eax,0x1
c0027edd:	74 39                	je     c0027f18 <HalConsoleScroll(int, int)+0xc4>
c0027edf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027ee3:	83 e0 0f             	and    eax,0xf
c0027ee6:	88 c2                	mov    dl,al
c0027ee8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027eec:	c1 e0 04             	shl    eax,0x4
c0027eef:	09 d0                	or     eax,edx
c0027ef1:	88 c1                	mov    cl,al
c0027ef3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027ef7:	89 d0                	mov    eax,edx
c0027ef9:	c1 e0 02             	shl    eax,0x2
c0027efc:	01 d0                	add    eax,edx
c0027efe:	c1 e0 05             	shl    eax,0x5
c0027f01:	89 c2                	mov    edx,eax
c0027f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f07:	01 d0                	add    eax,edx
c0027f09:	89 c2                	mov    edx,eax
c0027f0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f0f:	01 d0                	add    eax,edx
c0027f11:	88 ca                	mov    dl,cl
c0027f13:	88 10                	mov    BYTE PTR [eax],dl
c0027f15:	eb 25                	jmp    c0027f3c <HalConsoleScroll(int, int)+0xe8>
c0027f17:	90                   	nop
c0027f18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027f1c:	89 d0                	mov    eax,edx
c0027f1e:	c1 e0 02             	shl    eax,0x2
c0027f21:	01 d0                	add    eax,edx
c0027f23:	c1 e0 05             	shl    eax,0x5
c0027f26:	89 c2                	mov    edx,eax
c0027f28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f2c:	01 d0                	add    eax,edx
c0027f2e:	89 c2                	mov    edx,eax
c0027f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f34:	01 d0                	add    eax,edx
c0027f36:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027f39:	8d 76 00             	lea    esi,[esi+0x0]
c0027f3c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027f41:	e9 36 ff ff ff       	jmp    c0027e7c <HalConsoleScroll(int, int)+0x28>
c0027f46:	66 90                	xchg   ax,ax
c0027f48:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027f4d:	e9 16 ff ff ff       	jmp    c0027e68 <HalConsoleScroll(int, int)+0x14>
c0027f52:	66 90                	xchg   ax,ax
c0027f54:	90                   	nop
c0027f55:	83 c4 10             	add    esp,0x10
c0027f58:	c3                   	ret    
c0027f59:	8d 76 00             	lea    esi,[esi+0x0]

c0027f5c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027f5c:	83 ec 14             	sub    esp,0x14
c0027f5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027f63:	88 04 24             	mov    BYTE PTR [esp],al
c0027f66:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027f69:	0f b6 c0             	movzx  eax,al
c0027f6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027f70:	89 d1                	mov    ecx,edx
c0027f72:	83 e1 0f             	and    ecx,0xf
c0027f75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027f79:	c1 e2 04             	shl    edx,0x4
c0027f7c:	0f b6 d2             	movzx  edx,dl
c0027f7f:	09 ca                	or     edx,ecx
c0027f81:	c1 e2 08             	shl    edx,0x8
c0027f84:	09 d0                	or     eax,edx
c0027f86:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027f8b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027f93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027f97:	89 d0                	mov    eax,edx
c0027f99:	c1 e0 02             	shl    eax,0x2
c0027f9c:	01 d0                	add    eax,edx
c0027f9e:	c1 e0 04             	shl    eax,0x4
c0027fa1:	89 c2                	mov    edx,eax
c0027fa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027fa7:	01 d0                	add    eax,edx
c0027fa9:	01 c0                	add    eax,eax
c0027fab:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027faf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027fb3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0027fb8:	66 89 02             	mov    WORD PTR [edx],ax
c0027fbb:	90                   	nop
c0027fbc:	83 c4 14             	add    esp,0x14
c0027fbf:	c3                   	ret    

c0027fc0 <HalConsoleCursorUpdate(int, int)>:
c0027fc0:	83 ec 20             	sub    esp,0x20
c0027fc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027fc7:	89 c2                	mov    edx,eax
c0027fc9:	c1 e2 02             	shl    edx,0x2
c0027fcc:	01 d0                	add    eax,edx
c0027fce:	c1 e0 04             	shl    eax,0x4
c0027fd1:	89 c2                	mov    edx,eax
c0027fd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027fd7:	01 d0                	add    eax,edx
c0027fd9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027fde:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027fe5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027fea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027fee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027ff2:	ee                   	out    dx,al
c0027ff3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027ff8:	0f b6 c0             	movzx  eax,al
c0027ffb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0028002:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0028006:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c002800a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002800e:	ee                   	out    dx,al
c002800f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0028016:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c002801b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002801f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0028023:	ee                   	out    dx,al
c0028024:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0028029:	c1 e8 08             	shr    eax,0x8
c002802c:	0f b6 c0             	movzx  eax,al
c002802f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0028036:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c002803a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c002803e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028042:	ee                   	out    dx,al
c0028043:	90                   	nop
c0028044:	83 c4 20             	add    esp,0x20
c0028047:	c3                   	ret    

c0028048 <FAT::getName()>:
c0028048:	b8 fc 35 03 c0       	mov    eax,0xc00335fc
c002804d:	c3                   	ret    
c002804e:	66 90                	xchg   ax,ax

c0028050 <FAT::tell(void*, unsigned long long*)>:
c0028050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028055:	75 09                	jne    c0028060 <FAT::tell(void*, unsigned long long*)+0x10>
c0028057:	b8 04 00 00 00       	mov    eax,0x4
c002805c:	c3                   	ret    
c002805d:	8d 76 00             	lea    esi,[esi+0x0]
c0028060:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028065:	75 09                	jne    c0028070 <FAT::tell(void*, unsigned long long*)+0x20>
c0028067:	b8 04 00 00 00       	mov    eax,0x4
c002806c:	c3                   	ret    
c002806d:	8d 76 00             	lea    esi,[esi+0x0]
c0028070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028074:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028077:	ba 00 00 00 00       	mov    edx,0x0
c002807c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028080:	89 01                	mov    DWORD PTR [ecx],eax
c0028082:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028085:	b8 00 00 00 00       	mov    eax,0x0
c002808a:	c3                   	ret    
c002808b:	90                   	nop

c002808c <FAT::stat(void*, unsigned long long*)>:
c002808c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028091:	75 09                	jne    c002809c <FAT::stat(void*, unsigned long long*)+0x10>
c0028093:	b8 04 00 00 00       	mov    eax,0x4
c0028098:	c3                   	ret    
c0028099:	8d 76 00             	lea    esi,[esi+0x0]
c002809c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00280a1:	75 09                	jne    c00280ac <FAT::stat(void*, unsigned long long*)+0x20>
c00280a3:	b8 04 00 00 00       	mov    eax,0x4
c00280a8:	c3                   	ret    
c00280a9:	8d 76 00             	lea    esi,[esi+0x0]
c00280ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00280b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00280b3:	ba 00 00 00 00       	mov    edx,0x0
c00280b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00280bc:	89 01                	mov    DWORD PTR [ecx],eax
c00280be:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00280c1:	b8 00 00 00 00       	mov    eax,0x0
c00280c6:	c3                   	ret    
c00280c7:	90                   	nop

c00280c8 <FAT::~FAT()>:
c00280c8:	83 ec 0c             	sub    esp,0xc
c00280cb:	ba 48 36 03 c0       	mov    edx,0xc0033648
c00280d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d4:	89 10                	mov    DWORD PTR [eax],edx
c00280d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280da:	83 ec 0c             	sub    esp,0xc
c00280dd:	50                   	push   eax
c00280de:	e8 2b 22 ff ff       	call   c001a30e <Filesystem::~Filesystem()>
c00280e3:	83 c4 10             	add    esp,0x10
c00280e6:	90                   	nop
c00280e7:	83 c4 0c             	add    esp,0xc
c00280ea:	c3                   	ret    
c00280eb:	90                   	nop

c00280ec <FAT::~FAT()>:
c00280ec:	83 ec 0c             	sub    esp,0xc
c00280ef:	83 ec 0c             	sub    esp,0xc
c00280f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280f6:	e8 cd ff ff ff       	call   c00280c8 <FAT::~FAT()>
c00280fb:	83 c4 10             	add    esp,0x10
c00280fe:	83 ec 08             	sub    esp,0x8
c0028101:	6a 08                	push   0x8
c0028103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028107:	e8 4c 12 ff ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002810c:	83 c4 10             	add    esp,0x10
c002810f:	83 c4 0c             	add    esp,0xc
c0028112:	c3                   	ret    
c0028113:	90                   	nop

c0028114 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0028114:	83 ec 1c             	sub    esp,0x1c
c0028117:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002811e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0028123:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028127:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002812e:	83 f8 ff             	cmp    eax,0xffffffff
c0028131:	75 35                	jne    c0028168 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0028133:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0028137:	88 c2                	mov    dl,al
c0028139:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002813e:	01 d0                	add    eax,edx
c0028140:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0028144:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002814a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002814e:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028155:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002815a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002815e:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028165:	eb 19                	jmp    c0028180 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0028167:	90                   	nop
c0028168:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002816c:	88 c2                	mov    dl,al
c002816e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028172:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028179:	01 d0                	add    eax,edx
c002817b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002817f:	90                   	nop
c0028180:	83 ec 04             	sub    esp,0x4
c0028183:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028187:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002818b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002818f:	50                   	push   eax
c0028190:	e8 86 d1 fd ff       	call   c000531b <f_getlabel>
c0028195:	83 c4 10             	add    esp,0x10
c0028198:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002819c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00281a1:	75 09                	jne    c00281ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00281a3:	b8 00 00 00 00       	mov    eax,0x0
c00281a8:	eb 0a                	jmp    c00281b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00281aa:	66 90                	xchg   ax,ax
c00281ac:	b8 01 00 00 00       	mov    eax,0x1
c00281b1:	8d 76 00             	lea    esi,[esi+0x0]
c00281b4:	83 c4 1c             	add    esp,0x1c
c00281b7:	c3                   	ret    

c00281b8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00281b8:	57                   	push   edi
c00281b9:	83 ec 58             	sub    esp,0x58
c00281bc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00281c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00281c8:	b8 00 00 00 00       	mov    eax,0x0
c00281cd:	b9 0f 00 00 00       	mov    ecx,0xf
c00281d2:	fc                   	cld    
c00281d3:	89 d7                	mov    edi,edx
c00281d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00281d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00281db:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281e2:	83 f8 ff             	cmp    eax,0xffffffff
c00281e5:	75 35                	jne    c002821c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00281e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00281eb:	88 c2                	mov    dl,al
c00281ed:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281f2:	01 d0                	add    eax,edx
c00281f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00281f8:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028202:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028209:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002820e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0028212:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028219:	eb 19                	jmp    c0028234 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c002821b:	90                   	nop
c002821c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028220:	88 c2                	mov    dl,al
c0028222:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028226:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002822d:	01 d0                	add    eax,edx
c002822f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028233:	90                   	nop
c0028234:	83 ec 08             	sub    esp,0x8
c0028237:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002823b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002823f:	50                   	push   eax
c0028240:	e8 fb 85 fd ff       	call   c0000840 <strcat>
c0028245:	83 c4 10             	add    esp,0x10
c0028248:	83 ec 0c             	sub    esp,0xc
c002824b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002824f:	50                   	push   eax
c0028250:	e8 17 d2 fd ff       	call   c000546c <f_setlabel>
c0028255:	83 c4 10             	add    esp,0x10
c0028258:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002825c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028261:	75 09                	jne    c002826c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0028263:	b8 00 00 00 00       	mov    eax,0x0
c0028268:	eb 0a                	jmp    c0028274 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c002826a:	66 90                	xchg   ax,ax
c002826c:	b8 01 00 00 00       	mov    eax,0x1
c0028271:	8d 76 00             	lea    esi,[esi+0x0]
c0028274:	83 c4 58             	add    esp,0x58
c0028277:	5f                   	pop    edi
c0028278:	c3                   	ret    
c0028279:	90                   	nop
c002827a:	66 90                	xchg   ax,ax

c002827c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002827c:	83 ec 2c             	sub    esp,0x2c
c002827f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028287:	83 ec 08             	sub    esp,0x8
c002828a:	68 20 36 03 c0       	push   0xc0033620
c002828f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028293:	e8 b8 84 fd ff       	call   c0000750 <strcmp>
c0028298:	83 c4 10             	add    esp,0x10
c002829b:	85 c0                	test   eax,eax
c002829d:	0f 94 c0             	sete   al
c00282a0:	0f b6 c0             	movzx  eax,al
c00282a3:	85 c0                	test   eax,eax
c00282a5:	74 0d                	je     c00282b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00282a7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00282af:	e9 c0 00 00 00       	jmp    c0028374 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00282b4:	83 ec 08             	sub    esp,0x8
c00282b7:	68 12 36 03 c0       	push   0xc0033612
c00282bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00282c0:	e8 8b 84 fd ff       	call   c0000750 <strcmp>
c00282c5:	83 c4 10             	add    esp,0x10
c00282c8:	85 c0                	test   eax,eax
c00282ca:	0f 94 c0             	sete   al
c00282cd:	0f b6 c0             	movzx  eax,al
c00282d0:	85 c0                	test   eax,eax
c00282d2:	74 10                	je     c00282e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00282d4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00282dc:	e9 93 00 00 00       	jmp    c0028374 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00282e1:	8d 76 00             	lea    esi,[esi+0x0]
c00282e4:	83 ec 08             	sub    esp,0x8
c00282e7:	68 18 36 03 c0       	push   0xc0033618
c00282ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00282f0:	e8 5b 84 fd ff       	call   c0000750 <strcmp>
c00282f5:	83 c4 10             	add    esp,0x10
c00282f8:	85 c0                	test   eax,eax
c00282fa:	0f 94 c0             	sete   al
c00282fd:	0f b6 c0             	movzx  eax,al
c0028300:	85 c0                	test   eax,eax
c0028302:	74 0c                	je     c0028310 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0028304:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002830c:	eb 66                	jmp    c0028374 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002830e:	66 90                	xchg   ax,ax
c0028310:	83 ec 08             	sub    esp,0x8
c0028313:	68 58 f7 02 c0       	push   0xc002f758
c0028318:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002831c:	e8 2f 84 fd ff       	call   c0000750 <strcmp>
c0028321:	83 c4 10             	add    esp,0x10
c0028324:	85 c0                	test   eax,eax
c0028326:	0f 94 c0             	sete   al
c0028329:	0f b6 c0             	movzx  eax,al
c002832c:	85 c0                	test   eax,eax
c002832e:	74 0c                	je     c002833c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0028330:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028338:	eb 3a                	jmp    c0028374 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002833a:	66 90                	xchg   ax,ax
c002833c:	83 ec 08             	sub    esp,0x8
c002833f:	68 1e 36 03 c0       	push   0xc003361e
c0028344:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028348:	e8 03 84 fd ff       	call   c0000750 <strcmp>
c002834d:	83 c4 10             	add    esp,0x10
c0028350:	85 c0                	test   eax,eax
c0028352:	0f 94 c0             	sete   al
c0028355:	0f b6 c0             	movzx  eax,al
c0028358:	85 c0                	test   eax,eax
c002835a:	74 0c                	je     c0028368 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c002835c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028364:	eb 0e                	jmp    c0028374 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028366:	66 90                	xchg   ax,ax
c0028368:	b8 08 00 00 00       	mov    eax,0x8
c002836d:	e9 ea 00 00 00       	jmp    c002845c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028372:	66 90                	xchg   ax,ax
c0028374:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002837b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028380:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028384:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002838b:	83 f8 ff             	cmp    eax,0xffffffff
c002838e:	75 34                	jne    c00283c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028390:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028394:	88 c2                	mov    dl,al
c0028396:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002839b:	01 d0                	add    eax,edx
c002839d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00283a1:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00283a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00283ab:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00283b2:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00283b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00283bb:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00283c2:	eb 18                	jmp    c00283dc <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00283c4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00283c8:	88 c2                	mov    dl,al
c00283ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00283ce:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00283d5:	01 d0                	add    eax,edx
c00283d7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00283db:	90                   	nop
c00283dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00283e0:	88 04 24             	mov    BYTE PTR [esp],al
c00283e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00283e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00283eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00283f3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00283f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0028400:	83 ec 0c             	sub    esp,0xc
c0028403:	68 00 20 00 00       	push   0x2000
c0028408:	e8 e9 e1 fe ff       	call   c00165f6 <malloc>
c002840d:	83 c4 10             	add    esp,0x10
c0028410:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028414:	68 00 20 00 00       	push   0x2000
c0028419:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002841d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028421:	50                   	push   eax
c0028422:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0028426:	50                   	push   eax
c0028427:	e8 3d d3 fd ff       	call   c0005769 <f_mkfs>
c002842c:	83 c4 10             	add    esp,0x10
c002842f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028433:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028438:	75 0a                	jne    c0028444 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c002843a:	b8 00 00 00 00       	mov    eax,0x0
c002843f:	eb 1b                	jmp    c002845c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028441:	8d 76 00             	lea    esi,[esi+0x0]
c0028444:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028449:	75 09                	jne    c0028454 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c002844b:	b8 09 00 00 00       	mov    eax,0x9
c0028450:	eb 0a                	jmp    c002845c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028452:	66 90                	xchg   ax,ax
c0028454:	b8 01 00 00 00       	mov    eax,0x1
c0028459:	8d 76 00             	lea    esi,[esi+0x0]
c002845c:	83 c4 2c             	add    esp,0x2c
c002845f:	c3                   	ret    

c0028460 <FAT::tryMount(LogicalDisk*, int)>:
c0028460:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0028466:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002846b:	83 f8 14             	cmp    eax,0x14
c002846e:	75 18                	jne    c0028488 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028470:	83 ec 0c             	sub    esp,0xc
c0028473:	68 24 36 03 c0       	push   0xc0033624
c0028478:	e8 21 80 ff ff       	call   c002049e <KePanic(char const*)>
c002847d:	83 c4 10             	add    esp,0x10
c0028480:	b0 00                	mov    al,0x0
c0028482:	e9 ed 01 00 00       	jmp    c0028674 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028487:	90                   	nop
c0028488:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002848f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028495:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002849b:	3d 00 02 00 00       	cmp    eax,0x200
c00284a0:	74 0a                	je     c00284ac <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00284a2:	b0 00                	mov    al,0x0
c00284a4:	e9 cb 01 00 00       	jmp    c0028674 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00284a9:	8d 76 00             	lea    esi,[esi+0x0]
c00284ac:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00284b4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00284bb:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00284c2:	83 f8 ff             	cmp    eax,0xffffffff
c00284c5:	74 09                	je     c00284d0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00284c7:	b0 01                	mov    al,0x1
c00284c9:	e9 a6 01 00 00       	jmp    c0028674 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00284ce:	66 90                	xchg   ax,ax
c00284d0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00284da:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00284e2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00284e9:	88 c2                	mov    dl,al
c00284eb:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00284f0:	01 d0                	add    eax,edx
c00284f2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00284f9:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00284ff:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028506:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002850d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028512:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0028519:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028520:	83 ec 0c             	sub    esp,0xc
c0028523:	68 34 02 00 00       	push   0x234
c0028528:	e8 c9 e0 fe ff       	call   c00165f6 <malloc>
c002852d:	83 c4 10             	add    esp,0x10
c0028530:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0028537:	83 ec 04             	sub    esp,0x4
c002853a:	6a 00                	push   0x0
c002853c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028543:	50                   	push   eax
c0028544:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002854b:	e8 f4 b9 fd ff       	call   c0003f44 <f_mount>
c0028550:	83 c4 10             	add    esp,0x10
c0028553:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002855a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0028562:	74 1c                	je     c0028580 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028564:	83 ec 0c             	sub    esp,0xc
c0028567:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002856e:	e8 a3 e0 fe ff       	call   c0016616 <rfree>
c0028573:	83 c4 10             	add    esp,0x10
c0028576:	b0 00                	mov    al,0x0
c0028578:	e9 f7 00 00 00       	jmp    c0028674 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002857d:	8d 76 00             	lea    esi,[esi+0x0]
c0028580:	83 ec 04             	sub    esp,0x4
c0028583:	68 00 01 00 00       	push   0x100
c0028588:	6a 00                	push   0x0
c002858a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028591:	50                   	push   eax
c0028592:	e8 59 7f fd ff       	call   c00004f0 <memset>
c0028597:	83 c4 10             	add    esp,0x10
c002859a:	83 ec 08             	sub    esp,0x8
c002859d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00285a4:	50                   	push   eax
c00285a5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00285ac:	50                   	push   eax
c00285ad:	e8 8e 82 fd ff       	call   c0000840 <strcat>
c00285b2:	83 c4 10             	add    esp,0x10
c00285b5:	83 ec 08             	sub    esp,0x8
c00285b8:	68 32 36 03 c0       	push   0xc0033632
c00285bd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00285c4:	50                   	push   eax
c00285c5:	e8 76 82 fd ff       	call   c0000840 <strcat>
c00285ca:	83 c4 10             	add    esp,0x10
c00285cd:	83 ec 04             	sub    esp,0x4
c00285d0:	6a 01                	push   0x1
c00285d2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00285d9:	50                   	push   eax
c00285da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00285de:	50                   	push   eax
c00285df:	e8 c2 b9 fd ff       	call   c0003fa6 <f_open>
c00285e4:	83 c4 10             	add    esp,0x10
c00285e7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00285ee:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00285f5:	85 c0                	test   eax,eax
c00285f7:	74 0b                	je     c0028604 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00285f9:	78 31                	js     c002862c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00285fb:	83 e8 04             	sub    eax,0x4
c00285fe:	83 f8 01             	cmp    eax,0x1
c0028601:	77 29                	ja     c002862c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028603:	90                   	nop
c0028604:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c002860c:	83 ec 0c             	sub    esp,0xc
c002860f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028613:	50                   	push   eax
c0028614:	e8 5c c1 fd ff       	call   c0004775 <f_close>
c0028619:	83 c4 10             	add    esp,0x10
c002861c:	90                   	nop
c002861d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0028625:	85 c0                	test   eax,eax
c0028627:	74 43                	je     c002866c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028629:	eb 31                	jmp    c002865c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c002862b:	90                   	nop
c002862c:	83 ec 0c             	sub    esp,0xc
c002862f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028636:	e8 db df fe ff       	call   c0016616 <rfree>
c002863b:	83 c4 10             	add    esp,0x10
c002863e:	83 ec 04             	sub    esp,0x4
c0028641:	6a 00                	push   0x0
c0028643:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002864a:	50                   	push   eax
c002864b:	6a 00                	push   0x0
c002864d:	e8 f2 b8 fd ff       	call   c0003f44 <f_mount>
c0028652:	83 c4 10             	add    esp,0x10
c0028655:	b0 00                	mov    al,0x0
c0028657:	eb 1b                	jmp    c0028674 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028659:	8d 76 00             	lea    esi,[esi+0x0]
c002865c:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028661:	83 c0 01             	add    eax,0x1
c0028664:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028669:	8d 76 00             	lea    esi,[esi+0x0]
c002866c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028673:	90                   	nop
c0028674:	81 c4 4c 03 00 00    	add    esp,0x34c
c002867a:	c3                   	ret    
c002867b:	90                   	nop

c002867c <FAT::allocateSwapfile(char const*, int)>:
c002867c:	55                   	push   ebp
c002867d:	57                   	push   edi
c002867e:	56                   	push   esi
c002867f:	53                   	push   ebx
c0028680:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0028686:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028691:	83 ec 0c             	sub    esp,0xc
c0028694:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c002869b:	e8 56 df fe ff       	call   c00165f6 <malloc>
c00286a0:	83 c4 10             	add    esp,0x10
c00286a3:	89 c7                	mov    edi,eax
c00286a5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00286aa:	83 ec 04             	sub    esp,0x4
c00286ad:	50                   	push   eax
c00286ae:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00286b5:	57                   	push   edi
c00286b6:	e8 d1 1f ff ff       	call   c001a68c <File::File(char const*, Process*)>
c00286bb:	83 c4 10             	add    esp,0x10
c00286be:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00286c5:	83 ec 04             	sub    esp,0x4
c00286c8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00286cc:	50                   	push   eax
c00286cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00286d1:	50                   	push   eax
c00286d2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00286d9:	e8 ce 22 ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c00286de:	83 c4 10             	add    esp,0x10
c00286e1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00286e8:	c1 e0 14             	shl    eax,0x14
c00286eb:	89 c7                	mov    edi,eax
c00286ed:	89 c5                	mov    ebp,eax
c00286ef:	c1 fd 1f             	sar    ebp,0x1f
c00286f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286fa:	89 f9                	mov    ecx,edi
c00286fc:	31 c1                	xor    ecx,eax
c00286fe:	89 cb                	mov    ebx,ecx
c0028700:	89 e9                	mov    ecx,ebp
c0028702:	31 d1                	xor    ecx,edx
c0028704:	89 ce                	mov    esi,ecx
c0028706:	89 f0                	mov    eax,esi
c0028708:	09 d8                	or     eax,ebx
c002870a:	0f 84 9c 00 00 00    	je     c00287ac <FAT::allocateSwapfile(char const*, int)+0x130>
c0028710:	83 ec 0c             	sub    esp,0xc
c0028713:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002871a:	e8 59 21 ff ff       	call   c001a878 <File::unlink()>
c002871f:	83 c4 10             	add    esp,0x10
c0028722:	83 ec 08             	sub    esp,0x8
c0028725:	6a 12                	push   0x12
c0028727:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002872e:	e8 77 1f ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c0028733:	83 c4 10             	add    esp,0x10
c0028736:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002873d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028743:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c002874a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028751:	c1 e0 14             	shl    eax,0x14
c0028754:	83 ec 04             	sub    esp,0x4
c0028757:	6a 01                	push   0x1
c0028759:	50                   	push   eax
c002875a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028761:	e8 96 ce fd ff       	call   c00055fc <f_expand>
c0028766:	83 c4 10             	add    esp,0x10
c0028769:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028770:	8b 00                	mov    eax,DWORD PTR [eax]
c0028772:	83 c0 10             	add    eax,0x10
c0028775:	8b 00                	mov    eax,DWORD PTR [eax]
c0028777:	83 ec 0c             	sub    esp,0xc
c002877a:	8d 54 24 24          	lea    edx,[esp+0x24]
c002877e:	52                   	push   edx
c002877f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028783:	52                   	push   edx
c0028784:	6a 00                	push   0x0
c0028786:	68 00 04 00 00       	push   0x400
c002878b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028792:	ff d0                	call   eax
c0028794:	83 c4 20             	add    esp,0x20
c0028797:	83 ec 0c             	sub    esp,0xc
c002879a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00287a1:	e8 62 1f ff ff       	call   c001a708 <File::close()>
c00287a6:	83 c4 10             	add    esp,0x10
c00287a9:	8d 76 00             	lea    esi,[esi+0x0]
c00287ac:	83 ec 08             	sub    esp,0x8
c00287af:	6a 01                	push   0x1
c00287b1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00287b8:	e8 ed 1e ff ff       	call   c001a6aa <File::open(FileOpenMode)>
c00287bd:	83 c4 10             	add    esp,0x10
c00287c0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00287c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c9:	83 c0 0c             	add    eax,0xc
c00287cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ce:	83 ec 0c             	sub    esp,0xc
c00287d1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00287d5:	52                   	push   edx
c00287d6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00287da:	52                   	push   edx
c00287db:	6a 00                	push   0x0
c00287dd:	6a 04                	push   0x4
c00287df:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00287e6:	ff d0                	call   eax
c00287e8:	83 c4 20             	add    esp,0x20
c00287eb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00287f2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00287f8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00287ff:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028806:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028809:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002881a:	e8 e9 1e ff ff       	call   c001a708 <File::close()>
c002881f:	83 c4 10             	add    esp,0x10
c0028822:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028829:	ba 00 00 00 00       	mov    edx,0x0
c002882e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028834:	5b                   	pop    ebx
c0028835:	5e                   	pop    esi
c0028836:	5f                   	pop    edi
c0028837:	5d                   	pop    ebp
c0028838:	c3                   	ret    
c0028839:	90                   	nop
c002883a:	66 90                	xchg   ax,ax

c002883c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002883c:	57                   	push   edi
c002883d:	56                   	push   esi
c002883e:	53                   	push   ebx
c002883f:	81 ec 50 02 00 00    	sub    esp,0x250
c0028845:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002884d:	74 0d                	je     c002885c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c002884f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028857:	75 0f                	jne    c0028868 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028859:	8d 76 00             	lea    esi,[esi+0x0]
c002885c:	b8 04 00 00 00       	mov    eax,0x4
c0028861:	e9 3a 01 00 00       	jmp    c00289a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028866:	66 90                	xchg   ax,ax
c0028868:	83 ec 08             	sub    esp,0x8
c002886b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028872:	50                   	push   eax
c0028873:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002887a:	e8 c3 c1 fd ff       	call   c0004a42 <f_readdir>
c002887f:	83 c4 10             	add    esp,0x10
c0028882:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028889:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028890:	83 ec 0c             	sub    esp,0xc
c0028893:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002889a:	83 c0 16             	add    eax,0x16
c002889d:	50                   	push   eax
c002889e:	e8 cd 7c fd ff       	call   c0000570 <strlen>
c00288a3:	83 c4 10             	add    esp,0x10
c00288a6:	ba 00 00 00 00       	mov    edx,0x0
c00288ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00288af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00288b3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00288ba:	0f b6 c0             	movzx  eax,al
c00288bd:	83 e0 10             	and    eax,0x10
c00288c0:	74 0a                	je     c00288cc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00288c2:	b8 02 00 00 00       	mov    eax,0x2
c00288c7:	eb 0b                	jmp    c00288d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00288c9:	8d 76 00             	lea    esi,[esi+0x0]
c00288cc:	b8 01 00 00 00       	mov    eax,0x1
c00288d1:	8d 76 00             	lea    esi,[esi+0x0]
c00288d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00288d8:	83 ec 08             	sub    esp,0x8
c00288db:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00288e2:	83 c0 16             	add    eax,0x16
c00288e5:	50                   	push   eax
c00288e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00288ea:	83 c0 10             	add    eax,0x10
c00288ed:	50                   	push   eax
c00288ee:	e8 4d 7d fd ff       	call   c0000640 <strcpy>
c00288f3:	83 c4 10             	add    esp,0x10
c00288f6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00288fd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028904:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028908:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002890f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028916:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002891d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028924:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002892b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028932:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028939:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028940:	89 c6                	mov    esi,eax
c0028942:	89 d7                	mov    edi,edx
c0028944:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028946:	89 c8                	mov    eax,ecx
c0028948:	89 fa                	mov    edx,edi
c002894a:	89 f3                	mov    ebx,esi
c002894c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028953:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002895a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028961:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028968:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002896e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028975:	0f be c0             	movsx  eax,al
c0028978:	85 c0                	test   eax,eax
c002897a:	75 08                	jne    c0028984 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c002897c:	b8 07 00 00 00       	mov    eax,0x7
c0028981:	eb 1d                	jmp    c00289a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028983:	90                   	nop
c0028984:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002898b:	85 c0                	test   eax,eax
c002898d:	75 09                	jne    c0028998 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c002898f:	b8 00 00 00 00       	mov    eax,0x0
c0028994:	eb 0a                	jmp    c00289a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028996:	66 90                	xchg   ax,ax
c0028998:	b8 01 00 00 00       	mov    eax,0x1
c002899d:	8d 76 00             	lea    esi,[esi+0x0]
c00289a0:	81 c4 50 02 00 00    	add    esp,0x250
c00289a6:	5b                   	pop    ebx
c00289a7:	5e                   	pop    esi
c00289a8:	5f                   	pop    edi
c00289a9:	c3                   	ret    
c00289aa:	66 90                	xchg   ax,ax

c00289ac <FAT::read(void*, unsigned long, void*, int*)>:
c00289ac:	83 ec 1c             	sub    esp,0x1c
c00289af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00289b4:	74 0a                	je     c00289c0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00289b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00289bb:	75 0b                	jne    c00289c8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00289bd:	8d 76 00             	lea    esi,[esi+0x0]
c00289c0:	b8 04 00 00 00       	mov    eax,0x4
c00289c5:	eb 41                	jmp    c0028a08 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00289c7:	90                   	nop
c00289c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00289cc:	50                   	push   eax
c00289cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00289d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00289d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00289d9:	e8 8b b8 fd ff       	call   c0004269 <f_read>
c00289de:	83 c4 10             	add    esp,0x10
c00289e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00289e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289e9:	89 c2                	mov    edx,eax
c00289eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00289ef:	89 10                	mov    DWORD PTR [eax],edx
c00289f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00289f5:	85 c0                	test   eax,eax
c00289f7:	75 07                	jne    c0028a00 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00289f9:	b8 00 00 00 00       	mov    eax,0x0
c00289fe:	eb 08                	jmp    c0028a08 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028a00:	b8 01 00 00 00       	mov    eax,0x1
c0028a05:	8d 76 00             	lea    esi,[esi+0x0]
c0028a08:	83 c4 1c             	add    esp,0x1c
c0028a0b:	c3                   	ret    

c0028a0c <FAT::write(void*, unsigned long, void*, int*)>:
c0028a0c:	83 ec 1c             	sub    esp,0x1c
c0028a0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028a14:	74 0a                	je     c0028a20 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028a16:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028a1b:	75 0b                	jne    c0028a28 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a20:	b8 04 00 00 00       	mov    eax,0x4
c0028a25:	eb 41                	jmp    c0028a68 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028a27:	90                   	nop
c0028a28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028a2c:	50                   	push   eax
c0028a2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028a31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028a35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a39:	e8 2a ba fd ff       	call   c0004468 <f_write>
c0028a3e:	83 c4 10             	add    esp,0x10
c0028a41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a49:	89 c2                	mov    edx,eax
c0028a4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028a4f:	89 10                	mov    DWORD PTR [eax],edx
c0028a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028a55:	85 c0                	test   eax,eax
c0028a57:	75 07                	jne    c0028a60 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028a59:	b8 00 00 00 00       	mov    eax,0x0
c0028a5e:	eb 08                	jmp    c0028a68 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028a60:	b8 01 00 00 00       	mov    eax,0x1
c0028a65:	8d 76 00             	lea    esi,[esi+0x0]
c0028a68:	83 c4 1c             	add    esp,0x1c
c0028a6b:	c3                   	ret    

c0028a6c <FAT::close(void*)>:
c0028a6c:	83 ec 1c             	sub    esp,0x1c
c0028a6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028a74:	75 0a                	jne    c0028a80 <FAT::close(void*)+0x14>
c0028a76:	b8 04 00 00 00       	mov    eax,0x4
c0028a7b:	eb 3f                	jmp    c0028abc <FAT::close(void*)+0x50>
c0028a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a80:	83 ec 0c             	sub    esp,0xc
c0028a83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a87:	e8 e9 bc fd ff       	call   c0004775 <f_close>
c0028a8c:	83 c4 10             	add    esp,0x10
c0028a8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a93:	83 ec 0c             	sub    esp,0xc
c0028a96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a9a:	e8 67 db fe ff       	call   c0016606 <free>
c0028a9f:	83 c4 10             	add    esp,0x10
c0028aa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028aa6:	85 c0                	test   eax,eax
c0028aa8:	75 0a                	jne    c0028ab4 <FAT::close(void*)+0x48>
c0028aaa:	b8 00 00 00 00       	mov    eax,0x0
c0028aaf:	eb 0b                	jmp    c0028abc <FAT::close(void*)+0x50>
c0028ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ab4:	b8 01 00 00 00       	mov    eax,0x1
c0028ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0028abc:	83 c4 1c             	add    esp,0x1c
c0028abf:	c3                   	ret    

c0028ac0 <FAT::closeDir(void*)>:
c0028ac0:	83 ec 1c             	sub    esp,0x1c
c0028ac3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028ac8:	75 0a                	jne    c0028ad4 <FAT::closeDir(void*)+0x14>
c0028aca:	b8 04 00 00 00       	mov    eax,0x4
c0028acf:	eb 3f                	jmp    c0028b10 <FAT::closeDir(void*)+0x50>
c0028ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ad4:	83 ec 0c             	sub    esp,0xc
c0028ad7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028adb:	e8 40 bf fd ff       	call   c0004a20 <f_closedir>
c0028ae0:	83 c4 10             	add    esp,0x10
c0028ae3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028ae7:	83 ec 0c             	sub    esp,0xc
c0028aea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028aee:	e8 13 db fe ff       	call   c0016606 <free>
c0028af3:	83 c4 10             	add    esp,0x10
c0028af6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028afa:	85 c0                	test   eax,eax
c0028afc:	75 0a                	jne    c0028b08 <FAT::closeDir(void*)+0x48>
c0028afe:	b8 00 00 00 00       	mov    eax,0x0
c0028b03:	eb 0b                	jmp    c0028b10 <FAT::closeDir(void*)+0x50>
c0028b05:	8d 76 00             	lea    esi,[esi+0x0]
c0028b08:	b8 01 00 00 00       	mov    eax,0x1
c0028b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b10:	83 c4 1c             	add    esp,0x1c
c0028b13:	c3                   	ret    

c0028b14 <FAT::truncate(void*, unsigned long long)>:
c0028b14:	83 ec 2c             	sub    esp,0x2c
c0028b17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028b1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028b1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028b27:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028b2c:	75 0a                	jne    c0028b38 <FAT::truncate(void*, unsigned long long)+0x24>
c0028b2e:	b8 04 00 00 00       	mov    eax,0x4
c0028b33:	eb 47                	jmp    c0028b7c <FAT::truncate(void*, unsigned long long)+0x68>
c0028b35:	8d 76 00             	lea    esi,[esi+0x0]
c0028b38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028b3c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028b43:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028b4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b4f:	83 ec 08             	sub    esp,0x8
c0028b52:	50                   	push   eax
c0028b53:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028b57:	e8 48 bc fd ff       	call   c00047a4 <f_lseek>
c0028b5c:	83 c4 10             	add    esp,0x10
c0028b5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028b63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b67:	85 c0                	test   eax,eax
c0028b69:	75 09                	jne    c0028b74 <FAT::truncate(void*, unsigned long long)+0x60>
c0028b6b:	b8 00 00 00 00       	mov    eax,0x0
c0028b70:	eb 0a                	jmp    c0028b7c <FAT::truncate(void*, unsigned long long)+0x68>
c0028b72:	66 90                	xchg   ax,ax
c0028b74:	b8 01 00 00 00       	mov    eax,0x1
c0028b79:	8d 76 00             	lea    esi,[esi+0x0]
c0028b7c:	83 c4 2c             	add    esp,0x2c
c0028b7f:	c3                   	ret    

c0028b80 <FAT::seek(void*, unsigned long long)>:
c0028b80:	83 ec 2c             	sub    esp,0x2c
c0028b83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028b87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028b8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028b8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028b93:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028b98:	75 0a                	jne    c0028ba4 <FAT::seek(void*, unsigned long long)+0x24>
c0028b9a:	b8 04 00 00 00       	mov    eax,0x4
c0028b9f:	eb 33                	jmp    c0028bd4 <FAT::seek(void*, unsigned long long)+0x54>
c0028ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ba8:	83 ec 08             	sub    esp,0x8
c0028bab:	50                   	push   eax
c0028bac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028bb0:	e8 ef bb fd ff       	call   c00047a4 <f_lseek>
c0028bb5:	83 c4 10             	add    esp,0x10
c0028bb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028bc0:	85 c0                	test   eax,eax
c0028bc2:	75 08                	jne    c0028bcc <FAT::seek(void*, unsigned long long)+0x4c>
c0028bc4:	b8 00 00 00 00       	mov    eax,0x0
c0028bc9:	eb 09                	jmp    c0028bd4 <FAT::seek(void*, unsigned long long)+0x54>
c0028bcb:	90                   	nop
c0028bcc:	b8 01 00 00 00       	mov    eax,0x1
c0028bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0028bd4:	83 c4 2c             	add    esp,0x2c
c0028bd7:	c3                   	ret    

c0028bd8 <fatWrapperReadDisk>:
c0028bd8:	53                   	push   ebx
c0028bd9:	83 ec 18             	sub    esp,0x18
c0028bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028be0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028be4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028be9:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028bf0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028bf4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028bf8:	ba 00 00 00 00       	mov    edx,0x0
c0028bfd:	83 ec 0c             	sub    esp,0xc
c0028c00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c04:	53                   	push   ebx
c0028c05:	52                   	push   edx
c0028c06:	50                   	push   eax
c0028c07:	51                   	push   ecx
c0028c08:	e8 eb 3c ff ff       	call   c001c8f8 <LogicalDisk::read(unsigned long long, int, void*)>
c0028c0d:	83 c4 20             	add    esp,0x20
c0028c10:	83 c4 18             	add    esp,0x18
c0028c13:	5b                   	pop    ebx
c0028c14:	c3                   	ret    
c0028c15:	8d 76 00             	lea    esi,[esi+0x0]

c0028c18 <fatWrapperWriteDisk>:
c0028c18:	53                   	push   ebx
c0028c19:	83 ec 18             	sub    esp,0x18
c0028c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028c24:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c29:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028c30:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028c34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028c38:	ba 00 00 00 00       	mov    edx,0x0
c0028c3d:	83 ec 0c             	sub    esp,0xc
c0028c40:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c44:	53                   	push   ebx
c0028c45:	52                   	push   edx
c0028c46:	50                   	push   eax
c0028c47:	51                   	push   ecx
c0028c48:	e8 17 3d ff ff       	call   c001c964 <LogicalDisk::write(unsigned long long, int, void*)>
c0028c4d:	83 c4 20             	add    esp,0x20
c0028c50:	83 c4 18             	add    esp,0x18
c0028c53:	5b                   	pop    ebx
c0028c54:	c3                   	ret    
c0028c55:	8d 76 00             	lea    esi,[esi+0x0]

c0028c58 <fatWrapperIoctl>:
c0028c58:	53                   	push   ebx
c0028c59:	83 ec 28             	sub    esp,0x28
c0028c5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0028c60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028c64:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028c68:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028c6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028c71:	83 f8 02             	cmp    eax,0x2
c0028c74:	75 32                	jne    c0028ca8 <fatWrapperIoctl+0x50>
c0028c76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028c7a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028c7e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c83:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028c8a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028c90:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028c96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028c9a:	66 89 02             	mov    WORD PTR [edx],ax
c0028c9d:	b8 00 00 00 00       	mov    eax,0x0
c0028ca2:	e9 c5 00 00 00       	jmp    c0028d6c <fatWrapperIoctl+0x114>
c0028ca7:	90                   	nop
c0028ca8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028cad:	83 f8 01             	cmp    eax,0x1
c0028cb0:	75 6a                	jne    c0028d1c <fatWrapperIoctl+0xc4>
c0028cb2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028cb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028cba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028cbf:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028cc6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028ccc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028cd2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028cd8:	89 c8                	mov    eax,ecx
c0028cda:	89 da                	mov    edx,ebx
c0028cdc:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028ce0:	c1 e0 0a             	shl    eax,0xa
c0028ce3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028ce8:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028cef:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028cf5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028cfb:	89 cb                	mov    ebx,ecx
c0028cfd:	c1 fb 1f             	sar    ebx,0x1f
c0028d00:	53                   	push   ebx
c0028d01:	51                   	push   ecx
c0028d02:	52                   	push   edx
c0028d03:	50                   	push   eax
c0028d04:	e8 a7 5b 00 00       	call   c002e8b0 <__udivdi3>
c0028d09:	83 c4 10             	add    esp,0x10
c0028d0c:	89 c2                	mov    edx,eax
c0028d0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028d12:	89 10                	mov    DWORD PTR [eax],edx
c0028d14:	b8 00 00 00 00       	mov    eax,0x0
c0028d19:	eb 51                	jmp    c0028d6c <fatWrapperIoctl+0x114>
c0028d1b:	90                   	nop
c0028d1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028d21:	85 c0                	test   eax,eax
c0028d23:	75 07                	jne    c0028d2c <fatWrapperIoctl+0xd4>
c0028d25:	b8 00 00 00 00       	mov    eax,0x0
c0028d2a:	eb 40                	jmp    c0028d6c <fatWrapperIoctl+0x114>
c0028d2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028d31:	83 f8 03             	cmp    eax,0x3
c0028d34:	75 1a                	jne    c0028d50 <fatWrapperIoctl+0xf8>
c0028d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028d3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028d3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028d42:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028d48:	b8 00 00 00 00       	mov    eax,0x0
c0028d4d:	eb 1d                	jmp    c0028d6c <fatWrapperIoctl+0x114>
c0028d4f:	90                   	nop
c0028d50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028d55:	83 f8 04             	cmp    eax,0x4
c0028d58:	75 0a                	jne    c0028d64 <fatWrapperIoctl+0x10c>
c0028d5a:	b8 00 00 00 00       	mov    eax,0x0
c0028d5f:	eb 0b                	jmp    c0028d6c <fatWrapperIoctl+0x114>
c0028d61:	8d 76 00             	lea    esi,[esi+0x0]
c0028d64:	b8 04 00 00 00       	mov    eax,0x4
c0028d69:	8d 76 00             	lea    esi,[esi+0x0]
c0028d6c:	83 c4 28             	add    esp,0x28
c0028d6f:	5b                   	pop    ebx
c0028d70:	c3                   	ret    
c0028d71:	90                   	nop
c0028d72:	66 90                	xchg   ax,ax

c0028d74 <FAT::FAT()>:
c0028d74:	83 ec 1c             	sub    esp,0x1c
c0028d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028d7b:	83 ec 0c             	sub    esp,0xc
c0028d7e:	50                   	push   eax
c0028d7f:	e8 66 15 ff ff       	call   c001a2ea <Filesystem::Filesystem()>
c0028d84:	83 c4 10             	add    esp,0x10
c0028d87:	ba 48 36 03 c0       	mov    edx,0xc0033648
c0028d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028d90:	89 10                	mov    DWORD PTR [eax],edx
c0028d92:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028d9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028da4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028da9:	7f 19                	jg     c0028dc4 <FAT::FAT()+0x50>
c0028dab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028daf:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028dba:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028dbf:	eb e3                	jmp    c0028da4 <FAT::FAT()+0x30>
c0028dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0028dc4:	90                   	nop
c0028dc5:	83 c4 1c             	add    esp,0x1c
c0028dc8:	c3                   	ret    
c0028dc9:	90                   	nop
c0028dca:	66 90                	xchg   ax,ax

c0028dcc <FAT::fixFilepath(char*)>:
c0028dcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dd0:	8a 00                	mov    al,BYTE PTR [eax]
c0028dd2:	0f be c0             	movsx  eax,al
c0028dd5:	83 f8 40             	cmp    eax,0x40
c0028dd8:	7e 2e                	jle    c0028e08 <FAT::fixFilepath(char*)+0x3c>
c0028dda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dde:	8a 00                	mov    al,BYTE PTR [eax]
c0028de0:	83 e8 41             	sub    eax,0x41
c0028de3:	88 c2                	mov    dl,al
c0028de5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028de9:	88 10                	mov    BYTE PTR [eax],dl
c0028deb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028def:	8a 00                	mov    al,BYTE PTR [eax]
c0028df1:	0f be c0             	movsx  eax,al
c0028df4:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028dfb:	83 c0 30             	add    eax,0x30
c0028dfe:	88 c2                	mov    dl,al
c0028e00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e04:	88 10                	mov    BYTE PTR [eax],dl
c0028e06:	66 90                	xchg   ax,ax
c0028e08:	90                   	nop
c0028e09:	c3                   	ret    
c0028e0a:	66 90                	xchg   ax,ax

c0028e0c <FAT::open(char const*, void**, FileOpenMode)>:
c0028e0c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028e12:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028e1a:	74 0c                	je     c0028e28 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028e1c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028e24:	75 0e                	jne    c0028e34 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028e26:	66 90                	xchg   ax,ax
c0028e28:	b8 04 00 00 00       	mov    eax,0x4
c0028e2d:	e9 46 01 00 00       	jmp    c0028f78 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028e32:	66 90                	xchg   ax,ax
c0028e34:	83 ec 08             	sub    esp,0x8
c0028e37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028e42:	50                   	push   eax
c0028e43:	e8 f8 77 fd ff       	call   c0000640 <strcpy>
c0028e48:	83 c4 10             	add    esp,0x10
c0028e4b:	83 ec 08             	sub    esp,0x8
c0028e4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028e52:	50                   	push   eax
c0028e53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e5a:	e8 6d ff ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c0028e5f:	83 c4 10             	add    esp,0x10
c0028e62:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028e6a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028e71:	83 e0 01             	and    eax,0x1
c0028e74:	74 12                	je     c0028e88 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028e76:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028e7d:	83 c8 01             	or     eax,0x1
c0028e80:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028e87:	90                   	nop
c0028e88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028e8f:	83 e0 04             	and    eax,0x4
c0028e92:	74 24                	je     c0028eb8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028e94:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028e9b:	83 c8 30             	or     eax,0x30
c0028e9e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ea5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028eac:	83 c8 02             	or     eax,0x2
c0028eaf:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028eb6:	66 90                	xchg   ax,ax
c0028eb8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028ebf:	83 e0 02             	and    eax,0x2
c0028ec2:	74 14                	je     c0028ed8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028ec4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ecb:	83 c8 02             	or     eax,0x2
c0028ece:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ed8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028edf:	83 e0 08             	and    eax,0x8
c0028ee2:	74 14                	je     c0028ef8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028ee4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028eeb:	83 c8 04             	or     eax,0x4
c0028eee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ef8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028eff:	83 e0 10             	and    eax,0x10
c0028f02:	74 14                	je     c0028f18 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028f04:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f0b:	83 c8 08             	or     eax,0x8
c0028f0e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f15:	8d 76 00             	lea    esi,[esi+0x0]
c0028f18:	83 ec 0c             	sub    esp,0xc
c0028f1b:	68 28 02 00 00       	push   0x228
c0028f20:	e8 d1 d6 fe ff       	call   c00165f6 <malloc>
c0028f25:	83 c4 10             	add    esp,0x10
c0028f28:	89 c2                	mov    edx,eax
c0028f2a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028f31:	89 10                	mov    DWORD PTR [eax],edx
c0028f33:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028f3b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028f42:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f44:	83 ec 04             	sub    esp,0x4
c0028f47:	52                   	push   edx
c0028f48:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028f4c:	52                   	push   edx
c0028f4d:	50                   	push   eax
c0028f4e:	e8 53 b0 fd ff       	call   c0003fa6 <f_open>
c0028f53:	83 c4 10             	add    esp,0x10
c0028f56:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028f5d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028f65:	74 09                	je     c0028f70 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028f67:	b8 01 00 00 00       	mov    eax,0x1
c0028f6c:	eb 0a                	jmp    c0028f78 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028f6e:	66 90                	xchg   ax,ax
c0028f70:	b8 00 00 00 00       	mov    eax,0x0
c0028f75:	8d 76 00             	lea    esi,[esi+0x0]
c0028f78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028f7e:	c3                   	ret    
c0028f7f:	90                   	nop

c0028f80 <FAT::openDir(char const*, void**)>:
c0028f80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028f86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028f8e:	74 0c                	je     c0028f9c <FAT::openDir(char const*, void**)+0x1c>
c0028f90:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028f98:	75 0e                	jne    c0028fa8 <FAT::openDir(char const*, void**)+0x28>
c0028f9a:	66 90                	xchg   ax,ax
c0028f9c:	b8 04 00 00 00       	mov    eax,0x4
c0028fa1:	e9 82 00 00 00       	jmp    c0029028 <FAT::openDir(char const*, void**)+0xa8>
c0028fa6:	66 90                	xchg   ax,ax
c0028fa8:	83 ec 08             	sub    esp,0x8
c0028fab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028fb2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028fb6:	50                   	push   eax
c0028fb7:	e8 84 76 fd ff       	call   c0000640 <strcpy>
c0028fbc:	83 c4 10             	add    esp,0x10
c0028fbf:	83 ec 08             	sub    esp,0x8
c0028fc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028fc6:	50                   	push   eax
c0028fc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028fce:	e8 f9 fd ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c0028fd3:	83 c4 10             	add    esp,0x10
c0028fd6:	83 ec 0c             	sub    esp,0xc
c0028fd9:	6a 30                	push   0x30
c0028fdb:	e8 16 d6 fe ff       	call   c00165f6 <malloc>
c0028fe0:	83 c4 10             	add    esp,0x10
c0028fe3:	89 c2                	mov    edx,eax
c0028fe5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028fec:	89 10                	mov    DWORD PTR [eax],edx
c0028fee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028ff5:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ff7:	83 ec 08             	sub    esp,0x8
c0028ffa:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028ffe:	52                   	push   edx
c0028fff:	50                   	push   eax
c0029000:	e8 50 b9 fd ff       	call   c0004955 <f_opendir>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002900f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0029017:	74 07                	je     c0029020 <FAT::openDir(char const*, void**)+0xa0>
c0029019:	b8 01 00 00 00       	mov    eax,0x1
c002901e:	eb 08                	jmp    c0029028 <FAT::openDir(char const*, void**)+0xa8>
c0029020:	b8 00 00 00 00       	mov    eax,0x0
c0029025:	8d 76 00             	lea    esi,[esi+0x0]
c0029028:	81 c4 1c 01 00 00    	add    esp,0x11c
c002902e:	c3                   	ret    
c002902f:	90                   	nop

c0029030 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0029030:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029036:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002903e:	75 0c                	jne    c002904c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0029040:	b8 04 00 00 00       	mov    eax,0x4
c0029045:	e9 d6 00 00 00       	jmp    c0029120 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c002904a:	66 90                	xchg   ax,ax
c002904c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0029054:	75 0a                	jne    c0029060 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0029056:	b8 04 00 00 00       	mov    eax,0x4
c002905b:	e9 c0 00 00 00       	jmp    c0029120 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029060:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0029068:	75 0a                	jne    c0029074 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c002906a:	b8 04 00 00 00       	mov    eax,0x4
c002906f:	e9 ac 00 00 00       	jmp    c0029120 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029074:	83 ec 08             	sub    esp,0x8
c0029077:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002907e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0029085:	50                   	push   eax
c0029086:	e8 b5 75 fd ff       	call   c0000640 <strcpy>
c002908b:	83 c4 10             	add    esp,0x10
c002908e:	83 ec 08             	sub    esp,0x8
c0029091:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0029098:	50                   	push   eax
c0029099:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00290a0:	e8 27 fd ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c00290a5:	83 c4 10             	add    esp,0x10
c00290a8:	83 ec 08             	sub    esp,0x8
c00290ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00290af:	50                   	push   eax
c00290b0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00290b7:	50                   	push   eax
c00290b8:	e8 17 ba fd ff       	call   c0004ad4 <f_stat>
c00290bd:	83 c4 10             	add    esp,0x10
c00290c0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00290c7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00290ce:	85 c0                	test   eax,eax
c00290d0:	74 0a                	je     c00290dc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00290d2:	83 f8 04             	cmp    eax,0x4
c00290d5:	74 39                	je     c0029110 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00290d7:	eb 3f                	jmp    c0029118 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00290d9:	8d 76 00             	lea    esi,[esi+0x0]
c00290dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00290e0:	0f b6 c0             	movzx  eax,al
c00290e3:	83 e0 10             	and    eax,0x10
c00290e6:	0f 95 c2             	setne  dl
c00290e9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00290f0:	88 10                	mov    BYTE PTR [eax],dl
c00290f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290f6:	ba 00 00 00 00       	mov    edx,0x0
c00290fb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0029102:	89 01                	mov    DWORD PTR [ecx],eax
c0029104:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0029107:	b8 00 00 00 00       	mov    eax,0x0
c002910c:	eb 12                	jmp    c0029120 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c002910e:	66 90                	xchg   ax,ax
c0029110:	b8 02 00 00 00       	mov    eax,0x2
c0029115:	eb 09                	jmp    c0029120 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029117:	90                   	nop
c0029118:	b8 01 00 00 00       	mov    eax,0x1
c002911d:	8d 76 00             	lea    esi,[esi+0x0]
c0029120:	81 c4 2c 02 00 00    	add    esp,0x22c
c0029126:	c3                   	ret    
c0029127:	90                   	nop

c0029128 <FAT::unlink(char const*)>:
c0029128:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002912e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029136:	75 08                	jne    c0029140 <FAT::unlink(char const*)+0x18>
c0029138:	b8 04 00 00 00       	mov    eax,0x4
c002913d:	eb 61                	jmp    c00291a0 <FAT::unlink(char const*)+0x78>
c002913f:	90                   	nop
c0029140:	83 ec 08             	sub    esp,0x8
c0029143:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002914a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002914e:	50                   	push   eax
c002914f:	e8 ec 74 fd ff       	call   c0000640 <strcpy>
c0029154:	83 c4 10             	add    esp,0x10
c0029157:	83 ec 08             	sub    esp,0x8
c002915a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002915e:	50                   	push   eax
c002915f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029166:	e8 61 fc ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c002916b:	83 c4 10             	add    esp,0x10
c002916e:	83 ec 0c             	sub    esp,0xc
c0029171:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029175:	50                   	push   eax
c0029176:	e8 cb bb fd ff       	call   c0004d46 <f_unlink>
c002917b:	83 c4 10             	add    esp,0x10
c002917e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029185:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002918c:	85 c0                	test   eax,eax
c002918e:	75 08                	jne    c0029198 <FAT::unlink(char const*)+0x70>
c0029190:	b8 00 00 00 00       	mov    eax,0x0
c0029195:	eb 09                	jmp    c00291a0 <FAT::unlink(char const*)+0x78>
c0029197:	90                   	nop
c0029198:	b8 01 00 00 00       	mov    eax,0x1
c002919d:	8d 76 00             	lea    esi,[esi+0x0]
c00291a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00291a6:	c3                   	ret    
c00291a7:	90                   	nop

c00291a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00291a8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00291ae:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00291b5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00291bc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00291c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00291c4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00291cc:	75 0a                	jne    c00291d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00291ce:	b8 04 00 00 00       	mov    eax,0x4
c00291d3:	e9 7c 01 00 00       	jmp    c0029354 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c00291d8:	83 ec 08             	sub    esp,0x8
c00291db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00291e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00291e6:	50                   	push   eax
c00291e7:	e8 54 74 fd ff       	call   c0000640 <strcpy>
c00291ec:	83 c4 10             	add    esp,0x10
c00291ef:	83 ec 08             	sub    esp,0x8
c00291f2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00291f6:	50                   	push   eax
c00291f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00291fe:	e8 c9 fb ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c0029203:	83 c4 10             	add    esp,0x10
c0029206:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002920e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0029216:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002921b:	83 e0 01             	and    eax,0x1
c002921e:	74 14                	je     c0029234 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0029220:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029227:	83 c8 01             	or     eax,0x1
c002922a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029231:	8d 76 00             	lea    esi,[esi+0x0]
c0029234:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029239:	83 e0 02             	and    eax,0x2
c002923c:	74 12                	je     c0029250 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c002923e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029245:	83 c8 20             	or     eax,0x20
c0029248:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002924f:	90                   	nop
c0029250:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029255:	83 e0 04             	and    eax,0x4
c0029258:	74 12                	je     c002926c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c002925a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029261:	83 c8 04             	or     eax,0x4
c0029264:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002926b:	90                   	nop
c002926c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029271:	83 e0 08             	and    eax,0x8
c0029274:	74 12                	je     c0029288 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0029276:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002927d:	83 c8 02             	or     eax,0x2
c0029280:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029287:	90                   	nop
c0029288:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002928d:	83 e0 01             	and    eax,0x1
c0029290:	74 12                	je     c00292a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0029292:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029299:	83 c8 01             	or     eax,0x1
c002929c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00292a3:	90                   	nop
c00292a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00292a9:	83 e0 02             	and    eax,0x2
c00292ac:	74 12                	je     c00292c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c00292ae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00292b5:	83 c8 20             	or     eax,0x20
c00292b8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00292bf:	90                   	nop
c00292c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00292c5:	83 e0 04             	and    eax,0x4
c00292c8:	74 12                	je     c00292dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c00292ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00292d1:	83 c8 04             	or     eax,0x4
c00292d4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00292db:	90                   	nop
c00292dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00292e1:	83 e0 08             	and    eax,0x8
c00292e4:	74 12                	je     c00292f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00292e6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00292ed:	83 c8 02             	or     eax,0x2
c00292f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00292f7:	90                   	nop
c00292f8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00292ff:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029306:	09 d0                	or     eax,edx
c0029308:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002930f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0029317:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002931f:	83 ec 04             	sub    esp,0x4
c0029322:	52                   	push   edx
c0029323:	50                   	push   eax
c0029324:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029328:	50                   	push   eax
c0029329:	e8 8d be fd ff       	call   c00051bb <f_chmod>
c002932e:	83 c4 10             	add    esp,0x10
c0029331:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029338:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002933f:	85 c0                	test   eax,eax
c0029341:	75 09                	jne    c002934c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0029343:	b8 00 00 00 00       	mov    eax,0x0
c0029348:	eb 0a                	jmp    c0029354 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c002934a:	66 90                	xchg   ax,ax
c002934c:	b8 01 00 00 00       	mov    eax,0x1
c0029351:	8d 76 00             	lea    esi,[esi+0x0]
c0029354:	81 c4 2c 01 00 00    	add    esp,0x12c
c002935a:	c3                   	ret    
c002935b:	90                   	nop

c002935c <FAT::rename(char const*, char const*)>:
c002935c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0029362:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002936a:	74 0c                	je     c0029378 <FAT::rename(char const*, char const*)+0x1c>
c002936c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029374:	75 0e                	jne    c0029384 <FAT::rename(char const*, char const*)+0x28>
c0029376:	66 90                	xchg   ax,ax
c0029378:	b8 04 00 00 00       	mov    eax,0x4
c002937d:	e9 9e 00 00 00       	jmp    c0029420 <FAT::rename(char const*, char const*)+0xc4>
c0029382:	66 90                	xchg   ax,ax
c0029384:	83 ec 08             	sub    esp,0x8
c0029387:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002938e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029395:	50                   	push   eax
c0029396:	e8 a5 72 fd ff       	call   c0000640 <strcpy>
c002939b:	83 c4 10             	add    esp,0x10
c002939e:	83 ec 08             	sub    esp,0x8
c00293a1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00293a8:	50                   	push   eax
c00293a9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00293b0:	e8 17 fa ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c00293b5:	83 c4 10             	add    esp,0x10
c00293b8:	83 ec 08             	sub    esp,0x8
c00293bb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00293c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00293c6:	50                   	push   eax
c00293c7:	e8 74 72 fd ff       	call   c0000640 <strcpy>
c00293cc:	83 c4 10             	add    esp,0x10
c00293cf:	83 ec 08             	sub    esp,0x8
c00293d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00293d6:	50                   	push   eax
c00293d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00293de:	e8 e9 f9 ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c00293e3:	83 c4 10             	add    esp,0x10
c00293e6:	83 ec 08             	sub    esp,0x8
c00293e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00293ed:	50                   	push   eax
c00293ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00293f5:	50                   	push   eax
c00293f6:	e8 08 bc fd ff       	call   c0005003 <f_rename>
c00293fb:	83 c4 10             	add    esp,0x10
c00293fe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0029405:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002940c:	85 c0                	test   eax,eax
c002940e:	75 08                	jne    c0029418 <FAT::rename(char const*, char const*)+0xbc>
c0029410:	b8 00 00 00 00       	mov    eax,0x0
c0029415:	eb 09                	jmp    c0029420 <FAT::rename(char const*, char const*)+0xc4>
c0029417:	90                   	nop
c0029418:	b8 01 00 00 00       	mov    eax,0x1
c002941d:	8d 76 00             	lea    esi,[esi+0x0]
c0029420:	81 c4 1c 02 00 00    	add    esp,0x21c
c0029426:	c3                   	ret    
c0029427:	90                   	nop

c0029428 <FAT::mkdir(char const*)>:
c0029428:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002942e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029436:	75 08                	jne    c0029440 <FAT::mkdir(char const*)+0x18>
c0029438:	b8 04 00 00 00       	mov    eax,0x4
c002943d:	eb 61                	jmp    c00294a0 <FAT::mkdir(char const*)+0x78>
c002943f:	90                   	nop
c0029440:	83 ec 08             	sub    esp,0x8
c0029443:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002944a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002944e:	50                   	push   eax
c002944f:	e8 ec 71 fd ff       	call   c0000640 <strcpy>
c0029454:	83 c4 10             	add    esp,0x10
c0029457:	83 ec 08             	sub    esp,0x8
c002945a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002945e:	50                   	push   eax
c002945f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029466:	e8 61 f9 ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c002946b:	83 c4 10             	add    esp,0x10
c002946e:	83 ec 0c             	sub    esp,0xc
c0029471:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029475:	50                   	push   eax
c0029476:	e8 ed b9 fd ff       	call   c0004e68 <f_mkdir>
c002947b:	83 c4 10             	add    esp,0x10
c002947e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029485:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002948c:	85 c0                	test   eax,eax
c002948e:	75 08                	jne    c0029498 <FAT::mkdir(char const*)+0x70>
c0029490:	b8 00 00 00 00       	mov    eax,0x0
c0029495:	eb 09                	jmp    c00294a0 <FAT::mkdir(char const*)+0x78>
c0029497:	90                   	nop
c0029498:	b8 01 00 00 00       	mov    eax,0x1
c002949d:	8d 76 00             	lea    esi,[esi+0x0]
c00294a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00294a6:	c3                   	ret    
c00294a7:	90                   	nop

c00294a8 <FAT::exists(char const*)>:
c00294a8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00294ae:	83 ec 08             	sub    esp,0x8
c00294b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00294b8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00294bc:	50                   	push   eax
c00294bd:	e8 7e 71 fd ff       	call   c0000640 <strcpy>
c00294c2:	83 c4 10             	add    esp,0x10
c00294c5:	83 ec 08             	sub    esp,0x8
c00294c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00294cc:	50                   	push   eax
c00294cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00294d4:	e8 f3 f8 ff ff       	call   c0028dcc <FAT::fixFilepath(char*)>
c00294d9:	83 c4 10             	add    esp,0x10
c00294dc:	83 ec 08             	sub    esp,0x8
c00294df:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00294e6:	50                   	push   eax
c00294e7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00294eb:	50                   	push   eax
c00294ec:	e8 e3 b5 fd ff       	call   c0004ad4 <f_stat>
c00294f1:	83 c4 10             	add    esp,0x10
c00294f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00294fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0029502:	85 c0                	test   eax,eax
c0029504:	75 06                	jne    c002950c <FAT::exists(char const*)+0x64>
c0029506:	b0 01                	mov    al,0x1
c0029508:	eb 06                	jmp    c0029510 <FAT::exists(char const*)+0x68>
c002950a:	66 90                	xchg   ax,ax
c002950c:	b0 00                	mov    al,0x0
c002950e:	66 90                	xchg   ax,ax
c0029510:	81 c4 2c 02 00 00    	add    esp,0x22c
c0029516:	c3                   	ret    
c0029517:	90                   	nop

c0029518 <isoReadDiscSectorHelper>:
c0029518:	83 ec 2c             	sub    esp,0x2c
c002951b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002951f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0029523:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0029528:	83 e8 41             	sub    eax,0x41
c002952b:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0029532:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029536:	ba 00 00 00 00       	mov    edx,0x0
c002953b:	83 ec 0c             	sub    esp,0xc
c002953e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029542:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0029546:	52                   	push   edx
c0029547:	50                   	push   eax
c0029548:	51                   	push   ecx
c0029549:	e8 aa 33 ff ff       	call   c001c8f8 <LogicalDisk::read(unsigned long long, int, void*)>
c002954e:	83 c4 20             	add    esp,0x20
c0029551:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029555:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002955a:	74 0c                	je     c0029568 <isoReadDiscSectorHelper+0x50>
c002955c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029560:	c1 e0 0b             	shl    eax,0xb
c0029563:	eb 0b                	jmp    c0029570 <isoReadDiscSectorHelper+0x58>
c0029565:	8d 76 00             	lea    esi,[esi+0x0]
c0029568:	b8 00 00 00 00       	mov    eax,0x0
c002956d:	8d 76 00             	lea    esi,[esi+0x0]
c0029570:	83 c4 2c             	add    esp,0x2c
c0029573:	c3                   	ret    

c0029574 <iso_kprintf>:
c0029574:	83 ec 0c             	sub    esp,0xc
c0029577:	83 ec 08             	sub    esp,0x8
c002957a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002957e:	68 f6 33 03 c0       	push   0xc00333f6
c0029583:	e8 fd fe fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0029588:	83 c4 10             	add    esp,0x10
c002958b:	90                   	nop
c002958c:	83 c4 0c             	add    esp,0xc
c002958f:	c3                   	ret    

c0029590 <iso_kprintfd>:
c0029590:	83 ec 0c             	sub    esp,0xc
c0029593:	83 ec 08             	sub    esp,0x8
c0029596:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002959a:	68 26 1a 03 c0       	push   0xc0031a26
c002959f:	e8 e1 fe fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00295a4:	83 c4 10             	add    esp,0x10
c00295a7:	90                   	nop
c00295a8:	83 c4 0c             	add    esp,0xc
c00295ab:	c3                   	ret    

c00295ac <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00295ac:	b8 08 00 00 00       	mov    eax,0x8
c00295b1:	c3                   	ret    

c00295b2 <ISO9660::truncate(void*, unsigned long long)>:
c00295b2:	b8 01 00 00 00       	mov    eax,0x1
c00295b7:	c3                   	ret    

c00295b8 <ISO9660::getName()>:
c00295b8:	b8 ac 36 03 c0       	mov    eax,0xc00336ac
c00295bd:	c3                   	ret    

c00295be <ISO9660::closeDir(void*)>:
c00295be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00295c4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00295c7:	90                   	nop

c00295c8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00295c8:	b8 01 00 00 00       	mov    eax,0x1
c00295cd:	c3                   	ret    

c00295ce <ISO9660::unlink(char const*)>:
c00295ce:	b8 01 00 00 00       	mov    eax,0x1
c00295d3:	c3                   	ret    

c00295d4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00295d4:	b8 03 00 00 00       	mov    eax,0x3
c00295d9:	c3                   	ret    

c00295da <ISO9660::rename(char const*, char const*)>:
c00295da:	b8 01 00 00 00       	mov    eax,0x1
c00295df:	c3                   	ret    

c00295e0 <ISO9660::mkdir(char const*)>:
c00295e0:	b8 01 00 00 00       	mov    eax,0x1
c00295e5:	c3                   	ret    

c00295e6 <ISO9660::~ISO9660()>:
c00295e6:	83 ec 0c             	sub    esp,0xc
c00295e9:	ba ec 37 03 c0       	mov    edx,0xc00337ec
c00295ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f2:	89 10                	mov    DWORD PTR [eax],edx
c00295f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f8:	83 ec 0c             	sub    esp,0xc
c00295fb:	50                   	push   eax
c00295fc:	e8 0d 0d ff ff       	call   c001a30e <Filesystem::~Filesystem()>
c0029601:	83 c4 10             	add    esp,0x10
c0029604:	90                   	nop
c0029605:	83 c4 0c             	add    esp,0xc
c0029608:	c3                   	ret    
c0029609:	90                   	nop

c002960a <ISO9660::~ISO9660()>:
c002960a:	83 ec 0c             	sub    esp,0xc
c002960d:	83 ec 0c             	sub    esp,0xc
c0029610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029614:	e8 cd ff ff ff       	call   c00295e6 <ISO9660::~ISO9660()>
c0029619:	83 c4 10             	add    esp,0x10
c002961c:	83 ec 08             	sub    esp,0x8
c002961f:	6a 08                	push   0x8
c0029621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029625:	e8 2e fd fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002962a:	83 c4 10             	add    esp,0x10
c002962d:	83 c4 0c             	add    esp,0xc
c0029630:	c3                   	ret    
c0029631:	90                   	nop

c0029632 <ISO9660::exists(char const*)>:
c0029632:	83 ec 18             	sub    esp,0x18
c0029635:	68 c7 36 03 c0       	push   0xc00336c7
c002963a:	e8 5f 6e ff ff       	call   c002049e <KePanic(char const*)>
c002963f:	31 c0                	xor    eax,eax
c0029641:	83 c4 1c             	add    esp,0x1c
c0029644:	c3                   	ret    
c0029645:	90                   	nop

c0029646 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0029646:	56                   	push   esi
c0029647:	53                   	push   ebx
c0029648:	53                   	push   ebx
c0029649:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002964d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029651:	85 db                	test   ebx,ebx
c0029653:	0f 84 ca 00 00 00    	je     c0029723 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029659:	85 f6                	test   esi,esi
c002965b:	0f 84 c2 00 00 00    	je     c0029723 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029661:	b8 03 00 00 00       	mov    eax,0x3
c0029666:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c002966b:	0f 85 b7 00 00 00    	jne    c0029728 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029671:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029673:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002967a:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029680:	74 1b                	je     c002969d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029682:	85 c0                	test   eax,eax
c0029684:	74 10                	je     c0029696 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029686:	83 ec 0c             	sub    esp,0xc
c0029689:	68 e5 36 03 c0       	push   0xc00336e5
c002968e:	e8 0b 6e ff ff       	call   c002049e <KePanic(char const*)>
c0029693:	83 c4 10             	add    esp,0x10
c0029696:	8a 03                	mov    al,BYTE PTR [ebx]
c0029698:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002969d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296a0:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296a7:	85 c0                	test   eax,eax
c00296a9:	74 09                	je     c00296b4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00296ab:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00296b2:	74 48                	je     c00296fc <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00296b4:	83 ec 0c             	sub    esp,0xc
c00296b7:	68 f5 36 03 c0       	push   0xc00336f5
c00296bc:	e8 c4 fd fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00296c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296c4:	83 c4 10             	add    esp,0x10
c00296c7:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296ce:	85 c0                	test   eax,eax
c00296d0:	74 17                	je     c00296e9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00296d2:	83 ec 0c             	sub    esp,0xc
c00296d5:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00296dc:	68 15 37 03 c0       	push   0xc0033715
c00296e1:	e8 9f fd fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00296e6:	83 c4 10             	add    esp,0x10
c00296e9:	83 ec 0c             	sub    esp,0xc
c00296ec:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296f3:	50                   	push   eax
c00296f4:	e8 99 d6 fd ff       	call   c0006d92 <init_percd>
c00296f9:	83 c4 10             	add    esp,0x10
c00296fc:	83 c3 03             	add    ebx,0x3
c00296ff:	51                   	push   ecx
c0029700:	51                   	push   ecx
c0029701:	6a 00                	push   0x0
c0029703:	53                   	push   ebx
c0029704:	e8 50 d1 fd ff       	call   c0006859 <iso_open>
c0029709:	83 c4 10             	add    esp,0x10
c002970c:	89 c2                	mov    edx,eax
c002970e:	b8 01 00 00 00       	mov    eax,0x1
c0029713:	83 fa ff             	cmp    edx,0xffffffff
c0029716:	74 10                	je     c0029728 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029718:	83 c2 32             	add    edx,0x32
c002971b:	31 c0                	xor    eax,eax
c002971d:	01 d2                	add    edx,edx
c002971f:	89 16                	mov    DWORD PTR [esi],edx
c0029721:	eb 05                	jmp    c0029728 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029723:	b8 04 00 00 00       	mov    eax,0x4
c0029728:	5a                   	pop    edx
c0029729:	5b                   	pop    ebx
c002972a:	5e                   	pop    esi
c002972b:	c3                   	ret    

c002972c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002972c:	53                   	push   ebx
c002972d:	83 ec 08             	sub    esp,0x8
c0029730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029734:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029738:	85 c0                	test   eax,eax
c002973a:	74 2d                	je     c0029769 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c002973c:	85 db                	test   ebx,ebx
c002973e:	74 29                	je     c0029769 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029740:	b9 02 00 00 00       	mov    ecx,0x2
c0029745:	52                   	push   edx
c0029746:	99                   	cdq    
c0029747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002974b:	f7 f9                	idiv   ecx
c002974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029751:	83 e8 32             	sub    eax,0x32
c0029754:	50                   	push   eax
c0029755:	e8 a7 d1 fd ff       	call   c0006901 <iso_read>
c002975a:	83 c4 10             	add    esp,0x10
c002975d:	89 03                	mov    DWORD PTR [ebx],eax
c002975f:	09 d0                	or     eax,edx
c0029761:	0f 94 c0             	sete   al
c0029764:	0f b6 c0             	movzx  eax,al
c0029767:	eb 05                	jmp    c002976e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029769:	b8 04 00 00 00       	mov    eax,0x4
c002976e:	83 c4 08             	add    esp,0x8
c0029771:	5b                   	pop    ebx
c0029772:	c3                   	ret    
c0029773:	90                   	nop

c0029774 <ISO9660::seek(void*, unsigned long long)>:
c0029774:	57                   	push   edi
c0029775:	56                   	push   esi
c0029776:	b8 04 00 00 00       	mov    eax,0x4
c002977b:	51                   	push   ecx
c002977c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029780:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029784:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029788:	85 d2                	test   edx,edx
c002978a:	74 26                	je     c00297b2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c002978c:	6a 00                	push   0x0
c002978e:	b9 02 00 00 00       	mov    ecx,0x2
c0029793:	57                   	push   edi
c0029794:	89 d0                	mov    eax,edx
c0029796:	56                   	push   esi
c0029797:	99                   	cdq    
c0029798:	f7 f9                	idiv   ecx
c002979a:	83 e8 32             	sub    eax,0x32
c002979d:	50                   	push   eax
c002979e:	e8 74 d2 fd ff       	call   c0006a17 <iso_seek>
c00297a3:	83 c4 10             	add    esp,0x10
c00297a6:	31 f0                	xor    eax,esi
c00297a8:	31 fa                	xor    edx,edi
c00297aa:	09 d0                	or     eax,edx
c00297ac:	0f 95 c0             	setne  al
c00297af:	0f b6 c0             	movzx  eax,al
c00297b2:	5a                   	pop    edx
c00297b3:	5e                   	pop    esi
c00297b4:	5f                   	pop    edi
c00297b5:	c3                   	ret    

c00297b6 <ISO9660::tell(void*, unsigned long long*)>:
c00297b6:	53                   	push   ebx
c00297b7:	83 ec 08             	sub    esp,0x8
c00297ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00297be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00297c2:	85 c0                	test   eax,eax
c00297c4:	74 24                	je     c00297ea <ISO9660::tell(void*, unsigned long long*)+0x34>
c00297c6:	85 db                	test   ebx,ebx
c00297c8:	74 20                	je     c00297ea <ISO9660::tell(void*, unsigned long long*)+0x34>
c00297ca:	83 ec 0c             	sub    esp,0xc
c00297cd:	b9 02 00 00 00       	mov    ecx,0x2
c00297d2:	99                   	cdq    
c00297d3:	f7 f9                	idiv   ecx
c00297d5:	83 e8 32             	sub    eax,0x32
c00297d8:	50                   	push   eax
c00297d9:	e8 bd d2 fd ff       	call   c0006a9b <iso_tell>
c00297de:	83 c4 10             	add    esp,0x10
c00297e1:	89 03                	mov    DWORD PTR [ebx],eax
c00297e3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00297e6:	31 c0                	xor    eax,eax
c00297e8:	eb 05                	jmp    c00297ef <ISO9660::tell(void*, unsigned long long*)+0x39>
c00297ea:	b8 04 00 00 00       	mov    eax,0x4
c00297ef:	83 c4 08             	add    esp,0x8
c00297f2:	5b                   	pop    ebx
c00297f3:	c3                   	ret    

c00297f4 <ISO9660::stat(void*, unsigned long long*)>:
c00297f4:	53                   	push   ebx
c00297f5:	83 ec 14             	sub    esp,0x14
c00297f8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00297fc:	68 39 37 03 c0       	push   0xc0033739
c0029801:	e8 7f fc fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0029806:	83 c4 10             	add    esp,0x10
c0029809:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002980e:	74 2c                	je     c002983c <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029810:	85 db                	test   ebx,ebx
c0029812:	74 28                	je     c002983c <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029814:	83 ec 0c             	sub    esp,0xc
c0029817:	b9 02 00 00 00       	mov    ecx,0x2
c002981c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029820:	99                   	cdq    
c0029821:	f7 f9                	idiv   ecx
c0029823:	83 e8 32             	sub    eax,0x32
c0029826:	50                   	push   eax
c0029827:	e8 a0 d2 fd ff       	call   c0006acc <iso_total>
c002982c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0029833:	89 03                	mov    DWORD PTR [ebx],eax
c0029835:	83 c4 10             	add    esp,0x10
c0029838:	31 c0                	xor    eax,eax
c002983a:	eb 05                	jmp    c0029841 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c002983c:	b8 04 00 00 00       	mov    eax,0x4
c0029841:	83 c4 08             	add    esp,0x8
c0029844:	5b                   	pop    ebx
c0029845:	c3                   	ret    

c0029846 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029846:	55                   	push   ebp
c0029847:	57                   	push   edi
c0029848:	56                   	push   esi
c0029849:	53                   	push   ebx
c002984a:	83 ec 18             	sub    esp,0x18
c002984d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029851:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029855:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029859:	68 41 37 03 c0       	push   0xc0033741
c002985e:	e8 22 fc fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0029863:	83 c4 10             	add    esp,0x10
c0029866:	85 ff                	test   edi,edi
c0029868:	0f 94 c0             	sete   al
c002986b:	85 f6                	test   esi,esi
c002986d:	0f 94 c2             	sete   dl
c0029870:	09 d0                	or     eax,edx
c0029872:	a8 01                	test   al,0x1
c0029874:	0f 85 dd 00 00 00    	jne    c0029957 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002987a:	85 db                	test   ebx,ebx
c002987c:	0f 84 d5 00 00 00    	je     c0029957 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029882:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029885:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002988b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029892:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029899:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002989b:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00298a1:	74 1b                	je     c00298be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00298a3:	85 c0                	test   eax,eax
c00298a5:	74 10                	je     c00298b7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00298a7:	83 ec 0c             	sub    esp,0xc
c00298aa:	68 e5 36 03 c0       	push   0xc00336e5
c00298af:	e8 ea 6b ff ff       	call   c002049e <KePanic(char const*)>
c00298b4:	83 c4 10             	add    esp,0x10
c00298b7:	8a 03                	mov    al,BYTE PTR [ebx]
c00298b9:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00298be:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00298c1:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00298c8:	85 c0                	test   eax,eax
c00298ca:	74 09                	je     c00298d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00298cc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00298d3:	74 51                	je     c0029926 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00298d5:	83 ec 0c             	sub    esp,0xc
c00298d8:	68 49 37 03 c0       	push   0xc0033749
c00298dd:	e8 a3 fb fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00298e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00298e5:	83 c4 10             	add    esp,0x10
c00298e8:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c00298f0:	74 21                	je     c0029913 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00298f2:	83 ec 0c             	sub    esp,0xc
c00298f5:	68 69 37 03 c0       	push   0xc0033769
c00298fa:	e8 86 fb fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c00298ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029902:	83 c4 10             	add    esp,0x10
c0029905:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002990c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029913:	83 ec 0c             	sub    esp,0xc
c0029916:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002991d:	50                   	push   eax
c002991e:	e8 6f d4 fd ff       	call   c0006d92 <init_percd>
c0029923:	83 c4 10             	add    esp,0x10
c0029926:	83 c3 03             	add    ebx,0x3
c0029929:	52                   	push   edx
c002992a:	52                   	push   edx
c002992b:	6a 00                	push   0x0
c002992d:	53                   	push   ebx
c002992e:	e8 26 cf fd ff       	call   c0006859 <iso_open>
c0029933:	83 c4 10             	add    esp,0x10
c0029936:	89 c5                	mov    ebp,eax
c0029938:	83 f8 ff             	cmp    eax,0xffffffff
c002993b:	75 21                	jne    c002995e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c002993d:	50                   	push   eax
c002993e:	50                   	push   eax
c002993f:	6a 01                	push   0x1
c0029941:	53                   	push   ebx
c0029942:	e8 12 cf fd ff       	call   c0006859 <iso_open>
c0029947:	83 c4 10             	add    esp,0x10
c002994a:	ba 02 00 00 00       	mov    edx,0x2
c002994f:	40                   	inc    eax
c0029950:	74 2b                	je     c002997d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029952:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029955:	eb 24                	jmp    c002997b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029957:	ba 04 00 00 00       	mov    edx,0x4
c002995c:	eb 1f                	jmp    c002997d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002995e:	83 ec 0c             	sub    esp,0xc
c0029961:	50                   	push   eax
c0029962:	e8 65 d1 fd ff       	call   c0006acc <iso_total>
c0029967:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002996e:	89 07                	mov    DWORD PTR [edi],eax
c0029970:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029973:	e8 6b cf fd ff       	call   c00068e3 <iso_close>
c0029978:	83 c4 10             	add    esp,0x10
c002997b:	31 d2                	xor    edx,edx
c002997d:	83 c4 0c             	add    esp,0xc
c0029980:	89 d0                	mov    eax,edx
c0029982:	5b                   	pop    ebx
c0029983:	5e                   	pop    esi
c0029984:	5f                   	pop    edi
c0029985:	5d                   	pop    ebp
c0029986:	c3                   	ret    
c0029987:	90                   	nop

c0029988 <ISO9660::close(void*)>:
c0029988:	83 ec 0c             	sub    esp,0xc
c002998b:	b8 04 00 00 00       	mov    eax,0x4
c0029990:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029994:	85 d2                	test   edx,edx
c0029996:	74 1b                	je     c00299b3 <ISO9660::close(void*)+0x2b>
c0029998:	83 ec 0c             	sub    esp,0xc
c002999b:	b9 02 00 00 00       	mov    ecx,0x2
c00299a0:	89 d0                	mov    eax,edx
c00299a2:	99                   	cdq    
c00299a3:	f7 f9                	idiv   ecx
c00299a5:	83 e8 32             	sub    eax,0x32
c00299a8:	50                   	push   eax
c00299a9:	e8 35 cf fd ff       	call   c00068e3 <iso_close>
c00299ae:	83 c4 10             	add    esp,0x10
c00299b1:	31 c0                	xor    eax,eax
c00299b3:	83 c4 0c             	add    esp,0xc
c00299b6:	c3                   	ret    
c00299b7:	90                   	nop

c00299b8 <ISO9660::openDir(char const*, void**)>:
c00299b8:	56                   	push   esi
c00299b9:	53                   	push   ebx
c00299ba:	50                   	push   eax
c00299bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00299bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00299c3:	85 db                	test   ebx,ebx
c00299c5:	0f 84 bd 00 00 00    	je     c0029a88 <ISO9660::openDir(char const*, void**)+0xd0>
c00299cb:	85 f6                	test   esi,esi
c00299cd:	0f 84 b5 00 00 00    	je     c0029a88 <ISO9660::openDir(char const*, void**)+0xd0>
c00299d3:	8a 13                	mov    dl,BYTE PTR [ebx]
c00299d5:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00299dc:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c00299e2:	74 1b                	je     c00299ff <ISO9660::openDir(char const*, void**)+0x47>
c00299e4:	85 c0                	test   eax,eax
c00299e6:	74 10                	je     c00299f8 <ISO9660::openDir(char const*, void**)+0x40>
c00299e8:	83 ec 0c             	sub    esp,0xc
c00299eb:	68 e5 36 03 c0       	push   0xc00336e5
c00299f0:	e8 a9 6a ff ff       	call   c002049e <KePanic(char const*)>
c00299f5:	83 c4 10             	add    esp,0x10
c00299f8:	8a 03                	mov    al,BYTE PTR [ebx]
c00299fa:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00299ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029a02:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029a09:	85 c0                	test   eax,eax
c0029a0b:	74 10                	je     c0029a1d <ISO9660::openDir(char const*, void**)+0x65>
c0029a0d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029a14:	74 1a                	je     c0029a30 <ISO9660::openDir(char const*, void**)+0x78>
c0029a16:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029a1d:	83 ec 0c             	sub    esp,0xc
c0029a20:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029a27:	50                   	push   eax
c0029a28:	e8 65 d3 fd ff       	call   c0006d92 <init_percd>
c0029a2d:	83 c4 10             	add    esp,0x10
c0029a30:	83 c3 03             	add    ebx,0x3
c0029a33:	50                   	push   eax
c0029a34:	50                   	push   eax
c0029a35:	6a 01                	push   0x1
c0029a37:	53                   	push   ebx
c0029a38:	e8 1c ce fd ff       	call   c0006859 <iso_open>
c0029a3d:	83 c4 10             	add    esp,0x10
c0029a40:	89 c3                	mov    ebx,eax
c0029a42:	83 f8 ff             	cmp    eax,0xffffffff
c0029a45:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029a4a:	75 1c                	jne    c0029a68 <ISO9660::openDir(char const*, void**)+0xb0>
c0029a4c:	53                   	push   ebx
c0029a4d:	53                   	push   ebx
c0029a4e:	68 8d 37 03 c0       	push   0xc003378d
c0029a53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029a59:	e8 88 db fe ff       	call   c00175e6 <VgaText::puts(char const*)>
c0029a5e:	83 c4 10             	add    esp,0x10
c0029a61:	b8 01 00 00 00       	mov    eax,0x1
c0029a66:	eb 25                	jmp    c0029a8d <ISO9660::openDir(char const*, void**)+0xd5>
c0029a68:	01 db                	add    ebx,ebx
c0029a6a:	51                   	push   ecx
c0029a6b:	83 c3 65             	add    ebx,0x65
c0029a6e:	51                   	push   ecx
c0029a6f:	68 a0 37 03 c0       	push   0xc00337a0
c0029a74:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029a7a:	e8 67 db fe ff       	call   c00175e6 <VgaText::puts(char const*)>
c0029a7f:	89 1e                	mov    DWORD PTR [esi],ebx
c0029a81:	83 c4 10             	add    esp,0x10
c0029a84:	31 c0                	xor    eax,eax
c0029a86:	eb 05                	jmp    c0029a8d <ISO9660::openDir(char const*, void**)+0xd5>
c0029a88:	b8 04 00 00 00       	mov    eax,0x4
c0029a8d:	5a                   	pop    edx
c0029a8e:	5b                   	pop    ebx
c0029a8f:	5e                   	pop    esi
c0029a90:	c3                   	ret    
c0029a91:	90                   	nop

c0029a92 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029a92:	55                   	push   ebp
c0029a93:	57                   	push   edi
c0029a94:	56                   	push   esi
c0029a95:	53                   	push   ebx
c0029a96:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029a9c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029aa3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0029aaa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029ab2:	0f 84 e7 00 00 00    	je     c0029b9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029ab8:	85 db                	test   ebx,ebx
c0029aba:	0f 84 df 00 00 00    	je     c0029b9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029ac0:	83 ec 0c             	sub    esp,0xc
c0029ac3:	68 b3 37 03 c0       	push   0xc00337b3
c0029ac8:	e8 b8 f9 fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c0029acd:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0029ad4:	b9 02 00 00 00       	mov    ecx,0x2
c0029ad9:	99                   	cdq    
c0029ada:	f7 f9                	idiv   ecx
c0029adc:	83 e8 32             	sub    eax,0x32
c0029adf:	89 04 24             	mov    DWORD PTR [esp],eax
c0029ae2:	e8 37 d0 fd ff       	call   c0006b1e <iso_readdir>
c0029ae7:	83 c4 10             	add    esp,0x10
c0029aea:	89 c6                	mov    esi,eax
c0029aec:	85 c0                	test   eax,eax
c0029aee:	75 37                	jne    c0029b27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029af0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029af5:	56                   	push   esi
c0029af6:	56                   	push   esi
c0029af7:	68 be 37 03 c0       	push   0xc00337be
c0029afc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029b02:	e8 df da fe ff       	call   c00175e6 <VgaText::puts(char const*)>
c0029b07:	83 c4 0c             	add    esp,0xc
c0029b0a:	68 10 01 00 00       	push   0x110
c0029b0f:	6a 00                	push   0x0
c0029b11:	57                   	push   edi
c0029b12:	e8 d9 69 fd ff       	call   c00004f0 <memset>
c0029b17:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0029b1d:	83 c4 10             	add    esp,0x10
c0029b20:	b8 01 00 00 00       	mov    eax,0x1
c0029b25:	eb 7d                	jmp    c0029ba4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029b27:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029b2d:	8d 68 08             	lea    ebp,[eax+0x8]
c0029b30:	83 ec 0c             	sub    esp,0xc
c0029b33:	55                   	push   ebp
c0029b34:	e8 37 6a fd ff       	call   c0000570 <strlen>
c0029b39:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029b41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029b45:	83 c4 10             	add    esp,0x10
c0029b48:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0029b4c:	75 0a                	jne    c0029b58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0029b4e:	b8 02 00 00 00       	mov    eax,0x2
c0029b53:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0029b56:	74 05                	je     c0029b5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029b58:	b8 01 00 00 00       	mov    eax,0x1
c0029b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029b61:	50                   	push   eax
c0029b62:	50                   	push   eax
c0029b63:	55                   	push   ebp
c0029b64:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029b68:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029b6c:	50                   	push   eax
c0029b6d:	e8 ce 6a fd ff       	call   c0000640 <strcpy>
c0029b72:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029b79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029b7b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029b81:	5a                   	pop    edx
c0029b82:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029b87:	59                   	pop    ecx
c0029b88:	68 d1 37 03 c0       	push   0xc00337d1
c0029b8d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029b93:	e8 4e da fe ff       	call   c00175e6 <VgaText::puts(char const*)>
c0029b98:	83 c4 10             	add    esp,0x10
c0029b9b:	31 c0                	xor    eax,eax
c0029b9d:	eb 05                	jmp    c0029ba4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029b9f:	b8 04 00 00 00       	mov    eax,0x4
c0029ba4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029baa:	5b                   	pop    ebx
c0029bab:	5e                   	pop    esi
c0029bac:	5f                   	pop    edi
c0029bad:	5d                   	pop    ebp
c0029bae:	c3                   	ret    

c0029baf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029baf:	57                   	push   edi
c0029bb0:	56                   	push   esi
c0029bb1:	53                   	push   ebx
c0029bb2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029bb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029bba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029bbe:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c0029bc4:	0f be cb             	movsx  ecx,bl
c0029bc7:	75 0b                	jne    c0029bd4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029bc9:	0f be 05 20 4a 03 c0 	movsx  eax,BYTE PTR ds:0xc0034a20
c0029bd0:	39 c8                	cmp    eax,ecx
c0029bd2:	74 47                	je     c0029c1b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029bd4:	83 ec 0c             	sub    esp,0xc
c0029bd7:	31 d2                	xor    edx,edx
c0029bd9:	68 a0 03 04 c0       	push   0xc00403a0
c0029bde:	6a 01                	push   0x1
c0029be0:	52                   	push   edx
c0029be1:	56                   	push   esi
c0029be2:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029be9:	e8 0a 2d ff ff       	call   c001c8f8 <LogicalDisk::read(unsigned long long, int, void*)>
c0029bee:	83 c4 20             	add    esp,0x20
c0029bf1:	85 c0                	test   eax,eax
c0029bf3:	75 0e                	jne    c0029c03 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029bf5:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029bfb:	88 1d 20 4a 03 c0    	mov    BYTE PTR ds:0xc0034a20,bl
c0029c01:	eb 18                	jmp    c0029c1b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029c03:	50                   	push   eax
c0029c04:	68 00 08 00 00       	push   0x800
c0029c09:	6a 00                	push   0x0
c0029c0b:	57                   	push   edi
c0029c0c:	e8 df 68 fd ff       	call   c00004f0 <memset>
c0029c11:	83 c4 10             	add    esp,0x10
c0029c14:	b8 01 00 00 00       	mov    eax,0x1
c0029c19:	eb 0e                	jmp    c0029c29 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029c1b:	be a0 03 04 c0       	mov    esi,0xc00403a0
c0029c20:	b9 00 08 00 00       	mov    ecx,0x800
c0029c25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029c27:	31 c0                	xor    eax,eax
c0029c29:	5b                   	pop    ebx
c0029c2a:	5e                   	pop    esi
c0029c2b:	5f                   	pop    edi
c0029c2c:	c3                   	ret    
c0029c2d:	90                   	nop

c0029c2e <ISO9660::tryMount(LogicalDisk*, int)>:
c0029c2e:	53                   	push   ebx
c0029c2f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029c35:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029c3f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029c46:	8d 58 41             	lea    ebx,[eax+0x41]
c0029c49:	0f be db             	movsx  ebx,bl
c0029c4c:	53                   	push   ebx
c0029c4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029c51:	50                   	push   eax
c0029c52:	6a 10                	push   0x10
c0029c54:	e8 56 ff ff ff       	call   c0029baf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029c59:	83 c4 10             	add    esp,0x10
c0029c5c:	31 d2                	xor    edx,edx
c0029c5e:	85 c0                	test   eax,eax
c0029c60:	75 33                	jne    c0029c95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c62:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029c67:	75 2c                	jne    c0029c95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c69:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029c6e:	75 25                	jne    c0029c95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c70:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029c75:	75 1e                	jne    c0029c95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c77:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029c7c:	75 17                	jne    c0029c95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c7e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029c83:	75 10                	jne    c0029c95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c85:	83 ec 0c             	sub    esp,0xc
c0029c88:	53                   	push   ebx
c0029c89:	e8 04 d1 fd ff       	call   c0006d92 <init_percd>
c0029c8e:	83 c4 10             	add    esp,0x10
c0029c91:	40                   	inc    eax
c0029c92:	0f 95 c2             	setne  dl
c0029c95:	88 d0                	mov    al,dl
c0029c97:	81 c4 08 08 00 00    	add    esp,0x808
c0029c9d:	5b                   	pop    ebx
c0029c9e:	c3                   	ret    
c0029c9f:	90                   	nop

c0029ca0 <ISO9660::ISO9660()>:
c0029ca0:	83 ec 0c             	sub    esp,0xc
c0029ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ca7:	83 ec 0c             	sub    esp,0xc
c0029caa:	50                   	push   eax
c0029cab:	e8 3a 06 ff ff       	call   c001a2ea <Filesystem::Filesystem()>
c0029cb0:	83 c4 10             	add    esp,0x10
c0029cb3:	ba ec 37 03 c0       	mov    edx,0xc00337ec
c0029cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cbc:	89 10                	mov    DWORD PTR [eax],edx
c0029cbe:	e8 e1 d1 fd ff       	call   c0006ea4 <fs_iso9660_init>
c0029cc3:	90                   	nop
c0029cc4:	83 c4 0c             	add    esp,0xc
c0029cc7:	c3                   	ret    

c0029cc8 <SoundCard::beginPlayback()>:
c0029cc8:	c7 44 24 04 50 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033850
c0029cd0:	e9 c9 67 ff ff       	jmp    c002049e <KePanic(char const*)>
c0029cd5:	90                   	nop

c0029cd6 <SoundCard::stopPlayback()>:
c0029cd6:	c7 44 24 04 50 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033850
c0029cde:	e9 bb 67 ff ff       	jmp    c002049e <KePanic(char const*)>
c0029ce3:	90                   	nop

c0029ce4 <SoundCard::SoundCard(char const*)>:
c0029ce4:	83 ec 1c             	sub    esp,0x1c
c0029ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ceb:	83 ec 08             	sub    esp,0x8
c0029cee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029cf2:	50                   	push   eax
c0029cf3:	e8 70 19 ff ff       	call   c001b668 <Device::Device(char const*)>
c0029cf8:	83 c4 10             	add    esp,0x10
c0029cfb:	ba 9c 38 03 c0       	mov    edx,0xc003389c
c0029d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d04:	89 10                	mov    DWORD PTR [eax],edx
c0029d06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d0a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d15:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029d1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d23:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d31:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029d3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d3f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029d49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029d51:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029d56:	7f 1a                	jg     c0029d72 <SoundCard::SoundCard(char const*)+0x8e>
c0029d58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029d60:	83 c2 54             	add    edx,0x54
c0029d63:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029d6b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029d70:	eb df                	jmp    c0029d51 <SoundCard::SoundCard(char const*)+0x6d>
c0029d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d76:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029d7d:	90                   	nop
c0029d7e:	83 c4 1c             	add    esp,0x1c
c0029d81:	c3                   	ret    

c0029d82 <SoundCard::~SoundCard()>:
c0029d82:	83 ec 0c             	sub    esp,0xc
c0029d85:	ba 9c 38 03 c0       	mov    edx,0xc003389c
c0029d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d8e:	89 10                	mov    DWORD PTR [eax],edx
c0029d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d94:	83 ec 0c             	sub    esp,0xc
c0029d97:	50                   	push   eax
c0029d98:	e8 6b 16 ff ff       	call   c001b408 <Device::~Device()>
c0029d9d:	83 c4 10             	add    esp,0x10
c0029da0:	90                   	nop
c0029da1:	83 c4 0c             	add    esp,0xc
c0029da4:	c3                   	ret    
c0029da5:	90                   	nop

c0029da6 <SoundCard::~SoundCard()>:
c0029da6:	83 ec 0c             	sub    esp,0xc
c0029da9:	83 ec 0c             	sub    esp,0xc
c0029dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029db0:	e8 cd ff ff ff       	call   c0029d82 <SoundCard::~SoundCard()>
c0029db5:	83 c4 10             	add    esp,0x10
c0029db8:	83 ec 08             	sub    esp,0x8
c0029dbb:	68 e8 01 00 00       	push   0x1e8
c0029dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dc4:	e8 8f f5 fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c0029dc9:	83 c4 10             	add    esp,0x10
c0029dcc:	83 c4 0c             	add    esp,0xc
c0029dcf:	c3                   	ret    

c0029dd0 <SoundCard::configureRates(int, int, int)>:
c0029dd0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029dd4:	31 c0                	xor    eax,eax
c0029dd6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029ddd:	75 20                	jne    c0029dff <SoundCard::configureRates(int, int, int)+0x2f>
c0029ddf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029de3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029de9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029ded:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029df7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029dfd:	b0 01                	mov    al,0x1
c0029dff:	c3                   	ret    

c0029e00 <SoundCard::getSamples16(int, short*)>:
c0029e00:	55                   	push   ebp
c0029e01:	57                   	push   edi
c0029e02:	31 ff                	xor    edi,edi
c0029e04:	56                   	push   esi
c0029e05:	53                   	push   ebx
c0029e06:	31 db                	xor    ebx,ebx
c0029e08:	83 ec 10             	sub    esp,0x10
c0029e0b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029e0f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029e13:	8d 04 36             	lea    eax,[esi+esi*1]
c0029e16:	50                   	push   eax
c0029e17:	6a 00                	push   0x0
c0029e19:	55                   	push   ebp
c0029e1a:	e8 d1 66 fd ff       	call   c00004f0 <memset>
c0029e1f:	83 c4 10             	add    esp,0x10
c0029e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029e26:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0029e2d:	85 c0                	test   eax,eax
c0029e2f:	74 1b                	je     c0029e4c <SoundCard::getSamples16(int, short*)+0x4c>
c0029e31:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029e35:	75 15                	jne    c0029e4c <SoundCard::getSamples16(int, short*)+0x4c>
c0029e37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029e3b:	55                   	push   ebp
c0029e3c:	56                   	push   esi
c0029e3d:	50                   	push   eax
c0029e3e:	e8 f1 02 00 00       	call   c002a134 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029e43:	83 c4 10             	add    esp,0x10
c0029e46:	39 c7                	cmp    edi,eax
c0029e48:	7d 02                	jge    c0029e4c <SoundCard::getSamples16(int, short*)+0x4c>
c0029e4a:	89 c7                	mov    edi,eax
c0029e4c:	43                   	inc    ebx
c0029e4d:	83 fb 20             	cmp    ebx,0x20
c0029e50:	75 d0                	jne    c0029e22 <SoundCard::getSamples16(int, short*)+0x22>
c0029e52:	83 c4 0c             	add    esp,0xc
c0029e55:	89 f8                	mov    eax,edi
c0029e57:	5b                   	pop    ebx
c0029e58:	5e                   	pop    esi
c0029e59:	5f                   	pop    edi
c0029e5a:	5d                   	pop    ebp
c0029e5b:	c3                   	ret    

c0029e5c <SoundCard::getSamples32(int, int*)>:
c0029e5c:	55                   	push   ebp
c0029e5d:	57                   	push   edi
c0029e5e:	31 ff                	xor    edi,edi
c0029e60:	56                   	push   esi
c0029e61:	31 f6                	xor    esi,esi
c0029e63:	53                   	push   ebx
c0029e64:	83 ec 10             	sub    esp,0x10
c0029e67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029e6b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029e6f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029e73:	c1 e0 02             	shl    eax,0x2
c0029e76:	50                   	push   eax
c0029e77:	6a 00                	push   0x0
c0029e79:	55                   	push   ebp
c0029e7a:	e8 71 66 fd ff       	call   c00004f0 <memset>
c0029e7f:	83 c4 10             	add    esp,0x10
c0029e82:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029e89:	85 c0                	test   eax,eax
c0029e8b:	74 1b                	je     c0029ea8 <SoundCard::getSamples32(int, int*)+0x4c>
c0029e8d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029e91:	75 15                	jne    c0029ea8 <SoundCard::getSamples32(int, int*)+0x4c>
c0029e93:	53                   	push   ebx
c0029e94:	55                   	push   ebp
c0029e95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029e99:	50                   	push   eax
c0029e9a:	e8 61 03 00 00       	call   c002a200 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029e9f:	83 c4 10             	add    esp,0x10
c0029ea2:	39 c6                	cmp    esi,eax
c0029ea4:	7d 02                	jge    c0029ea8 <SoundCard::getSamples32(int, int*)+0x4c>
c0029ea6:	89 c6                	mov    esi,eax
c0029ea8:	47                   	inc    edi
c0029ea9:	83 ff 20             	cmp    edi,0x20
c0029eac:	75 d4                	jne    c0029e82 <SoundCard::getSamples32(int, int*)+0x26>
c0029eae:	85 f6                	test   esi,esi
c0029eb0:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029eb7:	75 0f                	jne    c0029ec8 <SoundCard::getSamples32(int, int*)+0x6c>
c0029eb9:	85 c0                	test   eax,eax
c0029ebb:	74 1b                	je     c0029ed8 <SoundCard::getSamples32(int, int*)+0x7c>
c0029ebd:	83 ec 0c             	sub    esp,0xc
c0029ec0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029ec2:	53                   	push   ebx
c0029ec3:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029ec6:	eb 0d                	jmp    c0029ed5 <SoundCard::getSamples32(int, int*)+0x79>
c0029ec8:	85 c0                	test   eax,eax
c0029eca:	75 0c                	jne    c0029ed8 <SoundCard::getSamples32(int, int*)+0x7c>
c0029ecc:	83 ec 0c             	sub    esp,0xc
c0029ecf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029ed1:	53                   	push   ebx
c0029ed2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029ed5:	83 c4 10             	add    esp,0x10
c0029ed8:	83 c4 0c             	add    esp,0xc
c0029edb:	89 f0                	mov    eax,esi
c0029edd:	5b                   	pop    ebx
c0029ede:	5e                   	pop    esi
c0029edf:	5f                   	pop    edi
c0029ee0:	5d                   	pop    ebp
c0029ee1:	c3                   	ret    

c0029ee2 <SoundCard::addChannel(SoundPort*)>:
c0029ee2:	83 ec 0c             	sub    esp,0xc
c0029ee5:	31 c0                	xor    eax,eax
c0029ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029eeb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029ef3:	74 1b                	je     c0029f10 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029ef5:	40                   	inc    eax
c0029ef6:	83 f8 20             	cmp    eax,0x20
c0029ef9:	75 f0                	jne    c0029eeb <SoundCard::addChannel(SoundPort*)+0x9>
c0029efb:	83 ec 0c             	sub    esp,0xc
c0029efe:	68 75 38 03 c0       	push   0xc0033875
c0029f03:	e8 96 65 ff ff       	call   c002049e <KePanic(char const*)>
c0029f08:	83 c4 10             	add    esp,0x10
c0029f0b:	83 c8 ff             	or     eax,0xffffffff
c0029f0e:	eb 0b                	jmp    c0029f1b <SoundCard::addChannel(SoundPort*)+0x39>
c0029f10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029f14:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029f1b:	83 c4 0c             	add    esp,0xc
c0029f1e:	c3                   	ret    
c0029f1f:	90                   	nop

c0029f20 <SoundCard::removeChannel(int)>:
c0029f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029f24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029f28:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029f33:	c3                   	ret    

c0029f34 <SoundPort::SoundPort(int, int, int, int)>:
c0029f34:	83 ec 0c             	sub    esp,0xc
c0029f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f3b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f46:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029f52:	89 10                	mov    DWORD PTR [eax],edx
c0029f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029f5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029f67:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029f6a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029f6f:	75 13                	jne    c0029f84 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f75:	8b 00                	mov    eax,DWORD PTR [eax]
c0029f77:	05 a0 0f 00 00       	add    eax,0xfa0
c0029f7c:	01 c0                	add    eax,eax
c0029f7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029f82:	66 90                	xchg   ax,ax
c0029f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029f8c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f93:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f9e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029fa1:	c1 e0 02             	shl    eax,0x2
c0029fa4:	83 ec 0c             	sub    esp,0xc
c0029fa7:	50                   	push   eax
c0029fa8:	e8 49 c6 fe ff       	call   c00165f6 <malloc>
c0029fad:	83 c4 10             	add    esp,0x10
c0029fb0:	89 c2                	mov    edx,eax
c0029fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fb6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029fb9:	90                   	nop
c0029fba:	83 c4 0c             	add    esp,0xc
c0029fbd:	c3                   	ret    
c0029fbe:	66 90                	xchg   ax,ax

c0029fc0 <SoundPort::~SoundPort()>:
c0029fc0:	83 ec 0c             	sub    esp,0xc
c0029fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fc7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029fca:	85 c0                	test   eax,eax
c0029fcc:	74 1e                	je     c0029fec <SoundPort::~SoundPort()+0x2c>
c0029fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fd2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029fd5:	83 ec 0c             	sub    esp,0xc
c0029fd8:	50                   	push   eax
c0029fd9:	e8 28 c6 fe ff       	call   c0016606 <free>
c0029fde:	83 c4 10             	add    esp,0x10
c0029fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fe5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029fec:	90                   	nop
c0029fed:	83 c4 0c             	add    esp,0xc
c0029ff0:	c3                   	ret    
c0029ff1:	90                   	nop
c0029ff2:	66 90                	xchg   ax,ax

c0029ff4 <SoundPort::unpause()>:
c0029ff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ff8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029ffc:	c3                   	ret    
c0029ffd:	90                   	nop
c0029ffe:	66 90                	xchg   ax,ax

c002a000 <SoundPort::pause()>:
c002a000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a004:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a008:	c3                   	ret    
c002a009:	90                   	nop
c002a00a:	66 90                	xchg   ax,ax

c002a00c <SoundPort::getBufferUsed()>:
c002a00c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a010:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002a013:	c3                   	ret    

c002a014 <SoundPort::getBufferSize()>:
c002a014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a018:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a01b:	c3                   	ret    

c002a01c <SoundPort::buffer16(short*, int)>:
c002a01c:	55                   	push   ebp
c002a01d:	57                   	push   edi
c002a01e:	56                   	push   esi
c002a01f:	53                   	push   ebx
c002a020:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a024:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002a028:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002a02b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c002a02e:	74 68                	je     c002a098 <SoundPort::buffer16(short*, int)+0x7c>
c002a030:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a034:	85 c9                	test   ecx,ecx
c002a036:	7e 60                	jle    c002a098 <SoundPort::buffer16(short*, int)+0x7c>
c002a038:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c002a03c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a03f:	c1 e1 0f             	shl    ecx,0xf
c002a042:	8d 70 01             	lea    esi,[eax+0x1]
c002a045:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a048:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c002a04b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a04e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a051:	74 4d                	je     c002a0a0 <SoundPort::buffer16(short*, int)+0x84>
c002a053:	31 f6                	xor    esi,esi
c002a055:	eb 21                	jmp    c002a078 <SoundPort::buffer16(short*, int)+0x5c>
c002a057:	90                   	nop
c002a058:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c002a05d:	8d 79 01             	lea    edi,[ecx+0x1]
c002a060:	c1 e3 0f             	shl    ebx,0xf
c002a063:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c002a066:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c002a069:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c002a06c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a06f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a072:	74 1c                	je     c002a090 <SoundPort::buffer16(short*, int)+0x74>
c002a074:	89 c6                	mov    esi,eax
c002a076:	66 90                	xchg   ax,ax
c002a078:	8d 46 01             	lea    eax,[esi+0x1]
c002a07b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002a07f:	75 d7                	jne    c002a058 <SoundPort::buffer16(short*, int)+0x3c>
c002a081:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a085:	8d 76 00             	lea    esi,[esi+0x0]
c002a088:	5b                   	pop    ebx
c002a089:	5e                   	pop    esi
c002a08a:	5f                   	pop    edi
c002a08b:	5d                   	pop    ebp
c002a08c:	c3                   	ret    
c002a08d:	8d 76 00             	lea    esi,[esi+0x0]
c002a090:	5b                   	pop    ebx
c002a091:	8d 46 02             	lea    eax,[esi+0x2]
c002a094:	5e                   	pop    esi
c002a095:	5f                   	pop    edi
c002a096:	5d                   	pop    ebp
c002a097:	c3                   	ret    
c002a098:	5b                   	pop    ebx
c002a099:	31 c0                	xor    eax,eax
c002a09b:	5e                   	pop    esi
c002a09c:	5f                   	pop    edi
c002a09d:	5d                   	pop    ebp
c002a09e:	c3                   	ret    
c002a09f:	90                   	nop
c002a0a0:	b8 01 00 00 00       	mov    eax,0x1
c002a0a5:	eb e1                	jmp    c002a088 <SoundPort::buffer16(short*, int)+0x6c>
c002a0a7:	90                   	nop

c002a0a8 <SoundPort::buffer32(int*, int)>:
c002a0a8:	55                   	push   ebp
c002a0a9:	57                   	push   edi
c002a0aa:	56                   	push   esi
c002a0ab:	53                   	push   ebx
c002a0ac:	83 ec 04             	sub    esp,0x4
c002a0af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a0b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0b7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a0ba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a0be:	89 04 24             	mov    DWORD PTR [esp],eax
c002a0c1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a0c4:	74 5a                	je     c002a120 <SoundPort::buffer32(int*, int)+0x78>
c002a0c6:	85 c0                	test   eax,eax
c002a0c8:	7e 56                	jle    c002a120 <SoundPort::buffer32(int*, int)+0x78>
c002a0ca:	8d 71 01             	lea    esi,[ecx+0x1]
c002a0cd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a0d0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a0d3:	8b 37                	mov    esi,DWORD PTR [edi]
c002a0d5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c002a0d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a0db:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a0de:	74 4c                	je     c002a12c <SoundPort::buffer32(int*, int)+0x84>
c002a0e0:	31 f6                	xor    esi,esi
c002a0e2:	eb 1c                	jmp    c002a100 <SoundPort::buffer32(int*, int)+0x58>
c002a0e4:	8d 69 01             	lea    ebp,[ecx+0x1]
c002a0e7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c002a0ea:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c002a0ed:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002a0f0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c002a0f4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a0f7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a0fa:	74 18                	je     c002a114 <SoundPort::buffer32(int*, int)+0x6c>
c002a0fc:	89 de                	mov    esi,ebx
c002a0fe:	66 90                	xchg   ax,ax
c002a100:	8d 5e 01             	lea    ebx,[esi+0x1]
c002a103:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c002a106:	75 dc                	jne    c002a0e4 <SoundPort::buffer32(int*, int)+0x3c>
c002a108:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a10b:	90                   	nop
c002a10c:	83 c4 04             	add    esp,0x4
c002a10f:	5b                   	pop    ebx
c002a110:	5e                   	pop    esi
c002a111:	5f                   	pop    edi
c002a112:	5d                   	pop    ebp
c002a113:	c3                   	ret    
c002a114:	83 c4 04             	add    esp,0x4
c002a117:	8d 46 02             	lea    eax,[esi+0x2]
c002a11a:	5b                   	pop    ebx
c002a11b:	5e                   	pop    esi
c002a11c:	5f                   	pop    edi
c002a11d:	5d                   	pop    ebp
c002a11e:	c3                   	ret    
c002a11f:	90                   	nop
c002a120:	83 c4 04             	add    esp,0x4
c002a123:	31 c0                	xor    eax,eax
c002a125:	5b                   	pop    ebx
c002a126:	5e                   	pop    esi
c002a127:	5f                   	pop    edi
c002a128:	5d                   	pop    ebp
c002a129:	c3                   	ret    
c002a12a:	66 90                	xchg   ax,ax
c002a12c:	b8 01 00 00 00       	mov    eax,0x1
c002a131:	eb d9                	jmp    c002a10c <SoundPort::buffer32(int*, int)+0x64>
c002a133:	90                   	nop

c002a134 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c002a134:	57                   	push   edi
c002a135:	56                   	push   esi
c002a136:	53                   	push   ebx
c002a137:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002a13b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002a13f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c002a145:	39 03                	cmp    DWORD PTR [ebx],eax
c002a147:	74 13                	je     c002a15c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c002a149:	83 ec 0c             	sub    esp,0xc
c002a14c:	68 c8 38 03 c0       	push   0xc00338c8
c002a151:	e8 48 63 ff ff       	call   c002049e <KePanic(char const*)>
c002a156:	83 c4 10             	add    esp,0x10
c002a159:	8d 76 00             	lea    esi,[esi+0x0]
c002a15c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c002a162:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a165:	74 11                	je     c002a178 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c002a167:	83 ec 0c             	sub    esp,0xc
c002a16a:	68 07 39 03 c0       	push   0xc0033907
c002a16f:	e8 2a 63 ff ff       	call   c002049e <KePanic(char const*)>
c002a174:	83 c4 10             	add    esp,0x10
c002a177:	90                   	nop
c002a178:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c002a17e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a181:	74 11                	je     c002a194 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c002a183:	83 ec 0c             	sub    esp,0xc
c002a186:	68 07 39 03 c0       	push   0xc0033907
c002a18b:	e8 0e 63 ff ff       	call   c002049e <KePanic(char const*)>
c002a190:	83 c4 10             	add    esp,0x10
c002a193:	90                   	nop
c002a194:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c002a197:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c002a19b:	7e 07                	jle    c002a1a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c002a19d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002a1a1:	8d 76 00             	lea    esi,[esi+0x0]
c002a1a4:	85 f6                	test   esi,esi
c002a1a6:	7e 2c                	jle    c002a1d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c002a1a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a1ac:	8d 3c 36             	lea    edi,[esi+esi*1]
c002a1af:	31 c9                	xor    ecx,ecx
c002a1b1:	01 d7                	add    edi,edx
c002a1b3:	90                   	nop
c002a1b4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c002a1b7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c002a1ba:	85 c0                	test   eax,eax
c002a1bc:	79 06                	jns    c002a1c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c002a1be:	05 ff 7f 00 00       	add    eax,0x7fff
c002a1c3:	90                   	nop
c002a1c4:	c1 f8 0f             	sar    eax,0xf
c002a1c7:	83 c1 04             	add    ecx,0x4
c002a1ca:	66 01 02             	add    WORD PTR [edx],ax
c002a1cd:	83 c2 02             	add    edx,0x2
c002a1d0:	39 d7                	cmp    edi,edx
c002a1d2:	75 e0                	jne    c002a1b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c002a1d4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a1d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a1da:	83 ec 04             	sub    esp,0x4
c002a1dd:	29 f0                	sub    eax,esi
c002a1df:	c1 e0 02             	shl    eax,0x2
c002a1e2:	50                   	push   eax
c002a1e3:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a1e6:	50                   	push   eax
c002a1e7:	52                   	push   edx
c002a1e8:	e8 e3 61 fd ff       	call   c00003d0 <memmove>
c002a1ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a1f0:	83 c4 10             	add    esp,0x10
c002a1f3:	29 f0                	sub    eax,esi
c002a1f5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a1f8:	89 f0                	mov    eax,esi
c002a1fa:	5b                   	pop    ebx
c002a1fb:	5e                   	pop    esi
c002a1fc:	5f                   	pop    edi
c002a1fd:	c3                   	ret    
c002a1fe:	66 90                	xchg   ax,ax

c002a200 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a200:	57                   	push   edi
c002a201:	56                   	push   esi
c002a202:	53                   	push   ebx
c002a203:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a207:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a20b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002a20f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c002a215:	39 06                	cmp    DWORD PTR [esi],eax
c002a217:	74 13                	je     c002a22c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c002a219:	83 ec 0c             	sub    esp,0xc
c002a21c:	68 e8 38 03 c0       	push   0xc00338e8
c002a221:	e8 78 62 ff ff       	call   c002049e <KePanic(char const*)>
c002a226:	83 c4 10             	add    esp,0x10
c002a229:	8d 76 00             	lea    esi,[esi+0x0]
c002a22c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c002a232:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c002a235:	74 11                	je     c002a248 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c002a237:	83 ec 0c             	sub    esp,0xc
c002a23a:	68 23 39 03 c0       	push   0xc0033923
c002a23f:	e8 5a 62 ff ff       	call   c002049e <KePanic(char const*)>
c002a244:	83 c4 10             	add    esp,0x10
c002a247:	90                   	nop
c002a248:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c002a24e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c002a251:	74 11                	je     c002a264 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c002a253:	83 ec 0c             	sub    esp,0xc
c002a256:	68 23 39 03 c0       	push   0xc0033923
c002a25b:	e8 3e 62 ff ff       	call   c002049e <KePanic(char const*)>
c002a260:	83 c4 10             	add    esp,0x10
c002a263:	90                   	nop
c002a264:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c002a267:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002a26b:	7e 07                	jle    c002a274 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002a26d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a271:	8d 76 00             	lea    esi,[esi+0x0]
c002a274:	85 ff                	test   edi,edi
c002a276:	7e 1c                	jle    c002a294 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c002a278:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a27f:	31 c0                	xor    eax,eax
c002a281:	8d 76 00             	lea    esi,[esi+0x0]
c002a284:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a287:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a28a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002a28d:	83 c0 04             	add    eax,0x4
c002a290:	39 c1                	cmp    ecx,eax
c002a292:	75 f0                	jne    c002a284 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c002a294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a297:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002a29a:	83 ec 04             	sub    esp,0x4
c002a29d:	29 f8                	sub    eax,edi
c002a29f:	c1 e0 02             	shl    eax,0x2
c002a2a2:	50                   	push   eax
c002a2a3:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a2a6:	50                   	push   eax
c002a2a7:	52                   	push   edx
c002a2a8:	e8 23 61 fd ff       	call   c00003d0 <memmove>
c002a2ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002a2b0:	83 c4 10             	add    esp,0x10
c002a2b3:	29 f8                	sub    eax,edi
c002a2b5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c002a2b8:	89 f8                	mov    eax,edi
c002a2ba:	5b                   	pop    ebx
c002a2bb:	5e                   	pop    esi
c002a2bc:	5f                   	pop    edi
c002a2bd:	c3                   	ret    

c002a2be <PCI::open(int, int, void*)>:
c002a2be:	83 ec 18             	sub    esp,0x18
c002a2c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a2c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a2c9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a2cf:	8b 10                	mov    edx,DWORD PTR [eax]
c002a2d1:	50                   	push   eax
c002a2d2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a2d5:	31 c0                	xor    eax,eax
c002a2d7:	83 c4 1c             	add    esp,0x1c
c002a2da:	c3                   	ret    
c002a2db:	90                   	nop

c002a2dc <PCI::close(int, int, void*)>:
c002a2dc:	31 c0                	xor    eax,eax
c002a2de:	c3                   	ret    
c002a2df:	90                   	nop

c002a2e0 <PCI::PCI()>:
c002a2e0:	83 ec 0c             	sub    esp,0xc
c002a2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2e7:	83 ec 08             	sub    esp,0x8
c002a2ea:	68 3f 39 03 c0       	push   0xc003393f
c002a2ef:	50                   	push   eax
c002a2f0:	e8 73 0b ff ff       	call   c001ae68 <Bus::Bus(char const*)>
c002a2f5:	83 c4 10             	add    esp,0x10
c002a2f8:	ba e8 39 03 c0       	mov    edx,0xc00339e8
c002a2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a301:	89 10                	mov    DWORD PTR [eax],edx
c002a303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a307:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a315:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a31e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a324:	0f b6 d0             	movzx  edx,al
c002a327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a32b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a336:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a33c:	0f b6 d0             	movzx  edx,al
c002a33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a343:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a34c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a352:	8d 50 01             	lea    edx,[eax+0x1]
c002a355:	88 d1                	mov    cl,dl
c002a357:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a35b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a361:	0f b6 d0             	movzx  edx,al
c002a364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a368:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a36c:	83 c9 c0             	or     ecx,0xffffffc0
c002a36f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a373:	90                   	nop
c002a374:	83 c4 0c             	add    esp,0xc
c002a377:	c3                   	ret    

c002a378 <PCI::readBAR8(unsigned int, int)>:
c002a378:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a37c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a380:	f6 c2 01             	test   dl,0x1
c002a383:	74 07                	je     c002a38c <PCI::readBAR8(unsigned int, int)+0x14>
c002a385:	83 e2 fc             	and    edx,0xfffffffc
c002a388:	01 c2                	add    edx,eax
c002a38a:	ec                   	in     al,dx
c002a38b:	c3                   	ret    
c002a38c:	83 e2 f0             	and    edx,0xfffffff0
c002a38f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a392:	c3                   	ret    
c002a393:	90                   	nop

c002a394 <PCI::readBAR16(unsigned int, int)>:
c002a394:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a398:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a39c:	f6 c2 01             	test   dl,0x1
c002a39f:	74 08                	je     c002a3a9 <PCI::readBAR16(unsigned int, int)+0x15>
c002a3a1:	83 e2 fc             	and    edx,0xfffffffc
c002a3a4:	01 c2                	add    edx,eax
c002a3a6:	66 ed                	in     ax,dx
c002a3a8:	c3                   	ret    
c002a3a9:	83 e2 f0             	and    edx,0xfffffff0
c002a3ac:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a3b0:	c3                   	ret    
c002a3b1:	90                   	nop

c002a3b2 <PCI::readBAR32(unsigned int, int)>:
c002a3b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a3b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a3ba:	f6 c2 01             	test   dl,0x1
c002a3bd:	74 07                	je     c002a3c6 <PCI::readBAR32(unsigned int, int)+0x14>
c002a3bf:	83 e2 fc             	and    edx,0xfffffffc
c002a3c2:	01 c2                	add    edx,eax
c002a3c4:	ed                   	in     eax,dx
c002a3c5:	c3                   	ret    
c002a3c6:	83 e2 f0             	and    edx,0xfffffff0
c002a3c9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a3cc:	c3                   	ret    
c002a3cd:	90                   	nop

c002a3ce <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a3ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a3d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a3d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a3da:	f6 c2 01             	test   dl,0x1
c002a3dd:	74 07                	je     c002a3e6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a3df:	83 e2 fc             	and    edx,0xfffffffc
c002a3e2:	01 ca                	add    edx,ecx
c002a3e4:	ee                   	out    dx,al
c002a3e5:	c3                   	ret    
c002a3e6:	83 e2 f0             	and    edx,0xfffffff0
c002a3e9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a3ec:	c3                   	ret    
c002a3ed:	90                   	nop

c002a3ee <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a3ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a3f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a3f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a3fa:	f6 c2 01             	test   dl,0x1
c002a3fd:	74 08                	je     c002a407 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a3ff:	83 e2 fc             	and    edx,0xfffffffc
c002a402:	01 ca                	add    edx,ecx
c002a404:	66 ef                	out    dx,ax
c002a406:	c3                   	ret    
c002a407:	83 e2 f0             	and    edx,0xfffffff0
c002a40a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a40e:	c3                   	ret    
c002a40f:	90                   	nop

c002a410 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a410:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a418:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a41c:	f6 c2 01             	test   dl,0x1
c002a41f:	74 07                	je     c002a428 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a421:	83 e2 fc             	and    edx,0xfffffffc
c002a424:	01 ca                	add    edx,ecx
c002a426:	ef                   	out    dx,eax
c002a427:	c3                   	ret    
c002a428:	83 e2 f0             	and    edx,0xfffffff0
c002a42b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a42e:	c3                   	ret    
c002a42f:	90                   	nop

c002a430 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a430:	55                   	push   ebp
c002a431:	57                   	push   edi
c002a432:	56                   	push   esi
c002a433:	53                   	push   ebx
c002a434:	83 ec 0c             	sub    esp,0xc
c002a437:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a43c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a440:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a444:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a448:	83 fe 07             	cmp    esi,0x7
c002a44b:	76 10                	jbe    c002a45d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a44d:	83 ec 0c             	sub    esp,0xc
c002a450:	68 47 39 03 c0       	push   0xc0033947
c002a455:	e8 44 60 ff ff       	call   c002049e <KePanic(char const*)>
c002a45a:	83 c4 10             	add    esp,0x10
c002a45d:	0f b6 db             	movzx  ebx,bl
c002a460:	83 fb 0f             	cmp    ebx,0xf
c002a463:	76 10                	jbe    c002a475 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a465:	83 ec 0c             	sub    esp,0xc
c002a468:	68 77 39 03 c0       	push   0xc0033977
c002a46d:	e8 2c 60 ff ff       	call   c002049e <KePanic(char const*)>
c002a472:	83 c4 10             	add    esp,0x10
c002a475:	8d 04 36             	lea    eax,[esi+esi*1]
c002a478:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a47d:	83 c8 f0             	or     eax,0xfffffff0
c002a480:	ee                   	out    dx,al
c002a481:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a486:	89 e8                	mov    eax,ebp
c002a488:	ee                   	out    dx,al
c002a489:	83 c4 0c             	add    esp,0xc
c002a48c:	89 d8                	mov    eax,ebx
c002a48e:	89 f9                	mov    ecx,edi
c002a490:	c1 e0 08             	shl    eax,0x8
c002a493:	0f b6 d9             	movzx  ebx,cl
c002a496:	83 e3 fc             	and    ebx,0xfffffffc
c002a499:	09 d8                	or     eax,ebx
c002a49b:	5b                   	pop    ebx
c002a49c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a4a1:	5e                   	pop    esi
c002a4a2:	5f                   	pop    edi
c002a4a3:	5d                   	pop    ebp
c002a4a4:	c3                   	ret    
c002a4a5:	90                   	nop

c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a4a6:	57                   	push   edi
c002a4a7:	56                   	push   esi
c002a4a8:	53                   	push   ebx
c002a4a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a4ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a4b1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a4b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a4bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a4bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a4c3:	83 ff 01             	cmp    edi,0x1
c002a4c6:	75 3f                	jne    c002a507 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a4c8:	89 de                	mov    esi,ebx
c002a4ca:	0f b6 c0             	movzx  eax,al
c002a4cd:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a4d3:	c1 e0 10             	shl    eax,0x10
c002a4d6:	0f b6 c9             	movzx  ecx,cl
c002a4d9:	09 f0                	or     eax,esi
c002a4db:	c1 e1 08             	shl    ecx,0x8
c002a4de:	0f b6 d2             	movzx  edx,dl
c002a4e1:	09 c8                	or     eax,ecx
c002a4e3:	c1 e2 0b             	shl    edx,0xb
c002a4e6:	09 d0                	or     eax,edx
c002a4e8:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a4ed:	0d 00 00 00 80       	or     eax,0x80000000
c002a4f2:	ef                   	out    dx,eax
c002a4f3:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a4f8:	ed                   	in     eax,dx
c002a4f9:	83 e3 02             	and    ebx,0x2
c002a4fc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a503:	d3 e8                	shr    eax,cl
c002a505:	eb 44                	jmp    c002a54b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a507:	83 ff 02             	cmp    edi,0x2
c002a50a:	75 2d                	jne    c002a539 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a50c:	83 ec 0c             	sub    esp,0xc
c002a50f:	0f b6 c9             	movzx  ecx,cl
c002a512:	0f b6 d2             	movzx  edx,dl
c002a515:	0f b6 fb             	movzx  edi,bl
c002a518:	0f b6 c0             	movzx  eax,al
c002a51b:	57                   	push   edi
c002a51c:	51                   	push   ecx
c002a51d:	52                   	push   edx
c002a51e:	50                   	push   eax
c002a51f:	56                   	push   esi
c002a520:	e8 0b ff ff ff       	call   c002a430 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a525:	89 c2                	mov    edx,eax
c002a527:	ed                   	in     eax,dx
c002a528:	83 e3 02             	and    ebx,0x2
c002a52b:	83 c4 20             	add    esp,0x20
c002a52e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a535:	d3 e8                	shr    eax,cl
c002a537:	eb 12                	jmp    c002a54b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a539:	83 ec 0c             	sub    esp,0xc
c002a53c:	68 a7 39 03 c0       	push   0xc00339a7
c002a541:	e8 58 5f ff ff       	call   c002049e <KePanic(char const*)>
c002a546:	83 c4 10             	add    esp,0x10
c002a549:	31 c0                	xor    eax,eax
c002a54b:	5b                   	pop    ebx
c002a54c:	5e                   	pop    esi
c002a54d:	5f                   	pop    edi
c002a54e:	c3                   	ret    
c002a54f:	90                   	nop

c002a550 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a550:	83 ec 18             	sub    esp,0x18
c002a553:	6a 00                	push   0x0
c002a555:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a55a:	50                   	push   eax
c002a55b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a560:	50                   	push   eax
c002a561:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a566:	50                   	push   eax
c002a567:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a56b:	e8 36 ff ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a570:	83 c4 2c             	add    esp,0x2c
c002a573:	c3                   	ret    

c002a574 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a574:	83 ec 18             	sub    esp,0x18
c002a577:	6a 0e                	push   0xe
c002a579:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a57e:	50                   	push   eax
c002a57f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a584:	50                   	push   eax
c002a585:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a58a:	50                   	push   eax
c002a58b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a58f:	e8 12 ff ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a594:	83 c4 2c             	add    esp,0x2c
c002a597:	0f b6 c0             	movzx  eax,al
c002a59a:	c3                   	ret    
c002a59b:	90                   	nop

c002a59c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a59c:	55                   	push   ebp
c002a59d:	57                   	push   edi
c002a59e:	56                   	push   esi
c002a59f:	53                   	push   ebx
c002a5a0:	83 ec 18             	sub    esp,0x18
c002a5a3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a5a8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a5ad:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a5b2:	6a 0a                	push   0xa
c002a5b4:	56                   	push   esi
c002a5b5:	55                   	push   ebp
c002a5b6:	57                   	push   edi
c002a5b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a5bb:	e8 e6 fe ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a5c0:	83 c4 14             	add    esp,0x14
c002a5c3:	89 c3                	mov    ebx,eax
c002a5c5:	6a 0a                	push   0xa
c002a5c7:	0f b6 db             	movzx  ebx,bl
c002a5ca:	56                   	push   esi
c002a5cb:	55                   	push   ebp
c002a5cc:	57                   	push   edi
c002a5cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a5d1:	e8 d0 fe ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a5d6:	83 c4 2c             	add    esp,0x2c
c002a5d9:	25 00 ff 00 00       	and    eax,0xff00
c002a5de:	09 d8                	or     eax,ebx
c002a5e0:	5b                   	pop    ebx
c002a5e1:	5e                   	pop    esi
c002a5e2:	5f                   	pop    edi
c002a5e3:	5d                   	pop    ebp
c002a5e4:	c3                   	ret    
c002a5e5:	90                   	nop

c002a5e6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a5e6:	83 ec 18             	sub    esp,0x18
c002a5e9:	6a 08                	push   0x8
c002a5eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5f0:	50                   	push   eax
c002a5f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5f6:	50                   	push   eax
c002a5f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5fc:	50                   	push   eax
c002a5fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a601:	e8 a0 fe ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a606:	83 c4 2c             	add    esp,0x2c
c002a609:	0f b6 c4             	movzx  eax,ah
c002a60c:	c3                   	ret    
c002a60d:	90                   	nop

c002a60e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a60e:	83 ec 18             	sub    esp,0x18
c002a611:	6a 08                	push   0x8
c002a613:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a618:	50                   	push   eax
c002a619:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a61e:	50                   	push   eax
c002a61f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a624:	50                   	push   eax
c002a625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a629:	e8 78 fe ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a62e:	83 c4 2c             	add    esp,0x2c
c002a631:	c3                   	ret    

c002a632 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a632:	83 ec 18             	sub    esp,0x18
c002a635:	6a 3c                	push   0x3c
c002a637:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a63c:	50                   	push   eax
c002a63d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a642:	50                   	push   eax
c002a643:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a648:	50                   	push   eax
c002a649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a64d:	e8 54 fe ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a652:	83 c4 2c             	add    esp,0x2c
c002a655:	c3                   	ret    

c002a656 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a656:	83 ec 18             	sub    esp,0x18
c002a659:	6a 18                	push   0x18
c002a65b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a660:	50                   	push   eax
c002a661:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a666:	50                   	push   eax
c002a667:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a66c:	50                   	push   eax
c002a66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a671:	e8 30 fe ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a676:	83 c4 2c             	add    esp,0x2c
c002a679:	0f b6 c4             	movzx  eax,ah
c002a67c:	c3                   	ret    
c002a67d:	90                   	nop

c002a67e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a67e:	55                   	push   ebp
c002a67f:	57                   	push   edi
c002a680:	56                   	push   esi
c002a681:	53                   	push   ebx
c002a682:	83 ec 28             	sub    esp,0x28
c002a685:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a689:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a68e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a693:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a698:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a69f:	8d 43 12             	lea    eax,[ebx+0x12]
c002a6a2:	83 c3 10             	add    ebx,0x10
c002a6a5:	0f b6 c0             	movzx  eax,al
c002a6a8:	0f b6 db             	movzx  ebx,bl
c002a6ab:	50                   	push   eax
c002a6ac:	51                   	push   ecx
c002a6ad:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a6b1:	57                   	push   edi
c002a6b2:	55                   	push   ebp
c002a6b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a6b7:	e8 ea fd ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6bc:	83 c4 14             	add    esp,0x14
c002a6bf:	89 c6                	mov    esi,eax
c002a6c1:	53                   	push   ebx
c002a6c2:	c1 e6 10             	shl    esi,0x10
c002a6c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a6c9:	51                   	push   ecx
c002a6ca:	57                   	push   edi
c002a6cb:	55                   	push   ebp
c002a6cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a6d0:	e8 d1 fd ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6d5:	83 c4 3c             	add    esp,0x3c
c002a6d8:	0f b7 c0             	movzx  eax,ax
c002a6db:	5b                   	pop    ebx
c002a6dc:	09 f0                	or     eax,esi
c002a6de:	5e                   	pop    esi
c002a6df:	5f                   	pop    edi
c002a6e0:	5d                   	pop    ebp
c002a6e1:	c3                   	ret    

c002a6e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a6e2:	55                   	push   ebp
c002a6e3:	57                   	push   edi
c002a6e4:	56                   	push   esi
c002a6e5:	53                   	push   ebx
c002a6e6:	83 ec 0c             	sub    esp,0xc
c002a6e9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a6ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a6f1:	89 f5                	mov    ebp,esi
c002a6f3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a6f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a6fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a701:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a705:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a709:	83 f9 01             	cmp    ecx,0x1
c002a70c:	75 5d                	jne    c002a76b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a70e:	0f b6 c8             	movzx  ecx,al
c002a711:	0f b6 d2             	movzx  edx,dl
c002a714:	c1 e1 10             	shl    ecx,0x10
c002a717:	c1 e2 0b             	shl    edx,0xb
c002a71a:	89 f0                	mov    eax,esi
c002a71c:	25 fc 00 00 00       	and    eax,0xfc
c002a721:	09 c1                	or     ecx,eax
c002a723:	89 e8                	mov    eax,ebp
c002a725:	0f b6 c0             	movzx  eax,al
c002a728:	c1 e0 08             	shl    eax,0x8
c002a72b:	09 c1                	or     ecx,eax
c002a72d:	09 d1                	or     ecx,edx
c002a72f:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a734:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a73a:	89 c8                	mov    eax,ecx
c002a73c:	ef                   	out    dx,eax
c002a73d:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a742:	ed                   	in     eax,dx
c002a743:	0f b7 db             	movzx  ebx,bx
c002a746:	83 e6 02             	and    esi,0x2
c002a749:	74 0a                	je     c002a755 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a74b:	0f b7 d0             	movzx  edx,ax
c002a74e:	c1 e3 10             	shl    ebx,0x10
c002a751:	09 d3                	or     ebx,edx
c002a753:	eb 05                	jmp    c002a75a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a755:	66 31 c0             	xor    ax,ax
c002a758:	09 c3                	or     ebx,eax
c002a75a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a75f:	89 c8                	mov    eax,ecx
c002a761:	ef                   	out    dx,eax
c002a762:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a767:	89 d8                	mov    eax,ebx
c002a769:	eb 41                	jmp    c002a7ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a76b:	83 f9 02             	cmp    ecx,0x2
c002a76e:	75 45                	jne    c002a7b5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a770:	83 ec 0c             	sub    esp,0xc
c002a773:	0f b6 d2             	movzx  edx,dl
c002a776:	89 f1                	mov    ecx,esi
c002a778:	0f b6 c0             	movzx  eax,al
c002a77b:	0f b6 f1             	movzx  esi,cl
c002a77e:	89 e9                	mov    ecx,ebp
c002a780:	56                   	push   esi
c002a781:	0f b6 c9             	movzx  ecx,cl
c002a784:	51                   	push   ecx
c002a785:	52                   	push   edx
c002a786:	50                   	push   eax
c002a787:	57                   	push   edi
c002a788:	e8 a3 fc ff ff       	call   c002a430 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a78d:	89 c2                	mov    edx,eax
c002a78f:	ed                   	in     eax,dx
c002a790:	83 c4 20             	add    esp,0x20
c002a793:	0f b7 db             	movzx  ebx,bx
c002a796:	f6 c2 02             	test   dl,0x2
c002a799:	74 0c                	je     c002a7a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a79b:	0f b7 c8             	movzx  ecx,ax
c002a79e:	89 d8                	mov    eax,ebx
c002a7a0:	c1 e0 10             	shl    eax,0x10
c002a7a3:	09 c8                	or     eax,ecx
c002a7a5:	eb 05                	jmp    c002a7ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a7a7:	66 31 c0             	xor    ax,ax
c002a7aa:	09 d8                	or     eax,ebx
c002a7ac:	ef                   	out    dx,eax
c002a7ad:	83 c4 0c             	add    esp,0xc
c002a7b0:	5b                   	pop    ebx
c002a7b1:	5e                   	pop    esi
c002a7b2:	5f                   	pop    edi
c002a7b3:	5d                   	pop    ebp
c002a7b4:	c3                   	ret    
c002a7b5:	c7 44 24 20 a7 39 03 c0 	mov    DWORD PTR [esp+0x20],0xc00339a7
c002a7bd:	83 c4 0c             	add    esp,0xc
c002a7c0:	5b                   	pop    ebx
c002a7c1:	5e                   	pop    esi
c002a7c2:	5f                   	pop    edi
c002a7c3:	5d                   	pop    ebp
c002a7c4:	e9 d5 5c ff ff       	jmp    c002049e <KePanic(char const*)>
c002a7c9:	90                   	nop

c002a7ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a7ca:	55                   	push   ebp
c002a7cb:	57                   	push   edi
c002a7cc:	56                   	push   esi
c002a7cd:	53                   	push   ebx
c002a7ce:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a7d4:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a7db:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a7e2:	0f 85 bd 00 00 00    	jne    c002a8a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a7e8:	83 ec 0c             	sub    esp,0xc
c002a7eb:	68 14 01 00 00       	push   0x114
c002a7f0:	e8 01 be fe ff       	call   c00165f6 <malloc>
c002a7f5:	83 c4 0c             	add    esp,0xc
c002a7f8:	89 c3                	mov    ebx,eax
c002a7fa:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a800:	68 ad 39 03 c0       	push   0xc00339ad
c002a805:	50                   	push   eax
c002a806:	e8 81 fe fe ff       	call   c001a68c <File::File(char const*, Process*)>
c002a80b:	83 c4 10             	add    esp,0x10
c002a80e:	85 db                	test   ebx,ebx
c002a810:	0f 84 67 02 00 00    	je     c002aa7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a816:	56                   	push   esi
c002a817:	56                   	push   esi
c002a818:	6a 01                	push   0x1
c002a81a:	53                   	push   ebx
c002a81b:	e8 8a fe fe ff       	call   c001a6aa <File::open(FileOpenMode)>
c002a820:	83 c4 10             	add    esp,0x10
c002a823:	85 c0                	test   eax,eax
c002a825:	0f 85 52 02 00 00    	jne    c002aa7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a82b:	52                   	push   edx
c002a82c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a830:	50                   	push   eax
c002a831:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a835:	50                   	push   eax
c002a836:	53                   	push   ebx
c002a837:	e8 70 01 ff ff       	call   c001a9ac <File::stat(unsigned long long*, bool*)>
c002a83c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a840:	40                   	inc    eax
c002a841:	89 04 24             	mov    DWORD PTR [esp],eax
c002a844:	e8 ad bd fe ff       	call   c00165f6 <malloc>
c002a849:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a84d:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a852:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a856:	59                   	pop    ecx
c002a857:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a859:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a85d:	51                   	push   ecx
c002a85e:	50                   	push   eax
c002a85f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a863:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a867:	53                   	push   ebx
c002a868:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a86b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a86f:	83 c4 20             	add    esp,0x20
c002a872:	89 c8                	mov    eax,ecx
c002a874:	99                   	cdq    
c002a875:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a879:	0f 85 fe 01 00 00    	jne    c002aa7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a87f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a883:	0f 85 f4 01 00 00    	jne    c002aa7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a889:	83 ec 0c             	sub    esp,0xc
c002a88c:	53                   	push   ebx
c002a88d:	e8 76 fe fe ff       	call   c001a708 <File::close()>
c002a892:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a896:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a89d:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a8a2:	83 c4 10             	add    esp,0x10
c002a8a5:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a8aa:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a8b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a8b4:	31 f6                	xor    esi,esi
c002a8b6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a8be:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a8c5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a8ca:	31 c9                	xor    ecx,ecx
c002a8cc:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a8d4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a8d9:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a8e5:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a8ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a8f1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a8f5:	0f 8e 82 01 00 00    	jle    c002aa7d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a8fb:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a8fe:	d4 40                	aam    0x40
c002a900:	d5 39                	aad    0x39
c002a902:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a906:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a90a:	d4 40                	aam    0x40
c002a90c:	d5 39                	aad    0x39
c002a90e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a912:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a916:	d4 40                	aam    0x40
c002a918:	d5 39                	aad    0x39
c002a91a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a91e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a922:	d4 40                	aam    0x40
c002a924:	d5 39                	aad    0x39
c002a926:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a92a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a92e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a932:	3c 56                	cmp    al,0x56
c002a934:	74 43                	je     c002a979 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a936:	d4 40                	aam    0x40
c002a938:	d5 39                	aad    0x39
c002a93a:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a93d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a941:	0f b6 c9             	movzx  ecx,cl
c002a944:	c1 e1 04             	shl    ecx,0x4
c002a947:	d4 40                	aam    0x40
c002a949:	d5 39                	aad    0x39
c002a94b:	83 e8 30             	sub    eax,0x30
c002a94e:	0f b6 c0             	movzx  eax,al
c002a951:	09 c1                	or     ecx,eax
c002a953:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a957:	c1 e1 04             	shl    ecx,0x4
c002a95a:	d4 40                	aam    0x40
c002a95c:	d5 39                	aad    0x39
c002a95e:	83 e8 30             	sub    eax,0x30
c002a961:	0f b6 c0             	movzx  eax,al
c002a964:	09 c1                	or     ecx,eax
c002a966:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a96a:	c1 e1 04             	shl    ecx,0x4
c002a96d:	d4 40                	aam    0x40
c002a96f:	d5 39                	aad    0x39
c002a971:	83 e8 30             	sub    eax,0x30
c002a974:	0f b6 c0             	movzx  eax,al
c002a977:	09 c1                	or     ecx,eax
c002a979:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a97d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a981:	3c 58                	cmp    al,0x58
c002a983:	74 47                	je     c002a9cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a985:	d4 40                	aam    0x40
c002a987:	d5 39                	aad    0x39
c002a989:	8d 50 d0             	lea    edx,[eax-0x30]
c002a98c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a990:	0f b6 d2             	movzx  edx,dl
c002a993:	c1 e2 04             	shl    edx,0x4
c002a996:	d4 40                	aam    0x40
c002a998:	d5 39                	aad    0x39
c002a99a:	83 e8 30             	sub    eax,0x30
c002a99d:	0f b6 c0             	movzx  eax,al
c002a9a0:	09 c2                	or     edx,eax
c002a9a2:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a9a6:	c1 e2 04             	shl    edx,0x4
c002a9a9:	d4 40                	aam    0x40
c002a9ab:	d5 39                	aad    0x39
c002a9ad:	83 e8 30             	sub    eax,0x30
c002a9b0:	0f b6 c0             	movzx  eax,al
c002a9b3:	09 c2                	or     edx,eax
c002a9b5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002a9b9:	c1 e2 04             	shl    edx,0x4
c002a9bc:	d4 40                	aam    0x40
c002a9be:	d5 39                	aad    0x39
c002a9c0:	83 e8 30             	sub    eax,0x30
c002a9c3:	0f b6 c0             	movzx  eax,al
c002a9c6:	09 c2                	or     edx,eax
c002a9c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a9cc:	83 c6 10             	add    esi,0x10
c002a9cf:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a9d3:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002a9d7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002a9db:	83 fa 0a             	cmp    edx,0xa
c002a9de:	74 0b                	je     c002a9eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002a9e0:	47                   	inc    edi
c002a9e1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a9e5:	75 19                	jne    c002aa00 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002a9e7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002a9eb:	31 c0                	xor    eax,eax
c002a9ed:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002a9f2:	0f 94 c0             	sete   al
c002a9f5:	01 c6                	add    esi,eax
c002a9f7:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a9fc:	75 0b                	jne    c002aa09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002a9fe:	eb 14                	jmp    c002aa14 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002aa00:	46                   	inc    esi
c002aa01:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002aa04:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002aa07:	eb ca                	jmp    c002a9d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002aa09:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002aa0e:	0f 85 dd fe ff ff    	jne    c002a8f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa14:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002aa19:	74 10                	je     c002aa2b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002aa1b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002aa20:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002aa25:	0f 85 c6 fe ff ff    	jne    c002a8f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aa2f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002aa33:	83 e8 30             	sub    eax,0x30
c002aa36:	83 ef 30             	sub    edi,0x30
c002aa39:	c1 e0 04             	shl    eax,0x4
c002aa3c:	09 f8                	or     eax,edi
c002aa3e:	0f b6 c0             	movzx  eax,al
c002aa41:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002aa45:	0f 85 a6 fe ff ff    	jne    c002a8f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002aa4f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002aa53:	83 e8 30             	sub    eax,0x30
c002aa56:	83 ef 30             	sub    edi,0x30
c002aa59:	c1 e0 04             	shl    eax,0x4
c002aa5c:	09 f8                	or     eax,edi
c002aa5e:	0f b6 c0             	movzx  eax,al
c002aa61:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002aa65:	0f 85 86 fe ff ff    	jne    c002a8f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa6b:	50                   	push   eax
c002aa6c:	50                   	push   eax
c002aa6d:	8d 44 24 48          	lea    eax,[esp+0x48]
c002aa71:	50                   	push   eax
c002aa72:	55                   	push   ebp
c002aa73:	e8 c8 5b fd ff       	call   c0000640 <strcpy>
c002aa78:	83 c4 10             	add    esp,0x10
c002aa7b:	eb 06                	jmp    c002aa83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002aa7d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002aa81:	31 ed                	xor    ebp,ebp
c002aa83:	81 c4 4c 01 00 00    	add    esp,0x14c
c002aa89:	89 e8                	mov    eax,ebp
c002aa8b:	5b                   	pop    ebx
c002aa8c:	5e                   	pop    esi
c002aa8d:	5f                   	pop    edi
c002aa8e:	5d                   	pop    ebp
c002aa8f:	c3                   	ret    

c002aa90 <PCI::checkBus(unsigned char)>:
c002aa90:	56                   	push   esi
c002aa91:	53                   	push   ebx
c002aa92:	31 db                	xor    ebx,ebx
c002aa94:	51                   	push   ecx
c002aa95:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002aa9a:	52                   	push   edx
c002aa9b:	53                   	push   ebx
c002aa9c:	43                   	inc    ebx
c002aa9d:	56                   	push   esi
c002aa9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002aaa2:	e8 03 03 00 00       	call   c002adaa <PCI::checkDevice(unsigned char, unsigned char)>
c002aaa7:	83 c4 10             	add    esp,0x10
c002aaaa:	83 fb 20             	cmp    ebx,0x20
c002aaad:	75 eb                	jne    c002aa9a <PCI::checkBus(unsigned char)+0xa>
c002aaaf:	58                   	pop    eax
c002aab0:	5b                   	pop    ebx
c002aab1:	5e                   	pop    esi
c002aab2:	c3                   	ret    
c002aab3:	90                   	nop

c002aab4 <PCI::foundDevice(PCIDeviceInfo)>:
c002aab4:	55                   	push   ebp
c002aab5:	57                   	push   edi
c002aab6:	56                   	push   esi
c002aab7:	53                   	push   ebx
c002aab8:	83 ec 1c             	sub    esp,0x1c
c002aabb:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002aac0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002aac4:	3d ff ff 00 00       	cmp    eax,0xffff
c002aac9:	0f 84 57 01 00 00    	je     c002ac26 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002aacf:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002aad4:	66 3d 06 04          	cmp    ax,0x406
c002aad8:	75 2c                	jne    c002ab06 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002aada:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002aadf:	50                   	push   eax
c002aae0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002aae5:	50                   	push   eax
c002aae6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002aaeb:	50                   	push   eax
c002aaec:	53                   	push   ebx
c002aaed:	e8 64 fb ff ff       	call   c002a656 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002aaf2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002aaf6:	0f b6 c0             	movzx  eax,al
c002aaf9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002aafd:	83 c4 2c             	add    esp,0x2c
c002ab00:	5b                   	pop    ebx
c002ab01:	5e                   	pop    esi
c002ab02:	5f                   	pop    edi
c002ab03:	5d                   	pop    ebp
c002ab04:	eb 8a                	jmp    c002aa90 <PCI::checkBus(unsigned char)>
c002ab06:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002ab0a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002ab10:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ab14:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002ab18:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002ab1d:	85 d2                	test   edx,edx
c002ab1f:	74 36                	je     c002ab57 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002ab21:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002ab24:	85 c9                	test   ecx,ecx
c002ab26:	74 2b                	je     c002ab53 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002ab28:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002ab2e:	31 ee                	xor    esi,ebp
c002ab30:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002ab36:	75 1b                	jne    c002ab53 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002ab38:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002ab3c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002ab42:	75 0f                	jne    c002ab53 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002ab44:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002ab4b:	39 f9                	cmp    ecx,edi
c002ab4d:	0f 84 d3 00 00 00    	je     c002ac26 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002ab53:	8b 12                	mov    edx,DWORD PTR [edx]
c002ab55:	eb c6                	jmp    c002ab1d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002ab57:	3d 01 06 00 00       	cmp    eax,0x601
c002ab5c:	75 19                	jne    c002ab77 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002ab5e:	83 ec 0c             	sub    esp,0xc
c002ab61:	68 64 01 00 00       	push   0x164
c002ab66:	e8 8b ba fe ff       	call   c00165f6 <malloc>
c002ab6b:	89 c5                	mov    ebp,eax
c002ab6d:	89 04 24             	mov    DWORD PTR [esp],eax
c002ab70:	e8 a1 0e 00 00       	call   c002ba16 <SATABus::SATABus()>
c002ab75:	eb 1e                	jmp    c002ab95 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002ab77:	3d 01 01 00 00       	cmp    eax,0x101
c002ab7c:	75 62                	jne    c002abe0 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002ab7e:	83 ec 0c             	sub    esp,0xc
c002ab81:	68 70 02 00 00       	push   0x270
c002ab86:	e8 6b ba fe ff       	call   c00165f6 <malloc>
c002ab8b:	89 c5                	mov    ebp,eax
c002ab8d:	89 04 24             	mov    DWORD PTR [esp],eax
c002ab90:	e8 e5 02 00 00       	call   c002ae7a <IDE::IDE()>
c002ab95:	5f                   	pop    edi
c002ab96:	58                   	pop    eax
c002ab97:	55                   	push   ebp
c002ab98:	53                   	push   ebx
c002ab99:	e8 68 09 ff ff       	call   c001b506 <Device::addChild(Device*)>
c002ab9e:	83 ec 1c             	sub    esp,0x1c
c002aba1:	b9 09 00 00 00       	mov    ecx,0x9
c002aba6:	fc                   	cld    
c002aba7:	89 e7                	mov    edi,esp
c002aba9:	8d 74 24 60          	lea    esi,[esp+0x60]
c002abad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002abaf:	55                   	push   ebp
c002abb0:	e8 97 08 ff ff       	call   c001b44c <Device::preOpenPCI(PCIDeviceInfo)>
c002abb5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002abb8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002abbc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002abc4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002abcc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002abd4:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002abd7:	83 c4 4c             	add    esp,0x4c
c002abda:	5b                   	pop    ebx
c002abdb:	5e                   	pop    esi
c002abdc:	5f                   	pop    edi
c002abdd:	5d                   	pop    ebp
c002abde:	ff e0                	jmp    eax
c002abe0:	83 ec 0c             	sub    esp,0xc
c002abe3:	68 58 01 00 00       	push   0x158
c002abe8:	e8 09 ba fe ff       	call   c00165f6 <malloc>
c002abed:	89 c5                	mov    ebp,eax
c002abef:	58                   	pop    eax
c002abf0:	5a                   	pop    edx
c002abf1:	68 c6 39 03 c0       	push   0xc00339c6
c002abf6:	55                   	push   ebp
c002abf7:	e8 be 0b ff ff       	call   c001b7ba <DriverlessDevice::DriverlessDevice(char const*)>
c002abfc:	59                   	pop    ecx
c002abfd:	5e                   	pop    esi
c002abfe:	55                   	push   ebp
c002abff:	53                   	push   ebx
c002ac00:	e8 01 09 ff ff       	call   c001b506 <Device::addChild(Device*)>
c002ac05:	83 c4 10             	add    esp,0x10
c002ac08:	b9 09 00 00 00       	mov    ecx,0x9
c002ac0d:	fc                   	cld    
c002ac0e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002ac12:	89 fe                	mov    esi,edi
c002ac14:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ac16:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002ac1a:	83 c4 1c             	add    esp,0x1c
c002ac1d:	5b                   	pop    ebx
c002ac1e:	5e                   	pop    esi
c002ac1f:	5f                   	pop    edi
c002ac20:	5d                   	pop    ebp
c002ac21:	e9 26 08 ff ff       	jmp    c001b44c <Device::preOpenPCI(PCIDeviceInfo)>
c002ac26:	83 c4 1c             	add    esp,0x1c
c002ac29:	5b                   	pop    ebx
c002ac2a:	5e                   	pop    esi
c002ac2b:	5f                   	pop    edi
c002ac2c:	5d                   	pop    ebp
c002ac2d:	c3                   	ret    

c002ac2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002ac2e:	55                   	push   ebp
c002ac2f:	57                   	push   edi
c002ac30:	56                   	push   esi
c002ac31:	53                   	push   ebx
c002ac32:	83 ec 68             	sub    esp,0x68
c002ac35:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002ac39:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002ac40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ac44:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002ac4b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002ac50:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002ac54:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002ac5b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002ac60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002ac64:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002ac69:	6a 0c                	push   0xc
c002ac6b:	57                   	push   edi
c002ac6c:	53                   	push   ebx
c002ac6d:	56                   	push   esi
c002ac6e:	55                   	push   ebp
c002ac6f:	e8 32 f8 ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ac74:	83 c4 20             	add    esp,0x20
c002ac77:	57                   	push   edi
c002ac78:	53                   	push   ebx
c002ac79:	56                   	push   esi
c002ac7a:	55                   	push   ebp
c002ac7b:	e8 1c f9 ff ff       	call   c002a59c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002ac80:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002ac85:	57                   	push   edi
c002ac86:	53                   	push   ebx
c002ac87:	56                   	push   esi
c002ac88:	55                   	push   ebp
c002ac89:	e8 a4 f9 ff ff       	call   c002a632 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002ac8e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002ac92:	83 c4 14             	add    esp,0x14
c002ac95:	6a 3c                	push   0x3c
c002ac97:	57                   	push   edi
c002ac98:	53                   	push   ebx
c002ac99:	56                   	push   esi
c002ac9a:	55                   	push   ebp
c002ac9b:	e8 06 f8 ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aca0:	0f b6 c4             	movzx  eax,ah
c002aca3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002aca7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002acab:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002acaf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002acb4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002acba:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002acc0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002acc4:	83 c4 20             	add    esp,0x20
c002acc7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002accc:	74 30                	je     c002acfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002acce:	31 c0                	xor    eax,eax
c002acd0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002acd4:	7e 28                	jle    c002acfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002acd6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002acde:	39 cb                	cmp    ebx,ecx
c002ace0:	75 19                	jne    c002acfb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ace2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002acea:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002acee:	75 0b                	jne    c002acfb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002acf0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002acf7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002acfb:	40                   	inc    eax
c002acfc:	eb d2                	jmp    c002acd0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002acfe:	31 d2                	xor    edx,edx
c002ad00:	83 ec 0c             	sub    esp,0xc
c002ad03:	57                   	push   edi
c002ad04:	53                   	push   ebx
c002ad05:	56                   	push   esi
c002ad06:	52                   	push   edx
c002ad07:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002ad0b:	55                   	push   ebp
c002ad0c:	e8 6d f9 ff ff       	call   c002a67e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ad11:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002ad15:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002ad19:	42                   	inc    edx
c002ad1a:	83 c4 20             	add    esp,0x20
c002ad1d:	83 fa 06             	cmp    edx,0x6
c002ad20:	75 de                	jne    c002ad00 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002ad22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002ad26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ad2a:	c1 e2 08             	shl    edx,0x8
c002ad2d:	83 ec 0c             	sub    esp,0xc
c002ad30:	0f b6 c4             	movzx  eax,ah
c002ad33:	09 d0                	or     eax,edx
c002ad35:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002ad3a:	6a 02                	push   0x2
c002ad3c:	57                   	push   edi
c002ad3d:	53                   	push   ebx
c002ad3e:	56                   	push   esi
c002ad3f:	55                   	push   ebp
c002ad40:	e8 61 f7 ff ff       	call   c002a4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ad45:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002ad4a:	83 c4 20             	add    esp,0x20
c002ad4d:	57                   	push   edi
c002ad4e:	53                   	push   ebx
c002ad4f:	56                   	push   esi
c002ad50:	55                   	push   ebp
c002ad51:	e8 90 f8 ff ff       	call   c002a5e6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002ad56:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002ad5a:	57                   	push   edi
c002ad5b:	53                   	push   ebx
c002ad5c:	56                   	push   esi
c002ad5d:	55                   	push   ebp
c002ad5e:	e8 ed f7 ff ff       	call   c002a550 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ad63:	b9 09 00 00 00       	mov    ecx,0x9
c002ad68:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002ad6d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002ad71:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002ad75:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002ad79:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002ad7d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002ad81:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002ad85:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002ad89:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002ad8d:	83 ec 0c             	sub    esp,0xc
c002ad90:	fc                   	cld    
c002ad91:	89 e7                	mov    edi,esp
c002ad93:	8d 74 24 58          	lea    esi,[esp+0x58]
c002ad97:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ad99:	55                   	push   ebp
c002ad9a:	e8 15 fd ff ff       	call   c002aab4 <PCI::foundDevice(PCIDeviceInfo)>
c002ad9f:	81 c4 8c 00 00 00    	add    esp,0x8c
c002ada5:	5b                   	pop    ebx
c002ada6:	5e                   	pop    esi
c002ada7:	5f                   	pop    edi
c002ada8:	5d                   	pop    ebp
c002ada9:	c3                   	ret    

c002adaa <PCI::checkDevice(unsigned char, unsigned char)>:
c002adaa:	55                   	push   ebp
c002adab:	57                   	push   edi
c002adac:	56                   	push   esi
c002adad:	53                   	push   ebx
c002adae:	83 ec 0c             	sub    esp,0xc
c002adb1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002adb5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002adba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002adbf:	6a 00                	push   0x0
c002adc1:	56                   	push   esi
c002adc2:	57                   	push   edi
c002adc3:	55                   	push   ebp
c002adc4:	e8 87 f7 ff ff       	call   c002a550 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002adc9:	6a 00                	push   0x0
c002adcb:	56                   	push   esi
c002adcc:	57                   	push   edi
c002adcd:	55                   	push   ebp
c002adce:	e8 5b fe ff ff       	call   c002ac2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002add3:	83 c4 20             	add    esp,0x20
c002add6:	6a 00                	push   0x0
c002add8:	56                   	push   esi
c002add9:	57                   	push   edi
c002adda:	55                   	push   ebp
c002addb:	e8 94 f7 ff ff       	call   c002a574 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ade0:	83 c4 10             	add    esp,0x10
c002ade3:	a8 80                	test   al,0x80
c002ade5:	74 2d                	je     c002ae14 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ade7:	bb 01 00 00 00       	mov    ebx,0x1
c002adec:	53                   	push   ebx
c002aded:	56                   	push   esi
c002adee:	57                   	push   edi
c002adef:	55                   	push   ebp
c002adf0:	e8 5b f7 ff ff       	call   c002a550 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002adf5:	83 c4 10             	add    esp,0x10
c002adf8:	0f b7 c0             	movzx  eax,ax
c002adfb:	3d ff ff 00 00       	cmp    eax,0xffff
c002ae00:	74 0c                	je     c002ae0e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002ae02:	53                   	push   ebx
c002ae03:	56                   	push   esi
c002ae04:	57                   	push   edi
c002ae05:	55                   	push   ebp
c002ae06:	e8 23 fe ff ff       	call   c002ac2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ae0b:	83 c4 10             	add    esp,0x10
c002ae0e:	43                   	inc    ebx
c002ae0f:	83 fb 08             	cmp    ebx,0x8
c002ae12:	75 d8                	jne    c002adec <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002ae14:	83 c4 0c             	add    esp,0xc
c002ae17:	5b                   	pop    ebx
c002ae18:	5e                   	pop    esi
c002ae19:	5f                   	pop    edi
c002ae1a:	5d                   	pop    ebp
c002ae1b:	c3                   	ret    

c002ae1c <PCI::detect()>:
c002ae1c:	56                   	push   esi
c002ae1d:	53                   	push   ebx
c002ae1e:	53                   	push   ebx
c002ae1f:	31 db                	xor    ebx,ebx
c002ae21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ae25:	6a 00                	push   0x0
c002ae27:	6a 00                	push   0x0
c002ae29:	6a 00                	push   0x0
c002ae2b:	56                   	push   esi
c002ae2c:	e8 43 f7 ff ff       	call   c002a574 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ae31:	83 c4 10             	add    esp,0x10
c002ae34:	a8 80                	test   al,0x80
c002ae36:	75 21                	jne    c002ae59 <PCI::detect()+0x3d>
c002ae38:	51                   	push   ecx
c002ae39:	51                   	push   ecx
c002ae3a:	6a 00                	push   0x0
c002ae3c:	56                   	push   esi
c002ae3d:	e8 4e fc ff ff       	call   c002aa90 <PCI::checkBus(unsigned char)>
c002ae42:	83 c4 10             	add    esp,0x10
c002ae45:	eb 2a                	jmp    c002ae71 <PCI::detect()+0x55>
c002ae47:	52                   	push   edx
c002ae48:	52                   	push   edx
c002ae49:	53                   	push   ebx
c002ae4a:	43                   	inc    ebx
c002ae4b:	56                   	push   esi
c002ae4c:	e8 3f fc ff ff       	call   c002aa90 <PCI::checkBus(unsigned char)>
c002ae51:	83 c4 10             	add    esp,0x10
c002ae54:	83 fb 08             	cmp    ebx,0x8
c002ae57:	74 18                	je     c002ae71 <PCI::detect()+0x55>
c002ae59:	53                   	push   ebx
c002ae5a:	6a 00                	push   0x0
c002ae5c:	6a 00                	push   0x0
c002ae5e:	56                   	push   esi
c002ae5f:	e8 ec f6 ff ff       	call   c002a550 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ae64:	83 c4 10             	add    esp,0x10
c002ae67:	0f b7 c0             	movzx  eax,ax
c002ae6a:	3d ff ff 00 00       	cmp    eax,0xffff
c002ae6f:	74 d6                	je     c002ae47 <PCI::detect()+0x2b>
c002ae71:	58                   	pop    eax
c002ae72:	5b                   	pop    ebx
c002ae73:	5e                   	pop    esi
c002ae74:	c3                   	ret    
c002ae75:	90                   	nop

c002ae76 <IDE::close(int, int, void*)>:
c002ae76:	83 c8 ff             	or     eax,0xffffffff
c002ae79:	c3                   	ret    

c002ae7a <IDE::IDE()>:
c002ae7a:	83 ec 0c             	sub    esp,0xc
c002ae7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ae81:	83 ec 08             	sub    esp,0x8
c002ae84:	68 0c 3a 03 c0       	push   0xc0033a0c
c002ae89:	50                   	push   eax
c002ae8a:	e8 d1 09 ff ff       	call   c001b860 <HardDiskController::HardDiskController(char const*)>
c002ae8f:	83 c4 10             	add    esp,0x10
c002ae92:	ba 9c 3a 03 c0       	mov    edx,0xc0033a9c
c002ae97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ae9b:	89 10                	mov    DWORD PTR [eax],edx
c002ae9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002aea1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002aea8:	90                   	nop
c002aea9:	83 c4 0c             	add    esp,0xc
c002aeac:	c3                   	ret    
c002aead:	90                   	nop

c002aeae <IDE::prepareInterrupt(unsigned char)>:
c002aeae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002aeb3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002aeb7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002aebf:	c3                   	ret    

c002aec0 <selectDrive(unsigned char, unsigned char)>:
c002aec0:	c3                   	ret    
c002aec1:	90                   	nop

c002aec2 <IDE::getBase(unsigned char)>:
c002aec2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002aec7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002aecb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002aed3:	c3                   	ret    

c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002aed4:	55                   	push   ebp
c002aed5:	57                   	push   edi
c002aed6:	56                   	push   esi
c002aed7:	53                   	push   ebx
c002aed8:	83 ec 1c             	sub    esp,0x1c
c002aedb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002aedf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002aee3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002aee6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002aeea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002aeee:	80 f9 03             	cmp    cl,0x3
c002aef1:	77 4f                	ja     c002af42 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002aef3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002aef7:	0f b6 fa             	movzx  edi,dl
c002aefa:	0f b6 db             	movzx  ebx,bl
c002aefd:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002af00:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002af05:	80 ca 80             	or     dl,0x80
c002af08:	52                   	push   edx
c002af09:	6a 0c                	push   0xc
c002af0b:	57                   	push   edi
c002af0c:	56                   	push   esi
c002af0d:	e8 c2 ff ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af12:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002af17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002af1b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002af1f:	ee                   	out    dx,al
c002af20:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002af25:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002af29:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002af2d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002af31:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002af39:	83 c4 2c             	add    esp,0x2c
c002af3c:	5b                   	pop    ebx
c002af3d:	5e                   	pop    esi
c002af3e:	5f                   	pop    edi
c002af3f:	5d                   	pop    ebp
c002af40:	eb 92                	jmp    c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af42:	0f b6 cb             	movzx  ecx,bl
c002af45:	83 f9 07             	cmp    ecx,0x7
c002af48:	77 12                	ja     c002af5c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002af4a:	0f b6 d2             	movzx  edx,dl
c002af4d:	0f b6 db             	movzx  ebx,bl
c002af50:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002af58:	01 da                	add    edx,ebx
c002af5a:	eb 2f                	jmp    c002af8b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002af5c:	83 f9 0d             	cmp    ecx,0xd
c002af5f:	77 13                	ja     c002af74 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002af61:	0f b6 d2             	movzx  edx,dl
c002af64:	0f b6 db             	movzx  ebx,bl
c002af67:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002af6e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002af72:	eb 17                	jmp    c002af8b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002af74:	83 f9 15             	cmp    ecx,0x15
c002af77:	77 13                	ja     c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002af79:	0f b6 d2             	movzx  edx,dl
c002af7c:	0f b6 db             	movzx  ebx,bl
c002af7f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002af87:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002af8b:	ee                   	out    dx,al
c002af8c:	83 c4 1c             	add    esp,0x1c
c002af8f:	5b                   	pop    ebx
c002af90:	5e                   	pop    esi
c002af91:	5f                   	pop    edi
c002af92:	5d                   	pop    ebp
c002af93:	c3                   	ret    

c002af94 <IDE::read(unsigned char, unsigned char)>:
c002af94:	55                   	push   ebp
c002af95:	57                   	push   edi
c002af96:	56                   	push   esi
c002af97:	53                   	push   ebx
c002af98:	83 ec 1c             	sub    esp,0x1c
c002af9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002af9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002afa3:	8d 43 f8             	lea    eax,[ebx-0x8]
c002afa6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002afaa:	3c 03                	cmp    al,0x3
c002afac:	77 40                	ja     c002afee <IDE::read(unsigned char, unsigned char)+0x5a>
c002afae:	0f b6 f9             	movzx  edi,cl
c002afb1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002afb4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002afb9:	0c 80                	or     al,0x80
c002afbb:	50                   	push   eax
c002afbc:	6a 0c                	push   0xc
c002afbe:	57                   	push   edi
c002afbf:	56                   	push   esi
c002afc0:	e8 0f ff ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002afc5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002afca:	0f b6 d3             	movzx  edx,bl
c002afcd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002afd1:	ec                   	in     al,dx
c002afd2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002afd6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002afdb:	52                   	push   edx
c002afdc:	6a 0c                	push   0xc
c002afde:	57                   	push   edi
c002afdf:	56                   	push   esi
c002afe0:	e8 ef fe ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002afe5:	83 c4 20             	add    esp,0x20
c002afe8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002afec:	eb 4c                	jmp    c002b03a <IDE::read(unsigned char, unsigned char)+0xa6>
c002afee:	0f b6 d3             	movzx  edx,bl
c002aff1:	83 fa 07             	cmp    edx,0x7
c002aff4:	77 12                	ja     c002b008 <IDE::read(unsigned char, unsigned char)+0x74>
c002aff6:	0f b6 c9             	movzx  ecx,cl
c002aff9:	0f b6 d3             	movzx  edx,bl
c002affc:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002b004:	01 c2                	add    edx,eax
c002b006:	eb 31                	jmp    c002b039 <IDE::read(unsigned char, unsigned char)+0xa5>
c002b008:	83 fa 0d             	cmp    edx,0xd
c002b00b:	77 13                	ja     c002b020 <IDE::read(unsigned char, unsigned char)+0x8c>
c002b00d:	0f b6 c9             	movzx  ecx,cl
c002b010:	0f b6 d3             	movzx  edx,bl
c002b013:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002b01a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b01e:	eb 19                	jmp    c002b039 <IDE::read(unsigned char, unsigned char)+0xa5>
c002b020:	31 c0                	xor    eax,eax
c002b022:	83 fa 15             	cmp    edx,0x15
c002b025:	77 13                	ja     c002b03a <IDE::read(unsigned char, unsigned char)+0xa6>
c002b027:	0f b6 c9             	movzx  ecx,cl
c002b02a:	0f b6 d3             	movzx  edx,bl
c002b02d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002b035:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b039:	ec                   	in     al,dx
c002b03a:	83 c4 1c             	add    esp,0x1c
c002b03d:	5b                   	pop    ebx
c002b03e:	5e                   	pop    esi
c002b03f:	5f                   	pop    edi
c002b040:	5d                   	pop    ebp
c002b041:	c3                   	ret    

c002b042 <IDE::waitInterrupt(unsigned char)>:
c002b042:	55                   	push   ebp
c002b043:	57                   	push   edi
c002b044:	56                   	push   esi
c002b045:	53                   	push   ebx
c002b046:	31 db                	xor    ebx,ebx
c002b048:	83 ec 0c             	sub    esp,0xc
c002b04b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002b04f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002b054:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002b05c:	89 e8                	mov    eax,ebp
c002b05e:	84 c0                	test   al,al
c002b060:	75 30                	jne    c002b092 <IDE::waitInterrupt(unsigned char)+0x50>
c002b062:	50                   	push   eax
c002b063:	6a 0c                	push   0xc
c002b065:	56                   	push   esi
c002b066:	57                   	push   edi
c002b067:	e8 28 ff ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b06c:	83 c4 10             	add    esp,0x10
c002b06f:	a8 01                	test   al,0x1
c002b071:	75 27                	jne    c002b09a <IDE::waitInterrupt(unsigned char)+0x58>
c002b073:	f6 c3 04             	test   bl,0x4
c002b076:	75 12                	jne    c002b08a <IDE::waitInterrupt(unsigned char)+0x48>
c002b078:	83 fb 32             	cmp    ebx,0x32
c002b07b:	7e 0d                	jle    c002b08a <IDE::waitInterrupt(unsigned char)+0x48>
c002b07d:	83 ec 0c             	sub    esp,0xc
c002b080:	6a 64                	push   0x64
c002b082:	e8 05 a6 ff ff       	call   c002568c <milliTenthSleep(unsigned int)>
c002b087:	83 c4 10             	add    esp,0x10
c002b08a:	83 fb 3c             	cmp    ebx,0x3c
c002b08d:	74 0b                	je     c002b09a <IDE::waitInterrupt(unsigned char)+0x58>
c002b08f:	43                   	inc    ebx
c002b090:	eb c2                	jmp    c002b054 <IDE::waitInterrupt(unsigned char)+0x12>
c002b092:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002b09a:	83 c4 0c             	add    esp,0xc
c002b09d:	89 e8                	mov    eax,ebp
c002b09f:	5b                   	pop    ebx
c002b0a0:	5e                   	pop    esi
c002b0a1:	5f                   	pop    edi
c002b0a2:	5d                   	pop    ebp
c002b0a3:	c3                   	ret    

c002b0a4 <ideChannel0IRQHandler(regs*, void*)>:
c002b0a4:	83 ec 10             	sub    esp,0x10
c002b0a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b0ab:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002b0b2:	6a 07                	push   0x7
c002b0b4:	6a 00                	push   0x0
c002b0b6:	50                   	push   eax
c002b0b7:	e8 d8 fe ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b0bc:	83 c4 1c             	add    esp,0x1c
c002b0bf:	c3                   	ret    

c002b0c0 <ideChannel1IRQHandler(regs*, void*)>:
c002b0c0:	83 ec 10             	sub    esp,0x10
c002b0c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b0c7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002b0ce:	6a 07                	push   0x7
c002b0d0:	6a 01                	push   0x1
c002b0d2:	50                   	push   eax
c002b0d3:	e8 bc fe ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b0d8:	83 c4 1c             	add    esp,0x1c
c002b0db:	c3                   	ret    

c002b0dc <IDE::enableIRQs(unsigned char, bool)>:
c002b0dc:	57                   	push   edi
c002b0dd:	b8 02 00 00 00       	mov    eax,0x2
c002b0e2:	56                   	push   esi
c002b0e3:	53                   	push   ebx
c002b0e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b0e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002b0ec:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002b0f1:	74 02                	je     c002b0f5 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002b0f3:	31 c0                	xor    eax,eax
c002b0f5:	0f b6 db             	movzx  ebx,bl
c002b0f8:	bf 04 00 00 00       	mov    edi,0x4
c002b0fd:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002b104:	50                   	push   eax
c002b105:	6a 0c                	push   0xc
c002b107:	53                   	push   ebx
c002b108:	56                   	push   esi
c002b109:	e8 c6 fd ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b10e:	83 c4 10             	add    esp,0x10
c002b111:	50                   	push   eax
c002b112:	6a 0c                	push   0xc
c002b114:	53                   	push   ebx
c002b115:	56                   	push   esi
c002b116:	e8 79 fe ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b11b:	83 c4 10             	add    esp,0x10
c002b11e:	4f                   	dec    edi
c002b11f:	75 f0                	jne    c002b111 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002b121:	5b                   	pop    ebx
c002b122:	5e                   	pop    esi
c002b123:	5f                   	pop    edi
c002b124:	c3                   	ret    
c002b125:	90                   	nop

c002b126 <IDE::open(int, int, void*)>:
c002b126:	55                   	push   ebp
c002b127:	57                   	push   edi
c002b128:	56                   	push   esi
c002b129:	53                   	push   ebx
c002b12a:	83 ec 1c             	sub    esp,0x1c
c002b12d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002b131:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002b13a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002b143:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002b14a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002b151:	0f 85 de 02 00 00    	jne    c002b435 <IDE::open(int, int, void*)+0x30f>
c002b157:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002b15d:	88 04 24             	mov    BYTE PTR [esp],al
c002b160:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002b163:	83 e0 7f             	and    eax,0x7f
c002b166:	83 f8 05             	cmp    eax,0x5
c002b169:	74 05                	je     c002b170 <IDE::open(int, int, void*)+0x4a>
c002b16b:	83 f8 0f             	cmp    eax,0xf
c002b16e:	75 32                	jne    c002b1a2 <IDE::open(int, int, void*)+0x7c>
c002b170:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002b176:	83 e0 fc             	and    eax,0xfffffffc
c002b179:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b180:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002b186:	83 e0 fc             	and    eax,0xfffffffc
c002b189:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b190:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002b196:	83 e0 fc             	and    eax,0xfffffffc
c002b199:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b1a0:	eb 14                	jmp    c002b1b6 <IDE::open(int, int, void*)+0x90>
c002b1a2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b1ac:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b1b6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002b1bd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002b1c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002b1c8:	89 c6                	mov    esi,eax
c002b1ca:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b1cf:	c1 e6 10             	shl    esi,0x10
c002b1d2:	89 e8                	mov    eax,ebp
c002b1d4:	89 fa                	mov    edx,edi
c002b1d6:	c1 e0 0b             	shl    eax,0xb
c002b1d9:	09 f0                	or     eax,esi
c002b1db:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002b1e2:	c1 e6 08             	shl    esi,0x8
c002b1e5:	09 c6                	or     esi,eax
c002b1e7:	89 f0                	mov    eax,esi
c002b1e9:	0d 08 00 00 80       	or     eax,0x80000008
c002b1ee:	ef                   	out    dx,eax
c002b1ef:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002b1f4:	89 ca                	mov    edx,ecx
c002b1f6:	ed                   	in     eax,dx
c002b1f7:	c1 e8 10             	shr    eax,0x10
c002b1fa:	3d ff ff 00 00       	cmp    eax,0xffff
c002b1ff:	0f 84 f9 00 00 00    	je     c002b2fe <IDE::open(int, int, void*)+0x1d8>
c002b205:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002b20b:	89 fa                	mov    edx,edi
c002b20d:	89 f0                	mov    eax,esi
c002b20f:	ef                   	out    dx,eax
c002b210:	b0 fe                	mov    al,0xfe
c002b212:	89 ca                	mov    edx,ecx
c002b214:	ee                   	out    dx,al
c002b215:	89 f0                	mov    eax,esi
c002b217:	89 fa                	mov    edx,edi
c002b219:	ef                   	out    dx,eax
c002b21a:	89 ca                	mov    edx,ecx
c002b21c:	ed                   	in     eax,dx
c002b21d:	3c fe                	cmp    al,0xfe
c002b21f:	0f 85 a9 00 00 00    	jne    c002b2ce <IDE::open(int, int, void*)+0x1a8>
c002b225:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002b22b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b232:	74 33                	je     c002b267 <IDE::open(int, int, void*)+0x141>
c002b234:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b23a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b23e:	40                   	inc    eax
c002b23f:	83 ec 0c             	sub    esp,0xc
c002b242:	0f b6 c0             	movzx  eax,al
c002b245:	50                   	push   eax
c002b246:	55                   	push   ebp
c002b247:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002b24b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b251:	51                   	push   ecx
c002b252:	e8 fd 34 ff ff       	call   c001e754 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b257:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b25c:	83 c4 1c             	add    esp,0x1c
c002b25f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b265:	eb 0a                	jmp    c002b271 <IDE::open(int, int, void*)+0x14b>
c002b267:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b271:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b278:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b27f:	c1 e1 10             	shl    ecx,0x10
c002b282:	c1 e0 08             	shl    eax,0x8
c002b285:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b28a:	09 c1                	or     ecx,eax
c002b28c:	89 fa                	mov    edx,edi
c002b28e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b295:	c1 e0 0b             	shl    eax,0xb
c002b298:	09 c1                	or     ecx,eax
c002b29a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b2a0:	89 c8                	mov    eax,ecx
c002b2a2:	ef                   	out    dx,eax
c002b2a3:	be fc 0c 00 00       	mov    esi,0xcfc
c002b2a8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002b2ae:	89 f2                	mov    edx,esi
c002b2b0:	ee                   	out    dx,al
c002b2b1:	89 c8                	mov    eax,ecx
c002b2b3:	89 fa                	mov    edx,edi
c002b2b5:	ef                   	out    dx,eax
c002b2b6:	89 f2                	mov    edx,esi
c002b2b8:	ed                   	in     eax,dx
c002b2b9:	0f b6 c0             	movzx  eax,al
c002b2bc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002b2c2:	74 4a                	je     c002b30e <IDE::open(int, int, void*)+0x1e8>
c002b2c4:	83 ec 0c             	sub    esp,0xc
c002b2c7:	68 24 3a 03 c0       	push   0xc0033a24
c002b2cc:	eb 38                	jmp    c002b306 <IDE::open(int, int, void*)+0x1e0>
c002b2ce:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b2d7:	75 1b                	jne    c002b2f4 <IDE::open(int, int, void*)+0x1ce>
c002b2d9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002b2dd:	3d 80 00 00 00       	cmp    eax,0x80
c002b2e2:	74 07                	je     c002b2eb <IDE::open(int, int, void*)+0x1c5>
c002b2e4:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b2e9:	75 09                	jne    c002b2f4 <IDE::open(int, int, void*)+0x1ce>
c002b2eb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b2f2:	eb 1a                	jmp    c002b30e <IDE::open(int, int, void*)+0x1e8>
c002b2f4:	83 ec 0c             	sub    esp,0xc
c002b2f7:	68 2c 3a 03 c0       	push   0xc0033a2c
c002b2fc:	eb 08                	jmp    c002b306 <IDE::open(int, int, void*)+0x1e0>
c002b2fe:	83 ec 0c             	sub    esp,0xc
c002b301:	68 5d 3a 03 c0       	push   0xc0033a5d
c002b306:	e8 93 51 ff ff       	call   c002049e <KePanic(char const*)>
c002b30b:	83 c4 10             	add    esp,0x10
c002b30e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b315:	74 1a                	je     c002b331 <IDE::open(int, int, void*)+0x20b>
c002b317:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b31d:	83 e0 fc             	and    eax,0xfffffffc
c002b320:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b327:	83 c0 08             	add    eax,0x8
c002b32a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b331:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b337:	89 c2                	mov    edx,eax
c002b339:	83 e2 0f             	and    edx,0xf
c002b33c:	83 fa 08             	cmp    edx,0x8
c002b33f:	75 0a                	jne    c002b34b <IDE::open(int, int, void*)+0x225>
c002b341:	83 e8 02             	sub    eax,0x2
c002b344:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b34b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b351:	89 c2                	mov    edx,eax
c002b353:	83 e2 0f             	and    edx,0xf
c002b356:	83 fa 08             	cmp    edx,0x8
c002b359:	75 0a                	jne    c002b365 <IDE::open(int, int, void*)+0x23f>
c002b35b:	83 e8 02             	sub    eax,0x2
c002b35e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b365:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b36c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b373:	89 d0                	mov    eax,edx
c002b375:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b378:	8d 7a 01             	lea    edi,[edx+0x1]
c002b37b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b37f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b383:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b387:	83 e1 3f             	and    ecx,0x3f
c002b38a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b38e:	89 f9                	mov    ecx,edi
c002b390:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b397:	0f b6 c9             	movzx  ecx,cl
c002b39a:	8d 78 02             	lea    edi,[eax+0x2]
c002b39d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b3a0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b3a4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b3a8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b3ac:	83 e2 3f             	and    edx,0x3f
c002b3af:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b3b3:	89 f9                	mov    ecx,edi
c002b3b5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b3bb:	0f b6 d1             	movzx  edx,cl
c002b3be:	8d 78 03             	lea    edi,[eax+0x3]
c002b3c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b3c4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b3c8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b3cc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b3d0:	83 e1 3f             	and    ecx,0x3f
c002b3d3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b3d7:	89 f9                	mov    ecx,edi
c002b3d9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b3df:	0f b6 c9             	movzx  ecx,cl
c002b3e2:	8d 78 04             	lea    edi,[eax+0x4]
c002b3e5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b3e8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b3ec:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b3f0:	89 fa                	mov    edx,edi
c002b3f2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b3f8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b3fc:	83 e2 3f             	and    edx,0x3f
c002b3ff:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b403:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b40a:	66 85 f6             	test   si,si
c002b40d:	74 65                	je     c002b474 <IDE::open(int, int, void*)+0x34e>
c002b40f:	89 f9                	mov    ecx,edi
c002b411:	83 c0 05             	add    eax,0x5
c002b414:	0f b6 d1             	movzx  edx,cl
c002b417:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b41a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b41e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b422:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b428:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b42c:	83 e0 3f             	and    eax,0x3f
c002b42f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b433:	eb 3f                	jmp    c002b474 <IDE::open(int, int, void*)+0x34e>
c002b435:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b43b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b442:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b449:	05 06 02 00 00       	add    eax,0x206
c002b44e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b455:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b45c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b463:	05 06 02 00 00       	add    eax,0x206
c002b468:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b46f:	e9 bd fe ff ff       	jmp    c002b331 <IDE::open(int, int, void*)+0x20b>
c002b474:	50                   	push   eax
c002b475:	50                   	push   eax
c002b476:	6a 00                	push   0x0
c002b478:	53                   	push   ebx
c002b479:	e8 30 fa ff ff       	call   c002aeae <IDE::prepareInterrupt(unsigned char)>
c002b47e:	5a                   	pop    edx
c002b47f:	59                   	pop    ecx
c002b480:	6a 01                	push   0x1
c002b482:	53                   	push   ebx
c002b483:	e8 26 fa ff ff       	call   c002aeae <IDE::prepareInterrupt(unsigned char)>
c002b488:	83 c4 0c             	add    esp,0xc
c002b48b:	6a 00                	push   0x0
c002b48d:	6a 00                	push   0x0
c002b48f:	53                   	push   ebx
c002b490:	e8 47 fc ff ff       	call   c002b0dc <IDE::enableIRQs(unsigned char, bool)>
c002b495:	83 c4 0c             	add    esp,0xc
c002b498:	6a 00                	push   0x0
c002b49a:	6a 01                	push   0x1
c002b49c:	53                   	push   ebx
c002b49d:	e8 3a fc ff ff       	call   c002b0dc <IDE::enableIRQs(unsigned char, bool)>
c002b4a2:	83 c4 10             	add    esp,0x10
c002b4a5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b4ac:	74 34                	je     c002b4e2 <IDE::open(int, int, void*)+0x3bc>
c002b4ae:	83 ec 0c             	sub    esp,0xc
c002b4b1:	53                   	push   ebx
c002b4b2:	6a 01                	push   0x1
c002b4b4:	68 a4 b0 02 c0       	push   0xc002b0a4
c002b4b9:	6a 0e                	push   0xe
c002b4bb:	53                   	push   ebx
c002b4bc:	e8 f1 ff fe ff       	call   c001b4b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b4c1:	83 c4 14             	add    esp,0x14
c002b4c4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b4ca:	53                   	push   ebx
c002b4cb:	6a 01                	push   0x1
c002b4cd:	68 c0 b0 02 c0       	push   0xc002b0c0
c002b4d2:	6a 0f                	push   0xf
c002b4d4:	53                   	push   ebx
c002b4d5:	e8 d8 ff fe ff       	call   c001b4b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b4da:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b4e0:	eb 38                	jmp    c002b51a <IDE::open(int, int, void*)+0x3f4>
c002b4e2:	83 ec 0c             	sub    esp,0xc
c002b4e5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b4ef:	53                   	push   ebx
c002b4f0:	6a 00                	push   0x0
c002b4f2:	68 a4 b0 02 c0       	push   0xc002b0a4
c002b4f7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b4fd:	53                   	push   ebx
c002b4fe:	e8 af ff fe ff       	call   c001b4b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b503:	83 c4 14             	add    esp,0x14
c002b506:	53                   	push   ebx
c002b507:	6a 00                	push   0x0
c002b509:	68 c0 b0 02 c0       	push   0xc002b0c0
c002b50e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b514:	53                   	push   ebx
c002b515:	e8 98 ff fe ff       	call   c001b4b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b51a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b51c:	83 c4 20             	add    esp,0x20
c002b51f:	83 ec 0c             	sub    esp,0xc
c002b522:	53                   	push   ebx
c002b523:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b526:	83 c4 0c             	add    esp,0xc
c002b529:	6a 07                	push   0x7
c002b52b:	6a 00                	push   0x0
c002b52d:	53                   	push   ebx
c002b52e:	e8 61 fa ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b533:	83 c4 0c             	add    esp,0xc
c002b536:	6a 07                	push   0x7
c002b538:	6a 01                	push   0x1
c002b53a:	53                   	push   ebx
c002b53b:	e8 54 fa ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b540:	83 c4 0c             	add    esp,0xc
c002b543:	6a 01                	push   0x1
c002b545:	6a 00                	push   0x0
c002b547:	53                   	push   ebx
c002b548:	e8 8f fb ff ff       	call   c002b0dc <IDE::enableIRQs(unsigned char, bool)>
c002b54d:	83 c4 0c             	add    esp,0xc
c002b550:	6a 01                	push   0x1
c002b552:	6a 01                	push   0x1
c002b554:	53                   	push   ebx
c002b555:	e8 82 fb ff ff       	call   c002b0dc <IDE::enableIRQs(unsigned char, bool)>
c002b55a:	83 c4 2c             	add    esp,0x2c
c002b55d:	31 c0                	xor    eax,eax
c002b55f:	5b                   	pop    ebx
c002b560:	5e                   	pop    esi
c002b561:	5f                   	pop    edi
c002b562:	5d                   	pop    ebp
c002b563:	c3                   	ret    

c002b564 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b564:	55                   	push   ebp
c002b565:	57                   	push   edi
c002b566:	56                   	push   esi
c002b567:	53                   	push   ebx
c002b568:	83 ec 1c             	sub    esp,0x1c
c002b56b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b56f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b573:	8d 42 f8             	lea    eax,[edx-0x8]
c002b576:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b57a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b57e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b582:	3c 03                	cmp    al,0x3
c002b584:	77 5a                	ja     c002b5e0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b58a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b58e:	0f b6 db             	movzx  ebx,bl
c002b591:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b594:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b599:	0c 80                	or     al,0x80
c002b59b:	50                   	push   eax
c002b59c:	6a 0c                	push   0xc
c002b59e:	53                   	push   ebx
c002b59f:	56                   	push   esi
c002b5a0:	e8 2f f9 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b5a5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b5aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b5ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b5b2:	0f b6 d2             	movzx  edx,dl
c002b5b5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b5b9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b5bb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b5c0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b5c4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b5c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b5cc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b5d4:	83 c4 2c             	add    esp,0x2c
c002b5d7:	5b                   	pop    ebx
c002b5d8:	5e                   	pop    esi
c002b5d9:	5f                   	pop    edi
c002b5da:	5d                   	pop    ebp
c002b5db:	e9 f4 f8 ff ff       	jmp    c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b5e0:	0f b6 c2             	movzx  eax,dl
c002b5e3:	83 f8 07             	cmp    eax,0x7
c002b5e6:	77 12                	ja     c002b5fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b5e8:	0f b6 c2             	movzx  eax,dl
c002b5eb:	0f b6 db             	movzx  ebx,bl
c002b5ee:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b5f6:	01 c2                	add    edx,eax
c002b5f8:	eb 2f                	jmp    c002b629 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b5fa:	83 f8 0d             	cmp    eax,0xd
c002b5fd:	77 13                	ja     c002b612 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b5ff:	0f b6 db             	movzx  ebx,bl
c002b602:	0f b6 d2             	movzx  edx,dl
c002b605:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b60c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b610:	eb 17                	jmp    c002b629 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b612:	83 f8 15             	cmp    eax,0x15
c002b615:	77 14                	ja     c002b62b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b617:	0f b6 db             	movzx  ebx,bl
c002b61a:	0f b6 d2             	movzx  edx,dl
c002b61d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b625:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b629:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b62b:	83 c4 1c             	add    esp,0x1c
c002b62e:	5b                   	pop    ebx
c002b62f:	5e                   	pop    esi
c002b630:	5f                   	pop    edi
c002b631:	5d                   	pop    ebp
c002b632:	c3                   	ret    
c002b633:	90                   	nop

c002b634 <IDE::detect()>:
c002b634:	55                   	push   ebp
c002b635:	57                   	push   edi
c002b636:	56                   	push   esi
c002b637:	53                   	push   ebx
c002b638:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b63e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b645:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b64c:	0f 85 a4 02 00 00    	jne    c002b8f6 <IDE::detect()+0x2c2>
c002b652:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b659:	31 f6                	xor    esi,esi
c002b65b:	31 ed                	xor    ebp,ebp
c002b65d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b665:	89 e8                	mov    eax,ebp
c002b667:	c1 e0 06             	shl    eax,0x6
c002b66a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b672:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b676:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b67e:	c1 e0 04             	shl    eax,0x4
c002b681:	83 c8 a0             	or     eax,0xffffffa0
c002b684:	0f b6 c0             	movzx  eax,al
c002b687:	50                   	push   eax
c002b688:	6a 06                	push   0x6
c002b68a:	56                   	push   esi
c002b68b:	53                   	push   ebx
c002b68c:	e8 43 f8 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b691:	83 c4 0c             	add    esp,0xc
c002b694:	6a 0c                	push   0xc
c002b696:	56                   	push   esi
c002b697:	53                   	push   ebx
c002b698:	e8 f7 f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b69d:	83 c4 0c             	add    esp,0xc
c002b6a0:	6a 0c                	push   0xc
c002b6a2:	56                   	push   esi
c002b6a3:	53                   	push   ebx
c002b6a4:	e8 eb f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b6a9:	83 c4 0c             	add    esp,0xc
c002b6ac:	6a 0c                	push   0xc
c002b6ae:	56                   	push   esi
c002b6af:	53                   	push   ebx
c002b6b0:	e8 df f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b6b5:	83 c4 0c             	add    esp,0xc
c002b6b8:	6a 0c                	push   0xc
c002b6ba:	56                   	push   esi
c002b6bb:	53                   	push   ebx
c002b6bc:	e8 d3 f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b6c1:	68 ec 00 00 00       	push   0xec
c002b6c6:	6a 07                	push   0x7
c002b6c8:	56                   	push   esi
c002b6c9:	53                   	push   ebx
c002b6ca:	e8 05 f8 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b6cf:	83 c4 1c             	add    esp,0x1c
c002b6d2:	6a 0c                	push   0xc
c002b6d4:	56                   	push   esi
c002b6d5:	53                   	push   ebx
c002b6d6:	e8 b9 f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b6db:	83 c4 0c             	add    esp,0xc
c002b6de:	6a 0c                	push   0xc
c002b6e0:	56                   	push   esi
c002b6e1:	53                   	push   ebx
c002b6e2:	e8 ad f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b6e7:	83 c4 0c             	add    esp,0xc
c002b6ea:	6a 0c                	push   0xc
c002b6ec:	56                   	push   esi
c002b6ed:	53                   	push   ebx
c002b6ee:	e8 a1 f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b6f3:	83 c4 0c             	add    esp,0xc
c002b6f6:	6a 0c                	push   0xc
c002b6f8:	56                   	push   esi
c002b6f9:	53                   	push   ebx
c002b6fa:	e8 95 f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b6ff:	83 c4 0c             	add    esp,0xc
c002b702:	6a 0c                	push   0xc
c002b704:	56                   	push   esi
c002b705:	53                   	push   ebx
c002b706:	e8 89 f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b70b:	83 c4 10             	add    esp,0x10
c002b70e:	84 c0                	test   al,al
c002b710:	0f 84 60 01 00 00    	je     c002b876 <IDE::detect()+0x242>
c002b716:	31 ff                	xor    edi,edi
c002b718:	50                   	push   eax
c002b719:	6a 0c                	push   0xc
c002b71b:	56                   	push   esi
c002b71c:	53                   	push   ebx
c002b71d:	e8 72 f8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b722:	83 c4 10             	add    esp,0x10
c002b725:	a8 01                	test   al,0x1
c002b727:	0f 85 6a 01 00 00    	jne    c002b897 <IDE::detect()+0x263>
c002b72d:	a8 80                	test   al,0x80
c002b72f:	75 04                	jne    c002b735 <IDE::detect()+0x101>
c002b731:	a8 08                	test   al,0x8
c002b733:	75 23                	jne    c002b758 <IDE::detect()+0x124>
c002b735:	47                   	inc    edi
c002b736:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b73c:	7e da                	jle    c002b718 <IDE::detect()+0xe4>
c002b73e:	83 ec 0c             	sub    esp,0xc
c002b741:	6a 32                	push   0x32
c002b743:	e8 44 9f ff ff       	call   c002568c <milliTenthSleep(unsigned int)>
c002b748:	83 c4 10             	add    esp,0x10
c002b74b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b751:	75 c5                	jne    c002b718 <IDE::detect()+0xe4>
c002b753:	e9 3f 01 00 00       	jmp    c002b897 <IDE::detect()+0x263>
c002b758:	31 c9                	xor    ecx,ecx
c002b75a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b75e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b762:	83 ec 0c             	sub    esp,0xc
c002b765:	68 80 00 00 00       	push   0x80
c002b76a:	57                   	push   edi
c002b76b:	6a 00                	push   0x0
c002b76d:	56                   	push   esi
c002b76e:	53                   	push   ebx
c002b76f:	e8 f0 fd ff ff       	call   c002b564 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b774:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b779:	89 e8                	mov    eax,ebp
c002b77b:	89 d1                	mov    ecx,edx
c002b77d:	c1 e0 06             	shl    eax,0x6
c002b780:	01 d8                	add    eax,ebx
c002b782:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b789:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b790:	89 f2                	mov    edx,esi
c002b792:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b798:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b79c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b7a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b7a6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b7ad:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b7b5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b7bc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b7c4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b7ca:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b7d1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b7d7:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b7db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b7df:	83 c4 20             	add    esp,0x20
c002b7e2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b7e5:	83 c0 02             	add    eax,0x2
c002b7e8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b7ee:	83 c7 02             	add    edi,0x2
c002b7f1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b7f4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b7fa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b7fe:	75 e2                	jne    c002b7e2 <IDE::detect()+0x1ae>
c002b800:	89 e8                	mov    eax,ebp
c002b802:	c1 e0 06             	shl    eax,0x6
c002b805:	01 d8                	add    eax,ebx
c002b807:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b80e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b815:	c1 ea 09             	shr    edx,0x9
c002b818:	83 e2 01             	and    edx,0x1
c002b81b:	80 e1 01             	and    cl,0x1
c002b81e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b824:	75 22                	jne    c002b848 <IDE::detect()+0x214>
c002b826:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b82d:	74 46                	je     c002b875 <IDE::detect()+0x241>
c002b82f:	83 ec 0c             	sub    esp,0xc
c002b832:	68 7c 01 00 00       	push   0x17c
c002b837:	e8 ba ad fe ff       	call   c00165f6 <malloc>
c002b83c:	89 c7                	mov    edi,eax
c002b83e:	89 04 24             	mov    DWORD PTR [esp],eax
c002b841:	e8 2e 05 00 00       	call   c002bd74 <ATA::ATA()>
c002b846:	eb 17                	jmp    c002b85f <IDE::detect()+0x22b>
c002b848:	83 ec 0c             	sub    esp,0xc
c002b84b:	68 84 01 00 00       	push   0x184
c002b850:	e8 a1 ad fe ff       	call   c00165f6 <malloc>
c002b855:	89 c7                	mov    edi,eax
c002b857:	89 04 24             	mov    DWORD PTR [esp],eax
c002b85a:	e8 59 0e 00 00       	call   c002c6b8 <ATAPI::ATAPI()>
c002b85f:	5a                   	pop    edx
c002b860:	59                   	pop    ecx
c002b861:	57                   	push   edi
c002b862:	53                   	push   ebx
c002b863:	e8 9e fc fe ff       	call   c001b506 <Device::addChild(Device*)>
c002b868:	8b 07                	mov    eax,DWORD PTR [edi]
c002b86a:	53                   	push   ebx
c002b86b:	55                   	push   ebp
c002b86c:	6a 00                	push   0x0
c002b86e:	57                   	push   edi
c002b86f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b872:	83 c4 20             	add    esp,0x20
c002b875:	45                   	inc    ebp
c002b876:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b87b:	74 0d                	je     c002b88a <IDE::detect()+0x256>
c002b87d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b885:	e9 db fd ff ff       	jmp    c002b665 <IDE::detect()+0x31>
c002b88a:	4e                   	dec    esi
c002b88b:	74 69                	je     c002b8f6 <IDE::detect()+0x2c2>
c002b88d:	be 01 00 00 00       	mov    esi,0x1
c002b892:	e9 c6 fd ff ff       	jmp    c002b65d <IDE::detect()+0x29>
c002b897:	50                   	push   eax
c002b898:	6a 04                	push   0x4
c002b89a:	56                   	push   esi
c002b89b:	53                   	push   ebx
c002b89c:	e8 f3 f6 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b8a1:	83 c4 0c             	add    esp,0xc
c002b8a4:	89 c7                	mov    edi,eax
c002b8a6:	6a 05                	push   0x5
c002b8a8:	56                   	push   esi
c002b8a9:	53                   	push   ebx
c002b8aa:	e8 e5 f6 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b8af:	83 c4 10             	add    esp,0x10
c002b8b2:	89 f9                	mov    ecx,edi
c002b8b4:	0f b6 c0             	movzx  eax,al
c002b8b7:	0f b6 f9             	movzx  edi,cl
c002b8ba:	83 ff 14             	cmp    edi,0x14
c002b8bd:	75 07                	jne    c002b8c6 <IDE::detect()+0x292>
c002b8bf:	3d eb 00 00 00       	cmp    eax,0xeb
c002b8c4:	eb 0a                	jmp    c002b8d0 <IDE::detect()+0x29c>
c002b8c6:	3d 96 00 00 00       	cmp    eax,0x96
c002b8cb:	75 a9                	jne    c002b876 <IDE::detect()+0x242>
c002b8cd:	83 ff 69             	cmp    edi,0x69
c002b8d0:	75 a4                	jne    c002b876 <IDE::detect()+0x242>
c002b8d2:	68 a1 00 00 00       	push   0xa1
c002b8d7:	6a 07                	push   0x7
c002b8d9:	56                   	push   esi
c002b8da:	53                   	push   ebx
c002b8db:	e8 f4 f5 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b8e0:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b8e7:	e8 a0 9d ff ff       	call   c002568c <milliTenthSleep(unsigned int)>
c002b8ec:	83 c4 10             	add    esp,0x10
c002b8ef:	b1 01                	mov    cl,0x1
c002b8f1:	e9 64 fe ff ff       	jmp    c002b75a <IDE::detect()+0x126>
c002b8f6:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b8fc:	5b                   	pop    ebx
c002b8fd:	5e                   	pop    esi
c002b8fe:	5f                   	pop    edi
c002b8ff:	5d                   	pop    ebp
c002b900:	c3                   	ret    
c002b901:	90                   	nop

c002b902 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b902:	55                   	push   ebp
c002b903:	57                   	push   edi
c002b904:	56                   	push   esi
c002b905:	53                   	push   ebx
c002b906:	83 ec 1c             	sub    esp,0x1c
c002b909:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b90d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b911:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b915:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b919:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b91d:	88 c3                	mov    bl,al
c002b91f:	25 ff 00 00 00       	and    eax,0xff
c002b924:	0f 84 88 00 00 00    	je     c002b9b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b92a:	83 ec 0c             	sub    esp,0xc
c002b92d:	89 c7                	mov    edi,eax
c002b92f:	68 87 3a 03 c0       	push   0xc0033a87
c002b934:	e8 4c db fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002b939:	83 c4 10             	add    esp,0x10
c002b93c:	83 ff 01             	cmp    edi,0x1
c002b93f:	74 6b                	je     c002b9ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b941:	83 ff 02             	cmp    edi,0x2
c002b944:	75 58                	jne    c002b99e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b946:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b94b:	01 ff                	add    edi,edi
c002b94d:	50                   	push   eax
c002b94e:	09 fe                	or     esi,edi
c002b950:	6a 01                	push   0x1
c002b952:	89 f0                	mov    eax,esi
c002b954:	0f b6 f0             	movzx  esi,al
c002b957:	c1 e6 06             	shl    esi,0x6
c002b95a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b962:	50                   	push   eax
c002b963:	55                   	push   ebp
c002b964:	e8 2b f6 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b969:	83 c4 10             	add    esp,0x10
c002b96c:	a8 01                	test   al,0x1
c002b96e:	74 02                	je     c002b972 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b970:	b3 07                	mov    bl,0x7
c002b972:	a8 02                	test   al,0x2
c002b974:	74 02                	je     c002b978 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b976:	b3 03                	mov    bl,0x3
c002b978:	a8 04                	test   al,0x4
c002b97a:	74 02                	je     c002b97e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b97c:	b3 14                	mov    bl,0x14
c002b97e:	a8 08                	test   al,0x8
c002b980:	74 02                	je     c002b984 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b982:	b3 03                	mov    bl,0x3
c002b984:	a8 10                	test   al,0x10
c002b986:	74 02                	je     c002b98a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b988:	b3 15                	mov    bl,0x15
c002b98a:	a8 20                	test   al,0x20
c002b98c:	74 02                	je     c002b990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b98e:	b3 03                	mov    bl,0x3
c002b990:	a8 40                	test   al,0x40
c002b992:	74 02                	je     c002b996 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b994:	b3 16                	mov    bl,0x16
c002b996:	a8 80                	test   al,0x80
c002b998:	74 18                	je     c002b9b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b99a:	b3 0d                	mov    bl,0xd
c002b99c:	eb 14                	jmp    c002b9b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b99e:	83 ff 03             	cmp    edi,0x3
c002b9a1:	74 0d                	je     c002b9b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b9a3:	83 ff 04             	cmp    edi,0x4
c002b9a6:	75 0a                	jne    c002b9b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9a8:	b3 08                	mov    bl,0x8
c002b9aa:	eb 06                	jmp    c002b9b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9ac:	b3 13                	mov    bl,0x13
c002b9ae:	eb 02                	jmp    c002b9b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9b0:	b3 17                	mov    bl,0x17
c002b9b2:	83 c4 1c             	add    esp,0x1c
c002b9b5:	88 d8                	mov    al,bl
c002b9b7:	5b                   	pop    ebx
c002b9b8:	5e                   	pop    esi
c002b9b9:	5f                   	pop    edi
c002b9ba:	5d                   	pop    ebp
c002b9bb:	c3                   	ret    

c002b9bc <IDE::polling(unsigned char, unsigned int)>:
c002b9bc:	57                   	push   edi
c002b9bd:	56                   	push   esi
c002b9be:	53                   	push   ebx
c002b9bf:	bb 04 00 00 00       	mov    ebx,0x4
c002b9c4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b9c8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b9cd:	52                   	push   edx
c002b9ce:	6a 0c                	push   0xc
c002b9d0:	56                   	push   esi
c002b9d1:	57                   	push   edi
c002b9d2:	e8 bd f5 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b9d7:	83 c4 10             	add    esp,0x10
c002b9da:	4b                   	dec    ebx
c002b9db:	75 f0                	jne    c002b9cd <IDE::polling(unsigned char, unsigned int)+0x11>
c002b9dd:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b9e2:	50                   	push   eax
c002b9e3:	6a 0c                	push   0xc
c002b9e5:	56                   	push   esi
c002b9e6:	57                   	push   edi
c002b9e7:	e8 a8 f5 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002b9ec:	83 c4 10             	add    esp,0x10
c002b9ef:	a8 01                	test   al,0x1
c002b9f1:	75 17                	jne    c002ba0a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b9f3:	a8 20                	test   al,0x20
c002b9f5:	75 0f                	jne    c002ba06 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b9f7:	4b                   	dec    ebx
c002b9f8:	74 10                	je     c002ba0a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b9fa:	a8 80                	test   al,0x80
c002b9fc:	75 e4                	jne    c002b9e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b9fe:	a8 08                	test   al,0x8
c002ba00:	74 e0                	je     c002b9e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c002ba02:	31 c0                	xor    eax,eax
c002ba04:	eb 06                	jmp    c002ba0c <IDE::polling(unsigned char, unsigned int)+0x50>
c002ba06:	b0 01                	mov    al,0x1
c002ba08:	eb 02                	jmp    c002ba0c <IDE::polling(unsigned char, unsigned int)+0x50>
c002ba0a:	b0 02                	mov    al,0x2
c002ba0c:	5b                   	pop    ebx
c002ba0d:	5e                   	pop    esi
c002ba0e:	5f                   	pop    edi
c002ba0f:	c3                   	ret    

c002ba10 <SATABus::close(int, int, void*)>:
c002ba10:	31 c0                	xor    eax,eax
c002ba12:	c3                   	ret    
c002ba13:	90                   	nop

c002ba14 <SATABus::detect()>:
c002ba14:	c3                   	ret    
c002ba15:	90                   	nop

c002ba16 <SATABus::SATABus()>:
c002ba16:	83 ec 0c             	sub    esp,0xc
c002ba19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba1d:	83 ec 08             	sub    esp,0x8
c002ba20:	68 c0 3a 03 c0       	push   0xc0033ac0
c002ba25:	50                   	push   eax
c002ba26:	e8 35 fe fe ff       	call   c001b860 <HardDiskController::HardDiskController(char const*)>
c002ba2b:	83 c4 10             	add    esp,0x10
c002ba2e:	ba ec 3a 03 c0       	mov    edx,0xc0033aec
c002ba33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba37:	89 10                	mov    DWORD PTR [eax],edx
c002ba39:	83 ec 0c             	sub    esp,0xc
c002ba3c:	6a 50                	push   0x50
c002ba3e:	e8 8b af fe ff       	call   c00169ce <Phys::allocateContiguousPages(int)>
c002ba43:	83 c4 10             	add    esp,0x10
c002ba46:	89 c2                	mov    edx,eax
c002ba48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba4c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002ba52:	83 ec 0c             	sub    esp,0xc
c002ba55:	6a 50                	push   0x50
c002ba57:	e8 f1 c6 fe ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c002ba5c:	83 c4 10             	add    esp,0x10
c002ba5f:	89 c2                	mov    edx,eax
c002ba61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba65:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002ba6b:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002ba70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002ba74:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002ba7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002ba7e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002ba84:	83 ec 0c             	sub    esp,0xc
c002ba87:	6a 03                	push   0x3
c002ba89:	6a 50                	push   0x50
c002ba8b:	51                   	push   ecx
c002ba8c:	52                   	push   edx
c002ba8d:	50                   	push   eax
c002ba8e:	e8 c7 cf fe ff       	call   c0018a5a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002ba93:	83 c4 20             	add    esp,0x20
c002ba96:	90                   	nop
c002ba97:	83 c4 0c             	add    esp,0xc
c002ba9a:	c3                   	ret    
c002ba9b:	90                   	nop

c002ba9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002ba9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002baa0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002baa3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002baa6:	09 c2                	or     edx,eax
c002baa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002baac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002bab2:	8b 08                	mov    ecx,DWORD PTR [eax]
c002bab4:	31 c0                	xor    eax,eax
c002bab6:	c1 e9 08             	shr    ecx,0x8
c002bab9:	83 e1 0f             	and    ecx,0xf
c002babc:	39 c8                	cmp    eax,ecx
c002babe:	74 0a                	je     c002baca <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002bac0:	f6 c2 01             	test   dl,0x1
c002bac3:	74 08                	je     c002bacd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002bac5:	d1 ea                	shr    edx,1
c002bac7:	40                   	inc    eax
c002bac8:	eb f2                	jmp    c002babc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002baca:	83 c8 ff             	or     eax,0xffffffff
c002bacd:	c3                   	ret    

c002bace <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002bace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bad2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002bad5:	89 c2                	mov    edx,eax
c002bad7:	c1 ea 08             	shr    edx,0x8
c002bada:	83 e2 0f             	and    edx,0xf
c002badd:	4a                   	dec    edx
c002bade:	75 32                	jne    c002bb12 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bae0:	83 e0 0f             	and    eax,0xf
c002bae3:	83 f8 03             	cmp    eax,0x3
c002bae6:	75 2a                	jne    c002bb12 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bae8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002baeb:	b8 02 00 00 00       	mov    eax,0x2
c002baf0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002baf6:	74 1c                	je     c002bb14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002baf8:	b8 04 00 00 00       	mov    eax,0x4
c002bafd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002bb03:	74 0f                	je     c002bb14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bb05:	31 c0                	xor    eax,eax
c002bb07:	83 fa 03             	cmp    edx,0x3
c002bb0a:	0f 94 c0             	sete   al
c002bb0d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002bb11:	c3                   	ret    
c002bb12:	31 c0                	xor    eax,eax
c002bb14:	c3                   	ret    
c002bb15:	90                   	nop

c002bb16 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002bb16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bb1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb1d:	0f ba e2 0f          	bt     edx,0xf
c002bb21:	72 f7                	jb     c002bb1a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002bb23:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb26:	83 ca 10             	or     edx,0x10
c002bb29:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb2c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb2f:	83 ca 01             	or     edx,0x1
c002bb32:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb35:	c3                   	ret    

c002bb36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002bb36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bb3a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb3d:	83 e2 fe             	and    edx,0xfffffffe
c002bb40:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb43:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb46:	83 e2 ef             	and    edx,0xffffffef
c002bb49:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb4f:	0f ba e2 0e          	bt     edx,0xe
c002bb53:	72 f7                	jb     c002bb4c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bb55:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb58:	0f ba e2 0f          	bt     edx,0xf
c002bb5c:	72 ee                	jb     c002bb4c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bb5e:	c3                   	ret    
c002bb5f:	90                   	nop

c002bb60 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002bb60:	55                   	push   ebp
c002bb61:	57                   	push   edi
c002bb62:	56                   	push   esi
c002bb63:	53                   	push   ebx
c002bb64:	83 ec 1c             	sub    esp,0x1c
c002bb67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002bb6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002bb6f:	53                   	push   ebx
c002bb70:	56                   	push   esi
c002bb71:	e8 c0 ff ff ff       	call   c002bb36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002bb76:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002bb7a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bb80:	83 ec 0c             	sub    esp,0xc
c002bb83:	c1 e5 0a             	shl    ebp,0xa
c002bb86:	01 e8                	add    eax,ebp
c002bb88:	89 03                	mov    DWORD PTR [ebx],eax
c002bb8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002bb8c:	68 00 04 00 00       	push   0x400
c002bb91:	6a 00                	push   0x0
c002bb93:	50                   	push   eax
c002bb94:	e8 57 49 fd ff       	call   c00004f0 <memset>
c002bb99:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002bb9f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002bba3:	01 e8                	add    eax,ebp
c002bba5:	83 c4 1c             	add    esp,0x1c
c002bba8:	89 03                	mov    DWORD PTR [ebx],eax
c002bbaa:	c1 e2 08             	shl    edx,0x8
c002bbad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002bbb4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002bbba:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bbc0:	01 f8                	add    eax,edi
c002bbc2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002bbc5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002bbc8:	68 00 01 00 00       	push   0x100
c002bbcd:	6a 00                	push   0x0
c002bbcf:	50                   	push   eax
c002bbd0:	e8 1b 49 fd ff       	call   c00004f0 <memset>
c002bbd5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002bbdb:	01 fa                	add    edx,edi
c002bbdd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bbe1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002bbe4:	c1 e7 0d             	shl    edi,0xd
c002bbe7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002bbee:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002bbf4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002bbfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002bbfe:	31 ff                	xor    edi,edi
c002bc00:	83 c4 10             	add    esp,0x10
c002bc03:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002bc09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002bc0d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002bc13:	83 c5 20             	add    ebp,0x20
c002bc16:	01 f8                	add    eax,edi
c002bc18:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002bc1b:	52                   	push   edx
c002bc1c:	68 00 01 00 00       	push   0x100
c002bc21:	6a 00                	push   0x0
c002bc23:	50                   	push   eax
c002bc24:	e8 c7 48 fd ff       	call   c00004f0 <memset>
c002bc29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002bc2d:	83 c4 10             	add    esp,0x10
c002bc30:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002bc36:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002bc3d:	01 f8                	add    eax,edi
c002bc3f:	81 c7 00 01 00 00    	add    edi,0x100
c002bc45:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002bc48:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002bc4e:	75 b3                	jne    c002bc03 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002bc50:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bc57:	50                   	push   eax
c002bc58:	50                   	push   eax
c002bc59:	53                   	push   ebx
c002bc5a:	56                   	push   esi
c002bc5b:	e8 b6 fe ff ff       	call   c002bb16 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002bc60:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bc67:	83 c4 2c             	add    esp,0x2c
c002bc6a:	5b                   	pop    ebx
c002bc6b:	5e                   	pop    esi
c002bc6c:	5f                   	pop    edi
c002bc6d:	5d                   	pop    ebp
c002bc6e:	c3                   	ret    
c002bc6f:	90                   	nop

c002bc70 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002bc70:	55                   	push   ebp
c002bc71:	57                   	push   edi
c002bc72:	56                   	push   esi
c002bc73:	53                   	push   ebx
c002bc74:	31 db                	xor    ebx,ebx
c002bc76:	83 ec 0c             	sub    esp,0xc
c002bc79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bc7d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002bc81:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002bc84:	f7 c7 01 00 00 00    	test   edi,0x1
c002bc8a:	74 7a                	je     c002bd06 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bc8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002bc90:	89 d8                	mov    eax,ebx
c002bc92:	c1 e0 07             	shl    eax,0x7
c002bc95:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002bc9c:	55                   	push   ebp
c002bc9d:	56                   	push   esi
c002bc9e:	e8 2b fe ff ff       	call   c002bace <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002bca3:	5a                   	pop    edx
c002bca4:	83 f8 01             	cmp    eax,0x1
c002bca7:	59                   	pop    ecx
c002bca8:	75 21                	jne    c002bccb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002bcaa:	50                   	push   eax
c002bcab:	53                   	push   ebx
c002bcac:	55                   	push   ebp
c002bcad:	56                   	push   esi
c002bcae:	e8 ad fe ff ff       	call   c002bb60 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bcb3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002bcba:	e8 37 a9 fe ff       	call   c00165f6 <malloc>
c002bcbf:	89 c5                	mov    ebp,eax
c002bcc1:	89 04 24             	mov    DWORD PTR [esp],eax
c002bcc4:	e8 bb 10 00 00       	call   c002cd84 <SATA::SATA()>
c002bcc9:	eb 24                	jmp    c002bcef <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002bccb:	83 f8 04             	cmp    eax,0x4
c002bcce:	75 36                	jne    c002bd06 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bcd0:	51                   	push   ecx
c002bcd1:	53                   	push   ebx
c002bcd2:	55                   	push   ebp
c002bcd3:	56                   	push   esi
c002bcd4:	e8 87 fe ff ff       	call   c002bb60 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bcd9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002bce0:	e8 11 a9 fe ff       	call   c00165f6 <malloc>
c002bce5:	89 c5                	mov    ebp,eax
c002bce7:	89 04 24             	mov    DWORD PTR [esp],eax
c002bcea:	e8 2b 18 00 00       	call   c002d51a <SATAPI::SATAPI()>
c002bcef:	58                   	pop    eax
c002bcf0:	5a                   	pop    edx
c002bcf1:	55                   	push   ebp
c002bcf2:	56                   	push   esi
c002bcf3:	e8 0e f8 fe ff       	call   c001b506 <Device::addChild(Device*)>
c002bcf8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002bcfb:	56                   	push   esi
c002bcfc:	6a 00                	push   0x0
c002bcfe:	53                   	push   ebx
c002bcff:	55                   	push   ebp
c002bd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002bd03:	83 c4 20             	add    esp,0x20
c002bd06:	d1 ef                	shr    edi,1
c002bd08:	43                   	inc    ebx
c002bd09:	83 fb 20             	cmp    ebx,0x20
c002bd0c:	0f 85 72 ff ff ff    	jne    c002bc84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002bd12:	83 c4 0c             	add    esp,0xc
c002bd15:	5b                   	pop    ebx
c002bd16:	5e                   	pop    esi
c002bd17:	5f                   	pop    edi
c002bd18:	5d                   	pop    ebp
c002bd19:	c3                   	ret    

c002bd1a <SATABus::open(int, int, void*)>:
c002bd1a:	53                   	push   ebx
c002bd1b:	83 ec 08             	sub    esp,0x8
c002bd1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bd22:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bd28:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bd2e:	e8 e9 94 ff ff       	call   c002521c <KeDisablePreemption()>
c002bd33:	52                   	push   edx
c002bd34:	52                   	push   edx
c002bd35:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bd3b:	53                   	push   ebx
c002bd3c:	e8 2f ff ff ff       	call   c002bc70 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bd41:	e8 fe 94 ff ff       	call   c0025244 <KeRestorePreemption()>
c002bd46:	31 c0                	xor    eax,eax
c002bd48:	83 c4 18             	add    esp,0x18
c002bd4b:	5b                   	pop    ebx
c002bd4c:	c3                   	ret    
c002bd4d:	90                   	nop

c002bd4e <ATA::close(int, int, void*)>:
c002bd4e:	83 ec 0c             	sub    esp,0xc
c002bd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bd55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002bd5b:	85 c0                	test   eax,eax
c002bd5d:	74 0c                	je     c002bd6b <ATA::close(int, int, void*)+0x1d>
c002bd5f:	83 ec 0c             	sub    esp,0xc
c002bd62:	8b 10                	mov    edx,DWORD PTR [eax]
c002bd64:	50                   	push   eax
c002bd65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002bd68:	83 c4 10             	add    esp,0x10
c002bd6b:	31 c0                	xor    eax,eax
c002bd6d:	83 c4 0c             	add    esp,0xc
c002bd70:	c3                   	ret    
c002bd71:	90                   	nop

c002bd72 <ATA::powerSaving(PowerSavingLevel)>:
c002bd72:	c3                   	ret    
c002bd73:	90                   	nop

c002bd74 <ATA::ATA()>:
c002bd74:	83 ec 0c             	sub    esp,0xc
c002bd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bd7b:	83 ec 04             	sub    esp,0x4
c002bd7e:	68 00 02 00 00       	push   0x200
c002bd83:	68 c5 3b 03 c0       	push   0xc0033bc5
c002bd88:	50                   	push   eax
c002bd89:	e8 5c fb fe ff       	call   c001b8ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c002bd8e:	83 c4 10             	add    esp,0x10
c002bd91:	ba 2c 3b 03 c0       	mov    edx,0xc0033b2c
c002bd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bd9a:	89 10                	mov    DWORD PTR [eax],edx
c002bd9c:	90                   	nop
c002bd9d:	83 c4 0c             	add    esp,0xc
c002bda0:	c3                   	ret    
c002bda1:	90                   	nop

c002bda2 <ATA::flush(bool)>:
c002bda2:	53                   	push   ebx
c002bda3:	83 ec 08             	sub    esp,0x8
c002bda6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bdaa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bdaf:	83 f8 01             	cmp    eax,0x1
c002bdb2:	19 c0                	sbb    eax,eax
c002bdb4:	83 e0 fd             	and    eax,0xfffffffd
c002bdb7:	05 ea 00 00 00       	add    eax,0xea
c002bdbc:	50                   	push   eax
c002bdbd:	6a 07                	push   0x7
c002bdbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdc6:	50                   	push   eax
c002bdc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdcd:	e8 02 f1 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdd2:	83 c4 0c             	add    esp,0xc
c002bdd5:	6a 00                	push   0x0
c002bdd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdde:	50                   	push   eax
c002bddf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bde5:	e8 d2 fb ff ff       	call   c002b9bc <IDE::polling(unsigned char, unsigned int)>
c002bdea:	83 c4 18             	add    esp,0x18
c002bded:	5b                   	pop    ebx
c002bdee:	c3                   	ret    
c002bdef:	90                   	nop

c002bdf0 <ATA::readyForCommand()>:
c002bdf0:	56                   	push   esi
c002bdf1:	53                   	push   ebx
c002bdf2:	53                   	push   ebx
c002bdf3:	31 db                	xor    ebx,ebx
c002bdf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bdf9:	51                   	push   ecx
c002bdfa:	6a 0c                	push   0xc
c002bdfc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002be03:	50                   	push   eax
c002be04:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002be0a:	e8 85 f1 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002be0f:	83 c4 10             	add    esp,0x10
c002be12:	a8 88                	test   al,0x88
c002be14:	74 1f                	je     c002be35 <ATA::readyForCommand()+0x45>
c002be16:	43                   	inc    ebx
c002be17:	83 fb 63             	cmp    ebx,0x63
c002be1a:	7e dd                	jle    c002bdf9 <ATA::readyForCommand()+0x9>
c002be1c:	83 ec 0c             	sub    esp,0xc
c002be1f:	6a 0a                	push   0xa
c002be21:	e8 66 98 ff ff       	call   c002568c <milliTenthSleep(unsigned int)>
c002be26:	83 c4 10             	add    esp,0x10
c002be29:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002be2f:	75 c8                	jne    c002bdf9 <ATA::readyForCommand()+0x9>
c002be31:	31 c0                	xor    eax,eax
c002be33:	eb 02                	jmp    c002be37 <ATA::readyForCommand()+0x47>
c002be35:	b0 01                	mov    al,0x1
c002be37:	5a                   	pop    edx
c002be38:	5b                   	pop    ebx
c002be39:	5e                   	pop    esi
c002be3a:	c3                   	ret    
c002be3b:	90                   	nop

c002be3c <ATA::access(unsigned long long, int, void*, bool)>:
c002be3c:	55                   	push   ebp
c002be3d:	57                   	push   edi
c002be3e:	56                   	push   esi
c002be3f:	53                   	push   ebx
c002be40:	83 ec 2c             	sub    esp,0x2c
c002be43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002be47:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002be4b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002be4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002be53:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002be57:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002be5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002be5f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002be65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002be69:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002be6f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002be73:	c1 e0 06             	shl    eax,0x6
c002be76:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002be7e:	74 5d                	je     c002bedd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002be80:	89 fa                	mov    edx,edi
c002be82:	89 f0                	mov    eax,esi
c002be84:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002be88:	c1 ea 1c             	shr    edx,0x1c
c002be8b:	89 d1                	mov    ecx,edx
c002be8d:	09 c1                	or     ecx,eax
c002be8f:	74 25                	je     c002beb6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002be91:	31 ed                	xor    ebp,ebp
c002be93:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002be9a:	89 fa                	mov    edx,edi
c002be9c:	89 f0                	mov    eax,esi
c002be9e:	0f ad d0             	shrd   eax,edx,cl
c002bea1:	d3 ea                	shr    edx,cl
c002bea3:	f6 c1 20             	test   cl,0x20
c002bea6:	74 02                	je     c002beaa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bea8:	89 d0                	mov    eax,edx
c002beaa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002beae:	45                   	inc    ebp
c002beaf:	83 fd 06             	cmp    ebp,0x6
c002beb2:	75 df                	jne    c002be93 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002beb4:	eb 76                	jmp    c002bf2c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002beb6:	89 f0                	mov    eax,esi
c002beb8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bebd:	89 fa                	mov    edx,edi
c002bebf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bec6:	0f ac d0 10          	shrd   eax,edx,0x10
c002beca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002becf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bed3:	c1 ee 18             	shr    esi,0x18
c002bed6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002bedb:	eb 56                	jmp    c002bf33 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bedd:	6a 00                	push   0x0
c002bedf:	6a 3f                	push   0x3f
c002bee1:	57                   	push   edi
c002bee2:	56                   	push   esi
c002bee3:	e8 c8 2a 00 00       	call   c002e9b0 <__umoddi3>
c002bee8:	83 c4 10             	add    esp,0x10
c002beeb:	40                   	inc    eax
c002beec:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bef0:	6a 00                	push   0x0
c002bef2:	68 f0 03 00 00       	push   0x3f0
c002bef7:	57                   	push   edi
c002bef8:	56                   	push   esi
c002bef9:	e8 b2 29 00 00       	call   c002e8b0 <__udivdi3>
c002befe:	83 c4 10             	add    esp,0x10
c002bf01:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bf06:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bf0d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bf12:	6a 00                	push   0x0
c002bf14:	6a 3f                	push   0x3f
c002bf16:	57                   	push   edi
c002bf17:	56                   	push   esi
c002bf18:	e8 93 29 00 00       	call   c002e8b0 <__udivdi3>
c002bf1d:	83 c4 10             	add    esp,0x10
c002bf20:	83 e0 0f             	and    eax,0xf
c002bf23:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002bf28:	89 c6                	mov    esi,eax
c002bf2a:	eb 07                	jmp    c002bf33 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bf2c:	31 f6                	xor    esi,esi
c002bf2e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002bf33:	bf 01 00 00 00       	mov    edi,0x1
c002bf38:	50                   	push   eax
c002bf39:	6a 00                	push   0x0
c002bf3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf42:	50                   	push   eax
c002bf43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bf47:	e8 90 f1 ff ff       	call   c002b0dc <IDE::enableIRQs(unsigned char, bool)>
c002bf4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bf4f:	e8 9c fe ff ff       	call   c002bdf0 <ATA::readyForCommand()>
c002bf54:	83 c4 10             	add    esp,0x10
c002bf57:	84 c0                	test   al,al
c002bf59:	0f 84 69 02 00 00    	je     c002c1c8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bf5f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bf65:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bf6b:	c1 e0 04             	shl    eax,0x4
c002bf6e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bf75:	09 c6                	or     esi,eax
c002bf77:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002bf7c:	75 05                	jne    c002bf83 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bf7e:	83 ce a0             	or     esi,0xffffffa0
c002bf81:	eb 03                	jmp    c002bf86 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002bf83:	83 ce e0             	or     esi,0xffffffe0
c002bf86:	89 f0                	mov    eax,esi
c002bf88:	0f b6 f0             	movzx  esi,al
c002bf8b:	56                   	push   esi
c002bf8c:	6a 06                	push   0x6
c002bf8e:	51                   	push   ecx
c002bf8f:	52                   	push   edx
c002bf90:	e8 3f ef ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf95:	83 c4 10             	add    esp,0x10
c002bf98:	6a 00                	push   0x0
c002bf9a:	6a 01                	push   0x1
c002bf9c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfa3:	50                   	push   eax
c002bfa4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfaa:	e8 25 ef ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfaf:	83 c4 10             	add    esp,0x10
c002bfb2:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002bfb7:	83 f8 02             	cmp    eax,0x2
c002bfba:	75 6e                	jne    c002c02a <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002bfbc:	6a 00                	push   0x0
c002bfbe:	6a 08                	push   0x8
c002bfc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfc7:	50                   	push   eax
c002bfc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfce:	e8 01 ef ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfd3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bfd8:	50                   	push   eax
c002bfd9:	6a 09                	push   0x9
c002bfdb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfe2:	50                   	push   eax
c002bfe3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfe9:	e8 e6 ee ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfee:	83 c4 20             	add    esp,0x20
c002bff1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bff6:	50                   	push   eax
c002bff7:	6a 0a                	push   0xa
c002bff9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c000:	50                   	push   eax
c002c001:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c007:	e8 c8 ee ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c00c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002c011:	50                   	push   eax
c002c012:	6a 0b                	push   0xb
c002c014:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c01b:	50                   	push   eax
c002c01c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c022:	e8 ad ee ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c027:	83 c4 20             	add    esp,0x20
c002c02a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002c02f:	50                   	push   eax
c002c030:	6a 02                	push   0x2
c002c032:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c039:	50                   	push   eax
c002c03a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c040:	e8 8f ee ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c045:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002c04a:	50                   	push   eax
c002c04b:	6a 03                	push   0x3
c002c04d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c054:	50                   	push   eax
c002c055:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c05b:	e8 74 ee ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c060:	83 c4 20             	add    esp,0x20
c002c063:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002c068:	50                   	push   eax
c002c069:	6a 04                	push   0x4
c002c06b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c072:	50                   	push   eax
c002c073:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c079:	e8 56 ee ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c07e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002c083:	50                   	push   eax
c002c084:	6a 05                	push   0x5
c002c086:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c08d:	50                   	push   eax
c002c08e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c094:	e8 3b ee ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c099:	83 c4 20             	add    esp,0x20
c002c09c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c0a1:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002c0a6:	74 11                	je     c002c0b9 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002c0a8:	b8 30 00 00 00       	mov    eax,0x30
c002c0ad:	83 fa 02             	cmp    edx,0x2
c002c0b0:	75 16                	jne    c002c0c8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c0b2:	b8 34 00 00 00       	mov    eax,0x34
c002c0b7:	eb 0f                	jmp    c002c0c8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c0b9:	b8 20 00 00 00       	mov    eax,0x20
c002c0be:	83 fa 02             	cmp    edx,0x2
c002c0c1:	75 05                	jne    c002c0c8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c0c3:	b8 24 00 00 00       	mov    eax,0x24
c002c0c8:	50                   	push   eax
c002c0c9:	6a 07                	push   0x7
c002c0cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0d2:	50                   	push   eax
c002c0d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0d9:	e8 f6 ed ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0de:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002c0e2:	83 c4 10             	add    esp,0x10
c002c0e5:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002c0ea:	85 f6                	test   esi,esi
c002c0ec:	0f 84 b3 00 00 00    	je     c002c1a5 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002c0f2:	50                   	push   eax
c002c0f3:	6a 01                	push   0x1
c002c0f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0fc:	50                   	push   eax
c002c0fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c103:	e8 b4 f8 ff ff       	call   c002b9bc <IDE::polling(unsigned char, unsigned int)>
c002c108:	83 c4 10             	add    esp,0x10
c002c10b:	0f b6 f8             	movzx  edi,al
c002c10e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002c114:	85 ff                	test   edi,edi
c002c116:	74 1d                	je     c002c135 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002c118:	57                   	push   edi
c002c119:	0f b6 d2             	movzx  edx,dl
c002c11c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002c123:	50                   	push   eax
c002c124:	52                   	push   edx
c002c125:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c12b:	e8 d2 f7 ff ff       	call   c002b902 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c130:	e9 90 00 00 00       	jmp    c002c1c5 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002c135:	85 ed                	test   ebp,ebp
c002c137:	74 3b                	je     c002c174 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002c139:	31 c9                	xor    ecx,ecx
c002c13b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002c13f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002c143:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002c147:	50                   	push   eax
c002c148:	50                   	push   eax
c002c149:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c150:	50                   	push   eax
c002c151:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c157:	e8 66 ed ff ff       	call   c002aec2 <IDE::getBase(unsigned char)>
c002c15c:	89 c2                	mov    edx,eax
c002c15e:	89 f8                	mov    eax,edi
c002c160:	66 ef                	out    dx,ax
c002c162:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002c166:	83 c4 10             	add    esp,0x10
c002c169:	41                   	inc    ecx
c002c16a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002c170:	75 c9                	jne    c002c13b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002c172:	eb 23                	jmp    c002c197 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002c174:	0f b6 d2             	movzx  edx,dl
c002c177:	51                   	push   ecx
c002c178:	51                   	push   ecx
c002c179:	52                   	push   edx
c002c17a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c180:	e8 3d ed ff ff       	call   c002aec2 <IDE::getBase(unsigned char)>
c002c185:	b9 00 01 00 00       	mov    ecx,0x100
c002c18a:	89 c2                	mov    edx,eax
c002c18c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c190:	fc                   	cld    
c002c191:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c194:	83 c4 10             	add    esp,0x10
c002c197:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c19f:	4e                   	dec    esi
c002c1a0:	e9 45 ff ff ff       	jmp    c002c0ea <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002c1a5:	31 ff                	xor    edi,edi
c002c1a7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c1ac:	74 1a                	je     c002c1c8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002c1ae:	50                   	push   eax
c002c1af:	50                   	push   eax
c002c1b0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002c1b5:	83 f8 02             	cmp    eax,0x2
c002c1b8:	0f 94 c0             	sete   al
c002c1bb:	0f b6 c0             	movzx  eax,al
c002c1be:	50                   	push   eax
c002c1bf:	53                   	push   ebx
c002c1c0:	e8 dd fb ff ff       	call   c002bda2 <ATA::flush(bool)>
c002c1c5:	83 c4 10             	add    esp,0x10
c002c1c8:	83 c4 2c             	add    esp,0x2c
c002c1cb:	89 f8                	mov    eax,edi
c002c1cd:	5b                   	pop    ebx
c002c1ce:	5e                   	pop    esi
c002c1cf:	5f                   	pop    edi
c002c1d0:	5d                   	pop    ebp
c002c1d1:	c3                   	ret    

c002c1d2 <ATA::detectCHS()>:
c002c1d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c1d6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c1dc:	c1 e0 06             	shl    eax,0x6
c002c1df:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c1e5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c1ef:	c7 44 24 04 10 3b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033b10
c002c1f7:	e9 a2 42 ff ff       	jmp    c002049e <KePanic(char const*)>

c002c1fc <ATA::open(int, int, void*)>:
c002c1fc:	53                   	push   ebx
c002c1fd:	83 ec 08             	sub    esp,0x8
c002c200:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c204:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c208:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c20c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c212:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c218:	c1 e0 06             	shl    eax,0x6
c002c21b:	01 d0                	add    eax,edx
c002c21d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c224:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c22a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c231:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c23b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c241:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c248:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c24f:	75 0c                	jne    c002c25d <ATA::open(int, int, void*)+0x61>
c002c251:	83 ec 0c             	sub    esp,0xc
c002c254:	53                   	push   ebx
c002c255:	e8 78 ff ff ff       	call   c002c1d2 <ATA::detectCHS()>
c002c25a:	83 c4 10             	add    esp,0x10
c002c25d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c263:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c269:	c1 e0 06             	shl    eax,0x6
c002c26c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c273:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c27d:	d1 e8                	shr    eax,1
c002c27f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c285:	6a 04                	push   0x4
c002c287:	6a 0c                	push   0xc
c002c289:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c290:	50                   	push   eax
c002c291:	52                   	push   edx
c002c292:	e8 3d ec ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c297:	90                   	nop
c002c298:	90                   	nop
c002c299:	6a 00                	push   0x0
c002c29b:	6a 0c                	push   0xc
c002c29d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c2a4:	50                   	push   eax
c002c2a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c2ab:	e8 24 ec ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c2b0:	83 c4 14             	add    esp,0x14
c002c2b3:	53                   	push   ebx
c002c2b4:	e8 99 f6 fe ff       	call   c001b952 <PhysicalDisk::startCache()>
c002c2b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c2bc:	e8 cd 08 ff ff       	call   c001cb8e <createPartitionsForDisk(PhysicalDisk*)>
c002c2c1:	31 c0                	xor    eax,eax
c002c2c3:	83 c4 18             	add    esp,0x18
c002c2c6:	5b                   	pop    ebx
c002c2c7:	c3                   	ret    

c002c2c8 <combineCharAndColour(char, unsigned char)>:
c002c2c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c2cd:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c2d3:	c1 e0 08             	shl    eax,0x8
c002c2d6:	09 d0                	or     eax,edx
c002c2d8:	c3                   	ret    

c002c2d9 <combineColours(unsigned char, unsigned char)>:
c002c2d9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c2de:	c1 e0 04             	shl    eax,0x4
c002c2e1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c2e5:	c3                   	ret    

c002c2e6 <ATA::read(unsigned long long, int, void*)>:
c002c2e6:	55                   	push   ebp
c002c2e7:	57                   	push   edi
c002c2e8:	56                   	push   esi
c002c2e9:	be 04 00 00 00       	mov    esi,0x4
c002c2ee:	53                   	push   ebx
c002c2ef:	83 ec 0c             	sub    esp,0xc
c002c2f2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c2f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c2fa:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c2fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c301:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c305:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c30b:	0f 87 a1 01 00 00    	ja     c002c4b2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c311:	be 06 00 00 00       	mov    esi,0x6
c002c316:	85 c9                	test   ecx,ecx
c002c318:	0f 84 94 01 00 00    	je     c002c4b2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c31e:	55                   	push   ebp
c002c31f:	55                   	push   ebp
c002c320:	6a 00                	push   0x0
c002c322:	51                   	push   ecx
c002c323:	53                   	push   ebx
c002c324:	52                   	push   edx
c002c325:	50                   	push   eax
c002c326:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c32a:	e8 0d fb ff ff       	call   c002be3c <ATA::access(unsigned long long, int, void*, bool)>
c002c32f:	83 c4 20             	add    esp,0x20
c002c332:	89 c6                	mov    esi,eax
c002c334:	85 c0                	test   eax,eax
c002c336:	0f 85 71 01 00 00    	jne    c002c4ad <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c33c:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c342:	89 da                	mov    edx,ebx
c002c344:	50                   	push   eax
c002c345:	bd 10 27 00 00       	mov    ebp,0x2710
c002c34a:	50                   	push   eax
c002c34b:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c351:	6a 0f                	push   0xf
c002c353:	6a 00                	push   0x0
c002c355:	e8 7f ff ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002c35a:	59                   	pop    ecx
c002c35b:	b9 0a 00 00 00       	mov    ecx,0xa
c002c360:	5b                   	pop    ebx
c002c361:	0f b6 d8             	movzx  ebx,al
c002c364:	89 d0                	mov    eax,edx
c002c366:	53                   	push   ebx
c002c367:	99                   	cdq    
c002c368:	f7 fd                	idiv   ebp
c002c36a:	99                   	cdq    
c002c36b:	f7 f9                	idiv   ecx
c002c36d:	83 c2 30             	add    edx,0x30
c002c370:	0f b6 d2             	movzx  edx,dl
c002c373:	52                   	push   edx
c002c374:	e8 4f ff ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c379:	5f                   	pop    edi
c002c37a:	bf e8 03 00 00       	mov    edi,0x3e8
c002c37f:	5a                   	pop    edx
c002c380:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c386:	53                   	push   ebx
c002c387:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c38c:	99                   	cdq    
c002c38d:	f7 ff                	idiv   edi
c002c38f:	99                   	cdq    
c002c390:	f7 f9                	idiv   ecx
c002c392:	8d 42 30             	lea    eax,[edx+0x30]
c002c395:	0f b6 c0             	movzx  eax,al
c002c398:	50                   	push   eax
c002c399:	e8 2a ff ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c39e:	5f                   	pop    edi
c002c39f:	bf 64 00 00 00       	mov    edi,0x64
c002c3a4:	5a                   	pop    edx
c002c3a5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c3ab:	53                   	push   ebx
c002c3ac:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3b1:	99                   	cdq    
c002c3b2:	f7 ff                	idiv   edi
c002c3b4:	99                   	cdq    
c002c3b5:	f7 f9                	idiv   ecx
c002c3b7:	8d 42 30             	lea    eax,[edx+0x30]
c002c3ba:	0f b6 c0             	movzx  eax,al
c002c3bd:	50                   	push   eax
c002c3be:	e8 05 ff ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c3c3:	5a                   	pop    edx
c002c3c4:	5a                   	pop    edx
c002c3c5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c3cb:	53                   	push   ebx
c002c3cc:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3d1:	99                   	cdq    
c002c3d2:	f7 f9                	idiv   ecx
c002c3d4:	99                   	cdq    
c002c3d5:	f7 f9                	idiv   ecx
c002c3d7:	8d 42 30             	lea    eax,[edx+0x30]
c002c3da:	0f b6 c0             	movzx  eax,al
c002c3dd:	50                   	push   eax
c002c3de:	e8 e5 fe ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c3e3:	5a                   	pop    edx
c002c3e4:	5a                   	pop    edx
c002c3e5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c3eb:	53                   	push   ebx
c002c3ec:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3f1:	99                   	cdq    
c002c3f2:	f7 f9                	idiv   ecx
c002c3f4:	83 c2 30             	add    edx,0x30
c002c3f7:	0f b6 d2             	movzx  edx,dl
c002c3fa:	52                   	push   edx
c002c3fb:	e8 c8 fe ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c400:	5a                   	pop    edx
c002c401:	5a                   	pop    edx
c002c402:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c408:	53                   	push   ebx
c002c409:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c40e:	99                   	cdq    
c002c40f:	f7 fd                	idiv   ebp
c002c411:	99                   	cdq    
c002c412:	f7 f9                	idiv   ecx
c002c414:	8d 42 30             	lea    eax,[edx+0x30]
c002c417:	0f b6 c0             	movzx  eax,al
c002c41a:	50                   	push   eax
c002c41b:	e8 a8 fe ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c420:	5d                   	pop    ebp
c002c421:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c426:	5a                   	pop    edx
c002c427:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c42d:	53                   	push   ebx
c002c42e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c433:	99                   	cdq    
c002c434:	f7 fd                	idiv   ebp
c002c436:	99                   	cdq    
c002c437:	f7 f9                	idiv   ecx
c002c439:	8d 42 30             	lea    eax,[edx+0x30]
c002c43c:	0f b6 c0             	movzx  eax,al
c002c43f:	50                   	push   eax
c002c440:	e8 83 fe ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c445:	5d                   	pop    ebp
c002c446:	5a                   	pop    edx
c002c447:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c44d:	53                   	push   ebx
c002c44e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c453:	99                   	cdq    
c002c454:	f7 ff                	idiv   edi
c002c456:	99                   	cdq    
c002c457:	f7 f9                	idiv   ecx
c002c459:	8d 42 30             	lea    eax,[edx+0x30]
c002c45c:	0f b6 c0             	movzx  eax,al
c002c45f:	50                   	push   eax
c002c460:	e8 63 fe ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c465:	5f                   	pop    edi
c002c466:	5d                   	pop    ebp
c002c467:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c46d:	53                   	push   ebx
c002c46e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c473:	99                   	cdq    
c002c474:	f7 f9                	idiv   ecx
c002c476:	99                   	cdq    
c002c477:	f7 f9                	idiv   ecx
c002c479:	8d 42 30             	lea    eax,[edx+0x30]
c002c47c:	0f b6 c0             	movzx  eax,al
c002c47f:	50                   	push   eax
c002c480:	e8 43 fe ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c485:	5a                   	pop    edx
c002c486:	5f                   	pop    edi
c002c487:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c48d:	53                   	push   ebx
c002c48e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c493:	99                   	cdq    
c002c494:	f7 f9                	idiv   ecx
c002c496:	83 c2 30             	add    edx,0x30
c002c499:	0f b6 d2             	movzx  edx,dl
c002c49c:	52                   	push   edx
c002c49d:	e8 26 fe ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c4a2:	83 c4 10             	add    esp,0x10
c002c4a5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c4ab:	eb 05                	jmp    c002c4b2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c4ad:	be 01 00 00 00       	mov    esi,0x1
c002c4b2:	83 c4 0c             	add    esp,0xc
c002c4b5:	89 f0                	mov    eax,esi
c002c4b7:	5b                   	pop    ebx
c002c4b8:	5e                   	pop    esi
c002c4b9:	5f                   	pop    edi
c002c4ba:	5d                   	pop    ebp
c002c4bb:	c3                   	ret    

c002c4bc <ATA::write(unsigned long long, int, void*)>:
c002c4bc:	55                   	push   ebp
c002c4bd:	57                   	push   edi
c002c4be:	56                   	push   esi
c002c4bf:	be 04 00 00 00       	mov    esi,0x4
c002c4c4:	53                   	push   ebx
c002c4c5:	83 ec 0c             	sub    esp,0xc
c002c4c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c4cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c4d0:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c4d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c4d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c4db:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c4e1:	0f 87 9c 01 00 00    	ja     c002c683 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c4e7:	be 06 00 00 00       	mov    esi,0x6
c002c4ec:	85 c9                	test   ecx,ecx
c002c4ee:	0f 84 8f 01 00 00    	je     c002c683 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c4f4:	55                   	push   ebp
c002c4f5:	55                   	push   ebp
c002c4f6:	6a 01                	push   0x1
c002c4f8:	51                   	push   ecx
c002c4f9:	53                   	push   ebx
c002c4fa:	52                   	push   edx
c002c4fb:	50                   	push   eax
c002c4fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c500:	e8 37 f9 ff ff       	call   c002be3c <ATA::access(unsigned long long, int, void*, bool)>
c002c505:	83 c4 20             	add    esp,0x20
c002c508:	89 c6                	mov    esi,eax
c002c50a:	85 c0                	test   eax,eax
c002c50c:	0f 85 6c 01 00 00    	jne    c002c67e <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c512:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c518:	bd 10 27 00 00       	mov    ebp,0x2710
c002c51d:	50                   	push   eax
c002c51e:	50                   	push   eax
c002c51f:	6a 0f                	push   0xf
c002c521:	6a 00                	push   0x0
c002c523:	e8 b1 fd ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002c528:	5a                   	pop    edx
c002c529:	0f b6 d8             	movzx  ebx,al
c002c52c:	59                   	pop    ecx
c002c52d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c532:	53                   	push   ebx
c002c533:	b9 0a 00 00 00       	mov    ecx,0xa
c002c538:	99                   	cdq    
c002c539:	f7 fd                	idiv   ebp
c002c53b:	99                   	cdq    
c002c53c:	f7 f9                	idiv   ecx
c002c53e:	8d 42 30             	lea    eax,[edx+0x30]
c002c541:	0f b6 c0             	movzx  eax,al
c002c544:	50                   	push   eax
c002c545:	e8 7e fd ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c54a:	5f                   	pop    edi
c002c54b:	bf e8 03 00 00       	mov    edi,0x3e8
c002c550:	5a                   	pop    edx
c002c551:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c557:	53                   	push   ebx
c002c558:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c55d:	99                   	cdq    
c002c55e:	f7 ff                	idiv   edi
c002c560:	99                   	cdq    
c002c561:	f7 f9                	idiv   ecx
c002c563:	8d 42 30             	lea    eax,[edx+0x30]
c002c566:	0f b6 c0             	movzx  eax,al
c002c569:	50                   	push   eax
c002c56a:	e8 59 fd ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c56f:	5f                   	pop    edi
c002c570:	bf 64 00 00 00       	mov    edi,0x64
c002c575:	5a                   	pop    edx
c002c576:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c57c:	53                   	push   ebx
c002c57d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c582:	99                   	cdq    
c002c583:	f7 ff                	idiv   edi
c002c585:	99                   	cdq    
c002c586:	f7 f9                	idiv   ecx
c002c588:	8d 42 30             	lea    eax,[edx+0x30]
c002c58b:	0f b6 c0             	movzx  eax,al
c002c58e:	50                   	push   eax
c002c58f:	e8 34 fd ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c594:	5a                   	pop    edx
c002c595:	5a                   	pop    edx
c002c596:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c59c:	53                   	push   ebx
c002c59d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c5a2:	99                   	cdq    
c002c5a3:	f7 f9                	idiv   ecx
c002c5a5:	99                   	cdq    
c002c5a6:	f7 f9                	idiv   ecx
c002c5a8:	8d 42 30             	lea    eax,[edx+0x30]
c002c5ab:	0f b6 c0             	movzx  eax,al
c002c5ae:	50                   	push   eax
c002c5af:	e8 14 fd ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c5b4:	5a                   	pop    edx
c002c5b5:	5a                   	pop    edx
c002c5b6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c5bc:	53                   	push   ebx
c002c5bd:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c5c2:	99                   	cdq    
c002c5c3:	f7 f9                	idiv   ecx
c002c5c5:	8d 42 30             	lea    eax,[edx+0x30]
c002c5c8:	0f b6 c0             	movzx  eax,al
c002c5cb:	50                   	push   eax
c002c5cc:	e8 f7 fc ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c5d1:	5a                   	pop    edx
c002c5d2:	5a                   	pop    edx
c002c5d3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c5d9:	53                   	push   ebx
c002c5da:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c5df:	99                   	cdq    
c002c5e0:	f7 fd                	idiv   ebp
c002c5e2:	99                   	cdq    
c002c5e3:	f7 f9                	idiv   ecx
c002c5e5:	8d 42 30             	lea    eax,[edx+0x30]
c002c5e8:	0f b6 c0             	movzx  eax,al
c002c5eb:	50                   	push   eax
c002c5ec:	e8 d7 fc ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c5f1:	5d                   	pop    ebp
c002c5f2:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c5f7:	5a                   	pop    edx
c002c5f8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c5fe:	53                   	push   ebx
c002c5ff:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c604:	99                   	cdq    
c002c605:	f7 fd                	idiv   ebp
c002c607:	99                   	cdq    
c002c608:	f7 f9                	idiv   ecx
c002c60a:	8d 42 30             	lea    eax,[edx+0x30]
c002c60d:	0f b6 c0             	movzx  eax,al
c002c610:	50                   	push   eax
c002c611:	e8 b2 fc ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c616:	5d                   	pop    ebp
c002c617:	5a                   	pop    edx
c002c618:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c61e:	53                   	push   ebx
c002c61f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c624:	99                   	cdq    
c002c625:	f7 ff                	idiv   edi
c002c627:	99                   	cdq    
c002c628:	f7 f9                	idiv   ecx
c002c62a:	8d 42 30             	lea    eax,[edx+0x30]
c002c62d:	0f b6 c0             	movzx  eax,al
c002c630:	50                   	push   eax
c002c631:	e8 92 fc ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c636:	5f                   	pop    edi
c002c637:	5d                   	pop    ebp
c002c638:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c63e:	53                   	push   ebx
c002c63f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c644:	99                   	cdq    
c002c645:	f7 f9                	idiv   ecx
c002c647:	99                   	cdq    
c002c648:	f7 f9                	idiv   ecx
c002c64a:	8d 42 30             	lea    eax,[edx+0x30]
c002c64d:	0f b6 c0             	movzx  eax,al
c002c650:	50                   	push   eax
c002c651:	e8 72 fc ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c656:	5a                   	pop    edx
c002c657:	5f                   	pop    edi
c002c658:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c65e:	53                   	push   ebx
c002c65f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c664:	99                   	cdq    
c002c665:	f7 f9                	idiv   ecx
c002c667:	83 c2 30             	add    edx,0x30
c002c66a:	0f b6 d2             	movzx  edx,dl
c002c66d:	52                   	push   edx
c002c66e:	e8 55 fc ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002c673:	83 c4 10             	add    esp,0x10
c002c676:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c67c:	eb 05                	jmp    c002c683 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c67e:	be 01 00 00 00       	mov    esi,0x1
c002c683:	83 c4 0c             	add    esp,0xc
c002c686:	89 f0                	mov    eax,esi
c002c688:	5b                   	pop    ebx
c002c689:	5e                   	pop    esi
c002c68a:	5f                   	pop    edi
c002c68b:	5d                   	pop    ebp
c002c68c:	c3                   	ret    
c002c68d:	90                   	nop

c002c68e <ATAPI::write(unsigned long long, int, void*)>:
c002c68e:	b8 03 00 00 00       	mov    eax,0x3
c002c693:	c3                   	ret    

c002c694 <ATAPI::close(int, int, void*)>:
c002c694:	83 ec 0c             	sub    esp,0xc
c002c697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c69b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c6a1:	85 c0                	test   eax,eax
c002c6a3:	74 0c                	je     c002c6b1 <ATAPI::close(int, int, void*)+0x1d>
c002c6a5:	83 ec 0c             	sub    esp,0xc
c002c6a8:	8b 10                	mov    edx,DWORD PTR [eax]
c002c6aa:	50                   	push   eax
c002c6ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c6ae:	83 c4 10             	add    esp,0x10
c002c6b1:	31 c0                	xor    eax,eax
c002c6b3:	83 c4 0c             	add    esp,0xc
c002c6b6:	c3                   	ret    
c002c6b7:	90                   	nop

c002c6b8 <ATAPI::ATAPI()>:
c002c6b8:	83 ec 0c             	sub    esp,0xc
c002c6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c6bf:	83 ec 04             	sub    esp,0x4
c002c6c2:	68 00 08 00 00       	push   0x800
c002c6c7:	68 65 3c 03 c0       	push   0xc0033c65
c002c6cc:	50                   	push   eax
c002c6cd:	e8 18 f2 fe ff       	call   c001b8ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c6d2:	83 c4 10             	add    esp,0x10
c002c6d5:	ba 74 3b 03 c0       	mov    edx,0xc0033b74
c002c6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c6de:	89 10                	mov    DWORD PTR [eax],edx
c002c6e0:	90                   	nop
c002c6e1:	83 c4 0c             	add    esp,0xc
c002c6e4:	c3                   	ret    
c002c6e5:	90                   	nop

c002c6e6 <ATAPI::readyForCommand()>:
c002c6e6:	56                   	push   esi
c002c6e7:	53                   	push   ebx
c002c6e8:	53                   	push   ebx
c002c6e9:	31 db                	xor    ebx,ebx
c002c6eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c6ef:	51                   	push   ecx
c002c6f0:	6a 0c                	push   0xc
c002c6f2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c6f9:	50                   	push   eax
c002c6fa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c700:	e8 8f e8 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002c705:	83 c4 10             	add    esp,0x10
c002c708:	a8 88                	test   al,0x88
c002c70a:	74 25                	je     c002c731 <ATAPI::readyForCommand()+0x4b>
c002c70c:	43                   	inc    ebx
c002c70d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c713:	7e da                	jle    c002c6ef <ATAPI::readyForCommand()+0x9>
c002c715:	83 ec 0c             	sub    esp,0xc
c002c718:	68 5e 01 00 00       	push   0x15e
c002c71d:	e8 6a 8f ff ff       	call   c002568c <milliTenthSleep(unsigned int)>
c002c722:	83 c4 10             	add    esp,0x10
c002c725:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c72b:	75 c2                	jne    c002c6ef <ATAPI::readyForCommand()+0x9>
c002c72d:	31 c0                	xor    eax,eax
c002c72f:	eb 02                	jmp    c002c733 <ATAPI::readyForCommand()+0x4d>
c002c731:	b0 01                	mov    al,0x1
c002c733:	5a                   	pop    edx
c002c734:	5b                   	pop    ebx
c002c735:	5e                   	pop    esi
c002c736:	c3                   	ret    
c002c737:	90                   	nop

c002c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c738:	55                   	push   ebp
c002c739:	57                   	push   edi
c002c73a:	56                   	push   esi
c002c73b:	53                   	push   ebx
c002c73c:	83 ec 20             	sub    esp,0x20
c002c73f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c743:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c747:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c74b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c74f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c753:	6a 01                	push   0x1
c002c755:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c75c:	50                   	push   eax
c002c75d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c763:	e8 74 e9 ff ff       	call   c002b0dc <IDE::enableIRQs(unsigned char, bool)>
c002c768:	5e                   	pop    esi
c002c769:	58                   	pop    eax
c002c76a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c771:	50                   	push   eax
c002c772:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c778:	e8 31 e7 ff ff       	call   c002aeae <IDE::prepareInterrupt(unsigned char)>
c002c77d:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c780:	e8 61 ff ff ff       	call   c002c6e6 <ATAPI::readyForCommand()>
c002c785:	83 c4 10             	add    esp,0x10
c002c788:	84 c0                	test   al,al
c002c78a:	75 0a                	jne    c002c796 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c78c:	bb 01 00 00 00       	mov    ebx,0x1
c002c791:	e9 60 02 00 00       	jmp    c002c9f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c796:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c79c:	c1 e0 04             	shl    eax,0x4
c002c79f:	0f b6 c0             	movzx  eax,al
c002c7a2:	50                   	push   eax
c002c7a3:	6a 06                	push   0x6
c002c7a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7ac:	50                   	push   eax
c002c7ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7b3:	e8 1c e7 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c7b8:	6a 00                	push   0x0
c002c7ba:	6a 01                	push   0x1
c002c7bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7c3:	50                   	push   eax
c002c7c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7ca:	e8 05 e7 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c7cf:	83 c4 20             	add    esp,0x20
c002c7d2:	0f b6 c3             	movzx  eax,bl
c002c7d5:	0f b6 df             	movzx  ebx,bh
c002c7d8:	50                   	push   eax
c002c7d9:	6a 04                	push   0x4
c002c7db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7e2:	50                   	push   eax
c002c7e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7e9:	e8 e6 e6 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c7ee:	53                   	push   ebx
c002c7ef:	6a 05                	push   0x5
c002c7f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7f8:	50                   	push   eax
c002c7f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7ff:	e8 d0 e6 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c804:	83 c4 20             	add    esp,0x20
c002c807:	68 a0 00 00 00       	push   0xa0
c002c80c:	6a 07                	push   0x7
c002c80e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c815:	50                   	push   eax
c002c816:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c81c:	e8 b3 e6 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c821:	83 c4 0c             	add    esp,0xc
c002c824:	6a 01                	push   0x1
c002c826:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c82d:	50                   	push   eax
c002c82e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c834:	e8 83 f1 ff ff       	call   c002b9bc <IDE::polling(unsigned char, unsigned int)>
c002c839:	83 c4 10             	add    esp,0x10
c002c83c:	0f b6 d8             	movzx  ebx,al
c002c83f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c845:	85 db                	test   ebx,ebx
c002c847:	74 20                	je     c002c869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c849:	53                   	push   ebx
c002c84a:	0f b6 c0             	movzx  eax,al
c002c84d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c854:	52                   	push   edx
c002c855:	50                   	push   eax
c002c856:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c85c:	e8 a1 f0 ff ff       	call   c002b902 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c861:	83 c4 10             	add    esp,0x10
c002c864:	e9 8d 01 00 00       	jmp    c002c9f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c869:	0f b6 c0             	movzx  eax,al
c002c86c:	53                   	push   ebx
c002c86d:	53                   	push   ebx
c002c86e:	50                   	push   eax
c002c86f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c875:	e8 48 e6 ff ff       	call   c002aec2 <IDE::getBase(unsigned char)>
c002c87a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c87e:	b9 06 00 00 00       	mov    ecx,0x6
c002c883:	89 c2                	mov    edx,eax
c002c885:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c888:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c88c:	83 c4 10             	add    esp,0x10
c002c88f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c894:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c898:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c89e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c8a5:	85 db                	test   ebx,ebx
c002c8a7:	0f 84 ec 00 00 00    	je     c002c999 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c8ad:	51                   	push   ecx
c002c8ae:	51                   	push   ecx
c002c8af:	52                   	push   edx
c002c8b0:	50                   	push   eax
c002c8b1:	e8 8c e7 ff ff       	call   c002b042 <IDE::waitInterrupt(unsigned char)>
c002c8b6:	83 c4 10             	add    esp,0x10
c002c8b9:	84 c0                	test   al,al
c002c8bb:	0f 84 cb fe ff ff    	je     c002c78c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c8c1:	56                   	push   esi
c002c8c2:	56                   	push   esi
c002c8c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c8ca:	50                   	push   eax
c002c8cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8d1:	e8 d8 e5 ff ff       	call   c002aeae <IDE::prepareInterrupt(unsigned char)>
c002c8d6:	83 c4 0c             	add    esp,0xc
c002c8d9:	6a 04                	push   0x4
c002c8db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c8e2:	50                   	push   eax
c002c8e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8e9:	e8 a6 e6 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002c8ee:	83 c4 0c             	add    esp,0xc
c002c8f1:	89 c6                	mov    esi,eax
c002c8f3:	6a 05                	push   0x5
c002c8f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c8fc:	50                   	push   eax
c002c8fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c903:	e8 8c e6 ff ff       	call   c002af94 <IDE::read(unsigned char, unsigned char)>
c002c908:	89 f1                	mov    ecx,esi
c002c90a:	0f b6 c0             	movzx  eax,al
c002c90d:	0f b6 f1             	movzx  esi,cl
c002c910:	c1 e0 08             	shl    eax,0x8
c002c913:	09 c6                	or     esi,eax
c002c915:	d1 fe                	sar    esi,1
c002c917:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c91b:	83 c4 10             	add    esp,0x10
c002c91e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c923:	74 41                	je     c002c966 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c925:	31 c9                	xor    ecx,ecx
c002c927:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c92d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c934:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c938:	75 0a                	jne    c002c944 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c93a:	01 c9                	add    ecx,ecx
c002c93c:	01 cd                	add    ebp,ecx
c002c93e:	4b                   	dec    ebx
c002c93f:	e9 54 ff ff ff       	jmp    c002c898 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c944:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c949:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c94d:	51                   	push   ecx
c002c94e:	51                   	push   ecx
c002c94f:	52                   	push   edx
c002c950:	50                   	push   eax
c002c951:	e8 6c e5 ff ff       	call   c002aec2 <IDE::getBase(unsigned char)>
c002c956:	89 c2                	mov    edx,eax
c002c958:	89 f0                	mov    eax,esi
c002c95a:	66 ef                	out    dx,ax
c002c95c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c960:	83 c4 10             	add    esp,0x10
c002c963:	41                   	inc    ecx
c002c964:	eb c1                	jmp    c002c927 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c966:	31 f6                	xor    esi,esi
c002c968:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c96e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c975:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c979:	75 06                	jne    c002c981 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c97b:	01 f6                	add    esi,esi
c002c97d:	01 f5                	add    ebp,esi
c002c97f:	eb bd                	jmp    c002c93e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c981:	51                   	push   ecx
c002c982:	51                   	push   ecx
c002c983:	52                   	push   edx
c002c984:	50                   	push   eax
c002c985:	e8 38 e5 ff ff       	call   c002aec2 <IDE::getBase(unsigned char)>
c002c98a:	89 c2                	mov    edx,eax
c002c98c:	66 ed                	in     ax,dx
c002c98e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c993:	83 c4 10             	add    esp,0x10
c002c996:	46                   	inc    esi
c002c997:	eb cf                	jmp    c002c968 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c999:	51                   	push   ecx
c002c99a:	51                   	push   ecx
c002c99b:	52                   	push   edx
c002c99c:	50                   	push   eax
c002c99d:	e8 a0 e6 ff ff       	call   c002b042 <IDE::waitInterrupt(unsigned char)>
c002c9a2:	83 c4 10             	add    esp,0x10
c002c9a5:	84 c0                	test   al,al
c002c9a7:	0f 84 df fd ff ff    	je     c002c78c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c9ad:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c9b2:	52                   	push   edx
c002c9b3:	52                   	push   edx
c002c9b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c9bb:	50                   	push   eax
c002c9bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c9c2:	e8 e7 e4 ff ff       	call   c002aeae <IDE::prepareInterrupt(unsigned char)>
c002c9c7:	83 c4 10             	add    esp,0x10
c002c9ca:	50                   	push   eax
c002c9cb:	50                   	push   eax
c002c9cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c9d3:	50                   	push   eax
c002c9d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c9da:	e8 e3 e4 ff ff       	call   c002aec2 <IDE::getBase(unsigned char)>
c002c9df:	8d 50 07             	lea    edx,[eax+0x7]
c002c9e2:	ec                   	in     al,dx
c002c9e3:	83 c4 10             	add    esp,0x10
c002c9e6:	a8 88                	test   al,0x88
c002c9e8:	74 0a                	je     c002c9f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002c9ea:	4b                   	dec    ebx
c002c9eb:	75 dd                	jne    c002c9ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002c9ed:	bb 02 00 00 00       	mov    ebx,0x2
c002c9f2:	eb 02                	jmp    c002c9f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c9f4:	31 db                	xor    ebx,ebx
c002c9f6:	83 c4 1c             	add    esp,0x1c
c002c9f9:	89 d8                	mov    eax,ebx
c002c9fb:	5b                   	pop    ebx
c002c9fc:	5e                   	pop    esi
c002c9fd:	5f                   	pop    edi
c002c9fe:	5d                   	pop    ebp
c002c9ff:	c3                   	ret    

c002ca00 <ATAPI::diskRemoved()>:
c002ca00:	53                   	push   ebx
c002ca01:	83 ec 14             	sub    esp,0x14
c002ca04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ca08:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002ca0f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002ca15:	e8 64 fe fe ff       	call   c001c87e <LogicalDisk::unmount()>
c002ca1a:	58                   	pop    eax
c002ca1b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002ca21:	e8 36 08 ff ff       	call   c001d25c <VCache::writeWriteBuffer()>
c002ca26:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002ca2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ca30:	83 c4 18             	add    esp,0x18
c002ca33:	5b                   	pop    ebx
c002ca34:	e9 13 08 ff ff       	jmp    c001d24c <VCache::invalidateReadBuffer()>
c002ca39:	90                   	nop

c002ca3a <ATAPI::eject()>:
c002ca3a:	57                   	push   edi
c002ca3b:	b9 03 00 00 00       	mov    ecx,0x3
c002ca40:	53                   	push   ebx
c002ca41:	83 ec 14             	sub    esp,0x14
c002ca44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002ca48:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002ca4c:	fc                   	cld    
c002ca4d:	31 c0                	xor    eax,eax
c002ca4f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ca51:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002ca56:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002ca5b:	50                   	push   eax
c002ca5c:	50                   	push   eax
c002ca5d:	6a 00                	push   0x0
c002ca5f:	6a 00                	push   0x0
c002ca61:	6a 00                	push   0x0
c002ca63:	6a 02                	push   0x2
c002ca65:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002ca69:	50                   	push   eax
c002ca6a:	53                   	push   ebx
c002ca6b:	e8 c8 fc ff ff       	call   c002c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ca70:	83 c4 14             	add    esp,0x14
c002ca73:	53                   	push   ebx
c002ca74:	e8 87 ff ff ff       	call   c002ca00 <ATAPI::diskRemoved()>
c002ca79:	83 c4 24             	add    esp,0x24
c002ca7c:	31 c0                	xor    eax,eax
c002ca7e:	5b                   	pop    ebx
c002ca7f:	5f                   	pop    edi
c002ca80:	c3                   	ret    
c002ca81:	90                   	nop

c002ca82 <ATAPI::diskInserted()>:
c002ca82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ca86:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002ca8d:	c3                   	ret    

c002ca8e <ATAPI::detectMedia()>:
c002ca8e:	56                   	push   esi
c002ca8f:	53                   	push   ebx
c002ca90:	83 ec 28             	sub    esp,0x28
c002ca93:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ca97:	6a 0c                	push   0xc
c002ca99:	6a 00                	push   0x0
c002ca9b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002ca9f:	56                   	push   esi
c002caa0:	e8 4b 3a fd ff       	call   c00004f0 <memset>
c002caa5:	58                   	pop    eax
c002caa6:	5a                   	pop    edx
c002caa7:	6a 00                	push   0x0
c002caa9:	6a 00                	push   0x0
c002caab:	6a 00                	push   0x0
c002caad:	6a 00                	push   0x0
c002caaf:	56                   	push   esi
c002cab0:	53                   	push   ebx
c002cab1:	e8 82 fc ff ff       	call   c002c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cab6:	83 c4 1c             	add    esp,0x1c
c002cab9:	6a 0c                	push   0xc
c002cabb:	6a 00                	push   0x0
c002cabd:	56                   	push   esi
c002cabe:	e8 2d 3a fd ff       	call   c00004f0 <memset>
c002cac3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002cac8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002cacd:	59                   	pop    ecx
c002cace:	58                   	pop    eax
c002cacf:	6a 01                	push   0x1
c002cad1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002cad5:	50                   	push   eax
c002cad6:	6a 00                	push   0x0
c002cad8:	6a 12                	push   0x12
c002cada:	56                   	push   esi
c002cadb:	53                   	push   ebx
c002cadc:	e8 57 fc ff ff       	call   c002c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cae1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002cae5:	83 c4 20             	add    esp,0x20
c002cae8:	83 e0 7f             	and    eax,0x7f
c002caeb:	83 f8 70             	cmp    eax,0x70
c002caee:	74 15                	je     c002cb05 <ATAPI::detectMedia()+0x77>
c002caf0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002caf7:	75 0c                	jne    c002cb05 <ATAPI::detectMedia()+0x77>
c002caf9:	83 ec 0c             	sub    esp,0xc
c002cafc:	53                   	push   ebx
c002cafd:	e8 80 ff ff ff       	call   c002ca82 <ATAPI::diskInserted()>
c002cb02:	83 c4 10             	add    esp,0x10
c002cb05:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002cb09:	83 e0 0f             	and    eax,0xf
c002cb0c:	83 f8 02             	cmp    eax,0x2
c002cb0f:	75 1b                	jne    c002cb2c <ATAPI::detectMedia()+0x9e>
c002cb11:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002cb16:	75 2d                	jne    c002cb45 <ATAPI::detectMedia()+0xb7>
c002cb18:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cb1f:	74 24                	je     c002cb45 <ATAPI::detectMedia()+0xb7>
c002cb21:	83 ec 0c             	sub    esp,0xc
c002cb24:	53                   	push   ebx
c002cb25:	e8 d6 fe ff ff       	call   c002ca00 <ATAPI::diskRemoved()>
c002cb2a:	eb 16                	jmp    c002cb42 <ATAPI::detectMedia()+0xb4>
c002cb2c:	85 c0                	test   eax,eax
c002cb2e:	75 15                	jne    c002cb45 <ATAPI::detectMedia()+0xb7>
c002cb30:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cb37:	75 0c                	jne    c002cb45 <ATAPI::detectMedia()+0xb7>
c002cb39:	83 ec 0c             	sub    esp,0xc
c002cb3c:	53                   	push   ebx
c002cb3d:	e8 40 ff ff ff       	call   c002ca82 <ATAPI::diskInserted()>
c002cb42:	83 c4 10             	add    esp,0x10
c002cb45:	83 c4 24             	add    esp,0x24
c002cb48:	5b                   	pop    ebx
c002cb49:	5e                   	pop    esi
c002cb4a:	c3                   	ret    
c002cb4b:	90                   	nop

c002cb4c <ATAPI::open(int, int, void*)>:
c002cb4c:	56                   	push   esi
c002cb4d:	53                   	push   ebx
c002cb4e:	50                   	push   eax
c002cb4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002cb53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cb57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cb5b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cb61:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002cb67:	c1 e0 06             	shl    eax,0x6
c002cb6a:	01 d0                	add    eax,edx
c002cb6c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002cb73:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002cb79:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002cb80:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002cb8a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cb90:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002cb97:	6a 04                	push   0x4
c002cb99:	6a 0c                	push   0xc
c002cb9b:	51                   	push   ecx
c002cb9c:	52                   	push   edx
c002cb9d:	e8 32 e3 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cba2:	90                   	nop
c002cba3:	90                   	nop
c002cba4:	6a 00                	push   0x0
c002cba6:	6a 0c                	push   0xc
c002cba8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002cbaf:	50                   	push   eax
c002cbb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002cbb6:	e8 19 e3 ff ff       	call   c002aed4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cbbb:	83 c4 14             	add    esp,0x14
c002cbbe:	68 78 01 00 00       	push   0x178
c002cbc3:	e8 2e 9a fe ff       	call   c00165f6 <malloc>
c002cbc8:	83 c4 0c             	add    esp,0xc
c002cbcb:	89 c6                	mov    esi,eax
c002cbcd:	6a 00                	push   0x0
c002cbcf:	68 ff ff ff 7f       	push   0x7fffffff
c002cbd4:	6a 00                	push   0x0
c002cbd6:	6a 00                	push   0x0
c002cbd8:	53                   	push   ebx
c002cbd9:	68 17 3d 03 c0       	push   0xc0033d17
c002cbde:	50                   	push   eax
c002cbdf:	e8 d8 fa fe ff       	call   c001c6bc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002cbe4:	83 c4 14             	add    esp,0x14
c002cbe7:	56                   	push   esi
c002cbe8:	e8 8f fb fe ff       	call   c001c77c <LogicalDisk::assignDriveLetter()>
c002cbed:	5a                   	pop    edx
c002cbee:	0f be c0             	movsx  eax,al
c002cbf1:	59                   	pop    ecx
c002cbf2:	50                   	push   eax
c002cbf3:	68 5c 3b 03 c0       	push   0xc0033b5c
c002cbf8:	e8 88 c8 fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002cbfd:	58                   	pop    eax
c002cbfe:	5a                   	pop    edx
c002cbff:	56                   	push   esi
c002cc00:	53                   	push   ebx
c002cc01:	e8 00 e9 fe ff       	call   c001b506 <Device::addChild(Device*)>
c002cc06:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002cc0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cc0f:	e8 3e ed fe ff       	call   c001b952 <PhysicalDisk::startCache()>
c002cc14:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002cc1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cc1e:	e8 6b fe ff ff       	call   c002ca8e <ATAPI::detectMedia()>
c002cc23:	83 c4 14             	add    esp,0x14
c002cc26:	31 c0                	xor    eax,eax
c002cc28:	5b                   	pop    ebx
c002cc29:	5e                   	pop    esi
c002cc2a:	c3                   	ret    
c002cc2b:	90                   	nop

c002cc2c <ATAPI::read(unsigned long long, int, void*)>:
c002cc2c:	55                   	push   ebp
c002cc2d:	57                   	push   edi
c002cc2e:	56                   	push   esi
c002cc2f:	53                   	push   ebx
c002cc30:	83 ec 1c             	sub    esp,0x1c
c002cc33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002cc37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002cc3b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cc3f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cc46:	74 3c                	je     c002cc84 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002cc48:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002cc4c:	b9 03 00 00 00       	mov    ecx,0x3
c002cc51:	fc                   	cld    
c002cc52:	31 c0                	xor    eax,eax
c002cc54:	0f ce                	bswap  esi
c002cc56:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002cc58:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002cc5d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002cc61:	89 e8                	mov    eax,ebp
c002cc63:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002cc67:	50                   	push   eax
c002cc68:	50                   	push   eax
c002cc69:	55                   	push   ebp
c002cc6a:	c1 e5 0b             	shl    ebp,0xb
c002cc6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cc71:	6a 00                	push   0x0
c002cc73:	55                   	push   ebp
c002cc74:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002cc78:	50                   	push   eax
c002cc79:	53                   	push   ebx
c002cc7a:	e8 b9 fa ff ff       	call   c002c738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cc7f:	83 c4 20             	add    esp,0x20
c002cc82:	eb 1a                	jmp    c002cc9e <ATAPI::read(unsigned long long, int, void*)+0x72>
c002cc84:	83 ec 0c             	sub    esp,0xc
c002cc87:	53                   	push   ebx
c002cc88:	e8 01 fe ff ff       	call   c002ca8e <ATAPI::detectMedia()>
c002cc8d:	83 c4 10             	add    esp,0x10
c002cc90:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cc97:	75 af                	jne    c002cc48 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002cc99:	b8 02 00 00 00       	mov    eax,0x2
c002cc9e:	83 c4 1c             	add    esp,0x1c
c002cca1:	5b                   	pop    ebx
c002cca2:	5e                   	pop    esi
c002cca3:	5f                   	pop    edi
c002cca4:	5d                   	pop    ebp
c002cca5:	c3                   	ret    

c002cca6 <SATA::close(int, int, void*)>:
c002cca6:	83 ec 0c             	sub    esp,0xc
c002cca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ccad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ccb3:	85 c0                	test   eax,eax
c002ccb5:	74 0c                	je     c002ccc3 <SATA::close(int, int, void*)+0x1d>
c002ccb7:	83 ec 0c             	sub    esp,0xc
c002ccba:	8b 10                	mov    edx,DWORD PTR [eax]
c002ccbc:	50                   	push   eax
c002ccbd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ccc0:	83 c4 10             	add    esp,0x10
c002ccc3:	31 c0                	xor    eax,eax
c002ccc5:	83 c4 0c             	add    esp,0xc
c002ccc8:	c3                   	ret    
c002ccc9:	90                   	nop

c002ccca <SATA::powerSaving(PowerSavingLevel)>:
c002ccca:	c3                   	ret    
c002cccb:	90                   	nop

c002cccc <SATA::open(int, int, void*)>:
c002cccc:	56                   	push   esi
c002cccd:	53                   	push   ebx
c002ccce:	83 ec 10             	sub    esp,0x10
c002ccd1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ccd5:	68 a4 3b 03 c0       	push   0xc0033ba4
c002ccda:	e8 a6 c7 fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002ccdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cce3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002cced:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002ccf3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002ccfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cd01:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002cd0b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cd11:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002cd18:	e8 e2 9b fe ff       	call   c00168ff <Phys::allocatePage()>
c002cd1d:	89 c6                	mov    esi,eax
c002cd1f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cd25:	81 c6 00 10 00 00    	add    esi,0x1000
c002cd2b:	e8 cf 9b fe ff       	call   c00168ff <Phys::allocatePage()>
c002cd30:	83 c4 10             	add    esp,0x10
c002cd33:	39 c6                	cmp    esi,eax
c002cd35:	74 10                	je     c002cd47 <SATA::open(int, int, void*)+0x7b>
c002cd37:	83 ec 0c             	sub    esp,0xc
c002cd3a:	68 b0 3b 03 c0       	push   0xc0033bb0
c002cd3f:	e8 5a 37 ff ff       	call   c002049e <KePanic(char const*)>
c002cd44:	83 c4 10             	add    esp,0x10
c002cd47:	83 ec 0c             	sub    esp,0xc
c002cd4a:	6a 02                	push   0x2
c002cd4c:	e8 fc b3 fe ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c002cd51:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cd57:	6a 03                	push   0x3
c002cd59:	50                   	push   eax
c002cd5a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002cd60:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002cd66:	e8 f5 ba fe ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c002cd6b:	83 c4 14             	add    esp,0x14
c002cd6e:	53                   	push   ebx
c002cd6f:	e8 de eb fe ff       	call   c001b952 <PhysicalDisk::startCache()>
c002cd74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cd77:	e8 12 fe fe ff       	call   c001cb8e <createPartitionsForDisk(PhysicalDisk*)>
c002cd7c:	83 c4 14             	add    esp,0x14
c002cd7f:	31 c0                	xor    eax,eax
c002cd81:	5b                   	pop    ebx
c002cd82:	5e                   	pop    esi
c002cd83:	c3                   	ret    

c002cd84 <SATA::SATA()>:
c002cd84:	83 ec 0c             	sub    esp,0xc
c002cd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cd8b:	83 ec 04             	sub    esp,0x4
c002cd8e:	68 00 02 00 00       	push   0x200
c002cd93:	68 c4 3b 03 c0       	push   0xc0033bc4
c002cd98:	50                   	push   eax
c002cd99:	e8 4c eb fe ff       	call   c001b8ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cd9e:	83 c4 10             	add    esp,0x10
c002cda1:	ba 34 3c 03 c0       	mov    edx,0xc0033c34
c002cda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cdaa:	89 10                	mov    DWORD PTR [eax],edx
c002cdac:	90                   	nop
c002cdad:	83 c4 0c             	add    esp,0xc
c002cdb0:	c3                   	ret    
c002cdb1:	90                   	nop

c002cdb2 <SATA::access(unsigned long long, int, void*, bool)>:
c002cdb2:	55                   	push   ebp
c002cdb3:	57                   	push   edi
c002cdb4:	56                   	push   esi
c002cdb5:	53                   	push   ebx
c002cdb6:	83 ec 2c             	sub    esp,0x2c
c002cdb9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cdbd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002cdc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cdc5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002cdc9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cdcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002cdd1:	fa                   	cli    
c002cdd2:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cdd8:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cddd:	7e 10                	jle    c002cdef <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002cddf:	83 ec 0c             	sub    esp,0xc
c002cde2:	68 d4 3b 03 c0       	push   0xc0033bd4
c002cde7:	e8 b2 36 ff ff       	call   c002049e <KePanic(char const*)>
c002cdec:	83 c4 10             	add    esp,0x10
c002cdef:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002cdf5:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cdfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002ce01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ce05:	89 d0                	mov    eax,edx
c002ce07:	c1 e0 07             	shl    eax,0x7
c002ce0a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002ce0e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002ce18:	51                   	push   ecx
c002ce19:	8d 42 02             	lea    eax,[edx+0x2]
c002ce1c:	51                   	push   ecx
c002ce1d:	c1 e0 07             	shl    eax,0x7
c002ce20:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002ce24:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002ce28:	50                   	push   eax
c002ce29:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002ce2f:	e8 68 ec ff ff       	call   c002ba9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002ce34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ce38:	83 c4 10             	add    esp,0x10
c002ce3b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002ce40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ce44:	0f 84 aa 01 00 00    	je     c002cff4 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002ce4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002ce4e:	c1 e0 09             	shl    eax,0x9
c002ce51:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002ce56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002ce5a:	74 0e                	je     c002ce6a <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002ce5c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002ce62:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002ce66:	89 c1                	mov    ecx,eax
c002ce68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ce6a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002ce70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002ce74:	8d 42 02             	lea    eax,[edx+0x2]
c002ce77:	c1 e0 07             	shl    eax,0x7
c002ce7a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002ce7e:	8b 00                	mov    eax,DWORD PTR [eax]
c002ce80:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002ce86:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002ce8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002ce90:	c1 e1 05             	shl    ecx,0x5
c002ce93:	01 c8                	add    eax,ecx
c002ce95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002ce99:	83 e1 01             	and    ecx,0x1
c002ce9c:	89 ce                	mov    esi,ecx
c002ce9e:	8a 08                	mov    cl,BYTE PTR [eax]
c002cea0:	c1 e6 06             	shl    esi,0x6
c002cea3:	83 e1 bf             	and    ecx,0xffffffbf
c002cea6:	09 f1                	or     ecx,esi
c002cea8:	88 08                	mov    BYTE PTR [eax],cl
c002ceaa:	8b 08                	mov    ecx,DWORD PTR [eax]
c002ceac:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002ceb2:	81 c9 05 00 01 00    	or     ecx,0x10005
c002ceb8:	89 08                	mov    DWORD PTR [eax],ecx
c002ceba:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cec0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cec6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cecc:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cecf:	50                   	push   eax
c002ced0:	68 90 00 00 00       	push   0x90
c002ced5:	6a 00                	push   0x0
c002ced7:	56                   	push   esi
c002ced8:	e8 13 36 fd ff       	call   c00004f0 <memset>
c002cedd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cee3:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ceed:	83 c4 10             	add    esp,0x10
c002cef0:	48                   	dec    eax
c002cef1:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cef6:	89 c1                	mov    ecx,eax
c002cef8:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cefe:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cf03:	09 c8                	or     eax,ecx
c002cf05:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cf0b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cf11:	83 c8 80             	or     eax,0xffffff80
c002cf14:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cf1a:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cf1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cf21:	25 00 7f 00 00       	and    eax,0x7f00
c002cf26:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cf2b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cf30:	66 89 06             	mov    WORD PTR [esi],ax
c002cf33:	b0 35                	mov    al,0x35
c002cf35:	75 02                	jne    c002cf39 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002cf37:	b0 25                	mov    al,0x25
c002cf39:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cf3c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002cf40:	89 e8                	mov    eax,ebp
c002cf42:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cf46:	c1 e8 10             	shr    eax,0x10
c002cf49:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cf4c:	89 e8                	mov    eax,ebp
c002cf4e:	c1 e8 18             	shr    eax,0x18
c002cf51:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cf54:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cf58:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cf5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cf5f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cf62:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cf66:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cf6a:	89 d6                	mov    esi,edx
c002cf6c:	31 c0                	xor    eax,eax
c002cf6e:	c1 e6 07             	shl    esi,0x7
c002cf71:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002cf75:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cf7b:	80 e1 88             	and    cl,0x88
c002cf7e:	74 0a                	je     c002cf8a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cf80:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cf85:	74 0a                	je     c002cf91 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cf87:	40                   	inc    eax
c002cf88:	eb eb                	jmp    c002cf75 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cf8a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cf8f:	75 0a                	jne    c002cf9b <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cf91:	83 ec 0c             	sub    esp,0xc
c002cf94:	68 0d 3c 03 c0       	push   0xc0033c0d
c002cf99:	eb 36                	jmp    c002cfd1 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002cf9b:	b8 01 00 00 00       	mov    eax,0x1
c002cfa0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002cfa4:	c1 e2 07             	shl    edx,0x7
c002cfa7:	d3 e0                	shl    eax,cl
c002cfa9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002cfad:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cfb3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002cfb9:	85 c8                	test   eax,ecx
c002cfbb:	74 2b                	je     c002cfe8 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002cfbd:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002cfc3:	0f ba e1 1e          	bt     ecx,0x1e
c002cfc7:	73 ea                	jae    c002cfb3 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002cfc9:	83 ec 0c             	sub    esp,0xc
c002cfcc:	68 1b 3c 03 c0       	push   0xc0033c1b
c002cfd1:	e8 af c4 fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002cfd6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cfdb:	83 c4 10             	add    esp,0x10
c002cfde:	48                   	dec    eax
c002cfdf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cfe4:	85 c0                	test   eax,eax
c002cfe6:	eb 17                	jmp    c002cfff <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002cfe8:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002cfee:	0f ba e0 1e          	bt     eax,0x1e
c002cff2:	73 15                	jae    c002d009 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002cff4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cff9:	48                   	dec    eax
c002cffa:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cfff:	75 01                	jne    c002d002 <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002d001:	fb                   	sti    
c002d002:	b8 01 00 00 00       	mov    eax,0x1
c002d007:	eb 29                	jmp    c002d032 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002d009:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002d00e:	75 10                	jne    c002d020 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002d010:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002d016:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002d01a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002d01e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d020:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d025:	48                   	dec    eax
c002d026:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d02b:	75 03                	jne    c002d030 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d02d:	fb                   	sti    
c002d02e:	eb 02                	jmp    c002d032 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002d030:	31 c0                	xor    eax,eax
c002d032:	83 c4 2c             	add    esp,0x2c
c002d035:	5b                   	pop    ebx
c002d036:	5e                   	pop    esi
c002d037:	5f                   	pop    edi
c002d038:	5d                   	pop    ebp
c002d039:	c3                   	ret    

c002d03a <SATA::read(unsigned long long, int, void*)>:
c002d03a:	55                   	push   ebp
c002d03b:	57                   	push   edi
c002d03c:	56                   	push   esi
c002d03d:	be 04 00 00 00       	mov    esi,0x4
c002d042:	53                   	push   ebx
c002d043:	83 ec 0c             	sub    esp,0xc
c002d046:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d04a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d04e:	8d 7b ff             	lea    edi,[ebx-0x1]
c002d051:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002d055:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002d059:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002d05f:	0f 87 1a 02 00 00    	ja     c002d27f <SATA::read(unsigned long long, int, void*)+0x245>
c002d065:	be 06 00 00 00       	mov    esi,0x6
c002d06a:	85 c9                	test   ecx,ecx
c002d06c:	0f 84 0d 02 00 00    	je     c002d27f <SATA::read(unsigned long long, int, void*)+0x245>
c002d072:	56                   	push   esi
c002d073:	56                   	push   esi
c002d074:	6a 00                	push   0x0
c002d076:	51                   	push   ecx
c002d077:	53                   	push   ebx
c002d078:	52                   	push   edx
c002d079:	50                   	push   eax
c002d07a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d07e:	e8 2f fd ff ff       	call   c002cdb2 <SATA::access(unsigned long long, int, void*, bool)>
c002d083:	83 c4 20             	add    esp,0x20
c002d086:	89 c6                	mov    esi,eax
c002d088:	85 c0                	test   eax,eax
c002d08a:	0f 85 ea 01 00 00    	jne    c002d27a <SATA::read(unsigned long long, int, void*)+0x240>
c002d090:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002d096:	bb 0a 00 00 00       	mov    ebx,0xa
c002d09b:	50                   	push   eax
c002d09c:	50                   	push   eax
c002d09d:	6a 0f                	push   0xf
c002d09f:	6a 00                	push   0x0
c002d0a1:	e8 33 f2 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d0a6:	5a                   	pop    edx
c002d0a7:	0f b6 c0             	movzx  eax,al
c002d0aa:	59                   	pop    ecx
c002d0ab:	b9 10 27 00 00       	mov    ecx,0x2710
c002d0b0:	50                   	push   eax
c002d0b1:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0b6:	99                   	cdq    
c002d0b7:	f7 f9                	idiv   ecx
c002d0b9:	99                   	cdq    
c002d0ba:	f7 fb                	idiv   ebx
c002d0bc:	8d 42 30             	lea    eax,[edx+0x30]
c002d0bf:	0f b6 c0             	movzx  eax,al
c002d0c2:	50                   	push   eax
c002d0c3:	e8 00 f2 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d0c8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d0ce:	5f                   	pop    edi
c002d0cf:	5d                   	pop    ebp
c002d0d0:	bd e8 03 00 00       	mov    ebp,0x3e8
c002d0d5:	6a 0f                	push   0xf
c002d0d7:	6a 00                	push   0x0
c002d0d9:	e8 fb f1 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d0de:	5a                   	pop    edx
c002d0df:	0f b6 c0             	movzx  eax,al
c002d0e2:	59                   	pop    ecx
c002d0e3:	50                   	push   eax
c002d0e4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0e9:	99                   	cdq    
c002d0ea:	f7 fd                	idiv   ebp
c002d0ec:	99                   	cdq    
c002d0ed:	f7 fb                	idiv   ebx
c002d0ef:	8d 42 30             	lea    eax,[edx+0x30]
c002d0f2:	0f b6 c0             	movzx  eax,al
c002d0f5:	50                   	push   eax
c002d0f6:	e8 cd f1 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d0fb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d101:	5f                   	pop    edi
c002d102:	bf 64 00 00 00       	mov    edi,0x64
c002d107:	58                   	pop    eax
c002d108:	6a 0f                	push   0xf
c002d10a:	6a 00                	push   0x0
c002d10c:	e8 c8 f1 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d111:	5a                   	pop    edx
c002d112:	0f b6 c0             	movzx  eax,al
c002d115:	59                   	pop    ecx
c002d116:	50                   	push   eax
c002d117:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d11c:	99                   	cdq    
c002d11d:	f7 ff                	idiv   edi
c002d11f:	99                   	cdq    
c002d120:	f7 fb                	idiv   ebx
c002d122:	8d 42 30             	lea    eax,[edx+0x30]
c002d125:	0f b6 c0             	movzx  eax,al
c002d128:	50                   	push   eax
c002d129:	e8 9a f1 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d12e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d134:	58                   	pop    eax
c002d135:	5a                   	pop    edx
c002d136:	6a 0f                	push   0xf
c002d138:	6a 00                	push   0x0
c002d13a:	e8 9a f1 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d13f:	59                   	pop    ecx
c002d140:	0f b6 c0             	movzx  eax,al
c002d143:	5a                   	pop    edx
c002d144:	50                   	push   eax
c002d145:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d14a:	99                   	cdq    
c002d14b:	f7 fb                	idiv   ebx
c002d14d:	99                   	cdq    
c002d14e:	f7 fb                	idiv   ebx
c002d150:	8d 42 30             	lea    eax,[edx+0x30]
c002d153:	0f b6 c0             	movzx  eax,al
c002d156:	50                   	push   eax
c002d157:	e8 6c f1 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d15c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d162:	59                   	pop    ecx
c002d163:	58                   	pop    eax
c002d164:	6a 0f                	push   0xf
c002d166:	6a 00                	push   0x0
c002d168:	e8 6c f1 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d16d:	5a                   	pop    edx
c002d16e:	0f b6 c0             	movzx  eax,al
c002d171:	59                   	pop    ecx
c002d172:	50                   	push   eax
c002d173:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d178:	99                   	cdq    
c002d179:	f7 fb                	idiv   ebx
c002d17b:	8d 42 30             	lea    eax,[edx+0x30]
c002d17e:	0f b6 c0             	movzx  eax,al
c002d181:	50                   	push   eax
c002d182:	e8 41 f1 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d187:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d18d:	58                   	pop    eax
c002d18e:	5a                   	pop    edx
c002d18f:	6a 0f                	push   0xf
c002d191:	6a 00                	push   0x0
c002d193:	e8 41 f1 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d198:	59                   	pop    ecx
c002d199:	0f b6 c0             	movzx  eax,al
c002d19c:	5a                   	pop    edx
c002d19d:	b9 10 27 00 00       	mov    ecx,0x2710
c002d1a2:	50                   	push   eax
c002d1a3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1a8:	99                   	cdq    
c002d1a9:	f7 f9                	idiv   ecx
c002d1ab:	99                   	cdq    
c002d1ac:	f7 fb                	idiv   ebx
c002d1ae:	8d 42 30             	lea    eax,[edx+0x30]
c002d1b1:	0f b6 c0             	movzx  eax,al
c002d1b4:	50                   	push   eax
c002d1b5:	e8 0e f1 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d1ba:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d1c0:	59                   	pop    ecx
c002d1c1:	58                   	pop    eax
c002d1c2:	6a 0f                	push   0xf
c002d1c4:	6a 00                	push   0x0
c002d1c6:	e8 0e f1 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d1cb:	5a                   	pop    edx
c002d1cc:	0f b6 c0             	movzx  eax,al
c002d1cf:	59                   	pop    ecx
c002d1d0:	50                   	push   eax
c002d1d1:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1d6:	99                   	cdq    
c002d1d7:	f7 fd                	idiv   ebp
c002d1d9:	99                   	cdq    
c002d1da:	f7 fb                	idiv   ebx
c002d1dc:	8d 42 30             	lea    eax,[edx+0x30]
c002d1df:	0f b6 c0             	movzx  eax,al
c002d1e2:	50                   	push   eax
c002d1e3:	e8 e0 f0 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d1e8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d1ee:	5d                   	pop    ebp
c002d1ef:	58                   	pop    eax
c002d1f0:	6a 0f                	push   0xf
c002d1f2:	6a 00                	push   0x0
c002d1f4:	e8 e0 f0 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d1f9:	5a                   	pop    edx
c002d1fa:	0f b6 c0             	movzx  eax,al
c002d1fd:	59                   	pop    ecx
c002d1fe:	50                   	push   eax
c002d1ff:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d204:	99                   	cdq    
c002d205:	f7 ff                	idiv   edi
c002d207:	99                   	cdq    
c002d208:	f7 fb                	idiv   ebx
c002d20a:	8d 42 30             	lea    eax,[edx+0x30]
c002d20d:	0f b6 c0             	movzx  eax,al
c002d210:	50                   	push   eax
c002d211:	e8 b2 f0 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d216:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d21c:	5f                   	pop    edi
c002d21d:	5d                   	pop    ebp
c002d21e:	6a 0f                	push   0xf
c002d220:	6a 00                	push   0x0
c002d222:	e8 b2 f0 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d227:	5a                   	pop    edx
c002d228:	0f b6 c0             	movzx  eax,al
c002d22b:	59                   	pop    ecx
c002d22c:	50                   	push   eax
c002d22d:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d232:	99                   	cdq    
c002d233:	f7 fb                	idiv   ebx
c002d235:	99                   	cdq    
c002d236:	f7 fb                	idiv   ebx
c002d238:	8d 42 30             	lea    eax,[edx+0x30]
c002d23b:	0f b6 c0             	movzx  eax,al
c002d23e:	50                   	push   eax
c002d23f:	e8 84 f0 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d244:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d24a:	5f                   	pop    edi
c002d24b:	5d                   	pop    ebp
c002d24c:	6a 0f                	push   0xf
c002d24e:	6a 00                	push   0x0
c002d250:	e8 84 f0 ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d255:	5a                   	pop    edx
c002d256:	0f b6 c0             	movzx  eax,al
c002d259:	59                   	pop    ecx
c002d25a:	50                   	push   eax
c002d25b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d260:	99                   	cdq    
c002d261:	f7 fb                	idiv   ebx
c002d263:	83 c2 30             	add    edx,0x30
c002d266:	0f b6 d2             	movzx  edx,dl
c002d269:	52                   	push   edx
c002d26a:	e8 59 f0 ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d26f:	83 c4 10             	add    esp,0x10
c002d272:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d278:	eb 05                	jmp    c002d27f <SATA::read(unsigned long long, int, void*)+0x245>
c002d27a:	be 01 00 00 00       	mov    esi,0x1
c002d27f:	83 c4 0c             	add    esp,0xc
c002d282:	89 f0                	mov    eax,esi
c002d284:	5b                   	pop    ebx
c002d285:	5e                   	pop    esi
c002d286:	5f                   	pop    edi
c002d287:	5d                   	pop    ebp
c002d288:	c3                   	ret    
c002d289:	90                   	nop

c002d28a <SATA::write(unsigned long long, int, void*)>:
c002d28a:	55                   	push   ebp
c002d28b:	b8 04 00 00 00       	mov    eax,0x4
c002d290:	57                   	push   edi
c002d291:	56                   	push   esi
c002d292:	53                   	push   ebx
c002d293:	83 ec 1c             	sub    esp,0x1c
c002d296:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d29a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002d29e:	8d 75 ff             	lea    esi,[ebp-0x1]
c002d2a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002d2a5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002d2a9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d2af:	0f 87 32 02 00 00    	ja     c002d4e7 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d2b5:	b8 06 00 00 00       	mov    eax,0x6
c002d2ba:	85 ff                	test   edi,edi
c002d2bc:	0f 84 25 02 00 00    	je     c002d4e7 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d2c2:	89 ee                	mov    esi,ebp
c002d2c4:	c1 e6 09             	shl    esi,0x9
c002d2c7:	01 fe                	add    esi,edi
c002d2c9:	89 c8                	mov    eax,ecx
c002d2cb:	89 da                	mov    edx,ebx
c002d2cd:	83 c0 01             	add    eax,0x1
c002d2d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d2d4:	83 d2 00             	adc    edx,0x0
c002d2d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d2db:	50                   	push   eax
c002d2dc:	50                   	push   eax
c002d2dd:	6a 01                	push   0x1
c002d2df:	57                   	push   edi
c002d2e0:	81 c7 00 02 00 00    	add    edi,0x200
c002d2e6:	6a 01                	push   0x1
c002d2e8:	53                   	push   ebx
c002d2e9:	51                   	push   ecx
c002d2ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d2ee:	e8 bf fa ff ff       	call   c002cdb2 <SATA::access(unsigned long long, int, void*, bool)>
c002d2f3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d2f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d2fb:	83 c4 20             	add    esp,0x20
c002d2fe:	39 f7                	cmp    edi,esi
c002d300:	75 c7                	jne    c002d2c9 <SATA::write(unsigned long long, int, void*)+0x3f>
c002d302:	bb 0a 00 00 00       	mov    ebx,0xa
c002d307:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002d30d:	bd 10 27 00 00       	mov    ebp,0x2710
c002d312:	50                   	push   eax
c002d313:	50                   	push   eax
c002d314:	6a 0f                	push   0xf
c002d316:	6a 00                	push   0x0
c002d318:	e8 bc ef ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d31d:	5a                   	pop    edx
c002d31e:	0f b6 c0             	movzx  eax,al
c002d321:	59                   	pop    ecx
c002d322:	50                   	push   eax
c002d323:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d328:	99                   	cdq    
c002d329:	f7 fd                	idiv   ebp
c002d32b:	99                   	cdq    
c002d32c:	f7 fb                	idiv   ebx
c002d32e:	8d 42 30             	lea    eax,[edx+0x30]
c002d331:	0f b6 c0             	movzx  eax,al
c002d334:	50                   	push   eax
c002d335:	e8 8e ef ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d33a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d340:	5e                   	pop    esi
c002d341:	5f                   	pop    edi
c002d342:	bf e8 03 00 00       	mov    edi,0x3e8
c002d347:	6a 0f                	push   0xf
c002d349:	6a 00                	push   0x0
c002d34b:	e8 89 ef ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d350:	5a                   	pop    edx
c002d351:	0f b6 c0             	movzx  eax,al
c002d354:	59                   	pop    ecx
c002d355:	50                   	push   eax
c002d356:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d35b:	99                   	cdq    
c002d35c:	f7 ff                	idiv   edi
c002d35e:	99                   	cdq    
c002d35f:	f7 fb                	idiv   ebx
c002d361:	8d 42 30             	lea    eax,[edx+0x30]
c002d364:	0f b6 c0             	movzx  eax,al
c002d367:	50                   	push   eax
c002d368:	e8 5b ef ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d36d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d373:	5e                   	pop    esi
c002d374:	be 64 00 00 00       	mov    esi,0x64
c002d379:	58                   	pop    eax
c002d37a:	6a 0f                	push   0xf
c002d37c:	6a 00                	push   0x0
c002d37e:	e8 56 ef ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d383:	5a                   	pop    edx
c002d384:	0f b6 c0             	movzx  eax,al
c002d387:	59                   	pop    ecx
c002d388:	50                   	push   eax
c002d389:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d38e:	99                   	cdq    
c002d38f:	f7 fe                	idiv   esi
c002d391:	99                   	cdq    
c002d392:	f7 fb                	idiv   ebx
c002d394:	8d 42 30             	lea    eax,[edx+0x30]
c002d397:	0f b6 c0             	movzx  eax,al
c002d39a:	50                   	push   eax
c002d39b:	e8 28 ef ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d3a0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d3a6:	58                   	pop    eax
c002d3a7:	5a                   	pop    edx
c002d3a8:	6a 0f                	push   0xf
c002d3aa:	6a 00                	push   0x0
c002d3ac:	e8 28 ef ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d3b1:	59                   	pop    ecx
c002d3b2:	0f b6 c0             	movzx  eax,al
c002d3b5:	5a                   	pop    edx
c002d3b6:	50                   	push   eax
c002d3b7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d3bc:	99                   	cdq    
c002d3bd:	f7 fb                	idiv   ebx
c002d3bf:	99                   	cdq    
c002d3c0:	f7 fb                	idiv   ebx
c002d3c2:	8d 42 30             	lea    eax,[edx+0x30]
c002d3c5:	0f b6 c0             	movzx  eax,al
c002d3c8:	50                   	push   eax
c002d3c9:	e8 fa ee ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d3ce:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d3d4:	59                   	pop    ecx
c002d3d5:	58                   	pop    eax
c002d3d6:	6a 0f                	push   0xf
c002d3d8:	6a 00                	push   0x0
c002d3da:	e8 fa ee ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d3df:	5a                   	pop    edx
c002d3e0:	0f b6 c0             	movzx  eax,al
c002d3e3:	59                   	pop    ecx
c002d3e4:	50                   	push   eax
c002d3e5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d3ea:	99                   	cdq    
c002d3eb:	f7 fb                	idiv   ebx
c002d3ed:	83 c2 30             	add    edx,0x30
c002d3f0:	0f b6 d2             	movzx  edx,dl
c002d3f3:	52                   	push   edx
c002d3f4:	e8 cf ee ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d3f9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d3ff:	58                   	pop    eax
c002d400:	5a                   	pop    edx
c002d401:	6a 0f                	push   0xf
c002d403:	6a 00                	push   0x0
c002d405:	e8 cf ee ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d40a:	59                   	pop    ecx
c002d40b:	0f b6 c0             	movzx  eax,al
c002d40e:	5a                   	pop    edx
c002d40f:	50                   	push   eax
c002d410:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d415:	99                   	cdq    
c002d416:	f7 fd                	idiv   ebp
c002d418:	99                   	cdq    
c002d419:	f7 fb                	idiv   ebx
c002d41b:	8d 42 30             	lea    eax,[edx+0x30]
c002d41e:	0f b6 c0             	movzx  eax,al
c002d421:	50                   	push   eax
c002d422:	e8 a1 ee ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d427:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d42d:	59                   	pop    ecx
c002d42e:	5d                   	pop    ebp
c002d42f:	6a 0f                	push   0xf
c002d431:	6a 00                	push   0x0
c002d433:	e8 a1 ee ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d438:	5a                   	pop    edx
c002d439:	0f b6 c0             	movzx  eax,al
c002d43c:	59                   	pop    ecx
c002d43d:	50                   	push   eax
c002d43e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d443:	99                   	cdq    
c002d444:	f7 ff                	idiv   edi
c002d446:	99                   	cdq    
c002d447:	f7 fb                	idiv   ebx
c002d449:	8d 42 30             	lea    eax,[edx+0x30]
c002d44c:	0f b6 c0             	movzx  eax,al
c002d44f:	50                   	push   eax
c002d450:	e8 73 ee ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d455:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d45b:	5f                   	pop    edi
c002d45c:	5d                   	pop    ebp
c002d45d:	6a 0f                	push   0xf
c002d45f:	6a 00                	push   0x0
c002d461:	e8 73 ee ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d466:	5a                   	pop    edx
c002d467:	0f b6 c0             	movzx  eax,al
c002d46a:	59                   	pop    ecx
c002d46b:	50                   	push   eax
c002d46c:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d471:	99                   	cdq    
c002d472:	f7 fe                	idiv   esi
c002d474:	99                   	cdq    
c002d475:	f7 fb                	idiv   ebx
c002d477:	8d 42 30             	lea    eax,[edx+0x30]
c002d47a:	0f b6 c0             	movzx  eax,al
c002d47d:	50                   	push   eax
c002d47e:	e8 45 ee ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d483:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d489:	5e                   	pop    esi
c002d48a:	5f                   	pop    edi
c002d48b:	6a 0f                	push   0xf
c002d48d:	6a 00                	push   0x0
c002d48f:	e8 45 ee ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d494:	5d                   	pop    ebp
c002d495:	0f b6 c0             	movzx  eax,al
c002d498:	5a                   	pop    edx
c002d499:	50                   	push   eax
c002d49a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d49f:	99                   	cdq    
c002d4a0:	f7 fb                	idiv   ebx
c002d4a2:	99                   	cdq    
c002d4a3:	f7 fb                	idiv   ebx
c002d4a5:	8d 42 30             	lea    eax,[edx+0x30]
c002d4a8:	0f b6 c0             	movzx  eax,al
c002d4ab:	50                   	push   eax
c002d4ac:	e8 17 ee ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d4b1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d4b7:	59                   	pop    ecx
c002d4b8:	5e                   	pop    esi
c002d4b9:	6a 0f                	push   0xf
c002d4bb:	6a 00                	push   0x0
c002d4bd:	e8 17 ee ff ff       	call   c002c2d9 <combineColours(unsigned char, unsigned char)>
c002d4c2:	5f                   	pop    edi
c002d4c3:	0f b6 c0             	movzx  eax,al
c002d4c6:	5d                   	pop    ebp
c002d4c7:	50                   	push   eax
c002d4c8:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d4cd:	99                   	cdq    
c002d4ce:	f7 fb                	idiv   ebx
c002d4d0:	83 c2 30             	add    edx,0x30
c002d4d3:	0f b6 d2             	movzx  edx,dl
c002d4d6:	52                   	push   edx
c002d4d7:	e8 ec ed ff ff       	call   c002c2c8 <combineCharAndColour(char, unsigned char)>
c002d4dc:	83 c4 10             	add    esp,0x10
c002d4df:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d4e5:	31 c0                	xor    eax,eax
c002d4e7:	83 c4 1c             	add    esp,0x1c
c002d4ea:	5b                   	pop    ebx
c002d4eb:	5e                   	pop    esi
c002d4ec:	5f                   	pop    edi
c002d4ed:	5d                   	pop    ebp
c002d4ee:	c3                   	ret    
c002d4ef:	90                   	nop

c002d4f0 <SATAPI::write(unsigned long long, int, void*)>:
c002d4f0:	b8 03 00 00 00       	mov    eax,0x3
c002d4f5:	c3                   	ret    

c002d4f6 <SATAPI::close(int, int, void*)>:
c002d4f6:	83 ec 0c             	sub    esp,0xc
c002d4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d4fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d503:	85 c0                	test   eax,eax
c002d505:	74 0c                	je     c002d513 <SATAPI::close(int, int, void*)+0x1d>
c002d507:	83 ec 0c             	sub    esp,0xc
c002d50a:	8b 10                	mov    edx,DWORD PTR [eax]
c002d50c:	50                   	push   eax
c002d50d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d510:	83 c4 10             	add    esp,0x10
c002d513:	31 c0                	xor    eax,eax
c002d515:	83 c4 0c             	add    esp,0xc
c002d518:	c3                   	ret    
c002d519:	90                   	nop

c002d51a <SATAPI::SATAPI()>:
c002d51a:	83 ec 0c             	sub    esp,0xc
c002d51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d521:	83 ec 04             	sub    esp,0x4
c002d524:	68 00 08 00 00       	push   0x800
c002d529:	68 64 3c 03 c0       	push   0xc0033c64
c002d52e:	50                   	push   eax
c002d52f:	e8 b6 e3 fe ff       	call   c001b8ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d534:	83 c4 10             	add    esp,0x10
c002d537:	ba 58 3d 03 c0       	mov    edx,0xc0033d58
c002d53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d540:	89 10                	mov    DWORD PTR [eax],edx
c002d542:	90                   	nop
c002d543:	83 c4 0c             	add    esp,0xc
c002d546:	c3                   	ret    
c002d547:	90                   	nop

c002d548 <SATAPI::diskRemoved()>:
c002d548:	c3                   	ret    
c002d549:	90                   	nop

c002d54a <SATAPI::diskInserted()>:
c002d54a:	83 ec 18             	sub    esp,0x18
c002d54d:	68 70 3c 03 c0       	push   0xc0033c70
c002d552:	e8 2e bf fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002d557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d55b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d562:	83 c4 1c             	add    esp,0x1c
c002d565:	c3                   	ret    

c002d566 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d566:	55                   	push   ebp
c002d567:	57                   	push   edi
c002d568:	56                   	push   esi
c002d569:	53                   	push   ebx
c002d56a:	83 ec 34             	sub    esp,0x34
c002d56d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d571:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d575:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d579:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d57d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d581:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d587:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d58d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d591:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d597:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d59b:	83 c0 02             	add    eax,0x2
c002d59e:	c1 e0 07             	shl    eax,0x7
c002d5a1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d5a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d5a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d5ad:	c1 e0 07             	shl    eax,0x7
c002d5b0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d5b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d5b8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d5c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d5c6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d5cc:	e8 cb e4 ff ff       	call   c002ba9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d5d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d5d5:	83 c4 10             	add    esp,0x10
c002d5d8:	b8 01 00 00 00       	mov    eax,0x1
c002d5dd:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d5e2:	0f 84 53 02 00 00    	je     c002d83b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d5e8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d5f2:	8b 00                	mov    eax,DWORD PTR [eax]
c002d5f4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d5fa:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d604:	c1 e1 05             	shl    ecx,0x5
c002d607:	01 c8                	add    eax,ecx
c002d609:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d60b:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d611:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d617:	89 08                	mov    DWORD PTR [eax],ecx
c002d619:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d61f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d625:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d62b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d62e:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d631:	50                   	push   eax
c002d632:	68 90 00 00 00       	push   0x90
c002d637:	6a 00                	push   0x0
c002d639:	53                   	push   ebx
c002d63a:	e8 b1 2e fd ff       	call   c00004f0 <memset>
c002d63f:	b9 0c 00 00 00       	mov    ecx,0xc
c002d644:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d648:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d64a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d650:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d654:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d65a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d65e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d662:	48                   	dec    eax
c002d663:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d668:	89 c1                	mov    ecx,eax
c002d66a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d670:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d675:	09 c8                	or     eax,ecx
c002d677:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d67d:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d683:	83 c8 80             	or     eax,0xffffff80
c002d686:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d68c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d68f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d693:	25 00 7f 00 00       	and    eax,0x7f00
c002d698:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d69c:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d6a1:	66 89 03             	mov    WORD PTR [ebx],ax
c002d6a4:	89 d0                	mov    eax,edx
c002d6a6:	c1 ea 18             	shr    edx,0x18
c002d6a9:	c1 e8 10             	shr    eax,0x10
c002d6ac:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d6af:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d6b2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d6b6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d6b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d6bd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d6c0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d6c4:	83 c4 10             	add    esp,0x10
c002d6c7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d6cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d6cf:	31 c0                	xor    eax,eax
c002d6d1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d6d7:	80 e1 88             	and    cl,0x88
c002d6da:	74 0a                	je     c002d6e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d6dc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d6e1:	74 0a                	je     c002d6ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d6e3:	40                   	inc    eax
c002d6e4:	eb eb                	jmp    c002d6d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d6e6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d6eb:	75 43                	jne    c002d730 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d6ed:	83 ec 0c             	sub    esp,0xc
c002d6f0:	68 88 3c 03 c0       	push   0xc0033c88
c002d6f5:	e8 8b bd fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002d6fa:	58                   	pop    eax
c002d6fb:	5a                   	pop    edx
c002d6fc:	68 9d 3c 03 c0       	push   0xc0033c9d
c002d701:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d707:	e8 da 9e fe ff       	call   c00175e6 <VgaText::puts(char const*)>
c002d70c:	59                   	pop    ecx
c002d70d:	5b                   	pop    ebx
c002d70e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d712:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d718:	e8 19 e4 ff ff       	call   c002bb36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d71d:	5e                   	pop    esi
c002d71e:	5f                   	pop    edi
c002d71f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d723:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d729:	e8 e8 e3 ff ff       	call   c002bb16 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d72e:	eb 48                	jmp    c002d778 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d730:	be 01 00 00 00       	mov    esi,0x1
c002d735:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d739:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d73d:	d3 e6                	shl    esi,cl
c002d73f:	c1 e7 07             	shl    edi,0x7
c002d742:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d748:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d74d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d751:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d757:	85 c6                	test   esi,eax
c002d759:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d75f:	0f 84 a3 00 00 00    	je     c002d808 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d765:	0f ba e0 1e          	bt     eax,0x1e
c002d769:	73 1a                	jae    c002d785 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d76b:	83 ec 0c             	sub    esp,0xc
c002d76e:	68 af 3c 03 c0       	push   0xc0033caf
c002d773:	e8 0d bd fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002d778:	83 c4 10             	add    esp,0x10
c002d77b:	b8 01 00 00 00       	mov    eax,0x1
c002d780:	e9 b6 00 00 00       	jmp    c002d83b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d785:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d78b:	83 f8 0d             	cmp    eax,0xd
c002d78e:	77 0a                	ja     c002d79a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d790:	83 ec 0c             	sub    esp,0xc
c002d793:	68 c8 00 00 00       	push   0xc8
c002d798:	eb 28                	jmp    c002d7c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d79a:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d7a0:	83 f8 0d             	cmp    eax,0xd
c002d7a3:	77 0a                	ja     c002d7af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d7a5:	83 ec 0c             	sub    esp,0xc
c002d7a8:	68 58 02 00 00       	push   0x258
c002d7ad:	eb 13                	jmp    c002d7c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d7af:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d7b5:	83 f8 06             	cmp    eax,0x6
c002d7b8:	77 10                	ja     c002d7ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d7ba:	83 ec 0c             	sub    esp,0xc
c002d7bd:	68 dc 05 00 00       	push   0x5dc
c002d7c2:	e8 c5 7e ff ff       	call   c002568c <milliTenthSleep(unsigned int)>
c002d7c7:	83 c4 10             	add    esp,0x10
c002d7ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d7ce:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d7d1:	75 06                	jne    c002d7d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d7d3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d7d7:	74 15                	je     c002d7ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d7d9:	83 fb 06             	cmp    ebx,0x6
c002d7dc:	77 10                	ja     c002d7ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d7de:	83 ec 0c             	sub    esp,0xc
c002d7e1:	68 c4 09 00 00       	push   0x9c4
c002d7e6:	e8 a1 7e ff ff       	call   c002568c <milliTenthSleep(unsigned int)>
c002d7eb:	83 c4 10             	add    esp,0x10
c002d7ee:	43                   	inc    ebx
c002d7ef:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d7f5:	0f 85 56 ff ff ff    	jne    c002d751 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d7fb:	83 ec 0c             	sub    esp,0xc
c002d7fe:	68 c2 3c 03 c0       	push   0xc0033cc2
c002d803:	e9 6b ff ff ff       	jmp    c002d773 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d808:	0f ba e0 1e          	bt     eax,0x1e
c002d80c:	73 0d                	jae    c002d81b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d80e:	83 ec 0c             	sub    esp,0xc
c002d811:	68 d6 3c 03 c0       	push   0xc0033cd6
c002d816:	e9 58 ff ff ff       	jmp    c002d773 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d81b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d820:	74 17                	je     c002d839 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d822:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d827:	74 10                	je     c002d839 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d829:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d82f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d833:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d837:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d839:	31 c0                	xor    eax,eax
c002d83b:	83 c4 2c             	add    esp,0x2c
c002d83e:	5b                   	pop    ebx
c002d83f:	5e                   	pop    esi
c002d840:	5f                   	pop    edi
c002d841:	5d                   	pop    ebp
c002d842:	c3                   	ret    
c002d843:	90                   	nop

c002d844 <SATAPI::eject()>:
c002d844:	57                   	push   edi
c002d845:	b9 03 00 00 00       	mov    ecx,0x3
c002d84a:	83 ec 18             	sub    esp,0x18
c002d84d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d851:	fc                   	cld    
c002d852:	31 c0                	xor    eax,eax
c002d854:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d856:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d85b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d860:	50                   	push   eax
c002d861:	6a 00                	push   0x0
c002d863:	6a 00                	push   0x0
c002d865:	6a 00                	push   0x0
c002d867:	6a 00                	push   0x0
c002d869:	6a 02                	push   0x2
c002d86b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d86f:	50                   	push   eax
c002d870:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d874:	e8 ed fc ff ff       	call   c002d566 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d879:	31 c0                	xor    eax,eax
c002d87b:	83 c4 38             	add    esp,0x38
c002d87e:	5f                   	pop    edi
c002d87f:	c3                   	ret    

c002d880 <SATAPI::detectMedia()>:
c002d880:	53                   	push   ebx
c002d881:	83 ec 14             	sub    esp,0x14
c002d884:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d888:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d88e:	e8 c9 f9 fe ff       	call   c001d25c <VCache::writeWriteBuffer()>
c002d893:	59                   	pop    ecx
c002d894:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d89a:	e8 ad f9 fe ff       	call   c001d24c <VCache::invalidateReadBuffer()>
c002d89f:	c7 04 24 eb 3c 03 c0 	mov    DWORD PTR [esp],0xc0033ceb
c002d8a6:	e8 da bb fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002d8ab:	83 c4 10             	add    esp,0x10
c002d8ae:	31 c0                	xor    eax,eax
c002d8b0:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d8b7:	85 d2                	test   edx,edx
c002d8b9:	74 0f                	je     c002d8ca <SATAPI::detectMedia()+0x4a>
c002d8bb:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d8c1:	75 07                	jne    c002d8ca <SATAPI::detectMedia()+0x4a>
c002d8c3:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d8ca:	40                   	inc    eax
c002d8cb:	83 f8 1a             	cmp    eax,0x1a
c002d8ce:	75 e0                	jne    c002d8b0 <SATAPI::detectMedia()+0x30>
c002d8d0:	83 c4 08             	add    esp,0x8
c002d8d3:	5b                   	pop    ebx
c002d8d4:	c3                   	ret    
c002d8d5:	90                   	nop

c002d8d6 <SATAPI::open(int, int, void*)>:
c002d8d6:	56                   	push   esi
c002d8d7:	53                   	push   ebx
c002d8d8:	51                   	push   ecx
c002d8d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d8dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d8e1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d8eb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d8f1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d8fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d8ff:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d909:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d90f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d916:	e8 e4 8f fe ff       	call   c00168ff <Phys::allocatePage()>
c002d91b:	89 c6                	mov    esi,eax
c002d91d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d923:	81 c6 00 10 00 00    	add    esi,0x1000
c002d929:	e8 d1 8f fe ff       	call   c00168ff <Phys::allocatePage()>
c002d92e:	39 c6                	cmp    esi,eax
c002d930:	74 10                	je     c002d942 <SATAPI::open(int, int, void*)+0x6c>
c002d932:	83 ec 0c             	sub    esp,0xc
c002d935:	68 00 3d 03 c0       	push   0xc0033d00
c002d93a:	e8 5f 2b ff ff       	call   c002049e <KePanic(char const*)>
c002d93f:	83 c4 10             	add    esp,0x10
c002d942:	83 ec 0c             	sub    esp,0xc
c002d945:	6a 02                	push   0x2
c002d947:	e8 01 a8 fe ff       	call   c001814d <Virt::allocateKernelVirtualPages(int)>
c002d94c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d952:	6a 03                	push   0x3
c002d954:	50                   	push   eax
c002d955:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d95b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d961:	e8 fa ae fe ff       	call   c0018860 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d966:	83 c4 14             	add    esp,0x14
c002d969:	68 78 01 00 00       	push   0x178
c002d96e:	e8 83 8c fe ff       	call   c00165f6 <malloc>
c002d973:	83 c4 0c             	add    esp,0xc
c002d976:	89 c6                	mov    esi,eax
c002d978:	6a 00                	push   0x0
c002d97a:	68 ff ff ff 7f       	push   0x7fffffff
c002d97f:	6a 00                	push   0x0
c002d981:	6a 00                	push   0x0
c002d983:	53                   	push   ebx
c002d984:	68 16 3d 03 c0       	push   0xc0033d16
c002d989:	50                   	push   eax
c002d98a:	e8 2d ed fe ff       	call   c001c6bc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d98f:	83 c4 14             	add    esp,0x14
c002d992:	56                   	push   esi
c002d993:	e8 e4 ed fe ff       	call   c001c77c <LogicalDisk::assignDriveLetter()>
c002d998:	5a                   	pop    edx
c002d999:	0f be c0             	movsx  eax,al
c002d99c:	59                   	pop    ecx
c002d99d:	50                   	push   eax
c002d99e:	68 5c 3b 03 c0       	push   0xc0033b5c
c002d9a3:	e8 dd ba fe ff       	call   c0019485 <Dbg::kprintf(char const*, ...)>
c002d9a8:	58                   	pop    eax
c002d9a9:	5a                   	pop    edx
c002d9aa:	56                   	push   esi
c002d9ab:	53                   	push   ebx
c002d9ac:	e8 55 db fe ff       	call   c001b506 <Device::addChild(Device*)>
c002d9b1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d9b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d9ba:	e8 93 df fe ff       	call   c001b952 <PhysicalDisk::startCache()>
c002d9bf:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d9c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d9c9:	e8 b2 fe ff ff       	call   c002d880 <SATAPI::detectMedia()>
c002d9ce:	83 c4 14             	add    esp,0x14
c002d9d1:	31 c0                	xor    eax,eax
c002d9d3:	5b                   	pop    ebx
c002d9d4:	5e                   	pop    esi
c002d9d5:	c3                   	ret    

c002d9d6 <SATAPI::read(unsigned long long, int, void*)>:
c002d9d6:	57                   	push   edi
c002d9d7:	56                   	push   esi
c002d9d8:	53                   	push   ebx
c002d9d9:	83 ec 30             	sub    esp,0x30
c002d9dc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d9e0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002d9e4:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002d9e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d9ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d9f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d9f4:	83 fe 04             	cmp    esi,0x4
c002d9f7:	7e 10                	jle    c002da09 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002d9f9:	83 ec 0c             	sub    esp,0xc
c002d9fc:	68 24 3d 03 c0       	push   0xc0033d24
c002da01:	e8 98 2a ff ff       	call   c002049e <KePanic(char const*)>
c002da06:	83 c4 10             	add    esp,0x10
c002da09:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002da0f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002da15:	51                   	push   ecx
c002da16:	50                   	push   eax
c002da17:	83 c0 02             	add    eax,0x2
c002da1a:	c1 e0 07             	shl    eax,0x7
c002da1d:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002da23:	50                   	push   eax
c002da24:	52                   	push   edx
c002da25:	e8 36 e1 ff ff       	call   c002bb60 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002da2a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002da2e:	b9 03 00 00 00       	mov    ecx,0x3
c002da33:	fc                   	cld    
c002da34:	31 c0                	xor    eax,eax
c002da36:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002da38:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002da3d:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002da42:	83 c4 0c             	add    esp,0xc
c002da45:	6a 00                	push   0x0
c002da47:	6a 00                	push   0x0
c002da49:	6a 00                	push   0x0
c002da4b:	6a 00                	push   0x0
c002da4d:	6a 02                	push   0x2
c002da4f:	8d 44 24 30          	lea    eax,[esp+0x30]
c002da53:	50                   	push   eax
c002da54:	53                   	push   ebx
c002da55:	e8 0c fb ff ff       	call   c002d566 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002da5a:	83 c4 20             	add    esp,0x20
c002da5d:	85 c0                	test   eax,eax
c002da5f:	75 44                	jne    c002daa5 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002da61:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002da65:	b9 03 00 00 00       	mov    ecx,0x3
c002da6a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002da6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002da70:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002da75:	0f c8                	bswap  eax
c002da77:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002da7b:	89 f0                	mov    eax,esi
c002da7d:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002da81:	50                   	push   eax
c002da82:	56                   	push   esi
c002da83:	c1 e6 0b             	shl    esi,0xb
c002da86:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002da8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002da8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002da92:	56                   	push   esi
c002da93:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002da97:	50                   	push   eax
c002da98:	53                   	push   ebx
c002da99:	e8 c8 fa ff ff       	call   c002d566 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002da9e:	83 c4 20             	add    esp,0x20
c002daa1:	85 c0                	test   eax,eax
c002daa3:	74 14                	je     c002dab9 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002daa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002daa9:	83 ec 0c             	sub    esp,0xc
c002daac:	53                   	push   ebx
c002daad:	e8 ce fd ff ff       	call   c002d880 <SATAPI::detectMedia()>
c002dab2:	83 c4 10             	add    esp,0x10
c002dab5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002dab9:	83 c4 30             	add    esp,0x30
c002dabc:	5b                   	pop    ebx
c002dabd:	5e                   	pop    esi
c002dabe:	5f                   	pop    edi
c002dabf:	c3                   	ret    

c002dac0 <IOAPIC::close(int, int, void*)>:
c002dac0:	b8 00 00 00 00       	mov    eax,0x0
c002dac5:	c3                   	ret    

c002dac6 <apicGetBase()>:
c002dac6:	55                   	push   ebp
c002dac7:	89 e5                	mov    ebp,esp
c002dac9:	83 ec 18             	sub    esp,0x18
c002dacc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002dad1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002dad7:	83 e0 08             	and    eax,0x8
c002dada:	0f b6 c0             	movzx  eax,al
c002dadd:	85 c0                	test   eax,eax
c002dadf:	75 07                	jne    c002dae8 <apicGetBase()+0x22>
c002dae1:	b8 00 00 00 00       	mov    eax,0x0
c002dae6:	eb 21                	jmp    c002db09 <apicGetBase()+0x43>
c002dae8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002daed:	83 ec 08             	sub    esp,0x8
c002daf0:	6a 1b                	push   0x1b
c002daf2:	50                   	push   eax
c002daf3:	e8 68 80 fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c002daf8:	83 c4 10             	add    esp,0x10
c002dafb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002dafe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002db01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002db04:	25 00 00 ff ff       	and    eax,0xffff0000
c002db09:	c9                   	leave  
c002db0a:	c3                   	ret    
c002db0b:	90                   	nop

c002db0c <IOAPIC::IOAPIC()>:
c002db0c:	83 ec 0c             	sub    esp,0xc
c002db0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db13:	83 ec 08             	sub    esp,0x8
c002db16:	68 88 3d 03 c0       	push   0xc0033d88
c002db1b:	50                   	push   eax
c002db1c:	e8 47 db fe ff       	call   c001b668 <Device::Device(char const*)>
c002db21:	83 c4 10             	add    esp,0x10
c002db24:	ba 98 3d 03 c0       	mov    edx,0xc0033d98
c002db29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db2d:	89 10                	mov    DWORD PTR [eax],edx
c002db2f:	90                   	nop
c002db30:	83 c4 0c             	add    esp,0xc
c002db33:	c3                   	ret    

c002db34 <apicOpen()>:
c002db34:	55                   	push   ebp
c002db35:	89 e5                	mov    ebp,esp
c002db37:	53                   	push   ebx
c002db38:	83 ec 34             	sub    esp,0x34
c002db3b:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002db40:	83 f0 01             	xor    eax,0x1
c002db43:	0f b6 c0             	movzx  eax,al
c002db46:	85 c0                	test   eax,eax
c002db48:	0f 84 a3 00 00 00    	je     c002dbf1 <apicOpen()+0xbd>
c002db4e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002db52:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002db57:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002db5b:	0f b6 c0             	movzx  eax,al
c002db5e:	39 c2                	cmp    edx,eax
c002db60:	0f 83 84 00 00 00    	jae    c002dbea <apicOpen()+0xb6>
c002db66:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002db6d:	83 ec 0c             	sub    esp,0xc
c002db70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002db73:	e8 7e 8a fe ff       	call   c00165f6 <malloc>
c002db78:	83 c4 10             	add    esp,0x10
c002db7b:	89 c3                	mov    ebx,eax
c002db7d:	83 ec 0c             	sub    esp,0xc
c002db80:	53                   	push   ebx
c002db81:	e8 86 ff ff ff       	call   c002db0c <IOAPIC::IOAPIC()>
c002db86:	83 c4 10             	add    esp,0x10
c002db89:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002db8c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002db90:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002db93:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002db9a:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002db9f:	83 c0 01             	add    eax,0x1
c002dba2:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002dba7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002dbac:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002dbb2:	83 ec 08             	sub    esp,0x8
c002dbb5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dbb8:	50                   	push   eax
c002dbb9:	e8 48 d9 fe ff       	call   c001b506 <Device::addChild(Device*)>
c002dbbe:	83 c4 10             	add    esp,0x10
c002dbc1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dbc4:	8b 00                	mov    eax,DWORD PTR [eax]
c002dbc6:	83 c0 08             	add    eax,0x8
c002dbc9:	8b 00                	mov    eax,DWORD PTR [eax]
c002dbcb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002dbcf:	6a 00                	push   0x0
c002dbd1:	6a 00                	push   0x0
c002dbd3:	52                   	push   edx
c002dbd4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dbd7:	ff d0                	call   eax
c002dbd9:	83 c4 10             	add    esp,0x10
c002dbdc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002dbdf:	83 c0 01             	add    eax,0x1
c002dbe2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002dbe5:	e9 68 ff ff ff       	jmp    c002db52 <apicOpen()+0x1e>
c002dbea:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002dbf1:	e8 d0 fe ff ff       	call   c002dac6 <apicGetBase()>
c002dbf6:	05 f0 00 00 00       	add    eax,0xf0
c002dbfb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dbfe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dc01:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc03:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002dc06:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002dc0d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002dc14:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dc17:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002dc1a:	89 10                	mov    DWORD PTR [eax],edx
c002dc1c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002dc23:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002dc28:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002dc2b:	7d 7c                	jge    c002dca9 <apicOpen()+0x175>
c002dc2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc30:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dc37:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002dc3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc3d:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dc44:	c1 e8 08             	shr    eax,0x8
c002dc47:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002dc4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc4e:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dc55:	c1 e8 18             	shr    eax,0x18
c002dc58:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002dc5b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002dc5f:	3d ff 00 00 00       	cmp    eax,0xff
c002dc64:	75 3a                	jne    c002dca0 <apicOpen()+0x16c>
c002dc66:	e8 5b fe ff ff       	call   c002dac6 <apicGetBase()>
c002dc6b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002dc6f:	83 fa 01             	cmp    edx,0x1
c002dc72:	75 07                	jne    c002dc7b <apicOpen()+0x147>
c002dc74:	ba 60 03 00 00       	mov    edx,0x360
c002dc79:	eb 05                	jmp    c002dc80 <apicOpen()+0x14c>
c002dc7b:	ba 50 03 00 00       	mov    edx,0x350
c002dc80:	01 d0                	add    eax,edx
c002dc82:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dc85:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dc88:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc8a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002dc8d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002dc94:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002dc98:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dc9b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002dc9e:	89 10                	mov    DWORD PTR [eax],edx
c002dca0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002dca4:	e9 7a ff ff ff       	jmp    c002dc23 <apicOpen()+0xef>
c002dca9:	90                   	nop
c002dcaa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dcad:	c9                   	leave  
c002dcae:	c3                   	ret    
c002dcaf:	90                   	nop

c002dcb0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002dcb0:	55                   	push   ebp
c002dcb1:	89 e5                	mov    ebp,esp
c002dcb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dcb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002dcbc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dcbf:	72 1d                	jb     c002dcde <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dcc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dcc4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002dcca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dccd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002dcd3:	01 d0                	add    eax,edx
c002dcd5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dcd8:	73 04                	jae    c002dcde <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dcda:	b0 01                	mov    al,0x1
c002dcdc:	eb 02                	jmp    c002dce0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002dcde:	b0 00                	mov    al,0x0
c002dce0:	5d                   	pop    ebp
c002dce1:	c3                   	ret    

c002dce2 <IOAPIC::read(int)>:
c002dce2:	55                   	push   ebp
c002dce3:	89 e5                	mov    ebp,esp
c002dce5:	83 ec 10             	sub    esp,0x10
c002dce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dceb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dcf1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dcf4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dcf7:	0f b6 d0             	movzx  edx,al
c002dcfa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dcfd:	89 10                	mov    DWORD PTR [eax],edx
c002dcff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dd02:	83 c0 10             	add    eax,0x10
c002dd05:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd07:	c9                   	leave  
c002dd08:	c3                   	ret    
c002dd09:	90                   	nop

c002dd0a <IOAPIC::open(int, int, void*)>:
c002dd0a:	55                   	push   ebp
c002dd0b:	89 e5                	mov    ebp,esp
c002dd0d:	57                   	push   edi
c002dd0e:	56                   	push   esi
c002dd0f:	53                   	push   ebx
c002dd10:	83 ec 04             	sub    esp,0x4
c002dd13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002dd19:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dd1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd22:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dd28:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002dd2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd32:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dd38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dd41:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002dd48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd4b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002dd51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd54:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002dd5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd5d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dd63:	0f b6 f0             	movzx  esi,al
c002dd66:	89 d0                	mov    eax,edx
c002dd68:	ba 00 00 00 00       	mov    edx,0x0
c002dd6d:	89 c7                	mov    edi,eax
c002dd6f:	83 e7 ff             	and    edi,0xffffffff
c002dd72:	89 f9                	mov    ecx,edi
c002dd74:	0f b6 da             	movzx  ebx,dl
c002dd77:	89 c8                	mov    eax,ecx
c002dd79:	89 da                	mov    edx,ebx
c002dd7b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002dd7e:	8d 5e 08             	lea    ebx,[esi+0x8]
c002dd81:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002dd85:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002dd89:	83 e0 00             	and    eax,0x0
c002dd8c:	09 d0                	or     eax,edx
c002dd8e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002dd92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd95:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dd9b:	8d 50 01             	lea    edx,[eax+0x1]
c002dd9e:	88 d1                	mov    cl,dl
c002dda0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002dda3:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002dda9:	0f b6 d0             	movzx  edx,al
c002ddac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002ddaf:	83 c2 08             	add    edx,0x8
c002ddb2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002ddb6:	0f b6 c9             	movzx  ecx,cl
c002ddb9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002ddbf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002ddc3:	6a 01                	push   0x1
c002ddc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002ddc8:	e8 15 ff ff ff       	call   c002dce2 <IOAPIC::read(int)>
c002ddcd:	83 c4 08             	add    esp,0x8
c002ddd0:	c1 f8 10             	sar    eax,0x10
c002ddd3:	0f b6 c0             	movzx  eax,al
c002ddd6:	8d 50 01             	lea    edx,[eax+0x1]
c002ddd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dddc:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002dde2:	b8 00 00 00 00       	mov    eax,0x0
c002dde7:	8d 65 f4             	lea    esp,[ebp-0xc]
c002ddea:	5b                   	pop    ebx
c002ddeb:	5e                   	pop    esi
c002ddec:	5f                   	pop    edi
c002dded:	5d                   	pop    ebp
c002ddee:	c3                   	ret    
c002ddef:	90                   	nop

c002ddf0 <IOAPIC::write(int, int)>:
c002ddf0:	55                   	push   ebp
c002ddf1:	89 e5                	mov    ebp,esp
c002ddf3:	83 ec 10             	sub    esp,0x10
c002ddf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002ddf9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002ddff:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002de02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002de05:	0f b6 d0             	movzx  edx,al
c002de08:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002de0b:	89 10                	mov    DWORD PTR [eax],edx
c002de0d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002de10:	8d 50 10             	lea    edx,[eax+0x10]
c002de13:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002de16:	89 02                	mov    DWORD PTR [edx],eax
c002de18:	90                   	nop
c002de19:	c9                   	leave  
c002de1a:	c3                   	ret    
c002de1b:	90                   	nop

c002de1c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002de1c:	55                   	push   ebp
c002de1d:	89 e5                	mov    ebp,esp
c002de1f:	53                   	push   ebx
c002de20:	83 ec 2c             	sub    esp,0x2c
c002de23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002de26:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002de29:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002de2c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002de2f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002de32:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002de35:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002de38:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002de3b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002de3e:	88 d8                	mov    al,bl
c002de40:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002de43:	88 c8                	mov    al,cl
c002de45:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002de48:	88 d0                	mov    al,dl
c002de4a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002de4d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002de51:	83 c0 08             	add    eax,0x8
c002de54:	01 c0                	add    eax,eax
c002de56:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002de59:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002de5d:	83 c0 08             	add    eax,0x8
c002de60:	01 c0                	add    eax,eax
c002de62:	83 c0 01             	add    eax,0x1
c002de65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002de68:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002de6b:	50                   	push   eax
c002de6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002de6f:	e8 6e fe ff ff       	call   c002dce2 <IOAPIC::read(int)>
c002de74:	83 c4 08             	add    esp,0x8
c002de77:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002de7a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002de81:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002de84:	c1 e0 18             	shl    eax,0x18
c002de87:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002de8a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002de8d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002de90:	52                   	push   edx
c002de91:	50                   	push   eax
c002de92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002de95:	e8 56 ff ff ff       	call   c002ddf0 <IOAPIC::write(int, int)>
c002de9a:	83 c4 0c             	add    esp,0xc
c002de9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dea0:	50                   	push   eax
c002dea1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dea4:	e8 39 fe ff ff       	call   c002dce2 <IOAPIC::read(int)>
c002dea9:	83 c4 08             	add    esp,0x8
c002deac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002deaf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002deb6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002debd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dec4:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dec8:	85 c0                	test   eax,eax
c002deca:	74 09                	je     c002ded5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002decc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002ded3:	eb 07                	jmp    c002dedc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002ded5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dedc:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dee0:	85 c0                	test   eax,eax
c002dee2:	74 09                	je     c002deed <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dee4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002deeb:	eb 07                	jmp    c002def4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002deed:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002def4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002defb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002deff:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002df02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002df05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002df08:	52                   	push   edx
c002df09:	50                   	push   eax
c002df0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002df0d:	e8 de fe ff ff       	call   c002ddf0 <IOAPIC::write(int, int)>
c002df12:	83 c4 0c             	add    esp,0xc
c002df15:	90                   	nop
c002df16:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002df19:	c9                   	leave  
c002df1a:	c3                   	ret    
c002df1b:	90                   	nop

c002df1c <APICTimer::close(int, int, void*)>:
c002df1c:	b8 00 00 00 00       	mov    eax,0x0
c002df21:	c3                   	ret    
c002df22:	66 90                	xchg   ax,ax

c002df24 <apicTimerHandler(regs*, void*)>:
c002df24:	83 ec 0c             	sub    esp,0xc
c002df27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002df2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002df2d:	b8 10 27 00 00       	mov    eax,0x2710
c002df32:	ba 00 00 00 00       	mov    edx,0x0
c002df37:	f7 f1                	div    ecx
c002df39:	83 ec 0c             	sub    esp,0xc
c002df3c:	50                   	push   eax
c002df3d:	e8 36 f0 fe ff       	call   c001cf78 <timerHandler(unsigned int)>
c002df42:	83 c4 10             	add    esp,0x10
c002df45:	90                   	nop
c002df46:	83 c4 0c             	add    esp,0xc
c002df49:	c3                   	ret    
c002df4a:	66 90                	xchg   ax,ax

c002df4c <APICTimer::open(int, int, void*)>:
c002df4c:	83 ec 0c             	sub    esp,0xc
c002df4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df53:	8b 00                	mov    eax,DWORD PTR [eax]
c002df55:	83 c0 24             	add    eax,0x24
c002df58:	8b 00                	mov    eax,DWORD PTR [eax]
c002df5a:	83 ec 08             	sub    esp,0x8
c002df5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002df61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002df65:	ff d0                	call   eax
c002df67:	83 c4 10             	add    esp,0x10
c002df6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df6e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002df72:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002df78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002df80:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002df86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002df8a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002df90:	83 ec 0c             	sub    esp,0xc
c002df93:	51                   	push   ecx
c002df94:	6a 01                	push   0x1
c002df96:	68 24 df 02 c0       	push   0xc002df24
c002df9b:	52                   	push   edx
c002df9c:	50                   	push   eax
c002df9d:	e8 10 d5 fe ff       	call   c001b4b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dfa2:	83 c4 20             	add    esp,0x20
c002dfa5:	89 c2                	mov    edx,eax
c002dfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dfb1:	b8 00 00 00 00       	mov    eax,0x0
c002dfb6:	83 c4 0c             	add    esp,0xc
c002dfb9:	c3                   	ret    
c002dfba:	66 90                	xchg   ax,ax

c002dfbc <APICTimer::write(int)>:
c002dfbc:	83 ec 0c             	sub    esp,0xc
c002dfbf:	83 ec 0c             	sub    esp,0xc
c002dfc2:	68 bc 3d 03 c0       	push   0xc0033dbc
c002dfc7:	e8 d2 24 ff ff       	call   c002049e <KePanic(char const*)>
c002dfcc:	83 c4 10             	add    esp,0x10
c002dfcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002dfd7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dfdd:	90                   	nop
c002dfde:	83 c4 0c             	add    esp,0xc
c002dfe1:	c3                   	ret    
c002dfe2:	66 90                	xchg   ax,ax

c002dfe4 <APICTimer::APICTimer()>:
c002dfe4:	83 ec 0c             	sub    esp,0xc
c002dfe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfeb:	83 ec 08             	sub    esp,0x8
c002dfee:	68 cc 3d 03 c0       	push   0xc0033dcc
c002dff3:	50                   	push   eax
c002dff4:	e8 b3 ee fe ff       	call   c001ceac <Timer::Timer(char const*)>
c002dff9:	83 c4 10             	add    esp,0x10
c002dffc:	ba e0 3d 03 c0       	mov    edx,0xc0033de0
c002e001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e005:	89 10                	mov    DWORD PTR [eax],edx
c002e007:	90                   	nop
c002e008:	83 c4 0c             	add    esp,0xc
c002e00b:	c3                   	ret    

c002e00c <PIT::write(int)>:
c002e00c:	83 ec 10             	sub    esp,0x10
c002e00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e013:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e017:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e01d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e021:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002e026:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002e02b:	89 c2                	mov    edx,eax
c002e02d:	c1 fa 1f             	sar    edx,0x1f
c002e030:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002e034:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e038:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002e03f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002e044:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002e048:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002e04d:	ee                   	out    dx,al
c002e04e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e052:	0f b6 c0             	movzx  eax,al
c002e055:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002e05c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002e060:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002e064:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002e069:	ee                   	out    dx,al
c002e06a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e06e:	c1 f8 08             	sar    eax,0x8
c002e071:	0f b6 c0             	movzx  eax,al
c002e074:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002e07b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002e07f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002e083:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002e088:	ee                   	out    dx,al
c002e089:	90                   	nop
c002e08a:	83 c4 10             	add    esp,0x10
c002e08d:	c3                   	ret    
c002e08e:	66 90                	xchg   ax,ax

c002e090 <pitHandler(regs*, void*)>:
c002e090:	83 ec 0c             	sub    esp,0xc
c002e093:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002e099:	b8 10 27 00 00       	mov    eax,0x2710
c002e09e:	89 c2                	mov    edx,eax
c002e0a0:	c1 fa 1f             	sar    edx,0x1f
c002e0a3:	f7 f9                	idiv   ecx
c002e0a5:	83 ec 0c             	sub    esp,0xc
c002e0a8:	50                   	push   eax
c002e0a9:	e8 ca ee fe ff       	call   c001cf78 <timerHandler(unsigned int)>
c002e0ae:	83 c4 10             	add    esp,0x10
c002e0b1:	90                   	nop
c002e0b2:	83 c4 0c             	add    esp,0xc
c002e0b5:	c3                   	ret    
c002e0b6:	66 90                	xchg   ax,ax

c002e0b8 <PIT::open(int, int, void*)>:
c002e0b8:	83 ec 0c             	sub    esp,0xc
c002e0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0bf:	8b 00                	mov    eax,DWORD PTR [eax]
c002e0c1:	83 c0 24             	add    eax,0x24
c002e0c4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e0c6:	83 ec 08             	sub    esp,0x8
c002e0c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e0cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e0d1:	ff d0                	call   eax
c002e0d3:	83 c4 10             	add    esp,0x10
c002e0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0da:	83 ec 0c             	sub    esp,0xc
c002e0dd:	6a 00                	push   0x0
c002e0df:	6a 01                	push   0x1
c002e0e1:	68 90 e0 02 c0       	push   0xc002e090
c002e0e6:	6a 00                	push   0x0
c002e0e8:	50                   	push   eax
c002e0e9:	e8 c4 d3 fe ff       	call   c001b4b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e0ee:	83 c4 20             	add    esp,0x20
c002e0f1:	89 c2                	mov    edx,eax
c002e0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0f7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e0fd:	b8 00 00 00 00       	mov    eax,0x0
c002e102:	83 c4 0c             	add    esp,0xc
c002e105:	c3                   	ret    
c002e106:	66 90                	xchg   ax,ax

c002e108 <PIT::close(int, int, void*)>:
c002e108:	83 ec 0c             	sub    esp,0xc
c002e10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e10f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002e119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e11d:	6a 01                	push   0x1
c002e11f:	68 90 e0 02 c0       	push   0xc002e090
c002e124:	6a 00                	push   0x0
c002e126:	50                   	push   eax
c002e127:	e8 bc d3 fe ff       	call   c001b4e8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002e12c:	83 c4 10             	add    esp,0x10
c002e12f:	b8 00 00 00 00       	mov    eax,0x0
c002e134:	83 c4 0c             	add    esp,0xc
c002e137:	c3                   	ret    

c002e138 <PIT::PIT()>:
c002e138:	83 ec 0c             	sub    esp,0xc
c002e13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e13f:	83 ec 08             	sub    esp,0x8
c002e142:	68 08 3e 03 c0       	push   0xc0033e08
c002e147:	50                   	push   eax
c002e148:	e8 5f ed fe ff       	call   c001ceac <Timer::Timer(char const*)>
c002e14d:	83 c4 10             	add    esp,0x10
c002e150:	ba 30 3e 03 c0       	mov    edx,0xc0033e30
c002e155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e159:	89 10                	mov    DWORD PTR [eax],edx
c002e15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e15f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e165:	0f b6 d0             	movzx  edx,al
c002e168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e16c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002e173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e177:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e17d:	0f b6 d0             	movzx  edx,al
c002e180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e184:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e18d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e193:	8d 50 01             	lea    edx,[eax+0x1]
c002e196:	88 d1                	mov    cl,dl
c002e198:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e19c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e1a2:	0f b6 d0             	movzx  edx,al
c002e1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1a9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e1ad:	83 e1 3f             	and    ecx,0x3f
c002e1b0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e1b4:	90                   	nop
c002e1b5:	83 c4 0c             	add    esp,0xc
c002e1b8:	c3                   	ret    
c002e1b9:	66 90                	xchg   ax,ax
c002e1bb:	66 90                	xchg   ax,ax
c002e1bd:	66 90                	xchg   ax,ax
c002e1bf:	90                   	nop

c002e1c0 <avxDetect>:
c002e1c0:	b8 01 00 00 00       	mov    eax,0x1
c002e1c5:	0f a2                	cpuid  
c002e1c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e1cd:	74 15                	je     c002e1e4 <avxDetect.noAVX>
c002e1cf:	b8 01 00 00 00       	mov    eax,0x1
c002e1d4:	0f a2                	cpuid  
c002e1d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e1dc:	74 06                	je     c002e1e4 <avxDetect.noAVX>
c002e1de:	b8 01 00 00 00       	mov    eax,0x1
c002e1e3:	c3                   	ret    

c002e1e4 <avxDetect.noAVX>:
c002e1e4:	b8 00 00 00 00       	mov    eax,0x0
c002e1e9:	c3                   	ret    

c002e1ea <avxSave>:
c002e1ea:	53                   	push   ebx
c002e1eb:	52                   	push   edx
c002e1ec:	31 c0                	xor    eax,eax
c002e1ee:	48                   	dec    eax
c002e1ef:	89 c2                	mov    edx,eax
c002e1f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e1f5:	0f ae 23             	xsave  [ebx]
c002e1f8:	5a                   	pop    edx
c002e1f9:	5b                   	pop    ebx
c002e1fa:	c3                   	ret    

c002e1fb <avxLoad>:
c002e1fb:	53                   	push   ebx
c002e1fc:	52                   	push   edx
c002e1fd:	31 c0                	xor    eax,eax
c002e1ff:	48                   	dec    eax
c002e200:	89 c2                	mov    edx,eax
c002e202:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e206:	0f ae 2b             	xrstor [ebx]
c002e209:	5a                   	pop    edx
c002e20a:	5b                   	pop    ebx
c002e20b:	c3                   	ret    

c002e20c <avxInit>:
c002e20c:	e8 47 03 00 00       	call   c002e558 <sseInit>
c002e211:	50                   	push   eax
c002e212:	51                   	push   ecx
c002e213:	0f 20 e0             	mov    eax,cr4
c002e216:	0d 00 00 04 00       	or     eax,0x40000
c002e21b:	0f 22 e0             	mov    cr4,eax
c002e21e:	31 c9                	xor    ecx,ecx
c002e220:	0f 01 d0             	xgetbv 
c002e223:	0d 07 00 00 00       	or     eax,0x7
c002e228:	0f 01 d1             	xsetbv 
c002e22b:	59                   	pop    ecx
c002e22c:	58                   	pop    eax
c002e22d:	c3                   	ret    

c002e22e <avxClose>:
c002e22e:	c3                   	ret    
c002e22f:	90                   	nop

c002e230 <isr0>:
c002e230:	fa                   	cli    
c002e231:	68 00 00 00 00       	push   0x0
c002e236:	68 00 00 00 00       	push   0x0
c002e23b:	e9 56 01 00 00       	jmp    c002e396 <int_common_stub>

c002e240 <isr1>:
c002e240:	fa                   	cli    
c002e241:	6a 00                	push   0x0
c002e243:	6a 01                	push   0x1
c002e245:	e9 4c 01 00 00       	jmp    c002e396 <int_common_stub>

c002e24a <isr2>:
c002e24a:	fa                   	cli    
c002e24b:	6a 00                	push   0x0
c002e24d:	6a 02                	push   0x2
c002e24f:	e9 42 01 00 00       	jmp    c002e396 <int_common_stub>

c002e254 <isr3>:
c002e254:	fa                   	cli    
c002e255:	6a 00                	push   0x0
c002e257:	6a 03                	push   0x3
c002e259:	e9 38 01 00 00       	jmp    c002e396 <int_common_stub>

c002e25e <isr4>:
c002e25e:	fa                   	cli    
c002e25f:	6a 00                	push   0x0
c002e261:	6a 04                	push   0x4
c002e263:	e9 2e 01 00 00       	jmp    c002e396 <int_common_stub>

c002e268 <isr5>:
c002e268:	fa                   	cli    
c002e269:	6a 00                	push   0x0
c002e26b:	6a 05                	push   0x5
c002e26d:	e9 24 01 00 00       	jmp    c002e396 <int_common_stub>

c002e272 <isr6>:
c002e272:	fa                   	cli    
c002e273:	6a 00                	push   0x0
c002e275:	6a 06                	push   0x6
c002e277:	e9 1a 01 00 00       	jmp    c002e396 <int_common_stub>

c002e27c <isr7>:
c002e27c:	fa                   	cli    
c002e27d:	6a 00                	push   0x0
c002e27f:	6a 07                	push   0x7
c002e281:	e9 10 01 00 00       	jmp    c002e396 <int_common_stub>

c002e286 <isr8>:
c002e286:	fa                   	cli    
c002e287:	6a 08                	push   0x8
c002e289:	e9 08 01 00 00       	jmp    c002e396 <int_common_stub>

c002e28e <isr9>:
c002e28e:	fa                   	cli    
c002e28f:	6a 00                	push   0x0
c002e291:	6a 09                	push   0x9
c002e293:	e9 fe 00 00 00       	jmp    c002e396 <int_common_stub>

c002e298 <isr10>:
c002e298:	fa                   	cli    
c002e299:	6a 0a                	push   0xa
c002e29b:	e9 f6 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2a0 <isr11>:
c002e2a0:	fa                   	cli    
c002e2a1:	6a 0b                	push   0xb
c002e2a3:	e9 ee 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2a8 <isr12>:
c002e2a8:	fa                   	cli    
c002e2a9:	6a 0c                	push   0xc
c002e2ab:	e9 e6 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2b0 <isr13>:
c002e2b0:	fa                   	cli    
c002e2b1:	6a 0d                	push   0xd
c002e2b3:	53                   	push   ebx
c002e2b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e2b8:	81 fb 86 e4 02 c0    	cmp    ebx,0xc002e486
c002e2be:	5b                   	pop    ebx
c002e2bf:	0f 84 c3 01 00 00    	je     c002e488 <finishSignal2>
c002e2c5:	e9 cc 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2ca <isr14>:
c002e2ca:	fa                   	cli    
c002e2cb:	6a 0e                	push   0xe
c002e2cd:	e9 c4 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2d2 <isr15>:
c002e2d2:	fa                   	cli    
c002e2d3:	6a 00                	push   0x0
c002e2d5:	6a 0f                	push   0xf
c002e2d7:	e9 ba 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2dc <isr16>:
c002e2dc:	fa                   	cli    
c002e2dd:	6a 00                	push   0x0
c002e2df:	6a 10                	push   0x10
c002e2e1:	e9 b0 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2e6 <isr17>:
c002e2e6:	fa                   	cli    
c002e2e7:	6a 00                	push   0x0
c002e2e9:	6a 11                	push   0x11
c002e2eb:	e9 a6 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2f0 <isr18>:
c002e2f0:	fa                   	cli    
c002e2f1:	6a 00                	push   0x0
c002e2f3:	6a 12                	push   0x12
c002e2f5:	e9 9c 00 00 00       	jmp    c002e396 <int_common_stub>

c002e2fa <irq3>:
c002e2fa:	fa                   	cli    
c002e2fb:	6a 00                	push   0x0
c002e2fd:	6a 23                	push   0x23
c002e2ff:	e9 92 00 00 00       	jmp    c002e396 <int_common_stub>

c002e304 <irq4>:
c002e304:	fa                   	cli    
c002e305:	6a 00                	push   0x0
c002e307:	6a 24                	push   0x24
c002e309:	e9 88 00 00 00       	jmp    c002e396 <int_common_stub>

c002e30e <irq5>:
c002e30e:	fa                   	cli    
c002e30f:	6a 00                	push   0x0
c002e311:	6a 25                	push   0x25
c002e313:	e9 7e 00 00 00       	jmp    c002e396 <int_common_stub>

c002e318 <irq6>:
c002e318:	fa                   	cli    
c002e319:	6a 00                	push   0x0
c002e31b:	6a 26                	push   0x26
c002e31d:	e9 74 00 00 00       	jmp    c002e396 <int_common_stub>

c002e322 <irq7>:
c002e322:	fa                   	cli    
c002e323:	6a 00                	push   0x0
c002e325:	6a 27                	push   0x27
c002e327:	e9 6a 00 00 00       	jmp    c002e396 <int_common_stub>

c002e32c <irq8>:
c002e32c:	fa                   	cli    
c002e32d:	6a 00                	push   0x0
c002e32f:	6a 28                	push   0x28
c002e331:	e9 60 00 00 00       	jmp    c002e396 <int_common_stub>

c002e336 <irq9>:
c002e336:	fa                   	cli    
c002e337:	6a 00                	push   0x0
c002e339:	6a 29                	push   0x29
c002e33b:	e9 56 00 00 00       	jmp    c002e396 <int_common_stub>

c002e340 <irq10>:
c002e340:	fa                   	cli    
c002e341:	6a 00                	push   0x0
c002e343:	6a 2a                	push   0x2a
c002e345:	e9 4c 00 00 00       	jmp    c002e396 <int_common_stub>

c002e34a <irq11>:
c002e34a:	fa                   	cli    
c002e34b:	6a 00                	push   0x0
c002e34d:	6a 2b                	push   0x2b
c002e34f:	e9 42 00 00 00       	jmp    c002e396 <int_common_stub>

c002e354 <irq12>:
c002e354:	fa                   	cli    
c002e355:	6a 00                	push   0x0
c002e357:	6a 2c                	push   0x2c
c002e359:	e9 38 00 00 00       	jmp    c002e396 <int_common_stub>

c002e35e <irq13>:
c002e35e:	fa                   	cli    
c002e35f:	6a 00                	push   0x0
c002e361:	6a 2d                	push   0x2d
c002e363:	e9 2e 00 00 00       	jmp    c002e396 <int_common_stub>

c002e368 <irq14>:
c002e368:	fa                   	cli    
c002e369:	6a 00                	push   0x0
c002e36b:	6a 2e                	push   0x2e
c002e36d:	e9 24 00 00 00       	jmp    c002e396 <int_common_stub>

c002e372 <irq15>:
c002e372:	fa                   	cli    
c002e373:	6a 00                	push   0x0
c002e375:	6a 2f                	push   0x2f
c002e377:	e9 1a 00 00 00       	jmp    c002e396 <int_common_stub>

c002e37c <irq1>:
c002e37c:	fa                   	cli    
c002e37d:	6a 00                	push   0x0
c002e37f:	6a 21                	push   0x21
c002e381:	eb 13                	jmp    c002e396 <int_common_stub>

c002e383 <irq2>:
c002e383:	fa                   	cli    
c002e384:	6a 00                	push   0x0
c002e386:	6a 22                	push   0x22
c002e388:	eb 0c                	jmp    c002e396 <int_common_stub>

c002e38a <isr96>:
c002e38a:	6a 00                	push   0x0
c002e38c:	6a 60                	push   0x60
c002e38e:	fb                   	sti    
c002e38f:	eb 37                	jmp    c002e3c8 <syscall_common_stub>

c002e391 <irq0>:
c002e391:	fa                   	cli    
c002e392:	6a 00                	push   0x0
c002e394:	6a 20                	push   0x20

c002e396 <int_common_stub>:
c002e396:	60                   	pusha  
c002e397:	1e                   	push   ds
c002e398:	06                   	push   es
c002e399:	0f a0                	push   fs
c002e39b:	0f a8                	push   gs
c002e39d:	66 b8 10 00          	mov    ax,0x10
c002e3a1:	66 8e d8             	mov    ds,ax
c002e3a4:	66 8e c0             	mov    es,ax
c002e3a7:	66 8e e0             	mov    fs,ax
c002e3aa:	66 8e e8             	mov    gs,ax
c002e3ad:	54                   	push   esp
c002e3ae:	fc                   	cld    
c002e3af:	e8 14 d6 fe ff       	call   c001b9c8 <int_handler>
c002e3b4:	81 c4 04 00 00 00    	add    esp,0x4
c002e3ba:	0f a9                	pop    gs
c002e3bc:	0f a1                	pop    fs
c002e3be:	07                   	pop    es
c002e3bf:	1f                   	pop    ds
c002e3c0:	61                   	popa   
c002e3c1:	81 c4 08 00 00 00    	add    esp,0x8
c002e3c7:	cf                   	iret   

c002e3c8 <syscall_common_stub>:
c002e3c8:	60                   	pusha  
c002e3c9:	1e                   	push   ds
c002e3ca:	06                   	push   es
c002e3cb:	0f a0                	push   fs
c002e3cd:	0f a8                	push   gs
c002e3cf:	66 b8 10 00          	mov    ax,0x10
c002e3d3:	66 8e d8             	mov    ds,ax
c002e3d6:	66 8e c0             	mov    es,ax
c002e3d9:	66 8e e0             	mov    fs,ax
c002e3dc:	66 8e e8             	mov    gs,ax
c002e3df:	54                   	push   esp
c002e3e0:	fc                   	cld    
c002e3e1:	e8 e2 d5 fe ff       	call   c001b9c8 <int_handler>
c002e3e6:	81 c4 04 00 00 00    	add    esp,0x4
c002e3ec:	0f a9                	pop    gs
c002e3ee:	0f a1                	pop    fs
c002e3f0:	07                   	pop    es
c002e3f1:	1f                   	pop    ds
c002e3f2:	e8 d4 2a ff ff       	call   c0020ecb <KiCheckSignalZ>
c002e3f7:	3d 00 00 00 00       	cmp    eax,0x0
c002e3fc:	0f 84 c0 00 00 00    	je     c002e4c2 <skipSignals>
c002e402:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e407:	61                   	popa   
c002e408:	53                   	push   ebx
c002e409:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e40f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e412:	5b                   	pop    ebx
c002e413:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e418:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e41b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e41e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e421:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e424:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e427:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e42a:	81 c4 08 00 00 00    	add    esp,0x8
c002e430:	5e                   	pop    esi
c002e431:	5b                   	pop    ebx
c002e432:	59                   	pop    ecx
c002e433:	5a                   	pop    edx
c002e434:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e437:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e43a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e43d:	52                   	push   edx
c002e43e:	51                   	push   ecx
c002e43f:	53                   	push   ebx
c002e440:	56                   	push   esi
c002e441:	81 ec 08 00 00 00    	sub    esp,0x8
c002e447:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e44a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e44d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e450:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e453:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e456:	60                   	pusha  
c002e457:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e45d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e460:	89 e3                	mov    ebx,esp
c002e462:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e465:	52                   	push   edx
c002e466:	68 86 e4 02 c0       	push   0xc002e486
c002e46b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e46e:	89 dc                	mov    esp,ebx
c002e470:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e473:	68 23 00 00 00       	push   0x23
c002e478:	51                   	push   ecx
c002e479:	68 02 02 00 00       	push   0x202
c002e47e:	68 1b 00 00 00       	push   0x1b
c002e483:	ff 36                	push   DWORD PTR [esi]
c002e485:	cf                   	iret   

c002e486 <finishSignal>:
c002e486:	cd 0f                	int    0xf

c002e488 <finishSignal2>:
c002e488:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e48e:	e8 b5 2a ff ff       	call   c0020f48 <KiFinishSignalZ>
c002e493:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e499:	68 23 00 00 00       	push   0x23
c002e49e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e4a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e4a4:	68 1b 00 00 00       	push   0x1b
c002e4a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e4ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e4af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e4b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e4b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e4b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e4bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e4be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e4c1:	cf                   	iret   

c002e4c2 <skipSignals>:
c002e4c2:	61                   	popa   
c002e4c3:	81 c4 08 00 00 00    	add    esp,0x8
c002e4c9:	cf                   	iret   
c002e4ca:	90                   	nop
c002e4cb:	90                   	nop

c002e4cc <irq16>:
c002e4cc:	fa                   	cli    
c002e4cd:	6a 00                	push   0x0
c002e4cf:	6a 30                	push   0x30
c002e4d1:	e9 c0 fe ff ff       	jmp    c002e396 <int_common_stub>

c002e4d6 <irq17>:
c002e4d6:	fa                   	cli    
c002e4d7:	6a 00                	push   0x0
c002e4d9:	6a 31                	push   0x31
c002e4db:	e9 b6 fe ff ff       	jmp    c002e396 <int_common_stub>

c002e4e0 <irq18>:
c002e4e0:	fa                   	cli    
c002e4e1:	6a 00                	push   0x0
c002e4e3:	6a 32                	push   0x32
c002e4e5:	e9 ac fe ff ff       	jmp    c002e396 <int_common_stub>

c002e4ea <irq19>:
c002e4ea:	fa                   	cli    
c002e4eb:	6a 00                	push   0x0
c002e4ed:	6a 33                	push   0x33
c002e4ef:	e9 a2 fe ff ff       	jmp    c002e396 <int_common_stub>

c002e4f4 <irq20>:
c002e4f4:	fa                   	cli    
c002e4f5:	6a 00                	push   0x0
c002e4f7:	6a 34                	push   0x34
c002e4f9:	e9 98 fe ff ff       	jmp    c002e396 <int_common_stub>

c002e4fe <irq21>:
c002e4fe:	fa                   	cli    
c002e4ff:	6a 00                	push   0x0
c002e501:	6a 35                	push   0x35
c002e503:	e9 8e fe ff ff       	jmp    c002e396 <int_common_stub>

c002e508 <irq22>:
c002e508:	fa                   	cli    
c002e509:	6a 00                	push   0x0
c002e50b:	6a 36                	push   0x36
c002e50d:	e9 84 fe ff ff       	jmp    c002e396 <int_common_stub>

c002e512 <irq23>:
c002e512:	fa                   	cli    
c002e513:	6a 00                	push   0x0
c002e515:	6a 37                	push   0x37
c002e517:	e9 7a fe ff ff       	jmp    c002e396 <int_common_stub>
c002e51c:	66 90                	xchg   ax,ax
c002e51e:	66 90                	xchg   ax,ax

c002e520 <i386GetRDRAND>:
c002e520:	b9 64 00 00 00       	mov    ecx,0x64

c002e525 <retry>:
c002e525:	0f c7 f0             	rdrand eax
c002e528:	72 05                	jb     c002e52f <retry.done>
c002e52a:	e2 f9                	loop   c002e525 <retry>

c002e52c <retry.fail>:
c002e52c:	31 c0                	xor    eax,eax
c002e52e:	c3                   	ret    

c002e52f <retry.done>:
c002e52f:	c3                   	ret    

c002e530 <sseDetect>:
c002e530:	b8 01 00 00 00       	mov    eax,0x1
c002e535:	0f a2                	cpuid  
c002e537:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e53d:	74 06                	je     c002e545 <sseDetect.noSSE>
c002e53f:	b8 01 00 00 00       	mov    eax,0x1
c002e544:	c3                   	ret    

c002e545 <sseDetect.noSSE>:
c002e545:	31 c0                	xor    eax,eax
c002e547:	c3                   	ret    

c002e548 <sseSave>:
c002e548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e54c:	0f ae 00             	fxsave [eax]
c002e54f:	c3                   	ret    

c002e550 <sseLoad>:
c002e550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e554:	0f ae 08             	fxrstor [eax]
c002e557:	c3                   	ret    

c002e558 <sseInit>:
c002e558:	e8 42 00 00 00       	call   c002e59f <x87Init>
c002e55d:	0f 20 e0             	mov    eax,cr4
c002e560:	66 0d 00 06          	or     ax,0x600
c002e564:	0f 22 e0             	mov    cr4,eax
c002e567:	c3                   	ret    

c002e568 <sseClose>:
c002e568:	c3                   	ret    
c002e569:	66 90                	xchg   ax,ax
c002e56b:	66 90                	xchg   ax,ax
c002e56d:	66 90                	xchg   ax,ax
c002e56f:	90                   	nop

c002e570 <value_37F>:
c002e570:	7f 03                	jg     c002e575 <value_37A+0x1>

c002e572 <value_37E>:
c002e572:	7e 03                	jle    c002e577 <x87Detect+0x1>

c002e574 <value_37A>:
c002e574:	7a 03                	jp     c002e579 <x87Detect+0x3>

c002e576 <x87Detect>:
c002e576:	b8 01 00 00 00       	mov    eax,0x1
c002e57b:	0f a2                	cpuid  
c002e57d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e583:	74 06                	je     c002e58b <x87Detect.nox87>
c002e585:	b8 01 00 00 00       	mov    eax,0x1
c002e58a:	c3                   	ret    

c002e58b <x87Detect.nox87>:
c002e58b:	b8 00 00 00 00       	mov    eax,0x0
c002e590:	c3                   	ret    

c002e591 <x87Save>:
c002e591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e595:	dd 30                	fnsave [eax]
c002e597:	c3                   	ret    

c002e598 <x87Load>:
c002e598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e59c:	dd 20                	frstor [eax]
c002e59e:	c3                   	ret    

c002e59f <x87Init>:
c002e59f:	0f 20 c0             	mov    eax,cr0
c002e5a2:	66 25 fb ff          	and    ax,0xfffb
c002e5a6:	66 0d 22 00          	or     ax,0x22
c002e5aa:	0f 22 c0             	mov    cr0,eax
c002e5ad:	db e3                	fninit 
c002e5af:	0f 06                	clts   
c002e5b1:	d9 2d 74 e5 02 c0    	fldcw  WORD PTR ds:0xc002e574
c002e5b7:	c3                   	ret    

c002e5b8 <x87Close>:
c002e5b8:	c3                   	ret    
c002e5b9:	66 90                	xchg   ax,ax
c002e5bb:	90                   	nop

c002e5bc <__do_global_ctors_aux>:
c002e5bc:	a1 70 f5 02 c0       	mov    eax,ds:0xc002f570
c002e5c1:	83 f8 ff             	cmp    eax,0xffffffff
c002e5c4:	74 1a                	je     c002e5e0 <__do_global_ctors_aux+0x24>
c002e5c6:	55                   	push   ebp
c002e5c7:	89 e5                	mov    ebp,esp
c002e5c9:	53                   	push   ebx
c002e5ca:	52                   	push   edx
c002e5cb:	bb 70 f5 02 c0       	mov    ebx,0xc002f570
c002e5d0:	ff d0                	call   eax
c002e5d2:	83 eb 04             	sub    ebx,0x4
c002e5d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e5d7:	83 f8 ff             	cmp    eax,0xffffffff
c002e5da:	75 f4                	jne    c002e5d0 <__do_global_ctors_aux+0x14>
c002e5dc:	58                   	pop    eax
c002e5dd:	5b                   	pop    ebx
c002e5de:	5d                   	pop    ebp
c002e5df:	c3                   	ret    
c002e5e0:	c3                   	ret    
c002e5e1:	66 90                	xchg   ax,ax
c002e5e3:	90                   	nop

c002e5e4 <__divdi3>:
c002e5e4:	55                   	push   ebp
c002e5e5:	57                   	push   edi
c002e5e6:	56                   	push   esi
c002e5e7:	53                   	push   ebx
c002e5e8:	83 ec 1c             	sub    esp,0x1c
c002e5eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e5ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e5f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e5f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e5fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e5fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e602:	85 db                	test   ebx,ebx
c002e604:	0f 88 8e 00 00 00    	js     c002e698 <__divdi3+0xb4>
c002e60a:	89 dd                	mov    ebp,ebx
c002e60c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e614:	89 d3                	mov    ebx,edx
c002e616:	85 d2                	test   edx,edx
c002e618:	79 0d                	jns    c002e627 <__divdi3+0x43>
c002e61a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e61e:	f7 d8                	neg    eax
c002e620:	83 d2 00             	adc    edx,0x0
c002e623:	f7 da                	neg    edx
c002e625:	89 d3                	mov    ebx,edx
c002e627:	89 c7                	mov    edi,eax
c002e629:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e62c:	85 db                	test   ebx,ebx
c002e62e:	75 48                	jne    c002e678 <__divdi3+0x94>
c002e630:	39 ef                	cmp    edi,ebp
c002e632:	76 24                	jbe    c002e658 <__divdi3+0x74>
c002e634:	89 ea                	mov    edx,ebp
c002e636:	f7 f7                	div    edi
c002e638:	89 c1                	mov    ecx,eax
c002e63a:	31 f6                	xor    esi,esi
c002e63c:	89 c8                	mov    eax,ecx
c002e63e:	89 f2                	mov    edx,esi
c002e640:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e644:	85 c9                	test   ecx,ecx
c002e646:	74 07                	je     c002e64f <__divdi3+0x6b>
c002e648:	f7 d8                	neg    eax
c002e64a:	83 d2 00             	adc    edx,0x0
c002e64d:	f7 da                	neg    edx
c002e64f:	83 c4 1c             	add    esp,0x1c
c002e652:	5b                   	pop    ebx
c002e653:	5e                   	pop    esi
c002e654:	5f                   	pop    edi
c002e655:	5d                   	pop    ebp
c002e656:	c3                   	ret    
c002e657:	90                   	nop
c002e658:	85 ff                	test   edi,edi
c002e65a:	75 0b                	jne    c002e667 <__divdi3+0x83>
c002e65c:	b8 01 00 00 00       	mov    eax,0x1
c002e661:	31 d2                	xor    edx,edx
c002e663:	f7 f3                	div    ebx
c002e665:	89 c7                	mov    edi,eax
c002e667:	31 d2                	xor    edx,edx
c002e669:	89 e8                	mov    eax,ebp
c002e66b:	f7 f7                	div    edi
c002e66d:	89 c6                	mov    esi,eax
c002e66f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e672:	f7 f7                	div    edi
c002e674:	89 c1                	mov    ecx,eax
c002e676:	eb c4                	jmp    c002e63c <__divdi3+0x58>
c002e678:	39 eb                	cmp    ebx,ebp
c002e67a:	77 3c                	ja     c002e6b8 <__divdi3+0xd4>
c002e67c:	0f bd f3             	bsr    esi,ebx
c002e67f:	83 f6 1f             	xor    esi,0x1f
c002e682:	75 40                	jne    c002e6c4 <__divdi3+0xe0>
c002e684:	39 eb                	cmp    ebx,ebp
c002e686:	72 09                	jb     c002e691 <__divdi3+0xad>
c002e688:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e68b:	0f 87 97 00 00 00    	ja     c002e728 <__divdi3+0x144>
c002e691:	b9 01 00 00 00       	mov    ecx,0x1
c002e696:	eb a4                	jmp    c002e63c <__divdi3+0x58>
c002e698:	f7 d9                	neg    ecx
c002e69a:	83 d3 00             	adc    ebx,0x0
c002e69d:	f7 db                	neg    ebx
c002e69f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e6a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e6a6:	89 dd                	mov    ebp,ebx
c002e6a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e6b0:	e9 5f ff ff ff       	jmp    c002e614 <__divdi3+0x30>
c002e6b5:	8d 76 00             	lea    esi,[esi+0x0]
c002e6b8:	31 f6                	xor    esi,esi
c002e6ba:	31 c9                	xor    ecx,ecx
c002e6bc:	e9 7b ff ff ff       	jmp    c002e63c <__divdi3+0x58>
c002e6c1:	8d 76 00             	lea    esi,[esi+0x0]
c002e6c4:	b8 20 00 00 00       	mov    eax,0x20
c002e6c9:	29 f0                	sub    eax,esi
c002e6cb:	89 f1                	mov    ecx,esi
c002e6cd:	d3 e3                	shl    ebx,cl
c002e6cf:	89 fa                	mov    edx,edi
c002e6d1:	88 c1                	mov    cl,al
c002e6d3:	d3 ea                	shr    edx,cl
c002e6d5:	09 da                	or     edx,ebx
c002e6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e6db:	89 f1                	mov    ecx,esi
c002e6dd:	d3 e7                	shl    edi,cl
c002e6df:	89 eb                	mov    ebx,ebp
c002e6e1:	88 c1                	mov    cl,al
c002e6e3:	d3 eb                	shr    ebx,cl
c002e6e5:	89 f1                	mov    ecx,esi
c002e6e7:	d3 e5                	shl    ebp,cl
c002e6e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e6ec:	88 c1                	mov    cl,al
c002e6ee:	d3 ea                	shr    edx,cl
c002e6f0:	09 d5                	or     ebp,edx
c002e6f2:	89 e8                	mov    eax,ebp
c002e6f4:	89 da                	mov    edx,ebx
c002e6f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e6fa:	89 d3                	mov    ebx,edx
c002e6fc:	89 c5                	mov    ebp,eax
c002e6fe:	f7 e7                	mul    edi
c002e700:	39 d3                	cmp    ebx,edx
c002e702:	72 18                	jb     c002e71c <__divdi3+0x138>
c002e704:	74 0a                	je     c002e710 <__divdi3+0x12c>
c002e706:	89 e9                	mov    ecx,ebp
c002e708:	31 f6                	xor    esi,esi
c002e70a:	e9 2d ff ff ff       	jmp    c002e63c <__divdi3+0x58>
c002e70f:	90                   	nop
c002e710:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e713:	89 f1                	mov    ecx,esi
c002e715:	d3 e7                	shl    edi,cl
c002e717:	39 c7                	cmp    edi,eax
c002e719:	73 eb                	jae    c002e706 <__divdi3+0x122>
c002e71b:	90                   	nop
c002e71c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e71f:	31 f6                	xor    esi,esi
c002e721:	e9 16 ff ff ff       	jmp    c002e63c <__divdi3+0x58>
c002e726:	66 90                	xchg   ax,ax
c002e728:	31 c9                	xor    ecx,ecx
c002e72a:	e9 0d ff ff ff       	jmp    c002e63c <__divdi3+0x58>
c002e72f:	90                   	nop

c002e730 <__moddi3>:
c002e730:	55                   	push   ebp
c002e731:	57                   	push   edi
c002e732:	56                   	push   esi
c002e733:	53                   	push   ebx
c002e734:	83 ec 2c             	sub    esp,0x2c
c002e737:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e73b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e73f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e743:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e747:	85 db                	test   ebx,ebx
c002e749:	0f 88 85 00 00 00    	js     c002e7d4 <__moddi3+0xa4>
c002e74f:	89 de                	mov    esi,ebx
c002e751:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e759:	89 d7                	mov    edi,edx
c002e75b:	85 d2                	test   edx,edx
c002e75d:	79 09                	jns    c002e768 <__moddi3+0x38>
c002e75f:	f7 d8                	neg    eax
c002e761:	83 d2 00             	adc    edx,0x0
c002e764:	f7 da                	neg    edx
c002e766:	89 d7                	mov    edi,edx
c002e768:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e76c:	89 cd                	mov    ebp,ecx
c002e76e:	85 ff                	test   edi,edi
c002e770:	75 52                	jne    c002e7c4 <__moddi3+0x94>
c002e772:	89 c3                	mov    ebx,eax
c002e774:	39 f0                	cmp    eax,esi
c002e776:	76 24                	jbe    c002e79c <__moddi3+0x6c>
c002e778:	89 c8                	mov    eax,ecx
c002e77a:	89 f2                	mov    edx,esi
c002e77c:	f7 f3                	div    ebx
c002e77e:	89 d6                	mov    esi,edx
c002e780:	89 f0                	mov    eax,esi
c002e782:	31 d2                	xor    edx,edx
c002e784:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e788:	85 c9                	test   ecx,ecx
c002e78a:	74 07                	je     c002e793 <__moddi3+0x63>
c002e78c:	f7 d8                	neg    eax
c002e78e:	83 d2 00             	adc    edx,0x0
c002e791:	f7 da                	neg    edx
c002e793:	83 c4 2c             	add    esp,0x2c
c002e796:	5b                   	pop    ebx
c002e797:	5e                   	pop    esi
c002e798:	5f                   	pop    edi
c002e799:	5d                   	pop    ebp
c002e79a:	c3                   	ret    
c002e79b:	90                   	nop
c002e79c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e7a0:	85 db                	test   ebx,ebx
c002e7a2:	75 0d                	jne    c002e7b1 <__moddi3+0x81>
c002e7a4:	b8 01 00 00 00       	mov    eax,0x1
c002e7a9:	31 d2                	xor    edx,edx
c002e7ab:	f7 f7                	div    edi
c002e7ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e7b1:	89 f0                	mov    eax,esi
c002e7b3:	31 d2                	xor    edx,edx
c002e7b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e7b9:	f7 f7                	div    edi
c002e7bb:	89 e8                	mov    eax,ebp
c002e7bd:	f7 f7                	div    edi
c002e7bf:	89 d6                	mov    esi,edx
c002e7c1:	eb bd                	jmp    c002e780 <__moddi3+0x50>
c002e7c3:	90                   	nop
c002e7c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e7c8:	39 f7                	cmp    edi,esi
c002e7ca:	76 20                	jbe    c002e7ec <__moddi3+0xbc>
c002e7cc:	89 c8                	mov    eax,ecx
c002e7ce:	89 f2                	mov    edx,esi
c002e7d0:	eb b2                	jmp    c002e784 <__moddi3+0x54>
c002e7d2:	66 90                	xchg   ax,ax
c002e7d4:	f7 d9                	neg    ecx
c002e7d6:	83 d3 00             	adc    ebx,0x0
c002e7d9:	f7 db                	neg    ebx
c002e7db:	89 de                	mov    esi,ebx
c002e7dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e7e5:	e9 6f ff ff ff       	jmp    c002e759 <__moddi3+0x29>
c002e7ea:	66 90                	xchg   ax,ax
c002e7ec:	0f bd c7             	bsr    eax,edi
c002e7ef:	83 f0 1f             	xor    eax,0x1f
c002e7f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e7f6:	75 24                	jne    c002e81c <__moddi3+0xec>
c002e7f8:	39 f7                	cmp    edi,esi
c002e7fa:	72 06                	jb     c002e802 <__moddi3+0xd2>
c002e7fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e800:	77 0c                	ja     c002e80e <__moddi3+0xde>
c002e802:	89 e9                	mov    ecx,ebp
c002e804:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e808:	19 fe                	sbb    esi,edi
c002e80a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e80e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e812:	89 f2                	mov    edx,esi
c002e814:	e9 6b ff ff ff       	jmp    c002e784 <__moddi3+0x54>
c002e819:	8d 76 00             	lea    esi,[esi+0x0]
c002e81c:	b8 20 00 00 00       	mov    eax,0x20
c002e821:	89 c2                	mov    edx,eax
c002e823:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e827:	29 da                	sub    edx,ebx
c002e829:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e82d:	88 d9                	mov    cl,bl
c002e82f:	d3 e7                	shl    edi,cl
c002e831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e835:	88 d1                	mov    cl,dl
c002e837:	d3 e8                	shr    eax,cl
c002e839:	09 c7                	or     edi,eax
c002e83b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e83f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e843:	89 d8                	mov    eax,ebx
c002e845:	88 d9                	mov    cl,bl
c002e847:	d3 e7                	shl    edi,cl
c002e849:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e84d:	89 f3                	mov    ebx,esi
c002e84f:	88 d1                	mov    cl,dl
c002e851:	d3 eb                	shr    ebx,cl
c002e853:	89 c7                	mov    edi,eax
c002e855:	88 c1                	mov    cl,al
c002e857:	d3 e6                	shl    esi,cl
c002e859:	89 e8                	mov    eax,ebp
c002e85b:	88 d1                	mov    cl,dl
c002e85d:	d3 e8                	shr    eax,cl
c002e85f:	09 f0                	or     eax,esi
c002e861:	89 f9                	mov    ecx,edi
c002e863:	d3 e5                	shl    ebp,cl
c002e865:	89 da                	mov    edx,ebx
c002e867:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e86b:	89 d3                	mov    ebx,edx
c002e86d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e871:	89 c6                	mov    esi,eax
c002e873:	89 d1                	mov    ecx,edx
c002e875:	39 d3                	cmp    ebx,edx
c002e877:	72 27                	jb     c002e8a0 <__moddi3+0x170>
c002e879:	74 21                	je     c002e89c <__moddi3+0x16c>
c002e87b:	29 f5                	sub    ebp,esi
c002e87d:	19 cb                	sbb    ebx,ecx
c002e87f:	89 de                	mov    esi,ebx
c002e881:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e885:	d3 e6                	shl    esi,cl
c002e887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e88b:	89 f9                	mov    ecx,edi
c002e88d:	d3 ed                	shr    ebp,cl
c002e88f:	09 ee                	or     esi,ebp
c002e891:	89 f0                	mov    eax,esi
c002e893:	d3 eb                	shr    ebx,cl
c002e895:	89 da                	mov    edx,ebx
c002e897:	e9 e8 fe ff ff       	jmp    c002e784 <__moddi3+0x54>
c002e89c:	39 c5                	cmp    ebp,eax
c002e89e:	73 db                	jae    c002e87b <__moddi3+0x14b>
c002e8a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e8a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e8a8:	89 d1                	mov    ecx,edx
c002e8aa:	89 c6                	mov    esi,eax
c002e8ac:	eb cd                	jmp    c002e87b <__moddi3+0x14b>
c002e8ae:	66 90                	xchg   ax,ax

c002e8b0 <__udivdi3>:
c002e8b0:	55                   	push   ebp
c002e8b1:	57                   	push   edi
c002e8b2:	56                   	push   esi
c002e8b3:	53                   	push   ebx
c002e8b4:	83 ec 1c             	sub    esp,0x1c
c002e8b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e8bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e8bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e8c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e8c7:	85 d2                	test   edx,edx
c002e8c9:	75 41                	jne    c002e90c <__udivdi3+0x5c>
c002e8cb:	39 f7                	cmp    edi,esi
c002e8cd:	76 15                	jbe    c002e8e4 <__udivdi3+0x34>
c002e8cf:	89 e8                	mov    eax,ebp
c002e8d1:	89 f2                	mov    edx,esi
c002e8d3:	f7 f7                	div    edi
c002e8d5:	31 db                	xor    ebx,ebx
c002e8d7:	89 da                	mov    edx,ebx
c002e8d9:	83 c4 1c             	add    esp,0x1c
c002e8dc:	5b                   	pop    ebx
c002e8dd:	5e                   	pop    esi
c002e8de:	5f                   	pop    edi
c002e8df:	5d                   	pop    ebp
c002e8e0:	c3                   	ret    
c002e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c002e8e4:	89 f9                	mov    ecx,edi
c002e8e6:	85 ff                	test   edi,edi
c002e8e8:	75 0b                	jne    c002e8f5 <__udivdi3+0x45>
c002e8ea:	b8 01 00 00 00       	mov    eax,0x1
c002e8ef:	31 d2                	xor    edx,edx
c002e8f1:	f7 f7                	div    edi
c002e8f3:	89 c1                	mov    ecx,eax
c002e8f5:	31 d2                	xor    edx,edx
c002e8f7:	89 f0                	mov    eax,esi
c002e8f9:	f7 f1                	div    ecx
c002e8fb:	89 c3                	mov    ebx,eax
c002e8fd:	89 e8                	mov    eax,ebp
c002e8ff:	f7 f1                	div    ecx
c002e901:	89 da                	mov    edx,ebx
c002e903:	83 c4 1c             	add    esp,0x1c
c002e906:	5b                   	pop    ebx
c002e907:	5e                   	pop    esi
c002e908:	5f                   	pop    edi
c002e909:	5d                   	pop    ebp
c002e90a:	c3                   	ret    
c002e90b:	90                   	nop
c002e90c:	39 f2                	cmp    edx,esi
c002e90e:	77 1c                	ja     c002e92c <__udivdi3+0x7c>
c002e910:	0f bd da             	bsr    ebx,edx
c002e913:	83 f3 1f             	xor    ebx,0x1f
c002e916:	75 24                	jne    c002e93c <__udivdi3+0x8c>
c002e918:	39 f2                	cmp    edx,esi
c002e91a:	72 08                	jb     c002e924 <__udivdi3+0x74>
c002e91c:	39 ef                	cmp    edi,ebp
c002e91e:	0f 87 84 00 00 00    	ja     c002e9a8 <__udivdi3+0xf8>
c002e924:	b8 01 00 00 00       	mov    eax,0x1
c002e929:	eb ac                	jmp    c002e8d7 <__udivdi3+0x27>
c002e92b:	90                   	nop
c002e92c:	31 db                	xor    ebx,ebx
c002e92e:	31 c0                	xor    eax,eax
c002e930:	89 da                	mov    edx,ebx
c002e932:	83 c4 1c             	add    esp,0x1c
c002e935:	5b                   	pop    ebx
c002e936:	5e                   	pop    esi
c002e937:	5f                   	pop    edi
c002e938:	5d                   	pop    ebp
c002e939:	c3                   	ret    
c002e93a:	66 90                	xchg   ax,ax
c002e93c:	b8 20 00 00 00       	mov    eax,0x20
c002e941:	29 d8                	sub    eax,ebx
c002e943:	88 d9                	mov    cl,bl
c002e945:	d3 e2                	shl    edx,cl
c002e947:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e94b:	89 fa                	mov    edx,edi
c002e94d:	88 c1                	mov    cl,al
c002e94f:	d3 ea                	shr    edx,cl
c002e951:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e955:	09 d1                	or     ecx,edx
c002e957:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e95b:	88 d9                	mov    cl,bl
c002e95d:	d3 e7                	shl    edi,cl
c002e95f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e963:	89 f7                	mov    edi,esi
c002e965:	88 c1                	mov    cl,al
c002e967:	d3 ef                	shr    edi,cl
c002e969:	88 d9                	mov    cl,bl
c002e96b:	d3 e6                	shl    esi,cl
c002e96d:	89 ea                	mov    edx,ebp
c002e96f:	88 c1                	mov    cl,al
c002e971:	d3 ea                	shr    edx,cl
c002e973:	09 d6                	or     esi,edx
c002e975:	89 f0                	mov    eax,esi
c002e977:	89 fa                	mov    edx,edi
c002e979:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e97d:	89 d7                	mov    edi,edx
c002e97f:	89 c6                	mov    esi,eax
c002e981:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e985:	39 d7                	cmp    edi,edx
c002e987:	72 13                	jb     c002e99c <__udivdi3+0xec>
c002e989:	74 09                	je     c002e994 <__udivdi3+0xe4>
c002e98b:	89 f0                	mov    eax,esi
c002e98d:	31 db                	xor    ebx,ebx
c002e98f:	e9 43 ff ff ff       	jmp    c002e8d7 <__udivdi3+0x27>
c002e994:	88 d9                	mov    cl,bl
c002e996:	d3 e5                	shl    ebp,cl
c002e998:	39 c5                	cmp    ebp,eax
c002e99a:	73 ef                	jae    c002e98b <__udivdi3+0xdb>
c002e99c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e99f:	31 db                	xor    ebx,ebx
c002e9a1:	e9 31 ff ff ff       	jmp    c002e8d7 <__udivdi3+0x27>
c002e9a6:	66 90                	xchg   ax,ax
c002e9a8:	31 c0                	xor    eax,eax
c002e9aa:	e9 28 ff ff ff       	jmp    c002e8d7 <__udivdi3+0x27>
c002e9af:	90                   	nop

c002e9b0 <__umoddi3>:
c002e9b0:	55                   	push   ebp
c002e9b1:	57                   	push   edi
c002e9b2:	56                   	push   esi
c002e9b3:	53                   	push   ebx
c002e9b4:	83 ec 1c             	sub    esp,0x1c
c002e9b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e9bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e9bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e9c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e9c7:	89 da                	mov    edx,ebx
c002e9c9:	85 c0                	test   eax,eax
c002e9cb:	75 37                	jne    c002ea04 <__umoddi3+0x54>
c002e9cd:	39 df                	cmp    edi,ebx
c002e9cf:	76 13                	jbe    c002e9e4 <__umoddi3+0x34>
c002e9d1:	89 f0                	mov    eax,esi
c002e9d3:	f7 f7                	div    edi
c002e9d5:	89 d0                	mov    eax,edx
c002e9d7:	31 d2                	xor    edx,edx
c002e9d9:	83 c4 1c             	add    esp,0x1c
c002e9dc:	5b                   	pop    ebx
c002e9dd:	5e                   	pop    esi
c002e9de:	5f                   	pop    edi
c002e9df:	5d                   	pop    ebp
c002e9e0:	c3                   	ret    
c002e9e1:	8d 76 00             	lea    esi,[esi+0x0]
c002e9e4:	89 fd                	mov    ebp,edi
c002e9e6:	85 ff                	test   edi,edi
c002e9e8:	75 0b                	jne    c002e9f5 <__umoddi3+0x45>
c002e9ea:	b8 01 00 00 00       	mov    eax,0x1
c002e9ef:	31 d2                	xor    edx,edx
c002e9f1:	f7 f7                	div    edi
c002e9f3:	89 c5                	mov    ebp,eax
c002e9f5:	89 d8                	mov    eax,ebx
c002e9f7:	31 d2                	xor    edx,edx
c002e9f9:	f7 f5                	div    ebp
c002e9fb:	89 f0                	mov    eax,esi
c002e9fd:	f7 f5                	div    ebp
c002e9ff:	89 d0                	mov    eax,edx
c002ea01:	eb d4                	jmp    c002e9d7 <__umoddi3+0x27>
c002ea03:	90                   	nop
c002ea04:	89 f1                	mov    ecx,esi
c002ea06:	39 d8                	cmp    eax,ebx
c002ea08:	76 0a                	jbe    c002ea14 <__umoddi3+0x64>
c002ea0a:	89 f0                	mov    eax,esi
c002ea0c:	83 c4 1c             	add    esp,0x1c
c002ea0f:	5b                   	pop    ebx
c002ea10:	5e                   	pop    esi
c002ea11:	5f                   	pop    edi
c002ea12:	5d                   	pop    ebp
c002ea13:	c3                   	ret    
c002ea14:	0f bd e8             	bsr    ebp,eax
c002ea17:	83 f5 1f             	xor    ebp,0x1f
c002ea1a:	75 1c                	jne    c002ea38 <__umoddi3+0x88>
c002ea1c:	39 d8                	cmp    eax,ebx
c002ea1e:	72 04                	jb     c002ea24 <__umoddi3+0x74>
c002ea20:	39 f7                	cmp    edi,esi
c002ea22:	77 08                	ja     c002ea2c <__umoddi3+0x7c>
c002ea24:	89 da                	mov    edx,ebx
c002ea26:	29 fe                	sub    esi,edi
c002ea28:	19 c2                	sbb    edx,eax
c002ea2a:	89 f1                	mov    ecx,esi
c002ea2c:	89 c8                	mov    eax,ecx
c002ea2e:	83 c4 1c             	add    esp,0x1c
c002ea31:	5b                   	pop    ebx
c002ea32:	5e                   	pop    esi
c002ea33:	5f                   	pop    edi
c002ea34:	5d                   	pop    ebp
c002ea35:	c3                   	ret    
c002ea36:	66 90                	xchg   ax,ax
c002ea38:	ba 20 00 00 00       	mov    edx,0x20
c002ea3d:	29 ea                	sub    edx,ebp
c002ea3f:	89 e9                	mov    ecx,ebp
c002ea41:	d3 e0                	shl    eax,cl
c002ea43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ea47:	89 f8                	mov    eax,edi
c002ea49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002ea4d:	88 d1                	mov    cl,dl
c002ea4f:	d3 e8                	shr    eax,cl
c002ea51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ea55:	09 c1                	or     ecx,eax
c002ea57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ea5b:	89 e9                	mov    ecx,ebp
c002ea5d:	d3 e7                	shl    edi,cl
c002ea5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ea63:	89 d8                	mov    eax,ebx
c002ea65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ea69:	88 d1                	mov    cl,dl
c002ea6b:	d3 e8                	shr    eax,cl
c002ea6d:	89 c7                	mov    edi,eax
c002ea6f:	89 e9                	mov    ecx,ebp
c002ea71:	d3 e3                	shl    ebx,cl
c002ea73:	89 f0                	mov    eax,esi
c002ea75:	88 d1                	mov    cl,dl
c002ea77:	d3 e8                	shr    eax,cl
c002ea79:	09 d8                	or     eax,ebx
c002ea7b:	89 e9                	mov    ecx,ebp
c002ea7d:	d3 e6                	shl    esi,cl
c002ea7f:	89 f3                	mov    ebx,esi
c002ea81:	89 fa                	mov    edx,edi
c002ea83:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002ea87:	89 d1                	mov    ecx,edx
c002ea89:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002ea8d:	89 c6                	mov    esi,eax
c002ea8f:	89 d7                	mov    edi,edx
c002ea91:	39 d1                	cmp    ecx,edx
c002ea93:	72 27                	jb     c002eabc <__umoddi3+0x10c>
c002ea95:	74 21                	je     c002eab8 <__umoddi3+0x108>
c002ea97:	89 ca                	mov    edx,ecx
c002ea99:	29 f3                	sub    ebx,esi
c002ea9b:	19 fa                	sbb    edx,edi
c002ea9d:	89 d0                	mov    eax,edx
c002ea9f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002eaa3:	d3 e0                	shl    eax,cl
c002eaa5:	89 e9                	mov    ecx,ebp
c002eaa7:	d3 eb                	shr    ebx,cl
c002eaa9:	09 d8                	or     eax,ebx
c002eaab:	d3 ea                	shr    edx,cl
c002eaad:	83 c4 1c             	add    esp,0x1c
c002eab0:	5b                   	pop    ebx
c002eab1:	5e                   	pop    esi
c002eab2:	5f                   	pop    edi
c002eab3:	5d                   	pop    ebp
c002eab4:	c3                   	ret    
c002eab5:	8d 76 00             	lea    esi,[esi+0x0]
c002eab8:	39 c3                	cmp    ebx,eax
c002eaba:	73 db                	jae    c002ea97 <__umoddi3+0xe7>
c002eabc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002eac0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002eac4:	89 d7                	mov    edi,edx
c002eac6:	89 c6                	mov    esi,eax
c002eac8:	eb cd                	jmp    c002ea97 <__umoddi3+0xe7>

Disassembly of section .init:

c002eaca <_init>:
c002eaca:	55                   	push   ebp
c002eacb:	89 e5                	mov    ebp,esp
c002eacd:	e8 22 16 fd ff       	call   c00000f4 <frame_dummy>
c002ead2:	e8 e5 fa ff ff       	call   c002e5bc <__do_global_ctors_aux>
c002ead7:	5d                   	pop    ebp
c002ead8:	c3                   	ret    

Disassembly of section .fini:

c002ead9 <_fini>:
c002ead9:	55                   	push   ebp
c002eada:	89 e5                	mov    ebp,esp
c002eadc:	e8 a3 15 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002eae1:	5d                   	pop    ebp
c002eae2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002eae4 <Computer::~Computer()>:
c002eae4:	83 ec 0c             	sub    esp,0xc
c002eae7:	ba 44 13 03 c0       	mov    edx,0xc0031344
c002eaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaf0:	89 10                	mov    DWORD PTR [eax],edx
c002eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaf6:	83 ec 0c             	sub    esp,0xc
c002eaf9:	50                   	push   eax
c002eafa:	e8 09 c9 fe ff       	call   c001b408 <Device::~Device()>
c002eaff:	83 c4 10             	add    esp,0x10
c002eb02:	90                   	nop
c002eb03:	83 c4 0c             	add    esp,0xc
c002eb06:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002eb08 <Computer::~Computer()>:
c002eb08:	83 ec 0c             	sub    esp,0xc
c002eb0b:	83 ec 0c             	sub    esp,0xc
c002eb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb12:	e8 cd ff ff ff       	call   c002eae4 <Computer::~Computer()>
c002eb17:	83 c4 10             	add    esp,0x10
c002eb1a:	83 ec 08             	sub    esp,0x8
c002eb1d:	68 70 01 00 00       	push   0x170
c002eb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb26:	e8 2d a8 fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002eb2b:	83 c4 10             	add    esp,0x10
c002eb2e:	83 c4 0c             	add    esp,0xc
c002eb31:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002eb32 <idleCommon()>:
c002eb32:	83 ec 0c             	sub    esp,0xc
c002eb35:	fa                   	cli    
c002eb36:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002eb3c:	e8 73 69 ff ff       	call   c00254b4 <schedule()>
c002eb41:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002eb46:	48                   	dec    eax
c002eb47:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002eb4c:	75 01                	jne    c002eb4f <idleCommon()+0x1d>
c002eb4e:	fb                   	sti    
c002eb4f:	83 c4 0c             	add    esp,0xc
c002eb52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002eb54 <LinkedList<UnixFile>::~LinkedList()>:
c002eb54:	90                   	nop
c002eb55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002eb56 <LinkedList<UnixFile>::LinkedList()>:
c002eb56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb96:	90                   	nop
c002eb97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002eb98 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002eb98:	83 ec 0c             	sub    esp,0xc
c002eb9b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002eba0:	75 10                	jne    c002ebb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002eba2:	83 ec 0c             	sub    esp,0xc
c002eba5:	68 b4 15 03 c0       	push   0xc00315b4
c002ebaa:	e8 ef 18 ff ff       	call   c002049e <KePanic(char const*)>
c002ebaf:	83 c4 10             	add    esp,0x10
c002ebb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebb6:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebb8:	85 c0                	test   eax,eax
c002ebba:	74 34                	je     c002ebf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ebbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebc3:	85 c0                	test   eax,eax
c002ebc5:	74 29                	je     c002ebf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ebc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ebd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ebd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ebdd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ebe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebe7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebee:	eb 65                	jmp    c002ec55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ebf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebf4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebf6:	85 c0                	test   eax,eax
c002ebf8:	75 4b                	jne    c002ec45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ebfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec01:	85 c0                	test   eax,eax
c002ec03:	75 40                	jne    c002ec45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ec05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec0d:	89 10                	mov    DWORD PTR [eax],edx
c002ec0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec2f:	85 c0                	test   eax,eax
c002ec31:	74 22                	je     c002ec55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ec33:	83 ec 0c             	sub    esp,0xc
c002ec36:	68 d6 15 03 c0       	push   0xc00315d6
c002ec3b:	e8 5e 18 ff ff       	call   c002049e <KePanic(char const*)>
c002ec40:	83 c4 10             	add    esp,0x10
c002ec43:	eb 10                	jmp    c002ec55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ec45:	83 ec 0c             	sub    esp,0xc
c002ec48:	68 e0 15 03 c0       	push   0xc00315e0
c002ec4d:	e8 4c 18 ff ff       	call   c002049e <KePanic(char const*)>
c002ec52:	83 c4 10             	add    esp,0x10
c002ec55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec5c:	8d 50 01             	lea    edx,[eax+0x1]
c002ec5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ec66:	90                   	nop
c002ec67:	83 c4 0c             	add    esp,0xc
c002ec6a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002ec6c <LinkedList<UnixFile>::getFirstElement()>:
c002ec6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec70:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002ec74 <LinkedList<UnixFile>::removeFirst()>:
c002ec74:	83 ec 0c             	sub    esp,0xc
c002ec77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec7b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec7d:	85 c0                	test   eax,eax
c002ec7f:	75 12                	jne    c002ec93 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ec81:	83 ec 0c             	sub    esp,0xc
c002ec84:	68 ec 15 03 c0       	push   0xc00315ec
c002ec89:	e8 10 18 ff ff       	call   c002049e <KePanic(char const*)>
c002ec8e:	83 c4 10             	add    esp,0x10
c002ec91:	eb 7e                	jmp    c002ed11 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002ec93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec9d:	85 c0                	test   eax,eax
c002ec9f:	74 10                	je     c002ecb1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002eca1:	83 ec 0c             	sub    esp,0xc
c002eca4:	68 37 16 03 c0       	push   0xc0031637
c002eca9:	e8 f0 17 ff ff       	call   c002049e <KePanic(char const*)>
c002ecae:	83 c4 10             	add    esp,0x10
c002ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb5:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecba:	85 c0                	test   eax,eax
c002ecbc:	75 33                	jne    c002ecf1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ecbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ecc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ecd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecda:	83 f8 01             	cmp    eax,0x1
c002ecdd:	74 21                	je     c002ed00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ecdf:	83 ec 0c             	sub    esp,0xc
c002ece2:	68 10 16 03 c0       	push   0xc0031610
c002ece7:	e8 b2 17 ff ff       	call   c002049e <KePanic(char const*)>
c002ecec:	83 c4 10             	add    esp,0x10
c002ecef:	eb 0f                	jmp    c002ed00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ecf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecf5:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecf7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecfe:	89 10                	mov    DWORD PTR [eax],edx
c002ed00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed07:	8d 50 ff             	lea    edx,[eax-0x1]
c002ed0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ed11:	83 c4 0c             	add    esp,0xc
c002ed14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002ed16 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002ed16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ed1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed1d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002ed1e <DriverlessDevice::~DriverlessDevice()>:
c002ed1e:	ba 68 22 03 c0       	mov    edx,0xc0032268
c002ed23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed27:	89 10                	mov    DWORD PTR [eax],edx
c002ed29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed2d:	50                   	push   eax
c002ed2e:	e8 d5 c6 fe ff       	call   c001b408 <Device::~Device()>
c002ed33:	83 c4 04             	add    esp,0x4
c002ed36:	90                   	nop
c002ed37:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ed38 <DriverlessDevice::~DriverlessDevice()>:
c002ed38:	83 ec 0c             	sub    esp,0xc
c002ed3b:	83 ec 0c             	sub    esp,0xc
c002ed3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed42:	e8 d7 ff ff ff       	call   c002ed1e <DriverlessDevice::~DriverlessDevice()>
c002ed47:	83 c4 10             	add    esp,0x10
c002ed4a:	83 ec 08             	sub    esp,0x8
c002ed4d:	68 58 01 00 00       	push   0x158
c002ed52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed56:	e8 fd a5 fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002ed5b:	83 c4 10             	add    esp,0x10
c002ed5e:	83 c4 0c             	add    esp,0xc
c002ed61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002ed62 <LinkedList<Device>::addElement(Device*)>:
c002ed62:	83 ec 0c             	sub    esp,0xc
c002ed65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ed6a:	75 10                	jne    c002ed7c <LinkedList<Device>::addElement(Device*)+0x1a>
c002ed6c:	83 ec 0c             	sub    esp,0xc
c002ed6f:	68 b4 15 03 c0       	push   0xc00315b4
c002ed74:	e8 25 17 ff ff       	call   c002049e <KePanic(char const*)>
c002ed79:	83 c4 10             	add    esp,0x10
c002ed7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed80:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed82:	85 c0                	test   eax,eax
c002ed84:	74 3a                	je     c002edc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ed86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed8d:	85 c0                	test   eax,eax
c002ed8f:	74 2f                	je     c002edc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ed91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed9c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002eda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eda6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002edaa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002edad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002edb4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002edbe:	eb 68                	jmp    c002ee28 <LinkedList<Device>::addElement(Device*)+0xc6>
c002edc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edc4:	8b 00                	mov    eax,DWORD PTR [eax]
c002edc6:	85 c0                	test   eax,eax
c002edc8:	75 4e                	jne    c002ee18 <LinkedList<Device>::addElement(Device*)+0xb6>
c002edca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002edd1:	85 c0                	test   eax,eax
c002edd3:	75 43                	jne    c002ee18 <LinkedList<Device>::addElement(Device*)+0xb6>
c002edd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eddd:	89 10                	mov    DWORD PTR [eax],edx
c002eddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ede3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ede7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002edea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002edf1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002edfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee02:	85 c0                	test   eax,eax
c002ee04:	74 22                	je     c002ee28 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ee06:	83 ec 0c             	sub    esp,0xc
c002ee09:	68 d6 15 03 c0       	push   0xc00315d6
c002ee0e:	e8 8b 16 ff ff       	call   c002049e <KePanic(char const*)>
c002ee13:	83 c4 10             	add    esp,0x10
c002ee16:	eb 10                	jmp    c002ee28 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ee18:	83 ec 0c             	sub    esp,0xc
c002ee1b:	68 e0 15 03 c0       	push   0xc00315e0
c002ee20:	e8 79 16 ff ff       	call   c002049e <KePanic(char const*)>
c002ee25:	83 c4 10             	add    esp,0x10
c002ee28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee2f:	8d 50 01             	lea    edx,[eax+0x1]
c002ee32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ee39:	90                   	nop
c002ee3a:	83 c4 0c             	add    esp,0xc
c002ee3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002ee3e <LinkedList<Device>::LinkedList()>:
c002ee3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ee53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ee5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ee73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ee7e:	90                   	nop
c002ee7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ee80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ee80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee84:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee86:	85 c0                	test   eax,eax
c002ee88:	75 0e                	jne    c002ee98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ee8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee91:	85 c0                	test   eax,eax
c002ee93:	75 03                	jne    c002ee98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ee95:	b0 01                	mov    al,0x1
c002ee97:	c3                   	ret    
c002ee98:	b0 00                	mov    al,0x0
c002ee9a:	90                   	nop
c002ee9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ee9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ee9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eea0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eea2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002eea4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002eea4:	83 ec 0c             	sub    esp,0xc
c002eea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeab:	8b 00                	mov    eax,DWORD PTR [eax]
c002eead:	85 c0                	test   eax,eax
c002eeaf:	75 17                	jne    c002eec8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002eeb1:	83 ec 0c             	sub    esp,0xc
c002eeb4:	68 ec 15 03 c0       	push   0xc00315ec
c002eeb9:	e8 e0 15 ff ff       	call   c002049e <KePanic(char const*)>
c002eebe:	83 c4 10             	add    esp,0x10
c002eec1:	e9 96 00 00 00       	jmp    c002ef5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002eec6:	66 90                	xchg   ax,ax
c002eec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eecf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002eed2:	85 c0                	test   eax,eax
c002eed4:	0f 95 c0             	setne  al
c002eed7:	0f b6 c0             	movzx  eax,al
c002eeda:	85 c0                	test   eax,eax
c002eedc:	74 12                	je     c002eef0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002eede:	83 ec 0c             	sub    esp,0xc
c002eee1:	68 37 16 03 c0       	push   0xc0031637
c002eee6:	e8 b3 15 ff ff       	call   c002049e <KePanic(char const*)>
c002eeeb:	83 c4 10             	add    esp,0x10
c002eeee:	66 90                	xchg   ax,ax
c002eef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eef4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eef6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002eef9:	85 c0                	test   eax,eax
c002eefb:	0f 94 c0             	sete   al
c002eefe:	0f b6 c0             	movzx  eax,al
c002ef01:	85 c0                	test   eax,eax
c002ef03:	74 33                	je     c002ef38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ef05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef21:	83 f8 01             	cmp    eax,0x1
c002ef24:	74 22                	je     c002ef48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ef26:	83 ec 0c             	sub    esp,0xc
c002ef29:	68 10 16 03 c0       	push   0xc0031610
c002ef2e:	e8 6b 15 ff ff       	call   c002049e <KePanic(char const*)>
c002ef33:	83 c4 10             	add    esp,0x10
c002ef36:	eb 10                	jmp    c002ef48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ef38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef3c:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef3e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ef41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef45:	89 10                	mov    DWORD PTR [eax],edx
c002ef47:	90                   	nop
c002ef48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef4f:	8d 50 ff             	lea    edx,[eax-0x1]
c002ef52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ef59:	8d 76 00             	lea    esi,[esi+0x0]
c002ef5c:	83 c4 0c             	add    esp,0xc
c002ef5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ef60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ef60:	83 ec 0c             	sub    esp,0xc
c002ef63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ef68:	75 12                	jne    c002ef7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ef6a:	83 ec 0c             	sub    esp,0xc
c002ef6d:	68 b4 15 03 c0       	push   0xc00315b4
c002ef72:	e8 27 15 ff ff       	call   c002049e <KePanic(char const*)>
c002ef77:	83 c4 10             	add    esp,0x10
c002ef7a:	66 90                	xchg   ax,ax
c002ef7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef80:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef82:	85 c0                	test   eax,eax
c002ef84:	74 36                	je     c002efbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ef86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef8d:	85 c0                	test   eax,eax
c002ef8f:	74 2b                	je     c002efbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ef91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ef9c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ef9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002efa7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002efaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efb1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002efb8:	eb 6a                	jmp    c002f024 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002efba:	66 90                	xchg   ax,ax
c002efbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efc0:	8b 00                	mov    eax,DWORD PTR [eax]
c002efc2:	85 c0                	test   eax,eax
c002efc4:	75 4e                	jne    c002f014 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002efc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efcd:	85 c0                	test   eax,eax
c002efcf:	75 43                	jne    c002f014 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002efd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efd5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002efd9:	89 10                	mov    DWORD PTR [eax],edx
c002efdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002efe3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002efe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002eff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002effb:	85 c0                	test   eax,eax
c002effd:	74 25                	je     c002f024 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002efff:	83 ec 0c             	sub    esp,0xc
c002f002:	68 d6 15 03 c0       	push   0xc00315d6
c002f007:	e8 92 14 ff ff       	call   c002049e <KePanic(char const*)>
c002f00c:	83 c4 10             	add    esp,0x10
c002f00f:	eb 13                	jmp    c002f024 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f011:	8d 76 00             	lea    esi,[esi+0x0]
c002f014:	83 ec 0c             	sub    esp,0xc
c002f017:	68 e0 15 03 c0       	push   0xc00315e0
c002f01c:	e8 7d 14 ff ff       	call   c002049e <KePanic(char const*)>
c002f021:	83 c4 10             	add    esp,0x10
c002f024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f028:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f02b:	8d 50 01             	lea    edx,[eax+0x1]
c002f02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f032:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f035:	90                   	nop
c002f036:	83 c4 0c             	add    esp,0xc
c002f039:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002f03c <ACPI::~ACPI()>:
c002f03c:	83 ec 0c             	sub    esp,0xc
c002f03f:	ba 20 29 03 c0       	mov    edx,0xc0032920
c002f044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f048:	89 10                	mov    DWORD PTR [eax],edx
c002f04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f04e:	83 ec 0c             	sub    esp,0xc
c002f051:	50                   	push   eax
c002f052:	e8 b1 c3 fe ff       	call   c001b408 <Device::~Device()>
c002f057:	83 c4 10             	add    esp,0x10
c002f05a:	90                   	nop
c002f05b:	83 c4 0c             	add    esp,0xc
c002f05e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002f060 <ACPI::~ACPI()>:
c002f060:	83 ec 0c             	sub    esp,0xc
c002f063:	83 ec 0c             	sub    esp,0xc
c002f066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f06a:	e8 cd ff ff ff       	call   c002f03c <ACPI::~ACPI()>
c002f06f:	83 c4 10             	add    esp,0x10
c002f072:	83 ec 08             	sub    esp,0x8
c002f075:	68 64 12 00 00       	push   0x1264
c002f07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f07e:	e8 d5 a2 fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f083:	83 c4 10             	add    esp,0x10
c002f086:	83 c4 0c             	add    esp,0xc
c002f089:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002f08c <LinkedList<Device>::~LinkedList()>:
c002f08c:	90                   	nop
c002f08d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002f090 <LinkedList<Device>::isEmpty()>:
c002f090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f094:	8b 00                	mov    eax,DWORD PTR [eax]
c002f096:	85 c0                	test   eax,eax
c002f098:	75 0e                	jne    c002f0a8 <LinkedList<Device>::isEmpty()+0x18>
c002f09a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f09e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0a1:	85 c0                	test   eax,eax
c002f0a3:	75 03                	jne    c002f0a8 <LinkedList<Device>::isEmpty()+0x18>
c002f0a5:	b0 01                	mov    al,0x1
c002f0a7:	c3                   	ret    
c002f0a8:	b0 00                	mov    al,0x0
c002f0aa:	90                   	nop
c002f0ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002f0ac <LinkedList<Device>::getFirstElement()>:
c002f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002f0b4 <LinkedList<Device>::removeFirst()>:
c002f0b4:	83 ec 0c             	sub    esp,0xc
c002f0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0bb:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0bd:	85 c0                	test   eax,eax
c002f0bf:	75 17                	jne    c002f0d8 <LinkedList<Device>::removeFirst()+0x24>
c002f0c1:	83 ec 0c             	sub    esp,0xc
c002f0c4:	68 ec 15 03 c0       	push   0xc00315ec
c002f0c9:	e8 d0 13 ff ff       	call   c002049e <KePanic(char const*)>
c002f0ce:	83 c4 10             	add    esp,0x10
c002f0d1:	e9 92 00 00 00       	jmp    c002f168 <LinkedList<Device>::removeFirst()+0xb4>
c002f0d6:	66 90                	xchg   ax,ax
c002f0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0df:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f0e5:	85 c0                	test   eax,eax
c002f0e7:	74 13                	je     c002f0fc <LinkedList<Device>::removeFirst()+0x48>
c002f0e9:	83 ec 0c             	sub    esp,0xc
c002f0ec:	68 37 16 03 c0       	push   0xc0031637
c002f0f1:	e8 a8 13 ff ff       	call   c002049e <KePanic(char const*)>
c002f0f6:	83 c4 10             	add    esp,0x10
c002f0f9:	8d 76 00             	lea    esi,[esi+0x0]
c002f0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f100:	8b 00                	mov    eax,DWORD PTR [eax]
c002f102:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f108:	85 c0                	test   eax,eax
c002f10a:	75 34                	jne    c002f140 <LinkedList<Device>::removeFirst()+0x8c>
c002f10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f110:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f11a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f125:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f128:	83 f8 01             	cmp    eax,0x1
c002f12b:	74 27                	je     c002f154 <LinkedList<Device>::removeFirst()+0xa0>
c002f12d:	83 ec 0c             	sub    esp,0xc
c002f130:	68 10 16 03 c0       	push   0xc0031610
c002f135:	e8 64 13 ff ff       	call   c002049e <KePanic(char const*)>
c002f13a:	83 c4 10             	add    esp,0x10
c002f13d:	eb 15                	jmp    c002f154 <LinkedList<Device>::removeFirst()+0xa0>
c002f13f:	90                   	nop
c002f140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f144:	8b 00                	mov    eax,DWORD PTR [eax]
c002f146:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002f14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f150:	89 10                	mov    DWORD PTR [eax],edx
c002f152:	66 90                	xchg   ax,ax
c002f154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f158:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f15b:	8d 50 ff             	lea    edx,[eax-0x1]
c002f15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f162:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f165:	8d 76 00             	lea    esi,[esi+0x0]
c002f168:	83 c4 0c             	add    esp,0xc
c002f16b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002f16c <CPU::~CPU()>:
c002f16c:	83 ec 0c             	sub    esp,0xc
c002f16f:	ba c8 2a 03 c0       	mov    edx,0xc0032ac8
c002f174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f178:	89 10                	mov    DWORD PTR [eax],edx
c002f17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f17e:	83 ec 0c             	sub    esp,0xc
c002f181:	50                   	push   eax
c002f182:	e8 81 c2 fe ff       	call   c001b408 <Device::~Device()>
c002f187:	83 c4 10             	add    esp,0x10
c002f18a:	90                   	nop
c002f18b:	83 c4 0c             	add    esp,0xc
c002f18e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f190 <CPU::~CPU()>:
c002f190:	83 ec 0c             	sub    esp,0xc
c002f193:	83 ec 0c             	sub    esp,0xc
c002f196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f19a:	e8 cd ff ff ff       	call   c002f16c <CPU::~CPU()>
c002f19f:	83 c4 10             	add    esp,0x10
c002f1a2:	83 ec 08             	sub    esp,0x8
c002f1a5:	68 94 11 00 00       	push   0x1194
c002f1aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1ae:	e8 a5 a1 fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f1b3:	83 c4 10             	add    esp,0x10
c002f1b6:	83 c4 0c             	add    esp,0xc
c002f1b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f1bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f1bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f1c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f1c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f1c4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f1c4:	90                   	nop
c002f1c5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f1c8 <ThreadControlBlock::ThreadControlBlock()>:
c002f1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1cc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f1d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1d7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f1de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1e2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f1e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1ed:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f1f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1f8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f1ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f203:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f20b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f20f:	90                   	nop
c002f210:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f214 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f218:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f21e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f222:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f22d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f238:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f23e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f242:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f249:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f24d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f254:	90                   	nop
c002f255:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f256 <PCI::~PCI()>:
c002f256:	83 ec 0c             	sub    esp,0xc
c002f259:	ba e8 39 03 c0       	mov    edx,0xc00339e8
c002f25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f262:	89 10                	mov    DWORD PTR [eax],edx
c002f264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f268:	83 ec 0c             	sub    esp,0xc
c002f26b:	50                   	push   eax
c002f26c:	e8 2f bc fe ff       	call   c001aea0 <Bus::~Bus()>
c002f271:	83 c4 10             	add    esp,0x10
c002f274:	90                   	nop
c002f275:	83 c4 0c             	add    esp,0xc
c002f278:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f27a <PCI::~PCI()>:
c002f27a:	83 ec 0c             	sub    esp,0xc
c002f27d:	83 ec 0c             	sub    esp,0xc
c002f280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f284:	e8 cd ff ff ff       	call   c002f256 <PCI::~PCI()>
c002f289:	83 c4 10             	add    esp,0x10
c002f28c:	83 ec 08             	sub    esp,0x8
c002f28f:	68 5c 01 00 00       	push   0x15c
c002f294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f298:	e8 bb a0 fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f29d:	83 c4 10             	add    esp,0x10
c002f2a0:	83 c4 0c             	add    esp,0xc
c002f2a3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f2a4 <IDE::~IDE()>:
c002f2a4:	83 ec 0c             	sub    esp,0xc
c002f2a7:	ba 9c 3a 03 c0       	mov    edx,0xc0033a9c
c002f2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2b0:	89 10                	mov    DWORD PTR [eax],edx
c002f2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2b6:	83 ec 0c             	sub    esp,0xc
c002f2b9:	50                   	push   eax
c002f2ba:	e8 d9 c5 fe ff       	call   c001b898 <HardDiskController::~HardDiskController()>
c002f2bf:	83 c4 10             	add    esp,0x10
c002f2c2:	90                   	nop
c002f2c3:	83 c4 0c             	add    esp,0xc
c002f2c6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f2c8 <IDE::~IDE()>:
c002f2c8:	83 ec 0c             	sub    esp,0xc
c002f2cb:	83 ec 0c             	sub    esp,0xc
c002f2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2d2:	e8 cd ff ff ff       	call   c002f2a4 <IDE::~IDE()>
c002f2d7:	83 c4 10             	add    esp,0x10
c002f2da:	83 ec 08             	sub    esp,0x8
c002f2dd:	68 70 02 00 00       	push   0x270
c002f2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2e6:	e8 6d a0 fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f2eb:	83 c4 10             	add    esp,0x10
c002f2ee:	83 c4 0c             	add    esp,0xc
c002f2f1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f2f2 <SATABus::~SATABus()>:
c002f2f2:	83 ec 0c             	sub    esp,0xc
c002f2f5:	ba ec 3a 03 c0       	mov    edx,0xc0033aec
c002f2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2fe:	89 10                	mov    DWORD PTR [eax],edx
c002f300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f304:	83 ec 0c             	sub    esp,0xc
c002f307:	50                   	push   eax
c002f308:	e8 8b c5 fe ff       	call   c001b898 <HardDiskController::~HardDiskController()>
c002f30d:	83 c4 10             	add    esp,0x10
c002f310:	90                   	nop
c002f311:	83 c4 0c             	add    esp,0xc
c002f314:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f316 <SATABus::~SATABus()>:
c002f316:	83 ec 0c             	sub    esp,0xc
c002f319:	83 ec 0c             	sub    esp,0xc
c002f31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f320:	e8 cd ff ff ff       	call   c002f2f2 <SATABus::~SATABus()>
c002f325:	83 c4 10             	add    esp,0x10
c002f328:	83 ec 08             	sub    esp,0x8
c002f32b:	68 64 01 00 00       	push   0x164
c002f330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f334:	e8 1f a0 fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f339:	83 c4 10             	add    esp,0x10
c002f33c:	83 c4 0c             	add    esp,0xc
c002f33f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f340 <ATA::~ATA()>:
c002f340:	83 ec 0c             	sub    esp,0xc
c002f343:	ba 2c 3b 03 c0       	mov    edx,0xc0033b2c
c002f348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f34c:	89 10                	mov    DWORD PTR [eax],edx
c002f34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f352:	83 ec 0c             	sub    esp,0xc
c002f355:	50                   	push   eax
c002f356:	e8 1f c6 fe ff       	call   c001b97a <PhysicalDisk::~PhysicalDisk()>
c002f35b:	83 c4 10             	add    esp,0x10
c002f35e:	90                   	nop
c002f35f:	83 c4 0c             	add    esp,0xc
c002f362:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f364 <ATA::~ATA()>:
c002f364:	83 ec 0c             	sub    esp,0xc
c002f367:	83 ec 0c             	sub    esp,0xc
c002f36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f36e:	e8 cd ff ff ff       	call   c002f340 <ATA::~ATA()>
c002f373:	83 c4 10             	add    esp,0x10
c002f376:	83 ec 08             	sub    esp,0x8
c002f379:	68 7c 01 00 00       	push   0x17c
c002f37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f382:	e8 d1 9f fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f387:	83 c4 10             	add    esp,0x10
c002f38a:	83 c4 0c             	add    esp,0xc
c002f38d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f38e <ATAPI::~ATAPI()>:
c002f38e:	83 ec 0c             	sub    esp,0xc
c002f391:	ba 74 3b 03 c0       	mov    edx,0xc0033b74
c002f396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f39a:	89 10                	mov    DWORD PTR [eax],edx
c002f39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3a0:	83 ec 0c             	sub    esp,0xc
c002f3a3:	50                   	push   eax
c002f3a4:	e8 d1 c5 fe ff       	call   c001b97a <PhysicalDisk::~PhysicalDisk()>
c002f3a9:	83 c4 10             	add    esp,0x10
c002f3ac:	90                   	nop
c002f3ad:	83 c4 0c             	add    esp,0xc
c002f3b0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f3b2 <ATAPI::~ATAPI()>:
c002f3b2:	83 ec 0c             	sub    esp,0xc
c002f3b5:	83 ec 0c             	sub    esp,0xc
c002f3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3bc:	e8 cd ff ff ff       	call   c002f38e <ATAPI::~ATAPI()>
c002f3c1:	83 c4 10             	add    esp,0x10
c002f3c4:	83 ec 08             	sub    esp,0x8
c002f3c7:	68 84 01 00 00       	push   0x184
c002f3cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3d0:	e8 83 9f fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f3d5:	83 c4 10             	add    esp,0x10
c002f3d8:	83 c4 0c             	add    esp,0xc
c002f3db:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f3dc <SATA::~SATA()>:
c002f3dc:	83 ec 0c             	sub    esp,0xc
c002f3df:	ba 34 3c 03 c0       	mov    edx,0xc0033c34
c002f3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3e8:	89 10                	mov    DWORD PTR [eax],edx
c002f3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ee:	83 ec 0c             	sub    esp,0xc
c002f3f1:	50                   	push   eax
c002f3f2:	e8 83 c5 fe ff       	call   c001b97a <PhysicalDisk::~PhysicalDisk()>
c002f3f7:	83 c4 10             	add    esp,0x10
c002f3fa:	90                   	nop
c002f3fb:	83 c4 0c             	add    esp,0xc
c002f3fe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f400 <SATA::~SATA()>:
c002f400:	83 ec 0c             	sub    esp,0xc
c002f403:	83 ec 0c             	sub    esp,0xc
c002f406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f40a:	e8 cd ff ff ff       	call   c002f3dc <SATA::~SATA()>
c002f40f:	83 c4 10             	add    esp,0x10
c002f412:	83 ec 08             	sub    esp,0x8
c002f415:	68 7c 01 00 00       	push   0x17c
c002f41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f41e:	e8 35 9f fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f423:	83 c4 10             	add    esp,0x10
c002f426:	83 c4 0c             	add    esp,0xc
c002f429:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f42a <SATAPI::~SATAPI()>:
c002f42a:	83 ec 0c             	sub    esp,0xc
c002f42d:	ba 58 3d 03 c0       	mov    edx,0xc0033d58
c002f432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f436:	89 10                	mov    DWORD PTR [eax],edx
c002f438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f43c:	83 ec 0c             	sub    esp,0xc
c002f43f:	50                   	push   eax
c002f440:	e8 35 c5 fe ff       	call   c001b97a <PhysicalDisk::~PhysicalDisk()>
c002f445:	83 c4 10             	add    esp,0x10
c002f448:	90                   	nop
c002f449:	83 c4 0c             	add    esp,0xc
c002f44c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f44e <SATAPI::~SATAPI()>:
c002f44e:	83 ec 0c             	sub    esp,0xc
c002f451:	83 ec 0c             	sub    esp,0xc
c002f454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f458:	e8 cd ff ff ff       	call   c002f42a <SATAPI::~SATAPI()>
c002f45d:	83 c4 10             	add    esp,0x10
c002f460:	83 ec 08             	sub    esp,0x8
c002f463:	68 84 01 00 00       	push   0x184
c002f468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f46c:	e8 e7 9e fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f471:	83 c4 10             	add    esp,0x10
c002f474:	83 c4 0c             	add    esp,0xc
c002f477:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f478 <IOAPIC::~IOAPIC()>:
c002f478:	83 ec 0c             	sub    esp,0xc
c002f47b:	ba 98 3d 03 c0       	mov    edx,0xc0033d98
c002f480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f484:	89 10                	mov    DWORD PTR [eax],edx
c002f486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f48a:	83 ec 0c             	sub    esp,0xc
c002f48d:	50                   	push   eax
c002f48e:	e8 75 bf fe ff       	call   c001b408 <Device::~Device()>
c002f493:	83 c4 10             	add    esp,0x10
c002f496:	90                   	nop
c002f497:	83 c4 0c             	add    esp,0xc
c002f49a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f49c <IOAPIC::~IOAPIC()>:
c002f49c:	83 ec 0c             	sub    esp,0xc
c002f49f:	83 ec 0c             	sub    esp,0xc
c002f4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4a6:	e8 cd ff ff ff       	call   c002f478 <IOAPIC::~IOAPIC()>
c002f4ab:	83 c4 10             	add    esp,0x10
c002f4ae:	83 ec 08             	sub    esp,0x8
c002f4b1:	68 68 01 00 00       	push   0x168
c002f4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4ba:	e8 99 9e fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f4bf:	83 c4 10             	add    esp,0x10
c002f4c2:	83 c4 0c             	add    esp,0xc
c002f4c5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f4c8 <APICTimer::~APICTimer()>:
c002f4c8:	83 ec 0c             	sub    esp,0xc
c002f4cb:	ba e0 3d 03 c0       	mov    edx,0xc0033de0
c002f4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4d4:	89 10                	mov    DWORD PTR [eax],edx
c002f4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4da:	83 ec 0c             	sub    esp,0xc
c002f4dd:	50                   	push   eax
c002f4de:	e8 01 da fe ff       	call   c001cee4 <Timer::~Timer()>
c002f4e3:	83 c4 10             	add    esp,0x10
c002f4e6:	90                   	nop
c002f4e7:	83 c4 0c             	add    esp,0xc
c002f4ea:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f4ec <APICTimer::~APICTimer()>:
c002f4ec:	83 ec 0c             	sub    esp,0xc
c002f4ef:	83 ec 0c             	sub    esp,0xc
c002f4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4f6:	e8 cd ff ff ff       	call   c002f4c8 <APICTimer::~APICTimer()>
c002f4fb:	83 c4 10             	add    esp,0x10
c002f4fe:	83 ec 08             	sub    esp,0x8
c002f501:	68 60 01 00 00       	push   0x160
c002f506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f50a:	e8 49 9e fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f50f:	83 c4 10             	add    esp,0x10
c002f512:	83 c4 0c             	add    esp,0xc
c002f515:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f518 <PIT::~PIT()>:
c002f518:	83 ec 0c             	sub    esp,0xc
c002f51b:	ba 30 3e 03 c0       	mov    edx,0xc0033e30
c002f520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f524:	89 10                	mov    DWORD PTR [eax],edx
c002f526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f52a:	83 ec 0c             	sub    esp,0xc
c002f52d:	50                   	push   eax
c002f52e:	e8 b1 d9 fe ff       	call   c001cee4 <Timer::~Timer()>
c002f533:	83 c4 10             	add    esp,0x10
c002f536:	90                   	nop
c002f537:	83 c4 0c             	add    esp,0xc
c002f53a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f53c <PIT::~PIT()>:
c002f53c:	83 ec 0c             	sub    esp,0xc
c002f53f:	83 ec 0c             	sub    esp,0xc
c002f542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f546:	e8 cd ff ff ff       	call   c002f518 <PIT::~PIT()>
c002f54b:	83 c4 10             	add    esp,0x10
c002f54e:	83 ec 08             	sub    esp,0x8
c002f551:	68 5c 01 00 00       	push   0x15c
c002f556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f55a:	e8 f9 9d fe ff       	call   c0019358 <operator delete(void*, unsigned long)>
c002f55f:	83 c4 10             	add    esp,0x10
c002f562:	83 c4 0c             	add    esp,0xc
c002f565:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 1b 2c 03 c0       	mov    esi,0xc0032c1b
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 37 2c 03 c0       	mov    esi,0xc0032c37
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
