
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ff 7e 00 00       	call   c0007f1f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 95 c3 01 00       	call   c001c3ba <_init>
c0000025:	c3                   	ret    
c0000026:	bb 56 ce 01 c0       	mov    ebx,0xc001ce56
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 60 ce 01 c0    	cmp    ebx,0xc001ce60
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 f9 01 c0       	mov    eax,0xc001f918
c0000049:	3d 18 f9 01 c0       	cmp    eax,0xc001f918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 f9 01 c0       	push   0xc001f918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 f9 01 c0       	mov    eax,0xc001f918
c0000075:	2d 18 f9 01 c0       	sub    eax,0xc001f918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 f9 01 c0       	push   0xc001f918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fb40,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 68 ce 01 c0       	mov    ebx,0xc001ce68
c00000bb:	81 eb 64 ce 01 c0    	sub    ebx,0xc001ce64
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 64 ce 01 c0       	mov    esi,0xc001ce64
c00000ca:	a1 44 fb 01 c0       	mov    eax,ds:0xc001fb44
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 fb 01 c0       	mov    ds:0xc001fb44,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 fb 01 c0       	mov    eax,ds:0xc001fb44
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 f9 01 c0       	push   0xc001f918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fb40,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 fb 01 c0       	push   0xc001fb48
c000012c:	68 18 f9 01 c0       	push   0xc001f918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 f8 2f 01 00       	call   c00132c8 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 00 a7 00 00       	call   c000a9e8 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 d6 2f 01 00       	call   c00132c8 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 a7 34 01 00       	call   c00137b8 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 f6 3a 01 00       	call   c0013e10 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 40 09 02 c0 	lgdtd  ds:0xc0020940
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 86 6b 00 00       	jmp    c0006f28 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 60 fb 01 c0       	mov    ds:0xc001fb60,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 60 fb 01 c0    	mov    DWORD PTR ds:0xc001fb60,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 60 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fb60
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 80 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3180],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 80 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3180],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 80 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3180],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 80 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3180],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 80 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3180],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 80 fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fb80
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 80 fb 01 c0    	mov    DWORD PTR ds:0xc001fb80,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 84 fb 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe047c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 84 fb 01 c0 	mov    DWORD PTR [eax*4-0x3ffe047c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 80 fb 01 c0    	mov    DWORD PTR ds:0xc001fb80,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 ac fb 01 c0    	cmp    DWORD PTR ds:0xc001fbac,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d bc fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fbbc
c0000d5d:	c7 42 0c b4 fb 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fbb4
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 80 fb 01 c0 02 	test   BYTE PTR ds:0xc001fb80,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 f2 6e 00 00       	call   c0007d30 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 34 6e 00 00       	call   c0007d30 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 1e 6e 00 00       	call   c0007d30 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 fa 6d 00 00       	call   c0007d30 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 80 fb 01 c0    	mov    edi,DWORD PTR ds:0xc001fb80
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 84 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe047c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 84 fb 01 c0 	mov    DWORD PTR [edx*4-0x3ffe047c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 b4 fb 01 c0 	lea    edx,[eax*8-0x3ffe044c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d c0 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fbc0
c00010df:	81 fb b4 fb 01 c0    	cmp    ebx,0xc001fbb4
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d b4 fb 01 c0       	cmp    eax,0xc001fbb4
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d b0 fb 01 c0    	cmp    DWORD PTR ds:0xc001fbb0,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 bc fb 01 c0       	mov    ds:0xc001fbbc,eax
c000111b:	a3 c0 fb 01 c0       	mov    ds:0xc001fbc0,eax
c0001120:	a3 b0 fb 01 c0       	mov    ds:0xc001fbb0,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 b4 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fbb4
c000112e:	c7 40 0c b4 fb 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fbb4
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 c0 fb 01 c0       	mov    ds:0xc001fbc0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 b4 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fbb4
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 78 fb 01 c0 	lea    ebp,[edx*4-0x3ffe0488]
c000117f:	8b 14 95 80 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0480]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 80 fb 01 c0 	lea    ecx,[edx*4-0x3ffe0480]
c000119a:	8b 14 95 80 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0480]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd b4 fe 01 c0 	or     DWORD PTR [edi*4-0x3ffe014c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 b4 fb 01 c0 	lea    eax,[eax*8-0x3ffe044c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,ecx
c0001254:	89 0d c0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbc0,ecx
c000125a:	c7 41 08 b4 fb 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fbb4
c0001261:	c7 41 0c b4 fb 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fbb4
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd ac fb 01 c0 	lea    edx,[ecx*8-0x3ffe0454]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d b4 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe014c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d b4 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe014c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 ac fb 01 c0 	lea    edx,[eax*4-0x3ffe0454]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d b4 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe014c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,edi
c0001327:	89 3d c0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbc0,edi
c000132d:	c7 47 08 b4 fb 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fbb4
c0001334:	c7 47 0c b4 fb 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fbb4
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d b0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbb0,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 ac fb 01 c0       	mov    eax,ds:0xc001fbac
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 80 fb 01 c0       	mov    edx,0xc001fb80
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d d4 fe 01 c0    	mov    ebx,DWORD PTR ds:0xc001fed4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 d4 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fed4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d d4 fe 01 c0    	mov    DWORD PTR ds:0xc001fed4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 ac fb 01 c0    	cmp    DWORD PTR ds:0xc001fbac,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 dc fe 01 c0    	push   DWORD PTR ds:0xc001fedc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 dc fe 01 c0       	mov    eax,ds:0xc001fedc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d ac fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fbac,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 ac fb 01 c0       	mov    eax,ds:0xc001fbac
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 84 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe047c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 b4 fb 01 c0       	mov    eax,0xc001fbb4
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d ac fe 01 c0       	cmp    eax,0xc001feac
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 e8 fe 01 c0       	mov    eax,ds:0xc001fee8
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 d0 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fed0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 e4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fee4
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 f4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fef4
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 84 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe307c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 80 fb 01 c0       	mov    eax,ds:0xc001fb80
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 80 fb 01 c0       	mov    ds:0xc001fb80,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d c4 fe 01 c0    	mov    DWORD PTR ds:0xc001fec4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d c8 fe 01 c0    	mov    DWORD PTR ds:0xc001fec8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d cc fe 01 c0    	mov    DWORD PTR ds:0xc001fecc,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 d4 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fed4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 2e 53 01 00       	jmp    c0017038 <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 5c 53 01 00       	jmp    c001707c <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 81 53 01 00       	jmp    c00170c0 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 e0 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f20]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 e0 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f20]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba e8 ee 01 c0       	mov    edx,0xc001eee8
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 9c cf 01 c0       	mov    edx,0xc001cf9c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 20 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe00e0]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 00 ff 01 c0    	mov    ax,ds:0xc001ff00
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 00 ff 01 c0    	mov    ds:0xc001ff00,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 a2 cf 01 c0       	mov    eax,0xc001cfa2
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 60 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2fa0]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 ab cf 01 c0       	mov    eax,0xc001cfab
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 e0 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f20]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 20 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe00e0]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 20 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe00e0],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 30 d0 01 c0       	mov    eax,0xc001d030
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 20 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe00e0]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb 20 d0 01 c0       	mov    ebx,0xc001d020
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba 00 d0 01 c0       	mov    edx,0xc001d000
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba 10 d0 01 c0       	mov    edx,0xc001d010
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba b2 cf 01 c0       	mov    edx,0xc001cfb2
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba be cf 01 c0       	mov    edx,0xc001cfbe
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba d2 cf 01 c0       	mov    edx,0xc001cfd2
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 be 23 00 00       	call   c0007e59 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 b6 23 00 00       	call   c0007e69 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c 00 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d400
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 00 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d400
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 00 d2 01 c0       	mov    eax,0xc001d200
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 40 d1 01 c0       	mov    eax,0xc001d140
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 00 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f00]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 a0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0560]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 00 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0500]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 50 00 02 c0       	mov    eax,0xc0020050
c0005ed7:	ba 90 09 02 c0       	mov    edx,0xc0020990
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 e0 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001fae0
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 94 18 01 00       	call   c0017914 <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 00 fb 01 c0       	mov    eax,0xc001fb00
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 a0 fa 01 c0       	mov    eax,0xc001faa0
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 00 d5 01 c0       	push   0xc001d500
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d 34 09 02 c0    	mov    edi,DWORD PTR ds:0xc0020934
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 00 09 02 c0       	mov    ecx,0xc0020900
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d c0 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffc0,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba 54 00 02 c0       	mov    edx,0xc0020054
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffe0040],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa c0 ff 01 c0    	lea    ebp,[edx-0x3ffe0040]
c000658e:	89 82 c0 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe0040],eax
c0006594:	89 ba c4 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe003c],edi
c000659a:	c7 82 c8 ff 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe0038],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ffc0,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 c0 ff 01 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffe0040],0x0
c00065fc:	e8 83 f8 ff ff       	call   c0005e84 <bclear_cache>
c0006601:	c3                   	ret    

c0006602 <iso_read>:
c0006602:	55                   	push   ebp
c0006603:	57                   	push   edi
c0006604:	56                   	push   esi
c0006605:	53                   	push   ebx
c0006606:	83 ec 1c             	sub    esp,0x1c
c0006609:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000660d:	83 fd 0f             	cmp    ebp,0xf
c0006610:	0f 8f ba 01 00 00    	jg     c00067d0 <iso_read+0x1ce>
c0006616:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000661a:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000661e:	83 3c 85 c0 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0040],0x0
c0006626:	0f 84 b0 01 00 00    	je     c00067dc <iso_read+0x1da>
c000662c:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006630:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006634:	8b 04 85 50 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb0]
c000663b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663f:	85 c0                	test   eax,eax
c0006641:	0f 85 a1 01 00 00    	jne    c00067e8 <iso_read+0x1e6>
c0006647:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000664c:	0f 84 71 01 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006652:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006656:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000665a:	8d 14 85 c0 ff 01 c0 	lea    edx,[eax*4-0x3ffe0040]
c0006661:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0006664:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006667:	29 c2                	sub    edx,eax
c0006669:	89 d1                	mov    ecx,edx
c000666b:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666f:	76 04                	jbe    c0006675 <iso_read+0x73>
c0006671:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006675:	85 c9                	test   ecx,ecx
c0006677:	0f 84 42 01 00 00    	je     c00067bf <iso_read+0x1bd>
c000667d:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c0006684:	e9 b7 00 00 00       	jmp    c0006740 <iso_read+0x13e>
c0006689:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668f:	e9 e9 00 00 00       	jmp    c000677d <iso_read+0x17b>
c0006694:	ba 20 00 00 00       	mov    edx,0x20
c0006699:	e9 e2 00 00 00       	jmp    c0006780 <iso_read+0x17e>
c000669e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00066a2:	39 ca                	cmp    edx,ecx
c00066a4:	7e 04                	jle    c00066aa <iso_read+0xa8>
c00066a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066aa:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066ad:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066b1:	c1 e8 0b             	shr    eax,0xb
c00066b4:	03 04 95 c0 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0040]
c00066bb:	e8 72 fa ff ff       	call   c0006132 <bdread>
c00066c0:	85 c0                	test   eax,eax
c00066c2:	0f 88 2c 01 00 00    	js     c00067f4 <iso_read+0x1f2>
c00066c8:	8b 14 85 a0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0560]
c00066cf:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066d2:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d6:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c00066dd:	25 ff 07 00 00       	and    eax,0x7ff
c00066e2:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066f4:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f8:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066fb:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066ff:	8d 14 85 c0 ff 01 c0 	lea    edx,[eax*4-0x3ffe0040]
c0006706:	89 f8                	mov    eax,edi
c0006708:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c000670b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670e:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0006712:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006716:	0f 84 a7 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c000671c:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671f:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006723:	8b 14 95 cc ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0034]
c000672a:	29 c2                	sub    edx,eax
c000672c:	89 d1                	mov    ecx,edx
c000672e:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006732:	76 04                	jbe    c0006738 <iso_read+0x136>
c0006734:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006738:	85 c9                	test   ecx,ecx
c000673a:	0f 84 83 00 00 00    	je     c00067c3 <iso_read+0x1c1>
c0006740:	89 c6                	mov    esi,eax
c0006742:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006748:	ba 00 08 00 00       	mov    edx,0x800
c000674d:	29 f2                	sub    edx,esi
c000674f:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006755:	0f 85 43 ff ff ff    	jne    c000669e <iso_read+0x9c>
c000675b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006761:	0f 8e 37 ff ff ff    	jle    c000669e <iso_read+0x9c>
c0006767:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000676d:	0f 8f 21 ff ff ff    	jg     c0006694 <iso_read+0x92>
c0006773:	89 ca                	mov    edx,ecx
c0006775:	85 c9                	test   ecx,ecx
c0006777:	0f 88 0c ff ff ff    	js     c0006689 <iso_read+0x87>
c000677d:	c1 fa 0b             	sar    edx,0xb
c0006780:	89 d6                	mov    esi,edx
c0006782:	c1 e6 0b             	shl    esi,0xb
c0006785:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006789:	83 ec 04             	sub    esp,0x4
c000678c:	52                   	push   edx
c000678d:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006790:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006794:	c1 e8 0b             	shr    eax,0xb
c0006797:	03 04 95 c0 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0040]
c000679e:	50                   	push   eax
c000679f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00067a3:	e8 bc f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a8:	83 c4 10             	add    esp,0x10
c00067ab:	85 c0                	test   eax,eax
c00067ad:	0f 8f 3d ff ff ff    	jg     c00066f0 <iso_read+0xee>
c00067b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067bd:	eb 09                	jmp    c00067c8 <iso_read+0x1c6>
c00067bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c7:	99                   	cdq    
c00067c8:	83 c4 1c             	add    esp,0x1c
c00067cb:	5b                   	pop    ebx
c00067cc:	5e                   	pop    esi
c00067cd:	5f                   	pop    edi
c00067ce:	5d                   	pop    ebp
c00067cf:	c3                   	ret    
c00067d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067da:	eb ec                	jmp    c00067c8 <iso_read+0x1c6>
c00067dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e6:	eb e0                	jmp    c00067c8 <iso_read+0x1c6>
c00067e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f2:	eb d4                	jmp    c00067c8 <iso_read+0x1c6>
c00067f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067fe:	eb c8                	jmp    c00067c8 <iso_read+0x1c6>

c0006800 <iso_seek>:
c0006800:	53                   	push   ebx
c0006801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006805:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006809:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000680d:	83 f8 0f             	cmp    eax,0xf
c0006810:	0f 8f a4 00 00 00    	jg     c00068ba <iso_seek+0xba>
c0006816:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006819:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000681c:	83 3c 9d c0 ff 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe0040],0x0
c0006824:	0f 84 9c 00 00 00    	je     c00068c6 <iso_seek+0xc6>
c000682a:	8d 1c c0             	lea    ebx,[eax+eax*8]
c000682d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006830:	83 3c 9d 50 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffb0],0x0
c0006838:	0f 85 94 00 00 00    	jne    c00068d2 <iso_seek+0xd2>
c000683e:	83 fa 01             	cmp    edx,0x1
c0006841:	74 53                	je     c0006896 <iso_seek+0x96>
c0006843:	83 fa 02             	cmp    edx,0x2
c0006846:	74 5d                	je     c00068a5 <iso_seek+0xa5>
c0006848:	85 d2                	test   edx,edx
c000684a:	74 0c                	je     c0006858 <iso_seek+0x58>
c000684c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006851:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006856:	eb 3c                	jmp    c0006894 <iso_seek+0x94>
c0006858:	89 0c 9d c8 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0038],ecx
c000685f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006862:	8d 14 90             	lea    edx,[eax+edx*4]
c0006865:	8b 0c 95 cc ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0034]
c000686c:	39 0c 95 c8 ff 01 c0 	cmp    DWORD PTR [edx*4-0x3ffe0038],ecx
c0006873:	76 0d                	jbe    c0006882 <iso_seek+0x82>
c0006875:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006878:	8d 14 90             	lea    edx,[eax+edx*4]
c000687b:	89 0c 95 c8 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0038],ecx
c0006882:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006885:	8d 04 90             	lea    eax,[eax+edx*4]
c0006888:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c000688f:	ba 00 00 00 00       	mov    edx,0x0
c0006894:	5b                   	pop    ebx
c0006895:	c3                   	ret    
c0006896:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006899:	8d 14 90             	lea    edx,[eax+edx*4]
c000689c:	01 0c 95 c8 ff 01 c0 	add    DWORD PTR [edx*4-0x3ffe0038],ecx
c00068a3:	eb ba                	jmp    c000685f <iso_seek+0x5f>
c00068a5:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a8:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ab:	8d 14 95 c0 ff 01 c0 	lea    edx,[edx*4-0x3ffe0040]
c00068b2:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b8:	eb a5                	jmp    c000685f <iso_seek+0x5f>
c00068ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068c4:	eb ce                	jmp    c0006894 <iso_seek+0x94>
c00068c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d0:	eb c2                	jmp    c0006894 <iso_seek+0x94>
c00068d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068dc:	eb b6                	jmp    c0006894 <iso_seek+0x94>

c00068de <iso_tell>:
c00068de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e2:	83 f8 0f             	cmp    eax,0xf
c00068e5:	7f 33                	jg     c000691a <iso_tell+0x3c>
c00068e7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068ea:	8d 14 90             	lea    edx,[eax+edx*4]
c00068ed:	83 3c 95 c0 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0040],0x0
c00068f5:	74 2e                	je     c0006925 <iso_tell+0x47>
c00068f7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068fa:	8d 14 90             	lea    edx,[eax+edx*4]
c00068fd:	83 3c 95 50 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffb0],0x0
c0006905:	75 29                	jne    c0006930 <iso_tell+0x52>
c0006907:	8d 14 c0             	lea    edx,[eax+eax*8]
c000690a:	8d 04 90             	lea    eax,[eax+edx*4]
c000690d:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c0006914:	ba 00 00 00 00       	mov    edx,0x0
c0006919:	c3                   	ret    
c000691a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006924:	c3                   	ret    
c0006925:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000692a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692f:	c3                   	ret    
c0006930:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006935:	ba ff ff ff ff       	mov    edx,0xffffffff
c000693a:	c3                   	ret    

c000693b <iso_total>:
c000693b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693f:	83 f8 0f             	cmp    eax,0xf
c0006942:	7f 2e                	jg     c0006972 <iso_total+0x37>
c0006944:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006947:	8d 14 90             	lea    edx,[eax+edx*4]
c000694a:	83 3c 95 c0 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0040],0x0
c0006952:	74 24                	je     c0006978 <iso_total+0x3d>
c0006954:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006957:	8d 14 90             	lea    edx,[eax+edx*4]
c000695a:	83 3c 95 50 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffb0],0x0
c0006962:	75 1a                	jne    c000697e <iso_total+0x43>
c0006964:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006967:	8d 04 90             	lea    eax,[eax+edx*4]
c000696a:	8b 04 85 cc ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0034]
c0006971:	c3                   	ret    
c0006972:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006977:	c3                   	ret    
c0006978:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697d:	c3                   	ret    
c000697e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006983:	c3                   	ret    

c0006984 <fn_postprocess>:
c0006984:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006988:	8a 01                	mov    al,BYTE PTR [ecx]
c000698a:	84 c0                	test   al,al
c000698c:	74 25                	je     c00069b3 <fn_postprocess+0x2f>
c000698e:	3c 3b                	cmp    al,0x3b
c0006990:	74 21                	je     c00069b3 <fn_postprocess+0x2f>
c0006992:	89 c8                	mov    eax,ecx
c0006994:	40                   	inc    eax
c0006995:	8a 10                	mov    dl,BYTE PTR [eax]
c0006997:	84 d2                	test   dl,dl
c0006999:	74 05                	je     c00069a0 <fn_postprocess+0x1c>
c000699b:	80 fa 3b             	cmp    dl,0x3b
c000699e:	75 f4                	jne    c0006994 <fn_postprocess+0x10>
c00069a0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069a3:	39 c1                	cmp    ecx,eax
c00069a5:	73 06                	jae    c00069ad <fn_postprocess+0x29>
c00069a7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069ab:	74 01                	je     c00069ae <fn_postprocess+0x2a>
c00069ad:	c3                   	ret    
c00069ae:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b2:	c3                   	ret    
c00069b3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00069b6:	eb f5                	jmp    c00069ad <fn_postprocess+0x29>

c00069b8 <iso_readdir>:
c00069b8:	55                   	push   ebp
c00069b9:	57                   	push   edi
c00069ba:	56                   	push   esi
c00069bb:	53                   	push   ebx
c00069bc:	83 ec 1c             	sub    esp,0x1c
c00069bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069c3:	83 fe 0f             	cmp    esi,0xf
c00069c6:	0f 8f 7a 02 00 00    	jg     c0006c46 <iso_readdir+0x28e>
c00069cc:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069cf:	8d 04 86             	lea    eax,[esi+eax*4]
c00069d2:	83 3c 85 c0 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0040],0x0
c00069da:	0f 84 70 02 00 00    	je     c0006c50 <iso_readdir+0x298>
c00069e0:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069e3:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e6:	83 3c 85 c4 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe003c],0x0
c00069ee:	0f 84 66 02 00 00    	je     c0006c5a <iso_readdir+0x2a2>
c00069f4:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f7:	8d 04 86             	lea    eax,[esi+eax*4]
c00069fa:	83 3c 85 50 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffb0],0x0
c0006a02:	0f 85 5c 02 00 00    	jne    c0006c64 <iso_readdir+0x2ac>
c0006a08:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a0b:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a0e:	8b 04 95 c8 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0038]
c0006a15:	8b 0c 95 cc ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0034]
c0006a1c:	39 c8                	cmp    eax,ecx
c0006a1e:	73 57                	jae    c0006a77 <iso_readdir+0xbf>
c0006a20:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a23:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a26:	c1 e7 02             	shl    edi,0x2
c0006a29:	c1 e8 0b             	shr    eax,0xb
c0006a2c:	03 87 c0 ff 01 c0    	add    eax,DWORD PTR [edi-0x3ffe0040]
c0006a32:	e8 e8 f6 ff ff       	call   c000611f <biread>
c0006a37:	85 c0                	test   eax,eax
c0006a39:	0f 88 2f 02 00 00    	js     c0006c6e <iso_readdir+0x2b6>
c0006a3f:	8b 14 85 00 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0500]
c0006a46:	83 c2 04             	add    edx,0x4
c0006a49:	8b 87 c8 ff 01 c0    	mov    eax,DWORD PTR [edi-0x3ffe0038]
c0006a4f:	89 c3                	mov    ebx,eax
c0006a51:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a57:	01 d3                	add    ebx,edx
c0006a59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a5b:	84 c9                	test   cl,cl
c0006a5d:	75 22                	jne    c0006a81 <iso_readdir+0xc9>
c0006a5f:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a64:	05 00 08 00 00       	add    eax,0x800
c0006a69:	89 87 c8 ff 01 c0    	mov    DWORD PTR [edi-0x3ffe0038],eax
c0006a6f:	3b 87 cc ff 01 c0    	cmp    eax,DWORD PTR [edi-0x3ffe0034]
c0006a75:	72 b2                	jb     c0006a29 <iso_readdir+0x71>
c0006a77:	b8 00 00 00 00       	mov    eax,0x0
c0006a7c:	e9 83 00 00 00       	jmp    c0006b04 <iso_readdir+0x14c>
c0006a81:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a84:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a87:	3b 04 bd cc ff 01 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffe0034]
c0006a8e:	0f 83 e4 01 00 00    	jae    c0006c78 <iso_readdir+0x2c0>
c0006a94:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a98:	75 06                	jne    c0006aa0 <iso_readdir+0xe8>
c0006a9a:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a9e:	74 6c                	je     c0006b0c <iso_readdir+0x154>
c0006aa0:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c0006aa7:	0f 84 9d 00 00 00    	je     c0006b4a <iso_readdir+0x192>
c0006aad:	31 c9                	xor    ecx,ecx
c0006aaf:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006ab2:	8d 53 21             	lea    edx,[ebx+0x21]
c0006ab5:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006ab8:	8d 04 86             	lea    eax,[esi+eax*4]
c0006abb:	8d 04 85 d8 ff 01 c0 	lea    eax,[eax*4-0x3ffe0028]
c0006ac2:	e8 c0 f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006ac7:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006acb:	0f 85 66 01 00 00    	jne    c0006c37 <iso_readdir+0x27f>
c0006ad1:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ad4:	e8 a5 f3 ff ff       	call   c0005e7e <iso_733>
c0006ad9:	ba 00 00 00 00       	mov    edx,0x0
c0006ade:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ae1:	c1 e1 02             	shl    ecx,0x2
c0006ae4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ae7:	8d 3c bd c0 ff 01 c0 	lea    edi,[edi*4-0x3ffe0040]
c0006aee:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006af1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006af4:	31 c0                	xor    eax,eax
c0006af6:	8a 03                	mov    al,BYTE PTR [ebx]
c0006af8:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006afb:	01 ce                	add    esi,ecx
c0006afd:	8d 04 b5 d0 ff 01 c0 	lea    eax,[esi*4-0x3ffe0030]
c0006b04:	83 c4 1c             	add    esp,0x1c
c0006b07:	5b                   	pop    ebx
c0006b08:	5e                   	pop    esi
c0006b09:	5f                   	pop    edi
c0006b0a:	5d                   	pop    ebp
c0006b0b:	c3                   	ret    
c0006b0c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b12:	01 c8                	add    eax,ecx
c0006b14:	8d 3c bd c0 ff 01 c0 	lea    edi,[edi*4-0x3ffe0040]
c0006b1b:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b1e:	89 c1                	mov    ecx,eax
c0006b20:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b26:	31 db                	xor    ebx,ebx
c0006b28:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b2b:	89 d9                	mov    ecx,ebx
c0006b2d:	01 c8                	add    eax,ecx
c0006b2f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b32:	25 ff 07 00 00       	and    eax,0x7ff
c0006b37:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b3a:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b3d:	0f 85 5d ff ff ff    	jne    c0006aa0 <iso_readdir+0xe8>
c0006b43:	b8 00 00 00 00       	mov    eax,0x0
c0006b48:	eb ba                	jmp    c0006b04 <iso_readdir+0x14c>
c0006b4a:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b4d:	c1 e7 02             	shl    edi,0x2
c0006b50:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b53:	8d 2c 85 d8 ff 01 c0 	lea    ebp,[eax*4-0x3ffe0028]
c0006b5a:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b5e:	83 ec 04             	sub    esp,0x4
c0006b61:	31 c0                	xor    eax,eax
c0006b63:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b66:	50                   	push   eax
c0006b67:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b6a:	50                   	push   eax
c0006b6b:	55                   	push   ebp
c0006b6c:	e8 df 9a ff ff       	call   c0000650 <strncpy>
c0006b71:	31 c0                	xor    eax,eax
c0006b73:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b76:	01 f7                	add    edi,esi
c0006b78:	c6 84 b8 d8 ff 01 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffe0028],0x0
c0006b80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b83:	e8 fc fd ff ff       	call   c0006984 <fn_postprocess>
c0006b88:	31 c0                	xor    eax,eax
c0006b8a:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b8d:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b90:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b96:	29 c5                	sub    ebp,eax
c0006b98:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006ba3:	74 25                	je     c0006bca <iso_readdir+0x212>
c0006ba5:	83 ed 21             	sub    ebp,0x21
c0006ba8:	83 fd 03             	cmp    ebp,0x3
c0006bab:	0f 8e 16 ff ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006bb1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bb4:	48                   	dec    eax
c0006bb5:	3c 01                	cmp    al,0x1
c0006bb7:	0f 87 0a ff ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bbd:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bc8:	eb 23                	jmp    c0006bed <iso_readdir+0x235>
c0006bca:	47                   	inc    edi
c0006bcb:	83 ed 22             	sub    ebp,0x22
c0006bce:	eb d8                	jmp    c0006ba8 <iso_readdir+0x1f0>
c0006bd0:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bd4:	29 c5                	sub    ebp,eax
c0006bd6:	01 c7                	add    edi,eax
c0006bd8:	83 fd 03             	cmp    ebp,0x3
c0006bdb:	0f 8e e6 fe ff ff    	jle    c0006ac7 <iso_readdir+0x10f>
c0006be1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006be4:	48                   	dec    eax
c0006be5:	3c 01                	cmp    al,0x1
c0006be7:	0f 87 da fe ff ff    	ja     c0006ac7 <iso_readdir+0x10f>
c0006bed:	83 ec 04             	sub    esp,0x4
c0006bf0:	6a 02                	push   0x2
c0006bf2:	68 00 d5 01 c0       	push   0xc001d500
c0006bf7:	57                   	push   edi
c0006bf8:	e8 83 9b ff ff       	call   c0000780 <strncmp>
c0006bfd:	83 c4 10             	add    esp,0x10
c0006c00:	85 c0                	test   eax,eax
c0006c02:	75 cc                	jne    c0006bd0 <iso_readdir+0x218>
c0006c04:	83 ec 04             	sub    esp,0x4
c0006c07:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c0b:	83 e8 05             	sub    eax,0x5
c0006c0e:	50                   	push   eax
c0006c0f:	8d 47 05             	lea    eax,[edi+0x5]
c0006c12:	50                   	push   eax
c0006c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c17:	e8 34 9a ff ff       	call   c0000650 <strncpy>
c0006c1c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c24:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c27:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c2a:	c6 84 90 d3 ff 01 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffe002d],0x0
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	eb 99                	jmp    c0006bd0 <iso_readdir+0x218>
c0006c37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c41:	e9 98 fe ff ff       	jmp    c0006ade <iso_readdir+0x126>
c0006c46:	b8 00 00 00 00       	mov    eax,0x0
c0006c4b:	e9 b4 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c50:	b8 00 00 00 00       	mov    eax,0x0
c0006c55:	e9 aa fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c5a:	b8 00 00 00 00       	mov    eax,0x0
c0006c5f:	e9 a0 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c64:	b8 00 00 00 00       	mov    eax,0x0
c0006c69:	e9 96 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c6e:	b8 00 00 00 00       	mov    eax,0x0
c0006c73:	e9 8c fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>
c0006c78:	b8 00 00 00 00       	mov    eax,0x0
c0006c7d:	e9 82 fe ff ff       	jmp    c0006b04 <iso_readdir+0x14c>

c0006c82 <iso_reset>:
c0006c82:	e8 4b f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c87:	e8 40 f2 ff ff       	call   c0005ecc <bclear>
c0006c8c:	b8 00 00 00 00       	mov    eax,0x0
c0006c91:	c3                   	ret    

c0006c92 <init_percd>:
c0006c92:	57                   	push   edi
c0006c93:	56                   	push   esi
c0006c94:	53                   	push   ebx
c0006c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c99:	a2 e0 fa 01 c0       	mov    ds:0xc001fae0,al
c0006c9e:	e8 df ff ff ff       	call   c0006c82 <iso_reset>
c0006ca3:	c7 05 34 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020934,0x0
c0006cad:	bb 01 00 00 00       	mov    ebx,0x1
c0006cb2:	eb 06                	jmp    c0006cba <init_percd+0x28>
c0006cb4:	43                   	inc    ebx
c0006cb5:	83 fb 04             	cmp    ebx,0x4
c0006cb8:	74 53                	je     c0006d0d <init_percd+0x7b>
c0006cba:	a1 2c 09 02 c0       	mov    eax,ds:0xc002092c
c0006cbf:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cc3:	e8 57 f4 ff ff       	call   c000611f <biread>
c0006cc8:	89 c6                	mov    esi,eax
c0006cca:	85 c0                	test   eax,eax
c0006ccc:	0f 88 c1 00 00 00    	js     c0006d93 <init_percd+0x101>
c0006cd2:	83 ec 04             	sub    esp,0x4
c0006cd5:	6a 06                	push   0x6
c0006cd7:	68 03 d5 01 c0       	push   0xc001d503
c0006cdc:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006ce3:	83 c0 04             	add    eax,0x4
c0006ce6:	50                   	push   eax
c0006ce7:	e8 c4 96 ff ff       	call   c00003b0 <memcmp>
c0006cec:	83 c4 10             	add    esp,0x10
c0006cef:	85 c0                	test   eax,eax
c0006cf1:	75 c1                	jne    c0006cb4 <init_percd+0x22>
c0006cf3:	8b 04 b5 00 fb 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0500]
c0006cfa:	83 c0 5c             	add    eax,0x5c
c0006cfd:	e8 1e f1 ff ff       	call   c0005e20 <isjoliet>
c0006d02:	a3 34 09 02 c0       	mov    ds:0xc0020934,eax
c0006d07:	85 c0                	test   eax,eax
c0006d09:	74 a9                	je     c0006cb4 <init_percd+0x22>
c0006d0b:	eb 09                	jmp    c0006d16 <init_percd+0x84>
c0006d0d:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c0006d14:	74 42                	je     c0006d58 <init_percd+0xc6>
c0006d16:	8b 34 b5 00 fb 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0500]
c0006d1d:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d23:	bf 00 09 02 c0       	mov    edi,0xc0020900
c0006d28:	b9 22 00 00 00       	mov    ecx,0x22
c0006d2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d2f:	b8 02 09 02 c0       	mov    eax,0xc0020902
c0006d34:	e8 45 f1 ff ff       	call   c0005e7e <iso_733>
c0006d39:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c0006d3e:	b8 0a 09 02 c0       	mov    eax,0xc002090a
c0006d43:	e8 36 f1 ff ff       	call   c0005e7e <iso_733>
c0006d48:	a3 24 09 02 c0       	mov    ds:0xc0020924,eax
c0006d4d:	bb 00 00 00 00       	mov    ebx,0x0
c0006d52:	89 d8                	mov    eax,ebx
c0006d54:	5b                   	pop    ebx
c0006d55:	5e                   	pop    esi
c0006d56:	5f                   	pop    edi
c0006d57:	c3                   	ret    
c0006d58:	a1 2c 09 02 c0       	mov    eax,ds:0xc002092c
c0006d5d:	83 c0 10             	add    eax,0x10
c0006d60:	e8 ba f3 ff ff       	call   c000611f <biread>
c0006d65:	89 c6                	mov    esi,eax
c0006d67:	85 c0                	test   eax,eax
c0006d69:	78 e7                	js     c0006d52 <init_percd+0xc0>
c0006d6b:	83 ec 04             	sub    esp,0x4
c0006d6e:	6a 06                	push   0x6
c0006d70:	68 0a d5 01 c0       	push   0xc001d50a
c0006d75:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006d7c:	83 c0 04             	add    eax,0x4
c0006d7f:	50                   	push   eax
c0006d80:	e8 2b 96 ff ff       	call   c00003b0 <memcmp>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 8a                	je     c0006d16 <init_percd+0x84>
c0006d8c:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d91:	eb bf                	jmp    c0006d52 <init_percd+0xc0>
c0006d93:	89 c3                	mov    ebx,eax
c0006d95:	eb bb                	jmp    c0006d52 <init_percd+0xc0>

c0006d97 <iso_ioctl>:
c0006d97:	e8 e6 fe ff ff       	call   c0006c82 <iso_reset>
c0006d9c:	b8 00 00 00 00       	mov    eax,0x0
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_init>:
c0006da2:	53                   	push   ebx
c0006da3:	83 ec 0c             	sub    esp,0xc
c0006da6:	68 40 09 00 00       	push   0x940
c0006dab:	6a 00                	push   0x0
c0006dad:	68 c0 ff 01 c0       	push   0xc001ffc0
c0006db2:	e8 39 97 ff ff       	call   c00004f0 <memset>
c0006db7:	c7 05 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ffc0,0xffffffff
c0006dc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dc8:	e8 8c 10 00 00       	call   c0007e59 <malloc>
c0006dcd:	a3 30 09 02 c0       	mov    ds:0xc0020930,eax
c0006dd2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dd9:	e8 7b 10 00 00       	call   c0007e59 <malloc>
c0006dde:	a3 a0 ff 01 c0       	mov    ds:0xc001ffa0,eax
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	bb 00 00 00 00       	mov    ebx,0x0
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	68 04 08 00 00       	push   0x804
c0006df3:	e8 61 10 00 00       	call   c0007e59 <malloc>
c0006df8:	89 04 9d 00 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0500],eax
c0006dff:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e05:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e0c:	e8 48 10 00 00       	call   c0007e59 <malloc>
c0006e11:	89 04 9d a0 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0560],eax
c0006e18:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e1e:	43                   	inc    ebx
c0006e1f:	83 c4 10             	add    esp,0x10
c0006e22:	83 fb 10             	cmp    ebx,0x10
c0006e25:	75 c4                	jne    c0006deb <fs_iso9660_init+0x49>
c0006e27:	b8 00 00 00 00       	mov    eax,0x0
c0006e2c:	83 c4 08             	add    esp,0x8
c0006e2f:	5b                   	pop    ebx
c0006e30:	c3                   	ret    

c0006e31 <fs_iso9660_shutdown>:
c0006e31:	53                   	push   ebx
c0006e32:	83 ec 08             	sub    esp,0x8
c0006e35:	bb 00 00 00 00       	mov    ebx,0x0
c0006e3a:	83 ec 0c             	sub    esp,0xc
c0006e3d:	ff 34 9d 00 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0500]
c0006e44:	e8 20 10 00 00       	call   c0007e69 <free>
c0006e49:	83 c4 04             	add    esp,0x4
c0006e4c:	ff 34 9d a0 fa 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0560]
c0006e53:	e8 11 10 00 00       	call   c0007e69 <free>
c0006e58:	43                   	inc    ebx
c0006e59:	83 c4 10             	add    esp,0x10
c0006e5c:	83 fb 10             	cmp    ebx,0x10
c0006e5f:	75 d9                	jne    c0006e3a <fs_iso9660_shutdown+0x9>
c0006e61:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0006e66:	85 c0                	test   eax,eax
c0006e68:	74 0c                	je     c0006e76 <fs_iso9660_shutdown+0x45>
c0006e6a:	83 ec 0c             	sub    esp,0xc
c0006e6d:	50                   	push   eax
c0006e6e:	e8 f6 0f 00 00       	call   c0007e69 <free>
c0006e73:	83 c4 10             	add    esp,0x10
c0006e76:	a1 a0 ff 01 c0       	mov    eax,ds:0xc001ffa0
c0006e7b:	85 c0                	test   eax,eax
c0006e7d:	74 0c                	je     c0006e8b <fs_iso9660_shutdown+0x5a>
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	50                   	push   eax
c0006e83:	e8 e1 0f 00 00       	call   c0007e69 <free>
c0006e88:	83 c4 10             	add    esp,0x10
c0006e8b:	c7 05 a0 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ffa0,0x0
c0006e95:	c7 05 30 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020930,0x0
c0006e9f:	b8 00 00 00 00       	mov    eax,0x0
c0006ea4:	83 c4 08             	add    esp,0x8
c0006ea7:	5b                   	pop    ebx
c0006ea8:	c3                   	ret    

c0006ea9 <CPU::current()>:
c0006ea9:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0006eae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eb4:	c3                   	ret    

c0006eb5 <operator new(unsigned long)>:
c0006eb5:	e9 9f 0f 00 00       	jmp    c0007e59 <malloc>

c0006eba <operator delete(void*)>:
c0006eba:	e9 ba 0f 00 00       	jmp    c0007e79 <rfree>

c0006ebf <disableIRQs()>:
c0006ebf:	fa                   	cli    
c0006ec0:	c3                   	ret    

c0006ec1 <enableIRQs()>:
c0006ec1:	fb                   	sti    
c0006ec2:	c3                   	ret    

c0006ec3 <lockScheduler()>:
c0006ec3:	fa                   	cli    
c0006ec4:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0006eca:	c3                   	ret    

c0006ecb <unlockScheduler()>:
c0006ecb:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0006ed0:	48                   	dec    eax
c0006ed1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0006ed6:	75 01                	jne    c0006ed9 <unlockScheduler()+0xe>
c0006ed8:	fb                   	sti    
c0006ed9:	c3                   	ret    

c0006eda <lockStuff()>:
c0006eda:	fa                   	cli    
c0006edb:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0006ee1:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c0006ee7:	c3                   	ret    

c0006ee8 <unlockStuff()>:
c0006ee8:	83 ec 0c             	sub    esp,0xc
c0006eeb:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0006ef0:	48                   	dec    eax
c0006ef1:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0006ef6:	75 18                	jne    c0006f10 <unlockStuff()+0x28>
c0006ef8:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c0006eff:	74 0f                	je     c0006f10 <unlockStuff()+0x28>
c0006f01:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0006f0b:	e8 18 cb 00 00       	call   c0013a28 <schedule()>
c0006f10:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0006f15:	48                   	dec    eax
c0006f16:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0006f1b:	75 01                	jne    c0006f1e <unlockStuff()+0x36>
c0006f1d:	fb                   	sti    
c0006f1e:	83 c4 0c             	add    esp,0xc
c0006f21:	c3                   	ret    

c0006f22 <Virt::getAKernelVAS()>:
c0006f22:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0006f27:	c3                   	ret    

c0006f28 <__not_memcpy>:
c0006f28:	57                   	push   edi
c0006f29:	56                   	push   esi
c0006f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f36:	89 c7                	mov    edi,eax
c0006f38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f3a:	5e                   	pop    esi
c0006f3b:	5f                   	pop    edi
c0006f3c:	c3                   	ret    
c0006f3d:	66 90                	xchg   ax,ax
c0006f3f:	90                   	nop

c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	83 ec 08             	sub    esp,0x8
c0006f46:	68 11 d5 01 c0       	push   0xc001d511
c0006f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f4f:	e8 ac 97 ff ff       	call   c0000700 <strcmp>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 94 c0             	sete   al
c0006f5c:	84 c0                	test   al,al
c0006f5e:	74 0c                	je     c0006f6c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f60:	b8 38 09 02 c0       	mov    eax,0xc0020938
c0006f65:	e9 ea 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f6a:	66 90                	xchg   ax,ax
c0006f6c:	83 ec 08             	sub    esp,0x8
c0006f6f:	68 1a d5 01 c0       	push   0xc001d51a
c0006f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f78:	e8 83 97 ff ff       	call   c0000700 <strcmp>
c0006f7d:	83 c4 10             	add    esp,0x10
c0006f80:	85 c0                	test   eax,eax
c0006f82:	0f 94 c0             	sete   al
c0006f85:	84 c0                	test   al,al
c0006f87:	74 0b                	je     c0006f94 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f89:	b8 a0 c1 01 c0       	mov    eax,0xc001c1a0
c0006f8e:	e9 c1 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f93:	90                   	nop
c0006f94:	83 ec 08             	sub    esp,0x8
c0006f97:	68 24 d5 01 c0       	push   0xc001d524
c0006f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fa0:	e8 5b 97 ff ff       	call   c0000700 <strcmp>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 94 c0             	sete   al
c0006fad:	84 c0                	test   al,al
c0006faf:	74 0b                	je     c0006fbc <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fb1:	b8 d4 be 01 c0       	mov    eax,0xc001bed4
c0006fb6:	e9 99 00 00 00       	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fbb:	90                   	nop
c0006fbc:	83 ec 08             	sub    esp,0x8
c0006fbf:	68 2d d5 01 c0       	push   0xc001d52d
c0006fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fc8:	e8 33 97 ff ff       	call   c0000700 <strcmp>
c0006fcd:	83 c4 10             	add    esp,0x10
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	0f 94 c0             	sete   al
c0006fd5:	84 c0                	test   al,al
c0006fd7:	74 07                	je     c0006fe0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fd9:	b8 a0 c2 01 c0       	mov    eax,0xc001c2a0
c0006fde:	eb 74                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fe0:	83 ec 08             	sub    esp,0x8
c0006fe3:	68 37 d5 01 c0       	push   0xc001d537
c0006fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fec:	e8 0f 97 ff ff       	call   c0000700 <strcmp>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	85 c0                	test   eax,eax
c0006ff6:	0f 94 c0             	sete   al
c0006ff9:	84 c0                	test   al,al
c0006ffb:	74 07                	je     c0007004 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006ffd:	b8 20 c0 01 c0       	mov    eax,0xc001c020
c0007002:	eb 50                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007004:	83 ec 08             	sub    esp,0x8
c0007007:	68 40 d5 01 c0       	push   0xc001d540
c000700c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007010:	e8 eb 96 ff ff       	call   c0000700 <strcmp>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	85 c0                	test   eax,eax
c000701a:	0f 94 c0             	sete   al
c000701d:	84 c0                	test   al,al
c000701f:	74 07                	je     c0007028 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007021:	b8 3c 09 02 c0       	mov    eax,0xc002093c
c0007026:	eb 2c                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007028:	83 ec 08             	sub    esp,0x8
c000702b:	68 4d d5 01 c0       	push   0xc001d54d
c0007030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007034:	e8 c7 96 ff ff       	call   c0000700 <strcmp>
c0007039:	83 c4 10             	add    esp,0x10
c000703c:	85 c0                	test   eax,eax
c000703e:	0f 94 c0             	sete   al
c0007041:	84 c0                	test   al,al
c0007043:	74 07                	je     c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0007045:	b8 3d 09 02 c0       	mov    eax,0xc002093d
c000704a:	eb 08                	jmp    c0007054 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000704c:	b8 00 00 00 00       	mov    eax,0x0
c0007051:	8d 76 00             	lea    esi,[esi+0x0]
c0007054:	83 c4 0c             	add    esp,0xc
c0007057:	c3                   	ret    

c0007058 <Computer::close(int, int, void*)>:
c0007058:	57                   	push   edi
c0007059:	56                   	push   esi
c000705a:	53                   	push   ebx
c000705b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000705f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007063:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007067:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000706d:	83 ec 0c             	sub    esp,0xc
c0007070:	50                   	push   eax
c0007071:	e8 d0 50 00 00       	call   c000c146 <Device::closeAll()>
c0007076:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c000707c:	83 c4 10             	add    esp,0x10
c000707f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007081:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0007085:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000708d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007095:	5b                   	pop    ebx
c0007096:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0007099:	5e                   	pop    esi
c000709a:	5f                   	pop    edi
c000709b:	ff e0                	jmp    eax

c000709d <Krnl::firstTask()>:
c000709d:	53                   	push   ebx
c000709e:	83 ec 14             	sub    esp,0x14
c00070a1:	fb                   	sti    
c00070a2:	68 5a d5 01 c0       	push   0xc001d55a
c00070a7:	e8 07 0e 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00070ac:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070b3:	e8 a1 0d 00 00       	call   c0007e59 <malloc>
c00070b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070bf:	89 c3                	mov    ebx,eax
c00070c1:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00070c6:	50                   	push   eax
c00070c7:	68 73 d5 01 c0       	push   0xc001d573
c00070cc:	6a 01                	push   0x1
c00070ce:	53                   	push   ebx
c00070cf:	e8 28 c5 00 00       	call   c00135fc <Process::Process(bool, char const*, Process*, char**)>
c00070d4:	83 c4 20             	add    esp,0x20
c00070d7:	68 ff 00 00 00       	push   0xff
c00070dc:	6a 00                	push   0x0
c00070de:	68 b3 78 00 c0       	push   0xc00078b3
c00070e3:	53                   	push   ebx
c00070e4:	e8 1f c7 00 00       	call   c0013808 <Process::createThread(void (*)(void*), void*, int)>
c00070e9:	8b 15 30 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e30
c00070ef:	6a 7a                	push   0x7a
c00070f1:	6a 00                	push   0x0
c00070f3:	68 5c 42 01 c0       	push   0xc001425c
c00070f8:	52                   	push   edx
c00070f9:	e8 0a c7 00 00       	call   c0013808 <Process::createThread(void (*)(void*), void*, int)>
c00070fe:	83 c4 14             	add    esp,0x14
c0007101:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c0007106:	68 70 d6 01 c0       	push   0xc001d670
c000710b:	c6 05 3d 09 02 c0 01 	mov    BYTE PTR ds:0xc002093d,0x1
c0007112:	e8 9c 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007117:	e8 1f d5 00 00       	call   c001463b <Vm::initialise8086()>
c000711c:	e8 69 3e 00 00       	call   c000af8a <Fs::initVFS()>
c0007121:	c7 04 24 80 d5 01 c0 	mov    DWORD PTR [esp],0xc001d580
c0007128:	e8 86 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000712d:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0007132:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007138:	8b 10                	mov    edx,DWORD PTR [eax]
c000713a:	6a 00                	push   0x0
c000713c:	6a 00                	push   0x0
c000713e:	6a 00                	push   0x0
c0007140:	50                   	push   eax
c0007141:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007144:	83 c4 14             	add    esp,0x14
c0007147:	68 70 d6 01 c0       	push   0xc001d670
c000714c:	e8 62 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007151:	e8 38 ad 00 00       	call   c0011e8e <Sys::loadSyscalls()>
c0007156:	e8 6f 94 00 00       	call   c00105ca <Krnl::loadSystemEnv()>
c000715b:	e8 34 97 00 00       	call   c0010894 <Krnl::setupPowerManager()>
c0007160:	83 c4 0c             	add    esp,0xc
c0007163:	6a 3a                	push   0x3a
c0007165:	68 9a d5 01 c0       	push   0xc001d59a
c000716a:	68 a3 d5 01 c0       	push   0xc001d5a3
c000716f:	e8 4a 9c 00 00       	call   c0010dbe <Reg::readIntWithDefault(char*, char*, int)>
c0007174:	89 04 24             	mov    DWORD PTR [esp],eax
c0007177:	e8 1c 49 00 00       	call   c000ba98 <User::loadClockSettings(int)>
c000717c:	c7 04 24 94 d6 01 c0 	mov    DWORD PTR [esp],0xc001d694
c0007183:	e8 2b 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007188:	59                   	pop    ecx
c0007189:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000718e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0007194:	53                   	push   ebx
c0007195:	e8 aa 4f 00 00       	call   c000c144 <Device::loadDriversForAll()>
c000719a:	c7 04 24 ab d5 01 c0 	mov    DWORD PTR [esp],0xc001d5ab
c00071a1:	e8 0d 0d 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00071a6:	58                   	pop    eax
c00071a7:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c00071ad:	5a                   	pop    edx
c00071ae:	6a 01                	push   0x1
c00071b0:	68 bc d5 01 c0       	push   0xc001d5bc
c00071b5:	e8 7c be 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c00071ba:	59                   	pop    ecx
c00071bb:	5a                   	pop    edx
c00071bc:	53                   	push   ebx
c00071bd:	50                   	push   eax
c00071be:	e8 a4 c0 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c00071c3:	83 c4 10             	add    esp,0x10
c00071c6:	83 ec 0c             	sub    esp,0xc
c00071c9:	6a 02                	push   0x2
c00071cb:	e8 54 ca 00 00       	call   c0013c24 <blockTask(TaskState)>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	eb f1                	jmp    c00071c6 <Krnl::firstTask()+0x129>
c00071d5:	90                   	nop

c00071d6 <Computer::Computer()>:
c00071d6:	83 ec 0c             	sub    esp,0xc
c00071d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	68 d8 d5 01 c0       	push   0xc001d5d8
c00071e5:	50                   	push   eax
c00071e6:	e8 d5 4f 00 00       	call   c000c1c0 <Device::Device(char const*)>
c00071eb:	83 c4 10             	add    esp,0x10
c00071ee:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	89 10                	mov    DWORD PTR [eax],edx
c00071f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0007207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000720b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007219:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000721f:	83 ca 04             	or     edx,0x4
c0007222:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000722c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007232:	31 d2                	xor    edx,edx
c0007234:	88 c2                	mov    dl,al
c0007236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000723a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007245:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000724b:	31 d2                	xor    edx,edx
c000724d:	88 c2                	mov    dl,al
c000724f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007253:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000725c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007262:	8d 50 01             	lea    edx,[eax+0x1]
c0007265:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007269:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000726f:	31 d2                	xor    edx,edx
c0007271:	88 c2                	mov    dl,al
c0007273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007277:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000727b:	83 e1 3f             	and    ecx,0x3f
c000727e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0007282:	90                   	nop
c0007283:	83 c4 0c             	add    esp,0xc
c0007286:	c3                   	ret    
c0007287:	90                   	nop

c0007288 <Computer::setBootMessage(char const*)>:
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::detectFeatures()>:
c000728a:	55                   	push   ebp
c000728b:	57                   	push   edi
c000728c:	56                   	push   esi
c000728d:	53                   	push   ebx
c000728e:	83 ec 1c             	sub    esp,0x1c
c0007291:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007295:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c000729f:	e8 75 8f ff ff       	call   c0000219 <detectCPUID>
c00072a4:	85 c0                	test   eax,eax
c00072a6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072ac:	0f 95 c2             	setne  dl
c00072af:	83 e0 fd             	and    eax,0xfffffffd
c00072b2:	01 d2                	add    edx,edx
c00072b4:	09 d0                	or     eax,edx
c00072b6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072bc:	a8 02                	test   al,0x2
c00072be:	75 46                	jne    c0007306 <Computer::detectFeatures()+0x7c>
c00072c0:	f6 05 51 09 02 c0 04 	test   BYTE PTR ds:0xc0020951,0x4
c00072c7:	74 07                	je     c00072d0 <Computer::detectFeatures()+0x46>
c00072c9:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072d0:	e8 91 4b 01 00       	call   c001be66 <x87Detect>
c00072d5:	83 e0 01             	and    eax,0x1
c00072d8:	c1 e0 04             	shl    eax,0x4
c00072db:	88 c2                	mov    dl,al
c00072dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072e3:	83 e0 ef             	and    eax,0xffffffef
c00072e6:	09 d0                	or     eax,edx
c00072e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072ee:	a8 10                	test   al,0x10
c00072f0:	0f 85 2a 01 00 00    	jne    c0007420 <Computer::detectFeatures()+0x196>
c00072f6:	84 c0                	test   al,al
c00072f8:	0f 88 45 01 00 00    	js     c0007443 <Computer::detectFeatures()+0x1b9>
c00072fe:	83 c4 1c             	add    esp,0x1c
c0007301:	5b                   	pop    ebx
c0007302:	5e                   	pop    esi
c0007303:	5f                   	pop    edi
c0007304:	5d                   	pop    ebp
c0007305:	c3                   	ret    
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	6a 20                	push   0x20
c000730b:	e8 dc 83 00 00       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c0007310:	83 e0 01             	and    eax,0x1
c0007313:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000731a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007320:	83 e0 f7             	and    eax,0xfffffff7
c0007323:	09 d0                	or     eax,edx
c0007325:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000732b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0007332:	e8 b5 83 00 00       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c0007337:	83 e0 01             	and    eax,0x1
c000733a:	88 c2                	mov    dl,al
c000733c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007342:	83 e0 fe             	and    eax,0xfffffffe
c0007345:	09 d0                	or     eax,edx
c0007347:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000734d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007354:	e8 93 83 00 00       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c0007359:	c1 e0 07             	shl    eax,0x7
c000735c:	88 c2                	mov    dl,al
c000735e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007364:	83 e0 7f             	and    eax,0x7f
c0007367:	09 d0                	or     eax,edx
c0007369:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000736f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0007376:	e8 71 83 00 00       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c000737b:	83 c4 10             	add    esp,0x10
c000737e:	83 e0 01             	and    eax,0x1
c0007381:	c1 e0 05             	shl    eax,0x5
c0007384:	88 c2                	mov    dl,al
c0007386:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000738c:	83 e0 df             	and    eax,0xffffffdf
c000738f:	09 d0                	or     eax,edx
c0007391:	f7 05 50 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020950,0x401
c000739b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073a1:	0f 84 c2 00 00 00    	je     c0007469 <Computer::detectFeatures()+0x1df>
c00073a7:	83 e0 fe             	and    eax,0xfffffffe
c00073aa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073b0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073b6:	88 c2                	mov    dl,al
c00073b8:	83 e2 09             	and    edx,0x9
c00073bb:	fe ca                	dec    dl
c00073bd:	75 09                	jne    c00073c8 <Computer::detectFeatures()+0x13e>
c00073bf:	83 e0 fe             	and    eax,0xfffffffe
c00073c2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073c8:	83 ec 0c             	sub    esp,0xc
c00073cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073cf:	50                   	push   eax
c00073d0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073d4:	55                   	push   ebp
c00073d5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073d9:	57                   	push   edi
c00073da:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073de:	56                   	push   esi
c00073df:	68 00 00 00 80       	push   0x80000000
c00073e4:	e8 7f 82 00 00       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073e9:	83 c4 20             	add    esp,0x20
c00073ec:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073f7:	0f 86 c3 fe ff ff    	jbe    c00072c0 <Computer::detectFeatures()+0x36>
c00073fd:	83 ec 0c             	sub    esp,0xc
c0007400:	50                   	push   eax
c0007401:	55                   	push   ebp
c0007402:	57                   	push   edi
c0007403:	56                   	push   esi
c0007404:	68 01 00 00 80       	push   0x80000001
c0007409:	e8 5a 82 00 00       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000740e:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	e9 a0 fe ff ff       	jmp    c00072c0 <Computer::detectFeatures()+0x36>
c0007420:	e8 fb 49 01 00       	call   c001be20 <absolutelyNoChanceInHell>
c0007425:	88 c2                	mov    dl,al
c0007427:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000742d:	c1 e2 07             	shl    edx,0x7
c0007430:	83 e0 7f             	and    eax,0x7f
c0007433:	09 d0                	or     eax,edx
c0007435:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000743b:	84 c0                	test   al,al
c000743d:	0f 89 bb fe ff ff    	jns    c00072fe <Computer::detectFeatures()+0x74>
c0007443:	e8 58 47 01 00       	call   c001bba0 <avxDetect>
c0007448:	83 e0 01             	and    eax,0x1
c000744b:	c1 e0 05             	shl    eax,0x5
c000744e:	88 c2                	mov    dl,al
c0007450:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007456:	83 e0 df             	and    eax,0xffffffdf
c0007459:	09 d0                	or     eax,edx
c000745b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007461:	83 c4 1c             	add    esp,0x1c
c0007464:	5b                   	pop    ebx
c0007465:	5e                   	pop    esi
c0007466:	5f                   	pop    edi
c0007467:	5d                   	pop    ebp
c0007468:	c3                   	ret    
c0007469:	83 ec 0c             	sub    esp,0xc
c000746c:	68 00 02 00 00       	push   0x200
c0007471:	e8 76 82 00 00       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c0007476:	83 c4 10             	add    esp,0x10
c0007479:	83 e0 01             	and    eax,0x1
c000747c:	88 c2                	mov    dl,al
c000747e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007484:	83 e0 fe             	and    eax,0xfffffffe
c0007487:	09 d0                	or     eax,edx
c0007489:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000748f:	e9 1c ff ff ff       	jmp    c00073b0 <Computer::detectFeatures()+0x126>

c0007494 <Computer::displayFeatures()>:
c0007494:	c3                   	ret    
c0007495:	90                   	nop

c0007496 <Computer::rdmsr(unsigned int)>:
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074a4:	74 0a                	je     c00074b0 <Computer::rdmsr(unsigned int)+0x1a>
c00074a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074aa:	0f 32                	rdmsr  
c00074ac:	83 c4 0c             	add    esp,0xc
c00074af:	c3                   	ret    
c00074b0:	83 ec 0c             	sub    esp,0xc
c00074b3:	68 e1 d5 01 c0       	push   0xc001d5e1
c00074b8:	e8 16 92 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c00074bd:	83 c4 10             	add    esp,0x10
c00074c0:	eb e4                	jmp    c00074a6 <Computer::rdmsr(unsigned int)+0x10>

c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	52                   	push   edx
c00074c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074d1:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074d8:	74 0e                	je     c00074e8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074de:	89 f0                	mov    eax,esi
c00074e0:	89 fa                	mov    edx,edi
c00074e2:	0f 30                	wrmsr  
c00074e4:	58                   	pop    eax
c00074e5:	5e                   	pop    esi
c00074e6:	5f                   	pop    edi
c00074e7:	c3                   	ret    
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	68 e7 d5 01 c0       	push   0xc001d5e7
c00074f0:	e8 de 91 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c00074f5:	83 c4 10             	add    esp,0x10
c00074f8:	eb e0                	jmp    c00074da <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00074fa <Computer::shutdown()>:
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007501:	8b 10                	mov    edx,DWORD PTR [eax]
c0007503:	6a 00                	push   0x0
c0007505:	6a 00                	push   0x0
c0007507:	6a 00                	push   0x0
c0007509:	50                   	push   eax
c000750a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000750d:	83 c4 1c             	add    esp,0x1c
c0007510:	c3                   	ret    
c0007511:	90                   	nop

c0007512 <Computer::restart()>:
c0007512:	83 ec 0c             	sub    esp,0xc
c0007515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007519:	8b 10                	mov    edx,DWORD PTR [eax]
c000751b:	6a 00                	push   0x0
c000751d:	6a 00                	push   0x0
c000751f:	6a 01                	push   0x1
c0007521:	50                   	push   eax
c0007522:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007525:	83 c4 1c             	add    esp,0x1c
c0007528:	c3                   	ret    
c0007529:	90                   	nop

c000752a <Computer::sleep()>:
c000752a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000752e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007538:	e9 27 7c 00 00       	jmp    c000f164 <ACPI::sleep()>
c000753d:	90                   	nop

c000753e <Computer::nmiEnabled()>:
c000753e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007542:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007548:	c3                   	ret    
c0007549:	90                   	nop

c000754a <Computer::readCMOS(unsigned char)>:
c000754a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000754e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007555:	19 c0                	sbb    eax,eax
c0007557:	83 e0 80             	and    eax,0xffffff80
c000755a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000755e:	e6 70                	out    0x70,al
c0007560:	e4 71                	in     al,0x71
c0007562:	c3                   	ret    
c0007563:	90                   	nop

c0007564 <Computer::enableNMI(bool)>:
c0007564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000756c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007572:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000757a:	eb ce                	jmp    c000754a <Computer::readCMOS(unsigned char)>

c000757c <Computer::open(int, int, void*)>:
c000757c:	56                   	push   esi
c000757d:	53                   	push   ebx
c000757e:	83 ec 10             	sub    esp,0x10
c0007581:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007585:	f6 05 50 09 02 c0 04 	test   BYTE PTR ds:0xc0020950,0x4
c000758c:	68 ed d5 01 c0       	push   0xc001d5ed
c0007591:	0f 94 05 20 f8 01 c0 	sete   BYTE PTR ds:0xc001f820
c0007598:	e8 16 09 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000759d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00075a4:	e8 b0 08 00 00       	call   c0007e59 <malloc>
c00075a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ac:	89 c6                	mov    esi,eax
c00075ae:	e8 49 77 00 00       	call   c000ecfc <ACPI::ACPI()>
c00075b3:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075b9:	58                   	pop    eax
c00075ba:	5a                   	pop    edx
c00075bb:	56                   	push   esi
c00075bc:	53                   	push   ebx
c00075bd:	e8 66 4a 00 00       	call   c000c028 <Device::addChild(Device*)>
c00075c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075c5:	e8 c0 fc ff ff       	call   c000728a <Computer::detectFeatures()>
c00075ca:	59                   	pop    ecx
c00075cb:	5e                   	pop    esi
c00075cc:	6a 01                	push   0x1
c00075ce:	53                   	push   ebx
c00075cf:	e8 90 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c00075d4:	c7 04 24 05 d6 01 c0 	mov    DWORD PTR [esp],0xc001d605
c00075db:	e8 d3 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00075e0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075e7:	e8 6d 08 00 00       	call   c0007e59 <malloc>
c00075ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ef:	89 c6                	mov    esi,eax
c00075f1:	e8 ae 81 00 00       	call   c000f7a4 <CPU::CPU()>
c00075f6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00075fc:	58                   	pop    eax
c00075fd:	5a                   	pop    edx
c00075fe:	56                   	push   esi
c00075ff:	53                   	push   ebx
c0007600:	e8 23 4a 00 00       	call   c000c028 <Device::addChild(Device*)>
c0007605:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000760b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000760f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007611:	51                   	push   ecx
c0007612:	6a 00                	push   0x0
c0007614:	6a 00                	push   0x0
c0007616:	50                   	push   eax
c0007617:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000761a:	83 c4 14             	add    esp,0x14
c000761d:	68 b4 d6 01 c0       	push   0xc001d6b4
c0007622:	e8 8c 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007627:	e8 d0 e0 00 00       	call   c00156fc <HalInitialiseCoprocessor()>
c000762c:	c7 04 24 1f d6 01 c0 	mov    DWORD PTR [esp],0xc001d61f
c0007633:	e8 7b 08 00 00       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c0007638:	c7 04 24 9d 70 00 c0 	mov    DWORD PTR [esp],0xc000709d
c000763f:	e8 dc c2 00 00       	call   c0013920 <setupMultitasking(void (*)())>
c0007644:	83 c4 14             	add    esp,0x14
c0007647:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000764c:	5b                   	pop    ebx
c000764d:	5e                   	pop    esi
c000764e:	c3                   	ret    
c000764f:	90                   	nop

c0007650 <Computer::disableNMI()>:
c0007650:	6a 00                	push   0x0
c0007652:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007656:	50                   	push   eax
c0007657:	e8 08 ff ff ff       	call   c0007564 <Computer::enableNMI(bool)>
c000765c:	5a                   	pop    edx
c000765d:	59                   	pop    ecx
c000765e:	c3                   	ret    
c000765f:	90                   	nop

c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007664:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000766b:	19 c0                	sbb    eax,eax
c000766d:	83 e0 80             	and    eax,0xffffff80
c0007670:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007674:	e6 70                	out    0x70,al
c0007676:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000767a:	e6 71                	out    0x71,al
c000767c:	c3                   	ret    
c000767d:	90                   	nop

c000767e <Computer::handleNMI()>:
c000767e:	56                   	push   esi
c000767f:	53                   	push   ebx
c0007680:	83 ec 10             	sub    esp,0x10
c0007683:	e4 92                	in     al,0x92
c0007685:	89 c6                	mov    esi,eax
c0007687:	e4 61                	in     al,0x61
c0007689:	68 3a d6 01 c0       	push   0xc001d63a
c000768e:	88 c3                	mov    bl,al
c0007690:	e8 53 35 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	83 e6 10             	and    esi,0x10
c000769b:	75 0d                	jne    c00076aa <Computer::handleNMI()+0x2c>
c000769d:	f6 c3 40             	test   bl,0x40
c00076a0:	75 1d                	jne    c00076bf <Computer::handleNMI()+0x41>
c00076a2:	84 db                	test   bl,bl
c00076a4:	78 2d                	js     c00076d3 <Computer::handleNMI()+0x55>
c00076a6:	58                   	pop    eax
c00076a7:	5b                   	pop    ebx
c00076a8:	5e                   	pop    esi
c00076a9:	c3                   	ret    
c00076aa:	83 ec 0c             	sub    esp,0xc
c00076ad:	68 4b d6 01 c0       	push   0xc001d64b
c00076b2:	e8 1c 90 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c00076b7:	83 c4 10             	add    esp,0x10
c00076ba:	f6 c3 40             	test   bl,0x40
c00076bd:	74 e3                	je     c00076a2 <Computer::handleNMI()+0x24>
c00076bf:	83 ec 0c             	sub    esp,0xc
c00076c2:	68 58 d6 01 c0       	push   0xc001d658
c00076c7:	e8 07 90 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c00076cc:	83 c4 10             	add    esp,0x10
c00076cf:	84 db                	test   bl,bl
c00076d1:	79 d3                	jns    c00076a6 <Computer::handleNMI()+0x28>
c00076d3:	c7 44 24 10 62 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d662
c00076db:	5a                   	pop    edx
c00076dc:	5b                   	pop    ebx
c00076dd:	5e                   	pop    esi
c00076de:	e9 f0 8f 00 00       	jmp    c00106d3 <Krnl::panic(char const*)>
c00076e3:	90                   	nop

c00076e4 <GDTEntry::setBase(unsigned int)>:
c00076e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076ec:	89 c1                	mov    ecx,eax
c00076ee:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076f2:	c1 e9 10             	shr    ecx,0x10
c00076f5:	c1 e8 18             	shr    eax,0x18
c00076f8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00076fb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00076fe:	c3                   	ret    
c00076ff:	90                   	nop

c0007700 <GDTEntry::setLimit(unsigned int)>:
c0007700:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007708:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000770b:	66 89 01             	mov    WORD PTR [ecx],ax
c000770e:	83 e2 f0             	and    edx,0xfffffff0
c0007711:	c1 e8 10             	shr    eax,0x10
c0007714:	83 e0 0f             	and    eax,0xf
c0007717:	09 d0                	or     eax,edx
c0007719:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <GDT::GDT()>:
c000771e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007722:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000772c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007732:	90                   	nop
c0007733:	c3                   	ret    

c0007734 <GDT::addEntry(GDTEntry)>:
c0007734:	53                   	push   ebx
c0007735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007739:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000773d:	8b 02                	mov    eax,DWORD PTR [edx]
c000773f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007743:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007747:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000774b:	8d 48 01             	lea    ecx,[eax+0x1]
c000774e:	c1 e0 03             	shl    eax,0x3
c0007751:	89 0a                	mov    DWORD PTR [edx],ecx
c0007753:	5b                   	pop    ebx
c0007754:	c3                   	ret    
c0007755:	90                   	nop

c0007756 <GDT::getNumberOfEntries()>:
c0007756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775a:	8b 00                	mov    eax,DWORD PTR [eax]
c000775c:	c3                   	ret    
c000775d:	90                   	nop

c000775e <GDT::flush()>:
c000775e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007762:	8b 10                	mov    edx,DWORD PTR [eax]
c0007764:	83 c0 04             	add    eax,0x4
c0007767:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000776e:	a3 42 09 02 c0       	mov    ds:0xc0020942,eax
c0007773:	66 89 15 40 09 02 c0 	mov    WORD PTR ds:0xc0020940,dx
c000777a:	e9 fe 8b ff ff       	jmp    c000037d <loadGDT>
c000777f:	90                   	nop

c0007780 <GDT::setup()>:
c0007780:	57                   	push   edi
c0007781:	56                   	push   esi
c0007782:	53                   	push   ebx
c0007783:	83 ec 30             	sub    esp,0x30
c0007786:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000778a:	6a 00                	push   0x0
c000778c:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007790:	56                   	push   esi
c0007791:	e8 4e ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007796:	6a 00                	push   0x0
c0007798:	56                   	push   esi
c0007799:	e8 62 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c000779e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00077a6:	6a 00                	push   0x0
c00077a8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077ac:	56                   	push   esi
c00077ad:	e8 32 ff ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c00077b2:	68 ff ff ff 00       	push   0xffffff
c00077b7:	56                   	push   esi
c00077b8:	e8 43 ff ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c00077bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077c5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077c9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077db:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077df:	89 f8                	mov    eax,edi
c00077e1:	89 fa                	mov    edx,edi
c00077e3:	80 e4 f7             	and    ah,0xf7
c00077e6:	80 ce 60             	or     dh,0x60
c00077e9:	89 c7                	mov    edi,eax
c00077eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077ef:	80 cc 60             	or     ah,0x60
c00077f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00077fa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007802:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007806:	83 c4 20             	add    esp,0x20
c0007809:	6a 00                	push   0x0
c000780b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000780f:	50                   	push   eax
c0007810:	e8 cf fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0007815:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007819:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000781d:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007822:	6a 00                	push   0x0
c0007824:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007828:	50                   	push   eax
c0007829:	e8 b6 fe ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c000782e:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007833:	83 c4 0c             	add    esp,0xc
c0007836:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783e:	53                   	push   ebx
c000783f:	e8 f0 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007844:	83 c4 0c             	add    esp,0xc
c0007847:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000784f:	53                   	push   ebx
c0007850:	e8 df fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007855:	83 c4 0c             	add    esp,0xc
c0007858:	57                   	push   edi
c0007859:	56                   	push   esi
c000785a:	53                   	push   ebx
c000785b:	e8 d4 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007860:	83 c4 0c             	add    esp,0xc
c0007863:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007867:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000786b:	53                   	push   ebx
c000786c:	e8 c3 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007871:	83 c4 0c             	add    esp,0xc
c0007874:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007878:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000787c:	53                   	push   ebx
c000787d:	e8 b2 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007882:	83 c4 0c             	add    esp,0xc
c0007885:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007889:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788d:	53                   	push   ebx
c000788e:	e8 a1 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c0007893:	83 c4 0c             	add    esp,0xc
c0007896:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000789e:	53                   	push   ebx
c000789f:	e8 90 fe ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c00078a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078a7:	e8 b2 fe ff ff       	call   c000775e <GDT::flush()>
c00078ac:	83 c4 40             	add    esp,0x40
c00078af:	5b                   	pop    ebx
c00078b0:	5e                   	pop    esi
c00078b1:	5f                   	pop    edi
c00078b2:	c3                   	ret    

c00078b3 <idleFunction(void*)>:
c00078b3:	83 ec 0c             	sub    esp,0xc
c00078b6:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00078bb:	48                   	dec    eax
c00078bc:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00078c1:	75 01                	jne    c00078c4 <idleFunction(void*)+0x11>
c00078c3:	fb                   	sti    
c00078c4:	f4                   	hlt    
c00078c5:	e8 58 4b 01 00       	call   c001c422 <idleCommon()>
c00078ca:	eb f8                	jmp    c00078c4 <idleFunction(void*)+0x11>

c00078cc <IDTEntry::IDTEntry(bool)>:
c00078cc:	83 ec 04             	sub    esp,0x4
c00078cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078d3:	88 04 24             	mov    BYTE PTR [esp],al
c00078d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078da:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078e4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078ef:	83 e2 f0             	and    edx,0xfffffff0
c00078f2:	83 ca 0e             	or     edx,0xe
c00078f5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078fc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078ff:	83 e2 ef             	and    edx,0xffffffef
c0007902:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007905:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007909:	74 05                	je     c0007910 <IDTEntry::IDTEntry(bool)+0x44>
c000790b:	b2 03                	mov    dl,0x3
c000790d:	eb 05                	jmp    c0007914 <IDTEntry::IDTEntry(bool)+0x48>
c000790f:	90                   	nop
c0007910:	b2 00                	mov    dl,0x0
c0007912:	66 90                	xchg   ax,ax
c0007914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007918:	83 e2 03             	and    edx,0x3
c000791b:	88 d1                	mov    cl,dl
c000791d:	c1 e1 05             	shl    ecx,0x5
c0007920:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007923:	83 e2 9f             	and    edx,0xffffff9f
c0007926:	09 ca                	or     edx,ecx
c0007928:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000792b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000792f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007932:	83 ca 80             	or     edx,0xffffff80
c0007935:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007938:	90                   	nop
c0007939:	83 c4 04             	add    esp,0x4
c000793c:	c3                   	ret    
c000793d:	90                   	nop

c000793e <IDTEntry::setOffset(unsigned int)>:
c000793e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007942:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007946:	66 89 02             	mov    WORD PTR [edx],ax
c0007949:	c1 e8 10             	shr    eax,0x10
c000794c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007950:	c3                   	ret    
c0007951:	90                   	nop
c0007952:	66 90                	xchg   ax,ax

c0007954 <IDT::IDT()>:
c0007954:	90                   	nop
c0007955:	c3                   	ret    

c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000795a:	83 c0 30             	add    eax,0x30
c000795d:	c3                   	ret    

c000795e <IDT::addEntry(IDTEntry, int)>:
c000795e:	53                   	push   ebx
c000795f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007963:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007967:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000796b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000796f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007972:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007976:	5b                   	pop    ebx
c0007977:	c3                   	ret    

c0007978 <IDT::addEntry(int, void (*)(), bool)>:
c0007978:	53                   	push   ebx
c0007979:	83 ec 10             	sub    esp,0x10
c000797c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007981:	50                   	push   eax
c0007982:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007986:	53                   	push   ebx
c0007987:	e8 40 ff ff ff       	call   c00078cc <IDTEntry::IDTEntry(bool)>
c000798c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007990:	53                   	push   ebx
c0007991:	e8 a8 ff ff ff       	call   c000793e <IDTEntry::setOffset(unsigned int)>
c0007996:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000799a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000799e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00079a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00079a6:	e8 b3 ff ff ff       	call   c000795e <IDT::addEntry(IDTEntry, int)>
c00079ab:	83 c4 30             	add    esp,0x30
c00079ae:	5b                   	pop    ebx
c00079af:	c3                   	ret    

c00079b0 <IDT::flush()>:
c00079b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079b4:	66 c7 05 48 09 02 c0 ff 07 	mov    WORD PTR ds:0xc0020948,0x7ff
c00079bd:	a3 4a 09 02 c0       	mov    ds:0xc002094a,eax
c00079c2:	0f 01 1d 48 09 02 c0 	lidtd  ds:0xc0020948
c00079c9:	c3                   	ret    

c00079ca <IDT::setup()>:
c00079ca:	57                   	push   edi
c00079cb:	56                   	push   esi
c00079cc:	53                   	push   ebx
c00079cd:	83 ec 10             	sub    esp,0x10
c00079d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079d4:	6a 00                	push   0x0
c00079d6:	68 30 bc 01 c0       	push   0xc001bc30
c00079db:	6a 00                	push   0x0
c00079dd:	53                   	push   ebx
c00079de:	e8 95 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c00079e3:	6a 00                	push   0x0
c00079e5:	68 40 bc 01 c0       	push   0xc001bc40
c00079ea:	6a 01                	push   0x1
c00079ec:	53                   	push   ebx
c00079ed:	e8 86 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	6a 00                	push   0x0
c00079f7:	68 4a bc 01 c0       	push   0xc001bc4a
c00079fc:	6a 02                	push   0x2
c00079fe:	53                   	push   ebx
c00079ff:	e8 74 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a04:	6a 00                	push   0x0
c0007a06:	68 54 bc 01 c0       	push   0xc001bc54
c0007a0b:	6a 03                	push   0x3
c0007a0d:	53                   	push   ebx
c0007a0e:	e8 65 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a13:	83 c4 20             	add    esp,0x20
c0007a16:	6a 00                	push   0x0
c0007a18:	68 5e bc 01 c0       	push   0xc001bc5e
c0007a1d:	6a 04                	push   0x4
c0007a1f:	53                   	push   ebx
c0007a20:	e8 53 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a25:	6a 00                	push   0x0
c0007a27:	68 68 bc 01 c0       	push   0xc001bc68
c0007a2c:	6a 05                	push   0x5
c0007a2e:	53                   	push   ebx
c0007a2f:	e8 44 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	6a 00                	push   0x0
c0007a39:	68 72 bc 01 c0       	push   0xc001bc72
c0007a3e:	6a 06                	push   0x6
c0007a40:	53                   	push   ebx
c0007a41:	e8 32 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a46:	6a 00                	push   0x0
c0007a48:	68 7c bc 01 c0       	push   0xc001bc7c
c0007a4d:	6a 07                	push   0x7
c0007a4f:	53                   	push   ebx
c0007a50:	e8 23 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a55:	83 c4 20             	add    esp,0x20
c0007a58:	6a 00                	push   0x0
c0007a5a:	68 86 bc 01 c0       	push   0xc001bc86
c0007a5f:	6a 08                	push   0x8
c0007a61:	53                   	push   ebx
c0007a62:	e8 11 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a67:	6a 00                	push   0x0
c0007a69:	68 8e bc 01 c0       	push   0xc001bc8e
c0007a6e:	6a 09                	push   0x9
c0007a70:	53                   	push   ebx
c0007a71:	e8 02 ff ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	6a 00                	push   0x0
c0007a7b:	68 98 bc 01 c0       	push   0xc001bc98
c0007a80:	6a 0a                	push   0xa
c0007a82:	53                   	push   ebx
c0007a83:	e8 f0 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a88:	6a 00                	push   0x0
c0007a8a:	68 a0 bc 01 c0       	push   0xc001bca0
c0007a8f:	6a 0b                	push   0xb
c0007a91:	53                   	push   ebx
c0007a92:	e8 e1 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007a97:	83 c4 20             	add    esp,0x20
c0007a9a:	6a 00                	push   0x0
c0007a9c:	68 a8 bc 01 c0       	push   0xc001bca8
c0007aa1:	6a 0c                	push   0xc
c0007aa3:	53                   	push   ebx
c0007aa4:	e8 cf fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aa9:	6a 00                	push   0x0
c0007aab:	68 b0 bc 01 c0       	push   0xc001bcb0
c0007ab0:	6a 0d                	push   0xd
c0007ab2:	53                   	push   ebx
c0007ab3:	e8 c0 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ab8:	83 c4 20             	add    esp,0x20
c0007abb:	6a 00                	push   0x0
c0007abd:	68 b8 bc 01 c0       	push   0xc001bcb8
c0007ac2:	6a 0e                	push   0xe
c0007ac4:	53                   	push   ebx
c0007ac5:	e8 ae fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aca:	6a 00                	push   0x0
c0007acc:	68 c0 bc 01 c0       	push   0xc001bcc0
c0007ad1:	6a 0f                	push   0xf
c0007ad3:	53                   	push   ebx
c0007ad4:	e8 9f fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ad9:	83 c4 20             	add    esp,0x20
c0007adc:	6a 00                	push   0x0
c0007ade:	68 ca bc 01 c0       	push   0xc001bcca
c0007ae3:	6a 10                	push   0x10
c0007ae5:	53                   	push   ebx
c0007ae6:	e8 8d fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007aeb:	6a 00                	push   0x0
c0007aed:	68 d4 bc 01 c0       	push   0xc001bcd4
c0007af2:	6a 11                	push   0x11
c0007af4:	53                   	push   ebx
c0007af5:	e8 7e fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007afa:	83 c4 20             	add    esp,0x20
c0007afd:	6a 00                	push   0x0
c0007aff:	68 de bc 01 c0       	push   0xc001bcde
c0007b04:	6a 12                	push   0x12
c0007b06:	53                   	push   ebx
c0007b07:	e8 6c fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b0c:	6a 01                	push   0x1
c0007b0e:	68 78 bd 01 c0       	push   0xc001bd78
c0007b13:	6a 60                	push   0x60
c0007b15:	53                   	push   ebx
c0007b16:	e8 5d fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b1b:	83 c4 20             	add    esp,0x20
c0007b1e:	6a 00                	push   0x0
c0007b20:	68 7f bd 01 c0       	push   0xc001bd7f
c0007b25:	6a 20                	push   0x20
c0007b27:	53                   	push   ebx
c0007b28:	e8 4b fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b2d:	6a 00                	push   0x0
c0007b2f:	68 6a bd 01 c0       	push   0xc001bd6a
c0007b34:	6a 21                	push   0x21
c0007b36:	53                   	push   ebx
c0007b37:	e8 3c fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b3c:	83 c4 20             	add    esp,0x20
c0007b3f:	6a 00                	push   0x0
c0007b41:	68 71 bd 01 c0       	push   0xc001bd71
c0007b46:	6a 22                	push   0x22
c0007b48:	53                   	push   ebx
c0007b49:	e8 2a fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b4e:	6a 00                	push   0x0
c0007b50:	68 e8 bc 01 c0       	push   0xc001bce8
c0007b55:	6a 23                	push   0x23
c0007b57:	53                   	push   ebx
c0007b58:	e8 1b fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b5d:	83 c4 20             	add    esp,0x20
c0007b60:	6a 00                	push   0x0
c0007b62:	68 f2 bc 01 c0       	push   0xc001bcf2
c0007b67:	6a 24                	push   0x24
c0007b69:	53                   	push   ebx
c0007b6a:	e8 09 fe ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b6f:	6a 00                	push   0x0
c0007b71:	68 fc bc 01 c0       	push   0xc001bcfc
c0007b76:	6a 25                	push   0x25
c0007b78:	53                   	push   ebx
c0007b79:	e8 fa fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b7e:	83 c4 20             	add    esp,0x20
c0007b81:	6a 00                	push   0x0
c0007b83:	68 06 bd 01 c0       	push   0xc001bd06
c0007b88:	6a 26                	push   0x26
c0007b8a:	53                   	push   ebx
c0007b8b:	e8 e8 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b90:	6a 00                	push   0x0
c0007b92:	68 10 bd 01 c0       	push   0xc001bd10
c0007b97:	6a 27                	push   0x27
c0007b99:	53                   	push   ebx
c0007b9a:	e8 d9 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007b9f:	83 c4 20             	add    esp,0x20
c0007ba2:	6a 00                	push   0x0
c0007ba4:	68 1a bd 01 c0       	push   0xc001bd1a
c0007ba9:	6a 28                	push   0x28
c0007bab:	53                   	push   ebx
c0007bac:	e8 c7 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bb1:	6a 00                	push   0x0
c0007bb3:	68 24 bd 01 c0       	push   0xc001bd24
c0007bb8:	6a 29                	push   0x29
c0007bba:	53                   	push   ebx
c0007bbb:	e8 b8 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bc0:	83 c4 20             	add    esp,0x20
c0007bc3:	6a 00                	push   0x0
c0007bc5:	68 2e bd 01 c0       	push   0xc001bd2e
c0007bca:	6a 2a                	push   0x2a
c0007bcc:	53                   	push   ebx
c0007bcd:	e8 a6 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bd2:	6a 00                	push   0x0
c0007bd4:	68 38 bd 01 c0       	push   0xc001bd38
c0007bd9:	6a 2b                	push   0x2b
c0007bdb:	53                   	push   ebx
c0007bdc:	e8 97 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007be1:	83 c4 20             	add    esp,0x20
c0007be4:	6a 00                	push   0x0
c0007be6:	68 42 bd 01 c0       	push   0xc001bd42
c0007beb:	6a 2c                	push   0x2c
c0007bed:	53                   	push   ebx
c0007bee:	e8 85 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007bf3:	6a 00                	push   0x0
c0007bf5:	68 4c bd 01 c0       	push   0xc001bd4c
c0007bfa:	6a 2d                	push   0x2d
c0007bfc:	53                   	push   ebx
c0007bfd:	e8 76 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c02:	83 c4 20             	add    esp,0x20
c0007c05:	6a 00                	push   0x0
c0007c07:	68 56 bd 01 c0       	push   0xc001bd56
c0007c0c:	6a 2e                	push   0x2e
c0007c0e:	53                   	push   ebx
c0007c0f:	e8 64 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c14:	6a 00                	push   0x0
c0007c16:	68 60 bd 01 c0       	push   0xc001bd60
c0007c1b:	6a 2f                	push   0x2f
c0007c1d:	53                   	push   ebx
c0007c1e:	e8 55 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c23:	83 c4 20             	add    esp,0x20
c0007c26:	6a 00                	push   0x0
c0007c28:	68 b6 bd 01 c0       	push   0xc001bdb6
c0007c2d:	6a 30                	push   0x30
c0007c2f:	53                   	push   ebx
c0007c30:	e8 43 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c35:	6a 00                	push   0x0
c0007c37:	68 c0 bd 01 c0       	push   0xc001bdc0
c0007c3c:	6a 31                	push   0x31
c0007c3e:	53                   	push   ebx
c0007c3f:	e8 34 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c44:	83 c4 20             	add    esp,0x20
c0007c47:	6a 00                	push   0x0
c0007c49:	68 ca bd 01 c0       	push   0xc001bdca
c0007c4e:	6a 32                	push   0x32
c0007c50:	53                   	push   ebx
c0007c51:	e8 22 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c56:	6a 00                	push   0x0
c0007c58:	68 d4 bd 01 c0       	push   0xc001bdd4
c0007c5d:	6a 33                	push   0x33
c0007c5f:	53                   	push   ebx
c0007c60:	e8 13 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c65:	83 c4 20             	add    esp,0x20
c0007c68:	6a 00                	push   0x0
c0007c6a:	68 de bd 01 c0       	push   0xc001bdde
c0007c6f:	6a 34                	push   0x34
c0007c71:	53                   	push   ebx
c0007c72:	e8 01 fd ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c77:	6a 00                	push   0x0
c0007c79:	68 e8 bd 01 c0       	push   0xc001bde8
c0007c7e:	6a 35                	push   0x35
c0007c80:	53                   	push   ebx
c0007c81:	e8 f2 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c86:	83 c4 20             	add    esp,0x20
c0007c89:	6a 00                	push   0x0
c0007c8b:	68 f2 bd 01 c0       	push   0xc001bdf2
c0007c90:	6a 36                	push   0x36
c0007c92:	53                   	push   ebx
c0007c93:	e8 e0 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007c98:	6a 00                	push   0x0
c0007c9a:	68 fc bd 01 c0       	push   0xc001bdfc
c0007c9f:	6a 37                	push   0x37
c0007ca1:	53                   	push   ebx
c0007ca2:	e8 d1 fc ff ff       	call   c0007978 <IDT::addEntry(int, void (*)(), bool)>
c0007ca7:	83 c4 1c             	add    esp,0x1c
c0007caa:	6a 03                	push   0x3
c0007cac:	6a 02                	push   0x2
c0007cae:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007cb4:	e8 75 24 00 00       	call   c000a12e <VAS::allocatePages(int, int)>
c0007cb9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cc0:	89 c6                	mov    esi,eax
c0007cc2:	e8 92 01 00 00       	call   c0007e59 <malloc>
c0007cc7:	81 c6 00 20 00 00    	add    esi,0x2000
c0007ccd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cd0:	89 c7                	mov    edi,eax
c0007cd2:	e8 01 16 00 00       	call   c00092d8 <TSS::TSS()>
c0007cd7:	83 c4 0c             	add    esp,0xc
c0007cda:	68 86 bc 01 c0       	push   0xc001bc86
c0007cdf:	56                   	push   esi
c0007ce0:	57                   	push   edi
c0007ce1:	e8 36 16 00 00       	call   c000931c <TSS::setup(unsigned long, unsigned long)>
c0007ce6:	89 c6                	mov    esi,eax
c0007ce8:	58                   	pop    eax
c0007ce9:	5a                   	pop    edx
c0007cea:	6a 00                	push   0x0
c0007cec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007cf0:	50                   	push   eax
c0007cf1:	e8 d6 fb ff ff       	call   c00078cc <IDTEntry::IDTEntry(bool)>
c0007cf6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cfa:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007cff:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007d06:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d10:	80 ce 05             	or     dh,0x5
c0007d13:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d1e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d24:	e8 87 fc ff ff       	call   c00079b0 <IDT::flush()>
c0007d29:	83 c4 20             	add    esp,0x20
c0007d2c:	5b                   	pop    ebx
c0007d2d:	5e                   	pop    esi
c0007d2e:	5f                   	pop    edi
c0007d2f:	c3                   	ret    

c0007d30 <sbrk>:
c0007d30:	55                   	push   ebp
c0007d31:	57                   	push   edi
c0007d32:	56                   	push   esi
c0007d33:	53                   	push   ebx
c0007d34:	83 ec 1c             	sub    esp,0x1c
c0007d37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d3b:	85 c0                	test   eax,eax
c0007d3d:	74 5f                	je     c0007d9e <sbrk+0x6e>
c0007d3f:	78 64                	js     c0007da5 <sbrk+0x75>
c0007d41:	8b 15 bc f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f6bc
c0007d47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d4b:	05 ff 0f 00 00       	add    eax,0xfff
c0007d50:	89 c5                	mov    ebp,eax
c0007d52:	78 69                	js     c0007dbd <sbrk+0x8d>
c0007d54:	c1 fd 0c             	sar    ebp,0xc
c0007d57:	bb 00 00 00 00       	mov    ebx,0x0
c0007d5c:	8b 35 30 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a30
c0007d62:	8b 3d bc f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f6bc
c0007d68:	e8 b9 04 00 00       	call   c0008226 <Phys::allocatePage()>
c0007d6d:	68 01 04 00 00       	push   0x401
c0007d72:	57                   	push   edi
c0007d73:	50                   	push   eax
c0007d74:	56                   	push   esi
c0007d75:	e8 b0 22 00 00       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d7a:	81 05 bc f6 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f6bc,0x1000
c0007d84:	43                   	inc    ebx
c0007d85:	83 c4 10             	add    esp,0x10
c0007d88:	39 dd                	cmp    ebp,ebx
c0007d8a:	75 d0                	jne    c0007d5c <sbrk+0x2c>
c0007d8c:	0f 20 d8             	mov    eax,cr3
c0007d8f:	0f 22 d8             	mov    cr3,eax
c0007d92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d96:	83 c4 1c             	add    esp,0x1c
c0007d99:	5b                   	pop    ebx
c0007d9a:	5e                   	pop    esi
c0007d9b:	5f                   	pop    edi
c0007d9c:	5d                   	pop    ebp
c0007d9d:	c3                   	ret    
c0007d9e:	a1 bc f6 01 c0       	mov    eax,ds:0xc001f6bc
c0007da3:	eb f1                	jmp    c0007d96 <sbrk+0x66>
c0007da5:	83 ec 08             	sub    esp,0x8
c0007da8:	50                   	push   eax
c0007da9:	68 04 d7 01 c0       	push   0xc001d704
c0007dae:	e8 35 2e 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007db3:	83 c4 10             	add    esp,0x10
c0007db6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007dbb:	eb d9                	jmp    c0007d96 <sbrk+0x66>
c0007dbd:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dc3:	eb 8f                	jmp    c0007d54 <sbrk+0x24>

c0007dc5 <mmap>:
c0007dc5:	83 ec 18             	sub    esp,0x18
c0007dc8:	68 34 d7 01 c0       	push   0xc001d734
c0007dcd:	e8 01 89 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0007dd2:	b8 00 00 00 00       	mov    eax,0x0
c0007dd7:	83 c4 1c             	add    esp,0x1c
c0007dda:	c3                   	ret    

c0007ddb <munmap>:
c0007ddb:	83 ec 18             	sub    esp,0x18
c0007dde:	68 39 d7 01 c0       	push   0xc001d739
c0007de3:	e8 eb 88 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0007de8:	b8 00 00 00 00       	mov    eax,0x0
c0007ded:	83 c4 1c             	add    esp,0x1c
c0007df0:	c3                   	ret    

c0007df1 <liballoc_lock()>:
c0007df1:	fa                   	cli    
c0007df2:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0007df8:	b8 00 00 00 00       	mov    eax,0x0
c0007dfd:	c3                   	ret    

c0007dfe <liballoc_unlock()>:
c0007dfe:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0007e03:	48                   	dec    eax
c0007e04:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0007e09:	75 01                	jne    c0007e0c <liballoc_unlock()+0xe>
c0007e0b:	fb                   	sti    
c0007e0c:	b8 00 00 00 00       	mov    eax,0x0
c0007e11:	c3                   	ret    

c0007e12 <liballoc_alloc(int)>:
c0007e12:	83 ec 10             	sub    esp,0x10
c0007e15:	6a 01                	push   0x1
c0007e17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e1b:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007e21:	e8 08 23 00 00       	call   c000a12e <VAS::allocatePages(int, int)>
c0007e26:	83 c4 1c             	add    esp,0x1c
c0007e29:	c3                   	ret    

c0007e2a <liballoc_free(void*, int)>:
c0007e2a:	83 ec 14             	sub    esp,0x14
c0007e2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e31:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007e37:	e8 ae 1f 00 00       	call   c0009dea <VAS::freeAllocatedPages(unsigned long)>
c0007e3c:	b8 00 00 00 00       	mov    eax,0x0
c0007e41:	83 c4 1c             	add    esp,0x1c
c0007e44:	c3                   	ret    

c0007e45 <realloc>:
c0007e45:	83 ec 14             	sub    esp,0x14
c0007e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e50:	e8 fc 96 ff ff       	call   c0001551 <dlrealloc>
c0007e55:	83 c4 1c             	add    esp,0x1c
c0007e58:	c3                   	ret    

c0007e59 <malloc>:
c0007e59:	83 ec 18             	sub    esp,0x18
c0007e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e60:	e8 af 91 ff ff       	call   c0001014 <dlmalloc>
c0007e65:	83 c4 1c             	add    esp,0x1c
c0007e68:	c3                   	ret    

c0007e69 <free>:
c0007e69:	83 ec 18             	sub    esp,0x18
c0007e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e70:	e8 44 8e ff ff       	call   c0000cb9 <dlfree>
c0007e75:	83 c4 1c             	add    esp,0x1c
c0007e78:	c3                   	ret    

c0007e79 <rfree>:
c0007e79:	83 ec 18             	sub    esp,0x18
c0007e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e80:	e8 34 8e ff ff       	call   c0000cb9 <dlfree>
c0007e85:	83 c4 1c             	add    esp,0x1c
c0007e88:	c3                   	ret    

c0007e89 <calloc>:
c0007e89:	56                   	push   esi
c0007e8a:	53                   	push   ebx
c0007e8b:	83 ec 10             	sub    esp,0x10
c0007e8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e92:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e97:	53                   	push   ebx
c0007e98:	e8 bc ff ff ff       	call   c0007e59 <malloc>
c0007e9d:	89 c6                	mov    esi,eax
c0007e9f:	83 c4 0c             	add    esp,0xc
c0007ea2:	53                   	push   ebx
c0007ea3:	6a 00                	push   0x0
c0007ea5:	50                   	push   eax
c0007ea6:	e8 45 86 ff ff       	call   c00004f0 <memset>
c0007eab:	89 f0                	mov    eax,esi
c0007ead:	83 c4 14             	add    esp,0x14
c0007eb0:	5b                   	pop    ebx
c0007eb1:	5e                   	pop    esi
c0007eb2:	c3                   	ret    

c0007eb3 <Krnl::setBootMessage(char const*)>:
c0007eb3:	57                   	push   edi
c0007eb4:	56                   	push   esi
c0007eb5:	53                   	push   ebx
c0007eb6:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007ebc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007ec3:	68 9e 00 00 00       	push   0x9e
c0007ec8:	6a 00                	push   0x0
c0007eca:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007ece:	56                   	push   esi
c0007ecf:	e8 1c 86 ff ff       	call   c00004f0 <memset>
c0007ed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ed7:	e8 84 86 ff ff       	call   c0000560 <strlen>
c0007edc:	ba 50 00 00 00       	mov    edx,0x50
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	29 c2                	sub    edx,eax
c0007ee6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007eea:	d1 ea                	shr    edx,1
c0007eec:	84 c0                	test   al,al
c0007eee:	74 19                	je     c0007f09 <Krnl::setBootMessage(char const*)+0x56>
c0007ef0:	01 d2                	add    edx,edx
c0007ef2:	43                   	inc    ebx
c0007ef3:	01 f2                	add    edx,esi
c0007ef5:	80 cc 0f             	or     ah,0xf
c0007ef8:	83 c2 02             	add    edx,0x2
c0007efb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007eff:	43                   	inc    ebx
c0007f00:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007f05:	84 c0                	test   al,al
c0007f07:	75 ec                	jne    c0007ef5 <Krnl::setBootMessage(char const*)+0x42>
c0007f09:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007f0e:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007f13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f15:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007f1b:	5b                   	pop    ebx
c0007f1c:	5e                   	pop    esi
c0007f1d:	5f                   	pop    edi
c0007f1e:	c3                   	ret    

c0007f1f <kernel_main>:
c0007f1f:	55                   	push   ebp
c0007f20:	57                   	push   edi
c0007f21:	bf f9 03 00 00       	mov    edi,0x3f9
c0007f26:	56                   	push   esi
c0007f27:	89 fa                	mov    edx,edi
c0007f29:	53                   	push   ebx
c0007f2a:	31 f6                	xor    esi,esi
c0007f2c:	83 ec 38             	sub    esp,0x38
c0007f2f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007f34:	a3 50 09 02 c0       	mov    ds:0xc0020950,eax
c0007f39:	89 f0                	mov    eax,esi
c0007f3b:	ee                   	out    dx,al
c0007f3c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f41:	b0 80                	mov    al,0x80
c0007f43:	89 da                	mov    edx,ebx
c0007f45:	ee                   	out    dx,al
c0007f46:	b1 03                	mov    cl,0x3
c0007f48:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f4d:	88 c8                	mov    al,cl
c0007f4f:	ee                   	out    dx,al
c0007f50:	89 f0                	mov    eax,esi
c0007f52:	89 fa                	mov    edx,edi
c0007f54:	ee                   	out    dx,al
c0007f55:	88 c8                	mov    al,cl
c0007f57:	89 da                	mov    edx,ebx
c0007f59:	ee                   	out    dx,al
c0007f5a:	b0 c7                	mov    al,0xc7
c0007f5c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f61:	ee                   	out    dx,al
c0007f62:	b0 0b                	mov    al,0xb
c0007f64:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f69:	ee                   	out    dx,al
c0007f6a:	68 40 d7 01 c0       	push   0xc001d740
c0007f6f:	e8 74 2c 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0007f74:	0f be 05 c0 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f6c0
c0007f7b:	83 c4 10             	add    esp,0x10
c0007f7e:	84 c0                	test   al,al
c0007f80:	74 5c                	je     c0007fde <kernel_main+0xbf>
c0007f82:	31 db                	xor    ebx,ebx
c0007f84:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f89:	bf 05 00 00 00       	mov    edi,0x5
c0007f8e:	31 f6                	xor    esi,esi
c0007f90:	eb 14                	jmp    c0007fa6 <kernel_main+0x87>
c0007f92:	47                   	inc    edi
c0007f93:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f98:	31 f6                	xor    esi,esi
c0007f9a:	43                   	inc    ebx
c0007f9b:	0f be 83 c0 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0940]
c0007fa2:	84 c0                	test   al,al
c0007fa4:	74 38                	je     c0007fde <kernel_main+0xbf>
c0007fa6:	80 be f6 f6 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe090a],0xdb
c0007fad:	0f 84 97 00 00 00    	je     c000804a <kernel_main+0x12b>
c0007fb3:	3c 0d                	cmp    al,0xd
c0007fb5:	74 e3                	je     c0007f9a <kernel_main+0x7b>
c0007fb7:	3c 0a                	cmp    al,0xa
c0007fb9:	74 d7                	je     c0007f92 <kernel_main+0x73>
c0007fbb:	83 ec 0c             	sub    esp,0xc
c0007fbe:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007fc2:	57                   	push   edi
c0007fc3:	43                   	inc    ebx
c0007fc4:	52                   	push   edx
c0007fc5:	46                   	inc    esi
c0007fc6:	6a 00                	push   0x0
c0007fc8:	6a 0e                	push   0xe
c0007fca:	50                   	push   eax
c0007fcb:	e8 60 e4 00 00       	call   c0016430 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007fd0:	83 c4 20             	add    esp,0x20
c0007fd3:	0f be 83 c0 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0940]
c0007fda:	84 c0                	test   al,al
c0007fdc:	75 c8                	jne    c0007fa6 <kernel_main+0x87>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007fe6:	05 ff 0f 00 00       	add    eax,0xfff
c0007feb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ff0:	50                   	push   eax
c0007ff1:	e8 82 03 00 00       	call   c0008378 <Phys::physicalMemorySetup(unsigned int)>
c0007ff6:	e8 59 1b 00 00       	call   c0009b54 <Virt::virtualMemorySetup()>
c0007ffb:	58                   	pop    eax
c0007ffc:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0008000:	53                   	push   ebx
c0008001:	e8 0a 1c 00 00       	call   c0009c10 <VAS::VAS()>
c0008006:	89 1d 30 0a 02 c0    	mov    DWORD PTR ds:0xc0020a30,ebx
c000800c:	e8 0f 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0008011:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0008018:	e8 3c fe ff ff       	call   c0007e59 <malloc>
c000801d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008020:	89 c6                	mov    esi,eax
c0008022:	e8 af f1 ff ff       	call   c00071d6 <Computer::Computer()>
c0008027:	6a 00                	push   0x0
c0008029:	89 35 38 09 02 c0    	mov    DWORD PTR ds:0xc0020938,esi
c000802f:	6a 00                	push   0x0
c0008031:	6a 00                	push   0x0
c0008033:	56                   	push   esi
c0008034:	e8 43 f5 ff ff       	call   c000757c <Computer::open(int, int, void*)>
c0008039:	83 c4 14             	add    esp,0x14
c000803c:	53                   	push   ebx
c000803d:	e8 84 1e 00 00       	call   c0009ec6 <VAS::~VAS()>
c0008042:	83 c4 3c             	add    esp,0x3c
c0008045:	5b                   	pop    ebx
c0008046:	5e                   	pop    esi
c0008047:	5f                   	pop    edi
c0008048:	5d                   	pop    ebp
c0008049:	c3                   	ret    
c000804a:	31 d2                	xor    edx,edx
c000804c:	8a 96 f5 f6 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe090b]
c0008052:	83 e2 fe             	and    edx,0xfffffffe
c0008055:	81 fa ba 00 00 00    	cmp    edx,0xba
c000805b:	0f 85 52 ff ff ff    	jne    c0007fb3 <kernel_main+0x94>
c0008061:	45                   	inc    ebp
c0008062:	e9 4c ff ff ff       	jmp    c0007fb3 <kernel_main+0x94>

c0008067 <Phys::allocateDMA(unsigned long)>:
c0008067:	55                   	push   ebp
c0008068:	31 ed                	xor    ebp,ebp
c000806a:	57                   	push   edi
c000806b:	56                   	push   esi
c000806c:	53                   	push   ebx
c000806d:	31 db                	xor    ebx,ebx
c000806f:	83 ec 1c             	sub    esp,0x1c
c0008072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008076:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000807e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0008084:	31 c0                	xor    eax,eax
c0008086:	c1 ef 0c             	shr    edi,0xc
c0008089:	eb 19                	jmp    c00080a4 <Phys::allocateDMA(unsigned long)+0x3d>
c000808b:	85 c0                	test   eax,eax
c000808d:	75 06                	jne    c0008095 <Phys::allocateDMA(unsigned long)+0x2e>
c000808f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008093:	89 dd                	mov    ebp,ebx
c0008095:	8d 70 01             	lea    esi,[eax+0x1]
c0008098:	39 f7                	cmp    edi,esi
c000809a:	74 33                	je     c00080cf <Phys::allocateDMA(unsigned long)+0x68>
c000809c:	89 f0                	mov    eax,esi
c000809e:	43                   	inc    ebx
c000809f:	83 fb 0f             	cmp    ebx,0xf
c00080a2:	7f 11                	jg     c00080b5 <Phys::allocateDMA(unsigned long)+0x4e>
c00080a4:	80 bb 6c 09 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf694],0x0
c00080ab:	74 de                	je     c000808b <Phys::allocateDMA(unsigned long)+0x24>
c00080ad:	31 c0                	xor    eax,eax
c00080af:	43                   	inc    ebx
c00080b0:	83 fb 0f             	cmp    ebx,0xf
c00080b3:	7e ef                	jle    c00080a4 <Phys::allocateDMA(unsigned long)+0x3d>
c00080b5:	83 ec 0c             	sub    esp,0xc
c00080b8:	68 58 d7 01 c0       	push   0xc001d758
c00080bd:	e8 11 86 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c00080c2:	83 c4 10             	add    esp,0x10
c00080c5:	31 c0                	xor    eax,eax
c00080c7:	83 c4 1c             	add    esp,0x1c
c00080ca:	5b                   	pop    ebx
c00080cb:	5e                   	pop    esi
c00080cc:	5f                   	pop    edi
c00080cd:	5d                   	pop    ebp
c00080ce:	c3                   	ret    
c00080cf:	89 e9                	mov    ecx,ebp
c00080d1:	c1 f9 04             	sar    ecx,0x4
c00080d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00080d8:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00080dc:	89 ca                	mov    edx,ecx
c00080de:	4a                   	dec    edx
c00080df:	79 03                	jns    c00080e4 <Phys::allocateDMA(unsigned long)+0x7d>
c00080e1:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080e4:	c1 fa 04             	sar    edx,0x4
c00080e7:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080eb:	74 08                	je     c00080f5 <Phys::allocateDMA(unsigned long)+0x8e>
c00080ed:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00080f1:	31 c0                	xor    eax,eax
c00080f3:	eb ba                	jmp    c00080af <Phys::allocateDMA(unsigned long)+0x48>
c00080f5:	85 f6                	test   esi,esi
c00080f7:	74 15                	je     c000810e <Phys::allocateDMA(unsigned long)+0xa7>
c00080f9:	8d 95 6c 09 02 c0    	lea    edx,[ebp-0x3ffdf694]
c00080ff:	8d 84 05 6d 09 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf693]
c0008106:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0008109:	42                   	inc    edx
c000810a:	39 d0                	cmp    eax,edx
c000810c:	75 f8                	jne    c0008106 <Phys::allocateDMA(unsigned long)+0x9f>
c000810e:	01 3d 64 09 02 c0    	add    DWORD PTR ds:0xc0020964,edi
c0008114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008118:	85 c0                	test   eax,eax
c000811a:	74 17                	je     c0008133 <Phys::allocateDMA(unsigned long)+0xcc>
c000811c:	83 ec 0c             	sub    esp,0xc
c000811f:	68 58 d7 01 c0       	push   0xc001d758
c0008124:	e8 aa 85 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0008129:	83 c4 10             	add    esp,0x10
c000812c:	89 f0                	mov    eax,esi
c000812e:	e9 6b ff ff ff       	jmp    c000809e <Phys::allocateDMA(unsigned long)+0x37>
c0008133:	c1 e5 0c             	shl    ebp,0xc
c0008136:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000813c:	eb 89                	jmp    c00080c7 <Phys::allocateDMA(unsigned long)+0x60>

c000813e <Phys::freeDMA(unsigned long, unsigned long)>:
c000813e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008142:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0008148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000814c:	c1 ea 0c             	shr    edx,0xc
c000814f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0008154:	29 15 64 09 02 c0    	sub    DWORD PTR ds:0xc0020964,edx
c000815a:	c1 e8 0c             	shr    eax,0xc
c000815d:	85 d2                	test   edx,edx
c000815f:	74 0f                	je     c0008170 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008161:	05 6c 09 02 c0       	add    eax,0xc002096c
c0008166:	01 c2                	add    edx,eax
c0008168:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000816b:	40                   	inc    eax
c000816c:	39 d0                	cmp    eax,edx
c000816e:	75 f8                	jne    c0008168 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008170:	c3                   	ret    

c0008171 <Phys::setPageState(unsigned long, bool)>:
c0008171:	56                   	push   esi
c0008172:	ba 01 00 00 00       	mov    edx,0x1
c0008177:	53                   	push   ebx
c0008178:	8b 35 04 f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f804
c000817e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008182:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008186:	89 c8                	mov    eax,ecx
c0008188:	83 e1 07             	and    ecx,0x7
c000818b:	c1 e8 03             	shr    eax,0x3
c000818e:	d3 e3                	shl    ebx,cl
c0008190:	01 c6                	add    esi,eax
c0008192:	d3 e2                	shl    edx,cl
c0008194:	f7 d2                	not    edx
c0008196:	20 16                	and    BYTE PTR [esi],dl
c0008198:	03 05 04 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f804
c000819e:	08 18                	or     BYTE PTR [eax],bl
c00081a0:	5b                   	pop    ebx
c00081a1:	5e                   	pop    esi
c00081a2:	c3                   	ret    

c00081a3 <Phys::getPageState(unsigned long)>:
c00081a3:	53                   	push   ebx
c00081a4:	8b 15 04 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f804
c00081aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081ae:	31 db                	xor    ebx,ebx
c00081b0:	89 c8                	mov    eax,ecx
c00081b2:	83 e1 07             	and    ecx,0x7
c00081b5:	c1 e8 03             	shr    eax,0x3
c00081b8:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00081bb:	89 d8                	mov    eax,ebx
c00081bd:	5b                   	pop    ebx
c00081be:	d3 f8                	sar    eax,cl
c00081c0:	83 e0 01             	and    eax,0x1
c00081c3:	c3                   	ret    

c00081c4 <Phys::freePage(unsigned long)>:
c00081c4:	53                   	push   ebx
c00081c5:	83 ec 08             	sub    esp,0x8
c00081c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081cc:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00081d2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00081d8:	76 3a                	jbe    c0008214 <Phys::freePage(unsigned long)+0x50>
c00081da:	c1 e8 0c             	shr    eax,0xc
c00081dd:	50                   	push   eax
c00081de:	89 c3                	mov    ebx,eax
c00081e0:	e8 be ff ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c00081e5:	5a                   	pop    edx
c00081e6:	84 c0                	test   al,al
c00081e8:	74 19                	je     c0008203 <Phys::freePage(unsigned long)+0x3f>
c00081ea:	83 ec 08             	sub    esp,0x8
c00081ed:	ff 0d 64 09 02 c0    	dec    DWORD PTR ds:0xc0020964
c00081f3:	6a 00                	push   0x0
c00081f5:	53                   	push   ebx
c00081f6:	e8 76 ff ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00081fb:	83 c4 10             	add    esp,0x10
c00081fe:	83 c4 08             	add    esp,0x8
c0008201:	5b                   	pop    ebx
c0008202:	c3                   	ret    
c0008203:	c7 44 24 10 fd d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7fd
c000820b:	83 c4 08             	add    esp,0x8
c000820e:	5b                   	pop    ebx
c000820f:	e9 bf 84 00 00       	jmp    c00106d3 <Krnl::panic(char const*)>
c0008214:	68 00 10 00 00       	push   0x1000
c0008219:	50                   	push   eax
c000821a:	e8 1f ff ff ff       	call   c000813e <Phys::freeDMA(unsigned long, unsigned long)>
c000821f:	59                   	pop    ecx
c0008220:	5b                   	pop    ebx
c0008221:	83 c4 08             	add    esp,0x8
c0008224:	5b                   	pop    ebx
c0008225:	c3                   	ret    

c0008226 <Phys::allocatePage()>:
c0008226:	56                   	push   esi
c0008227:	53                   	push   ebx
c0008228:	83 ec 14             	sub    esp,0x14
c000822b:	8b 35 58 09 02 c0    	mov    esi,DWORD PTR ds:0xc0020958
c0008231:	89 f3                	mov    ebx,esi
c0008233:	eb 0a                	jmp    c000823f <Phys::allocatePage()+0x19>
c0008235:	89 1d 58 09 02 c0    	mov    DWORD PTR ds:0xc0020958,ebx
c000823b:	39 de                	cmp    esi,ebx
c000823d:	74 24                	je     c0008263 <Phys::allocatePage()+0x3d>
c000823f:	53                   	push   ebx
c0008240:	e8 5e ff ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c0008245:	5a                   	pop    edx
c0008246:	84 c0                	test   al,al
c0008248:	74 5f                	je     c00082a9 <Phys::allocatePage()+0x83>
c000824a:	43                   	inc    ebx
c000824b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008251:	75 e2                	jne    c0008235 <Phys::allocatePage()+0xf>
c0008253:	31 db                	xor    ebx,ebx
c0008255:	c7 05 58 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020958,0x0
c000825f:	39 de                	cmp    esi,ebx
c0008261:	75 dc                	jne    c000823f <Phys::allocatePage()+0x19>
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	80 35 7c 09 02 c0 01 	xor    BYTE PTR ds:0xc002097c,0x1
c000826d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008272:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008275:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000827b:	50                   	push   eax
c000827c:	e8 87 26 00 00       	call   c000a908 <VAS::scanForEviction()>
c0008281:	83 c4 10             	add    esp,0x10
c0008284:	85 c0                	test   eax,eax
c0008286:	75 3f                	jne    c00082c7 <Phys::allocatePage()+0xa1>
c0008288:	83 ec 0c             	sub    esp,0xc
c000828b:	68 80 d7 01 c0       	push   0xc001d780
c0008290:	e8 3e 84 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0008295:	83 c4 10             	add    esp,0x10
c0008298:	8b 1d 58 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020958
c000829e:	53                   	push   ebx
c000829f:	e8 ff fe ff ff       	call   c00081a3 <Phys::getPageState(unsigned long)>
c00082a4:	5a                   	pop    edx
c00082a5:	84 c0                	test   al,al
c00082a7:	75 a1                	jne    c000824a <Phys::allocatePage()+0x24>
c00082a9:	6a 01                	push   0x1
c00082ab:	53                   	push   ebx
c00082ac:	e8 c0 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00082b1:	a1 58 09 02 c0       	mov    eax,ds:0xc0020958
c00082b6:	5a                   	pop    edx
c00082b7:	ff 05 64 09 02 c0    	inc    DWORD PTR ds:0xc0020964
c00082bd:	c1 e0 0c             	shl    eax,0xc
c00082c0:	59                   	pop    ecx
c00082c1:	83 c4 14             	add    esp,0x14
c00082c4:	5b                   	pop    ebx
c00082c5:	5e                   	pop    esi
c00082c6:	c3                   	ret    
c00082c7:	83 ec 08             	sub    esp,0x8
c00082ca:	89 c2                	mov    edx,eax
c00082cc:	6a 01                	push   0x1
c00082ce:	c1 ea 0c             	shr    edx,0xc
c00082d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082d5:	52                   	push   edx
c00082d6:	e8 96 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00082db:	83 c4 10             	add    esp,0x10
c00082de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e2:	eb dd                	jmp    c00082c1 <Phys::allocatePage()+0x9b>

c00082e4 <Phys::allocateContiguousPages(int)>:
c00082e4:	57                   	push   edi
c00082e5:	56                   	push   esi
c00082e6:	53                   	push   ebx
c00082e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082eb:	fa                   	cli    
c00082ec:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00082f2:	31 db                	xor    ebx,ebx
c00082f4:	85 db                	test   ebx,ebx
c00082f6:	75 11                	jne    c0008309 <Phys::allocateContiguousPages(int)+0x25>
c00082f8:	e8 29 ff ff ff       	call   c0008226 <Phys::allocatePage()>
c00082fd:	83 fe 01             	cmp    esi,0x1
c0008300:	89 c7                	mov    edi,eax
c0008302:	74 21                	je     c0008325 <Phys::allocateContiguousPages(int)+0x41>
c0008304:	bb 01 00 00 00       	mov    ebx,0x1
c0008309:	e8 18 ff ff ff       	call   c0008226 <Phys::allocatePage()>
c000830e:	89 da                	mov    edx,ebx
c0008310:	c1 e2 0c             	shl    edx,0xc
c0008313:	01 fa                	add    edx,edi
c0008315:	39 c2                	cmp    edx,eax
c0008317:	74 20                	je     c0008339 <Phys::allocateContiguousPages(int)+0x55>
c0008319:	bb 01 00 00 00       	mov    ebx,0x1
c000831e:	89 c7                	mov    edi,eax
c0008320:	83 fe 01             	cmp    esi,0x1
c0008323:	75 e4                	jne    c0008309 <Phys::allocateContiguousPages(int)+0x25>
c0008325:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000832a:	48                   	dec    eax
c000832b:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0008330:	75 01                	jne    c0008333 <Phys::allocateContiguousPages(int)+0x4f>
c0008332:	fb                   	sti    
c0008333:	89 f8                	mov    eax,edi
c0008335:	5b                   	pop    ebx
c0008336:	5e                   	pop    esi
c0008337:	5f                   	pop    edi
c0008338:	c3                   	ret    
c0008339:	43                   	inc    ebx
c000833a:	39 f3                	cmp    ebx,esi
c000833c:	75 b6                	jne    c00082f4 <Phys::allocateContiguousPages(int)+0x10>
c000833e:	eb e5                	jmp    c0008325 <Phys::allocateContiguousPages(int)+0x41>

c0008340 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008340:	56                   	push   esi
c0008341:	53                   	push   ebx
c0008342:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008346:	39 1d 5c 09 02 c0    	cmp    DWORD PTR ds:0xc002095c,ebx
c000834c:	73 06                	jae    c0008354 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000834e:	89 1d 5c 09 02 c0    	mov    DWORD PTR ds:0xc002095c,ebx
c0008354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008358:	c1 eb 0c             	shr    ebx,0xc
c000835b:	c1 e8 0c             	shr    eax,0xc
c000835e:	39 d8                	cmp    eax,ebx
c0008360:	73 13                	jae    c0008375 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0008362:	6a 00                	push   0x0
c0008364:	8d 70 01             	lea    esi,[eax+0x1]
c0008367:	50                   	push   eax
c0008368:	e8 04 fe ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000836d:	5a                   	pop    edx
c000836e:	89 f0                	mov    eax,esi
c0008370:	59                   	pop    ecx
c0008371:	39 f3                	cmp    ebx,esi
c0008373:	75 ed                	jne    c0008362 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0008375:	5b                   	pop    ebx
c0008376:	5e                   	pop    esi
c0008377:	c3                   	ret    

c0008378 <Phys::physicalMemorySetup(unsigned int)>:
c0008378:	55                   	push   ebp
c0008379:	57                   	push   edi
c000837a:	56                   	push   esi
c000837b:	53                   	push   ebx
c000837c:	31 db                	xor    ebx,ebx
c000837e:	83 ec 40             	sub    esp,0x40
c0008381:	6a 10                	push   0x10
c0008383:	6a 00                	push   0x0
c0008385:	68 6c 09 02 c0       	push   0xc002096c
c000838a:	e8 61 81 ff ff       	call   c00004f0 <memset>
c000838f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008393:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008398:	05 00 10 00 00       	add    eax,0x1000
c000839d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083a1:	5a                   	pop    edx
c00083a2:	59                   	pop    ecx
c00083a3:	50                   	push   eax
c00083a4:	68 13 d8 01 c0       	push   0xc001d813
c00083a9:	e8 3a 28 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00083ae:	83 c4 10             	add    esp,0x10
c00083b1:	83 ec 08             	sub    esp,0x8
c00083b4:	6a 01                	push   0x1
c00083b6:	53                   	push   ebx
c00083b7:	43                   	inc    ebx
c00083b8:	e8 b4 fd ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00083bd:	83 c4 10             	add    esp,0x10
c00083c0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00083c6:	75 e9                	jne    c00083b1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00083c8:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00083ce:	66 85 c0             	test   ax,ax
c00083d1:	0f 84 97 01 00 00    	je     c000856e <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00083d7:	89 c7                	mov    edi,eax
c00083d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083e1:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083e7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00083ec:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00083f0:	eb 15                	jmp    c0008407 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00083f2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00083f6:	83 c3 18             	add    ebx,0x18
c00083f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083fd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008401:	0f 84 77 01 00 00    	je     c000857e <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008407:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000840a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000840d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008410:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008414:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008418:	8b 33                	mov    esi,DWORD PTR [ebx]
c000841a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000841d:	01 f0                	add    eax,esi
c000841f:	55                   	push   ebp
c0008420:	11 fa                	adc    edx,edi
c0008422:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008426:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000842a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842e:	50                   	push   eax
c000842f:	56                   	push   esi
c0008430:	68 b0 d7 01 c0       	push   0xc001d7b0
c0008435:	e8 ae 27 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000843a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000843e:	83 c4 10             	add    esp,0x10
c0008441:	09 f8                	or     eax,edi
c0008443:	0f 85 35 01 00 00    	jne    c000857e <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008449:	4d                   	dec    ebp
c000844a:	75 a6                	jne    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000844c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008450:	ba 00 00 08 00       	mov    edx,0x80000
c0008455:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0008459:	39 f2                	cmp    edx,esi
c000845b:	89 c1                	mov    ecx,eax
c000845d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0008465:	19 f9                	sbb    ecx,edi
c0008467:	0f 82 a7 00 00 00    	jb     c0008514 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000846d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008471:	89 c1                	mov    ecx,eax
c0008473:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008477:	0f 83 97 00 00 00    	jae    c0008514 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000847d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008482:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008486:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000848a:	39 fa                	cmp    edx,edi
c000848c:	19 e8                	sbb    eax,ebp
c000848e:	0f 82 9a 01 00 00    	jb     c000862e <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0008494:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008498:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000849c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00084a2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00084a7:	83 d5 ff             	adc    ebp,0xffffffff
c00084aa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00084ae:	31 c0                	xor    eax,eax
c00084b0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00084b4:	39 fa                	cmp    edx,edi
c00084b6:	89 c1                	mov    ecx,eax
c00084b8:	19 e9                	sbb    ecx,ebp
c00084ba:	0f 83 32 ff ff ff    	jae    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084c0:	be 00 00 08 00       	mov    esi,0x80000
c00084c5:	51                   	push   ecx
c00084c6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00084ca:	57                   	push   edi
c00084cb:	56                   	push   esi
c00084cc:	68 d4 d7 01 c0       	push   0xc001d7d4
c00084d1:	e8 12 27 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00084d6:	5d                   	pop    ebp
c00084d7:	58                   	pop    eax
c00084d8:	57                   	push   edi
c00084d9:	56                   	push   esi
c00084da:	e8 61 fe ff ff       	call   c0008340 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00084df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084e7:	83 c4 0c             	add    esp,0xc
c00084ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c00084ee:	03 05 68 09 02 c0    	add    eax,DWORD PTR ds:0xc0020968
c00084f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00084fb:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c0008500:	52                   	push   edx
c0008501:	50                   	push   eax
c0008502:	68 39 d8 01 c0       	push   0xc001d839
c0008507:	e8 dc 26 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	e9 de fe ff ff       	jmp    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008514:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0008518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000851c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008520:	39 ea                	cmp    edx,ebp
c0008522:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0008526:	0f 82 c6 fe ff ff    	jb     c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000852c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008531:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0008535:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008539:	0f 83 b3 fe ff ff    	jae    c00083f2 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000853f:	39 ee                	cmp    esi,ebp
c0008541:	89 f8                	mov    eax,edi
c0008543:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008547:	0f 83 78 ff ff ff    	jae    c00084c5 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000854d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008551:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008555:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008559:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000855d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008561:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008565:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008569:	e9 57 ff ff ff       	jmp    c00084c5 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000856e:	83 ec 0c             	sub    esp,0xc
c0008571:	68 2b d8 01 c0       	push   0xc001d82b
c0008576:	e8 58 81 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000857b:	83 c4 10             	add    esp,0x10
c000857e:	83 ec 08             	sub    esp,0x8
c0008581:	bb 60 00 00 00       	mov    ebx,0x60
c0008586:	6a 00                	push   0x0
c0008588:	6a 06                	push   0x6
c000858a:	e8 e2 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000858f:	58                   	pop    eax
c0008590:	5a                   	pop    edx
c0008591:	6a 00                	push   0x0
c0008593:	6a 07                	push   0x7
c0008595:	e8 d7 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c000859a:	83 05 68 09 02 c0 02 	add    DWORD PTR ds:0xc0020968,0x2
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	83 ec 08             	sub    esp,0x8
c00085a7:	6a 00                	push   0x0
c00085a9:	53                   	push   ebx
c00085aa:	43                   	inc    ebx
c00085ab:	e8 c1 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00085b0:	83 c4 10             	add    esp,0x10
c00085b3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00085b9:	75 e9                	jne    c00085a4 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00085bb:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c00085c0:	bb 40 01 00 00       	mov    ebx,0x140
c00085c5:	83 c0 20             	add    eax,0x20
c00085c8:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c00085cd:	eb 22                	jmp    c00085f1 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00085cf:	83 ec 08             	sub    esp,0x8
c00085d2:	6a 00                	push   0x0
c00085d4:	53                   	push   ebx
c00085d5:	43                   	inc    ebx
c00085d6:	e8 96 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c00085db:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c00085e0:	83 c4 10             	add    esp,0x10
c00085e3:	40                   	inc    eax
c00085e4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085ea:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c00085ef:	74 07                	je     c00085f8 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00085f1:	3d ff 03 00 00       	cmp    eax,0x3ff
c00085f6:	7e d7                	jle    c00085cf <Phys::physicalMemorySetup(unsigned int)+0x257>
c00085f8:	bb d0 01 00 00       	mov    ebx,0x1d0
c00085fd:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008602:	7f 22                	jg     c0008626 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008604:	83 ec 08             	sub    esp,0x8
c0008607:	6a 00                	push   0x0
c0008609:	53                   	push   ebx
c000860a:	43                   	inc    ebx
c000860b:	e8 61 fb ff ff       	call   c0008171 <Phys::setPageState(unsigned long, bool)>
c0008610:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c0008615:	83 c4 10             	add    esp,0x10
c0008618:	40                   	inc    eax
c0008619:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000861f:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c0008624:	75 d7                	jne    c00085fd <Phys::physicalMemorySetup(unsigned int)+0x285>
c0008626:	83 c4 3c             	add    esp,0x3c
c0008629:	5b                   	pop    ebx
c000862a:	5e                   	pop    esi
c000862b:	5f                   	pop    edi
c000862c:	5d                   	pop    ebp
c000862d:	c3                   	ret    
c000862e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008636:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000863e:	e9 51 fe ff ff       	jmp    c0008494 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0008643:	90                   	nop

c0008644 <Pipe::isAtty()>:
c0008644:	31 c0                	xor    eax,eax
c0008646:	c3                   	ret    
c0008647:	90                   	nop

c0008648 <Pipe::~Pipe()>:
c0008648:	83 ec 0c             	sub    esp,0xc
c000864b:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c0008650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008654:	89 10                	mov    DWORD PTR [eax],edx
c0008656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865a:	83 ec 0c             	sub    esp,0xc
c000865d:	50                   	push   eax
c000865e:	e8 d1 10 00 00       	call   c0009734 <UnixFile::~UnixFile()>
c0008663:	83 c4 10             	add    esp,0x10
c0008666:	90                   	nop
c0008667:	83 c4 0c             	add    esp,0xc
c000866a:	c3                   	ret    
c000866b:	90                   	nop

c000866c <Pipe::~Pipe()>:
c000866c:	83 ec 0c             	sub    esp,0xc
c000866f:	83 ec 0c             	sub    esp,0xc
c0008672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008676:	e8 cd ff ff ff       	call   c0008648 <Pipe::~Pipe()>
c000867b:	83 c4 10             	add    esp,0x10
c000867e:	83 ec 08             	sub    esp,0x8
c0008681:	6a 20                	push   0x20
c0008683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008687:	e8 66 24 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000868c:	83 c4 10             	add    esp,0x10
c000868f:	83 c4 0c             	add    esp,0xc
c0008692:	c3                   	ret    
c0008693:	90                   	nop

c0008694 <Pipe::write(unsigned long long, void*, int*)>:
c0008694:	55                   	push   ebp
c0008695:	57                   	push   edi
c0008696:	56                   	push   esi
c0008697:	53                   	push   ebx
c0008698:	83 ec 1c             	sub    esp,0x1c
c000869b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000869f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00086a3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00086a6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00086aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00086ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086b1:	89 d8                	mov    eax,ebx
c00086b3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00086b6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00086ba:	89 d6                	mov    esi,edx
c00086bc:	89 d7                	mov    edi,edx
c00086be:	c1 ff 1f             	sar    edi,0x1f
c00086c1:	03 34 24             	add    esi,DWORD PTR [esp]
c00086c4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00086c8:	c1 f8 1f             	sar    eax,0x1f
c00086cb:	39 f3                	cmp    ebx,esi
c00086cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d5:	19 f8                	sbb    eax,edi
c00086d7:	b8 01 00 00 00       	mov    eax,0x1
c00086dc:	72 6e                	jb     c000874c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00086de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086e1:	01 d0                	add    eax,edx
c00086e3:	99                   	cdq    
c00086e4:	f7 fb                	idiv   ebx
c00086e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086ea:	29 d3                	sub    ebx,edx
c00086ec:	89 d7                	mov    edi,edx
c00086ee:	89 de                	mov    esi,ebx
c00086f0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00086f3:	c1 fb 1f             	sar    ebx,0x1f
c00086f6:	39 f2                	cmp    edx,esi
c00086f8:	19 d8                	sbb    eax,ebx
c00086fa:	b8 00 00 00 00       	mov    eax,0x0
c00086ff:	72 04                	jb     c0008705 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008701:	89 d0                	mov    eax,edx
c0008703:	29 f0                	sub    eax,esi
c0008705:	89 d3                	mov    ebx,edx
c0008707:	29 c3                	sub    ebx,eax
c0008709:	74 0b                	je     c0008716 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000870b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000870e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008712:	89 d9                	mov    ecx,ebx
c0008714:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008716:	85 c0                	test   eax,eax
c0008718:	74 0d                	je     c0008727 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000871a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000871e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008721:	89 de                	mov    esi,ebx
c0008723:	89 c1                	mov    ecx,eax
c0008725:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008727:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000872a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000872f:	75 10                	jne    c0008741 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	68 55 d8 01 c0       	push   0xc001d855
c0008739:	e8 95 7f 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000873e:	83 c4 10             	add    esp,0x10
c0008741:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008745:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008748:	89 08                	mov    DWORD PTR [eax],ecx
c000874a:	31 c0                	xor    eax,eax
c000874c:	83 c4 1c             	add    esp,0x1c
c000874f:	5b                   	pop    ebx
c0008750:	5e                   	pop    esi
c0008751:	5f                   	pop    edi
c0008752:	5d                   	pop    ebp
c0008753:	c3                   	ret    

c0008754 <Pipe::read(unsigned long long, void*, int*)>:
c0008754:	55                   	push   ebp
c0008755:	57                   	push   edi
c0008756:	56                   	push   esi
c0008757:	53                   	push   ebx
c0008758:	83 ec 1c             	sub    esp,0x1c
c000875b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000875f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008763:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008767:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000876a:	89 c8                	mov    eax,ecx
c000876c:	99                   	cdq    
c000876d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008771:	74 24                	je     c0008797 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008773:	39 f9                	cmp    ecx,edi
c0008775:	89 d1                	mov    ecx,edx
c0008777:	19 f1                	sbb    ecx,esi
c0008779:	73 1c                	jae    c0008797 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000877b:	fa                   	cli    
c000877c:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0008782:	e8 a1 b2 00 00       	call   c0013a28 <schedule()>
c0008787:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000878c:	48                   	dec    eax
c000878d:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0008792:	75 d3                	jne    c0008767 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008794:	fb                   	sti    
c0008795:	eb d0                	jmp    c0008767 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008797:	39 f8                	cmp    eax,edi
c0008799:	89 d1                	mov    ecx,edx
c000879b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000879e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00087a2:	19 f1                	sbb    ecx,esi
c00087a4:	73 07                	jae    c00087ad <Pipe::read(unsigned long long, void*, int*)+0x59>
c00087a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00087a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087ad:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00087b0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00087b3:	29 f7                	sub    edi,esi
c00087b5:	89 f8                	mov    eax,edi
c00087b7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00087bb:	99                   	cdq    
c00087bc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00087bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087c3:	19 d0                	sbb    eax,edx
c00087c5:	73 07                	jae    c00087ce <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00087c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00087ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ce:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00087d1:	89 ea                	mov    edx,ebp
c00087d3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00087d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00087dc:	74 0d                	je     c00087eb <Pipe::read(unsigned long long, void*, int*)+0x97>
c00087de:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087eb:	85 d2                	test   edx,edx
c00087ed:	74 11                	je     c0008800 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00087ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00087f6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00087fa:	89 d1                	mov    ecx,edx
c00087fc:	89 c7                	mov    edi,eax
c00087fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008800:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008803:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008806:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008809:	99                   	cdq    
c000880a:	89 f7                	mov    edi,esi
c000880c:	03 04 24             	add    eax,DWORD PTR [esp]
c000880f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008813:	c1 ff 1f             	sar    edi,0x1f
c0008816:	57                   	push   edi
c0008817:	56                   	push   esi
c0008818:	52                   	push   edx
c0008819:	50                   	push   eax
c000881a:	e8 81 3a 01 00       	call   c001c2a0 <__umoddi3>
c000881f:	83 c4 10             	add    esp,0x10
c0008822:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008825:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000882a:	75 10                	jne    c000883c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000882c:	83 ec 0c             	sub    esp,0xc
c000882f:	68 72 d8 01 c0       	push   0xc001d872
c0008834:	e8 9a 7e 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0008839:	83 c4 10             	add    esp,0x10
c000883c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008840:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008843:	89 10                	mov    DWORD PTR [eax],edx
c0008845:	83 c4 1c             	add    esp,0x1c
c0008848:	31 c0                	xor    eax,eax
c000884a:	5b                   	pop    ebx
c000884b:	5e                   	pop    esi
c000884c:	5f                   	pop    edi
c000884d:	5d                   	pop    ebp
c000884e:	c3                   	ret    
c000884f:	90                   	nop

c0008850 <Pipe::Pipe(int)>:
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008857:	83 ec 08             	sub    esp,0x8
c000885a:	6a 00                	push   0x0
c000885c:	50                   	push   eax
c000885d:	e8 f0 0c 00 00       	call   c0009552 <UnixFile::UnixFile(int)>
c0008862:	83 c4 10             	add    esp,0x10
c0008865:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c000886a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000886e:	89 10                	mov    DWORD PTR [eax],edx
c0008870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008878:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000887f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000888a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008891:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008895:	83 ec 0c             	sub    esp,0xc
c0008898:	50                   	push   eax
c0008899:	e8 bb f5 ff ff       	call   c0007e59 <malloc>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	89 c2                	mov    edx,eax
c00088a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088a7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00088aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ae:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00088b2:	90                   	nop
c00088b3:	83 c4 0c             	add    esp,0xc
c00088b6:	c3                   	ret    
c00088b7:	90                   	nop

c00088b8 <VgaText::isAtty()>:
c00088b8:	b0 01                	mov    al,0x1
c00088ba:	c3                   	ret    
c00088bb:	90                   	nop

c00088bc <VgaText::~VgaText()>:
c00088bc:	83 ec 0c             	sub    esp,0xc
c00088bf:	ba 20 d9 01 c0       	mov    edx,0xc001d920
c00088c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088c8:	89 10                	mov    DWORD PTR [eax],edx
c00088ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ce:	83 ec 0c             	sub    esp,0xc
c00088d1:	50                   	push   eax
c00088d2:	e8 5d 0e 00 00       	call   c0009734 <UnixFile::~UnixFile()>
c00088d7:	83 c4 10             	add    esp,0x10
c00088da:	90                   	nop
c00088db:	83 c4 0c             	add    esp,0xc
c00088de:	c3                   	ret    
c00088df:	90                   	nop

c00088e0 <VgaText::~VgaText()>:
c00088e0:	83 ec 0c             	sub    esp,0xc
c00088e3:	83 ec 0c             	sub    esp,0xc
c00088e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088ea:	e8 cd ff ff ff       	call   c00088bc <VgaText::~VgaText()>
c00088ef:	83 c4 10             	add    esp,0x10
c00088f2:	83 ec 08             	sub    esp,0x8
c00088f5:	68 34 01 00 00       	push   0x134
c00088fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088fe:	e8 ef 21 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0008903:	83 c4 10             	add    esp,0x10
c0008906:	83 c4 0c             	add    esp,0xc
c0008909:	c3                   	ret    

c000890a <VgaText::read(unsigned long long, void*, int*)>:
c000890a:	83 ec 10             	sub    esp,0x10
c000890d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008919:	e8 24 45 00 00       	call   c000ce42 <readKeyboard(VgaText*, char*, unsigned long)>
c000891e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008922:	89 02                	mov    DWORD PTR [edx],eax
c0008924:	31 c0                	xor    eax,eax
c0008926:	83 c4 1c             	add    esp,0x1c
c0008929:	c3                   	ret    

c000892a <setTerminalScrollLock(bool)>:
c000892a:	c3                   	ret    

c000892b <doTerminalCycle()>:
c000892b:	c3                   	ret    

c000892c <addToTerminalCycle(VgaText*)>:
c000892c:	c3                   	ret    

c000892d <scrollTerminalScrollLock(int)>:
c000892d:	c3                   	ret    

c000892e <VgaText::updateTitle()>:
c000892e:	c3                   	ret    
c000892f:	90                   	nop

c0008930 <VgaText::load()>:
c0008930:	c3                   	ret    
c0008931:	90                   	nop

c0008932 <VgaText::updateCursor()>:
c0008932:	83 ec 14             	sub    esp,0x14
c0008935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008939:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000893c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000893f:	e8 58 db 00 00       	call   c001649c <HalConsoleCursorUpdate(int, int)>
c0008944:	83 c4 1c             	add    esp,0x1c
c0008947:	c3                   	ret    

c0008948 <VgaText::doANSI_SGR(int)>:
c0008948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000894c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008950:	85 d2                	test   edx,edx
c0008952:	75 0b                	jne    c000895f <VgaText::doANSI_SGR(int)+0x17>
c0008954:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008957:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000895a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000895d:	eb 59                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c000895f:	83 fa 07             	cmp    edx,0x7
c0008962:	75 0b                	jne    c000896f <VgaText::doANSI_SGR(int)+0x27>
c0008964:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008967:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000896a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000896d:	eb 49                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c000896f:	83 fa 1b             	cmp    edx,0x1b
c0008972:	74 e0                	je     c0008954 <VgaText::doANSI_SGR(int)+0xc>
c0008974:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008977:	83 f9 07             	cmp    ecx,0x7
c000897a:	77 09                	ja     c0008985 <VgaText::doANSI_SGR(int)+0x3d>
c000897c:	8b 14 8d 40 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07c0]
c0008983:	eb 20                	jmp    c00089a5 <VgaText::doANSI_SGR(int)+0x5d>
c0008985:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008988:	83 f9 07             	cmp    ecx,0x7
c000898b:	77 09                	ja     c0008996 <VgaText::doANSI_SGR(int)+0x4e>
c000898d:	8b 14 8d 40 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07c0]
c0008994:	eb 22                	jmp    c00089b8 <VgaText::doANSI_SGR(int)+0x70>
c0008996:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008999:	83 f9 07             	cmp    ecx,0x7
c000899c:	77 0b                	ja     c00089a9 <VgaText::doANSI_SGR(int)+0x61>
c000899e:	8b 14 95 f8 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0908]
c00089a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089a8:	c3                   	ret    
c00089a9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00089ac:	83 f9 07             	cmp    ecx,0x7
c00089af:	77 0a                	ja     c00089bb <VgaText::doANSI_SGR(int)+0x73>
c00089b1:	8b 14 95 d0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0930]
c00089b8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089bb:	c3                   	ret    

c00089bc <VgaText::setDefaultBgColour(VgaColour)>:
c00089bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089c4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00089c7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089ca:	c3                   	ret    
c00089cb:	90                   	nop

c00089cc <VgaText::setDefaultFgColour(VgaColour)>:
c00089cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00089d7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089da:	c3                   	ret    
c00089db:	90                   	nop

c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00089dc:	53                   	push   ebx
c00089dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089e9:	51                   	push   ecx
c00089ea:	e8 cd ff ff ff       	call   c00089bc <VgaText::setDefaultBgColour(VgaColour)>
c00089ef:	58                   	pop    eax
c00089f0:	5a                   	pop    edx
c00089f1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00089f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00089f9:	5b                   	pop    ebx
c00089fa:	eb d0                	jmp    c00089cc <VgaText::setDefaultFgColour(VgaColour)>

c00089fc <VgaText::setTitleTextColour(VgaColour)>:
c00089fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a04:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008a07:	c3                   	ret    

c0008a08 <VgaText::setTitleColour(VgaColour)>:
c0008a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a10:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008a13:	c3                   	ret    

c0008a14 <VgaText::setTitle(char*)>:
c0008a14:	c3                   	ret    
c0008a15:	90                   	nop

c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008a16:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008a1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008a1f:	83 e0 0f             	and    eax,0xf
c0008a22:	c1 e2 04             	shl    edx,0x4
c0008a25:	09 d0                	or     eax,edx
c0008a27:	c3                   	ret    

c0008a28 <VgaText::scrollScreen()>:
c0008a28:	55                   	push   ebp
c0008a29:	b9 01 00 00 00       	mov    ecx,0x1
c0008a2e:	57                   	push   edi
c0008a2f:	56                   	push   esi
c0008a30:	53                   	push   ebx
c0008a31:	83 ec 0c             	sub    esp,0xc
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008a3e:	31 ff                	xor    edi,edi
c0008a40:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a43:	83 f9 18             	cmp    ecx,0x18
c0008a46:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a49:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a50:	75 27                	jne    c0008a79 <VgaText::scrollScreen()+0x51>
c0008a52:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a55:	01 f5                	add    ebp,esi
c0008a57:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a5d:	74 16                	je     c0008a75 <VgaText::scrollScreen()+0x4d>
c0008a5f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a63:	50                   	push   eax
c0008a64:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a68:	50                   	push   eax
c0008a69:	e8 a8 ff ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008a6e:	5a                   	pop    edx
c0008a6f:	5a                   	pop    edx
c0008a70:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a73:	eb 04                	jmp    c0008a79 <VgaText::scrollScreen()+0x51>
c0008a75:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a79:	47                   	inc    edi
c0008a7a:	46                   	inc    esi
c0008a7b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a81:	75 bd                	jne    c0008a40 <VgaText::scrollScreen()+0x18>
c0008a83:	41                   	inc    ecx
c0008a84:	83 f9 19             	cmp    ecx,0x19
c0008a87:	75 af                	jne    c0008a38 <VgaText::scrollScreen()+0x10>
c0008a89:	39 1d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebx
c0008a8f:	75 1f                	jne    c0008ab0 <VgaText::scrollScreen()+0x88>
c0008a91:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008a95:	74 05                	je     c0008a9c <VgaText::scrollScreen()+0x74>
c0008a97:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008a9a:	eb 14                	jmp    c0008ab0 <VgaText::scrollScreen()+0x88>
c0008a9c:	50                   	push   eax
c0008a9d:	50                   	push   eax
c0008a9e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008aa2:	50                   	push   eax
c0008aa3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008aa7:	50                   	push   eax
c0008aa8:	e8 7b d8 00 00       	call   c0016328 <HalConsoleScroll(int, int)>
c0008aad:	83 c4 10             	add    esp,0x10
c0008ab0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008ab4:	83 c4 0c             	add    esp,0xc
c0008ab7:	5b                   	pop    ebx
c0008ab8:	5e                   	pop    esi
c0008ab9:	5f                   	pop    edi
c0008aba:	5d                   	pop    ebp
c0008abb:	e9 72 fe ff ff       	jmp    c0008932 <VgaText::updateCursor()>

c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008ac0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008ac5:	c1 e0 08             	shl    eax,0x8
c0008ac8:	89 c2                	mov    edx,eax
c0008aca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008acf:	09 d0                	or     eax,edx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 1c             	sub    esp,0x1c
c0008ad9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008add:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008ae1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008ae5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ae9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008aed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008af1:	0f b6 c3             	movzx  eax,bl
c0008af4:	50                   	push   eax
c0008af5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008afa:	50                   	push   eax
c0008afb:	e8 16 ff ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b00:	5a                   	pop    edx
c0008b01:	0f b6 c0             	movzx  eax,al
c0008b04:	59                   	pop    ecx
c0008b05:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008b0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008b0e:	50                   	push   eax
c0008b0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b13:	e8 a8 ff ff ff       	call   c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b18:	5a                   	pop    edx
c0008b19:	66 6b d7 50          	imul   dx,di,0x50
c0008b1d:	59                   	pop    ecx
c0008b1e:	01 f2                	add    edx,esi
c0008b20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008b23:	0f b7 d2             	movzx  edx,dx
c0008b26:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008b2a:	39 2d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebp
c0008b30:	75 28                	jne    c0008b5a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b36:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008b3a:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008b3e:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b42:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b4e:	83 c4 1c             	add    esp,0x1c
c0008b51:	5b                   	pop    ebx
c0008b52:	5e                   	pop    esi
c0008b53:	5f                   	pop    edi
c0008b54:	5d                   	pop    ebp
c0008b55:	e9 d6 d8 00 00       	jmp    c0016430 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b5a:	83 c4 1c             	add    esp,0x1c
c0008b5d:	5b                   	pop    ebx
c0008b5e:	5e                   	pop    esi
c0008b5f:	5f                   	pop    edi
c0008b60:	5d                   	pop    ebp
c0008b61:	c3                   	ret    

c0008b62 <VgaText::getCursorX()>:
c0008b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b66:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b69:	c3                   	ret    

c0008b6a <VgaText::getCursorY()>:
c0008b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b6e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b71:	c3                   	ret    

c0008b72 <VgaText::setCursor(int, int)>:
c0008b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b7a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b81:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b84:	e9 a9 fd ff ff       	jmp    c0008932 <VgaText::updateCursor()>

c0008b89 <setActiveTerminal(VgaText*)>:
c0008b89:	53                   	push   ebx
c0008b8a:	83 ec 08             	sub    esp,0x8
c0008b8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b91:	85 db                	test   ebx,ebx
c0008b93:	75 11                	jne    c0008ba6 <setActiveTerminal(VgaText*)+0x1d>
c0008b95:	c7 44 24 10 ac d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d8ac
c0008b9d:	83 c4 08             	add    esp,0x8
c0008ba0:	5b                   	pop    ebx
c0008ba1:	e9 2d 7b 00 00       	jmp    c00106d3 <Krnl::panic(char const*)>
c0008ba6:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0008bab:	85 c0                	test   eax,eax
c0008bad:	74 0c                	je     c0008bbb <setActiveTerminal(VgaText*)+0x32>
c0008baf:	83 ec 0c             	sub    esp,0xc
c0008bb2:	50                   	push   eax
c0008bb3:	e8 7a fd ff ff       	call   c0008932 <VgaText::updateCursor()>
c0008bb8:	83 c4 10             	add    esp,0x10
c0008bbb:	89 1d 84 09 02 c0    	mov    DWORD PTR ds:0xc0020984,ebx
c0008bc1:	50                   	push   eax
c0008bc2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bc5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bc8:	53                   	push   ebx
c0008bc9:	e8 a4 ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008bce:	83 c4 18             	add    esp,0x18
c0008bd1:	5b                   	pop    ebx
c0008bd2:	c3                   	ret    
c0008bd3:	90                   	nop

c0008bd4 <VgaText::clearScreen()>:
c0008bd4:	57                   	push   edi
c0008bd5:	56                   	push   esi
c0008bd6:	31 f6                	xor    esi,esi
c0008bd8:	53                   	push   ebx
c0008bd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008bdd:	52                   	push   edx
c0008bde:	6a 00                	push   0x0
c0008be0:	6a 00                	push   0x0
c0008be2:	53                   	push   ebx
c0008be3:	e8 8a ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008be8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008bef:	83 c4 10             	add    esp,0x10
c0008bf2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008bf5:	7e 20                	jle    c0008c17 <VgaText::clearScreen()+0x43>
c0008bf7:	31 ff                	xor    edi,edi
c0008bf9:	50                   	push   eax
c0008bfa:	50                   	push   eax
c0008bfb:	56                   	push   esi
c0008bfc:	57                   	push   edi
c0008bfd:	47                   	inc    edi
c0008bfe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c01:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c04:	6a 20                	push   0x20
c0008c06:	53                   	push   ebx
c0008c07:	e8 c6 fe ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c0c:	83 c4 20             	add    esp,0x20
c0008c0f:	83 ff 50             	cmp    edi,0x50
c0008c12:	75 e5                	jne    c0008bf9 <VgaText::clearScreen()+0x25>
c0008c14:	46                   	inc    esi
c0008c15:	eb db                	jmp    c0008bf2 <VgaText::clearScreen()+0x1e>
c0008c17:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c1e:	5b                   	pop    ebx
c0008c1f:	5e                   	pop    esi
c0008c20:	5f                   	pop    edi
c0008c21:	c3                   	ret    

c0008c22 <VgaText::setCursorX(int)>:
c0008c22:	83 ec 10             	sub    esp,0x10
c0008c25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c29:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c30:	50                   	push   eax
c0008c31:	e8 3c ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008c36:	83 c4 1c             	add    esp,0x1c
c0008c39:	c3                   	ret    

c0008c3a <VgaText::setCursorY(int)>:
c0008c3a:	83 ec 10             	sub    esp,0x10
c0008c3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c45:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c48:	50                   	push   eax
c0008c49:	e8 24 ff ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008c4e:	83 c4 1c             	add    esp,0x1c
c0008c51:	c3                   	ret    

c0008c52 <VgaText::incrementCursor(bool)>:
c0008c52:	56                   	push   esi
c0008c53:	53                   	push   ebx
c0008c54:	51                   	push   ecx
c0008c55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c60:	40                   	inc    eax
c0008c61:	83 f8 50             	cmp    eax,0x50
c0008c64:	74 05                	je     c0008c6b <VgaText::incrementCursor(bool)+0x19>
c0008c66:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c69:	eb 24                	jmp    c0008c8f <VgaText::incrementCursor(bool)+0x3d>
c0008c6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c75:	8d 50 01             	lea    edx,[eax+0x1]
c0008c78:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c7b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c7e:	75 0f                	jne    c0008c8f <VgaText::incrementCursor(bool)+0x3d>
c0008c80:	83 ec 0c             	sub    esp,0xc
c0008c83:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c86:	53                   	push   ebx
c0008c87:	e8 9c fd ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008c8c:	83 c4 10             	add    esp,0x10
c0008c8f:	89 f0                	mov    eax,esi
c0008c91:	84 c0                	test   al,al
c0008c93:	74 0c                	je     c0008ca1 <VgaText::incrementCursor(bool)+0x4f>
c0008c95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c99:	5a                   	pop    edx
c0008c9a:	5b                   	pop    ebx
c0008c9b:	5e                   	pop    esi
c0008c9c:	e9 91 fc ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008ca1:	58                   	pop    eax
c0008ca2:	5b                   	pop    ebx
c0008ca3:	5e                   	pop    esi
c0008ca4:	c3                   	ret    
c0008ca5:	90                   	nop

c0008ca6 <VgaText::decrementCursor(bool)>:
c0008ca6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008caa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008cae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008cb1:	85 c0                	test   eax,eax
c0008cb3:	74 04                	je     c0008cb9 <VgaText::decrementCursor(bool)+0x13>
c0008cb5:	48                   	dec    eax
c0008cb6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008cb9:	84 c9                	test   cl,cl
c0008cbb:	74 09                	je     c0008cc6 <VgaText::decrementCursor(bool)+0x20>
c0008cbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cc1:	e9 6c fc ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008cc6:	c3                   	ret    
c0008cc7:	90                   	nop

c0008cc8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008cc8:	53                   	push   ebx
c0008cc9:	83 ec 08             	sub    esp,0x8
c0008ccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008cd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008cd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008cd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008cdc:	3c 07                	cmp    al,0x7
c0008cde:	75 21                	jne    c0008d01 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008ce0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ce8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008cf0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	e9 3e 2d 00 00       	jmp    c000ba3f <Krnl::beep(int, int, bool)>
c0008d01:	3c 0d                	cmp    al,0xd
c0008d03:	75 09                	jne    c0008d0e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008d05:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d0c:	eb 2c                	jmp    c0008d3a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008d0e:	3c 0a                	cmp    al,0xa
c0008d10:	75 31                	jne    c0008d43 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008d12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008d15:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d1c:	8d 50 01             	lea    edx,[eax+0x1]
c0008d1f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008d22:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008d25:	75 0f                	jne    c0008d36 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008d27:	83 ec 0c             	sub    esp,0xc
c0008d2a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008d2d:	53                   	push   ebx
c0008d2e:	e8 f5 fc ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d3a:	83 c4 08             	add    esp,0x8
c0008d3d:	5b                   	pop    ebx
c0008d3e:	e9 ef fb ff ff       	jmp    c0008932 <VgaText::updateCursor()>
c0008d43:	3c 08                	cmp    al,0x8
c0008d45:	75 25                	jne    c0008d6c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d47:	50                   	push   eax
c0008d48:	50                   	push   eax
c0008d49:	6a 01                	push   0x1
c0008d4b:	53                   	push   ebx
c0008d4c:	e8 55 ff ff ff       	call   c0008ca6 <VgaText::decrementCursor(bool)>
c0008d51:	5a                   	pop    edx
c0008d52:	59                   	pop    ecx
c0008d53:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d59:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d5f:	6a 20                	push   0x20
c0008d61:	53                   	push   ebx
c0008d62:	e8 6b fd ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d67:	83 c4 28             	add    esp,0x28
c0008d6a:	5b                   	pop    ebx
c0008d6b:	c3                   	ret    
c0008d6c:	83 ec 08             	sub    esp,0x8
c0008d6f:	0f be c0             	movsx  eax,al
c0008d72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d78:	51                   	push   ecx
c0008d79:	52                   	push   edx
c0008d7a:	50                   	push   eax
c0008d7b:	53                   	push   ebx
c0008d7c:	e8 51 fd ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d81:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d85:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008d8d:	83 c4 28             	add    esp,0x28
c0008d90:	5b                   	pop    ebx
c0008d91:	e9 bc fe ff ff       	jmp    c0008c52 <VgaText::incrementCursor(bool)>

c0008d96 <VgaText::putchar(char)>:
c0008d96:	56                   	push   esi
c0008d97:	53                   	push   ebx
c0008d98:	83 ec 14             	sub    esp,0x14
c0008d9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008da3:	3c 5b                	cmp    al,0x5b
c0008da5:	75 18                	jne    c0008dbf <VgaText::putchar(char)+0x29>
c0008da7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008dab:	74 1f                	je     c0008dcc <VgaText::putchar(char)+0x36>
c0008dad:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008db3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008dba:	e9 bd 00 00 00       	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008dbf:	3c 1b                	cmp    al,0x1b
c0008dc1:	75 09                	jne    c0008dcc <VgaText::putchar(char)+0x36>
c0008dc3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008dc7:	e9 b0 00 00 00       	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008dcc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008dcf:	84 c9                	test   cl,cl
c0008dd1:	0f 84 92 00 00 00    	je     c0008e69 <VgaText::putchar(char)+0xd3>
c0008dd7:	8d 50 c0             	lea    edx,[eax-0x40]
c0008dda:	80 fa 3e             	cmp    dl,0x3e
c0008ddd:	77 76                	ja     c0008e55 <VgaText::putchar(char)+0xbf>
c0008ddf:	3c 6d                	cmp    al,0x6d
c0008de1:	75 47                	jne    c0008e2a <VgaText::putchar(char)+0x94>
c0008de3:	31 f6                	xor    esi,esi
c0008de5:	31 d2                	xor    edx,edx
c0008de7:	31 c0                	xor    eax,eax
c0008de9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008dec:	7e 2d                	jle    c0008e1b <VgaText::putchar(char)+0x85>
c0008dee:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008df3:	80 fa 3b             	cmp    dl,0x3b
c0008df6:	75 17                	jne    c0008e0f <VgaText::putchar(char)+0x79>
c0008df8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008dfc:	50                   	push   eax
c0008dfd:	53                   	push   ebx
c0008dfe:	e8 45 fb ff ff       	call   c0008948 <VgaText::doANSI_SGR(int)>
c0008e03:	59                   	pop    ecx
c0008e04:	31 d2                	xor    edx,edx
c0008e06:	58                   	pop    eax
c0008e07:	31 c0                	xor    eax,eax
c0008e09:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008e0d:	eb 09                	jmp    c0008e18 <VgaText::putchar(char)+0x82>
c0008e0f:	6b c0 0a             	imul   eax,eax,0xa
c0008e12:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008e16:	88 ca                	mov    dl,cl
c0008e18:	46                   	inc    esi
c0008e19:	eb ce                	jmp    c0008de9 <VgaText::putchar(char)+0x53>
c0008e1b:	84 d2                	test   dl,dl
c0008e1d:	74 2e                	je     c0008e4d <VgaText::putchar(char)+0xb7>
c0008e1f:	50                   	push   eax
c0008e20:	53                   	push   ebx
c0008e21:	e8 22 fb ff ff       	call   c0008948 <VgaText::doANSI_SGR(int)>
c0008e26:	58                   	pop    eax
c0008e27:	5a                   	pop    edx
c0008e28:	eb 23                	jmp    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e2a:	3c 4a                	cmp    al,0x4a
c0008e2c:	75 1f                	jne    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e2e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008e32:	75 19                	jne    c0008e4d <VgaText::putchar(char)+0xb7>
c0008e34:	83 ec 0c             	sub    esp,0xc
c0008e37:	53                   	push   ebx
c0008e38:	e8 97 fd ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c0008e3d:	83 c4 0c             	add    esp,0xc
c0008e40:	6a 00                	push   0x0
c0008e42:	6a 00                	push   0x0
c0008e44:	53                   	push   ebx
c0008e45:	e8 28 fd ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0008e4a:	83 c4 10             	add    esp,0x10
c0008e4d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e53:	eb 27                	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008e55:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e58:	83 fa 0e             	cmp    edx,0xe
c0008e5b:	7f 1f                	jg     c0008e7c <VgaText::putchar(char)+0xe6>
c0008e5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e60:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e63:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e67:	eb 13                	jmp    c0008e7c <VgaText::putchar(char)+0xe6>
c0008e69:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e6c:	0f be c0             	movsx  eax,al
c0008e6f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e72:	50                   	push   eax
c0008e73:	53                   	push   ebx
c0008e74:	e8 4f fe ff ff       	call   c0008cc8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e79:	83 c4 10             	add    esp,0x10
c0008e7c:	83 c4 14             	add    esp,0x14
c0008e7f:	5b                   	pop    ebx
c0008e80:	5e                   	pop    esi
c0008e81:	c3                   	ret    

c0008e82 <VgaText::putx(unsigned int)>:
c0008e82:	57                   	push   edi
c0008e83:	b9 11 00 00 00       	mov    ecx,0x11
c0008e88:	56                   	push   esi
c0008e89:	be ba d8 01 c0       	mov    esi,0xc001d8ba
c0008e8e:	53                   	push   ebx
c0008e8f:	83 ec 20             	sub    esp,0x20
c0008e92:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008e96:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008e9a:	fc                   	cld    
c0008e9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008e9d:	be 08 00 00 00       	mov    esi,0x8
c0008ea2:	50                   	push   eax
c0008ea3:	50                   	push   eax
c0008ea4:	89 d8                	mov    eax,ebx
c0008ea6:	c1 e3 04             	shl    ebx,0x4
c0008ea9:	c1 e8 1c             	shr    eax,0x1c
c0008eac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008eb1:	50                   	push   eax
c0008eb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008eb6:	e8 db fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	4e                   	dec    esi
c0008ebf:	75 e1                	jne    c0008ea2 <VgaText::putx(unsigned int)+0x20>
c0008ec1:	83 c4 20             	add    esp,0x20
c0008ec4:	5b                   	pop    ebx
c0008ec5:	5e                   	pop    esi
c0008ec6:	5f                   	pop    edi
c0008ec7:	c3                   	ret    

c0008ec8 <VgaText::puts(char const*)>:
c0008ec8:	53                   	push   ebx
c0008ec9:	83 ec 08             	sub    esp,0x8
c0008ecc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ed0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ed3:	84 c0                	test   al,al
c0008ed5:	74 12                	je     c0008ee9 <VgaText::puts(char const*)+0x21>
c0008ed7:	43                   	inc    ebx
c0008ed8:	51                   	push   ecx
c0008ed9:	51                   	push   ecx
c0008eda:	50                   	push   eax
c0008edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edf:	e8 b2 fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	eb e7                	jmp    c0008ed0 <VgaText::puts(char const*)+0x8>
c0008ee9:	83 c4 08             	add    esp,0x8
c0008eec:	5b                   	pop    ebx
c0008eed:	c3                   	ret    

c0008eee <VgaText::write(unsigned long long, void*, int*)>:
c0008eee:	55                   	push   ebp
c0008eef:	57                   	push   edi
c0008ef0:	56                   	push   esi
c0008ef1:	53                   	push   ebx
c0008ef2:	83 ec 0c             	sub    esp,0xc
c0008ef5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ef9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008efd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008f01:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008f08:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008f0b:	39 eb                	cmp    ebx,ebp
c0008f0d:	74 13                	je     c0008f22 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008f0f:	43                   	inc    ebx
c0008f10:	50                   	push   eax
c0008f11:	50                   	push   eax
c0008f12:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008f16:	50                   	push   eax
c0008f17:	56                   	push   esi
c0008f18:	e8 79 fe ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0008f1d:	83 c4 10             	add    esp,0x10
c0008f20:	eb e9                	jmp    c0008f0b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008f22:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f2d:	89 38                	mov    DWORD PTR [eax],edi
c0008f2f:	83 c4 0c             	add    esp,0xc
c0008f32:	31 c0                	xor    eax,eax
c0008f34:	5b                   	pop    ebx
c0008f35:	5e                   	pop    esi
c0008f36:	5f                   	pop    edi
c0008f37:	5d                   	pop    ebp
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop

c0008f3a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008f3a:	55                   	push   ebp
c0008f3b:	57                   	push   edi
c0008f3c:	56                   	push   esi
c0008f3d:	53                   	push   ebx
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f4a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f51:	50                   	push   eax
c0008f52:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f57:	50                   	push   eax
c0008f58:	e8 b9 fa ff ff       	call   c0008a16 <VgaText::combineColours(unsigned char, unsigned char)>
c0008f5d:	5a                   	pop    edx
c0008f5e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f63:	59                   	pop    ecx
c0008f64:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f67:	89 c5                	mov    ebp,eax
c0008f69:	0f b7 f6             	movzx  esi,si
c0008f6c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f70:	01 f6                	add    esi,esi
c0008f72:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f75:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f78:	84 c0                	test   al,al
c0008f7a:	0f 84 f4 00 00 00    	je     c0009074 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f80:	3c 0d                	cmp    al,0xd
c0008f82:	75 0c                	jne    c0008f90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f84:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f8b:	e9 de 00 00 00       	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f90:	3c 0a                	cmp    al,0xa
c0008f92:	75 45                	jne    c0008fd9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008f94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f97:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f9e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008fa1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008fa4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008fa7:	75 0f                	jne    c0008fb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008fa9:	83 ec 0c             	sub    esp,0xc
c0008fac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008faf:	53                   	push   ebx
c0008fb0:	e8 73 fa ff ff       	call   c0008a28 <VgaText::scrollScreen()>
c0008fb5:	83 c4 10             	add    esp,0x10
c0008fb8:	83 ec 0c             	sub    esp,0xc
c0008fbb:	53                   	push   ebx
c0008fbc:	e8 71 f9 ff ff       	call   c0008932 <VgaText::updateCursor()>
c0008fc1:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fcc:	0f b7 f6             	movzx  esi,si
c0008fcf:	01 f6                	add    esi,esi
c0008fd1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fd4:	e9 95 00 00 00       	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fd9:	3c 08                	cmp    al,0x8
c0008fdb:	75 35                	jne    c0009012 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008fdd:	51                   	push   ecx
c0008fde:	51                   	push   ecx
c0008fdf:	6a 01                	push   0x1
c0008fe1:	53                   	push   ebx
c0008fe2:	e8 bf fc ff ff       	call   c0008ca6 <VgaText::decrementCursor(bool)>
c0008fe7:	5e                   	pop    esi
c0008fe8:	58                   	pop    eax
c0008fe9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fec:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008fef:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ff2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ff5:	6a 20                	push   0x20
c0008ff7:	53                   	push   ebx
c0008ff8:	e8 d5 fa ff ff       	call   c0008ad2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008ffd:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009002:	83 c4 20             	add    esp,0x20
c0009005:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0009008:	0f b7 f6             	movzx  esi,si
c000900b:	01 f6                	add    esi,esi
c000900d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009010:	eb 5c                	jmp    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009012:	52                   	push   edx
c0009013:	52                   	push   edx
c0009014:	89 ea                	mov    edx,ebp
c0009016:	0f b6 ca             	movzx  ecx,dl
c0009019:	51                   	push   ecx
c000901a:	50                   	push   eax
c000901b:	e8 a0 fa ff ff       	call   c0008ac0 <VgaText::combineCharAndColour(char, unsigned char)>
c0009020:	83 c4 10             	add    esp,0x10
c0009023:	66 89 06             	mov    WORD PTR [esi],ax
c0009026:	39 1d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebx
c000902c:	75 1d                	jne    c000904b <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000902e:	83 ec 0c             	sub    esp,0xc
c0009031:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009034:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009037:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000903b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000903f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0009042:	50                   	push   eax
c0009043:	e8 e8 d3 00 00       	call   c0016430 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0009048:	83 c4 20             	add    esp,0x20
c000904b:	83 c6 02             	add    esi,0x2
c000904e:	50                   	push   eax
c000904f:	50                   	push   eax
c0009050:	6a 00                	push   0x0
c0009052:	53                   	push   ebx
c0009053:	e8 fa fb ff ff       	call   c0008c52 <VgaText::incrementCursor(bool)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000905f:	75 0d                	jne    c000906e <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009061:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0009066:	0f b7 f6             	movzx  esi,si
c0009069:	01 f6                	add    esi,esi
c000906b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000906e:	47                   	inc    edi
c000906f:	e9 01 ff ff ff       	jmp    c0008f75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0009074:	83 ec 0c             	sub    esp,0xc
c0009077:	53                   	push   ebx
c0009078:	e8 b5 f8 ff ff       	call   c0008932 <VgaText::updateCursor()>
c000907d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0009084:	83 c4 1c             	add    esp,0x1c
c0009087:	5b                   	pop    ebx
c0009088:	5e                   	pop    esi
c0009089:	5f                   	pop    edi
c000908a:	5d                   	pop    ebp
c000908b:	c3                   	ret    

c000908c <VgaText::VgaText(char const*)>:
c000908c:	56                   	push   esi
c000908d:	53                   	push   ebx
c000908e:	83 ec 04             	sub    esp,0x4
c0009091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009095:	83 ec 08             	sub    esp,0x8
c0009098:	6a 00                	push   0x0
c000909a:	50                   	push   eax
c000909b:	e8 b2 04 00 00       	call   c0009552 <UnixFile::UnixFile(int)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	ba 20 d9 01 c0       	mov    edx,0xc001d920
c00090a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ac:	89 10                	mov    DWORD PTR [eax],edx
c00090ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00090c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00090cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00090d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00090df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ee:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00090f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0009100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009104:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	6a 01                	push   0x1
c0009110:	e8 80 08 00 00       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c0009115:	83 c4 10             	add    esp,0x10
c0009118:	89 c2                	mov    edx,eax
c000911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000911e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009121:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c0009127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000912b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000912e:	89 c6                	mov    esi,eax
c0009130:	e8 f1 f0 ff ff       	call   c0008226 <Phys::allocatePage()>
c0009135:	68 05 0c 00 00       	push   0xc05
c000913a:	56                   	push   esi
c000913b:	50                   	push   eax
c000913c:	53                   	push   ebx
c000913d:	e8 e8 0e 00 00       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009142:	83 c4 10             	add    esp,0x10
c0009145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009149:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000914c:	83 ec 04             	sub    esp,0x4
c000914f:	68 a0 0f 00 00       	push   0xfa0
c0009154:	6a 00                	push   0x0
c0009156:	50                   	push   eax
c0009157:	e8 94 73 ff ff       	call   c00004f0 <memset>
c000915c:	83 c4 10             	add    esp,0x10
c000915f:	83 ec 04             	sub    esp,0x4
c0009162:	6a 00                	push   0x0
c0009164:	6a 07                	push   0x7
c0009166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000916a:	e8 6d f8 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	83 ec 04             	sub    esp,0x4
c0009175:	6a 00                	push   0x0
c0009177:	6a 00                	push   0x0
c0009179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000917d:	e8 f0 f9 ff ff       	call   c0008b72 <VgaText::setCursor(int, int)>
c0009182:	83 c4 10             	add    esp,0x10
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918c:	e8 43 fa ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c0009191:	83 c4 10             	add    esp,0x10
c0009194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009198:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000919c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a0:	05 82 00 00 00       	add    eax,0x82
c00091a5:	83 ec 04             	sub    esp,0x4
c00091a8:	6a 30                	push   0x30
c00091aa:	6a 00                	push   0x0
c00091ac:	50                   	push   eax
c00091ad:	e8 3e 73 ff ff       	call   c00004f0 <memset>
c00091b2:	83 c4 10             	add    esp,0x10
c00091b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b9:	05 b2 00 00 00       	add    eax,0xb2
c00091be:	83 ec 04             	sub    esp,0x4
c00091c1:	68 80 00 00 00       	push   0x80
c00091c6:	6a 00                	push   0x0
c00091c8:	50                   	push   eax
c00091c9:	e8 22 73 ff ff       	call   c00004f0 <memset>
c00091ce:	83 c4 10             	add    esp,0x10
c00091d1:	90                   	nop
c00091d2:	83 c4 04             	add    esp,0x4
c00091d5:	5b                   	pop    ebx
c00091d6:	5e                   	pop    esi
c00091d7:	c3                   	ret    

c00091d8 <VgaText::receiveKey(unsigned char)>:
c00091d8:	57                   	push   edi
c00091d9:	56                   	push   esi
c00091da:	53                   	push   ebx
c00091db:	83 ec 10             	sub    esp,0x10
c00091de:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091e2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091e6:	84 db                	test   bl,bl
c00091e8:	0f 84 ba 00 00 00    	je     c00092a8 <VgaText::receiveKey(unsigned char)+0xd0>
c00091ee:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c00091f4:	80 fb 08             	cmp    bl,0x8
c00091f7:	75 2c                	jne    c0009225 <VgaText::receiveKey(unsigned char)+0x4d>
c00091f9:	83 ec 0c             	sub    esp,0xc
c00091fc:	57                   	push   edi
c00091fd:	e8 5e 73 ff ff       	call   c0000560 <strlen>
c0009202:	83 c4 10             	add    esp,0x10
c0009205:	85 c0                	test   eax,eax
c0009207:	74 41                	je     c000924a <VgaText::receiveKey(unsigned char)+0x72>
c0009209:	50                   	push   eax
c000920a:	50                   	push   eax
c000920b:	6a 08                	push   0x8
c000920d:	56                   	push   esi
c000920e:	e8 83 fb ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0009213:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009216:	e8 45 73 ff ff       	call   c0000560 <strlen>
c000921b:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0009223:	eb 22                	jmp    c0009247 <VgaText::receiveKey(unsigned char)+0x6f>
c0009225:	0f be c3             	movsx  eax,bl
c0009228:	52                   	push   edx
c0009229:	52                   	push   edx
c000922a:	50                   	push   eax
c000922b:	56                   	push   esi
c000922c:	e8 65 fb ff ff       	call   c0008d96 <VgaText::putchar(char)>
c0009231:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0009235:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000923a:	59                   	pop    ecx
c000923b:	58                   	pop    eax
c000923c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009240:	50                   	push   eax
c0009241:	57                   	push   edi
c0009242:	e8 99 75 ff ff       	call   c00007e0 <strcat>
c0009247:	83 c4 10             	add    esp,0x10
c000924a:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009251:	75 05                	jne    c0009258 <VgaText::receiveKey(unsigned char)+0x80>
c0009253:	80 fb 0a             	cmp    bl,0xa
c0009256:	75 50                	jne    c00092a8 <VgaText::receiveKey(unsigned char)+0xd0>
c0009258:	83 ec 0c             	sub    esp,0xc
c000925b:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009261:	56                   	push   esi
c0009262:	e8 f9 72 ff ff       	call   c0000560 <strlen>
c0009267:	89 3c 24             	mov    DWORD PTR [esp],edi
c000926a:	89 c3                	mov    ebx,eax
c000926c:	e8 ef 72 ff ff       	call   c0000560 <strlen>
c0009271:	83 c4 10             	add    esp,0x10
c0009274:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0009278:	3d 80 00 00 00       	cmp    eax,0x80
c000927d:	76 10                	jbe    c000928f <VgaText::receiveKey(unsigned char)+0xb7>
c000927f:	83 ec 0c             	sub    esp,0xc
c0009282:	68 cb d8 01 c0       	push   0xc001d8cb
c0009287:	e8 47 74 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000928c:	83 c4 10             	add    esp,0x10
c000928f:	50                   	push   eax
c0009290:	50                   	push   eax
c0009291:	57                   	push   edi
c0009292:	56                   	push   esi
c0009293:	e8 48 75 ff ff       	call   c00007e0 <strcat>
c0009298:	83 c4 0c             	add    esp,0xc
c000929b:	6a 30                	push   0x30
c000929d:	6a 00                	push   0x0
c000929f:	57                   	push   edi
c00092a0:	e8 4b 72 ff ff       	call   c00004f0 <memset>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	5b                   	pop    ebx
c00092ac:	5e                   	pop    esi
c00092ad:	5f                   	pop    edi
c00092ae:	c3                   	ret    
c00092af:	90                   	nop

c00092b0 <VgaText::doUpdate()>:
c00092b0:	c3                   	ret    

c00092b1 <newTerminal(char*)>:
c00092b1:	83 ec 28             	sub    esp,0x28
c00092b4:	68 34 01 00 00       	push   0x134
c00092b9:	e8 9b eb ff ff       	call   c0007e59 <malloc>
c00092be:	5a                   	pop    edx
c00092bf:	59                   	pop    ecx
c00092c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092c4:	50                   	push   eax
c00092c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092c9:	e8 be fd ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c00092ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d2:	83 c4 2c             	add    esp,0x2c
c00092d5:	c3                   	ret    
c00092d6:	66 90                	xchg   ax,ax

c00092d8 <TSS::TSS()>:
c00092d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092e3:	90                   	nop
c00092e4:	c3                   	ret    
c00092e5:	90                   	nop
c00092e6:	66 90                	xchg   ax,ax

c00092e8 <TSS::setESP(unsigned long)>:
c00092e8:	55                   	push   ebp
c00092e9:	89 e5                	mov    ebp,esp
c00092eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092f7:	90                   	nop
c00092f8:	5d                   	pop    ebp
c00092f9:	c3                   	ret    
c00092fa:	66 90                	xchg   ax,ax

c00092fc <TSS::flush()>:
c00092fc:	55                   	push   ebp
c00092fd:	89 e5                	mov    ebp,esp
c00092ff:	83 ec 10             	sub    esp,0x10
c0009302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009305:	8b 00                	mov    eax,DWORD PTR [eax]
c0009307:	83 c8 03             	or     eax,0x3
c000930a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000930e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0009312:	66 89 d0             	mov    ax,dx
c0009315:	0f 00 d8             	ltr    ax
c0009318:	90                   	nop
c0009319:	c9                   	leave  
c000931a:	c3                   	ret    
c000931b:	90                   	nop

c000931c <TSS::setup(unsigned long, unsigned long)>:
c000931c:	55                   	push   ebp
c000931d:	89 e5                	mov    ebp,esp
c000931f:	83 ec 18             	sub    esp,0x18
c0009322:	83 ec 0c             	sub    esp,0xc
c0009325:	6a 68                	push   0x68
c0009327:	e8 2d eb ff ff       	call   c0007e59 <malloc>
c000932c:	83 c4 10             	add    esp,0x10
c000932f:	89 c2                	mov    edx,eax
c0009331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009334:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000933a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000933d:	83 ec 04             	sub    esp,0x4
c0009340:	6a 68                	push   0x68
c0009342:	6a 00                	push   0x0
c0009344:	50                   	push   eax
c0009345:	e8 a6 71 ff ff       	call   c00004f0 <memset>
c000934a:	83 c4 10             	add    esp,0x10
c000934d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009353:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000935c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000935f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000936b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000936e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009377:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000937d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009380:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009383:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000938c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000938f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000939b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00093a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00093ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00093b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093bf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00093c2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00093c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00093ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00093d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00093de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093e4:	0f 20 da             	mov    edx,cr3
c00093e7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00093ed:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00093f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	50                   	push   eax
c00093fa:	8d 45 ec             	lea    eax,[ebp-0x14]
c00093fd:	50                   	push   eax
c00093fe:	e8 e1 e2 ff ff       	call   c00076e4 <GDTEntry::setBase(unsigned int)>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	6a 68                	push   0x68
c000940b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000940e:	50                   	push   eax
c000940f:	e8 ec e2 ff ff       	call   c0007700 <GDTEntry::setLimit(unsigned int)>
c0009414:	83 c4 10             	add    esp,0x10
c0009417:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000941b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000941e:	83 e0 0f             	and    eax,0xf
c0009421:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009424:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009427:	83 c8 40             	or     eax,0x40
c000942a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000942d:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0009432:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009438:	05 78 01 00 00       	add    eax,0x178
c000943d:	83 ec 04             	sub    esp,0x4
c0009440:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009443:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009446:	50                   	push   eax
c0009447:	e8 e8 e2 ff ff       	call   c0007734 <GDT::addEntry(GDTEntry)>
c000944c:	83 c4 10             	add    esp,0x10
c000944f:	89 c2                	mov    edx,eax
c0009451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009454:	89 10                	mov    DWORD PTR [eax],edx
c0009456:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000945b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009461:	05 78 01 00 00       	add    eax,0x178
c0009466:	83 ec 0c             	sub    esp,0xc
c0009469:	50                   	push   eax
c000946a:	e8 ef e2 ff ff       	call   c000775e <GDT::flush()>
c000946f:	83 c4 10             	add    esp,0x10
c0009472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009475:	8b 00                	mov    eax,DWORD PTR [eax]
c0009477:	c9                   	leave  
c0009478:	c3                   	ret    
c0009479:	90                   	nop

c000947a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000947a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000947e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009485:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000948a:	75 08                	jne    c0009494 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000948c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009492:	eb 38                	jmp    c00094cc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009494:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009499:	75 17                	jne    c00094b2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000949b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00094a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00094a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00094ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094af:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00094b2:	89 c1                	mov    ecx,eax
c00094b4:	83 e1 fd             	and    ecx,0xfffffffd
c00094b7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00094bd:	74 cd                	je     c000948c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094bf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094c4:	83 e0 ef             	and    eax,0xffffffef
c00094c7:	83 f8 08             	cmp    eax,0x8
c00094ca:	76 c0                	jbe    c000948c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094cc:	31 c0                	xor    eax,eax
c00094ce:	c3                   	ret    
c00094cf:	90                   	nop

c00094d0 <ReservedFilename::isAtty()>:
c00094d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00094d7:	31 c0                	xor    eax,eax
c00094d9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00094df:	74 09                	je     c00094ea <ReservedFilename::isAtty()+0x1a>
c00094e1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094e7:	0f 94 c0             	sete   al
c00094ea:	c3                   	ret    
c00094eb:	90                   	nop

c00094ec <ReservedFilename::write(unsigned long long, void*, int*)>:
c00094ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00094f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00094f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094fb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009500:	75 08                	jne    c000950a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009502:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009508:	eb 3d                	jmp    c0009547 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000950a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000950f:	75 17                	jne    c0009528 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009516:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009519:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000951f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009521:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009525:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009528:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000952d:	75 04                	jne    c0009533 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000952f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009531:	eb 14                	jmp    c0009547 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009533:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009538:	74 c8                	je     c0009502 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000953a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000953f:	83 e0 ef             	and    eax,0xffffffef
c0009542:	83 f8 08             	cmp    eax,0x8
c0009545:	76 bb                	jbe    c0009502 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009547:	31 c0                	xor    eax,eax
c0009549:	c3                   	ret    

c000954a <UnixFile::getFileDescriptor()>:
c000954a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000954e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009551:	c3                   	ret    

c0009552 <UnixFile::UnixFile(int)>:
c0009552:	53                   	push   ebx
c0009553:	83 ec 28             	sub    esp,0x28
c0009556:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c000955b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000955f:	89 10                	mov    DWORD PTR [eax],edx
c0009561:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009569:	0f 8f 8c 01 00 00    	jg     c00096fb <UnixFile::UnixFile(int)+0x1a9>
c000956f:	a1 80 f8 01 c0       	mov    eax,ds:0xc001f880
c0009574:	8d 50 01             	lea    edx,[eax+0x1]
c0009577:	89 15 80 f8 01 c0    	mov    DWORD PTR ds:0xc001f880,edx
c000957d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009581:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009584:	83 ec 08             	sub    esp,0x8
c0009587:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000958b:	68 18 0a 02 c0       	push   0xc0020a18
c0009590:	e8 f3 2e 01 00       	call   c001c488 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009595:	83 c4 10             	add    esp,0x10
c0009598:	a0 14 0a 02 c0       	mov    al,ds:0xc0020a14
c000959d:	83 f0 01             	xor    eax,0x1
c00095a0:	84 c0                	test   al,al
c00095a2:	0f 84 54 01 00 00    	je     c00096fc <UnixFile::UnixFile(int)+0x1aa>
c00095a8:	c6 05 14 0a 02 c0 01 	mov    BYTE PTR ds:0xc0020a14,0x1
c00095af:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00095b7:	83 ec 0c             	sub    esp,0xc
c00095ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095be:	e8 96 e8 ff ff       	call   c0007e59 <malloc>
c00095c3:	83 c4 10             	add    esp,0x10
c00095c6:	89 c3                	mov    ebx,eax
c00095c8:	83 ec 08             	sub    esp,0x8
c00095cb:	68 03 ff ff 0f       	push   0xfffff03
c00095d0:	53                   	push   ebx
c00095d1:	e8 2c 01 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00095d6:	83 c4 10             	add    esp,0x10
c00095d9:	89 1d 0c 0a 02 c0    	mov    DWORD PTR ds:0xc0020a0c,ebx
c00095df:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095e7:	83 ec 0c             	sub    esp,0xc
c00095ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ee:	e8 66 e8 ff ff       	call   c0007e59 <malloc>
c00095f3:	83 c4 10             	add    esp,0x10
c00095f6:	89 c3                	mov    ebx,eax
c00095f8:	83 ec 08             	sub    esp,0x8
c00095fb:	68 01 ff ff 0f       	push   0xfffff01
c0009600:	53                   	push   ebx
c0009601:	e8 fc 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009606:	83 c4 10             	add    esp,0x10
c0009609:	89 1d 10 0a 02 c0    	mov    DWORD PTR ds:0xc0020a10,ebx
c000960f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000961e:	e8 36 e8 ff ff       	call   c0007e59 <malloc>
c0009623:	83 c4 10             	add    esp,0x10
c0009626:	89 c3                	mov    ebx,eax
c0009628:	83 ec 08             	sub    esp,0x8
c000962b:	68 00 ff ff 0f       	push   0xfffff00
c0009630:	53                   	push   ebx
c0009631:	e8 cc 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	89 1d 04 0a 02 c0    	mov    DWORD PTR ds:0xc0020a04,ebx
c000963f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000964e:	e8 06 e8 ff ff       	call   c0007e59 <malloc>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 c3                	mov    ebx,eax
c0009658:	83 ec 08             	sub    esp,0x8
c000965b:	68 02 ff ff 0f       	push   0xfffff02
c0009660:	53                   	push   ebx
c0009661:	e8 9c 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c0009666:	83 c4 10             	add    esp,0x10
c0009669:	89 1d 08 0a 02 c0    	mov    DWORD PTR ds:0xc0020a08,ebx
c000966f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009677:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000967c:	7f 7e                	jg     c00096fc <UnixFile::UnixFile(int)+0x1aa>
c000967e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009686:	83 ec 0c             	sub    esp,0xc
c0009689:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000968d:	e8 c7 e7 ff ff       	call   c0007e59 <malloc>
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	89 c3                	mov    ebx,eax
c0009697:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000969b:	05 10 ff ff 0f       	add    eax,0xfffff10
c00096a0:	83 ec 08             	sub    esp,0x8
c00096a3:	50                   	push   eax
c00096a4:	53                   	push   ebx
c00096a5:	e8 58 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096b1:	89 1c 85 e0 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf620],ebx
c00096b8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00096c0:	83 ec 0c             	sub    esp,0xc
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 8d e7 ff ff       	call   c0007e59 <malloc>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	89 c3                	mov    ebx,eax
c00096d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00096da:	83 ec 08             	sub    esp,0x8
c00096dd:	50                   	push   eax
c00096de:	53                   	push   ebx
c00096df:	e8 1e 00 00 00       	call   c0009702 <ReservedFilename::ReservedFilename(int)>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096eb:	89 1c 85 a0 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf660],ebx
c00096f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00096f6:	e9 7c ff ff ff       	jmp    c0009677 <UnixFile::UnixFile(int)+0x125>
c00096fb:	90                   	nop
c00096fc:	83 c4 28             	add    esp,0x28
c00096ff:	5b                   	pop    ebx
c0009700:	c3                   	ret    
c0009701:	90                   	nop

c0009702 <ReservedFilename::ReservedFilename(int)>:
c0009702:	83 ec 0c             	sub    esp,0xc
c0009705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009709:	83 ec 08             	sub    esp,0x8
c000970c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009710:	50                   	push   eax
c0009711:	e8 3c fe ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c0009716:	83 c4 10             	add    esp,0x10
c0009719:	ba 04 da 01 c0       	mov    edx,0xc001da04
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	89 10                	mov    DWORD PTR [eax],edx
c0009724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000972c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000972f:	90                   	nop
c0009730:	83 c4 0c             	add    esp,0xc
c0009733:	c3                   	ret    

c0009734 <UnixFile::~UnixFile()>:
c0009734:	83 ec 1c             	sub    esp,0x1c
c0009737:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c000973c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009740:	89 10                	mov    DWORD PTR [eax],edx
c0009742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009749:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000974e:	7f 73                	jg     c00097c3 <UnixFile::~UnixFile()+0x8f>
c0009750:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009758:	83 ec 0c             	sub    esp,0xc
c000975b:	68 18 0a 02 c0       	push   0xc0020a18
c0009760:	e8 f7 2d 01 00       	call   c001c55c <LinkedList<UnixFile>::getFirstElement()>
c0009765:	83 c4 10             	add    esp,0x10
c0009768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000976c:	83 ec 0c             	sub    esp,0xc
c000976f:	68 18 0a 02 c0       	push   0xc0020a18
c0009774:	e8 eb 2d 01 00       	call   c001c564 <LinkedList<UnixFile>::removeFirst()>
c0009779:	83 c4 10             	add    esp,0x10
c000977c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009780:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009784:	74 40                	je     c00097c6 <UnixFile::~UnixFile()+0x92>
c0009786:	83 ec 08             	sub    esp,0x8
c0009789:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000978d:	68 18 0a 02 c0       	push   0xc0020a18
c0009792:	e8 f1 2c 01 00       	call   c001c488 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009797:	83 c4 10             	add    esp,0x10
c000979a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000979e:	8d 50 01             	lea    edx,[eax+0x1]
c00097a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097a5:	3d 88 13 00 00       	cmp    eax,0x1388
c00097aa:	0f 94 c0             	sete   al
c00097ad:	84 c0                	test   al,al
c00097af:	74 a7                	je     c0009758 <UnixFile::~UnixFile()+0x24>
c00097b1:	83 ec 0c             	sub    esp,0xc
c00097b4:	68 c0 d9 01 c0       	push   0xc001d9c0
c00097b9:	e8 15 6f 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c00097be:	83 c4 10             	add    esp,0x10
c00097c1:	eb 95                	jmp    c0009758 <UnixFile::~UnixFile()+0x24>
c00097c3:	90                   	nop
c00097c4:	eb 01                	jmp    c00097c7 <UnixFile::~UnixFile()+0x93>
c00097c6:	90                   	nop
c00097c7:	90                   	nop
c00097c8:	83 c4 1c             	add    esp,0x1c
c00097cb:	c3                   	ret    

c00097cc <UnixFile::~UnixFile()>:
c00097cc:	83 ec 0c             	sub    esp,0xc
c00097cf:	83 ec 0c             	sub    esp,0xc
c00097d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097d6:	e8 59 ff ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c00097db:	83 c4 10             	add    esp,0x10
c00097de:	83 ec 08             	sub    esp,0x8
c00097e1:	6a 0c                	push   0xc
c00097e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097e7:	e8 06 13 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	83 c4 0c             	add    esp,0xc
c00097f2:	c3                   	ret    
c00097f3:	90                   	nop

c00097f4 <ReservedFilename::~ReservedFilename()>:
c00097f4:	83 ec 0c             	sub    esp,0xc
c00097f7:	ba 04 da 01 c0       	mov    edx,0xc001da04
c00097fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009800:	89 10                	mov    DWORD PTR [eax],edx
c0009802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009806:	83 ec 0c             	sub    esp,0xc
c0009809:	50                   	push   eax
c000980a:	e8 25 ff ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	90                   	nop
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	c3                   	ret    
c0009817:	90                   	nop

c0009818 <ReservedFilename::~ReservedFilename()>:
c0009818:	83 ec 0c             	sub    esp,0xc
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009822:	e8 cd ff ff ff       	call   c00097f4 <ReservedFilename::~ReservedFilename()>
c0009827:	83 c4 10             	add    esp,0x10
c000982a:	83 ec 08             	sub    esp,0x8
c000982d:	6a 0c                	push   0xc
c000982f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009833:	e8 ba 12 00 00       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0009838:	83 c4 10             	add    esp,0x10
c000983b:	83 c4 0c             	add    esp,0xc
c000983e:	c3                   	ret    

c000983f <getFromFileDescriptor(int)>:
c000983f:	53                   	push   ebx
c0009840:	83 ec 08             	sub    esp,0x8
c0009843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009847:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000984d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009853:	7f 2c                	jg     c0009881 <getFromFileDescriptor(int)+0x42>
c0009855:	83 ec 0c             	sub    esp,0xc
c0009858:	68 18 0a 02 c0       	push   0xc0020a18
c000985d:	e8 fa 2c 01 00       	call   c001c55c <LinkedList<UnixFile>::getFirstElement()>
c0009862:	83 c4 10             	add    esp,0x10
c0009865:	85 c0                	test   eax,eax
c0009867:	75 04                	jne    c000986d <getFromFileDescriptor(int)+0x2e>
c0009869:	31 c0                	xor    eax,eax
c000986b:	eb 6e                	jmp    c00098db <getFromFileDescriptor(int)+0x9c>
c000986d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009870:	74 69                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c0009872:	52                   	push   edx
c0009873:	52                   	push   edx
c0009874:	50                   	push   eax
c0009875:	68 18 0a 02 c0       	push   0xc0020a18
c000987a:	e8 87 2d 01 00       	call   c001c606 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000987f:	eb e1                	jmp    c0009862 <getFromFileDescriptor(int)+0x23>
c0009881:	a1 0c 0a 02 c0       	mov    eax,ds:0xc0020a0c
c0009886:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000988c:	74 4d                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c000988e:	a1 10 0a 02 c0       	mov    eax,ds:0xc0020a10
c0009893:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009899:	74 40                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c000989b:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c00098a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00098a6:	74 33                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c00098a8:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c00098ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00098b3:	74 26                	je     c00098db <getFromFileDescriptor(int)+0x9c>
c00098b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00098bb:	83 f8 08             	cmp    eax,0x8
c00098be:	77 09                	ja     c00098c9 <getFromFileDescriptor(int)+0x8a>
c00098c0:	8b 04 85 e0 09 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf620]
c00098c7:	eb 12                	jmp    c00098db <getFromFileDescriptor(int)+0x9c>
c00098c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00098cf:	83 fb 08             	cmp    ebx,0x8
c00098d2:	77 95                	ja     c0009869 <getFromFileDescriptor(int)+0x2a>
c00098d4:	8b 04 9d a0 09 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf660]
c00098db:	83 c4 08             	add    esp,0x8
c00098de:	5b                   	pop    ebx
c00098df:	c3                   	ret    

c00098e0 <__static_initialization_and_destruction_0(int, int)>:
c00098e0:	83 ec 0c             	sub    esp,0xc
c00098e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098e8:	75 34                	jne    c000991e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00098f2:	75 2a                	jne    c000991e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098f4:	83 ec 0c             	sub    esp,0xc
c00098f7:	68 18 0a 02 c0       	push   0xc0020a18
c00098fc:	e8 45 2b 01 00       	call   c001c446 <LinkedList<UnixFile>::LinkedList()>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	83 ec 04             	sub    esp,0x4
c0009907:	68 b8 f6 01 c0       	push   0xc001f6b8
c000990c:	68 18 0a 02 c0       	push   0xc0020a18
c0009911:	68 44 c4 01 c0       	push   0xc001c444
c0009916:	e8 87 11 00 00       	call   c000aaa2 <__cxa_atexit>
c000991b:	83 c4 10             	add    esp,0x10
c000991e:	90                   	nop
c000991f:	83 c4 0c             	add    esp,0xc
c0009922:	c3                   	ret    

c0009923 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009923:	83 ec 0c             	sub    esp,0xc
c0009926:	83 ec 08             	sub    esp,0x8
c0009929:	68 ff ff 00 00       	push   0xffff
c000992e:	6a 01                	push   0x1
c0009930:	e8 ab ff ff ff       	call   c00098e0 <__static_initialization_and_destruction_0(int, int)>
c0009935:	83 c4 10             	add    esp,0x10
c0009938:	83 c4 0c             	add    esp,0xc
c000993b:	c3                   	ret    

c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000993c:	53                   	push   ebx
c000993d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009941:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009945:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000994b:	89 c8                	mov    eax,ecx
c000994d:	d1 e8                	shr    eax,1
c000994f:	03 05 88 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f888
c0009955:	83 e1 01             	and    ecx,0x1
c0009958:	8a 10                	mov    dl,BYTE PTR [eax]
c000995a:	75 09                	jne    c0009965 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000995c:	83 e2 f0             	and    edx,0xfffffff0
c000995f:	09 da                	or     edx,ebx
c0009961:	88 10                	mov    BYTE PTR [eax],dl
c0009963:	5b                   	pop    ebx
c0009964:	c3                   	ret    
c0009965:	c1 e3 04             	shl    ebx,0x4
c0009968:	83 e2 0f             	and    edx,0xf
c000996b:	09 da                	or     edx,ebx
c000996d:	88 10                	mov    BYTE PTR [eax],dl
c000996f:	5b                   	pop    ebx
c0009970:	c3                   	ret    

c0009971 <Virt::getPageState(unsigned long)>:
c0009971:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009975:	8b 0d 88 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f888
c000997b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009981:	89 d0                	mov    eax,edx
c0009983:	d1 e8                	shr    eax,1
c0009985:	83 e2 01             	and    edx,0x1
c0009988:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000998b:	75 04                	jne    c0009991 <Virt::getPageState(unsigned long)+0x20>
c000998d:	83 e0 0f             	and    eax,0xf
c0009990:	c3                   	ret    
c0009991:	c0 e8 04             	shr    al,0x4
c0009994:	c3                   	ret    

c0009995 <Virt::allocateKernelVirtualPages(int)>:
c0009995:	55                   	push   ebp
c0009996:	31 ed                	xor    ebp,ebp
c0009998:	57                   	push   edi
c0009999:	56                   	push   esi
c000999a:	53                   	push   ebx
c000999b:	31 db                	xor    ebx,ebx
c000999d:	83 ec 1c             	sub    esp,0x1c
c00099a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00099a4:	8b 3d 84 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f884
c00099aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00099af:	57                   	push   edi
c00099b0:	e8 bc ff ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c00099b5:	5a                   	pop    edx
c00099b6:	84 c0                	test   al,al
c00099b8:	75 3a                	jne    c00099f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00099ba:	85 db                	test   ebx,ebx
c00099bc:	75 02                	jne    c00099c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00099be:	89 fd                	mov    ebp,edi
c00099c0:	43                   	inc    ebx
c00099c1:	39 f3                	cmp    ebx,esi
c00099c3:	74 5a                	je     c0009a1f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00099c5:	47                   	inc    edi
c00099c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099cc:	76 31                	jbe    c00099ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c00099ce:	c7 05 84 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f884,0xc8000
c00099d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00099dd:	75 28                	jne    c0009a07 <Virt::allocateKernelVirtualPages(int)+0x72>
c00099df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099e9:	57                   	push   edi
c00099ea:	e8 82 ff ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c00099ef:	5a                   	pop    edx
c00099f0:	84 c0                	test   al,al
c00099f2:	74 c6                	je     c00099ba <Virt::allocateKernelVirtualPages(int)+0x25>
c00099f4:	31 db                	xor    ebx,ebx
c00099f6:	47                   	inc    edi
c00099f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099fd:	77 cf                	ja     c00099ce <Virt::allocateKernelVirtualPages(int)+0x39>
c00099ff:	89 3d 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,edi
c0009a05:	eb a8                	jmp    c00099af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a07:	83 ec 0c             	sub    esp,0xc
c0009a0a:	68 18 da 01 c0       	push   0xc001da18
c0009a0f:	e8 bf 6c 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0009a14:	8b 3d 84 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f884
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	eb 90                	jmp    c00099af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a1f:	89 2d 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,ebp
c0009a25:	4b                   	dec    ebx
c0009a26:	74 5f                	je     c0009a87 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009a28:	85 f6                	test   esi,esi
c0009a2a:	74 3d                	je     c0009a69 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a2c:	89 e8                	mov    eax,ebp
c0009a2e:	31 db                	xor    ebx,ebx
c0009a30:	8d 7e ff             	lea    edi,[esi-0x1]
c0009a33:	eb 14                	jmp    c0009a49 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009a35:	6a 01                	push   0x1
c0009a37:	43                   	inc    ebx
c0009a38:	50                   	push   eax
c0009a39:	e8 fe fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3e:	58                   	pop    eax
c0009a3f:	39 f3                	cmp    ebx,esi
c0009a41:	5a                   	pop    edx
c0009a42:	74 25                	je     c0009a69 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a44:	a1 84 f8 01 c0       	mov    eax,ds:0xc001f884
c0009a49:	8d 50 01             	lea    edx,[eax+0x1]
c0009a4c:	85 db                	test   ebx,ebx
c0009a4e:	89 15 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,edx
c0009a54:	74 20                	je     c0009a76 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a56:	39 df                	cmp    edi,ebx
c0009a58:	75 db                	jne    c0009a35 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a5a:	6a 03                	push   0x3
c0009a5c:	43                   	inc    ebx
c0009a5d:	50                   	push   eax
c0009a5e:	e8 d9 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a63:	59                   	pop    ecx
c0009a64:	39 f3                	cmp    ebx,esi
c0009a66:	58                   	pop    eax
c0009a67:	75 db                	jne    c0009a44 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a69:	83 c4 1c             	add    esp,0x1c
c0009a6c:	89 e8                	mov    eax,ebp
c0009a6e:	5b                   	pop    ebx
c0009a6f:	c1 e0 0c             	shl    eax,0xc
c0009a72:	5e                   	pop    esi
c0009a73:	5f                   	pop    edi
c0009a74:	5d                   	pop    ebp
c0009a75:	c3                   	ret    
c0009a76:	6a 02                	push   0x2
c0009a78:	bb 01 00 00 00       	mov    ebx,0x1
c0009a7d:	50                   	push   eax
c0009a7e:	e8 b9 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a83:	58                   	pop    eax
c0009a84:	5a                   	pop    edx
c0009a85:	eb bd                	jmp    c0009a44 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a87:	6a 04                	push   0x4
c0009a89:	8d 45 01             	lea    eax,[ebp+0x1]
c0009a8c:	55                   	push   ebp
c0009a8d:	a3 84 f8 01 c0       	mov    ds:0xc001f884,eax
c0009a92:	e8 a5 fe ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a97:	59                   	pop    ecx
c0009a98:	89 e8                	mov    eax,ebp
c0009a9a:	5b                   	pop    ebx
c0009a9b:	c1 e0 0c             	shl    eax,0xc
c0009a9e:	83 c4 1c             	add    esp,0x1c
c0009aa1:	5b                   	pop    ebx
c0009aa2:	5e                   	pop    esi
c0009aa3:	5f                   	pop    edi
c0009aa4:	5d                   	pop    ebp
c0009aa5:	c3                   	ret    

c0009aa6 <Virt::freeSwapfilePage(unsigned long)>:
c0009aa6:	53                   	push   ebx
c0009aa7:	8b 15 2c 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a2c
c0009aad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ab1:	b8 01 00 00 00       	mov    eax,0x1
c0009ab6:	89 cb                	mov    ebx,ecx
c0009ab8:	d3 e0                	shl    eax,cl
c0009aba:	c1 eb 05             	shr    ebx,0x5
c0009abd:	f7 d0                	not    eax
c0009abf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009ac2:	5b                   	pop    ebx
c0009ac3:	c3                   	ret    

c0009ac4 <Virt::swapIDToSector(unsigned long)>:
c0009ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac8:	0f af 05 8c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f88c
c0009acf:	03 05 94 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f894
c0009ad5:	c3                   	ret    

c0009ad6 <Virt::allocateSwapfilePage()>:
c0009ad6:	55                   	push   ebp
c0009ad7:	31 d2                	xor    edx,edx
c0009ad9:	57                   	push   edi
c0009ada:	56                   	push   esi
c0009adb:	53                   	push   ebx
c0009adc:	83 ec 0c             	sub    esp,0xc
c0009adf:	8b 0d 8c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f88c
c0009ae5:	a1 90 f8 01 c0       	mov    eax,ds:0xc001f890
c0009aea:	f7 f1                	div    ecx
c0009aec:	39 0d 90 f8 01 c0    	cmp    DWORD PTR ds:0xc001f890,ecx
c0009af2:	72 2d                	jb     c0009b21 <Virt::allocateSwapfilePage()+0x4b>
c0009af4:	8b 35 2c 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a2c
c0009afa:	8b 16                	mov    edx,DWORD PTR [esi]
c0009afc:	f6 c2 01             	test   dl,0x1
c0009aff:	74 3c                	je     c0009b3d <Virt::allocateSwapfilePage()+0x67>
c0009b01:	31 c9                	xor    ecx,ecx
c0009b03:	bf 01 00 00 00       	mov    edi,0x1
c0009b08:	eb 12                	jmp    c0009b1c <Virt::allocateSwapfilePage()+0x46>
c0009b0a:	89 fd                	mov    ebp,edi
c0009b0c:	89 ca                	mov    edx,ecx
c0009b0e:	d3 e5                	shl    ebp,cl
c0009b10:	c1 ea 05             	shr    edx,0x5
c0009b13:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009b16:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009b18:	85 ea                	test   edx,ebp
c0009b1a:	74 2a                	je     c0009b46 <Virt::allocateSwapfilePage()+0x70>
c0009b1c:	41                   	inc    ecx
c0009b1d:	39 c8                	cmp    eax,ecx
c0009b1f:	77 e9                	ja     c0009b0a <Virt::allocateSwapfilePage()+0x34>
c0009b21:	83 ec 0c             	sub    esp,0xc
c0009b24:	68 7f db 01 c0       	push   0xc001db7f
c0009b29:	e8 a5 6b 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	31 c9                	xor    ecx,ecx
c0009b33:	83 c4 0c             	add    esp,0xc
c0009b36:	89 c8                	mov    eax,ecx
c0009b38:	5b                   	pop    ebx
c0009b39:	5e                   	pop    esi
c0009b3a:	5f                   	pop    edi
c0009b3b:	5d                   	pop    ebp
c0009b3c:	c3                   	ret    
c0009b3d:	89 f3                	mov    ebx,esi
c0009b3f:	bd 01 00 00 00       	mov    ebp,0x1
c0009b44:	31 c9                	xor    ecx,ecx
c0009b46:	09 ea                	or     edx,ebp
c0009b48:	89 c8                	mov    eax,ecx
c0009b4a:	89 13                	mov    DWORD PTR [ebx],edx
c0009b4c:	83 c4 0c             	add    esp,0xc
c0009b4f:	5b                   	pop    ebx
c0009b50:	5e                   	pop    esi
c0009b51:	5f                   	pop    edi
c0009b52:	5d                   	pop    ebp
c0009b53:	c3                   	ret    

c0009b54 <Virt::virtualMemorySetup()>:
c0009b54:	53                   	push   ebx
c0009b55:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b5a:	6a 0f                	push   0xf
c0009b5c:	53                   	push   ebx
c0009b5d:	43                   	inc    ebx
c0009b5e:	e8 d9 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b63:	58                   	pop    eax
c0009b64:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b6a:	5a                   	pop    edx
c0009b6b:	75 ed                	jne    c0009b5a <Virt::virtualMemorySetup()+0x6>
c0009b6d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b72:	6a 00                	push   0x0
c0009b74:	53                   	push   ebx
c0009b75:	43                   	inc    ebx
c0009b76:	e8 c1 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b7b:	59                   	pop    ecx
c0009b7c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b82:	58                   	pop    eax
c0009b83:	75 ed                	jne    c0009b72 <Virt::virtualMemorySetup()+0x1e>
c0009b85:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b8a:	6a 0f                	push   0xf
c0009b8c:	53                   	push   ebx
c0009b8d:	43                   	inc    ebx
c0009b8e:	e8 a9 fd ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b93:	58                   	pop    eax
c0009b94:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009b9a:	5a                   	pop    edx
c0009b9b:	75 ed                	jne    c0009b8a <Virt::virtualMemorySetup()+0x36>
c0009b9d:	5b                   	pop    ebx
c0009b9e:	c3                   	ret    

c0009b9f <Virt::setupPageSwapping(int)>:
c0009b9f:	53                   	push   ebx
c0009ba0:	83 ec 0c             	sub    esp,0xc
c0009ba3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009ba7:	a1 a8 2e 02 c0       	mov    eax,ds:0xc0022ea8
c0009bac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bb4:	53                   	push   ebx
c0009bb5:	c1 e3 0b             	shl    ebx,0xb
c0009bb8:	68 96 db 01 c0       	push   0xc001db96
c0009bbd:	50                   	push   eax
c0009bbe:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009bc1:	89 1d 90 f8 01 c0    	mov    DWORD PTR ds:0xc001f890,ebx
c0009bc7:	c6 05 98 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f898,0x43
c0009bce:	c1 eb 08             	shr    ebx,0x8
c0009bd1:	a3 94 f8 01 c0       	mov    ds:0xc001f894,eax
c0009bd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bd9:	c7 05 8c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f88c,0x8
c0009be3:	e8 71 e2 ff ff       	call   c0007e59 <malloc>
c0009be8:	83 c4 0c             	add    esp,0xc
c0009beb:	89 c1                	mov    ecx,eax
c0009bed:	a3 2c 0a 02 c0       	mov    ds:0xc0020a2c,eax
c0009bf2:	31 d2                	xor    edx,edx
c0009bf4:	a1 90 f8 01 c0       	mov    eax,ds:0xc001f890
c0009bf9:	f7 35 8c f8 01 c0    	div    DWORD PTR ds:0xc001f88c
c0009bff:	c1 e8 05             	shr    eax,0x5
c0009c02:	50                   	push   eax
c0009c03:	6a 00                	push   0x0
c0009c05:	51                   	push   ecx
c0009c06:	e8 e5 68 ff ff       	call   c00004f0 <memset>
c0009c0b:	83 c4 18             	add    esp,0x18
c0009c0e:	5b                   	pop    ebx
c0009c0f:	c3                   	ret    

c0009c10 <VAS::VAS()>:
c0009c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2a:	a3 30 0a 02 c0       	mov    ds:0xc0020a30,eax
c0009c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c33:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c42:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c49:	90                   	nop
c0009c4a:	c3                   	ret    
c0009c4b:	90                   	nop

c0009c4c <VAS::VAS(VAS*)>:
c0009c4c:	83 ec 0c             	sub    esp,0xc
c0009c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	68 38 da 01 c0       	push   0xc001da38
c0009c6d:	e8 61 6a 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	90                   	nop
c0009c76:	83 c4 0c             	add    esp,0xc
c0009c79:	c3                   	ret    

c0009c7a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c7e:	89 c2                	mov    edx,eax
c0009c80:	c1 e8 0a             	shr    eax,0xa
c0009c83:	c1 ea 16             	shr    edx,0x16
c0009c86:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c8b:	19 c9                	sbb    ecx,ecx
c0009c8d:	c1 e2 0c             	shl    edx,0xc
c0009c90:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009c96:	25 fc 0f 00 00       	and    eax,0xffc
c0009c9b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009ca2:	01 d0                	add    eax,edx
c0009ca4:	c3                   	ret    
c0009ca5:	90                   	nop

c0009ca6 <VAS::getPageTableEntry(unsigned long)>:
c0009ca6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009caa:	89 ca                	mov    edx,ecx
c0009cac:	c1 e9 0a             	shr    ecx,0xa
c0009caf:	c1 ea 16             	shr    edx,0x16
c0009cb2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009cb8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009cbe:	c1 e0 0c             	shl    eax,0xc
c0009cc1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009cc4:	c3                   	ret    

c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009cc5:	57                   	push   edi
c0009cc6:	56                   	push   esi
c0009cc7:	be 01 00 00 00       	mov    esi,0x1
c0009ccc:	53                   	push   ebx
c0009ccd:	83 ec 10             	sub    esp,0x10
c0009cd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cd4:	c1 eb 0c             	shr    ebx,0xc
c0009cd7:	eb 3f                	jmp    c0009d18 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009cd9:	83 ec 08             	sub    esp,0x8
c0009cdc:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0009ce1:	57                   	push   edi
c0009ce2:	50                   	push   eax
c0009ce3:	e8 be ff ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ced:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009cf1:	f6 c4 04             	test   ah,0x4
c0009cf4:	75 60                	jne    c0009d56 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009cf6:	80 fa 04             	cmp    dl,0x4
c0009cf9:	74 79                	je     c0009d74 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009cfb:	80 fa 02             	cmp    dl,0x2
c0009cfe:	0f 84 89 00 00 00    	je     c0009d8d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009d04:	80 fa 03             	cmp    dl,0x3
c0009d07:	0f 84 ae 00 00 00    	je     c0009dbb <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009d0d:	fe ca                	dec    dl
c0009d0f:	0f 84 93 00 00 00    	je     c0009da8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d15:	43                   	inc    ebx
c0009d16:	31 f6                	xor    esi,esi
c0009d18:	53                   	push   ebx
c0009d19:	89 df                	mov    edi,ebx
c0009d1b:	e8 51 fc ff ff       	call   c0009971 <Virt::getPageState(unsigned long)>
c0009d20:	c1 e7 0c             	shl    edi,0xc
c0009d23:	5a                   	pop    edx
c0009d24:	84 c0                	test   al,al
c0009d26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d2a:	75 ad                	jne    c0009cd9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009d2c:	83 ec 0c             	sub    esp,0xc
c0009d2f:	68 ad db 01 c0       	push   0xc001dbad
c0009d34:	e8 9a 69 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0009d39:	5a                   	pop    edx
c0009d3a:	59                   	pop    ecx
c0009d3b:	57                   	push   edi
c0009d3c:	8b 3d 30 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020a30
c0009d42:	57                   	push   edi
c0009d43:	e8 5e ff ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009d48:	83 c4 10             	add    esp,0x10
c0009d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d4d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d51:	f6 c4 04             	test   ah,0x4
c0009d54:	74 bf                	je     c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d56:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d5f:	83 ec 0c             	sub    esp,0xc
c0009d62:	50                   	push   eax
c0009d63:	e8 5c e4 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009d68:	83 c4 10             	add    esp,0x10
c0009d6b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d6f:	80 fa 04             	cmp    dl,0x4
c0009d72:	75 87                	jne    c0009cfb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d74:	89 f0                	mov    eax,esi
c0009d76:	84 c0                	test   al,al
c0009d78:	75 47                	jne    c0009dc1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d7a:	c7 44 24 20 5c da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da5c
c0009d82:	83 c4 10             	add    esp,0x10
c0009d85:	5b                   	pop    ebx
c0009d86:	5e                   	pop    esi
c0009d87:	5f                   	pop    edi
c0009d88:	e9 46 69 00 00       	jmp    c00106d3 <Krnl::panic(char const*)>
c0009d8d:	89 f0                	mov    eax,esi
c0009d8f:	84 c0                	test   al,al
c0009d91:	75 15                	jne    c0009da8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d93:	83 ec 0c             	sub    esp,0xc
c0009d96:	68 c9 db 01 c0       	push   0xc001dbc9
c0009d9b:	e8 33 69 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c0009da0:	83 c4 10             	add    esp,0x10
c0009da3:	e9 6d ff ff ff       	jmp    c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009da8:	83 ec 08             	sub    esp,0x8
c0009dab:	6a 00                	push   0x0
c0009dad:	53                   	push   ebx
c0009dae:	e8 89 fb ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009db3:	83 c4 10             	add    esp,0x10
c0009db6:	e9 5a ff ff ff       	jmp    c0009d15 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009dbb:	89 f0                	mov    eax,esi
c0009dbd:	84 c0                	test   al,al
c0009dbf:	75 15                	jne    c0009dd6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009dc1:	83 ec 08             	sub    esp,0x8
c0009dc4:	6a 00                	push   0x0
c0009dc6:	53                   	push   ebx
c0009dc7:	e8 70 fb ff ff       	call   c000993c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dcc:	83 c4 10             	add    esp,0x10
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	5b                   	pop    ebx
c0009dd3:	5e                   	pop    esi
c0009dd4:	5f                   	pop    edi
c0009dd5:	c3                   	ret    
c0009dd6:	c7 44 24 20 e5 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dbe5
c0009dde:	83 c4 10             	add    esp,0x10
c0009de1:	5b                   	pop    ebx
c0009de2:	5e                   	pop    esi
c0009de3:	5f                   	pop    edi
c0009de4:	e9 ea 68 00 00       	jmp    c00106d3 <Krnl::panic(char const*)>
c0009de9:	90                   	nop

c0009dea <VAS::freeAllocatedPages(unsigned long)>:
c0009dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009dee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009df2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009df6:	74 09                	je     c0009e01 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009df8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009dfc:	e9 c4 fe ff ff       	jmp    c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e01:	c7 44 24 04 80 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da80
c0009e09:	e9 da 0d 00 00       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>

c0009e0e <VAS::virtualToPhysical(unsigned long)>:
c0009e0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e12:	50                   	push   eax
c0009e13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e17:	52                   	push   edx
c0009e18:	e8 89 fe ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009e1d:	59                   	pop    ecx
c0009e1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e20:	5a                   	pop    edx
c0009e21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e26:	c3                   	ret    
c0009e27:	90                   	nop

c0009e28 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009e28:	55                   	push   ebp
c0009e29:	57                   	push   edi
c0009e2a:	56                   	push   esi
c0009e2b:	53                   	push   ebx
c0009e2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e30:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009e34:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e38:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009e3c:	85 db                	test   ebx,ebx
c0009e3e:	7e 22                	jle    c0009e62 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e40:	c1 e3 0c             	shl    ebx,0xc
c0009e43:	01 f3                	add    ebx,esi
c0009e45:	56                   	push   esi
c0009e46:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e4c:	55                   	push   ebp
c0009e4d:	e8 54 fe ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c0009e52:	5a                   	pop    edx
c0009e53:	59                   	pop    ecx
c0009e54:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e56:	21 f9                	and    ecx,edi
c0009e58:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e5c:	39 f3                	cmp    ebx,esi
c0009e5e:	89 08                	mov    DWORD PTR [eax],ecx
c0009e60:	75 e3                	jne    c0009e45 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e62:	5b                   	pop    ebx
c0009e63:	5e                   	pop    esi
c0009e64:	5f                   	pop    edi
c0009e65:	5d                   	pop    ebp
c0009e66:	c3                   	ret    
c0009e67:	90                   	nop

c0009e68 <VAS::setToWriteCombining(unsigned long, int)>:
c0009e68:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0009e6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e73:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e7a:	75 01                	jne    c0009e7d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e7c:	c3                   	ret    
c0009e7d:	68 80 00 00 00       	push   0x80
c0009e82:	6a ff                	push   0xffffffff
c0009e84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e88:	50                   	push   eax
c0009e89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009e8d:	52                   	push   edx
c0009e8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009e92:	51                   	push   ecx
c0009e93:	e8 90 ff ff ff       	call   c0009e28 <VAS::reflagRange(unsigned long, int, int, int)>
c0009e98:	83 c4 14             	add    esp,0x14
c0009e9b:	c3                   	ret    

c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>:
c0009e9c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009ea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ea5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009eac:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009eaf:	19 c0                	sbb    eax,eax
c0009eb1:	83 ca 03             	or     edx,0x3
c0009eb4:	83 e0 fc             	and    eax,0xfffffffc
c0009eb7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009ebe:	0f 20 d8             	mov    eax,cr3
c0009ec1:	0f 22 d8             	mov    cr3,eax
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <VAS::~VAS()>:
c0009ec6:	83 ec 2c             	sub    esp,0x2c
c0009ec9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ed1:	fa                   	cli    
c0009ed2:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0009ed7:	40                   	inc    eax
c0009ed8:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0009edd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ee4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ee7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009eed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ef1:	6a 01                	push   0x1
c0009ef3:	50                   	push   eax
c0009ef4:	e8 a3 ff ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c0009ef9:	83 c4 0c             	add    esp,0xc
c0009efc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009f04:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009f0c:	0f 8f d4 00 00 00    	jg     c0009fe6 <VAS::~VAS()+0x120>
c0009f12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f16:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f1d:	c1 e2 02             	shl    edx,0x2
c0009f20:	01 d0                	add    eax,edx
c0009f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f2c:	83 e0 01             	and    eax,0x1
c0009f2f:	0f 84 a8 00 00 00    	je     c0009fdd <VAS::~VAS()+0x117>
c0009f35:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f3d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f45:	7f 72                	jg     c0009fb9 <VAS::~VAS()+0xf3>
c0009f47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f4b:	c1 e0 0a             	shl    eax,0xa
c0009f4e:	89 c2                	mov    edx,eax
c0009f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f54:	01 d0                	add    eax,edx
c0009f56:	c1 e0 0c             	shl    eax,0xc
c0009f59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f5d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f62:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f67:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f71:	6a 01                	push   0x1
c0009f73:	50                   	push   eax
c0009f74:	e8 01 fd ff ff       	call   c0009c7a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f79:	83 c4 0c             	add    esp,0xc
c0009f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f84:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f8e:	25 01 04 00 00       	and    eax,0x401
c0009f93:	3d 01 04 00 00       	cmp    eax,0x401
c0009f98:	75 19                	jne    c0009fb3 <VAS::~VAS()+0xed>
c0009f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fa3:	83 ec 0c             	sub    esp,0xc
c0009fa6:	50                   	push   eax
c0009fa7:	e8 18 e2 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009fac:	83 c4 10             	add    esp,0x10
c0009faf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fb3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fb7:	eb 84                	jmp    c0009f3d <VAS::~VAS()+0x77>
c0009fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fbd:	25 00 04 00 00       	and    eax,0x400
c0009fc2:	74 19                	je     c0009fdd <VAS::~VAS()+0x117>
c0009fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fcd:	83 ec 0c             	sub    esp,0xc
c0009fd0:	50                   	push   eax
c0009fd1:	e8 ee e1 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0009fd6:	83 c4 10             	add    esp,0x10
c0009fd9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fdd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe1:	e9 1e ff ff ff       	jmp    c0009f04 <VAS::~VAS()+0x3e>
c0009fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fed:	83 ec 0c             	sub    esp,0xc
c0009ff0:	50                   	push   eax
c0009ff1:	e8 cf fc ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ff6:	83 c4 10             	add    esp,0x10
c0009ff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ffd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a000:	83 ec 0c             	sub    esp,0xc
c000a003:	50                   	push   eax
c000a004:	e8 bb e1 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c000a009:	83 c4 10             	add    esp,0x10
c000a00c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a010:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a015:	48                   	dec    eax
c000a016:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a01b:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a020:	85 c0                	test   eax,eax
c000a022:	75 01                	jne    c000a025 <VAS::~VAS()+0x15f>
c000a024:	fb                   	sti    
c000a025:	90                   	nop
c000a026:	83 c4 2c             	add    esp,0x2c
c000a029:	c3                   	ret    

c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000a02a:	55                   	push   ebp
c000a02b:	57                   	push   edi
c000a02c:	56                   	push   esi
c000a02d:	53                   	push   ebx
c000a02e:	83 ec 1c             	sub    esp,0x1c
c000a031:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a035:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a039:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000a03f:	77 0b                	ja     c000a04c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a041:	0f 20 d8             	mov    eax,cr3
c000a044:	0f 20 d8             	mov    eax,cr3
c000a047:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a04a:	75 47                	jne    c000a093 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a04c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a050:	09 d8                	or     eax,ebx
c000a052:	a9 ff 0f 00 00       	test   eax,0xfff
c000a057:	75 57                	jne    c000a0b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a059:	89 de                	mov    esi,ebx
c000a05b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a05e:	c1 ee 16             	shr    esi,0x16
c000a061:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a068:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a06c:	74 54                	je     c000a0c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a06e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a072:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a078:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a07c:	c1 e6 0c             	shl    esi,0xc
c000a07f:	c1 eb 0a             	shr    ebx,0xa
c000a082:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a088:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a08b:	83 c4 1c             	add    esp,0x1c
c000a08e:	5b                   	pop    ebx
c000a08f:	5e                   	pop    esi
c000a090:	5f                   	pop    edi
c000a091:	5d                   	pop    ebp
c000a092:	c3                   	ret    
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	68 a4 da 01 c0       	push   0xc001daa4
c000a09b:	e8 48 0b 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a0a0:	83 c4 10             	add    esp,0x10
c000a0a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0a7:	09 d8                	or     eax,ebx
c000a0a9:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0ae:	74 a9                	je     c000a059 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0b0:	83 ec 0c             	sub    esp,0xc
c000a0b3:	68 0c db 01 c0       	push   0xc001db0c
c000a0b8:	e8 16 66 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000a0bd:	83 c4 10             	add    esp,0x10
c000a0c0:	eb 97                	jmp    c000a059 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0c6:	e8 5b e1 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a0cb:	83 ec 0c             	sub    esp,0xc
c000a0ce:	89 c5                	mov    ebp,eax
c000a0d0:	8b 0d 30 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a30
c000a0d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0da:	6a 01                	push   0x1
c000a0dc:	e8 b4 f8 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a0e1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0e8:	6a 01                	push   0x1
c000a0ea:	50                   	push   eax
c000a0eb:	55                   	push   ebp
c000a0ec:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0f2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0f6:	51                   	push   ecx
c000a0f7:	e8 28 02 00 00       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0fc:	83 c4 1c             	add    esp,0x1c
c000a0ff:	68 00 10 00 00       	push   0x1000
c000a104:	6a 00                	push   0x0
c000a106:	50                   	push   eax
c000a107:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a10b:	e8 e0 63 ff ff       	call   c00004f0 <memset>
c000a110:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a114:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a117:	e8 a9 fb ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000a11c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a120:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a129:	e9 40 ff ff ff       	jmp    c000a06e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a12e <VAS::allocatePages(int, int)>:
c000a12e:	55                   	push   ebp
c000a12f:	57                   	push   edi
c000a130:	56                   	push   esi
c000a131:	53                   	push   ebx
c000a132:	83 ec 1c             	sub    esp,0x1c
c000a135:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a139:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a13e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a144:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a14a:	83 e0 01             	and    eax,0x1
c000a14d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a151:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a155:	0f 85 cc 00 00 00    	jne    c000a227 <VAS::allocatePages(int, int)+0xf9>
c000a15b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a15e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a162:	85 c0                	test   eax,eax
c000a164:	0f 84 a1 00 00 00    	je     c000a20b <VAS::allocatePages(int, int)+0xdd>
c000a16a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a16e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a172:	c1 e6 0c             	shl    esi,0xc
c000a175:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a179:	85 c0                	test   eax,eax
c000a17b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a17e:	7e 33                	jle    c000a1b3 <VAS::allocatePages(int, int)+0x85>
c000a180:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a184:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a188:	81 cd 00 04 00 00    	or     ebp,0x400
c000a18e:	e8 93 e0 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a193:	55                   	push   ebp
c000a194:	53                   	push   ebx
c000a195:	50                   	push   eax
c000a196:	57                   	push   edi
c000a197:	e8 8e fe ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a19c:	83 c4 10             	add    esp,0x10
c000a19f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1a4:	74 03                	je     c000a1a9 <VAS::allocatePages(int, int)+0x7b>
c000a1a6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1a9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1af:	39 de                	cmp    esi,ebx
c000a1b1:	75 db                	jne    c000a18e <VAS::allocatePages(int, int)+0x60>
c000a1b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1b8:	75 12                	jne    c000a1cc <VAS::allocatePages(int, int)+0x9e>
c000a1ba:	0f 20 d8             	mov    eax,cr3
c000a1bd:	0f 22 d8             	mov    cr3,eax
c000a1c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1c4:	83 c4 1c             	add    esp,0x1c
c000a1c7:	5b                   	pop    ebx
c000a1c8:	5e                   	pop    esi
c000a1c9:	5f                   	pop    edi
c000a1ca:	5d                   	pop    ebp
c000a1cb:	c3                   	ret    
c000a1cc:	c1 ee 0a             	shr    esi,0xa
c000a1cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a1d3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a1d9:	c1 eb 0a             	shr    ebx,0xa
c000a1dc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1e2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1e8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1ee:	39 c3                	cmp    ebx,eax
c000a1f0:	77 ce                	ja     c000a1c0 <VAS::allocatePages(int, int)+0x92>
c000a1f2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1fb:	39 d8                	cmp    eax,ebx
c000a1fd:	73 f3                	jae    c000a1f2 <VAS::allocatePages(int, int)+0xc4>
c000a1ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a203:	83 c4 1c             	add    esp,0x1c
c000a206:	5b                   	pop    ebx
c000a207:	5e                   	pop    esi
c000a208:	5f                   	pop    edi
c000a209:	5d                   	pop    ebp
c000a20a:	c3                   	ret    
c000a20b:	83 ec 0c             	sub    esp,0xc
c000a20e:	68 30 db 01 c0       	push   0xc001db30
c000a213:	e8 bb 64 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000a218:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a21b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	e9 43 ff ff ff       	jmp    c000a16a <VAS::allocatePages(int, int)+0x3c>
c000a227:	83 ec 0c             	sub    esp,0xc
c000a22a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a22e:	51                   	push   ecx
c000a22f:	e8 61 f7 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a240:	0f 87 9b 00 00 00    	ja     c000a2e1 <VAS::allocatePages(int, int)+0x1b3>
c000a246:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a24a:	85 d2                	test   edx,edx
c000a24c:	7e 3c                	jle    c000a28a <VAS::allocatePages(int, int)+0x15c>
c000a24e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a252:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a256:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a25a:	c1 e5 0c             	shl    ebp,0xc
c000a25d:	81 ce 00 04 00 00    	or     esi,0x400
c000a263:	01 dd                	add    ebp,ebx
c000a265:	e8 bc df ff ff       	call   c0008226 <Phys::allocatePage()>
c000a26a:	56                   	push   esi
c000a26b:	53                   	push   ebx
c000a26c:	50                   	push   eax
c000a26d:	57                   	push   edi
c000a26e:	e8 b7 fd ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a273:	83 c4 10             	add    esp,0x10
c000a276:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a27b:	74 03                	je     c000a280 <VAS::allocatePages(int, int)+0x152>
c000a27d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a280:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a286:	39 dd                	cmp    ebp,ebx
c000a288:	75 db                	jne    c000a265 <VAS::allocatePages(int, int)+0x137>
c000a28a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a28f:	0f 84 25 ff ff ff    	je     c000a1ba <VAS::allocatePages(int, int)+0x8c>
c000a295:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a299:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a29d:	89 d3                	mov    ebx,edx
c000a29f:	c1 e0 0c             	shl    eax,0xc
c000a2a2:	c1 eb 0a             	shr    ebx,0xa
c000a2a5:	01 d0                	add    eax,edx
c000a2a7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2ad:	c1 e8 0a             	shr    eax,0xa
c000a2b0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2bb:	2d 00 00 40 00       	sub    eax,0x400000
c000a2c0:	39 c3                	cmp    ebx,eax
c000a2c2:	0f 87 f8 fe ff ff    	ja     c000a1c0 <VAS::allocatePages(int, int)+0x92>
c000a2c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2d1:	39 d8                	cmp    eax,ebx
c000a2d3:	73 f3                	jae    c000a2c8 <VAS::allocatePages(int, int)+0x19a>
c000a2d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d9:	83 c4 1c             	add    esp,0x1c
c000a2dc:	5b                   	pop    ebx
c000a2dd:	5e                   	pop    esi
c000a2de:	5f                   	pop    edi
c000a2df:	5d                   	pop    ebp
c000a2e0:	c3                   	ret    
c000a2e1:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a2e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2ec:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a2f3:	0f 84 4d ff ff ff    	je     c000a246 <VAS::allocatePages(int, int)+0x118>
c000a2f9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a301:	e9 40 ff ff ff       	jmp    c000a246 <VAS::allocatePages(int, int)+0x118>

c000a306 <VAS::setCPUSpecific(unsigned long)>:
c000a306:	83 ec 0c             	sub    esp,0xc
c000a309:	6a 05                	push   0x5
c000a30b:	68 00 00 40 c2       	push   0xc2400000
c000a310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a314:	50                   	push   eax
c000a315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a319:	52                   	push   edx
c000a31a:	e8 0b fd ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a31f:	83 c4 1c             	add    esp,0x1c
c000a322:	c3                   	ret    
c000a323:	90                   	nop

c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a324:	55                   	push   ebp
c000a325:	57                   	push   edi
c000a326:	56                   	push   esi
c000a327:	53                   	push   ebx
c000a328:	83 ec 1c             	sub    esp,0x1c
c000a32b:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a330:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a334:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a33a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a33e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a344:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a348:	83 e0 01             	and    eax,0x1
c000a34b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a34f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a353:	85 c0                	test   eax,eax
c000a355:	7e 39                	jle    c000a390 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a357:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a35b:	89 f3                	mov    ebx,esi
c000a35d:	c1 e0 0c             	shl    eax,0xc
c000a360:	01 f0                	add    eax,esi
c000a362:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a366:	55                   	push   ebp
c000a367:	53                   	push   ebx
c000a368:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a36c:	29 f0                	sub    eax,esi
c000a36e:	01 d8                	add    eax,ebx
c000a370:	50                   	push   eax
c000a371:	57                   	push   edi
c000a372:	e8 b3 fc ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a377:	83 c4 10             	add    esp,0x10
c000a37a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a37f:	74 03                	je     c000a384 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a381:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a384:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a38a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a38e:	75 d6                	jne    c000a366 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a390:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a395:	75 10                	jne    c000a3a7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a397:	0f 20 d8             	mov    eax,cr3
c000a39a:	0f 22 d8             	mov    cr3,eax
c000a39d:	83 c4 1c             	add    esp,0x1c
c000a3a0:	89 f0                	mov    eax,esi
c000a3a2:	5b                   	pop    ebx
c000a3a3:	5e                   	pop    esi
c000a3a4:	5f                   	pop    edi
c000a3a5:	5d                   	pop    ebp
c000a3a6:	c3                   	ret    
c000a3a7:	89 f3                	mov    ebx,esi
c000a3a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a3ad:	c1 eb 0a             	shr    ebx,0xa
c000a3b0:	c1 e0 0c             	shl    eax,0xc
c000a3b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3b9:	01 f0                	add    eax,esi
c000a3bb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a3c1:	c1 e8 0a             	shr    eax,0xa
c000a3c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3c9:	2d 00 00 40 00       	sub    eax,0x400000
c000a3ce:	39 c3                	cmp    ebx,eax
c000a3d0:	77 cb                	ja     c000a39d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a3d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a3d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3db:	39 d8                	cmp    eax,ebx
c000a3dd:	73 f3                	jae    c000a3d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a3df:	83 c4 1c             	add    esp,0x1c
c000a3e2:	89 f0                	mov    eax,esi
c000a3e4:	5b                   	pop    ebx
c000a3e5:	5e                   	pop    esi
c000a3e6:	5f                   	pop    edi
c000a3e7:	5d                   	pop    ebp
c000a3e8:	c3                   	ret    
c000a3e9:	90                   	nop

c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3ea:	55                   	push   ebp
c000a3eb:	57                   	push   edi
c000a3ec:	56                   	push   esi
c000a3ed:	53                   	push   ebx
c000a3ee:	83 ec 1c             	sub    esp,0x1c
c000a3f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a3f9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a3fd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a401:	a9 ff 0f 00 00       	test   eax,0xfff
c000a406:	75 4a                	jne    c000a452 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a40c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a40f:	c1 eb 16             	shr    ebx,0x16
c000a412:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a419:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a41d:	74 4d                	je     c000a46c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a41f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a423:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a427:	c1 e8 0a             	shr    eax,0xa
c000a42a:	80 fa 01             	cmp    dl,0x1
c000a42d:	19 d2                	sbb    edx,edx
c000a42f:	c1 e3 0c             	shl    ebx,0xc
c000a432:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a436:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a43c:	25 fc 0f 00 00       	and    eax,0xffc
c000a441:	01 d8                	add    eax,ebx
c000a443:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a44a:	83 c4 1c             	add    esp,0x1c
c000a44d:	5b                   	pop    ebx
c000a44e:	5e                   	pop    esi
c000a44f:	5f                   	pop    edi
c000a450:	5d                   	pop    ebp
c000a451:	c3                   	ret    
c000a452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	68 5c db 01 c0       	push   0xc001db5c
c000a45e:	e8 70 62 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000a463:	83 c4 10             	add    esp,0x10
c000a466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a46a:	eb 9c                	jmp    c000a408 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a46c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a470:	e8 b1 dd ff ff       	call   c0008226 <Phys::allocatePage()>
c000a475:	83 ec 0c             	sub    esp,0xc
c000a478:	89 c5                	mov    ebp,eax
c000a47a:	8b 0d 30 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a30
c000a480:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a484:	6a 01                	push   0x1
c000a486:	e8 0a f5 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a48b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a492:	6a 01                	push   0x1
c000a494:	50                   	push   eax
c000a495:	55                   	push   ebp
c000a496:	81 cd 07 04 00 00    	or     ebp,0x407
c000a49c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a4a0:	51                   	push   ecx
c000a4a1:	e8 7e fe ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4a6:	83 c4 1c             	add    esp,0x1c
c000a4a9:	68 00 10 00 00       	push   0x1000
c000a4ae:	6a 00                	push   0x0
c000a4b0:	50                   	push   eax
c000a4b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4b5:	e8 36 60 ff ff       	call   c00004f0 <memset>
c000a4ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4be:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a4c1:	e8 ff f7 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000a4c6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a4c9:	83 c4 10             	add    esp,0x10
c000a4cc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a4cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a4d3:	e9 47 ff ff ff       	jmp    c000a41f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a4d8 <VAS::VAS(bool)>:
c000a4d8:	53                   	push   ebx
c000a4d9:	83 ec 28             	sub    esp,0x28
c000a4dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a4fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4fe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a502:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a505:	e8 1c dd ff ff       	call   c0008226 <Phys::allocatePage()>
c000a50a:	89 c2                	mov    edx,eax
c000a50c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a510:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a513:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000a519:	83 ec 0c             	sub    esp,0xc
c000a51c:	6a 01                	push   0x1
c000a51e:	e8 72 f4 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	89 c2                	mov    edx,eax
c000a528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a52c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a52f:	83 ec 0c             	sub    esp,0xc
c000a532:	6a 03                	push   0x3
c000a534:	6a 01                	push   0x1
c000a536:	52                   	push   edx
c000a537:	50                   	push   eax
c000a538:	53                   	push   ebx
c000a539:	e8 e6 fd ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a53e:	83 c4 20             	add    esp,0x20
c000a541:	89 c2                	mov    edx,eax
c000a543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a547:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a54a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a552:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a55a:	7f 1c                	jg     c000a578 <VAS::VAS(bool)+0xa0>
c000a55c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a560:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a563:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a567:	c1 e2 02             	shl    edx,0x2
c000a56a:	01 d0                	add    eax,edx
c000a56c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a572:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a576:	eb da                	jmp    c000a552 <VAS::VAS(bool)+0x7a>
c000a578:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a580:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a588:	7f 7a                	jg     c000a604 <VAS::VAS(bool)+0x12c>
c000a58a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a58e:	2d 00 02 00 00       	sub    eax,0x200
c000a593:	c1 e0 0c             	shl    eax,0xc
c000a596:	83 c8 03             	or     eax,0x3
c000a599:	89 c2                	mov    edx,eax
c000a59b:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a5a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a5a6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5ac:	83 e0 10             	and    eax,0x10
c000a5af:	84 c0                	test   al,al
c000a5b1:	74 07                	je     c000a5ba <VAS::VAS(bool)+0xe2>
c000a5b3:	b8 00 01 00 00       	mov    eax,0x100
c000a5b8:	eb 05                	jmp    c000a5bf <VAS::VAS(bool)+0xe7>
c000a5ba:	b8 00 00 00 00       	mov    eax,0x0
c000a5bf:	09 d0                	or     eax,edx
c000a5c1:	89 c1                	mov    ecx,eax
c000a5c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5ce:	c1 e2 02             	shl    edx,0x2
c000a5d1:	01 d0                	add    eax,edx
c000a5d3:	89 ca                	mov    edx,ecx
c000a5d5:	89 10                	mov    DWORD PTR [eax],edx
c000a5d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5db:	2d 40 03 00 00       	sub    eax,0x340
c000a5e0:	83 f8 7f             	cmp    eax,0x7f
c000a5e3:	77 16                	ja     c000a5fb <VAS::VAS(bool)+0x123>
c000a5e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5e9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5f0:	c1 e2 02             	shl    edx,0x2
c000a5f3:	01 d0                	add    eax,edx
c000a5f5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a5fb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a5ff:	e9 7c ff ff ff       	jmp    c000a580 <VAS::VAS(bool)+0xa8>
c000a604:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a609:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a60f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a615:	83 e0 10             	and    eax,0x10
c000a618:	84 c0                	test   al,al
c000a61a:	74 07                	je     c000a623 <VAS::VAS(bool)+0x14b>
c000a61c:	b8 03 41 00 00       	mov    eax,0x4103
c000a621:	eb 05                	jmp    c000a628 <VAS::VAS(bool)+0x150>
c000a623:	b8 03 40 00 00       	mov    eax,0x4003
c000a628:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a62c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a62f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a635:	89 02                	mov    DWORD PTR [edx],eax
c000a637:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a63c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a642:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a648:	83 ec 08             	sub    esp,0x8
c000a64b:	50                   	push   eax
c000a64c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a650:	e8 b1 fc ff ff       	call   c000a306 <VAS::setCPUSpecific(unsigned long)>
c000a655:	83 c4 10             	add    esp,0x10
c000a658:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a65c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a65f:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a664:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a66a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a670:	83 e0 10             	and    eax,0x10
c000a673:	84 c0                	test   al,al
c000a675:	74 07                	je     c000a67e <VAS::VAS(bool)+0x1a6>
c000a677:	b8 00 01 00 00       	mov    eax,0x100
c000a67c:	eb 05                	jmp    c000a683 <VAS::VAS(bool)+0x1ab>
c000a67e:	b8 00 00 00 00       	mov    eax,0x0
c000a683:	09 c2                	or     edx,eax
c000a685:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a689:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a68c:	05 fc 0f 00 00       	add    eax,0xffc
c000a691:	83 ca 03             	or     edx,0x3
c000a694:	89 10                	mov    DWORD PTR [eax],edx
c000a696:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a69b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6a1:	83 ec 0c             	sub    esp,0xc
c000a6a4:	50                   	push   eax
c000a6a5:	e8 12 1c 00 00       	call   c000c2bc <Device::getName()>
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	83 ec 08             	sub    esp,0x8
c000a6b0:	68 ff db 01 c0       	push   0xc001dbff
c000a6b5:	50                   	push   eax
c000a6b6:	e8 45 60 ff ff       	call   c0000700 <strcmp>
c000a6bb:	83 c4 10             	add    esp,0x10
c000a6be:	85 c0                	test   eax,eax
c000a6c0:	0f 94 c0             	sete   al
c000a6c3:	84 c0                	test   al,al
c000a6c5:	0f 84 87 00 00 00    	je     c000a752 <VAS::VAS(bool)+0x27a>
c000a6cb:	fa                   	cli    
c000a6cc:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a6d1:	40                   	inc    eax
c000a6d2:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a6d7:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a6dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6e2:	05 7c 09 00 00       	add    eax,0x97c
c000a6e7:	83 ec 0c             	sub    esp,0xc
c000a6ea:	50                   	push   eax
c000a6eb:	e8 66 d2 ff ff       	call   c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6f0:	83 c4 10             	add    esp,0x10
c000a6f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6f8:	89 c3                	mov    ebx,eax
c000a6fa:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a6ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a705:	05 7c 09 00 00       	add    eax,0x97c
c000a70a:	83 ec 0c             	sub    esp,0xc
c000a70d:	50                   	push   eax
c000a70e:	e8 43 d2 ff ff       	call   c0007956 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	83 ec 08             	sub    esp,0x8
c000a719:	50                   	push   eax
c000a71a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a71e:	e8 83 f5 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a723:	83 c4 10             	add    esp,0x10
c000a726:	8b 00                	mov    eax,DWORD PTR [eax]
c000a728:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a72d:	6a 11                	push   0x11
c000a72f:	53                   	push   ebx
c000a730:	50                   	push   eax
c000a731:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a735:	e8 f0 f8 ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a73a:	83 c4 10             	add    esp,0x10
c000a73d:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a742:	48                   	dec    eax
c000a743:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a748:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a74d:	85 c0                	test   eax,eax
c000a74f:	75 01                	jne    c000a752 <VAS::VAS(bool)+0x27a>
c000a751:	fb                   	sti    
c000a752:	90                   	nop
c000a753:	83 c4 28             	add    esp,0x28
c000a756:	5b                   	pop    ebx
c000a757:	c3                   	ret    

c000a758 <VAS::evict(unsigned long)>:
c000a758:	55                   	push   ebp
c000a759:	57                   	push   edi
c000a75a:	56                   	push   esi
c000a75b:	53                   	push   ebx
c000a75c:	83 ec 1c             	sub    esp,0x1c
c000a75f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a763:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a76b:	e8 66 f3 ff ff       	call   c0009ad6 <Virt::allocateSwapfilePage()>
c000a770:	8b 0d 8c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f88c
c000a776:	89 c7                	mov    edi,eax
c000a778:	85 c9                	test   ecx,ecx
c000a77a:	7e 3e                	jle    c000a7ba <VAS::evict(unsigned long)+0x62>
c000a77c:	89 ee                	mov    esi,ebp
c000a77e:	31 db                	xor    ebx,ebx
c000a780:	83 ec 0c             	sub    esp,0xc
c000a783:	57                   	push   edi
c000a784:	e8 3b f3 ff ff       	call   c0009ac4 <Virt::swapIDToSector(unsigned long)>
c000a789:	89 34 24             	mov    DWORD PTR [esp],esi
c000a78c:	01 d8                	add    eax,ebx
c000a78e:	6a 01                	push   0x1
c000a790:	31 d2                	xor    edx,edx
c000a792:	43                   	inc    ebx
c000a793:	52                   	push   edx
c000a794:	81 c6 00 02 00 00    	add    esi,0x200
c000a79a:	50                   	push   eax
c000a79b:	0f be 05 98 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f898
c000a7a2:	8b 14 85 9c 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd264]
c000a7a9:	52                   	push   edx
c000a7aa:	e8 8d 2b 00 00       	call   c000d33c <LogicalDisk::write(unsigned long long, int, void*)>
c000a7af:	83 c4 20             	add    esp,0x20
c000a7b2:	39 1d 8c f8 01 c0    	cmp    DWORD PTR ds:0xc001f88c,ebx
c000a7b8:	7f c6                	jg     c000a780 <VAS::evict(unsigned long)+0x28>
c000a7ba:	83 ec 08             	sub    esp,0x8
c000a7bd:	c1 e7 0b             	shl    edi,0xb
c000a7c0:	55                   	push   ebp
c000a7c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7c5:	50                   	push   eax
c000a7c6:	e8 db f4 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a7cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7cd:	89 d1                	mov    ecx,edx
c000a7cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a7d5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a7db:	09 cf                	or     edi,ecx
c000a7dd:	89 38                	mov    DWORD PTR [eax],edi
c000a7df:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7e2:	ff 05 28 0a 02 c0    	inc    DWORD PTR ds:0xc0020a28
c000a7e8:	e8 d7 d9 ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c000a7ed:	0f 20 d8             	mov    eax,cr3
c000a7f0:	0f 22 d8             	mov    cr3,eax
c000a7f3:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c000a7f8:	c7 44 24 40 0d dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc0d
c000a800:	8d 50 01             	lea    edx,[eax+0x1]
c000a803:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a807:	89 15 24 0a 02 c0    	mov    DWORD PTR ds:0xc0020a24,edx
c000a80d:	83 c4 2c             	add    esp,0x2c
c000a810:	5b                   	pop    ebx
c000a811:	5e                   	pop    esi
c000a812:	5f                   	pop    edi
c000a813:	5d                   	pop    ebp
c000a814:	e9 cf 03 00 00       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c000a819:	90                   	nop

c000a81a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a81a:	55                   	push   ebp
c000a81b:	57                   	push   edi
c000a81c:	56                   	push   esi
c000a81d:	53                   	push   ebx
c000a81e:	83 ec 14             	sub    esp,0x14
c000a821:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a825:	53                   	push   ebx
c000a826:	68 1e dc 01 c0       	push   0xc001dc1e
c000a82b:	e8 b8 03 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a830:	83 c4 10             	add    esp,0x10
c000a833:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a839:	74 21                	je     c000a85c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a83b:	83 ec 08             	sub    esp,0x8
c000a83e:	53                   	push   ebx
c000a83f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a843:	57                   	push   edi
c000a844:	e8 5d f4 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	89 c6                	mov    esi,eax
c000a84e:	85 c0                	test   eax,eax
c000a850:	74 0a                	je     c000a85c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a852:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a854:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a85a:	74 0a                	je     c000a866 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a85c:	31 c0                	xor    eax,eax
c000a85e:	83 c4 0c             	add    esp,0xc
c000a861:	5b                   	pop    ebx
c000a862:	5e                   	pop    esi
c000a863:	5f                   	pop    edi
c000a864:	5d                   	pop    ebp
c000a865:	c3                   	ret    
c000a866:	e8 bb d9 ff ff       	call   c0008226 <Phys::allocatePage()>
c000a86b:	c1 ed 0b             	shr    ebp,0xb
c000a86e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a870:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a876:	09 c2                	or     edx,eax
c000a878:	81 ca 01 08 00 00    	or     edx,0x801
c000a87e:	89 16                	mov    DWORD PTR [esi],edx
c000a880:	8b 35 8c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f88c
c000a886:	85 f6                	test   esi,esi
c000a888:	7e 3e                	jle    c000a8c8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a88a:	89 df                	mov    edi,ebx
c000a88c:	31 f6                	xor    esi,esi
c000a88e:	83 ec 0c             	sub    esp,0xc
c000a891:	55                   	push   ebp
c000a892:	e8 2d f2 ff ff       	call   c0009ac4 <Virt::swapIDToSector(unsigned long)>
c000a897:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a89a:	01 f0                	add    eax,esi
c000a89c:	6a 01                	push   0x1
c000a89e:	31 d2                	xor    edx,edx
c000a8a0:	46                   	inc    esi
c000a8a1:	52                   	push   edx
c000a8a2:	81 c7 00 02 00 00    	add    edi,0x200
c000a8a8:	50                   	push   eax
c000a8a9:	0f be 05 98 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f898
c000a8b0:	8b 0c 85 9c 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd264]
c000a8b7:	51                   	push   ecx
c000a8b8:	e8 13 2a 00 00       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c000a8bd:	83 c4 20             	add    esp,0x20
c000a8c0:	39 35 8c f8 01 c0    	cmp    DWORD PTR ds:0xc001f88c,esi
c000a8c6:	7f c6                	jg     c000a88e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a8c8:	a1 28 0a 02 c0       	mov    eax,ds:0xc0020a28
c000a8cd:	48                   	dec    eax
c000a8ce:	52                   	push   edx
c000a8cf:	a3 28 0a 02 c0       	mov    ds:0xc0020a28,eax
c000a8d4:	50                   	push   eax
c000a8d5:	53                   	push   ebx
c000a8d6:	68 31 dc 01 c0       	push   0xc001dc31
c000a8db:	e8 08 03 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a8e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8e3:	e8 be f1 ff ff       	call   c0009aa6 <Virt::freeSwapfilePage(unsigned long)>
c000a8e8:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	48                   	dec    eax
c000a8f1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a8f6:	85 c0                	test   eax,eax
c000a8f8:	75 01                	jne    c000a8fb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a8fa:	fb                   	sti    
c000a8fb:	0f 20 d8             	mov    eax,cr3
c000a8fe:	0f 22 d8             	mov    cr3,eax
c000a901:	b0 01                	mov    al,0x1
c000a903:	e9 56 ff ff ff       	jmp    c000a85e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a908 <VAS::scanForEviction()>:
c000a908:	57                   	push   edi
c000a909:	31 ff                	xor    edi,edi
c000a90b:	56                   	push   esi
c000a90c:	53                   	push   ebx
c000a90d:	83 ec 10             	sub    esp,0x10
c000a910:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a914:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a917:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a91d:	75 0e                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a91f:	89 da                	mov    edx,ebx
c000a921:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a924:	c1 ea 16             	shr    edx,0x16
c000a927:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a92b:	74 4e                	je     c000a97b <VAS::scanForEviction()+0x73>
c000a92d:	53                   	push   ebx
c000a92e:	56                   	push   esi
c000a92f:	e8 72 f3 ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c000a934:	5a                   	pop    edx
c000a935:	8b 10                	mov    edx,DWORD PTR [eax]
c000a937:	59                   	pop    ecx
c000a938:	89 d1                	mov    ecx,edx
c000a93a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a940:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a946:	74 3e                	je     c000a986 <VAS::scanForEviction()+0x7e>
c000a948:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a94e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a954:	76 2b                	jbe    c000a981 <VAS::scanForEviction()+0x79>
c000a956:	47                   	inc    edi
c000a957:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a95e:	83 ff 03             	cmp    edi,0x3
c000a961:	74 32                	je     c000a995 <VAS::scanForEviction()+0x8d>
c000a963:	31 db                	xor    ebx,ebx
c000a965:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a96b:	75 c0                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a96d:	89 da                	mov    edx,ebx
c000a96f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a972:	c1 ea 16             	shr    edx,0x16
c000a975:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a979:	75 b2                	jne    c000a92d <VAS::scanForEviction()+0x25>
c000a97b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a981:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a984:	eb 91                	jmp    c000a917 <VAS::scanForEviction()+0xf>
c000a986:	f6 c2 20             	test   dl,0x20
c000a989:	74 13                	je     c000a99e <VAS::scanForEviction()+0x96>
c000a98b:	83 e2 df             	and    edx,0xffffffdf
c000a98e:	89 10                	mov    DWORD PTR [eax],edx
c000a990:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a993:	eb b3                	jmp    c000a948 <VAS::scanForEviction()+0x40>
c000a995:	83 c4 10             	add    esp,0x10
c000a998:	31 c0                	xor    eax,eax
c000a99a:	5b                   	pop    ebx
c000a99b:	5e                   	pop    esi
c000a99c:	5f                   	pop    edi
c000a99d:	c3                   	ret    
c000a99e:	83 ec 08             	sub    esp,0x8
c000a9a1:	89 d0                	mov    eax,edx
c000a9a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a9a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9ac:	53                   	push   ebx
c000a9ad:	68 46 dc 01 c0       	push   0xc001dc46
c000a9b2:	e8 31 02 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a9b7:	58                   	pop    eax
c000a9b8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a9bb:	5a                   	pop    edx
c000a9bc:	51                   	push   ecx
c000a9bd:	56                   	push   esi
c000a9be:	e8 95 fd ff ff       	call   c000a758 <VAS::evict(unsigned long)>
c000a9c3:	5b                   	pop    ebx
c000a9c4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a9c7:	5f                   	pop    edi
c000a9c8:	50                   	push   eax
c000a9c9:	68 5a dc 01 c0       	push   0xc001dc5a
c000a9ce:	e8 15 02 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000a9d3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a9da:	83 c4 10             	add    esp,0x10
c000a9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	5b                   	pop    ebx
c000a9e5:	5e                   	pop    esi
c000a9e6:	5f                   	pop    edi
c000a9e7:	c3                   	ret    

c000a9e8 <mapVASFirstTime>:
c000a9e8:	55                   	push   ebp
c000a9e9:	57                   	push   edi
c000a9ea:	56                   	push   esi
c000a9eb:	53                   	push   ebx
c000a9ec:	83 ec 0c             	sub    esp,0xc
c000a9ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a9f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9f7:	4a                   	dec    edx
c000a9f8:	0f 84 8c 00 00 00    	je     c000aa8a <mapVASFirstTime+0xa2>
c000a9fe:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000aa01:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000aa04:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000aa09:	c1 e5 15             	shl    ebp,0x15
c000aa0c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000aa11:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000aa17:	29 eb                	sub    ebx,ebp
c000aa19:	29 ef                	sub    edi,ebp
c000aa1b:	e8 06 d8 ff ff       	call   c0008226 <Phys::allocatePage()>
c000aa20:	83 ec 0c             	sub    esp,0xc
c000aa23:	68 03 04 00 00       	push   0x403
c000aa28:	6a 01                	push   0x1
c000aa2a:	53                   	push   ebx
c000aa2b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa31:	50                   	push   eax
c000aa32:	56                   	push   esi
c000aa33:	e8 ec f8 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa38:	83 c4 20             	add    esp,0x20
c000aa3b:	39 fb                	cmp    ebx,edi
c000aa3d:	75 dc                	jne    c000aa1b <mapVASFirstTime+0x33>
c000aa3f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa44:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa49:	29 eb                	sub    ebx,ebp
c000aa4b:	29 ef                	sub    edi,ebp
c000aa4d:	e8 d4 d7 ff ff       	call   c0008226 <Phys::allocatePage()>
c000aa52:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa56:	19 d2                	sbb    edx,edx
c000aa58:	83 ec 0c             	sub    esp,0xc
c000aa5b:	83 e2 04             	and    edx,0x4
c000aa5e:	81 c2 03 04 00 00    	add    edx,0x403
c000aa64:	52                   	push   edx
c000aa65:	6a 01                	push   0x1
c000aa67:	53                   	push   ebx
c000aa68:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa6e:	50                   	push   eax
c000aa6f:	56                   	push   esi
c000aa70:	e8 af f8 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa75:	83 c4 20             	add    esp,0x20
c000aa78:	39 df                	cmp    edi,ebx
c000aa7a:	75 d1                	jne    c000aa4d <mapVASFirstTime+0x65>
c000aa7c:	0f 20 d8             	mov    eax,cr3
c000aa7f:	0f 22 d8             	mov    cr3,eax
c000aa82:	83 c4 0c             	add    esp,0xc
c000aa85:	5b                   	pop    ebx
c000aa86:	5e                   	pop    esi
c000aa87:	5f                   	pop    edi
c000aa88:	5d                   	pop    ebp
c000aa89:	c3                   	ret    
c000aa8a:	83 ec 0c             	sub    esp,0xc
c000aa8d:	68 6d dc 01 c0       	push   0xc001dc6d
c000aa92:	e8 51 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aa97:	83 c4 10             	add    esp,0x10
c000aa9a:	83 c4 0c             	add    esp,0xc
c000aa9d:	5b                   	pop    ebx
c000aa9e:	5e                   	pop    esi
c000aa9f:	5f                   	pop    edi
c000aaa0:	5d                   	pop    ebp
c000aaa1:	c3                   	ret    

c000aaa2 <__cxa_atexit>:
c000aaa2:	31 c0                	xor    eax,eax
c000aaa4:	c3                   	ret    

c000aaa5 <__cxa_finalize>:
c000aaa5:	c3                   	ret    

c000aaa6 <__stack_chk_fail>:
c000aaa6:	55                   	push   ebp
c000aaa7:	89 e5                	mov    ebp,esp
c000aaa9:	83 ec 10             	sub    esp,0x10
c000aaac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aaaf:	68 86 dc 01 c0       	push   0xc001dc86
c000aab4:	e8 2f 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aab9:	58                   	pop    eax
c000aaba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aabd:	5a                   	pop    edx
c000aabe:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aac1:	68 86 dc 01 c0       	push   0xc001dc86
c000aac6:	e8 1d 01 00 00       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000aacb:	c7 04 24 8e dc 01 c0 	mov    DWORD PTR [esp],0xc001dc8e
c000aad2:	e8 fc 5b 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	c9                   	leave  
c000aadb:	c3                   	ret    

c000aadc <__cxa_pure_virtual>:
c000aadc:	83 ec 18             	sub    esp,0x18
c000aadf:	68 a6 dc 01 c0       	push   0xc001dca6
c000aae4:	e8 ea 5b 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000aae9:	83 c4 1c             	add    esp,0x1c
c000aaec:	c3                   	ret    

c000aaed <operator new[](unsigned long)>:
c000aaed:	e9 67 d3 ff ff       	jmp    c0007e59 <malloc>

c000aaf2 <operator delete(void*, unsigned long)>:
c000aaf2:	e9 82 d3 ff ff       	jmp    c0007e79 <rfree>

c000aaf7 <operator delete[](void*)>:
c000aaf7:	e9 7d d3 ff ff       	jmp    c0007e79 <rfree>

c000aafc <operator delete[](void*, unsigned long)>:
c000aafc:	e9 78 d3 ff ff       	jmp    c0007e79 <rfree>

c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ab01:	55                   	push   ebp
c000ab02:	b9 04 00 00 00       	mov    ecx,0x4
c000ab07:	57                   	push   edi
c000ab08:	56                   	push   esi
c000ab09:	be bb d8 01 c0       	mov    esi,0xc001d8bb
c000ab0e:	53                   	push   ebx
c000ab0f:	83 ec 20             	sub    esp,0x20
c000ab12:	a1 ba d8 01 c0       	mov    eax,ds:0xc001d8ba
c000ab17:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ab1b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000ab1f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ab23:	a1 c7 d8 01 c0       	mov    eax,ds:0xc001d8c7
c000ab28:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	fc                   	cld    
c000ab31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab33:	89 ee                	mov    esi,ebp
c000ab35:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ab39:	eb 02                	jmp    c000ab3d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ab3b:	89 c6                	mov    esi,eax
c000ab3d:	31 d2                	xor    edx,edx
c000ab3f:	41                   	inc    ecx
c000ab40:	89 f0                	mov    eax,esi
c000ab42:	f7 f3                	div    ebx
c000ab44:	39 de                	cmp    esi,ebx
c000ab46:	73 f3                	jae    c000ab3b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab48:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab4b:	eb 02                	jmp    c000ab4f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab4d:	89 c5                	mov    ebp,eax
c000ab4f:	31 d2                	xor    edx,edx
c000ab51:	49                   	dec    ecx
c000ab52:	89 e8                	mov    eax,ebp
c000ab54:	f7 f3                	div    ebx
c000ab56:	39 dd                	cmp    ebp,ebx
c000ab58:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab5c:	88 11                	mov    BYTE PTR [ecx],dl
c000ab5e:	73 ed                	jae    c000ab4d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab64:	83 c4 20             	add    esp,0x20
c000ab67:	5b                   	pop    ebx
c000ab68:	5e                   	pop    esi
c000ab69:	5f                   	pop    edi
c000ab6a:	5d                   	pop    ebp
c000ab6b:	c3                   	ret    

c000ab6c <Dbg::logc(char)>:
c000ab6c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab70:	f6 05 50 09 02 c0 10 	test   BYTE PTR ds:0xc0020950,0x10
c000ab77:	75 12                	jne    c000ab8b <Dbg::logc(char)+0x1f>
c000ab79:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab7e:	ec                   	in     al,dx
c000ab7f:	a8 20                	test   al,0x20
c000ab81:	74 fb                	je     c000ab7e <Dbg::logc(char)+0x12>
c000ab83:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab88:	88 c8                	mov    al,cl
c000ab8a:	ee                   	out    dx,al
c000ab8b:	c3                   	ret    

c000ab8c <Dbg::logs(char*)>:
c000ab8c:	53                   	push   ebx
c000ab8d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ab91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab94:	84 c0                	test   al,al
c000ab96:	74 0f                	je     c000aba7 <Dbg::logs(char*)+0x1b>
c000ab98:	50                   	push   eax
c000ab99:	43                   	inc    ebx
c000ab9a:	e8 cd ff ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ab9f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aba2:	5a                   	pop    edx
c000aba3:	84 c0                	test   al,al
c000aba5:	75 f1                	jne    c000ab98 <Dbg::logs(char*)+0xc>
c000aba7:	5b                   	pop    ebx
c000aba8:	c3                   	ret    

c000aba9 <Dbg::logWriteInt(unsigned int)>:
c000aba9:	83 ec 10             	sub    esp,0x10
c000abac:	6a 0a                	push   0xa
c000abae:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abb2:	50                   	push   eax
c000abb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abb7:	50                   	push   eax
c000abb8:	e8 44 ff ff ff       	call   c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abbd:	50                   	push   eax
c000abbe:	e8 c9 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000abc3:	83 c4 20             	add    esp,0x20
c000abc6:	c3                   	ret    

c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000abc7:	83 ec 10             	sub    esp,0x10
c000abca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abce:	50                   	push   eax
c000abcf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abd3:	50                   	push   eax
c000abd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000abd8:	52                   	push   edx
c000abd9:	e8 23 ff ff ff       	call   c000ab01 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abde:	50                   	push   eax
c000abdf:	e8 a8 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000abe4:	83 c4 20             	add    esp,0x20
c000abe7:	c3                   	ret    

c000abe8 <Dbg::kprintf(char const*, ...)>:
c000abe8:	55                   	push   ebp
c000abe9:	57                   	push   edi
c000abea:	56                   	push   esi
c000abeb:	53                   	push   ebx
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abf3:	f6 05 50 09 02 c0 10 	test   BYTE PTR ds:0xc0020950,0x10
c000abfa:	74 08                	je     c000ac04 <Dbg::kprintf(char const*, ...)+0x1c>
c000abfc:	83 c4 0c             	add    esp,0xc
c000abff:	5b                   	pop    ebx
c000ac00:	5e                   	pop    esi
c000ac01:	5f                   	pop    edi
c000ac02:	5d                   	pop    ebp
c000ac03:	c3                   	ret    
c000ac04:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ac08:	31 ff                	xor    edi,edi
c000ac0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac0e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac11:	84 c0                	test   al,al
c000ac13:	74 e7                	je     c000abfc <Dbg::kprintf(char const*, ...)+0x14>
c000ac15:	8d 77 01             	lea    esi,[edi+0x1]
c000ac18:	3c 25                	cmp    al,0x25
c000ac1a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac1d:	75 47                	jne    c000ac66 <Dbg::kprintf(char const*, ...)+0x7e>
c000ac1f:	83 c7 02             	add    edi,0x2
c000ac22:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ac25:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ac28:	83 e8 25             	sub    eax,0x25
c000ac2b:	3c 53                	cmp    al,0x53
c000ac2d:	0f 87 d2 00 00 00    	ja     c000ad05 <Dbg::kprintf(char const*, ...)+0x11d>
c000ac33:	25 ff 00 00 00       	and    eax,0xff
c000ac38:	ff 24 85 bc dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2344]
c000ac3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac43:	89 c8                	mov    eax,ecx
c000ac45:	83 c1 04             	add    ecx,0x4
c000ac48:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac4c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac4e:	55                   	push   ebp
c000ac4f:	e8 55 ff ff ff       	call   c000aba9 <Dbg::logWriteInt(unsigned int)>
c000ac54:	58                   	pop    eax
c000ac55:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac58:	84 c0                	test   al,al
c000ac5a:	74 a0                	je     c000abfc <Dbg::kprintf(char const*, ...)+0x14>
c000ac5c:	8d 77 01             	lea    esi,[edi+0x1]
c000ac5f:	3c 25                	cmp    al,0x25
c000ac61:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac64:	74 b9                	je     c000ac1f <Dbg::kprintf(char const*, ...)+0x37>
c000ac66:	50                   	push   eax
c000ac67:	89 f7                	mov    edi,esi
c000ac69:	e8 fe fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ac6e:	89 ee                	mov    esi,ebp
c000ac70:	58                   	pop    eax
c000ac71:	eb e2                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac77:	89 c8                	mov    eax,ecx
c000ac79:	83 c1 04             	add    ecx,0x4
c000ac7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac7e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac82:	50                   	push   eax
c000ac83:	e8 04 ff ff ff       	call   c000ab8c <Dbg::logs(char*)>
c000ac88:	58                   	pop    eax
c000ac89:	eb ca                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ac8b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac8f:	89 d0                	mov    eax,edx
c000ac91:	83 c2 04             	add    edx,0x4
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac9a:	50                   	push   eax
c000ac9b:	e8 09 ff ff ff       	call   c000aba9 <Dbg::logWriteInt(unsigned int)>
c000aca0:	58                   	pop    eax
c000aca1:	eb b2                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000aca3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aca7:	89 d0                	mov    eax,edx
c000aca9:	83 c2 04             	add    edx,0x4
c000acac:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000acaf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acb3:	50                   	push   eax
c000acb4:	e8 b3 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000acb9:	58                   	pop    eax
c000acba:	eb 99                	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acc0:	89 c8                	mov    eax,ecx
c000acc2:	83 c1 04             	add    ecx,0x4
c000acc5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000acc9:	6a 10                	push   0x10
c000accb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000accd:	51                   	push   ecx
c000acce:	e8 f4 fe ff ff       	call   c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>
c000acd3:	5d                   	pop    ebp
c000acd4:	58                   	pop    eax
c000acd5:	e9 7b ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acde:	89 d0                	mov    eax,edx
c000ace0:	83 c2 08             	add    edx,0x8
c000ace3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace7:	6a 10                	push   0x10
c000ace9:	8b 00                	mov    eax,DWORD PTR [eax]
c000aceb:	50                   	push   eax
c000acec:	e8 d6 fe ff ff       	call   c000abc7 <Dbg::logWriteIntBase(unsigned int, int)>
c000acf1:	58                   	pop    eax
c000acf2:	5a                   	pop    edx
c000acf3:	e9 5d ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000acf8:	6a 25                	push   0x25
c000acfa:	e8 6d fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000acff:	5a                   	pop    edx
c000ad00:	e9 50 ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad05:	6a 25                	push   0x25
c000ad07:	e8 60 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ad0c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ad10:	50                   	push   eax
c000ad11:	e8 56 fe ff ff       	call   c000ab6c <Dbg::logc(char)>
c000ad16:	5a                   	pop    edx
c000ad17:	59                   	pop    ecx
c000ad18:	e9 38 ff ff ff       	jmp    c000ac55 <Dbg::kprintf(char const*, ...)+0x6d>
c000ad1d:	90                   	nop

c000ad1e <File::read(unsigned long long, void*, int*)>:
c000ad1e:	53                   	push   ebx
c000ad1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad2e:	3c 19                	cmp    al,0x19
c000ad30:	77 35                	ja     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad32:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ad39:	85 c0                	test   eax,eax
c000ad3b:	74 2a                	je     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad43:	85 c0                	test   eax,eax
c000ad45:	74 20                	je     c000ad67 <File::read(unsigned long long, void*, int*)+0x49>
c000ad47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad4b:	74 21                	je     c000ad6e <File::read(unsigned long long, void*, int*)+0x50>
c000ad4d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad53:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad61:	5b                   	pop    ebx
c000ad62:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad65:	ff e0                	jmp    eax
c000ad67:	b8 0b 00 00 00       	mov    eax,0xb
c000ad6c:	eb 05                	jmp    c000ad73 <File::read(unsigned long long, void*, int*)+0x55>
c000ad6e:	b8 05 00 00 00       	mov    eax,0x5
c000ad73:	5b                   	pop    ebx
c000ad74:	c3                   	ret    
c000ad75:	90                   	nop

c000ad76 <File::write(unsigned long long, void*, int*)>:
c000ad76:	53                   	push   ebx
c000ad77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad86:	3c 19                	cmp    al,0x19
c000ad88:	77 35                	ja     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad8a:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ad91:	85 c0                	test   eax,eax
c000ad93:	74 2a                	je     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad95:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad9b:	85 c0                	test   eax,eax
c000ad9d:	74 20                	je     c000adbf <File::write(unsigned long long, void*, int*)+0x49>
c000ad9f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ada3:	74 21                	je     c000adc6 <File::write(unsigned long long, void*, int*)+0x50>
c000ada5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ada7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adb9:	5b                   	pop    ebx
c000adba:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000adbd:	ff e0                	jmp    eax
c000adbf:	b8 0b 00 00 00       	mov    eax,0xb
c000adc4:	eb 05                	jmp    c000adcb <File::write(unsigned long long, void*, int*)+0x55>
c000adc6:	b8 05 00 00 00       	mov    eax,0x5
c000adcb:	5b                   	pop    ebx
c000adcc:	c3                   	ret    
c000adcd:	90                   	nop

c000adce <Directory::read(unsigned long long, void*, int*)>:
c000adce:	53                   	push   ebx
c000adcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000add3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000add7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adde:	3c 19                	cmp    al,0x19
c000ade0:	77 35                	ja     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ade2:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ade9:	85 c0                	test   eax,eax
c000adeb:	74 2a                	je     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000aded:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adf3:	85 c0                	test   eax,eax
c000adf5:	74 20                	je     c000ae17 <Directory::read(unsigned long long, void*, int*)+0x49>
c000adf7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adfb:	74 21                	je     c000ae1e <Directory::read(unsigned long long, void*, int*)+0x50>
c000adfd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae03:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae11:	5b                   	pop    ebx
c000ae12:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae15:	ff e0                	jmp    eax
c000ae17:	b8 0b 00 00 00       	mov    eax,0xb
c000ae1c:	eb 05                	jmp    c000ae23 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ae1e:	b8 05 00 00 00       	mov    eax,0x5
c000ae23:	5b                   	pop    ebx
c000ae24:	c3                   	ret    
c000ae25:	90                   	nop

c000ae26 <Directory::write(unsigned long long, void*, int*)>:
c000ae26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae31:	b8 0b 00 00 00       	mov    eax,0xb
c000ae36:	80 fa 19             	cmp    dl,0x19
c000ae39:	77 18                	ja     c000ae53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae3b:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000ae42:	85 d2                	test   edx,edx
c000ae44:	74 0d                	je     c000ae53 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae46:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae4d:	19 c0                	sbb    eax,eax
c000ae4f:	83 e0 0a             	and    eax,0xa
c000ae52:	40                   	inc    eax
c000ae53:	c3                   	ret    

c000ae54 <File::isAtty()>:
c000ae54:	31 c0                	xor    eax,eax
c000ae56:	c3                   	ret    
c000ae57:	90                   	nop

c000ae58 <Directory::isAtty()>:
c000ae58:	31 c0                	xor    eax,eax
c000ae5a:	c3                   	ret    
c000ae5b:	90                   	nop

c000ae5c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae5c:	b8 0a 00 00 00       	mov    eax,0xa
c000ae61:	c3                   	ret    

c000ae62 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae62:	b8 0a 00 00 00       	mov    eax,0xa
c000ae67:	c3                   	ret    

c000ae68 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae68:	31 c0                	xor    eax,eax
c000ae6a:	31 d2                	xor    edx,edx
c000ae6c:	c3                   	ret    
c000ae6d:	90                   	nop

c000ae6e <File::~File()>:
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	ba 7c de 01 c0       	mov    edx,0xc001de7c
c000ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7a:	89 10                	mov    DWORD PTR [eax],edx
c000ae7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	50                   	push   eax
c000ae84:	e8 ab e8 ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000ae89:	83 c4 10             	add    esp,0x10
c000ae8c:	90                   	nop
c000ae8d:	83 c4 0c             	add    esp,0xc
c000ae90:	c3                   	ret    
c000ae91:	90                   	nop

c000ae92 <File::~File()>:
c000ae92:	83 ec 0c             	sub    esp,0xc
c000ae95:	83 ec 0c             	sub    esp,0xc
c000ae98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9c:	e8 cd ff ff ff       	call   c000ae6e <File::~File()>
c000aea1:	83 c4 10             	add    esp,0x10
c000aea4:	83 ec 08             	sub    esp,0x8
c000aea7:	68 14 01 00 00       	push   0x114
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	e8 3d fc ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	83 c4 0c             	add    esp,0xc
c000aebb:	c3                   	ret    

c000aebc <Directory::~Directory()>:
c000aebc:	83 ec 0c             	sub    esp,0xc
c000aebf:	ba 98 de 01 c0       	mov    edx,0xc001de98
c000aec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec8:	89 10                	mov    DWORD PTR [eax],edx
c000aeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aece:	83 ec 0c             	sub    esp,0xc
c000aed1:	50                   	push   eax
c000aed2:	e8 5d e8 ff ff       	call   c0009734 <UnixFile::~UnixFile()>
c000aed7:	83 c4 10             	add    esp,0x10
c000aeda:	90                   	nop
c000aedb:	83 c4 0c             	add    esp,0xc
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <Directory::~Directory()>:
c000aee0:	83 ec 0c             	sub    esp,0xc
c000aee3:	83 ec 0c             	sub    esp,0xc
c000aee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeea:	e8 cd ff ff ff       	call   c000aebc <Directory::~Directory()>
c000aeef:	83 c4 10             	add    esp,0x10
c000aef2:	83 ec 08             	sub    esp,0x8
c000aef5:	68 14 01 00 00       	push   0x114
c000aefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aefe:	e8 ef fb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	83 c4 0c             	add    esp,0xc
c000af09:	c3                   	ret    

c000af0a <Filesystem::Filesystem()>:
c000af0a:	ba 14 de 01 c0       	mov    edx,0xc001de14
c000af0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af13:	89 10                	mov    DWORD PTR [eax],edx
c000af15:	8b 15 34 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a34
c000af1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af26:	a3 34 0a 02 c0       	mov    ds:0xc0020a34,eax
c000af2b:	90                   	nop
c000af2c:	c3                   	ret    
c000af2d:	90                   	nop

c000af2e <Filesystem::~Filesystem()>:
c000af2e:	ba 14 de 01 c0       	mov    edx,0xc001de14
c000af33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af37:	89 10                	mov    DWORD PTR [eax],edx
c000af39:	90                   	nop
c000af3a:	c3                   	ret    
c000af3b:	90                   	nop

c000af3c <Filesystem::~Filesystem()>:
c000af3c:	83 ec 0c             	sub    esp,0xc
c000af3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af43:	e8 e6 ff ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c000af48:	83 c4 04             	add    esp,0x4
c000af4b:	83 ec 08             	sub    esp,0x8
c000af4e:	6a 08                	push   0x8
c000af50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af54:	e8 99 fb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000af59:	83 c4 10             	add    esp,0x10
c000af5c:	83 c4 0c             	add    esp,0xc
c000af5f:	c3                   	ret    

c000af60 <Fs::getcwd(Process*, char*, int)>:
c000af60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af64:	31 c0                	xor    eax,eax
c000af66:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af69:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af6d:	7d 15                	jge    c000af84 <Fs::getcwd(Process*, char*, int)+0x24>
c000af6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af73:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af7a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af7d:	84 c9                	test   cl,cl
c000af7f:	74 06                	je     c000af87 <Fs::getcwd(Process*, char*, int)+0x27>
c000af81:	40                   	inc    eax
c000af82:	eb e2                	jmp    c000af66 <Fs::getcwd(Process*, char*, int)+0x6>
c000af84:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af87:	31 c0                	xor    eax,eax
c000af89:	c3                   	ret    

c000af8a <Fs::initVFS()>:
c000af8a:	83 ec 18             	sub    esp,0x18
c000af8d:	6a 08                	push   0x8
c000af8f:	e8 c5 ce ff ff       	call   c0007e59 <malloc>
c000af94:	89 04 24             	mov    DWORD PTR [esp],eax
c000af97:	e8 40 c2 00 00       	call   c00171dc <FAT::FAT()>
c000af9c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000afa3:	e8 b1 ce ff ff       	call   c0007e59 <malloc>
c000afa8:	89 04 24             	mov    DWORD PTR [esp],eax
c000afab:	e8 24 cf 00 00       	call   c0017ed4 <ISO9660::ISO9660()>
c000afb0:	83 c4 1c             	add    esp,0x1c
c000afb3:	c3                   	ret    

c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afb4:	55                   	push   ebp
c000afb5:	57                   	push   edi
c000afb6:	56                   	push   esi
c000afb7:	53                   	push   ebx
c000afb8:	81 ec 10 04 00 00    	sub    esp,0x410
c000afbe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afc5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000afcc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000afd3:	68 00 04 00 00       	push   0x400
c000afd8:	6a 00                	push   0x0
c000afda:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000afde:	56                   	push   esi
c000afdf:	e8 0c 55 ff ff       	call   c00004f0 <memset>
c000afe4:	83 c4 10             	add    esp,0x10
c000afe7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afeb:	75 0b                	jne    c000aff8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000afed:	50                   	push   eax
c000afee:	50                   	push   eax
c000afef:	57                   	push   edi
c000aff0:	56                   	push   esi
c000aff1:	e8 2a 56 ff ff       	call   c0000620 <strcpy>
c000aff6:	eb 41                	jmp    c000b039 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aff8:	8a 07                	mov    al,BYTE PTR [edi]
c000affa:	3c 5c                	cmp    al,0x5c
c000affc:	74 04                	je     c000b002 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000affe:	3c 2f                	cmp    al,0x2f
c000b000:	75 18                	jne    c000b01a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000b002:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b005:	3c 60                	cmp    al,0x60
c000b007:	7e 03                	jle    c000b00c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000b009:	83 e8 20             	sub    eax,0x20
c000b00c:	88 04 24             	mov    BYTE PTR [esp],al
c000b00f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b016:	50                   	push   eax
c000b017:	50                   	push   eax
c000b018:	eb 18                	jmp    c000b032 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000b01a:	50                   	push   eax
c000b01b:	50                   	push   eax
c000b01c:	55                   	push   ebp
c000b01d:	56                   	push   esi
c000b01e:	e8 fd 55 ff ff       	call   c0000620 <strcpy>
c000b023:	5a                   	pop    edx
c000b024:	59                   	pop    ecx
c000b025:	68 bf ea 01 c0       	push   0xc001eabf
c000b02a:	56                   	push   esi
c000b02b:	e8 b0 57 ff ff       	call   c00007e0 <strcat>
c000b030:	5d                   	pop    ebp
c000b031:	58                   	pop    eax
c000b032:	57                   	push   edi
c000b033:	56                   	push   esi
c000b034:	e8 a7 57 ff ff       	call   c00007e0 <strcat>
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b03f:	3c 60                	cmp    al,0x60
c000b041:	7e 03                	jle    c000b046 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b043:	83 e8 20             	sub    eax,0x20
c000b046:	88 04 24             	mov    BYTE PTR [esp],al
c000b049:	88 03                	mov    BYTE PTR [ebx],al
c000b04b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b052:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b058:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b05c:	bf 03 00 00 00       	mov    edi,0x3
c000b061:	b8 03 00 00 00       	mov    eax,0x3
c000b066:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b069:	84 d2                	test   dl,dl
c000b06b:	0f 84 91 00 00 00    	je     c000b102 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b071:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b074:	80 fa 5c             	cmp    dl,0x5c
c000b077:	74 05                	je     c000b07e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b079:	80 fa 2f             	cmp    dl,0x2f
c000b07c:	75 12                	jne    c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b07e:	89 c5                	mov    ebp,eax
c000b080:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b085:	74 09                	je     c000b090 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b087:	40                   	inc    eax
c000b088:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b08c:	89 cf                	mov    edi,ecx
c000b08e:	eb d6                	jmp    c000b066 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b090:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b095:	75 5b                	jne    c000b0f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b097:	80 fa 2e             	cmp    dl,0x2e
c000b09a:	75 56                	jne    c000b0f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b09c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b0a0:	74 19                	je     c000b0bb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b0a2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0a7:	74 53                	je     c000b0fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0a9:	89 f9                	mov    ecx,edi
c000b0ab:	41                   	inc    ecx
c000b0ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0af:	80 fa 2f             	cmp    dl,0x2f
c000b0b2:	74 f7                	je     c000b0ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b4:	80 fa 5c             	cmp    dl,0x5c
c000b0b7:	74 f2                	je     c000b0ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b9:	eb d1                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0bb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0c0:	74 3a                	je     c000b0fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0c2:	83 f8 03             	cmp    eax,0x3
c000b0c5:	74 c5                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0c7:	41                   	inc    ecx
c000b0c8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0cb:	80 fa 2f             	cmp    dl,0x2f
c000b0ce:	74 f7                	je     c000b0c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d0:	80 fa 5c             	cmp    dl,0x5c
c000b0d3:	74 f2                	je     c000b0c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0d5:	48                   	dec    eax
c000b0d6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0da:	75 06                	jne    c000b0e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0e0:	eb f3                	jmp    c000b0d5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0e6:	74 07                	je     c000b0ef <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0ec:	48                   	dec    eax
c000b0ed:	eb f3                	jmp    c000b0e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0ef:	40                   	inc    eax
c000b0f0:	eb 9a                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f2:	80 fa 2f             	cmp    dl,0x2f
c000b0f5:	74 95                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f7:	80 fa 5c             	cmp    dl,0x5c
c000b0fa:	74 90                	je     c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0fc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b0ff:	40                   	inc    eax
c000b100:	eb 8a                	jmp    c000b08c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b102:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	53                   	push   ebx
c000b10a:	e8 51 54 ff ff       	call   c0000560 <strlen>
c000b10f:	83 c4 10             	add    esp,0x10
c000b112:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b117:	75 26                	jne    c000b13f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b119:	83 ec 0c             	sub    esp,0xc
c000b11c:	53                   	push   ebx
c000b11d:	e8 3e 54 ff ff       	call   c0000560 <strlen>
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b12a:	74 26                	je     c000b152 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b12c:	83 ec 0c             	sub    esp,0xc
c000b12f:	53                   	push   ebx
c000b130:	e8 2b 54 ff ff       	call   c0000560 <strlen>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b13d:	eb c7                	jmp    c000b106 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b13f:	83 ec 0c             	sub    esp,0xc
c000b142:	53                   	push   ebx
c000b143:	e8 18 54 ff ff       	call   c0000560 <strlen>
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b150:	74 c7                	je     c000b119 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b152:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b158:	5b                   	pop    ebx
c000b159:	5e                   	pop    esi
c000b15a:	5f                   	pop    edi
c000b15b:	5d                   	pop    ebp
c000b15c:	c3                   	ret    
c000b15d:	90                   	nop

c000b15e <File::File(char const*, Process*)>:
c000b15e:	83 ec 0c             	sub    esp,0xc
c000b161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b165:	83 ec 08             	sub    esp,0x8
c000b168:	6a 00                	push   0x0
c000b16a:	50                   	push   eax
c000b16b:	e8 e2 e3 ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	ba 7c de 01 c0       	mov    edx,0xc001de7c
c000b178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b17c:	89 10                	mov    DWORD PTR [eax],edx
c000b17e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b182:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b18c:	83 c0 0d             	add    eax,0xd
c000b18f:	83 ec 04             	sub    esp,0x4
c000b192:	52                   	push   edx
c000b193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b197:	50                   	push   eax
c000b198:	e8 17 fe ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b19d:	83 c4 10             	add    esp,0x10
c000b1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b1a7:	8d 50 bf             	lea    edx,[eax-0x41]
c000b1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1c0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1c6:	25 ff 00 00 00       	and    eax,0xff
c000b1cb:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b1d2:	85 c0                	test   eax,eax
c000b1d4:	74 42                	je     c000b218 <File::File(char const*, Process*)+0xba>
c000b1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1da:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1e0:	25 ff 00 00 00       	and    eax,0xff
c000b1e5:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b1ec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1f2:	85 c0                	test   eax,eax
c000b1f4:	75 22                	jne    c000b218 <File::File(char const*, Process*)+0xba>
c000b1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b200:	25 ff 00 00 00       	and    eax,0xff
c000b205:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b20c:	83 ec 0c             	sub    esp,0xc
c000b20f:	50                   	push   eax
c000b210:	e8 f9 1f 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	90                   	nop
c000b219:	83 c4 0c             	add    esp,0xc
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop

c000b21e <File::open(FileOpenMode)>:
c000b21e:	53                   	push   ebx
c000b21f:	b8 0b 00 00 00       	mov    eax,0xb
c000b224:	83 ec 08             	sub    esp,0x8
c000b227:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b22b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b232:	80 fa 19             	cmp    dl,0x19
c000b235:	77 40                	ja     c000b277 <File::open(FileOpenMode)+0x59>
c000b237:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b23e:	85 d2                	test   edx,edx
c000b240:	74 35                	je     c000b277 <File::open(FileOpenMode)+0x59>
c000b242:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b248:	85 d2                	test   edx,edx
c000b24a:	74 2b                	je     c000b277 <File::open(FileOpenMode)+0x59>
c000b24c:	b8 06 00 00 00       	mov    eax,0x6
c000b251:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b255:	75 20                	jne    c000b277 <File::open(FileOpenMode)+0x59>
c000b257:	8b 02                	mov    eax,DWORD PTR [edx]
c000b259:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	51                   	push   ecx
c000b264:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b267:	51                   	push   ecx
c000b268:	52                   	push   edx
c000b269:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b26c:	83 c4 10             	add    esp,0x10
c000b26f:	85 c0                	test   eax,eax
c000b271:	75 04                	jne    c000b277 <File::open(FileOpenMode)+0x59>
c000b273:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b277:	83 c4 08             	add    esp,0x8
c000b27a:	5b                   	pop    ebx
c000b27b:	c3                   	ret    

c000b27c <File::close()>:
c000b27c:	53                   	push   ebx
c000b27d:	b8 0b 00 00 00       	mov    eax,0xb
c000b282:	83 ec 08             	sub    esp,0x8
c000b285:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b289:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b290:	80 fa 19             	cmp    dl,0x19
c000b293:	77 41                	ja     c000b2d6 <File::close()+0x5a>
c000b295:	8b 1c 95 a0 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd160]
c000b29c:	85 db                	test   ebx,ebx
c000b29e:	74 36                	je     c000b2d6 <File::close()+0x5a>
c000b2a0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b2a7:	74 2d                	je     c000b2d6 <File::close()+0x5a>
c000b2a9:	b8 05 00 00 00       	mov    eax,0x5
c000b2ae:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b2b2:	74 22                	je     c000b2d6 <File::close()+0x5a>
c000b2b4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b2b8:	8b 04 95 a0 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd160]
c000b2bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b2c5:	53                   	push   ebx
c000b2c6:	53                   	push   ebx
c000b2c7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2c9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2cf:	50                   	push   eax
c000b2d0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b2d3:	83 c4 10             	add    esp,0x10
c000b2d6:	83 c4 08             	add    esp,0x8
c000b2d9:	5b                   	pop    ebx
c000b2da:	c3                   	ret    
c000b2db:	90                   	nop

c000b2dc <File::seek(unsigned long long)>:
c000b2dc:	56                   	push   esi
c000b2dd:	53                   	push   ebx
c000b2de:	b8 0b 00 00 00       	mov    eax,0xb
c000b2e3:	51                   	push   ecx
c000b2e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2ec:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2f7:	80 fa 19             	cmp    dl,0x19
c000b2fa:	77 31                	ja     c000b32d <File::seek(unsigned long long)+0x51>
c000b2fc:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b303:	85 d2                	test   edx,edx
c000b305:	74 26                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b307:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b30d:	85 d2                	test   edx,edx
c000b30f:	74 1c                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b311:	b8 05 00 00 00       	mov    eax,0x5
c000b316:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b31a:	74 11                	je     c000b32d <File::seek(unsigned long long)+0x51>
c000b31c:	8b 02                	mov    eax,DWORD PTR [edx]
c000b31e:	53                   	push   ebx
c000b31f:	51                   	push   ecx
c000b320:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b326:	52                   	push   edx
c000b327:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	5a                   	pop    edx
c000b32e:	5b                   	pop    ebx
c000b32f:	5e                   	pop    esi
c000b330:	c3                   	ret    
c000b331:	90                   	nop

c000b332 <File::tell(unsigned long long*)>:
c000b332:	83 ec 0c             	sub    esp,0xc
c000b335:	b8 0b 00 00 00       	mov    eax,0xb
c000b33a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b33e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b345:	80 fa 19             	cmp    dl,0x19
c000b348:	77 34                	ja     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b34a:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b351:	85 d2                	test   edx,edx
c000b353:	74 29                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b355:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b35b:	85 d2                	test   edx,edx
c000b35d:	74 1f                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b35f:	b8 05 00 00 00       	mov    eax,0x5
c000b364:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b368:	74 14                	je     c000b37e <File::tell(unsigned long long*)+0x4c>
c000b36a:	50                   	push   eax
c000b36b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b36d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b371:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b377:	52                   	push   edx
c000b378:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b37b:	83 c4 10             	add    esp,0x10
c000b37e:	83 c4 0c             	add    esp,0xc
c000b381:	c3                   	ret    

c000b382 <File::rewind()>:
c000b382:	83 ec 10             	sub    esp,0x10
c000b385:	6a 00                	push   0x0
c000b387:	6a 00                	push   0x0
c000b389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b38d:	e8 4a ff ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c000b392:	83 c4 1c             	add    esp,0x1c
c000b395:	c3                   	ret    

c000b396 <File::unlink()>:
c000b396:	83 ec 0c             	sub    esp,0xc
c000b399:	b8 0b 00 00 00       	mov    eax,0xb
c000b39e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3a9:	80 f9 19             	cmp    cl,0x19
c000b3ac:	77 2f                	ja     c000b3dd <File::unlink()+0x47>
c000b3ae:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b3b5:	85 c9                	test   ecx,ecx
c000b3b7:	74 24                	je     c000b3dd <File::unlink()+0x47>
c000b3b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3bf:	85 c9                	test   ecx,ecx
c000b3c1:	74 1a                	je     c000b3dd <File::unlink()+0x47>
c000b3c3:	b8 06 00 00 00       	mov    eax,0x6
c000b3c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3cc:	75 0f                	jne    c000b3dd <File::unlink()+0x47>
c000b3ce:	83 c2 0d             	add    edx,0xd
c000b3d1:	50                   	push   eax
c000b3d2:	50                   	push   eax
c000b3d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3d5:	52                   	push   edx
c000b3d6:	51                   	push   ecx
c000b3d7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	83 c4 0c             	add    esp,0xc
c000b3e0:	c3                   	ret    
c000b3e1:	90                   	nop

c000b3e2 <File::rename(char const*)>:
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b3ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3f5:	80 f9 19             	cmp    cl,0x19
c000b3f8:	77 32                	ja     c000b42c <File::rename(char const*)+0x4a>
c000b3fa:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b401:	85 c9                	test   ecx,ecx
c000b403:	74 27                	je     c000b42c <File::rename(char const*)+0x4a>
c000b405:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b40b:	85 c9                	test   ecx,ecx
c000b40d:	74 1d                	je     c000b42c <File::rename(char const*)+0x4a>
c000b40f:	b8 06 00 00 00       	mov    eax,0x6
c000b414:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b418:	75 12                	jne    c000b42c <File::rename(char const*)+0x4a>
c000b41a:	83 c2 0d             	add    edx,0xd
c000b41d:	50                   	push   eax
c000b41e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b420:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b424:	52                   	push   edx
c000b425:	51                   	push   ecx
c000b426:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	83 c4 0c             	add    esp,0xc
c000b42f:	c3                   	ret    

c000b430 <File::chfatattr(unsigned char, unsigned char)>:
c000b430:	57                   	push   edi
c000b431:	b8 0b 00 00 00       	mov    eax,0xb
c000b436:	56                   	push   esi
c000b437:	53                   	push   ebx
c000b438:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b43c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b440:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b447:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b44b:	80 f9 19             	cmp    cl,0x19
c000b44e:	77 37                	ja     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b450:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b457:	85 c9                	test   ecx,ecx
c000b459:	74 2c                	je     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b45b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b461:	85 c9                	test   ecx,ecx
c000b463:	74 22                	je     c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b465:	b8 06 00 00 00       	mov    eax,0x6
c000b46a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b46e:	75 17                	jne    c000b487 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b470:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b472:	89 f0                	mov    eax,esi
c000b474:	83 c2 0d             	add    edx,0xd
c000b477:	0f b6 f0             	movzx  esi,al
c000b47a:	0f b6 db             	movzx  ebx,bl
c000b47d:	56                   	push   esi
c000b47e:	53                   	push   ebx
c000b47f:	52                   	push   edx
c000b480:	51                   	push   ecx
c000b481:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b484:	83 c4 10             	add    esp,0x10
c000b487:	5b                   	pop    ebx
c000b488:	5e                   	pop    esi
c000b489:	5f                   	pop    edi
c000b48a:	c3                   	ret    
c000b48b:	90                   	nop

c000b48c <File::exists()>:
c000b48c:	83 ec 0c             	sub    esp,0xc
c000b48f:	31 c0                	xor    eax,eax
c000b491:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b495:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b49c:	80 f9 19             	cmp    cl,0x19
c000b49f:	77 24                	ja     c000b4c5 <File::exists()+0x39>
c000b4a1:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b4a8:	85 c9                	test   ecx,ecx
c000b4aa:	74 19                	je     c000b4c5 <File::exists()+0x39>
c000b4ac:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4b2:	85 c9                	test   ecx,ecx
c000b4b4:	74 0f                	je     c000b4c5 <File::exists()+0x39>
c000b4b6:	83 c2 0d             	add    edx,0xd
c000b4b9:	50                   	push   eax
c000b4ba:	50                   	push   eax
c000b4bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4bd:	52                   	push   edx
c000b4be:	51                   	push   ecx
c000b4bf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	83 c4 0c             	add    esp,0xc
c000b4c8:	c3                   	ret    
c000b4c9:	90                   	nop

c000b4ca <File::stat(unsigned long long*, bool*)>:
c000b4ca:	56                   	push   esi
c000b4cb:	53                   	push   ebx
c000b4cc:	50                   	push   eax
c000b4cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b4d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4e5:	80 f9 19             	cmp    cl,0x19
c000b4e8:	77 3d                	ja     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ea:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b4f1:	85 c9                	test   ecx,ecx
c000b4f3:	74 32                	je     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4fb:	85 c9                	test   ecx,ecx
c000b4fd:	74 28                	je     c000b527 <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b501:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b505:	74 13                	je     c000b51a <File::stat(unsigned long long*, bool*)+0x50>
c000b507:	83 ec 04             	sub    esp,0x4
c000b50a:	56                   	push   esi
c000b50b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b511:	51                   	push   ecx
c000b512:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b515:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b518:	eb 0a                	jmp    c000b524 <File::stat(unsigned long long*, bool*)+0x5a>
c000b51a:	53                   	push   ebx
c000b51b:	83 c2 0d             	add    edx,0xd
c000b51e:	56                   	push   esi
c000b51f:	52                   	push   edx
c000b520:	51                   	push   ecx
c000b521:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	5a                   	pop    edx
c000b528:	5b                   	pop    ebx
c000b529:	5e                   	pop    esi
c000b52a:	c3                   	ret    

c000b52b <Fs::setcwd(Process*, char*)>:
c000b52b:	55                   	push   ebp
c000b52c:	57                   	push   edi
c000b52d:	56                   	push   esi
c000b52e:	53                   	push   ebx
c000b52f:	81 ec 20 02 00 00    	sub    esp,0x220
c000b535:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b53c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b542:	57                   	push   edi
c000b543:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b54a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b54e:	56                   	push   esi
c000b54f:	e8 60 fa ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b554:	89 34 24             	mov    DWORD PTR [esp],esi
c000b557:	e8 04 50 ff ff       	call   c0000560 <strlen>
c000b55c:	83 c4 10             	add    esp,0x10
c000b55f:	83 f8 02             	cmp    eax,0x2
c000b562:	77 15                	ja     c000b579 <Fs::setcwd(Process*, char*)+0x4e>
c000b564:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b569:	83 eb 41             	sub    ebx,0x41
c000b56c:	8b 04 9d a0 2e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd160]
c000b573:	85 c0                	test   eax,eax
c000b575:	75 1c                	jne    c000b593 <Fs::setcwd(Process*, char*)+0x68>
c000b577:	eb 2f                	jmp    c000b5a8 <Fs::setcwd(Process*, char*)+0x7d>
c000b579:	83 ec 0c             	sub    esp,0xc
c000b57c:	56                   	push   esi
c000b57d:	e8 de 4f ff ff       	call   c0000560 <strlen>
c000b582:	83 c4 10             	add    esp,0x10
c000b585:	83 f8 03             	cmp    eax,0x3
c000b588:	75 57                	jne    c000b5e1 <Fs::setcwd(Process*, char*)+0xb6>
c000b58a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b58f:	75 50                	jne    c000b5e1 <Fs::setcwd(Process*, char*)+0xb6>
c000b591:	eb d1                	jmp    c000b564 <Fs::setcwd(Process*, char*)+0x39>
c000b593:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b59a:	75 0c                	jne    c000b5a8 <Fs::setcwd(Process*, char*)+0x7d>
c000b59c:	83 ec 0c             	sub    esp,0xc
c000b59f:	50                   	push   eax
c000b5a0:	e8 69 1c 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b5a5:	83 c4 10             	add    esp,0x10
c000b5a8:	b8 03 00 00 00       	mov    eax,0x3
c000b5ad:	83 fb 19             	cmp    ebx,0x19
c000b5b0:	0f 87 c6 00 00 00    	ja     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5b6:	8b 14 9d a0 2e 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd160]
c000b5bd:	b8 05 00 00 00       	mov    eax,0x5
c000b5c2:	85 d2                	test   edx,edx
c000b5c4:	0f 84 b2 00 00 00    	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5ca:	b8 06 00 00 00       	mov    eax,0x6
c000b5cf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b5d6:	0f 85 92 00 00 00    	jne    c000b66e <Fs::setcwd(Process*, char*)+0x143>
c000b5dc:	e9 9b 00 00 00       	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b5e1:	83 ec 0c             	sub    esp,0xc
c000b5e4:	68 14 01 00 00       	push   0x114
c000b5e9:	e8 6b c8 ff ff       	call   c0007e59 <malloc>
c000b5ee:	83 c4 0c             	add    esp,0xc
c000b5f1:	89 c3                	mov    ebx,eax
c000b5f3:	55                   	push   ebp
c000b5f4:	56                   	push   esi
c000b5f5:	50                   	push   eax
c000b5f6:	e8 63 fb ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000b5fb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b600:	83 c4 0c             	add    esp,0xc
c000b603:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b607:	50                   	push   eax
c000b608:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b60c:	50                   	push   eax
c000b60d:	53                   	push   ebx
c000b60e:	e8 b7 fe ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	83 f8 02             	cmp    eax,0x2
c000b619:	74 04                	je     c000b61f <Fs::setcwd(Process*, char*)+0xf4>
c000b61b:	85 c0                	test   eax,eax
c000b61d:	74 1c                	je     c000b63b <Fs::setcwd(Process*, char*)+0x110>
c000b61f:	b8 01 00 00 00       	mov    eax,0x1
c000b624:	85 db                	test   ebx,ebx
c000b626:	74 54                	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b628:	83 ec 0c             	sub    esp,0xc
c000b62b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b62d:	53                   	push   ebx
c000b62e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b631:	83 c4 10             	add    esp,0x10
c000b634:	b8 01 00 00 00       	mov    eax,0x1
c000b639:	eb 41                	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b63b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b640:	75 1c                	jne    c000b65e <Fs::setcwd(Process*, char*)+0x133>
c000b642:	b8 02 00 00 00       	mov    eax,0x2
c000b647:	85 db                	test   ebx,ebx
c000b649:	74 31                	je     c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b64b:	83 ec 0c             	sub    esp,0xc
c000b64e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b650:	53                   	push   ebx
c000b651:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b654:	83 c4 10             	add    esp,0x10
c000b657:	b8 02 00 00 00       	mov    eax,0x2
c000b65c:	eb 1e                	jmp    c000b67c <Fs::setcwd(Process*, char*)+0x151>
c000b65e:	85 db                	test   ebx,ebx
c000b660:	74 0c                	je     c000b66e <Fs::setcwd(Process*, char*)+0x143>
c000b662:	83 ec 0c             	sub    esp,0xc
c000b665:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b667:	53                   	push   ebx
c000b668:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b66b:	83 c4 10             	add    esp,0x10
c000b66e:	50                   	push   eax
c000b66f:	50                   	push   eax
c000b670:	56                   	push   esi
c000b671:	57                   	push   edi
c000b672:	e8 a9 4f ff ff       	call   c0000620 <strcpy>
c000b677:	83 c4 10             	add    esp,0x10
c000b67a:	31 c0                	xor    eax,eax
c000b67c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b682:	5b                   	pop    ebx
c000b683:	5e                   	pop    esi
c000b684:	5f                   	pop    edi
c000b685:	5d                   	pop    ebp
c000b686:	c3                   	ret    
c000b687:	90                   	nop

c000b688 <Directory::Directory(char const*, Process*)>:
c000b688:	83 ec 0c             	sub    esp,0xc
c000b68b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b68f:	83 ec 08             	sub    esp,0x8
c000b692:	6a 00                	push   0x0
c000b694:	50                   	push   eax
c000b695:	e8 b8 de ff ff       	call   c0009552 <UnixFile::UnixFile(int)>
c000b69a:	83 c4 10             	add    esp,0x10
c000b69d:	ba 98 de 01 c0       	mov    edx,0xc001de98
c000b6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a6:	89 10                	mov    DWORD PTR [eax],edx
c000b6a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6ac:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6b6:	83 c0 0d             	add    eax,0xd
c000b6b9:	83 ec 04             	sub    esp,0x4
c000b6bc:	52                   	push   edx
c000b6bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c1:	50                   	push   eax
c000b6c2:	e8 ed f8 ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6c7:	83 c4 10             	add    esp,0x10
c000b6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ce:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6d1:	8d 50 bf             	lea    edx,[eax-0x41]
c000b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6f0:	25 ff 00 00 00       	and    eax,0xff
c000b6f5:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b6fc:	85 c0                	test   eax,eax
c000b6fe:	74 42                	je     c000b742 <Directory::Directory(char const*, Process*)+0xba>
c000b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b704:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b70a:	25 ff 00 00 00       	and    eax,0xff
c000b70f:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b716:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b71c:	85 c0                	test   eax,eax
c000b71e:	75 22                	jne    c000b742 <Directory::Directory(char const*, Process*)+0xba>
c000b720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b724:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b72a:	25 ff 00 00 00       	and    eax,0xff
c000b72f:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b736:	83 ec 0c             	sub    esp,0xc
c000b739:	50                   	push   eax
c000b73a:	e8 cf 1a 00 00       	call   c000d20e <LogicalDisk::mount()>
c000b73f:	83 c4 10             	add    esp,0x10
c000b742:	90                   	nop
c000b743:	83 c4 0c             	add    esp,0xc
c000b746:	c3                   	ret    
c000b747:	90                   	nop

c000b748 <Directory::open()>:
c000b748:	53                   	push   ebx
c000b749:	b8 0b 00 00 00       	mov    eax,0xb
c000b74e:	83 ec 08             	sub    esp,0x8
c000b751:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b755:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b75c:	80 fa 19             	cmp    dl,0x19
c000b75f:	77 3d                	ja     c000b79e <Directory::open()+0x56>
c000b761:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b768:	85 d2                	test   edx,edx
c000b76a:	74 32                	je     c000b79e <Directory::open()+0x56>
c000b76c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b772:	85 d2                	test   edx,edx
c000b774:	74 28                	je     c000b79e <Directory::open()+0x56>
c000b776:	b8 06 00 00 00       	mov    eax,0x6
c000b77b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b77f:	75 1d                	jne    c000b79e <Directory::open()+0x56>
c000b781:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b787:	50                   	push   eax
c000b788:	8b 02                	mov    eax,DWORD PTR [edx]
c000b78a:	51                   	push   ecx
c000b78b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b78e:	51                   	push   ecx
c000b78f:	52                   	push   edx
c000b790:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	85 c0                	test   eax,eax
c000b798:	75 04                	jne    c000b79e <Directory::open()+0x56>
c000b79a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b79e:	83 c4 08             	add    esp,0x8
c000b7a1:	5b                   	pop    ebx
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <Directory::close()>:
c000b7a4:	53                   	push   ebx
c000b7a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b7aa:	83 ec 08             	sub    esp,0x8
c000b7ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b7b1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7b8:	80 fa 19             	cmp    dl,0x19
c000b7bb:	77 41                	ja     c000b7fe <Directory::close()+0x5a>
c000b7bd:	8b 1c 95 a0 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd160]
c000b7c4:	85 db                	test   ebx,ebx
c000b7c6:	74 36                	je     c000b7fe <Directory::close()+0x5a>
c000b7c8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b7cf:	74 2d                	je     c000b7fe <Directory::close()+0x5a>
c000b7d1:	b8 05 00 00 00       	mov    eax,0x5
c000b7d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b7da:	74 22                	je     c000b7fe <Directory::close()+0x5a>
c000b7dc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7e0:	8b 04 95 a0 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd160]
c000b7e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b7ed:	53                   	push   ebx
c000b7ee:	53                   	push   ebx
c000b7ef:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b7f7:	50                   	push   eax
c000b7f8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	83 c4 08             	add    esp,0x8
c000b801:	5b                   	pop    ebx
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Directory::unlink()>:
c000b804:	83 ec 0c             	sub    esp,0xc
c000b807:	b8 0b 00 00 00       	mov    eax,0xb
c000b80c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b810:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b817:	80 f9 19             	cmp    cl,0x19
c000b81a:	77 2f                	ja     c000b84b <Directory::unlink()+0x47>
c000b81c:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b823:	85 c9                	test   ecx,ecx
c000b825:	74 24                	je     c000b84b <Directory::unlink()+0x47>
c000b827:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b82d:	85 c9                	test   ecx,ecx
c000b82f:	74 1a                	je     c000b84b <Directory::unlink()+0x47>
c000b831:	b8 06 00 00 00       	mov    eax,0x6
c000b836:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b83a:	75 0f                	jne    c000b84b <Directory::unlink()+0x47>
c000b83c:	83 c2 0d             	add    edx,0xd
c000b83f:	50                   	push   eax
c000b840:	50                   	push   eax
c000b841:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b843:	52                   	push   edx
c000b844:	51                   	push   ecx
c000b845:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b848:	83 c4 10             	add    esp,0x10
c000b84b:	83 c4 0c             	add    esp,0xc
c000b84e:	c3                   	ret    
c000b84f:	90                   	nop

c000b850 <Directory::rename(char const*)>:
c000b850:	83 ec 0c             	sub    esp,0xc
c000b853:	b8 0b 00 00 00       	mov    eax,0xb
c000b858:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b85c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b863:	80 f9 19             	cmp    cl,0x19
c000b866:	77 32                	ja     c000b89a <Directory::rename(char const*)+0x4a>
c000b868:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b86f:	85 c9                	test   ecx,ecx
c000b871:	74 27                	je     c000b89a <Directory::rename(char const*)+0x4a>
c000b873:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b879:	85 c9                	test   ecx,ecx
c000b87b:	74 1d                	je     c000b89a <Directory::rename(char const*)+0x4a>
c000b87d:	b8 06 00 00 00       	mov    eax,0x6
c000b882:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b886:	75 12                	jne    c000b89a <Directory::rename(char const*)+0x4a>
c000b888:	83 c2 0d             	add    edx,0xd
c000b88b:	50                   	push   eax
c000b88c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b892:	52                   	push   edx
c000b893:	51                   	push   ecx
c000b894:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	83 c4 0c             	add    esp,0xc
c000b89d:	c3                   	ret    

c000b89e <Directory::exists()>:
c000b89e:	83 ec 0c             	sub    esp,0xc
c000b8a1:	31 c0                	xor    eax,eax
c000b8a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8ae:	80 f9 19             	cmp    cl,0x19
c000b8b1:	77 24                	ja     c000b8d7 <Directory::exists()+0x39>
c000b8b3:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b8ba:	85 c9                	test   ecx,ecx
c000b8bc:	74 19                	je     c000b8d7 <Directory::exists()+0x39>
c000b8be:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b8c4:	85 c9                	test   ecx,ecx
c000b8c6:	74 0f                	je     c000b8d7 <Directory::exists()+0x39>
c000b8c8:	83 c2 0d             	add    edx,0xd
c000b8cb:	50                   	push   eax
c000b8cc:	50                   	push   eax
c000b8cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8cf:	52                   	push   edx
c000b8d0:	51                   	push   ecx
c000b8d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8d4:	83 c4 10             	add    esp,0x10
c000b8d7:	83 c4 0c             	add    esp,0xc
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <Directory::read(dirent*)>:
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	b8 0b 00 00 00       	mov    eax,0xb
c000b8e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8e8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8ef:	80 fa 19             	cmp    dl,0x19
c000b8f2:	77 30                	ja     c000b924 <Directory::read(dirent*)+0x48>
c000b8f4:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b8fb:	85 d2                	test   edx,edx
c000b8fd:	74 25                	je     c000b924 <Directory::read(dirent*)+0x48>
c000b8ff:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b906:	74 1c                	je     c000b924 <Directory::read(dirent*)+0x48>
c000b908:	83 ec 0c             	sub    esp,0xc
c000b90b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b90d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b911:	52                   	push   edx
c000b912:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b916:	6a 00                	push   0x0
c000b918:	68 10 01 00 00       	push   0x110
c000b91d:	51                   	push   ecx
c000b91e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b921:	83 c4 20             	add    esp,0x20
c000b924:	83 c4 1c             	add    esp,0x1c
c000b927:	c3                   	ret    

c000b928 <Directory::create()>:
c000b928:	83 ec 0c             	sub    esp,0xc
c000b92b:	b8 0b 00 00 00       	mov    eax,0xb
c000b930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b934:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b93b:	80 f9 19             	cmp    cl,0x19
c000b93e:	77 2f                	ja     c000b96f <Directory::create()+0x47>
c000b940:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b947:	85 c9                	test   ecx,ecx
c000b949:	74 24                	je     c000b96f <Directory::create()+0x47>
c000b94b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b951:	85 c9                	test   ecx,ecx
c000b953:	74 1a                	je     c000b96f <Directory::create()+0x47>
c000b955:	b8 06 00 00 00       	mov    eax,0x6
c000b95a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b95e:	75 0f                	jne    c000b96f <Directory::create()+0x47>
c000b960:	83 c2 0d             	add    edx,0xd
c000b963:	50                   	push   eax
c000b964:	50                   	push   eax
c000b965:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b967:	52                   	push   edx
c000b968:	51                   	push   ecx
c000b969:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b96c:	83 c4 10             	add    esp,0x10
c000b96f:	83 c4 0c             	add    esp,0xc
c000b972:	c3                   	ret    
c000b973:	90                   	nop

c000b974 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b974:	b8 0a 00 00 00       	mov    eax,0xa
c000b979:	c3                   	ret    
c000b97a:	66 90                	xchg   ax,ax

c000b97c <Bus::Bus(char const*)>:
c000b97c:	83 ec 0c             	sub    esp,0xc
c000b97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b983:	83 ec 08             	sub    esp,0x8
c000b986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b98a:	50                   	push   eax
c000b98b:	e8 30 08 00 00       	call   c000c1c0 <Device::Device(char const*)>
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c000b998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b99c:	89 10                	mov    DWORD PTR [eax],edx
c000b99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9ac:	90                   	nop
c000b9ad:	83 c4 0c             	add    esp,0xc
c000b9b0:	c3                   	ret    
c000b9b1:	90                   	nop
c000b9b2:	66 90                	xchg   ax,ax

c000b9b4 <Bus::~Bus()>:
c000b9b4:	83 ec 0c             	sub    esp,0xc
c000b9b7:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c000b9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c0:	89 10                	mov    DWORD PTR [eax],edx
c000b9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	50                   	push   eax
c000b9ca:	e8 5b 05 00 00       	call   c000bf2a <Device::~Device()>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	90                   	nop
c000b9d3:	83 c4 0c             	add    esp,0xc
c000b9d6:	c3                   	ret    
c000b9d7:	90                   	nop

c000b9d8 <Bus::~Bus()>:
c000b9d8:	83 ec 0c             	sub    esp,0xc
c000b9db:	83 ec 0c             	sub    esp,0xc
c000b9de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e2:	e8 cd ff ff ff       	call   c000b9b4 <Bus::~Bus()>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	83 ec 08             	sub    esp,0x8
c000b9ed:	68 58 01 00 00       	push   0x158
c000b9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9f6:	e8 f7 f0 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000b9fb:	83 c4 10             	add    esp,0x10
c000b9fe:	83 c4 0c             	add    esp,0xc
c000ba01:	c3                   	ret    

c000ba02 <beepThread(void*)>:
c000ba02:	83 ec 0c             	sub    esp,0xc
c000ba05:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000ba0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba0e:	48                   	dec    eax
c000ba0f:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000ba14:	75 01                	jne    c000ba17 <beepThread(void*)+0x15>
c000ba16:	fb                   	sti    
c000ba17:	83 ec 0c             	sub    esp,0xc
c000ba1a:	6b c2 0a             	imul   eax,edx,0xa
c000ba1d:	50                   	push   eax
c000ba1e:	e8 05 83 00 00       	call   c0013d28 <milliTenthSleep(unsigned int)>
c000ba23:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba2a:	e8 41 9f 00 00       	call   c0015970 <HalMakeBeep(int)>
c000ba2f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba37:	83 c4 1c             	add    esp,0x1c
c000ba3a:	e9 e5 81 00 00       	jmp    c0013c24 <blockTask(TaskState)>

c000ba3f <Krnl::beep(int, int, bool)>:
c000ba3f:	56                   	push   esi
c000ba40:	53                   	push   ebx
c000ba41:	83 ec 10             	sub    esp,0x10
c000ba44:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba50:	e8 1b 9f 00 00       	call   c0015970 <HalMakeBeep(int)>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	89 f0                	mov    eax,esi
c000ba5a:	84 c0                	test   al,al
c000ba5c:	74 1e                	je     c000ba7c <Krnl::beep(int, int, bool)+0x3d>
c000ba5e:	83 ec 0c             	sub    esp,0xc
c000ba61:	6b db 0a             	imul   ebx,ebx,0xa
c000ba64:	53                   	push   ebx
c000ba65:	e8 be 82 00 00       	call   c0013d28 <milliTenthSleep(unsigned int)>
c000ba6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba72:	83 c4 14             	add    esp,0x14
c000ba75:	5b                   	pop    ebx
c000ba76:	5e                   	pop    esi
c000ba77:	e9 f4 9e 00 00       	jmp    c0015970 <HalMakeBeep(int)>
c000ba7c:	68 e6 00 00 00       	push   0xe6
c000ba81:	53                   	push   ebx
c000ba82:	68 02 ba 00 c0       	push   0xc000ba02
c000ba87:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c000ba8d:	e8 76 7d 00 00       	call   c0013808 <Process::createThread(void (*)(void*), void*, int)>
c000ba92:	83 c4 14             	add    esp,0x14
c000ba95:	5b                   	pop    ebx
c000ba96:	5e                   	pop    esi
c000ba97:	c3                   	ret    

c000ba98 <User::loadClockSettings(int)>:
c000ba98:	53                   	push   ebx
c000ba99:	83 ec 14             	sub    esp,0x14
c000ba9c:	68 14 01 00 00       	push   0x114
c000baa1:	e8 b3 c3 ff ff       	call   c0007e59 <malloc>
c000baa6:	83 c4 0c             	add    esp,0xc
c000baa9:	89 c3                	mov    ebx,eax
c000baab:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c000bab1:	68 d8 de 01 c0       	push   0xc001ded8
c000bab6:	50                   	push   eax
c000bab7:	e8 a2 f6 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000babc:	58                   	pop    eax
c000babd:	5a                   	pop    edx
c000babe:	6a 01                	push   0x1
c000bac0:	53                   	push   ebx
c000bac1:	e8 58 f7 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c000bac6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bac9:	e8 ae f7 ff ff       	call   c000b27c <File::close()>
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	85 db                	test   ebx,ebx
c000bad3:	74 0f                	je     c000bae4 <User::loadClockSettings(int)+0x4c>
c000bad5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bad7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000badb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bade:	83 c4 08             	add    esp,0x8
c000bae1:	5b                   	pop    ebx
c000bae2:	ff e0                	jmp    eax
c000bae4:	83 c4 08             	add    esp,0x8
c000bae7:	5b                   	pop    ebx
c000bae8:	c3                   	ret    
c000bae9:	90                   	nop

c000baea <Clock::Clock(char const*)>:
c000baea:	83 ec 0c             	sub    esp,0xc
c000baed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baf1:	83 ec 08             	sub    esp,0x8
c000baf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf8:	50                   	push   eax
c000baf9:	e8 c2 06 00 00       	call   c000c1c0 <Device::Device(char const*)>
c000bafe:	83 c4 10             	add    esp,0x10
c000bb01:	ba 00 df 01 c0       	mov    edx,0xc001df00
c000bb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb0a:	89 10                	mov    DWORD PTR [eax],edx
c000bb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb10:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb1a:	90                   	nop
c000bb1b:	83 c4 0c             	add    esp,0xc
c000bb1e:	c3                   	ret    
c000bb1f:	90                   	nop

c000bb20 <Clock::~Clock()>:
c000bb20:	83 ec 0c             	sub    esp,0xc
c000bb23:	ba 00 df 01 c0       	mov    edx,0xc001df00
c000bb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2c:	89 10                	mov    DWORD PTR [eax],edx
c000bb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb32:	83 ec 0c             	sub    esp,0xc
c000bb35:	50                   	push   eax
c000bb36:	e8 ef 03 00 00       	call   c000bf2a <Device::~Device()>
c000bb3b:	83 c4 10             	add    esp,0x10
c000bb3e:	90                   	nop
c000bb3f:	83 c4 0c             	add    esp,0xc
c000bb42:	c3                   	ret    
c000bb43:	90                   	nop

c000bb44 <Clock::~Clock()>:
c000bb44:	83 ec 0c             	sub    esp,0xc
c000bb47:	83 ec 0c             	sub    esp,0xc
c000bb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb4e:	e8 cd ff ff ff       	call   c000bb20 <Clock::~Clock()>
c000bb53:	83 c4 10             	add    esp,0x10
c000bb56:	83 ec 08             	sub    esp,0x8
c000bb59:	68 58 01 00 00       	push   0x158
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	e8 8b ef ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	83 c4 0c             	add    esp,0xc
c000bb6d:	c3                   	ret    

c000bb6e <Clock::timeInSecondsLocal()>:
c000bb6e:	53                   	push   ebx
c000bb6f:	83 ec 14             	sub    esp,0x14
c000bb72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb76:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb78:	50                   	push   eax
c000bb79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb7c:	0f b6 0d 38 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a38
c000bb83:	03 0d 3c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a3c
c000bb89:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb8f:	89 cb                	mov    ebx,ecx
c000bb91:	c1 fb 1f             	sar    ebx,0x1f
c000bb94:	01 c8                	add    eax,ecx
c000bb96:	11 da                	adc    edx,ebx
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	31 c9                	xor    ecx,ecx
c000bb9d:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bba4:	74 05                	je     c000bbab <Clock::timeInSecondsLocal()+0x3d>
c000bba6:	b9 08 07 00 00       	mov    ecx,0x708
c000bbab:	31 db                	xor    ebx,ebx
c000bbad:	01 c8                	add    eax,ecx
c000bbaf:	11 da                	adc    edx,ebx
c000bbb1:	83 c4 08             	add    esp,0x8
c000bbb4:	5b                   	pop    ebx
c000bbb5:	c3                   	ret    

c000bbb6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbb6:	57                   	push   edi
c000bbb7:	56                   	push   esi
c000bbb8:	53                   	push   ebx
c000bbb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbc1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbc3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbc7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbca:	0f b6 05 38 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020a38
c000bbd1:	03 05 3c 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020a3c
c000bbd7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbdd:	99                   	cdq    
c000bbde:	29 c6                	sub    esi,eax
c000bbe0:	19 d7                	sbb    edi,edx
c000bbe2:	89 f0                	mov    eax,esi
c000bbe4:	89 fa                	mov    edx,edi
c000bbe6:	31 f6                	xor    esi,esi
c000bbe8:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bbef:	74 05                	je     c000bbf6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bbf1:	be 08 07 00 00       	mov    esi,0x708
c000bbf6:	31 ff                	xor    edi,edi
c000bbf8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bbfc:	29 f0                	sub    eax,esi
c000bbfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc02:	19 fa                	sbb    edx,edi
c000bc04:	89 d8                	mov    eax,ebx
c000bc06:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc0a:	5b                   	pop    ebx
c000bc0b:	5e                   	pop    esi
c000bc0c:	5f                   	pop    edi
c000bc0d:	ff e0                	jmp    eax

c000bc0f <datetimeToSeconds(datetime_t)>:
c000bc0f:	55                   	push   ebp
c000bc10:	57                   	push   edi
c000bc11:	56                   	push   esi
c000bc12:	53                   	push   ebx
c000bc13:	83 ec 14             	sub    esp,0x14
c000bc16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc1a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc1e:	89 d3                	mov    ebx,edx
c000bc20:	0f b6 c6             	movzx  eax,dh
c000bc23:	c1 eb 10             	shr    ebx,0x10
c000bc26:	48                   	dec    eax
c000bc27:	66 81 eb 6c 07       	sub    bx,0x76c
c000bc2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bc30:	0f b6 f5             	movzx  esi,ch
c000bc33:	89 cf                	mov    edi,ecx
c000bc35:	6b f6 3c             	imul   esi,esi,0x3c
c000bc38:	c1 ef 10             	shr    edi,0x10
c000bc3b:	0f b6 c9             	movzx  ecx,cl
c000bc3e:	89 f8                	mov    eax,edi
c000bc40:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc46:	0f b6 f8             	movzx  edi,al
c000bc49:	0f b6 d2             	movzx  edx,dl
c000bc4c:	01 fe                	add    esi,edi
c000bc4e:	01 f1                	add    ecx,esi
c000bc50:	0f b7 f3             	movzx  esi,bx
c000bc53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc57:	c1 f9 1f             	sar    ecx,0x1f
c000bc5a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc63:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc68:	8b 0c 8d 40 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe20c0]
c000bc6f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc73:	76 29                	jbe    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc75:	f6 c3 03             	test   bl,0x3
c000bc78:	75 24                	jne    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc7a:	31 d2                	xor    edx,edx
c000bc7c:	bf 64 00 00 00       	mov    edi,0x64
c000bc81:	89 d8                	mov    eax,ebx
c000bc83:	66 f7 f7             	div    di
c000bc86:	66 85 d2             	test   dx,dx
c000bc89:	75 12                	jne    c000bc9d <datetimeToSeconds(datetime_t)+0x8e>
c000bc8b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bc91:	bf 90 01 00 00       	mov    edi,0x190
c000bc96:	99                   	cdq    
c000bc97:	f7 ff                	idiv   edi
c000bc99:	85 d2                	test   edx,edx
c000bc9b:	75 01                	jne    c000bc9e <datetimeToSeconds(datetime_t)+0x8f>
c000bc9d:	41                   	inc    ecx
c000bc9e:	66 83 fb 46          	cmp    bx,0x46
c000bca2:	76 45                	jbe    c000bce9 <datetimeToSeconds(datetime_t)+0xda>
c000bca4:	bb 46 00 00 00       	mov    ebx,0x46
c000bca9:	bf 64 00 00 00       	mov    edi,0x64
c000bcae:	bd 90 01 00 00       	mov    ebp,0x190
c000bcb3:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcb8:	f6 c3 03             	test   bl,0x3
c000bcbb:	75 23                	jne    c000bce0 <datetimeToSeconds(datetime_t)+0xd1>
c000bcbd:	89 d8                	mov    eax,ebx
c000bcbf:	99                   	cdq    
c000bcc0:	f7 ff                	idiv   edi
c000bcc2:	b8 6e 01 00 00       	mov    eax,0x16e
c000bcc7:	85 d2                	test   edx,edx
c000bcc9:	75 15                	jne    c000bce0 <datetimeToSeconds(datetime_t)+0xd1>
c000bccb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcd1:	99                   	cdq    
c000bcd2:	f7 fd                	idiv   ebp
c000bcd4:	31 c0                	xor    eax,eax
c000bcd6:	85 d2                	test   edx,edx
c000bcd8:	0f 94 c0             	sete   al
c000bcdb:	05 6d 01 00 00       	add    eax,0x16d
c000bce0:	01 c1                	add    ecx,eax
c000bce2:	43                   	inc    ebx
c000bce3:	39 f3                	cmp    ebx,esi
c000bce5:	7c cc                	jl     c000bcb3 <datetimeToSeconds(datetime_t)+0xa4>
c000bce7:	eb 3b                	jmp    c000bd24 <datetimeToSeconds(datetime_t)+0x115>
c000bce9:	74 39                	je     c000bd24 <datetimeToSeconds(datetime_t)+0x115>
c000bceb:	b8 45 00 00 00       	mov    eax,0x45
c000bcf0:	89 c2                	mov    edx,eax
c000bcf2:	83 e2 03             	and    edx,0x3
c000bcf5:	39 f0                	cmp    eax,esi
c000bcf7:	7e 13                	jle    c000bd0c <datetimeToSeconds(datetime_t)+0xfd>
c000bcf9:	85 d2                	test   edx,edx
c000bcfb:	0f 94 c2             	sete   dl
c000bcfe:	48                   	dec    eax
c000bcff:	0f b6 d2             	movzx  edx,dl
c000bd02:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bd08:	29 d1                	sub    ecx,edx
c000bd0a:	eb e4                	jmp    c000bcf0 <datetimeToSeconds(datetime_t)+0xe1>
c000bd0c:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd11:	85 d2                	test   edx,edx
c000bd13:	75 0d                	jne    c000bd22 <datetimeToSeconds(datetime_t)+0x113>
c000bd15:	31 c0                	xor    eax,eax
c000bd17:	66 85 db             	test   bx,bx
c000bd1a:	0f 95 c0             	setne  al
c000bd1d:	05 6d 01 00 00       	add    eax,0x16d
c000bd22:	29 c1                	sub    ecx,eax
c000bd24:	b8 80 51 01 00       	mov    eax,0x15180
c000bd29:	f7 e9                	imul   ecx
c000bd2b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd2f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bd33:	83 c4 14             	add    esp,0x14
c000bd36:	5b                   	pop    ebx
c000bd37:	5e                   	pop    esi
c000bd38:	5f                   	pop    edi
c000bd39:	5d                   	pop    ebp
c000bd3a:	c3                   	ret    
c000bd3b:	90                   	nop

c000bd3c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd3c:	57                   	push   edi
c000bd3d:	56                   	push   esi
c000bd3e:	53                   	push   ebx
c000bd3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd43:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd45:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd50:	e8 ba fe ff ff       	call   c000bc0f <datetimeToSeconds(datetime_t)>
c000bd55:	59                   	pop    ecx
c000bd56:	0f b6 0d 38 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a38
c000bd5d:	5b                   	pop    ebx
c000bd5e:	03 0d 3c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a3c
c000bd64:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd6a:	89 cb                	mov    ebx,ecx
c000bd6c:	c1 fb 1f             	sar    ebx,0x1f
c000bd6f:	29 c8                	sub    eax,ecx
c000bd71:	19 da                	sbb    edx,ebx
c000bd73:	31 c9                	xor    ecx,ecx
c000bd75:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bd7c:	74 05                	je     c000bd83 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd7e:	b9 08 07 00 00       	mov    ecx,0x708
c000bd83:	31 db                	xor    ebx,ebx
c000bd85:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd89:	29 c8                	sub    eax,ecx
c000bd8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd8f:	19 da                	sbb    edx,ebx
c000bd91:	89 f8                	mov    eax,edi
c000bd93:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd97:	5b                   	pop    ebx
c000bd98:	5e                   	pop    esi
c000bd99:	5f                   	pop    edi
c000bd9a:	ff e0                	jmp    eax

c000bd9c <secondsToDatetime(unsigned long long)>:
c000bd9c:	55                   	push   ebp
c000bd9d:	57                   	push   edi
c000bd9e:	56                   	push   esi
c000bd9f:	53                   	push   ebx
c000bda0:	83 ec 1c             	sub    esp,0x1c
c000bda3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bda7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bdab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bdaf:	6a 00                	push   0x0
c000bdb1:	68 80 51 01 00       	push   0x15180
c000bdb6:	55                   	push   ebp
c000bdb7:	57                   	push   edi
c000bdb8:	e8 e3 03 01 00       	call   c001c1a0 <__udivdi3>
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdca:	6a 00                	push   0x0
c000bdcc:	68 80 51 01 00       	push   0x15180
c000bdd1:	55                   	push   ebp
c000bdd2:	57                   	push   edi
c000bdd3:	bf 10 0e 00 00       	mov    edi,0xe10
c000bdd8:	e8 c3 04 01 00       	call   c001c2a0 <__umoddi3>
c000bddd:	83 c4 10             	add    esp,0x10
c000bde0:	99                   	cdq    
c000bde1:	f7 ff                	idiv   edi
c000bde3:	bf 3c 00 00 00       	mov    edi,0x3c
c000bde8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bdeb:	89 d0                	mov    eax,edx
c000bded:	99                   	cdq    
c000bdee:	f7 ff                	idiv   edi
c000bdf0:	85 db                	test   ebx,ebx
c000bdf2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bdf5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bdf8:	79 11                	jns    c000be0b <secondsToDatetime(unsigned long long)+0x6f>
c000bdfa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdfe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be04:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be09:	eb 07                	jmp    c000be12 <secondsToDatetime(unsigned long long)+0x76>
c000be0b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be10:	89 d8                	mov    eax,ebx
c000be12:	bf b4 05 00 00       	mov    edi,0x5b4
c000be17:	99                   	cdq    
c000be18:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be1d:	f7 f9                	idiv   ecx
c000be1f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be28:	31 d2                	xor    edx,edx
c000be2a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be32:	01 c3                	add    ebx,eax
c000be34:	89 d8                	mov    eax,ebx
c000be36:	f7 f1                	div    ecx
c000be38:	31 d2                	xor    edx,edx
c000be3a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be3d:	89 d8                	mov    eax,ebx
c000be3f:	f7 f7                	div    edi
c000be41:	31 d2                	xor    edx,edx
c000be43:	29 c1                	sub    ecx,eax
c000be45:	89 d8                	mov    eax,ebx
c000be47:	f7 f5                	div    ebp
c000be49:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be4e:	29 c1                	sub    ecx,eax
c000be50:	31 d2                	xor    edx,edx
c000be52:	89 c8                	mov    eax,ecx
c000be54:	f7 f5                	div    ebp
c000be56:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be5f:	31 d2                	xor    edx,edx
c000be61:	89 c8                	mov    eax,ecx
c000be63:	f7 f5                	div    ebp
c000be65:	31 d2                	xor    edx,edx
c000be67:	01 c3                	add    ebx,eax
c000be69:	89 c8                	mov    eax,ecx
c000be6b:	f7 f7                	div    edi
c000be6d:	bf 99 00 00 00       	mov    edi,0x99
c000be72:	29 c3                	sub    ebx,eax
c000be74:	31 d2                	xor    edx,edx
c000be76:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be7e:	29 c3                	sub    ebx,eax
c000be80:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be83:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be86:	bb 05 00 00 00       	mov    ebx,0x5
c000be8b:	83 c1 02             	add    ecx,0x2
c000be8e:	89 c8                	mov    eax,ecx
c000be90:	f7 f7                	div    edi
c000be92:	31 d2                	xor    edx,edx
c000be94:	89 c7                	mov    edi,eax
c000be96:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000be9c:	83 c0 02             	add    eax,0x2
c000be9f:	f7 f3                	div    ebx
c000bea1:	89 eb                	mov    ebx,ebp
c000bea3:	29 c3                	sub    ebx,eax
c000bea5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000beab:	88 1e                	mov    BYTE PTR [esi],bl
c000bead:	19 c0                	sbb    eax,eax
c000beaf:	31 d2                	xor    edx,edx
c000beb1:	83 e0 0c             	and    eax,0xc
c000beb4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000beb8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bec0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bec4:	83 f9 01             	cmp    ecx,0x1
c000bec7:	0f 96 c2             	setbe  dl
c000beca:	41                   	inc    ecx
c000becb:	01 d0                	add    eax,edx
c000becd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bed0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bed4:	83 c4 1c             	add    esp,0x1c
c000bed7:	89 f0                	mov    eax,esi
c000bed9:	5b                   	pop    ebx
c000beda:	5e                   	pop    esi
c000bedb:	5f                   	pop    edi
c000bedc:	5d                   	pop    ebp
c000bedd:	c2 04 00             	ret    0x4

c000bee0 <Clock::timeInDatetimeLocal()>:
c000bee0:	53                   	push   ebx
c000bee1:	83 ec 14             	sub    esp,0x14
c000bee4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bee8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000beec:	e8 7d fc ff ff       	call   c000bb6e <Clock::timeInSecondsLocal()>
c000bef1:	83 c4 0c             	add    esp,0xc
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	53                   	push   ebx
c000bef7:	e8 a0 fe ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c000befc:	89 d8                	mov    eax,ebx
c000befe:	83 c4 14             	add    esp,0x14
c000bf01:	5b                   	pop    ebx
c000bf02:	c2 04 00             	ret    0x4
c000bf05:	90                   	nop

c000bf06 <Device::hibernate()>:
c000bf06:	c3                   	ret    
c000bf07:	90                   	nop

c000bf08 <Device::wake()>:
c000bf08:	c3                   	ret    
c000bf09:	90                   	nop

c000bf0a <Device::detect()>:
c000bf0a:	c3                   	ret    
c000bf0b:	90                   	nop

c000bf0c <Device::disableLegacy()>:
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <Device::powerSaving(PowerSavingLevel)>:
c000bf0e:	c3                   	ret    
c000bf0f:	90                   	nop

c000bf10 <DriverlessDevice::close(int, int, void*)>:
c000bf10:	31 c0                	xor    eax,eax
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <DriverlessDevice::detect()>:
c000bf14:	c3                   	ret    
c000bf15:	90                   	nop

c000bf16 <DriverlessDevice::open(int, int, void*)>:
c000bf16:	83 ec 18             	sub    esp,0x18
c000bf19:	68 70 df 01 c0       	push   0xc001df70
c000bf1e:	e8 b0 47 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000bf23:	83 c8 ff             	or     eax,0xffffffff
c000bf26:	83 c4 1c             	add    esp,0x1c
c000bf29:	c3                   	ret    

c000bf2a <Device::~Device()>:
c000bf2a:	ba d0 df 01 c0       	mov    edx,0xc001dfd0
c000bf2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf33:	89 10                	mov    DWORD PTR [eax],edx
c000bf35:	90                   	nop
c000bf36:	c3                   	ret    
c000bf37:	90                   	nop

c000bf38 <Device::~Device()>:
c000bf38:	83 ec 0c             	sub    esp,0xc
c000bf3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf3f:	e8 e6 ff ff ff       	call   c000bf2a <Device::~Device()>
c000bf44:	83 c4 04             	add    esp,0x4
c000bf47:	83 ec 08             	sub    esp,0x8
c000bf4a:	68 58 01 00 00       	push   0x158
c000bf4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf53:	e8 9a eb ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000bf58:	83 c4 10             	add    esp,0x10
c000bf5b:	83 c4 0c             	add    esp,0xc
c000bf5e:	c3                   	ret    
c000bf5f:	90                   	nop

c000bf60 <Device::findAndLoadDriver()>:
c000bf60:	c7 44 24 04 8e df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df8e
c000bf68:	e9 7b ec ff ff       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c000bf6d:	90                   	nop

c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf6e:	57                   	push   edi
c000bf6f:	b9 09 00 00 00       	mov    ecx,0x9
c000bf74:	56                   	push   esi
c000bf75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf79:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf7d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf87:	81 c7 18 01 00 00    	add    edi,0x118
c000bf8d:	fc                   	cld    
c000bf8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf90:	5e                   	pop    esi
c000bf91:	5f                   	pop    edi
c000bf92:	c3                   	ret    
c000bf93:	90                   	nop

c000bf94 <Device::preOpenACPI(void*, char*, char*)>:
c000bf94:	57                   	push   edi
c000bf95:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bf9a:	56                   	push   esi
c000bf9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfa3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfad:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfb3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfb9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfbf:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfc4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfd0:	5e                   	pop    esi
c000bfd1:	5f                   	pop    edi
c000bfd2:	c3                   	ret    
c000bfd3:	90                   	nop

c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfd4:	53                   	push   ebx
c000bfd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfe1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfe5:	0f b6 c0             	movzx  eax,al
c000bfe8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bfec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bff0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bff4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bff8:	5b                   	pop    ebx
c000bff9:	e9 a6 05 00 00       	jmp    c000c5a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bffe <Device::getParent()>:
c000bffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c002:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c008:	c3                   	ret    
c000c009:	90                   	nop

c000c00a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c00a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c00e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c012:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c017:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c01b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c01f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c023:	e9 e8 06 00 00       	jmp    c000c710 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c028 <Device::addChild(Device*)>:
c000c028:	53                   	push   ebx
c000c029:	83 ec 08             	sub    esp,0x8
c000c02c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c030:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c034:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c03a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c040:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c042:	85 d2                	test   edx,edx
c000c044:	74 04                	je     c000c04a <Device::addChild(Device*)+0x22>
c000c046:	89 d3                	mov    ebx,edx
c000c048:	eb f6                	jmp    c000c040 <Device::addChild(Device*)+0x18>
c000c04a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c04d:	83 ec 0c             	sub    esp,0xc
c000c050:	6a 08                	push   0x8
c000c052:	e8 02 be ff ff       	call   c0007e59 <malloc>
c000c057:	89 03                	mov    DWORD PTR [ebx],eax
c000c059:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c05f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c066:	83 c4 18             	add    esp,0x18
c000c069:	5b                   	pop    ebx
c000c06a:	c3                   	ret    
c000c06b:	90                   	nop

c000c06c <Device::removeAllChildren()>:
c000c06c:	56                   	push   esi
c000c06d:	53                   	push   ebx
c000c06e:	52                   	push   edx
c000c06f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c073:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c079:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c07c:	74 17                	je     c000c095 <Device::removeAllChildren()+0x29>
c000c07e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c081:	85 c0                	test   eax,eax
c000c083:	74 0c                	je     c000c091 <Device::removeAllChildren()+0x25>
c000c085:	83 ec 0c             	sub    esp,0xc
c000c088:	8b 10                	mov    edx,DWORD PTR [eax]
c000c08a:	50                   	push   eax
c000c08b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c08e:	83 c4 10             	add    esp,0x10
c000c091:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c093:	eb e4                	jmp    c000c079 <Device::removeAllChildren()+0xd>
c000c095:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c09b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0ae:	58                   	pop    eax
c000c0af:	5b                   	pop    ebx
c000c0b0:	5e                   	pop    esi
c000c0b1:	c3                   	ret    

c000c0b2 <Device::hibernateAll()>:
c000c0b2:	53                   	push   ebx
c000c0b3:	83 ec 14             	sub    esp,0x14
c000c0b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0bc:	53                   	push   ebx
c000c0bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0c6:	83 c4 10             	add    esp,0x10
c000c0c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0cc:	74 0f                	je     c000c0dd <Device::hibernateAll()+0x2b>
c000c0ce:	83 ec 0c             	sub    esp,0xc
c000c0d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0d4:	e8 d9 ff ff ff       	call   c000c0b2 <Device::hibernateAll()>
c000c0d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0db:	eb e9                	jmp    c000c0c6 <Device::hibernateAll()+0x14>
c000c0dd:	83 c4 08             	add    esp,0x8
c000c0e0:	5b                   	pop    ebx
c000c0e1:	c3                   	ret    

c000c0e2 <Device::wakeAll()>:
c000c0e2:	53                   	push   ebx
c000c0e3:	83 ec 14             	sub    esp,0x14
c000c0e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0ec:	53                   	push   ebx
c000c0ed:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0f6:	83 c4 10             	add    esp,0x10
c000c0f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0fc:	74 0f                	je     c000c10d <Device::wakeAll()+0x2b>
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c104:	e8 d9 ff ff ff       	call   c000c0e2 <Device::wakeAll()>
c000c109:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c10b:	eb e9                	jmp    c000c0f6 <Device::wakeAll()+0x14>
c000c10d:	83 c4 08             	add    esp,0x8
c000c110:	5b                   	pop    ebx
c000c111:	c3                   	ret    

c000c112 <Device::detectAll()>:
c000c112:	53                   	push   ebx
c000c113:	83 ec 14             	sub    esp,0x14
c000c116:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c11c:	53                   	push   ebx
c000c11d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c120:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c126:	83 c4 10             	add    esp,0x10
c000c129:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c12c:	74 0f                	je     c000c13d <Device::detectAll()+0x2b>
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c134:	e8 d9 ff ff ff       	call   c000c112 <Device::detectAll()>
c000c139:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c13b:	eb e9                	jmp    c000c126 <Device::detectAll()+0x14>
c000c13d:	83 c4 08             	add    esp,0x8
c000c140:	5b                   	pop    ebx
c000c141:	c3                   	ret    

c000c142 <Device::disableLegacyAll()>:
c000c142:	c3                   	ret    
c000c143:	90                   	nop

c000c144 <Device::loadDriversForAll()>:
c000c144:	c3                   	ret    
c000c145:	90                   	nop

c000c146 <Device::closeAll()>:
c000c146:	53                   	push   ebx
c000c147:	83 ec 08             	sub    esp,0x8
c000c14a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c14e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c150:	6a 00                	push   0x0
c000c152:	6a 00                	push   0x0
c000c154:	6a 00                	push   0x0
c000c156:	53                   	push   ebx
c000c157:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c15a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c166:	74 0f                	je     c000c177 <Device::closeAll()+0x31>
c000c168:	83 ec 0c             	sub    esp,0xc
c000c16b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c16e:	e8 d3 ff ff ff       	call   c000c146 <Device::closeAll()>
c000c173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c175:	eb e9                	jmp    c000c160 <Device::closeAll()+0x1a>
c000c177:	83 c4 08             	add    esp,0x8
c000c17a:	5b                   	pop    ebx
c000c17b:	c3                   	ret    

c000c17c <Device::powerSavingAll(PowerSavingLevel)>:
c000c17c:	56                   	push   esi
c000c17d:	53                   	push   ebx
c000c17e:	83 ec 0c             	sub    esp,0xc
c000c181:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c185:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c189:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c18b:	56                   	push   esi
c000c18c:	53                   	push   ebx
c000c18d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c190:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c196:	83 c4 10             	add    esp,0x10
c000c199:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c19c:	74 0f                	je     c000c1ad <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c19e:	52                   	push   edx
c000c19f:	52                   	push   edx
c000c1a0:	56                   	push   esi
c000c1a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1a4:	e8 d3 ff ff ff       	call   c000c17c <Device::powerSavingAll(PowerSavingLevel)>
c000c1a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1ab:	eb e9                	jmp    c000c196 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1ad:	58                   	pop    eax
c000c1ae:	5b                   	pop    ebx
c000c1af:	5e                   	pop    esi
c000c1b0:	c3                   	ret    
c000c1b1:	90                   	nop

c000c1b2 <Device::setName(char const*)>:
c000c1b2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1ba:	e9 61 44 ff ff       	jmp    c0000620 <strcpy>
c000c1bf:	90                   	nop

c000c1c0 <Device::Device(char const*)>:
c000c1c0:	83 ec 1c             	sub    esp,0x1c
c000c1c3:	ba d0 df 01 c0       	mov    edx,0xc001dfd0
c000c1c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cc:	89 10                	mov    DWORD PTR [eax],edx
c000c1ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c1f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c206:	83 ec 08             	sub    esp,0x8
c000c209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c211:	e8 9c ff ff ff       	call   c000c1b2 <Device::setName(char const*)>
c000c216:	83 c4 10             	add    esp,0x10
c000c219:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c221:	83 ec 0c             	sub    esp,0xc
c000c224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c228:	e8 2c bc ff ff       	call   c0007e59 <malloc>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c236:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c23d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c241:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c24b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c251:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c261:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c277:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c27e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c282:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c290:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c29e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ac:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c2b6:	90                   	nop
c000c2b7:	83 c4 1c             	add    esp,0x1c
c000c2ba:	c3                   	ret    
c000c2bb:	90                   	nop

c000c2bc <Device::getName()>:
c000c2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2c0:	05 d0 00 00 00       	add    eax,0xd0
c000c2c5:	c3                   	ret    

c000c2c6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2c6:	83 ec 0c             	sub    esp,0xc
c000c2c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2cd:	83 ec 08             	sub    esp,0x8
c000c2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2d4:	50                   	push   eax
c000c2d5:	e8 e6 fe ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c2da:	83 c4 10             	add    esp,0x10
c000c2dd:	ba fc df 01 c0       	mov    edx,0xc001dffc
c000c2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e6:	89 10                	mov    DWORD PTR [eax],edx
c000c2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c2f6:	90                   	nop
c000c2f7:	83 c4 0c             	add    esp,0xc
c000c2fa:	c3                   	ret    
c000c2fb:	90                   	nop

c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c2fc:	57                   	push   edi
c000c2fd:	56                   	push   esi
c000c2fe:	53                   	push   ebx
c000c2ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c303:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c307:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c30b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c311:	75 0c                	jne    c000c31f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c313:	52                   	push   edx
c000c314:	52                   	push   edx
c000c315:	53                   	push   ebx
c000c316:	56                   	push   esi
c000c317:	e8 36 03 01 00       	call   c001c652 <LinkedList<Device>::addElement(Device*)>
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c325:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c328:	74 12                	je     c000c33c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c32a:	50                   	push   eax
c000c32b:	57                   	push   edi
c000c32c:	56                   	push   esi
c000c32d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c330:	e8 c7 ff ff ff       	call   c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c335:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c337:	83 c4 10             	add    esp,0x10
c000c33a:	eb e9                	jmp    c000c325 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c33c:	5b                   	pop    ebx
c000c33d:	5e                   	pop    esi
c000c33e:	5f                   	pop    edi
c000c33f:	c3                   	ret    

c000c340 <getDevicesOfType(DeviceType)>:
c000c340:	53                   	push   ebx
c000c341:	83 ec 14             	sub    esp,0x14
c000c344:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c348:	53                   	push   ebx
c000c349:	e8 e0 03 01 00       	call   c001c72e <LinkedList<Device>::LinkedList()>
c000c34e:	83 c4 0c             	add    esp,0xc
c000c351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c355:	53                   	push   ebx
c000c356:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000c35c:	e8 9b ff ff ff       	call   c000c2fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c361:	89 d8                	mov    eax,ebx
c000c363:	83 c4 18             	add    esp,0x18
c000c366:	5b                   	pop    ebx
c000c367:	c2 04 00             	ret    0x4
c000c36a:	66 90                	xchg   ax,ax

c000c36c <HardDiskController::HardDiskController(char const*)>:
c000c36c:	83 ec 0c             	sub    esp,0xc
c000c36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c373:	83 ec 08             	sub    esp,0x8
c000c376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37a:	50                   	push   eax
c000c37b:	e8 40 fe ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c380:	83 c4 10             	add    esp,0x10
c000c383:	ba 28 e0 01 c0       	mov    edx,0xc001e028
c000c388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c38c:	89 10                	mov    DWORD PTR [eax],edx
c000c38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c392:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c39c:	90                   	nop
c000c39d:	83 c4 0c             	add    esp,0xc
c000c3a0:	c3                   	ret    
c000c3a1:	90                   	nop
c000c3a2:	66 90                	xchg   ax,ax

c000c3a4 <HardDiskController::~HardDiskController()>:
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ba 28 e0 01 c0       	mov    edx,0xc001e028
c000c3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b0:	89 10                	mov    DWORD PTR [eax],edx
c000c3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3b6:	83 ec 0c             	sub    esp,0xc
c000c3b9:	50                   	push   eax
c000c3ba:	e8 6b fb ff ff       	call   c000bf2a <Device::~Device()>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	90                   	nop
c000c3c3:	83 c4 0c             	add    esp,0xc
c000c3c6:	c3                   	ret    
c000c3c7:	90                   	nop

c000c3c8 <HardDiskController::~HardDiskController()>:
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	83 ec 0c             	sub    esp,0xc
c000c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d2:	e8 cd ff ff ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	83 ec 08             	sub    esp,0x8
c000c3dd:	68 58 01 00 00       	push   0x158
c000c3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e6:	e8 07 e7 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000c3eb:	83 c4 10             	add    esp,0x10
c000c3ee:	83 c4 0c             	add    esp,0xc
c000c3f1:	c3                   	ret    

c000c3f2 <PhysicalDisk::eject()>:
c000c3f2:	83 c8 ff             	or     eax,0xffffffff
c000c3f5:	c3                   	ret    

c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c3f6:	83 ec 0c             	sub    esp,0xc
c000c3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fd:	83 ec 08             	sub    esp,0x8
c000c400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c404:	50                   	push   eax
c000c405:	e8 b6 fd ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000c40a:	83 c4 10             	add    esp,0x10
c000c40d:	ba 54 e0 01 c0       	mov    edx,0xc001e054
c000c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c416:	89 10                	mov    DWORD PTR [eax],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c427:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c432:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c440:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c444:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c458:	90                   	nop
c000c459:	83 c4 0c             	add    esp,0xc
c000c45c:	c3                   	ret    
c000c45d:	90                   	nop

c000c45e <PhysicalDisk::startCache()>:
c000c45e:	56                   	push   esi
c000c45f:	53                   	push   ebx
c000c460:	83 ec 10             	sub    esp,0x10
c000c463:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c467:	6a 44                	push   0x44
c000c469:	e8 eb b9 ff ff       	call   c0007e59 <malloc>
c000c46e:	89 c6                	mov    esi,eax
c000c470:	58                   	pop    eax
c000c471:	5a                   	pop    edx
c000c472:	53                   	push   ebx
c000c473:	56                   	push   esi
c000c474:	e8 ab 15 00 00       	call   c000da24 <VCache::VCache(PhysicalDisk*)>
c000c479:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c47f:	83 c4 14             	add    esp,0x14
c000c482:	5b                   	pop    ebx
c000c483:	5e                   	pop    esi
c000c484:	c3                   	ret    
c000c485:	90                   	nop

c000c486 <PhysicalDisk::~PhysicalDisk()>:
c000c486:	83 ec 0c             	sub    esp,0xc
c000c489:	ba 54 e0 01 c0       	mov    edx,0xc001e054
c000c48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c492:	89 10                	mov    DWORD PTR [eax],edx
c000c494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c498:	83 ec 0c             	sub    esp,0xc
c000c49b:	50                   	push   eax
c000c49c:	e8 89 fa ff ff       	call   c000bf2a <Device::~Device()>
c000c4a1:	83 c4 10             	add    esp,0x10
c000c4a4:	90                   	nop
c000c4a5:	83 c4 0c             	add    esp,0xc
c000c4a8:	c3                   	ret    
c000c4a9:	90                   	nop

c000c4aa <PhysicalDisk::~PhysicalDisk()>:
c000c4aa:	83 ec 0c             	sub    esp,0xc
c000c4ad:	83 ec 0c             	sub    esp,0xc
c000c4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b4:	e8 cd ff ff ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c000c4b9:	83 c4 10             	add    esp,0x10
c000c4bc:	83 ec 08             	sub    esp,0x8
c000c4bf:	68 6c 01 00 00       	push   0x16c
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	e8 25 e6 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000c4cd:	83 c4 10             	add    esp,0x10
c000c4d0:	83 c4 0c             	add    esp,0xc
c000c4d3:	c3                   	ret    

c000c4d4 <int_handler>:
c000c4d4:	55                   	push   ebp
c000c4d5:	57                   	push   edi
c000c4d6:	56                   	push   esi
c000c4d7:	53                   	push   ebx
c000c4d8:	83 ec 0c             	sub    esp,0xc
c000c4db:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4df:	80 3d c0 33 02 c0 00 	cmp    BYTE PTR ds:0xc00233c0,0x0
c000c4e6:	74 0b                	je     c000c4f3 <int_handler+0x1f>
c000c4e8:	fa                   	cli    
c000c4e9:	f4                   	hlt    
c000c4ea:	80 3d c0 33 02 c0 00 	cmp    BYTE PTR ds:0xc00233c0,0x0
c000c4f1:	75 f5                	jne    c000c4e8 <int_handler+0x14>
c000c4f3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c4f6:	8d 46 e0             	lea    eax,[esi-0x20]
c000c4f9:	83 f8 17             	cmp    eax,0x17
c000c4fc:	76 3e                	jbe    c000c53c <int_handler+0x68>
c000c4fe:	c1 e6 04             	shl    esi,0x4
c000c501:	31 db                	xor    ebx,ebx
c000c503:	8d ae 40 1a 02 c0    	lea    ebp,[esi-0x3ffde5c0]
c000c509:	81 c6 40 0a 02 c0    	add    esi,0xc0020a40
c000c50f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c513:	85 c0                	test   eax,eax
c000c515:	74 13                	je     c000c52a <int_handler+0x56>
c000c517:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c51a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c51e:	74 2a                	je     c000c54a <int_handler+0x76>
c000c520:	83 ec 08             	sub    esp,0x8
c000c523:	52                   	push   edx
c000c524:	57                   	push   edi
c000c525:	ff d0                	call   eax
c000c527:	83 c4 10             	add    esp,0x10
c000c52a:	43                   	inc    ebx
c000c52b:	83 fb 04             	cmp    ebx,0x4
c000c52e:	75 df                	jne    c000c50f <int_handler+0x3b>
c000c530:	83 c4 0c             	add    esp,0xc
c000c533:	31 c0                	xor    eax,eax
c000c535:	5b                   	pop    ebx
c000c536:	31 d2                	xor    edx,edx
c000c538:	5e                   	pop    esi
c000c539:	5f                   	pop    edi
c000c53a:	5d                   	pop    ebp
c000c53b:	c3                   	ret    
c000c53c:	83 ec 0c             	sub    esp,0xc
c000c53f:	50                   	push   eax
c000c540:	e8 68 94 00 00       	call   c00159ad <HalEndOfInterrupt(int)>
c000c545:	83 c4 10             	add    esp,0x10
c000c548:	eb b4                	jmp    c000c4fe <int_handler+0x2a>
c000c54a:	83 ec 08             	sub    esp,0x8
c000c54d:	52                   	push   edx
c000c54e:	57                   	push   edi
c000c54f:	ff d0                	call   eax
c000c551:	83 c4 10             	add    esp,0x10
c000c554:	83 c4 0c             	add    esp,0xc
c000c557:	5b                   	pop    ebx
c000c558:	5e                   	pop    esi
c000c559:	5f                   	pop    edi
c000c55a:	5d                   	pop    ebp
c000c55b:	c3                   	ret    

c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c55c:	56                   	push   esi
c000c55d:	31 c0                	xor    eax,eax
c000c55f:	53                   	push   ebx
c000c560:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c568:	89 ca                	mov    edx,ecx
c000c56a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c56e:	c1 e2 04             	shl    edx,0x4
c000c571:	83 bc 82 40 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde5c0],0x0
c000c579:	74 15                	je     c000c590 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c57b:	40                   	inc    eax
c000c57c:	83 f8 04             	cmp    eax,0x4
c000c57f:	75 f0                	jne    c000c571 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c581:	c7 44 24 0c 84 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e084
c000c589:	5b                   	pop    ebx
c000c58a:	5e                   	pop    esi
c000c58b:	e9 43 41 00 00       	jmp    c00106d3 <Krnl::panic(char const*)>
c000c590:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c593:	89 1c 85 40 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5c0],ebx
c000c59a:	89 34 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],esi
c000c5a1:	5b                   	pop    ebx
c000c5a2:	5e                   	pop    esi
c000c5a3:	c3                   	ret    

c000c5a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5a4:	57                   	push   edi
c000c5a5:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000c5ab:	56                   	push   esi
c000c5ac:	53                   	push   ebx
c000c5ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5b5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5bc:	74 5b                	je     c000c619 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5be:	89 c7                	mov    edi,eax
c000c5c0:	84 c0                	test   al,al
c000c5c2:	74 24                	je     c000c5e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5c4:	83 fe 0f             	cmp    esi,0xf
c000c5c7:	0f 8f d9 00 00 00    	jg     c000c6a6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c5cd:	8a 86 a0 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0760]
c000c5d3:	25 ff 00 00 00       	and    eax,0xff
c000c5d8:	66 8b bc 00 e0 31 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdce20]
c000c5e0:	89 c6                	mov    esi,eax
c000c5e2:	66 d1 ef             	shr    di,1
c000c5e5:	83 e7 01             	and    edi,0x1
c000c5e8:	83 ec 08             	sub    esp,0x8
c000c5eb:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c000c5f0:	31 db                	xor    ebx,ebx
c000c5f2:	50                   	push   eax
c000c5f3:	68 91 e0 01 c0       	push   0xc001e091
c000c5f8:	e8 eb e5 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c000c605:	85 c0                	test   eax,eax
c000c607:	7f 51                	jg     c000c65a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c609:	83 ec 0c             	sub    esp,0xc
c000c60c:	68 a8 e0 01 c0       	push   0xc001e0a8
c000c611:	e8 bd 40 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000c616:	83 c4 10             	add    esp,0x10
c000c619:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c61c:	31 d2                	xor    edx,edx
c000c61e:	89 c8                	mov    eax,ecx
c000c620:	c1 e0 04             	shl    eax,0x4
c000c623:	8b 9c 90 40 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde5c0]
c000c62a:	85 db                	test   ebx,ebx
c000c62c:	0f 84 8b 00 00 00    	je     c000c6bd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c632:	42                   	inc    edx
c000c633:	83 fa 04             	cmp    edx,0x4
c000c636:	75 eb                	jne    c000c623 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c638:	83 ec 0c             	sub    esp,0xc
c000c63b:	68 fc e0 01 c0       	push   0xc001e0fc
c000c640:	e8 8e 40 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000c645:	83 c4 10             	add    esp,0x10
c000c648:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c64d:	5b                   	pop    ebx
c000c64e:	5e                   	pop    esi
c000c64f:	5f                   	pop    edi
c000c650:	c3                   	ret    
c000c651:	43                   	inc    ebx
c000c652:	39 1d 00 48 02 c0    	cmp    DWORD PTR ds:0xc0024800,ebx
c000c658:	7e af                	jle    c000c609 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c65a:	83 ec 08             	sub    esp,0x8
c000c65d:	8b 04 9d 20 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7e0]
c000c664:	56                   	push   esi
c000c665:	50                   	push   eax
c000c666:	e8 13 f0 00 00       	call   c001b67e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c66b:	83 c4 10             	add    esp,0x10
c000c66e:	84 c0                	test   al,al
c000c670:	74 df                	je     c000c651 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c672:	81 e7 ff 00 00 00    	and    edi,0xff
c000c678:	50                   	push   eax
c000c679:	8d 46 20             	lea    eax,[esi+0x20]
c000c67c:	57                   	push   edi
c000c67d:	25 ff 00 00 00       	and    eax,0xff
c000c682:	6a 00                	push   0x0
c000c684:	50                   	push   eax
c000c685:	89 f0                	mov    eax,esi
c000c687:	6a 00                	push   0x0
c000c689:	25 ff 00 00 00       	and    eax,0xff
c000c68e:	6a 00                	push   0x0
c000c690:	50                   	push   eax
c000c691:	8b 04 9d 20 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7e0]
c000c698:	50                   	push   eax
c000c699:	e8 5a f1 00 00       	call   c001b7f8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c69e:	83 c4 20             	add    esp,0x20
c000c6a1:	e9 73 ff ff ff       	jmp    c000c619 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c6a6:	83 ec 0c             	sub    esp,0xc
c000c6a9:	31 ff                	xor    edi,edi
c000c6ab:	68 c4 e0 01 c0       	push   0xc001e0c4
c000c6b0:	e8 1e 40 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	e9 2b ff ff ff       	jmp    c000c5e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6bd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c6c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6c4:	89 14 85 40 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5c0],edx
c000c6cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6cf:	5b                   	pop    ebx
c000c6d0:	89 14 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],edx
c000c6d7:	89 f0                	mov    eax,esi
c000c6d9:	5e                   	pop    esi
c000c6da:	5f                   	pop    edi
c000c6db:	c3                   	ret    

c000c6dc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6e4:	c1 e0 04             	shl    eax,0x4
c000c6e7:	8d 50 10             	lea    edx,[eax+0x10]
c000c6ea:	39 88 40 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde5c0],ecx
c000c6f0:	74 08                	je     c000c6fa <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c6f2:	83 c0 04             	add    eax,0x4
c000c6f5:	39 d0                	cmp    eax,edx
c000c6f7:	75 f1                	jne    c000c6ea <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c6f9:	c3                   	ret    
c000c6fa:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c704:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c70e:	eb e2                	jmp    c000c6f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c710 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c710:	53                   	push   ebx
c000c711:	83 ec 08             	sub    esp,0x8
c000c714:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c718:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c71d:	74 0e                	je     c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c71f:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000c724:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c72b:	75 37                	jne    c000c764 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c731:	83 c0 20             	add    eax,0x20
c000c734:	c1 e0 04             	shl    eax,0x4
c000c737:	8d 50 10             	lea    edx,[eax+0x10]
c000c73a:	39 98 40 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde5c0],ebx
c000c740:	74 0c                	je     c000c74e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c742:	83 c0 04             	add    eax,0x4
c000c745:	39 d0                	cmp    eax,edx
c000c747:	75 f1                	jne    c000c73a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c749:	83 c4 08             	add    esp,0x8
c000c74c:	5b                   	pop    ebx
c000c74d:	c3                   	ret    
c000c74e:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c758:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c762:	eb de                	jmp    c000c742 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c764:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c769:	7f 12                	jg     c000c77d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c76b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c76f:	31 c0                	xor    eax,eax
c000c771:	8a 81 a0 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0760]
c000c777:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c77b:	eb b0                	jmp    c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c77d:	83 ec 0c             	sub    esp,0xc
c000c780:	68 b5 e0 01 c0       	push   0xc001e0b5
c000c785:	e8 49 3f 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	eb 9e                	jmp    c000c72d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c78f <setupINTS()>:
c000c78f:	31 c0                	xor    eax,eax
c000c791:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c79b:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c7a5:	c7 80 44 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5bc],0x0
c000c7af:	c7 80 44 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5bc],0x0
c000c7b9:	c7 80 48 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5b8],0x0
c000c7c3:	c7 80 48 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5b8],0x0
c000c7cd:	c7 80 4c 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5b4],0x0
c000c7d7:	c7 80 4c 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5b4],0x0
c000c7e1:	83 c0 10             	add    eax,0x10
c000c7e4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7e9:	75 a6                	jne    c000c791 <setupINTS()+0x2>
c000c7eb:	c3                   	ret    

c000c7ec <convertLegacyIRQNumber(int)>:
c000c7ec:	83 ec 0c             	sub    esp,0xc
c000c7ef:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000c7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c800:	74 0f                	je     c000c811 <convertLegacyIRQNumber(int)+0x25>
c000c802:	83 f8 0f             	cmp    eax,0xf
c000c805:	7f 0e                	jg     c000c815 <convertLegacyIRQNumber(int)+0x29>
c000c807:	31 c9                	xor    ecx,ecx
c000c809:	8a 88 a0 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0760]
c000c80f:	89 c8                	mov    eax,ecx
c000c811:	83 c4 0c             	add    esp,0xc
c000c814:	c3                   	ret    
c000c815:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c819:	83 ec 0c             	sub    esp,0xc
c000c81c:	68 c4 e0 01 c0       	push   0xc001e0c4
c000c821:	e8 ad 3e 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000c826:	83 c4 10             	add    esp,0x10
c000c829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c82d:	83 c4 0c             	add    esp,0xc
c000c830:	c3                   	ret    
c000c831:	90                   	nop

c000c832 <startGUI(void*)>:
c000c832:	55                   	push   ebp
c000c833:	89 e5                	mov    ebp,esp
c000c835:	53                   	push   ebx
c000c836:	83 ec 04             	sub    esp,0x4
c000c839:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c83e:	48                   	dec    eax
c000c83f:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c844:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c849:	85 c0                	test   eax,eax
c000c84b:	75 01                	jne    c000c84e <startGUI(void*)+0x1c>
c000c84d:	fb                   	sti    
c000c84e:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c854:	83 ec 08             	sub    esp,0x8
c000c857:	6a 01                	push   0x1
c000c859:	68 21 e1 01 c0       	push   0xc001e121
c000c85e:	e8 d3 67 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	83 ec 08             	sub    esp,0x8
c000c869:	53                   	push   ebx
c000c86a:	50                   	push   eax
c000c86b:	e8 f7 69 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c879:	83 ec 08             	sub    esp,0x8
c000c87c:	6a 01                	push   0x1
c000c87e:	68 3b e1 01 c0       	push   0xc001e13b
c000c883:	e8 ae 67 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c000c888:	83 c4 10             	add    esp,0x10
c000c88b:	83 ec 08             	sub    esp,0x8
c000c88e:	53                   	push   ebx
c000c88f:	50                   	push   eax
c000c890:	e8 d2 69 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	90                   	nop
c000c899:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c89c:	c9                   	leave  
c000c89d:	c3                   	ret    

c000c89e <startGUIVESA(void*)>:
c000c89e:	55                   	push   ebp
c000c89f:	89 e5                	mov    ebp,esp
c000c8a1:	53                   	push   ebx
c000c8a2:	83 ec 04             	sub    esp,0x4
c000c8a5:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c8aa:	48                   	dec    eax
c000c8ab:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c8b0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c8b5:	85 c0                	test   eax,eax
c000c8b7:	75 01                	jne    c000c8ba <startGUIVESA(void*)+0x1c>
c000c8b9:	fb                   	sti    
c000c8ba:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c8c0:	83 ec 08             	sub    esp,0x8
c000c8c3:	6a 01                	push   0x1
c000c8c5:	68 59 e1 01 c0       	push   0xc001e159
c000c8ca:	e8 67 67 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c000c8cf:	83 c4 10             	add    esp,0x10
c000c8d2:	83 ec 08             	sub    esp,0x8
c000c8d5:	53                   	push   ebx
c000c8d6:	50                   	push   eax
c000c8d7:	e8 8b 69 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c000c8dc:	83 c4 10             	add    esp,0x10
c000c8df:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c8e5:	83 ec 08             	sub    esp,0x8
c000c8e8:	6a 01                	push   0x1
c000c8ea:	68 3b e1 01 c0       	push   0xc001e13b
c000c8ef:	e8 42 67 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c000c8f4:	83 c4 10             	add    esp,0x10
c000c8f7:	83 ec 08             	sub    esp,0x8
c000c8fa:	53                   	push   ebx
c000c8fb:	50                   	push   eax
c000c8fc:	e8 66 69 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	90                   	nop
c000c905:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c908:	c9                   	leave  
c000c909:	c3                   	ret    

c000c90a <sendKeyToTerminal(unsigned char)>:
c000c90a:	55                   	push   ebp
c000c90b:	89 e5                	mov    ebp,esp
c000c90d:	83 ec 28             	sub    esp,0x28
c000c910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c913:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c916:	8b 15 84 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020984
c000c91c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c91f:	25 ff 00 00 00       	and    eax,0xff
c000c924:	83 ec 08             	sub    esp,0x8
c000c927:	50                   	push   eax
c000c928:	52                   	push   edx
c000c929:	e8 aa c8 ff ff       	call   c00091d8 <VgaText::receiveKey(unsigned char)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c935:	0f 85 8f 00 00 00    	jne    c000c9ca <sendKeyToTerminal(unsigned char)+0xc0>
c000c93b:	fa                   	cli    
c000c93c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c941:	40                   	inc    eax
c000c942:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c947:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c94c:	40                   	inc    eax
c000c94d:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000c952:	a1 40 2a 02 c0       	mov    eax,ds:0xc0022a40
c000c957:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c95a:	c7 05 40 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a40,0x0
c000c964:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c968:	74 1f                	je     c000c989 <sendKeyToTerminal(unsigned char)+0x7f>
c000c96a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c96d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c970:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c973:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c976:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c979:	83 ec 0c             	sub    esp,0xc
c000c97c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c97f:	e8 68 75 00 00       	call   c0013eec <unblockTask(ThreadControlBlock*)>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	eb db                	jmp    c000c964 <sendKeyToTerminal(unsigned char)+0x5a>
c000c989:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c98e:	48                   	dec    eax
c000c98f:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000c994:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c999:	85 c0                	test   eax,eax
c000c99b:	75 18                	jne    c000c9b5 <sendKeyToTerminal(unsigned char)+0xab>
c000c99d:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c000c9a2:	85 c0                	test   eax,eax
c000c9a4:	74 0f                	je     c000c9b5 <sendKeyToTerminal(unsigned char)+0xab>
c000c9a6:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c000c9b0:	e8 73 70 00 00       	call   c0013a28 <schedule()>
c000c9b5:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c9ba:	48                   	dec    eax
c000c9bb:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c9c0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	75 01                	jne    c000c9ca <sendKeyToTerminal(unsigned char)+0xc0>
c000c9c9:	fb                   	sti    
c000c9ca:	90                   	nop
c000c9cb:	c9                   	leave  
c000c9cc:	c3                   	ret    

c000c9cd <sendKeyboardToken(KeyboardToken)>:
c000c9cd:	55                   	push   ebp
c000c9ce:	89 e5                	mov    ebp,esp
c000c9d0:	83 ec 18             	sub    esp,0x18
c000c9d3:	e8 47 3e 00 00       	call   c001081f <Krnl::userIOReceived()>
c000c9d8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c9db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9de:	25 ff ff 00 00       	and    eax,0xffff
c000c9e3:	83 f2 01             	xor    edx,0x1
c000c9e6:	88 90 60 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd5a0],dl
c000c9ec:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c000c9f1:	85 c0                	test   eax,eax
c000c9f3:	74 24                	je     c000ca19 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c9f5:	8b 0d 48 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a48
c000c9fb:	83 ec 04             	sub    esp,0x4
c000c9fe:	68 60 2a 02 c0       	push   0xc0022a60
c000ca03:	83 ec 08             	sub    esp,0x8
c000ca06:	89 e2                	mov    edx,esp
c000ca08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0b:	89 02                	mov    DWORD PTR [edx],eax
c000ca0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca10:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca14:	ff d1                	call   ecx
c000ca16:	83 c4 10             	add    esp,0x10
c000ca19:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca1d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca20:	a0 68 2e 02 c0       	mov    al,ds:0xc0022e68
c000ca25:	38 c2                	cmp    dl,al
c000ca27:	74 1e                	je     c000ca47 <sendKeyboardToken(KeyboardToken)+0x7a>
c000ca29:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca2c:	a2 68 2e 02 c0       	mov    ds:0xc0022e68,al
c000ca31:	a0 68 2e 02 c0       	mov    al,ds:0xc0022e68
c000ca36:	25 ff 00 00 00       	and    eax,0xff
c000ca3b:	83 ec 0c             	sub    esp,0xc
c000ca3e:	50                   	push   eax
c000ca3f:	e8 e6 be ff ff       	call   c000892a <setTerminalScrollLock(bool)>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca4a:	84 c0                	test   al,al
c000ca4c:	0f 84 ae 00 00 00    	je     c000cb00 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca55:	66 3d 10 03          	cmp    ax,0x310
c000ca59:	75 06                	jne    c000ca61 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca5b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca64:	66 3d 11 03          	cmp    ax,0x311
c000ca68:	75 06                	jne    c000ca70 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca6a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca73:	66 3d 12 03          	cmp    ax,0x312
c000ca77:	75 06                	jne    c000ca7f <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca79:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca82:	66 3d 13 03          	cmp    ax,0x313
c000ca86:	75 06                	jne    c000ca8e <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca88:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ca8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca91:	66 3d 14 03          	cmp    ax,0x314
c000ca95:	75 06                	jne    c000ca9d <sendKeyboardToken(KeyboardToken)+0xd0>
c000ca97:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ca9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa0:	66 3d 15 03          	cmp    ax,0x315
c000caa4:	75 06                	jne    c000caac <sendKeyboardToken(KeyboardToken)+0xdf>
c000caa6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000caac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caaf:	66 3d 16 03          	cmp    ax,0x316
c000cab3:	75 06                	jne    c000cabb <sendKeyboardToken(KeyboardToken)+0xee>
c000cab5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cabe:	66 3d 17 03          	cmp    ax,0x317
c000cac2:	75 06                	jne    c000caca <sendKeyboardToken(KeyboardToken)+0xfd>
c000cac4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000caca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cacd:	66 3d 18 03          	cmp    ax,0x318
c000cad1:	75 06                	jne    c000cad9 <sendKeyboardToken(KeyboardToken)+0x10c>
c000cad3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cadc:	66 3d 19 03          	cmp    ax,0x319
c000cae0:	75 06                	jne    c000cae8 <sendKeyboardToken(KeyboardToken)+0x11b>
c000cae2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caeb:	66 3d 1a 03          	cmp    ax,0x31a
c000caef:	0f 85 c9 00 00 00    	jne    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000caf5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cafb:	e9 be 00 00 00       	jmp    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cb00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb03:	66 3d 10 03          	cmp    ax,0x310
c000cb07:	75 0a                	jne    c000cb13 <sendKeyboardToken(KeyboardToken)+0x146>
c000cb09:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb16:	66 3d 11 03          	cmp    ax,0x311
c000cb1a:	75 0a                	jne    c000cb26 <sendKeyboardToken(KeyboardToken)+0x159>
c000cb1c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb29:	66 3d 12 03          	cmp    ax,0x312
c000cb2d:	75 0a                	jne    c000cb39 <sendKeyboardToken(KeyboardToken)+0x16c>
c000cb2f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb35:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb3c:	66 3d 13 03          	cmp    ax,0x313
c000cb40:	75 0a                	jne    c000cb4c <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb42:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb4f:	66 3d 14 03          	cmp    ax,0x314
c000cb53:	75 0a                	jne    c000cb5f <sendKeyboardToken(KeyboardToken)+0x192>
c000cb55:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb5b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb62:	66 3d 15 03          	cmp    ax,0x315
c000cb66:	75 0a                	jne    c000cb72 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb68:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb6e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb75:	66 3d 16 03          	cmp    ax,0x316
c000cb79:	75 0a                	jne    c000cb85 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb7b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb81:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb88:	66 3d 17 03          	cmp    ax,0x317
c000cb8c:	75 0a                	jne    c000cb98 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cb8e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cb94:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9b:	66 3d 18 03          	cmp    ax,0x318
c000cb9f:	75 0a                	jne    c000cbab <sendKeyboardToken(KeyboardToken)+0x1de>
c000cba1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cba7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbae:	66 3d 19 03          	cmp    ax,0x319
c000cbb2:	75 0a                	jne    c000cbbe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cbb4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cbba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc1:	66 3d 00 02          	cmp    ax,0x200
c000cbc5:	75 2c                	jne    c000cbf3 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbc7:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000cbcc:	83 f0 01             	xor    eax,0x1
c000cbcf:	84 c0                	test   al,al
c000cbd1:	74 20                	je     c000cbf3 <sendKeyboardToken(KeyboardToken)+0x226>
c000cbd3:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000cbd8:	6a 01                	push   0x1
c000cbda:	6a 00                	push   0x0
c000cbdc:	68 32 c8 00 c0       	push   0xc000c832
c000cbe1:	50                   	push   eax
c000cbe2:	e8 21 6c 00 00       	call   c0013808 <Process::createThread(void (*)(void*), void*, int)>
c000cbe7:	83 c4 10             	add    esp,0x10
c000cbea:	c6 05 60 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e60,0x1
c000cbf1:	eb 33                	jmp    c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf6:	66 3d 01 02          	cmp    ax,0x201
c000cbfa:	75 2a                	jne    c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cbfc:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000cc01:	83 f0 01             	xor    eax,0x1
c000cc04:	84 c0                	test   al,al
c000cc06:	74 1e                	je     c000cc26 <sendKeyboardToken(KeyboardToken)+0x259>
c000cc08:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000cc0d:	6a 01                	push   0x1
c000cc0f:	6a 00                	push   0x0
c000cc11:	68 9e c8 00 c0       	push   0xc000c89e
c000cc16:	50                   	push   eax
c000cc17:	e8 ec 6b 00 00       	call   c0013808 <Process::createThread(void (*)(void*), void*, int)>
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	c6 05 60 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e60,0x1
c000cc26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc29:	66 3d 1d 03          	cmp    ax,0x31d
c000cc2d:	75 06                	jne    c000cc35 <sendKeyboardToken(KeyboardToken)+0x268>
c000cc2f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cc35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc38:	66 3d 1c 03          	cmp    ax,0x31c
c000cc3c:	75 06                	jne    c000cc44 <sendKeyboardToken(KeyboardToken)+0x277>
c000cc3e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc47:	66 3d 1b 03          	cmp    ax,0x31b
c000cc4b:	75 06                	jne    c000cc53 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc4d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc56:	66 3d 1e 03          	cmp    ax,0x31e
c000cc5a:	75 06                	jne    c000cc62 <sendKeyboardToken(KeyboardToken)+0x295>
c000cc5c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc65:	66 3d 1f 03          	cmp    ax,0x31f
c000cc69:	75 06                	jne    c000cc71 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc6b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc74:	66 3d 1a 03          	cmp    ax,0x31a
c000cc78:	75 06                	jne    c000cc80 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc7a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc80:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc84:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc87:	83 f0 01             	xor    eax,0x1
c000cc8a:	84 c0                	test   al,al
c000cc8c:	74 7b                	je     c000cd09 <sendKeyboardToken(KeyboardToken)+0x33c>
c000cc8e:	a0 61 2b 02 c0       	mov    al,ds:0xc0022b61
c000cc93:	84 c0                	test   al,al
c000cc95:	74 43                	je     c000ccda <sendKeyboardToken(KeyboardToken)+0x30d>
c000cc97:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc9b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cc9f:	74 2d                	je     c000ccce <sendKeyboardToken(KeyboardToken)+0x301>
c000cca1:	8b 15 64 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e64
c000cca7:	89 d0                	mov    eax,edx
c000cca9:	c1 e0 02             	shl    eax,0x2
c000ccac:	01 d0                	add    eax,edx
c000ccae:	01 c0                	add    eax,eax
c000ccb0:	a3 64 2e 02 c0       	mov    ds:0xc0022e64,eax
c000ccb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccb8:	25 ff ff 00 00       	and    eax,0xffff
c000ccbd:	8d 50 d0             	lea    edx,[eax-0x30]
c000ccc0:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000ccc5:	01 d0                	add    eax,edx
c000ccc7:	a3 64 2e 02 c0       	mov    ds:0xc0022e64,eax
c000cccc:	eb 71                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000ccce:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000ccd8:	eb 65                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000ccda:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000ccdf:	85 c0                	test   eax,eax
c000cce1:	74 1a                	je     c000ccfd <sendKeyboardToken(KeyboardToken)+0x330>
c000cce3:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cce8:	25 ff 00 00 00       	and    eax,0xff
c000cced:	83 ec 0c             	sub    esp,0xc
c000ccf0:	50                   	push   eax
c000ccf1:	e8 14 fc ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ccfd:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000cd07:	eb 36                	jmp    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000cd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd0c:	66 3d 01 01          	cmp    ax,0x101
c000cd10:	75 2d                	jne    c000cd3f <sendKeyboardToken(KeyboardToken)+0x372>
c000cd12:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cd17:	85 c0                	test   eax,eax
c000cd19:	74 1a                	je     c000cd35 <sendKeyboardToken(KeyboardToken)+0x368>
c000cd1b:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cd20:	25 ff 00 00 00       	and    eax,0xff
c000cd25:	83 ec 0c             	sub    esp,0xc
c000cd28:	50                   	push   eax
c000cd29:	e8 dc fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cd2e:	83 c4 10             	add    esp,0x10
c000cd31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd35:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000cd3f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd42:	83 f0 01             	xor    eax,0x1
c000cd45:	84 c0                	test   al,al
c000cd47:	74 4e                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd49:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd4c:	83 f0 01             	xor    eax,0x1
c000cd4f:	84 c0                	test   al,al
c000cd51:	74 44                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd53:	a0 60 2b 02 c0       	mov    al,ds:0xc0022b60
c000cd58:	83 f0 01             	xor    eax,0x1
c000cd5b:	84 c0                	test   al,al
c000cd5d:	74 38                	je     c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd62:	66 83 f8 1f          	cmp    ax,0x1f
c000cd66:	76 09                	jbe    c000cd71 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6b:	66 83 f8 7e          	cmp    ax,0x7e
c000cd6f:	76 12                	jbe    c000cd83 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd74:	66 83 f8 0a          	cmp    ax,0xa
c000cd78:	74 09                	je     c000cd83 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd7d:	66 83 f8 08          	cmp    ax,0x8
c000cd81:	75 14                	jne    c000cd97 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd86:	25 ff 00 00 00       	and    eax,0xff
c000cd8b:	83 ec 0c             	sub    esp,0xc
c000cd8e:	50                   	push   eax
c000cd8f:	e8 76 fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd9a:	83 f0 01             	xor    eax,0x1
c000cd9d:	84 c0                	test   al,al
c000cd9f:	74 51                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cda1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cda4:	83 f0 01             	xor    eax,0x1
c000cda7:	84 c0                	test   al,al
c000cda9:	74 47                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdab:	a0 60 2b 02 c0       	mov    al,ds:0xc0022b60
c000cdb0:	84 c0                	test   al,al
c000cdb2:	74 3e                	je     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdb7:	66 83 f8 3f          	cmp    ax,0x3f
c000cdbb:	76 35                	jbe    c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc0:	66 83 f8 7f          	cmp    ax,0x7f
c000cdc4:	77 2c                	ja     c000cdf2 <sendKeyboardToken(KeyboardToken)+0x425>
c000cdc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc9:	88 c2                	mov    dl,al
c000cdcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdce:	66 83 f8 5f          	cmp    ax,0x5f
c000cdd2:	76 04                	jbe    c000cdd8 <sendKeyboardToken(KeyboardToken)+0x40b>
c000cdd4:	b0 20                	mov    al,0x20
c000cdd6:	eb 02                	jmp    c000cdda <sendKeyboardToken(KeyboardToken)+0x40d>
c000cdd8:	b0 00                	mov    al,0x0
c000cdda:	29 c2                	sub    edx,eax
c000cddc:	88 d0                	mov    al,dl
c000cdde:	83 e8 40             	sub    eax,0x40
c000cde1:	25 ff 00 00 00       	and    eax,0xff
c000cde6:	83 ec 0c             	sub    esp,0xc
c000cde9:	50                   	push   eax
c000cdea:	e8 1b fb ff ff       	call   c000c90a <sendKeyToTerminal(unsigned char)>
c000cdef:	83 c4 10             	add    esp,0x10
c000cdf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf5:	66 3d 00 03          	cmp    ax,0x300
c000cdf9:	75 0f                	jne    c000ce0a <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdfb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cdfe:	83 f0 01             	xor    eax,0x1
c000ce01:	84 c0                	test   al,al
c000ce03:	74 05                	je     c000ce0a <sendKeyboardToken(KeyboardToken)+0x43d>
c000ce05:	e8 21 bb ff ff       	call   c000892b <doTerminalCycle()>
c000ce0a:	90                   	nop
c000ce0b:	c9                   	leave  
c000ce0c:	c3                   	ret    

c000ce0d <clearInternalKeybuffer(VgaText*)>:
c000ce0d:	55                   	push   ebp
c000ce0e:	89 e5                	mov    ebp,esp
c000ce10:	83 ec 08             	sub    esp,0x8
c000ce13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce16:	05 b2 00 00 00       	add    eax,0xb2
c000ce1b:	83 ec 0c             	sub    esp,0xc
c000ce1e:	50                   	push   eax
c000ce1f:	e8 3c 37 ff ff       	call   c0000560 <strlen>
c000ce24:	83 c4 10             	add    esp,0x10
c000ce27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce2a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce30:	83 ec 04             	sub    esp,0x4
c000ce33:	50                   	push   eax
c000ce34:	6a 00                	push   0x0
c000ce36:	52                   	push   edx
c000ce37:	e8 b4 36 ff ff       	call   c00004f0 <memset>
c000ce3c:	83 c4 10             	add    esp,0x10
c000ce3f:	90                   	nop
c000ce40:	c9                   	leave  
c000ce41:	c3                   	ret    

c000ce42 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce42:	55                   	push   ebp
c000ce43:	89 e5                	mov    ebp,esp
c000ce45:	83 ec 18             	sub    esp,0x18
c000ce48:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c000ce4d:	85 c0                	test   eax,eax
c000ce4f:	74 2a                	je     c000ce7b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce51:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce57:	8b 0d 48 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a48
c000ce5d:	83 ec 04             	sub    esp,0x4
c000ce60:	68 60 2a 02 c0       	push   0xc0022a60
c000ce65:	83 ec 08             	sub    esp,0x8
c000ce68:	89 e2                	mov    edx,esp
c000ce6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce6d:	89 02                	mov    DWORD PTR [edx],eax
c000ce6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce72:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce76:	ff d1                	call   ecx
c000ce78:	83 c4 10             	add    esp,0x10
c000ce7b:	fb                   	sti    
c000ce7c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce83:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce87:	0f 84 a1 00 00 00    	je     c000cf2e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ce8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce90:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce96:	84 c0                	test   al,al
c000ce98:	75 28                	jne    c000cec2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ce9a:	fa                   	cli    
c000ce9b:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000cea0:	40                   	inc    eax
c000cea1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000cea6:	e8 7d 6b 00 00       	call   c0013a28 <schedule()>
c000ceab:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000ceb0:	48                   	dec    eax
c000ceb1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000ceb6:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000cebb:	85 c0                	test   eax,eax
c000cebd:	75 ce                	jne    c000ce8d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cebf:	fb                   	sti    
c000cec0:	eb cb                	jmp    c000ce8d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cec2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cec5:	8d 50 01             	lea    edx,[eax+0x1]
c000cec8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cecb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cece:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ced4:	88 10                	mov    BYTE PTR [eax],dl
c000ced6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ced9:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cedf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cee5:	05 b2 00 00 00       	add    eax,0xb2
c000ceea:	83 ec 0c             	sub    esp,0xc
c000ceed:	50                   	push   eax
c000ceee:	e8 6d 36 ff ff       	call   c0000560 <strlen>
c000cef3:	83 c4 10             	add    esp,0x10
c000cef6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cef9:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ceff:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cf02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf05:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf0b:	83 ec 04             	sub    esp,0x4
c000cf0e:	50                   	push   eax
c000cf0f:	51                   	push   ecx
c000cf10:	52                   	push   edx
c000cf11:	e8 ea 34 ff ff       	call   c0000400 <memmove>
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cf1c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cf1f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cf23:	0f 85 5a ff ff ff    	jne    c000ce83 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cf29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf2c:	eb 03                	jmp    c000cf31 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cf2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf31:	c9                   	leave  
c000cf32:	c3                   	ret    
c000cf33:	90                   	nop

c000cf34 <Keyboard::Keyboard(char const*)>:
c000cf34:	83 ec 0c             	sub    esp,0xc
c000cf37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3b:	83 ec 08             	sub    esp,0x8
c000cf3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf42:	50                   	push   eax
c000cf43:	e8 78 f2 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000cf48:	83 c4 10             	add    esp,0x10
c000cf4b:	ba 7c e1 01 c0       	mov    edx,0xc001e17c
c000cf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf54:	89 10                	mov    DWORD PTR [eax],edx
c000cf56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf64:	c6 05 44 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a44,0x1
c000cf6b:	90                   	nop
c000cf6c:	83 c4 0c             	add    esp,0xc
c000cf6f:	c3                   	ret    

c000cf70 <Keyboard::~Keyboard()>:
c000cf70:	83 ec 0c             	sub    esp,0xc
c000cf73:	ba 7c e1 01 c0       	mov    edx,0xc001e17c
c000cf78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf7c:	89 10                	mov    DWORD PTR [eax],edx
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	83 ec 0c             	sub    esp,0xc
c000cf85:	50                   	push   eax
c000cf86:	e8 9f ef ff ff       	call   c000bf2a <Device::~Device()>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	90                   	nop
c000cf8f:	83 c4 0c             	add    esp,0xc
c000cf92:	c3                   	ret    
c000cf93:	90                   	nop

c000cf94 <Keyboard::~Keyboard()>:
c000cf94:	83 ec 0c             	sub    esp,0xc
c000cf97:	83 ec 0c             	sub    esp,0xc
c000cf9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf9e:	e8 cd ff ff ff       	call   c000cf70 <Keyboard::~Keyboard()>
c000cfa3:	83 c4 10             	add    esp,0x10
c000cfa6:	83 ec 08             	sub    esp,0x8
c000cfa9:	68 5c 01 00 00       	push   0x15c
c000cfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb2:	e8 3b db ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000cfb7:	83 c4 10             	add    esp,0x10
c000cfba:	83 c4 0c             	add    esp,0xc
c000cfbd:	c3                   	ret    

c000cfbe <LogicalDisk::close(int, int, void*)>:
c000cfbe:	83 c8 ff             	or     eax,0xffffffff
c000cfc1:	c3                   	ret    

c000cfc2 <LogicalDisk::~LogicalDisk()>:
c000cfc2:	83 ec 0c             	sub    esp,0xc
c000cfc5:	ba f4 e1 01 c0       	mov    edx,0xc001e1f4
c000cfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfce:	89 10                	mov    DWORD PTR [eax],edx
c000cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd4:	83 ec 0c             	sub    esp,0xc
c000cfd7:	50                   	push   eax
c000cfd8:	e8 4d ef ff ff       	call   c000bf2a <Device::~Device()>
c000cfdd:	83 c4 10             	add    esp,0x10
c000cfe0:	90                   	nop
c000cfe1:	83 c4 0c             	add    esp,0xc
c000cfe4:	c3                   	ret    
c000cfe5:	90                   	nop

c000cfe6 <LogicalDisk::~LogicalDisk()>:
c000cfe6:	83 ec 0c             	sub    esp,0xc
c000cfe9:	83 ec 0c             	sub    esp,0xc
c000cfec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff0:	e8 cd ff ff ff       	call   c000cfc2 <LogicalDisk::~LogicalDisk()>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	83 ec 08             	sub    esp,0x8
c000cffb:	68 74 01 00 00       	push   0x174
c000d000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d004:	e8 e9 da ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	83 c4 0c             	add    esp,0xc
c000d00f:	c3                   	ret    

c000d010 <LogicalDisk::open(int, int, void*)>:
c000d010:	83 ec 18             	sub    esp,0x18
c000d013:	68 a8 e1 01 c0       	push   0xc001e1a8
c000d018:	e8 b6 36 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000d01d:	83 c8 ff             	or     eax,0xffffffff
c000d020:	83 c4 1c             	add    esp,0x1c
c000d023:	c3                   	ret    

c000d024 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d024:	53                   	push   ebx
c000d025:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d02d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d031:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d037:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d03d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d043:	77 10                	ja     c000d055 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d045:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d04b:	89 d3                	mov    ebx,edx
c000d04d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d053:	72 05                	jb     c000d05a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d055:	83 c8 ff             	or     eax,0xffffffff
c000d058:	89 c2                	mov    edx,eax
c000d05a:	5b                   	pop    ebx
c000d05b:	c3                   	ret    

c000d05c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d05c:	56                   	push   esi
c000d05d:	83 c8 ff             	or     eax,0xffffffff
c000d060:	53                   	push   ebx
c000d061:	89 c2                	mov    edx,eax
c000d063:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d067:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d06b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d06f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d075:	77 27                	ja     c000d09e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d077:	89 d8                	mov    eax,ebx
c000d079:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d07f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d085:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d08a:	89 c2                	mov    edx,eax
c000d08c:	73 10                	jae    c000d09e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d08e:	89 c8                	mov    eax,ecx
c000d090:	89 da                	mov    edx,ebx
c000d092:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d098:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d09e:	5b                   	pop    ebx
c000d09f:	5e                   	pop    esi
c000d0a0:	c3                   	ret    
c000d0a1:	90                   	nop

c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d0a2:	83 ec 1c             	sub    esp,0x1c
c000d0a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0b9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0c8:	83 ec 08             	sub    esp,0x8
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	50                   	push   eax
c000d0d0:	e8 eb f0 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d0d5:	83 c4 10             	add    esp,0x10
c000d0d8:	ba f4 e1 01 c0       	mov    edx,0xc001e1f4
c000d0dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e1:	89 10                	mov    DWORD PTR [eax],edx
c000d0e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0e7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0f2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0fd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d107:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d10b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d10f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d113:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d119:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d11f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d123:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d126:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d12a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d130:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d13a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d13e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d148:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d152:	90                   	nop
c000d153:	83 c4 1c             	add    esp,0x1c
c000d156:	c3                   	ret    
c000d157:	90                   	nop

c000d158 <LogicalDisk::assignDriveLetter()>:
c000d158:	55                   	push   ebp
c000d159:	57                   	push   edi
c000d15a:	56                   	push   esi
c000d15b:	53                   	push   ebx
c000d15c:	83 ec 14             	sub    esp,0x14
c000d15f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d163:	8b 3d 80 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e80
c000d169:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d16f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d173:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d179:	8b 3d 84 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e84
c000d17f:	3c 01                	cmp    al,0x1
c000d181:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d185:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d189:	19 c0                	sbb    eax,eax
c000d18b:	83 e0 02             	and    eax,0x2
c000d18e:	83 c0 41             	add    eax,0x41
c000d191:	0f be e8             	movsx  ebp,al
c000d194:	3c 43                	cmp    al,0x43
c000d196:	75 10                	jne    c000d1a8 <LogicalDisk::assignDriveLetter()+0x50>
c000d198:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d19f:	75 5d                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d1a6:	75 56                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d1ab:	ba 01 00 00 00       	mov    edx,0x1
c000d1b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d1b4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1b8:	d3 e2                	shl    edx,cl
c000d1ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d1be:	89 d7                	mov    edi,edx
c000d1c0:	89 d6                	mov    esi,edx
c000d1c2:	c1 ff 1f             	sar    edi,0x1f
c000d1c5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d1c9:	21 f9                	and    ecx,edi
c000d1cb:	09 d1                	or     ecx,edx
c000d1cd:	75 2f                	jne    c000d1fe <LogicalDisk::assignDriveLetter()+0xa6>
c000d1cf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d1d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1d7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d1dd:	09 f2                	or     edx,esi
c000d1df:	89 15 80 2e 02 c0    	mov    DWORD PTR ds:0xc0022e80,edx
c000d1e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1e9:	09 fa                	or     edx,edi
c000d1eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d1ef:	89 15 84 2e 02 c0    	mov    DWORD PTR ds:0xc0022e84,edx
c000d1f5:	89 1c bd a0 2e 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd160],ebx
c000d1fc:	eb 08                	jmp    c000d206 <LogicalDisk::assignDriveLetter()+0xae>
c000d1fe:	45                   	inc    ebp
c000d1ff:	40                   	inc    eax
c000d200:	3c 5b                	cmp    al,0x5b
c000d202:	75 90                	jne    c000d194 <LogicalDisk::assignDriveLetter()+0x3c>
c000d204:	31 c0                	xor    eax,eax
c000d206:	83 c4 14             	add    esp,0x14
c000d209:	5b                   	pop    ebx
c000d20a:	5e                   	pop    esi
c000d20b:	5f                   	pop    edi
c000d20c:	5d                   	pop    ebp
c000d20d:	c3                   	ret    

c000d20e <LogicalDisk::mount()>:
c000d20e:	56                   	push   esi
c000d20f:	53                   	push   ebx
c000d210:	53                   	push   ebx
c000d211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d215:	8b 1d 34 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a34
c000d21b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d225:	85 db                	test   ebx,ebx
c000d227:	74 27                	je     c000d250 <LogicalDisk::mount()+0x42>
c000d229:	51                   	push   ecx
c000d22a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d231:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d233:	83 e8 41             	sub    eax,0x41
c000d236:	50                   	push   eax
c000d237:	56                   	push   esi
c000d238:	53                   	push   ebx
c000d239:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d23c:	83 c4 10             	add    esp,0x10
c000d23f:	84 c0                	test   al,al
c000d241:	74 08                	je     c000d24b <LogicalDisk::mount()+0x3d>
c000d243:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d249:	eb 07                	jmp    c000d252 <LogicalDisk::mount()+0x44>
c000d24b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d24e:	eb d5                	jmp    c000d225 <LogicalDisk::mount()+0x17>
c000d250:	31 c0                	xor    eax,eax
c000d252:	5a                   	pop    edx
c000d253:	5b                   	pop    ebx
c000d254:	5e                   	pop    esi
c000d255:	c3                   	ret    

c000d256 <LogicalDisk::unmount()>:
c000d256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d25a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d264:	c3                   	ret    
c000d265:	90                   	nop

c000d266 <LogicalDisk::eject()>:
c000d266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d26a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d270:	8b 10                	mov    edx,DWORD PTR [eax]
c000d272:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d276:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d279:	90                   	nop

c000d27a <LogicalDisk::unassignDriveLetter()>:
c000d27a:	57                   	push   edi
c000d27b:	56                   	push   esi
c000d27c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d280:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d287:	84 c9                	test   cl,cl
c000d289:	75 0f                	jne    c000d29a <LogicalDisk::unassignDriveLetter()+0x20>
c000d28b:	c7 44 24 0c cc e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e1cc
c000d293:	5e                   	pop    esi
c000d294:	5f                   	pop    edi
c000d295:	e9 39 34 00 00       	jmp    c00106d3 <Krnl::panic(char const*)>
c000d29a:	83 e9 41             	sub    ecx,0x41
c000d29d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d2a4:	b8 01 00 00 00       	mov    eax,0x1
c000d2a9:	c7 04 8d a0 2e 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd160],0x0
c000d2b4:	d3 e0                	shl    eax,cl
c000d2b6:	89 c7                	mov    edi,eax
c000d2b8:	f7 d0                	not    eax
c000d2ba:	c1 ff 1f             	sar    edi,0x1f
c000d2bd:	21 05 80 2e 02 c0    	and    DWORD PTR ds:0xc0022e80,eax
c000d2c3:	89 fe                	mov    esi,edi
c000d2c5:	f7 d6                	not    esi
c000d2c7:	21 35 84 2e 02 c0    	and    DWORD PTR ds:0xc0022e84,esi
c000d2cd:	5e                   	pop    esi
c000d2ce:	5f                   	pop    edi
c000d2cf:	c3                   	ret    

c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d2d0:	57                   	push   edi
c000d2d1:	56                   	push   esi
c000d2d2:	53                   	push   ebx
c000d2d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2e9:	77 41                	ja     c000d32c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2eb:	99                   	cdq    
c000d2ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2f2:	01 c8                	add    eax,ecx
c000d2f4:	11 da                	adc    edx,ebx
c000d2f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d2fc:	19 d7                	sbb    edi,edx
c000d2fe:	72 33                	jb     c000d333 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d300:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d306:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d30c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d310:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d314:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d31a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d320:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d324:	5b                   	pop    ebx
c000d325:	5e                   	pop    esi
c000d326:	5f                   	pop    edi
c000d327:	e9 4e 0a 00 00       	jmp    c000dd7a <VCache::read(unsigned long long, int, void*)>
c000d32c:	b8 05 00 00 00       	mov    eax,0x5
c000d331:	eb 05                	jmp    c000d338 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d333:	b8 07 00 00 00       	mov    eax,0x7
c000d338:	5b                   	pop    ebx
c000d339:	5e                   	pop    esi
c000d33a:	5f                   	pop    edi
c000d33b:	c3                   	ret    

c000d33c <LogicalDisk::write(unsigned long long, int, void*)>:
c000d33c:	57                   	push   edi
c000d33d:	56                   	push   esi
c000d33e:	53                   	push   ebx
c000d33f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d343:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d347:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d34b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d34f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d355:	77 41                	ja     c000d398 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d357:	99                   	cdq    
c000d358:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d35e:	01 c8                	add    eax,ecx
c000d360:	11 da                	adc    edx,ebx
c000d362:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d368:	19 d7                	sbb    edi,edx
c000d36a:	72 33                	jb     c000d39f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d36c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d372:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d378:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d37c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d380:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d386:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d38c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d390:	5b                   	pop    ebx
c000d391:	5e                   	pop    esi
c000d392:	5f                   	pop    edi
c000d393:	e9 cc 08 00 00       	jmp    c000dc64 <VCache::write(unsigned long long, int, void*)>
c000d398:	b8 05 00 00 00       	mov    eax,0x5
c000d39d:	eb 05                	jmp    c000d3a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d39f:	b8 07 00 00 00       	mov    eax,0x7
c000d3a4:	5b                   	pop    ebx
c000d3a5:	5e                   	pop    esi
c000d3a6:	5f                   	pop    edi
c000d3a7:	c3                   	ret    

c000d3a8 <Mouse::Mouse(char const*)>:
c000d3a8:	83 ec 0c             	sub    esp,0xc
c000d3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3af:	83 ec 08             	sub    esp,0x8
c000d3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b6:	50                   	push   eax
c000d3b7:	e8 04 ee ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d3bc:	83 c4 10             	add    esp,0x10
c000d3bf:	ba 20 e2 01 c0       	mov    edx,0xc001e220
c000d3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c8:	89 10                	mov    DWORD PTR [eax],edx
c000d3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d3d8:	90                   	nop
c000d3d9:	83 c4 0c             	add    esp,0xc
c000d3dc:	c3                   	ret    
c000d3dd:	90                   	nop
c000d3de:	66 90                	xchg   ax,ax

c000d3e0 <Mouse::~Mouse()>:
c000d3e0:	83 ec 0c             	sub    esp,0xc
c000d3e3:	ba 20 e2 01 c0       	mov    edx,0xc001e220
c000d3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ec:	89 10                	mov    DWORD PTR [eax],edx
c000d3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f2:	83 ec 0c             	sub    esp,0xc
c000d3f5:	50                   	push   eax
c000d3f6:	e8 2f eb ff ff       	call   c000bf2a <Device::~Device()>
c000d3fb:	83 c4 10             	add    esp,0x10
c000d3fe:	90                   	nop
c000d3ff:	83 c4 0c             	add    esp,0xc
c000d402:	c3                   	ret    
c000d403:	90                   	nop

c000d404 <Mouse::~Mouse()>:
c000d404:	83 ec 0c             	sub    esp,0xc
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d40e:	e8 cd ff ff ff       	call   c000d3e0 <Mouse::~Mouse()>
c000d413:	83 c4 10             	add    esp,0x10
c000d416:	83 ec 08             	sub    esp,0x8
c000d419:	68 58 01 00 00       	push   0x158
c000d41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d422:	e8 cb d6 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d427:	83 c4 10             	add    esp,0x10
c000d42a:	83 c4 0c             	add    esp,0xc
c000d42d:	c3                   	ret    

c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d42e:	55                   	push   ebp
c000d42f:	57                   	push   edi
c000d430:	56                   	push   esi
c000d431:	53                   	push   ebx
c000d432:	81 ec 28 01 00 00    	sub    esp,0x128
c000d438:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d43f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d446:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d44d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d454:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d458:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d45c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d463:	e8 54 ee ff ff       	call   c000c2bc <Device::getName()>
c000d468:	5a                   	pop    edx
c000d469:	59                   	pop    ecx
c000d46a:	50                   	push   eax
c000d46b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d46f:	55                   	push   ebp
c000d470:	e8 ab 31 ff ff       	call   c0000620 <strcpy>
c000d475:	5b                   	pop    ebx
c000d476:	58                   	pop    eax
c000d477:	68 44 e2 01 c0       	push   0xc001e244
c000d47c:	55                   	push   ebp
c000d47d:	e8 5e 33 ff ff       	call   c00007e0 <strcat>
c000d482:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d489:	e8 cb a9 ff ff       	call   c0007e59 <malloc>
c000d48e:	83 c4 0c             	add    esp,0xc
c000d491:	89 c3                	mov    ebx,eax
c000d493:	57                   	push   edi
c000d494:	56                   	push   esi
c000d495:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d49d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d4a4:	55                   	push   ebp
c000d4a5:	50                   	push   eax
c000d4a6:	e8 f7 fb ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4ab:	83 c4 14             	add    esp,0x14
c000d4ae:	53                   	push   ebx
c000d4af:	e8 a4 fc ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c000d4b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d4b7:	e8 52 fd ff ff       	call   c000d20e <LogicalDisk::mount()>
c000d4bc:	58                   	pop    eax
c000d4bd:	5a                   	pop    edx
c000d4be:	53                   	push   ebx
c000d4bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d4c6:	e8 5d eb ff ff       	call   c000c028 <Device::addChild(Device*)>
c000d4cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4d1:	5b                   	pop    ebx
c000d4d2:	5e                   	pop    esi
c000d4d3:	5f                   	pop    edi
c000d4d4:	5d                   	pop    ebp
c000d4d5:	c3                   	ret    

c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>:
c000d4d6:	55                   	push   ebp
c000d4d7:	57                   	push   edi
c000d4d8:	56                   	push   esi
c000d4d9:	53                   	push   ebx
c000d4da:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4e0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4ed:	3d 00 02 00 00       	cmp    eax,0x200
c000d4f2:	74 27                	je     c000d51b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4f4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4fa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d500:	83 ec 10             	sub    esp,0x10
c000d503:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d507:	99                   	cdq    
c000d508:	c1 e6 0a             	shl    esi,0xa
c000d50b:	52                   	push   edx
c000d50c:	89 fd                	mov    ebp,edi
c000d50e:	50                   	push   eax
c000d50f:	55                   	push   ebp
c000d510:	56                   	push   esi
c000d511:	e8 8a ec 00 00       	call   c001c1a0 <__udivdi3>
c000d516:	e9 b1 00 00 00       	jmp    c000d5cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d51b:	83 ec 0c             	sub    esp,0xc
c000d51e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d520:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d524:	56                   	push   esi
c000d525:	6a 01                	push   0x1
c000d527:	6a 00                	push   0x0
c000d529:	6a 00                	push   0x0
c000d52b:	53                   	push   ebx
c000d52c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d52f:	83 c4 20             	add    esp,0x20
c000d532:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d53a:	75 0a                	jne    c000d546 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d53c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d544:	74 2c                	je     c000d572 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d546:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d54c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d552:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d558:	83 ec 10             	sub    esp,0x10
c000d55b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d55f:	89 f7                	mov    edi,esi
c000d561:	c1 e0 0a             	shl    eax,0xa
c000d564:	c1 ff 1f             	sar    edi,0x1f
c000d567:	57                   	push   edi
c000d568:	56                   	push   esi
c000d569:	52                   	push   edx
c000d56a:	50                   	push   eax
c000d56b:	e8 30 ec 00 00       	call   c001c1a0 <__udivdi3>
c000d570:	eb 5a                	jmp    c000d5cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d572:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d579:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d580:	83 e1 7f             	and    ecx,0x7f
c000d583:	83 e0 7f             	and    eax,0x7f
c000d586:	01 c1                	add    ecx,eax
c000d588:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d58f:	83 e0 7f             	and    eax,0x7f
c000d592:	01 c1                	add    ecx,eax
c000d594:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d59b:	83 e0 7f             	and    eax,0x7f
c000d59e:	00 c1                	add    cl,al
c000d5a0:	74 41                	je     c000d5e3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d5a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5b4:	83 ec 10             	sub    esp,0x10
c000d5b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5bb:	89 f7                	mov    edi,esi
c000d5bd:	c1 e0 0a             	shl    eax,0xa
c000d5c0:	c1 ff 1f             	sar    edi,0x1f
c000d5c3:	57                   	push   edi
c000d5c4:	56                   	push   esi
c000d5c5:	52                   	push   edx
c000d5c6:	50                   	push   eax
c000d5c7:	e8 d4 eb 00 00       	call   c001c1a0 <__udivdi3>
c000d5cc:	83 c4 14             	add    esp,0x14
c000d5cf:	52                   	push   edx
c000d5d0:	50                   	push   eax
c000d5d1:	6a 00                	push   0x0
c000d5d3:	6a 00                	push   0x0
c000d5d5:	53                   	push   ebx
c000d5d6:	e8 53 fe ff ff       	call   c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5db:	83 c4 20             	add    esp,0x20
c000d5de:	e9 79 01 00 00       	jmp    c000d75c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5e3:	89 f0                	mov    eax,esi
c000d5e5:	31 f6                	xor    esi,esi
c000d5e7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5ee:	75 02                	jne    c000d5f2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d5f0:	89 f1                	mov    ecx,esi
c000d5f2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5f9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d600:	c1 e2 08             	shl    edx,0x8
c000d603:	c1 e7 10             	shl    edi,0x10
c000d606:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d60e:	09 fa                	or     edx,edi
c000d610:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d618:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d61f:	83 c0 10             	add    eax,0x10
c000d622:	09 fa                	or     edx,edi
c000d624:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d62b:	c1 e7 18             	shl    edi,0x18
c000d62e:	09 fa                	or     edx,edi
c000d630:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d637:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d63b:	c1 e7 10             	shl    edi,0x10
c000d63e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d645:	c1 e2 08             	shl    edx,0x8
c000d648:	09 fa                	or     edx,edi
c000d64a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d651:	09 fa                	or     edx,edi
c000d653:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d65a:	c1 e7 18             	shl    edi,0x18
c000d65d:	09 fa                	or     edx,edi
c000d65f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d663:	46                   	inc    esi
c000d664:	83 fe 04             	cmp    esi,0x4
c000d667:	0f 85 7a ff ff ff    	jne    c000d5e7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d671:	83 f0 01             	xor    eax,0x1
c000d674:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d678:	75 57                	jne    c000d6d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d67a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d67e:	83 f0 01             	xor    eax,0x1
c000d681:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d685:	75 4a                	jne    c000d6d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d687:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d68b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d693:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d69b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d6a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d6a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d6ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d6b1:	89 f7                	mov    edi,esi
c000d6b3:	c1 e0 0a             	shl    eax,0xa
c000d6b6:	c1 ff 1f             	sar    edi,0x1f
c000d6b9:	57                   	push   edi
c000d6ba:	56                   	push   esi
c000d6bb:	52                   	push   edx
c000d6bc:	50                   	push   eax
c000d6bd:	e8 de ea 00 00       	call   c001c1a0 <__udivdi3>
c000d6c2:	83 c4 10             	add    esp,0x10
c000d6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d6d1:	84 c9                	test   cl,cl
c000d6d3:	74 53                	je     c000d728 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d6d5:	0f b6 c9             	movzx  ecx,cl
c000d6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6e4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d6f4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d6f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d700:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d704:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d708:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d70c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d710:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d714:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d718:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d71c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d720:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d724:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d728:	31 ed                	xor    ebp,ebp
c000d72a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d72e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d732:	89 f8                	mov    eax,edi
c000d734:	09 f0                	or     eax,esi
c000d736:	74 1e                	je     c000d756 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d738:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d73c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d740:	89 d1                	mov    ecx,edx
c000d742:	09 c1                	or     ecx,eax
c000d744:	74 10                	je     c000d756 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d746:	83 ec 0c             	sub    esp,0xc
c000d749:	57                   	push   edi
c000d74a:	56                   	push   esi
c000d74b:	52                   	push   edx
c000d74c:	50                   	push   eax
c000d74d:	53                   	push   ebx
c000d74e:	e8 db fc ff ff       	call   c000d42e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d753:	83 c4 20             	add    esp,0x20
c000d756:	45                   	inc    ebp
c000d757:	83 fd 04             	cmp    ebp,0x4
c000d75a:	75 ce                	jne    c000d72a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d75c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d762:	5b                   	pop    ebx
c000d763:	5e                   	pop    esi
c000d764:	5f                   	pop    edi
c000d765:	5d                   	pop    ebp
c000d766:	c3                   	ret    
c000d767:	90                   	nop

c000d768 <Serial::Serial(char const*)>:
c000d768:	83 ec 0c             	sub    esp,0xc
c000d76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76f:	83 ec 08             	sub    esp,0x8
c000d772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d776:	50                   	push   eax
c000d777:	e8 44 ea ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	ba 58 e2 01 c0       	mov    edx,0xc001e258
c000d784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d788:	89 10                	mov    DWORD PTR [eax],edx
c000d78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d798:	90                   	nop
c000d799:	83 c4 0c             	add    esp,0xc
c000d79c:	c3                   	ret    
c000d79d:	90                   	nop
c000d79e:	66 90                	xchg   ax,ax

c000d7a0 <Serial::~Serial()>:
c000d7a0:	83 ec 0c             	sub    esp,0xc
c000d7a3:	ba 58 e2 01 c0       	mov    edx,0xc001e258
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	83 ec 0c             	sub    esp,0xc
c000d7b5:	50                   	push   eax
c000d7b6:	e8 6f e7 ff ff       	call   c000bf2a <Device::~Device()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	90                   	nop
c000d7bf:	83 c4 0c             	add    esp,0xc
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <Serial::~Serial()>:
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	83 ec 0c             	sub    esp,0xc
c000d7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ce:	e8 cd ff ff ff       	call   c000d7a0 <Serial::~Serial()>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	83 ec 08             	sub    esp,0x8
c000d7d9:	68 58 01 00 00       	push   0x158
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	e8 0b d3 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d7e7:	83 c4 10             	add    esp,0x10
c000d7ea:	83 c4 0c             	add    esp,0xc
c000d7ed:	c3                   	ret    
c000d7ee:	66 90                	xchg   ax,ax

c000d7f0 <Timer::Timer(char const*)>:
c000d7f0:	83 ec 0c             	sub    esp,0xc
c000d7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f7:	83 ec 08             	sub    esp,0x8
c000d7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7fe:	50                   	push   eax
c000d7ff:	e8 bc e9 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000d804:	83 c4 10             	add    esp,0x10
c000d807:	ba 9c e2 01 c0       	mov    edx,0xc001e29c
c000d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d810:	89 10                	mov    DWORD PTR [eax],edx
c000d812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d816:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d820:	90                   	nop
c000d821:	83 c4 0c             	add    esp,0xc
c000d824:	c3                   	ret    
c000d825:	90                   	nop
c000d826:	66 90                	xchg   ax,ax

c000d828 <Timer::~Timer()>:
c000d828:	83 ec 0c             	sub    esp,0xc
c000d82b:	ba 9c e2 01 c0       	mov    edx,0xc001e29c
c000d830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d834:	89 10                	mov    DWORD PTR [eax],edx
c000d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83a:	83 ec 0c             	sub    esp,0xc
c000d83d:	50                   	push   eax
c000d83e:	e8 e7 e6 ff ff       	call   c000bf2a <Device::~Device()>
c000d843:	83 c4 10             	add    esp,0x10
c000d846:	90                   	nop
c000d847:	83 c4 0c             	add    esp,0xc
c000d84a:	c3                   	ret    
c000d84b:	90                   	nop

c000d84c <Timer::~Timer()>:
c000d84c:	83 ec 0c             	sub    esp,0xc
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d856:	e8 cd ff ff ff       	call   c000d828 <Timer::~Timer()>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	83 ec 08             	sub    esp,0x8
c000d861:	68 5c 01 00 00       	push   0x15c
c000d866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86a:	e8 83 d2 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	83 c4 0c             	add    esp,0xc
c000d875:	c3                   	ret    

c000d876 <Timer::read()>:
c000d876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d87a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d880:	c3                   	ret    

c000d881 <setupTimer(int)>:
c000d881:	53                   	push   ebx
c000d882:	83 ec 14             	sub    esp,0x14
c000d885:	68 5c 01 00 00       	push   0x15c
c000d88a:	e8 ca a5 ff ff       	call   c0007e59 <malloc>
c000d88f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d892:	89 c3                	mov    ebx,eax
c000d894:	e8 7f e2 00 00       	call   c001bb18 <PIT::PIT()>
c000d899:	58                   	pop    eax
c000d89a:	5a                   	pop    edx
c000d89b:	53                   	push   ebx
c000d89c:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000d8a2:	e8 81 e7 ff ff       	call   c000c028 <Device::addChild(Device*)>
c000d8a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8a9:	6a 00                	push   0x0
c000d8ab:	6a 00                	push   0x0
c000d8ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8b1:	53                   	push   ebx
c000d8b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d8b5:	89 d8                	mov    eax,ebx
c000d8b7:	83 c4 28             	add    esp,0x28
c000d8ba:	5b                   	pop    ebx
c000d8bb:	c3                   	ret    

c000d8bc <timerHandler(unsigned int)>:
c000d8bc:	56                   	push   esi
c000d8bd:	53                   	push   ebx
c000d8be:	51                   	push   ecx
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	01 05 0c 2f 02 c0    	add    DWORD PTR ds:0xc0022f0c,eax
c000d8c9:	80 3d 3d 09 02 c0 00 	cmp    BYTE PTR ds:0xc002093d,0x0
c000d8d0:	0f 84 4a 01 00 00    	je     c000da20 <timerHandler(unsigned int)+0x164>
c000d8d6:	fa                   	cli    
c000d8d7:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c000d8dd:	83 ec 0c             	sub    esp,0xc
c000d8e0:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c000d8e6:	68 18 3e 02 c0       	push   0xc0023e18
c000d8eb:	e8 80 ee 00 00       	call   c001c770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	84 c0                	test   al,al
c000d8f5:	0f 85 a1 00 00 00    	jne    c000d99c <timerHandler(unsigned int)+0xe0>
c000d8fb:	83 ec 0c             	sub    esp,0xc
c000d8fe:	68 18 3e 02 c0       	push   0xc0023e18
c000d903:	e8 84 ee 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	89 c6                	mov    esi,eax
c000d90d:	8d 76 00             	lea    esi,[esi+0x0]
c000d910:	83 ec 0c             	sub    esp,0xc
c000d913:	68 18 3e 02 c0       	push   0xc0023e18
c000d918:	e8 6f ee 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d91d:	c7 04 24 18 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e18
c000d924:	89 c3                	mov    ebx,eax
c000d926:	e8 69 ee 00 00       	call   c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d92b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c000d937:	77 23                	ja     c000d95c <timerHandler(unsigned int)+0xa0>
c000d939:	83 ec 0c             	sub    esp,0xc
c000d93c:	53                   	push   ebx
c000d93d:	e8 aa 65 00 00       	call   c0013eec <unblockTask(ThreadControlBlock*)>
c000d942:	83 c4 10             	add    esp,0x10
c000d945:	39 de                	cmp    esi,ebx
c000d947:	75 27                	jne    c000d970 <timerHandler(unsigned int)+0xb4>
c000d949:	83 ec 0c             	sub    esp,0xc
c000d94c:	68 18 3e 02 c0       	push   0xc0023e18
c000d951:	e8 36 ee 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d956:	89 c6                	mov    esi,eax
c000d958:	eb 12                	jmp    c000d96c <timerHandler(unsigned int)+0xb0>
c000d95a:	66 90                	xchg   ax,ax
c000d95c:	52                   	push   edx
c000d95d:	52                   	push   edx
c000d95e:	53                   	push   ebx
c000d95f:	68 18 3e 02 c0       	push   0xc0023e18
c000d964:	e8 e3 ee 00 00       	call   c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d969:	8d 76 00             	lea    esi,[esi+0x0]
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	90                   	nop
c000d970:	83 ec 0c             	sub    esp,0xc
c000d973:	68 18 3e 02 c0       	push   0xc0023e18
c000d978:	e8 f3 ed 00 00       	call   c001c770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d97d:	83 c4 10             	add    esp,0x10
c000d980:	84 c0                	test   al,al
c000d982:	75 18                	jne    c000d99c <timerHandler(unsigned int)+0xe0>
c000d984:	83 ec 0c             	sub    esp,0xc
c000d987:	68 18 3e 02 c0       	push   0xc0023e18
c000d98c:	e8 fb ed 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	39 f0                	cmp    eax,esi
c000d996:	0f 85 74 ff ff ff    	jne    c000d910 <timerHandler(unsigned int)+0x54>
c000d99c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d9a1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d9a5:	74 41                	je     c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9a7:	80 3d 3c 09 02 c0 00 	cmp    BYTE PTR ds:0xc002093c,0x0
c000d9ae:	74 38                	je     c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9b0:	fa                   	cli    
c000d9b1:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c000d9b7:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000d9bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9c2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d9c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9cb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9ce:	72 08                	jb     c000d9d8 <timerHandler(unsigned int)+0x11c>
c000d9d0:	e8 53 60 00 00       	call   c0013a28 <schedule()>
c000d9d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d9d8:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000d9dd:	48                   	dec    eax
c000d9de:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000d9e3:	75 03                	jne    c000d9e8 <timerHandler(unsigned int)+0x12c>
c000d9e5:	fb                   	sti    
c000d9e6:	66 90                	xchg   ax,ax
c000d9e8:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000d9ed:	48                   	dec    eax
c000d9ee:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000d9f3:	75 1b                	jne    c000da10 <timerHandler(unsigned int)+0x154>
c000d9f5:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c000d9fc:	74 12                	je     c000da10 <timerHandler(unsigned int)+0x154>
c000d9fe:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c000da08:	e8 1b 60 00 00       	call   c0013a28 <schedule()>
c000da0d:	8d 76 00             	lea    esi,[esi+0x0]
c000da10:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000da15:	48                   	dec    eax
c000da16:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000da1b:	75 03                	jne    c000da20 <timerHandler(unsigned int)+0x164>
c000da1d:	fb                   	sti    
c000da1e:	66 90                	xchg   ax,ax
c000da20:	58                   	pop    eax
c000da21:	5b                   	pop    ebx
c000da22:	5e                   	pop    esi
c000da23:	c3                   	ret    

c000da24 <VCache::VCache(PhysicalDisk*)>:
c000da24:	53                   	push   ebx
c000da25:	83 ec 18             	sub    esp,0x18
c000da28:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	89 10                	mov    DWORD PTR [eax],edx
c000da33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da37:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da42:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da54:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da71:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da84:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da8b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da96:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000daaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daae:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dab5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dabd:	83 ec 0c             	sub    esp,0xc
c000dac0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dac4:	e8 90 a3 ff ff       	call   c0007e59 <malloc>
c000dac9:	83 c4 10             	add    esp,0x10
c000dacc:	89 c3                	mov    ebx,eax
c000dace:	83 ec 0c             	sub    esp,0xc
c000dad1:	53                   	push   ebx
c000dad2:	e8 1d 5d 00 00       	call   c00137f4 <Mutex::Mutex()>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dade:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dae9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000daf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dafb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db05:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db0c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000db12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000db18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db1c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000db1f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000db22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db26:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000db2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db34:	05 00 01 00 00       	add    eax,0x100
c000db39:	c1 e0 04             	shl    eax,0x4
c000db3c:	83 ec 0c             	sub    esp,0xc
c000db3f:	50                   	push   eax
c000db40:	e8 14 a3 ff ff       	call   c0007e59 <malloc>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	89 c2                	mov    edx,eax
c000db4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db55:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db60:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db6e:	c1 e0 06             	shl    eax,0x6
c000db71:	83 ec 0c             	sub    esp,0xc
c000db74:	50                   	push   eax
c000db75:	e8 df a2 ff ff       	call   c0007e59 <malloc>
c000db7a:	83 c4 10             	add    esp,0x10
c000db7d:	89 c2                	mov    edx,eax
c000db7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db83:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db86:	90                   	nop
c000db87:	83 c4 18             	add    esp,0x18
c000db8a:	5b                   	pop    ebx
c000db8b:	c3                   	ret    

c000db8c <VCache::invalidateReadBuffer()>:
c000db8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db90:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db96:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <VCache::writeWriteBuffer()>:
c000db9c:	53                   	push   ebx
c000db9d:	83 ec 08             	sub    esp,0x8
c000dba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dba4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dba8:	74 1e                	je     c000dbc8 <VCache::writeWriteBuffer()+0x2c>
c000dbaa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbad:	83 ec 0c             	sub    esp,0xc
c000dbb0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbb2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dbb5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dbb8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dbbb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dbbe:	50                   	push   eax
c000dbbf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dbc2:	83 c4 20             	add    esp,0x20
c000dbc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbcf:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbd6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbda:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbe1:	83 c4 08             	add    esp,0x8
c000dbe4:	5b                   	pop    ebx
c000dbe5:	c3                   	ret    
c000dbe6:	66 90                	xchg   ax,ax

c000dbe8 <VCache::~VCache()>:
c000dbe8:	83 ec 0c             	sub    esp,0xc
c000dbeb:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf4:	89 10                	mov    DWORD PTR [eax],edx
c000dbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbfa:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbfd:	84 c0                	test   al,al
c000dbff:	74 0f                	je     c000dc10 <VCache::~VCache()+0x28>
c000dc01:	83 ec 0c             	sub    esp,0xc
c000dc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc08:	e8 8f ff ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dc0d:	83 c4 10             	add    esp,0x10
c000dc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc14:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dc17:	83 ec 0c             	sub    esp,0xc
c000dc1a:	50                   	push   eax
c000dc1b:	e8 49 a2 ff ff       	call   c0007e69 <free>
c000dc20:	83 c4 10             	add    esp,0x10
c000dc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc2a:	83 ec 0c             	sub    esp,0xc
c000dc2d:	50                   	push   eax
c000dc2e:	e8 36 a2 ff ff       	call   c0007e69 <free>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	90                   	nop
c000dc37:	83 c4 0c             	add    esp,0xc
c000dc3a:	c3                   	ret    
c000dc3b:	90                   	nop

c000dc3c <VCache::~VCache()>:
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	83 ec 0c             	sub    esp,0xc
c000dc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc46:	e8 9d ff ff ff       	call   c000dbe8 <VCache::~VCache()>
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	83 ec 08             	sub    esp,0x8
c000dc51:	6a 44                	push   0x44
c000dc53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc57:	e8 96 ce ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000dc5c:	83 c4 10             	add    esp,0x10
c000dc5f:	83 c4 0c             	add    esp,0xc
c000dc62:	c3                   	ret    
c000dc63:	90                   	nop

c000dc64 <VCache::write(unsigned long long, int, void*)>:
c000dc64:	55                   	push   ebp
c000dc65:	57                   	push   edi
c000dc66:	56                   	push   esi
c000dc67:	53                   	push   ebx
c000dc68:	83 ec 1c             	sub    esp,0x1c
c000dc6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc77:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dc7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc7f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc87:	31 c0                	xor    eax,eax
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	39 e8                	cmp    eax,ebp
c000dc8e:	7d 18                	jge    c000dca8 <VCache::write(unsigned long long, int, void*)+0x44>
c000dc90:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc93:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc99:	0f af c8             	imul   ecx,eax
c000dc9c:	89 ca                	mov    edx,ecx
c000dc9e:	01 f2                	add    edx,esi
c000dca0:	8b 3a                	mov    edi,DWORD PTR [edx]
c000dca2:	40                   	inc    eax
c000dca3:	eb e7                	jmp    c000dc8c <VCache::write(unsigned long long, int, void*)+0x28>
c000dca5:	8d 76 00             	lea    esi,[esi+0x0]
c000dca8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dcac:	74 0a                	je     c000dcb8 <VCache::write(unsigned long long, int, void*)+0x54>
c000dcae:	53                   	push   ebx
c000dcaf:	e8 d8 fe ff ff       	call   c000db8c <VCache::invalidateReadBuffer()>
c000dcb4:	58                   	pop    eax
c000dcb5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dcbc:	74 5a                	je     c000dd18 <VCache::write(unsigned long long, int, void*)+0xb4>
c000dcbe:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000dcc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc5:	89 f8                	mov    eax,edi
c000dcc7:	99                   	cdq    
c000dcc8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dccb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dcce:	31 c1                	xor    ecx,eax
c000dcd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcd4:	31 d0                	xor    eax,edx
c000dcd6:	09 c1                	or     ecx,eax
c000dcd8:	75 32                	jne    c000dd0c <VCache::write(unsigned long long, int, void*)+0xa8>
c000dcda:	83 fd 01             	cmp    ebp,0x1
c000dcdd:	75 2d                	jne    c000dd0c <VCache::write(unsigned long long, int, void*)+0xa8>
c000dcdf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dce2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dce8:	0f af f9             	imul   edi,ecx
c000dceb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dcee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcf0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dcf3:	40                   	inc    eax
c000dcf4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dcf7:	83 f8 40             	cmp    eax,0x40
c000dcfa:	75 74                	jne    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	53                   	push   ebx
c000dd00:	e8 97 fe ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	eb 66                	jmp    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	83 ec 0c             	sub    esp,0xc
c000dd0f:	53                   	push   ebx
c000dd10:	e8 87 fe ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000dd15:	83 c4 10             	add    esp,0x10
c000dd18:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd1b:	83 fd 3f             	cmp    ebp,0x3f
c000dd1e:	7f 24                	jg     c000dd44 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dd20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd24:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000dd27:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dd2a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dd2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd32:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dd35:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000dd38:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd40:	eb 2e                	jmp    c000dd70 <VCache::write(unsigned long long, int, void*)+0x10c>
c000dd42:	66 90                	xchg   ax,ax
c000dd44:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd46:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dd4a:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dd52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd56:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd5a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd5e:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000dd62:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dd65:	83 c4 1c             	add    esp,0x1c
c000dd68:	5b                   	pop    ebx
c000dd69:	5e                   	pop    esi
c000dd6a:	5f                   	pop    edi
c000dd6b:	5d                   	pop    ebp
c000dd6c:	ff e0                	jmp    eax
c000dd6e:	66 90                	xchg   ax,ax
c000dd70:	83 c4 1c             	add    esp,0x1c
c000dd73:	31 c0                	xor    eax,eax
c000dd75:	5b                   	pop    ebx
c000dd76:	5e                   	pop    esi
c000dd77:	5f                   	pop    edi
c000dd78:	5d                   	pop    ebp
c000dd79:	c3                   	ret    

c000dd7a <VCache::read(unsigned long long, int, void*)>:
c000dd7a:	55                   	push   ebp
c000dd7b:	57                   	push   edi
c000dd7c:	56                   	push   esi
c000dd7d:	53                   	push   ebx
c000dd7e:	83 ec 1c             	sub    esp,0x1c
c000dd81:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd8d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd91:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dd95:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dd99:	31 c0                	xor    eax,eax
c000dd9b:	90                   	nop
c000dd9c:	39 f0                	cmp    eax,esi
c000dd9e:	7d 18                	jge    c000ddb8 <VCache::read(unsigned long long, int, void*)+0x3e>
c000dda0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dda3:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dda9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddad:	0f af c8             	imul   ecx,eax
c000ddb0:	01 ca                	add    edx,ecx
c000ddb2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000ddb4:	40                   	inc    eax
c000ddb5:	eb e5                	jmp    c000dd9c <VCache::read(unsigned long long, int, void*)+0x22>
c000ddb7:	90                   	nop
c000ddb8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ddbc:	74 0e                	je     c000ddcc <VCache::read(unsigned long long, int, void*)+0x52>
c000ddbe:	83 ec 0c             	sub    esp,0xc
c000ddc1:	53                   	push   ebx
c000ddc2:	e8 d5 fd ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c000ddc7:	83 c4 10             	add    esp,0x10
c000ddca:	66 90                	xchg   ax,ax
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	53                   	push   ebx
c000ddd0:	e8 b7 fd ff ff       	call   c000db8c <VCache::invalidateReadBuffer()>
c000ddd5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dddc:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddde:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000dde2:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000dde6:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000ddea:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000ddee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddf2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddf5:	83 c4 2c             	add    esp,0x2c
c000ddf8:	5b                   	pop    ebx
c000ddf9:	5e                   	pop    esi
c000ddfa:	5f                   	pop    edi
c000ddfb:	5d                   	pop    ebp
c000ddfc:	ff e0                	jmp    eax

c000ddfe <Video::putrect(int, int, int, int, unsigned int)>:
c000ddfe:	55                   	push   ebp
c000ddff:	57                   	push   edi
c000de00:	56                   	push   esi
c000de01:	53                   	push   ebx
c000de02:	83 ec 1c             	sub    esp,0x1c
c000de05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de0d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de11:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de1d:	01 df                	add    edi,ebx
c000de1f:	39 fb                	cmp    ebx,edi
c000de21:	7d 1f                	jge    c000de42 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de23:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de27:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de2b:	7d 12                	jge    c000de3f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de2d:	8b 16                	mov    edx,DWORD PTR [esi]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	53                   	push   ebx
c000de34:	55                   	push   ebp
c000de35:	45                   	inc    ebp
c000de36:	56                   	push   esi
c000de37:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de3a:	83 c4 10             	add    esp,0x10
c000de3d:	eb e8                	jmp    c000de27 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de3f:	43                   	inc    ebx
c000de40:	eb dd                	jmp    c000de1f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de42:	83 c4 1c             	add    esp,0x1c
c000de45:	5b                   	pop    ebx
c000de46:	5e                   	pop    esi
c000de47:	5f                   	pop    edi
c000de48:	5d                   	pop    ebp
c000de49:	c3                   	ret    

c000de4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de4a:	55                   	push   ebp
c000de4b:	57                   	push   edi
c000de4c:	31 ff                	xor    edi,edi
c000de4e:	56                   	push   esi
c000de4f:	53                   	push   ebx
c000de50:	83 ec 1c             	sub    esp,0x1c
c000de53:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de5b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de62:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de6b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de73:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de76:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de7a:	01 f9                	add    ecx,edi
c000de7c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de80:	7d 2f                	jge    c000deb1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de82:	31 f6                	xor    esi,esi
c000de84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de88:	01 f2                	add    edx,esi
c000de8a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de8e:	7d 1a                	jge    c000deaa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de90:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de93:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de96:	46                   	inc    esi
c000de97:	51                   	push   ecx
c000de98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de9c:	52                   	push   edx
c000de9d:	55                   	push   ebp
c000de9e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dea1:	83 c4 10             	add    esp,0x10
c000dea4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dea8:	eb da                	jmp    c000de84 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000deaa:	47                   	inc    edi
c000deab:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000deaf:	eb c5                	jmp    c000de76 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000deb1:	83 c4 1c             	add    esp,0x1c
c000deb4:	5b                   	pop    ebx
c000deb5:	5e                   	pop    esi
c000deb6:	5f                   	pop    edi
c000deb7:	5d                   	pop    ebp
c000deb8:	c3                   	ret    
c000deb9:	90                   	nop

c000deba <Video::blit(unsigned int*, int, int, int, int)>:
c000deba:	55                   	push   ebp
c000debb:	57                   	push   edi
c000debc:	56                   	push   esi
c000debd:	53                   	push   ebx
c000debe:	83 ec 1c             	sub    esp,0x1c
c000dec1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dec5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dec9:	85 c0                	test   eax,eax
c000decb:	79 02                	jns    c000decf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000decd:	31 c0                	xor    eax,eax
c000decf:	c1 e0 02             	shl    eax,0x2
c000ded2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ded6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dede:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000dee2:	39 d8                	cmp    eax,ebx
c000dee4:	7e 49                	jle    c000df2f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000dee6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000deec:	7c 41                	jl     c000df2f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000deee:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000def2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000def6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000defa:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000defe:	39 f9                	cmp    ecx,edi
c000df00:	7e 22                	jle    c000df24 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df02:	83 c5 04             	add    ebp,0x4
c000df05:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df0b:	7c 14                	jl     c000df21 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df0d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df0f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df12:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df1a:	56                   	push   esi
c000df1b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df1e:	83 c4 10             	add    esp,0x10
c000df21:	47                   	inc    edi
c000df22:	eb d2                	jmp    c000def6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df28:	43                   	inc    ebx
c000df29:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df2d:	eb ab                	jmp    c000deda <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df2f:	83 c4 1c             	add    esp,0x1c
c000df32:	5b                   	pop    ebx
c000df33:	5e                   	pop    esi
c000df34:	5f                   	pop    edi
c000df35:	5d                   	pop    ebp
c000df36:	c3                   	ret    
c000df37:	90                   	nop

c000df38 <Video::clearScreen(unsigned int)>:
c000df38:	57                   	push   edi
c000df39:	56                   	push   esi
c000df3a:	53                   	push   ebx
c000df3b:	31 db                	xor    ebx,ebx
c000df3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df41:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df47:	7e 1f                	jle    c000df68 <Video::clearScreen(unsigned int)+0x30>
c000df49:	31 ff                	xor    edi,edi
c000df4b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df51:	7e 12                	jle    c000df65 <Video::clearScreen(unsigned int)+0x2d>
c000df53:	8b 06                	mov    eax,DWORD PTR [esi]
c000df55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df59:	53                   	push   ebx
c000df5a:	57                   	push   edi
c000df5b:	47                   	inc    edi
c000df5c:	56                   	push   esi
c000df5d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df60:	83 c4 10             	add    esp,0x10
c000df63:	eb e6                	jmp    c000df4b <Video::clearScreen(unsigned int)+0x13>
c000df65:	43                   	inc    ebx
c000df66:	eb d9                	jmp    c000df41 <Video::clearScreen(unsigned int)+0x9>
c000df68:	5b                   	pop    ebx
c000df69:	5e                   	pop    esi
c000df6a:	5f                   	pop    edi
c000df6b:	c3                   	ret    

c000df6c <Video::putpixel(int, int, unsigned int)>:
c000df6c:	c7 44 24 04 d4 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e2d4
c000df74:	e9 5a 27 00 00       	jmp    c00106d3 <Krnl::panic(char const*)>
c000df79:	90                   	nop

c000df7a <Video::Video(char const*)>:
c000df7a:	83 ec 0c             	sub    esp,0xc
c000df7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df81:	83 ec 08             	sub    esp,0x8
c000df84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df88:	50                   	push   eax
c000df89:	e8 32 e2 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	ba 44 e3 01 c0       	mov    edx,0xc001e344
c000df96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9a:	89 10                	mov    DWORD PTR [eax],edx
c000df9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfaa:	90                   	nop
c000dfab:	83 c4 0c             	add    esp,0xc
c000dfae:	c3                   	ret    
c000dfaf:	90                   	nop

c000dfb0 <Video::~Video()>:
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	ba 44 e3 01 c0       	mov    edx,0xc001e344
c000dfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbc:	89 10                	mov    DWORD PTR [eax],edx
c000dfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	50                   	push   eax
c000dfc6:	e8 5f df ff ff       	call   c000bf2a <Device::~Device()>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	90                   	nop
c000dfcf:	83 c4 0c             	add    esp,0xc
c000dfd2:	c3                   	ret    
c000dfd3:	90                   	nop

c000dfd4 <Video::~Video()>:
c000dfd4:	83 ec 0c             	sub    esp,0xc
c000dfd7:	83 ec 0c             	sub    esp,0xc
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	e8 cd ff ff ff       	call   c000dfb0 <Video::~Video()>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	83 ec 08             	sub    esp,0x8
c000dfe9:	68 64 01 00 00       	push   0x164
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 fb ca ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	83 c4 0c             	add    esp,0xc
c000dffd:	c3                   	ret    

c000dffe <Video::isMonochrome()>:
c000dffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e002:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e008:	c3                   	ret    
c000e009:	90                   	nop

c000e00a <Video::getWidth()>:
c000e00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e00e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e014:	c3                   	ret    
c000e015:	90                   	nop

c000e016 <Video::getHeight()>:
c000e016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e01a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <Video::drawCursor(int, int, unsigned char*, int)>:
c000e022:	55                   	push   ebp
c000e023:	57                   	push   edi
c000e024:	56                   	push   esi
c000e025:	53                   	push   ebx
c000e026:	83 ec 2c             	sub    esp,0x2c
c000e029:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e02d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e031:	83 f8 01             	cmp    eax,0x1
c000e034:	19 c9                	sbb    ecx,ecx
c000e036:	31 db                	xor    ebx,ebx
c000e038:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e03c:	89 cd                	mov    ebp,ecx
c000e03e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e046:	f7 d5                	not    ebp
c000e048:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e04e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e052:	01 d8                	add    eax,ebx
c000e054:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e058:	56                   	push   esi
c000e059:	e8 b8 ff ff ff       	call   c000e016 <Video::getHeight()>
c000e05e:	59                   	pop    ecx
c000e05f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e063:	7e 70                	jle    c000e0d5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e065:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e069:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e06d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e070:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e074:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e078:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e07f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e083:	89 f8                	mov    eax,edi
c000e085:	83 c0 20             	add    eax,0x20
c000e088:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e08c:	56                   	push   esi
c000e08d:	e8 78 ff ff ff       	call   c000e00a <Video::getWidth()>
c000e092:	5a                   	pop    edx
c000e093:	39 c7                	cmp    edi,eax
c000e095:	7d 34                	jge    c000e0cb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e097:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e09c:	74 05                	je     c000e0a3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e09e:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0a0:	55                   	push   ebp
c000e0a1:	eb 0d                	jmp    c000e0b0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e0a3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0a8:	74 12                	je     c000e0bc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e0aa:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0b4:	57                   	push   edi
c000e0b5:	56                   	push   esi
c000e0b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0b9:	83 c4 10             	add    esp,0x10
c000e0bc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0c0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0c4:	47                   	inc    edi
c000e0c5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e0c9:	75 c1                	jne    c000e08c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e0cb:	43                   	inc    ebx
c000e0cc:	83 fb 20             	cmp    ebx,0x20
c000e0cf:	0f 85 79 ff ff ff    	jne    c000e04e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e0d5:	83 c4 2c             	add    esp,0x2c
c000e0d8:	5b                   	pop    ebx
c000e0d9:	5e                   	pop    esi
c000e0da:	5f                   	pop    edi
c000e0db:	5d                   	pop    ebp
c000e0dc:	c3                   	ret    
c000e0dd:	90                   	nop

c000e0de <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0de:	55                   	push   ebp
c000e0df:	57                   	push   edi
c000e0e0:	56                   	push   esi
c000e0e1:	53                   	push   ebx
c000e0e2:	83 ec 28             	sub    esp,0x28
c000e0e5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0e9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0ed:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e0f1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e0f5:	c1 e6 08             	shl    esi,0x8
c000e0f8:	01 c6                	add    esi,eax
c000e0fa:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e0fe:	c1 e0 08             	shl    eax,0x8
c000e101:	01 d0                	add    eax,edx
c000e103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e10b:	0f af c6             	imul   eax,esi
c000e10e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e115:	50                   	push   eax
c000e116:	e8 3e 9d ff ff       	call   c0007e59 <malloc>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	89 c7                	mov    edi,eax
c000e120:	85 c0                	test   eax,eax
c000e122:	75 10                	jne    c000e134 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e124:	83 ec 0c             	sub    esp,0xc
c000e127:	68 f5 e2 01 c0       	push   0xc001e2f5
c000e12c:	e8 a2 25 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000e131:	83 c4 10             	add    esp,0x10
c000e134:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e137:	ba 12 00 00 00       	mov    edx,0x12
c000e13c:	84 c0                	test   al,al
c000e13e:	74 11                	je     c000e151 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e140:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e144:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e148:	c1 fa 03             	sar    edx,0x3
c000e14b:	0f af d1             	imul   edx,ecx
c000e14e:	83 c2 12             	add    edx,0x12
c000e151:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e155:	74 04                	je     c000e15b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e157:	85 f6                	test   esi,esi
c000e159:	75 12                	jne    c000e16d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e15b:	83 ec 0c             	sub    esp,0xc
c000e15e:	68 05 e3 01 c0       	push   0xc001e305
c000e163:	e8 80 ca ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000e168:	e9 b8 00 00 00       	jmp    c000e225 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e16d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e171:	80 f9 02             	cmp    cl,0x2
c000e174:	0f 85 96 00 00 00    	jne    c000e210 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e17a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e17f:	75 0e                	jne    c000e18f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e181:	84 c0                	test   al,al
c000e183:	75 0a                	jne    c000e18f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e185:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e188:	83 e8 18             	sub    eax,0x18
c000e18b:	a8 f7                	test   al,0xf7
c000e18d:	74 0a                	je     c000e199 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e18f:	83 ec 0c             	sub    esp,0xc
c000e192:	68 1a e3 01 c0       	push   0xc001e31a
c000e197:	eb 7f                	jmp    c000e218 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e199:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1a1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1a9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e1ad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1b5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1b9:	75 0c                	jne    c000e1c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e1bb:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e1c0:	c1 e0 18             	shl    eax,0x18
c000e1c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c7:	45                   	inc    ebp
c000e1c8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1cd:	c1 e1 10             	shl    ecx,0x10
c000e1d0:	89 c8                	mov    eax,ecx
c000e1d2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1d7:	c1 e1 08             	shl    ecx,0x8
c000e1da:	09 c1                	or     ecx,eax
c000e1dc:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1e0:	09 c1                	or     ecx,eax
c000e1e2:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1e6:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e1ea:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1ee:	c1 f8 03             	sar    eax,0x3
c000e1f1:	01 c2                	add    edx,eax
c000e1f3:	89 e8                	mov    eax,ebp
c000e1f5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1f9:	39 c6                	cmp    esi,eax
c000e1fb:	7f b0                	jg     c000e1ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e1fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e201:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e205:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e208:	7e 22                	jle    c000e22c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e20a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e20e:	eb 99                	jmp    c000e1a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e210:	50                   	push   eax
c000e211:	50                   	push   eax
c000e212:	51                   	push   ecx
c000e213:	68 28 e3 01 c0       	push   0xc001e328
c000e218:	e8 cb c9 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000e21d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e220:	e8 44 9c ff ff       	call   c0007e69 <free>
c000e225:	83 c4 10             	add    esp,0x10
c000e228:	31 ff                	xor    edi,edi
c000e22a:	eb 0f                	jmp    c000e23b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e22c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e230:	89 30                	mov    DWORD PTR [eax],esi
c000e232:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e236:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e239:	89 30                	mov    DWORD PTR [eax],esi
c000e23b:	83 c4 1c             	add    esp,0x1c
c000e23e:	89 f8                	mov    eax,edi
c000e240:	5b                   	pop    ebx
c000e241:	5e                   	pop    esi
c000e242:	5f                   	pop    edi
c000e243:	5d                   	pop    ebp
c000e244:	c3                   	ret    
c000e245:	90                   	nop

c000e246 <Video::putTGA(int, int, unsigned char*, int)>:
c000e246:	55                   	push   ebp
c000e247:	57                   	push   edi
c000e248:	56                   	push   esi
c000e249:	53                   	push   ebx
c000e24a:	83 ec 28             	sub    esp,0x28
c000e24d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e251:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e255:	50                   	push   eax
c000e256:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e25a:	50                   	push   eax
c000e25b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e25f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e263:	56                   	push   esi
c000e264:	e8 75 fe ff ff       	call   c000e0de <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e269:	83 c4 20             	add    esp,0x20
c000e26c:	85 c0                	test   eax,eax
c000e26e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e272:	74 35                	je     c000e2a9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e274:	89 c7                	mov    edi,eax
c000e276:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e27a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e27e:	39 d8                	cmp    eax,ebx
c000e280:	7e 27                	jle    c000e2a9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e282:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e286:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e28a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e28e:	39 e8                	cmp    eax,ebp
c000e290:	7e 14                	jle    c000e2a6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e292:	8b 06                	mov    eax,DWORD PTR [esi]
c000e294:	83 c7 04             	add    edi,0x4
c000e297:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e29a:	53                   	push   ebx
c000e29b:	55                   	push   ebp
c000e29c:	45                   	inc    ebp
c000e29d:	56                   	push   esi
c000e29e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2a1:	83 c4 10             	add    esp,0x10
c000e2a4:	eb e0                	jmp    c000e286 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2a6:	43                   	inc    ebx
c000e2a7:	eb cd                	jmp    c000e276 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2a9:	83 c4 1c             	add    esp,0x1c
c000e2ac:	5b                   	pop    ebx
c000e2ad:	5e                   	pop    esi
c000e2ae:	5f                   	pop    edi
c000e2af:	5d                   	pop    ebp
c000e2b0:	c3                   	ret    
c000e2b1:	66 90                	xchg   ax,ax
c000e2b3:	90                   	nop

c000e2b4 <ACPI::close(int, int, void*)>:
c000e2b4:	83 ec 1c             	sub    esp,0x1c
c000e2b7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2bf:	74 0b                	je     c000e2cc <ACPI::close(int, int, void*)+0x18>
c000e2c1:	b8 00 00 00 00       	mov    eax,0x0
c000e2c6:	e9 9d 00 00 00       	jmp    c000e368 <ACPI::close(int, int, void*)+0xb4>
c000e2cb:	90                   	nop
c000e2cc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2d1:	75 29                	jne    c000e2fc <ACPI::close(int, int, void*)+0x48>
c000e2d3:	a1 28 2f 02 c0       	mov    eax,ds:0xc0022f28
c000e2d8:	85 c0                	test   eax,eax
c000e2da:	74 08                	je     c000e2e4 <ACPI::close(int, int, void*)+0x30>
c000e2dc:	a1 28 2f 02 c0       	mov    eax,ds:0xc0022f28
c000e2e1:	ff d0                	call   eax
c000e2e3:	90                   	nop
c000e2e4:	83 ec 0c             	sub    esp,0xc
c000e2e7:	68 84 e3 01 c0       	push   0xc001e384
c000e2ec:	e8 e2 23 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000e2f1:	83 c4 10             	add    esp,0x10
c000e2f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2f9:	eb 6d                	jmp    c000e368 <ACPI::close(int, int, void*)+0xb4>
c000e2fb:	90                   	nop
c000e2fc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e301:	75 5d                	jne    c000e360 <ACPI::close(int, int, void*)+0xac>
c000e303:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c000e308:	85 c0                	test   eax,eax
c000e30a:	74 08                	je     c000e314 <ACPI::close(int, int, void*)+0x60>
c000e30c:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c000e311:	ff d0                	call   eax
c000e313:	90                   	nop
c000e314:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e319:	8d 76 00             	lea    esi,[esi+0x0]
c000e31c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e320:	25 ff 00 00 00       	and    eax,0xff
c000e325:	83 e0 02             	and    eax,0x2
c000e328:	74 1e                	je     c000e348 <ACPI::close(int, int, void*)+0x94>
c000e32a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e331:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e335:	89 c2                	mov    edx,eax
c000e337:	ec                   	in     al,dx
c000e338:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e33c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e340:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e344:	eb d6                	jmp    c000e31c <ACPI::close(int, int, void*)+0x68>
c000e346:	66 90                	xchg   ax,ax
c000e348:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e34f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e354:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e358:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e35c:	ee                   	out    dx,al
c000e35d:	8d 76 00             	lea    esi,[esi+0x0]
c000e360:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e365:	8d 76 00             	lea    esi,[esi+0x0]
c000e368:	83 c4 1c             	add    esp,0x1c
c000e36b:	c3                   	ret    

c000e36c <findRSDP()>:
c000e36c:	83 ec 1c             	sub    esp,0x1c
c000e36f:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e374:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e37a:	83 e0 04             	and    eax,0x4
c000e37d:	84 c0                	test   al,al
c000e37f:	75 07                	jne    c000e388 <findRSDP()+0x1c>
c000e381:	b8 00 00 00 00       	mov    eax,0x0
c000e386:	eb 70                	jmp    c000e3f8 <findRSDP()+0x8c>
c000e388:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c000e38d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e392:	7f 1c                	jg     c000e3b0 <findRSDP()+0x44>
c000e394:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e399:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e39f:	83 e2 fb             	and    edx,0xfffffffb
c000e3a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3a8:	b8 00 00 00 00       	mov    eax,0x0
c000e3ad:	eb 49                	jmp    c000e3f8 <findRSDP()+0x8c>
c000e3af:	90                   	nop
c000e3b0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3b8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3c0:	77 2e                	ja     c000e3f0 <findRSDP()+0x84>
c000e3c2:	83 ec 04             	sub    esp,0x4
c000e3c5:	6a 08                	push   0x8
c000e3c7:	68 1f e4 01 c0       	push   0xc001e41f
c000e3cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3d0:	e8 db 1f ff ff       	call   c00003b0 <memcmp>
c000e3d5:	83 c4 10             	add    esp,0x10
c000e3d8:	85 c0                	test   eax,eax
c000e3da:	0f 94 c0             	sete   al
c000e3dd:	84 c0                	test   al,al
c000e3df:	74 07                	je     c000e3e8 <findRSDP()+0x7c>
c000e3e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e5:	eb 11                	jmp    c000e3f8 <findRSDP()+0x8c>
c000e3e7:	90                   	nop
c000e3e8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e3ed:	eb c9                	jmp    c000e3b8 <findRSDP()+0x4c>
c000e3ef:	90                   	nop
c000e3f0:	b8 00 00 00 00       	mov    eax,0x0
c000e3f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3f8:	83 c4 1c             	add    esp,0x1c
c000e3fb:	c3                   	ret    

c000e3fc <loadACPITables(unsigned char*)>:
c000e3fc:	57                   	push   edi
c000e3fd:	56                   	push   esi
c000e3fe:	53                   	push   ebx
c000e3ff:	83 ec 60             	sub    esp,0x60
c000e402:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e407:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e40d:	83 e0 04             	and    eax,0x4
c000e410:	84 c0                	test   al,al
c000e412:	0f 84 3c 02 00 00    	je     c000e654 <loadACPITables(unsigned char*)+0x258>
c000e418:	a0 40 31 02 c0       	mov    al,ds:0xc0023140
c000e41d:	84 c0                	test   al,al
c000e41f:	74 77                	je     c000e498 <loadACPITables(unsigned char*)+0x9c>
c000e421:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e425:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e429:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e42d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e430:	83 e8 24             	sub    eax,0x24
c000e433:	c1 e8 03             	shr    eax,0x3
c000e436:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e43a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e442:	66 90                	xchg   ax,ax
c000e444:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e448:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e44c:	0f 8d b6 00 00 00    	jge    c000e508 <loadACPITables(unsigned char*)+0x10c>
c000e452:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e456:	83 c0 24             	add    eax,0x24
c000e459:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e45d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e461:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e465:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e469:	c1 e0 03             	shl    eax,0x3
c000e46c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e470:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e474:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e477:	8b 00                	mov    eax,DWORD PTR [eax]
c000e479:	89 c1                	mov    ecx,eax
c000e47b:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e480:	8d 50 01             	lea    edx,[eax+0x1]
c000e483:	89 15 2c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f2c,edx
c000e489:	89 ca                	mov    edx,ecx
c000e48b:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e492:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e496:	eb ac                	jmp    c000e444 <loadACPITables(unsigned char*)+0x48>
c000e498:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e49c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4a7:	83 e8 24             	sub    eax,0x24
c000e4aa:	c1 e8 02             	shr    eax,0x2
c000e4ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4b1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4bc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4c0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4c4:	7d 42                	jge    c000e508 <loadACPITables(unsigned char*)+0x10c>
c000e4c6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4ca:	83 c0 24             	add    eax,0x24
c000e4cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4d9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4dd:	c1 e0 02             	shl    eax,0x2
c000e4e0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4ea:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e4ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e4f2:	89 15 2c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f2c,edx
c000e4f8:	89 ca                	mov    edx,ecx
c000e4fa:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e501:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e505:	eb b5                	jmp    c000e4bc <loadACPITables(unsigned char*)+0xc0>
c000e507:	90                   	nop
c000e508:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e510:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e515:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e519:	0f 8d 39 01 00 00    	jge    c000e658 <loadACPITables(unsigned char*)+0x25c>
c000e51f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e523:	8b 04 c5 44 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0bc]
c000e52a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e52e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e532:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e53a:	25 ff 0f 00 00       	and    eax,0xfff
c000e53f:	89 c6                	mov    esi,eax
c000e541:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e547:	83 ec 0c             	sub    esp,0xc
c000e54a:	6a 01                	push   0x1
c000e54c:	e8 44 b4 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e551:	83 c4 10             	add    esp,0x10
c000e554:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e558:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e55e:	83 ec 0c             	sub    esp,0xc
c000e561:	6a 01                	push   0x1
c000e563:	6a 01                	push   0x1
c000e565:	50                   	push   eax
c000e566:	52                   	push   edx
c000e567:	53                   	push   ebx
c000e568:	e8 b7 bd ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e56d:	83 c4 20             	add    esp,0x20
c000e570:	09 f0                	or     eax,esi
c000e572:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e576:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e57a:	c1 e0 03             	shl    eax,0x3
c000e57d:	05 40 2f 02 c0       	add    eax,0xc0022f40
c000e582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e58a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e58e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e59a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e59e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5aa:	89 c6                	mov    esi,eax
c000e5ac:	89 d7                	mov    edi,edx
c000e5ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5b0:	89 c8                	mov    eax,ecx
c000e5b2:	89 fa                	mov    edx,edi
c000e5b4:	89 f3                	mov    ebx,esi
c000e5b6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5d1:	05 00 10 00 00       	add    eax,0x1000
c000e5d6:	c1 e8 0c             	shr    eax,0xc
c000e5d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5e9:	25 ff 0f 00 00       	and    eax,0xfff
c000e5ee:	89 c6                	mov    esi,eax
c000e5f0:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e5f6:	83 ec 0c             	sub    esp,0xc
c000e5f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e5fd:	e8 93 b3 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e602:	83 c4 10             	add    esp,0x10
c000e605:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e609:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e60f:	83 ec 0c             	sub    esp,0xc
c000e612:	6a 01                	push   0x1
c000e614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e618:	50                   	push   eax
c000e619:	52                   	push   edx
c000e61a:	53                   	push   ebx
c000e61b:	e8 04 bd ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e620:	83 c4 20             	add    esp,0x20
c000e623:	09 f0                	or     eax,esi
c000e625:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62d:	83 ec 0c             	sub    esp,0xc
c000e630:	50                   	push   eax
c000e631:	e8 8f b6 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c000e636:	83 c4 10             	add    esp,0x10
c000e639:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e63d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e641:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e648:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e64c:	e9 bf fe ff ff       	jmp    c000e510 <loadACPITables(unsigned char*)+0x114>
c000e651:	8d 76 00             	lea    esi,[esi+0x0]
c000e654:	90                   	nop
c000e655:	8d 76 00             	lea    esi,[esi+0x0]
c000e658:	83 c4 60             	add    esp,0x60
c000e65b:	5b                   	pop    ebx
c000e65c:	5e                   	pop    esi
c000e65d:	5f                   	pop    edi
c000e65e:	c3                   	ret    
c000e65f:	90                   	nop

c000e660 <findRSDT(unsigned char*)>:
c000e660:	57                   	push   edi
c000e661:	56                   	push   esi
c000e662:	53                   	push   ebx
c000e663:	83 ec 50             	sub    esp,0x50
c000e666:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e66b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e671:	83 e0 04             	and    eax,0x4
c000e674:	84 c0                	test   al,al
c000e676:	75 0c                	jne    c000e684 <findRSDT(unsigned char*)+0x24>
c000e678:	b8 00 00 00 00       	mov    eax,0x0
c000e67d:	e9 26 01 00 00       	jmp    c000e7a8 <findRSDT(unsigned char*)+0x148>
c000e682:	66 90                	xchg   ax,ax
c000e684:	89 e0                	mov    eax,esp
c000e686:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e68a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e68e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e692:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e69a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e69e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6a6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6aa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6ae:	89 c6                	mov    esi,eax
c000e6b0:	89 d7                	mov    edi,edx
c000e6b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6b4:	89 c8                	mov    eax,ecx
c000e6b6:	89 fa                	mov    edx,edi
c000e6b8:	89 f3                	mov    ebx,esi
c000e6ba:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6be:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6c6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6ca:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6ce:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6ee:	25 ff 0f 00 00       	and    eax,0xfff
c000e6f3:	89 c6                	mov    esi,eax
c000e6f5:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e6fb:	83 ec 0c             	sub    esp,0xc
c000e6fe:	6a 02                	push   0x2
c000e700:	e8 90 b2 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e705:	83 c4 10             	add    esp,0x10
c000e708:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e70c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e712:	83 ec 0c             	sub    esp,0xc
c000e715:	6a 01                	push   0x1
c000e717:	6a 02                	push   0x2
c000e719:	50                   	push   eax
c000e71a:	52                   	push   edx
c000e71b:	53                   	push   ebx
c000e71c:	e8 03 bc ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e721:	83 c4 20             	add    esp,0x20
c000e724:	09 f0                	or     eax,esi
c000e726:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e72a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e72e:	25 ff 0f 00 00       	and    eax,0xfff
c000e733:	89 c6                	mov    esi,eax
c000e735:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e73b:	83 ec 0c             	sub    esp,0xc
c000e73e:	6a 02                	push   0x2
c000e740:	e8 50 b2 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c000e745:	83 c4 10             	add    esp,0x10
c000e748:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e74c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e752:	83 ec 0c             	sub    esp,0xc
c000e755:	6a 01                	push   0x1
c000e757:	6a 02                	push   0x2
c000e759:	50                   	push   eax
c000e75a:	52                   	push   edx
c000e75b:	53                   	push   ebx
c000e75c:	e8 c3 bb ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e761:	83 c4 20             	add    esp,0x20
c000e764:	09 f0                	or     eax,esi
c000e766:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e76a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e76f:	75 13                	jne    c000e784 <findRSDT(unsigned char*)+0x124>
c000e771:	c6 05 40 31 02 c0 00 	mov    BYTE PTR ds:0xc0023140,0x0
c000e778:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e77c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e780:	eb 22                	jmp    c000e7a4 <findRSDT(unsigned char*)+0x144>
c000e782:	66 90                	xchg   ax,ax
c000e784:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e789:	75 11                	jne    c000e79c <findRSDT(unsigned char*)+0x13c>
c000e78b:	c6 05 40 31 02 c0 01 	mov    BYTE PTR ds:0xc0023140,0x1
c000e792:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e796:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e79a:	eb 08                	jmp    c000e7a4 <findRSDT(unsigned char*)+0x144>
c000e79c:	b8 00 00 00 00       	mov    eax,0x0
c000e7a1:	eb 05                	jmp    c000e7a8 <findRSDT(unsigned char*)+0x148>
c000e7a3:	90                   	nop
c000e7a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7a8:	83 c4 50             	add    esp,0x50
c000e7ab:	5b                   	pop    ebx
c000e7ac:	5e                   	pop    esi
c000e7ad:	5f                   	pop    edi
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <findDataTable(unsigned char*, char*)>:
c000e7b0:	83 ec 1c             	sub    esp,0x1c
c000e7b3:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e7b8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7be:	83 e0 04             	and    eax,0x4
c000e7c1:	84 c0                	test   al,al
c000e7c3:	75 07                	jne    c000e7cc <findDataTable(unsigned char*, char*)+0x1c>
c000e7c5:	b8 00 00 00 00       	mov    eax,0x0
c000e7ca:	eb 58                	jmp    c000e824 <findDataTable(unsigned char*, char*)+0x74>
c000e7cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7d4:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e7d9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7dd:	7d 3d                	jge    c000e81c <findDataTable(unsigned char*, char*)+0x6c>
c000e7df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e3:	c1 e0 03             	shl    eax,0x3
c000e7e6:	05 40 2f 02 c0       	add    eax,0xc0022f40
c000e7eb:	83 ec 04             	sub    esp,0x4
c000e7ee:	6a 04                	push   0x4
c000e7f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7f4:	50                   	push   eax
c000e7f5:	e8 b6 1b ff ff       	call   c00003b0 <memcmp>
c000e7fa:	83 c4 10             	add    esp,0x10
c000e7fd:	85 c0                	test   eax,eax
c000e7ff:	0f 94 c0             	sete   al
c000e802:	84 c0                	test   al,al
c000e804:	74 0e                	je     c000e814 <findDataTable(unsigned char*, char*)+0x64>
c000e806:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e80a:	8b 04 c5 44 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0bc]
c000e811:	eb 11                	jmp    c000e824 <findDataTable(unsigned char*, char*)+0x74>
c000e813:	90                   	nop
c000e814:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e818:	eb ba                	jmp    c000e7d4 <findDataTable(unsigned char*, char*)+0x24>
c000e81a:	66 90                	xchg   ax,ax
c000e81c:	b8 00 00 00 00       	mov    eax,0x0
c000e821:	8d 76 00             	lea    esi,[esi+0x0]
c000e824:	83 c4 1c             	add    esp,0x1c
c000e827:	c3                   	ret    

c000e828 <scanMADT()>:
c000e828:	53                   	push   ebx
c000e829:	83 ec 38             	sub    esp,0x38
c000e82c:	a1 50 09 02 c0       	mov    eax,ds:0xc0020950
c000e831:	25 00 04 00 00       	and    eax,0x400
c000e836:	74 14                	je     c000e84c <scanMADT()+0x24>
c000e838:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e83d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e843:	83 e2 fb             	and    edx,0xfffffffb
c000e846:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e84c:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e851:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e857:	83 e0 04             	and    eax,0x4
c000e85a:	84 c0                	test   al,al
c000e85c:	0f 84 8a 04 00 00    	je     c000ecec <scanMADT()+0x4c4>
c000e862:	e8 05 fb ff ff       	call   c000e36c <findRSDP()>
c000e867:	a3 4c 31 02 c0       	mov    ds:0xc002314c,eax
c000e86c:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c000e871:	85 c0                	test   eax,eax
c000e873:	75 1b                	jne    c000e890 <scanMADT()+0x68>
c000e875:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e87a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e880:	83 e2 fb             	and    edx,0xfffffffb
c000e883:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e889:	e9 66 04 00 00       	jmp    c000ecf4 <scanMADT()+0x4cc>
c000e88e:	66 90                	xchg   ax,ax
c000e890:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	50                   	push   eax
c000e899:	e8 c2 fd ff ff       	call   c000e660 <findRSDT(unsigned char*)>
c000e89e:	83 c4 10             	add    esp,0x10
c000e8a1:	a3 48 31 02 c0       	mov    ds:0xc0023148,eax
c000e8a6:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e8ab:	85 c0                	test   eax,eax
c000e8ad:	75 19                	jne    c000e8c8 <scanMADT()+0xa0>
c000e8af:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e8b4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8ba:	83 e2 fb             	and    edx,0xfffffffb
c000e8bd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8c3:	e9 2c 04 00 00       	jmp    c000ecf4 <scanMADT()+0x4cc>
c000e8c8:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e8cd:	83 ec 0c             	sub    esp,0xc
c000e8d0:	50                   	push   eax
c000e8d1:	e8 26 fb ff ff       	call   c000e3fc <loadACPITables(unsigned char*)>
c000e8d6:	83 c4 10             	add    esp,0x10
c000e8d9:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	68 28 e4 01 c0       	push   0xc001e428
c000e8e6:	50                   	push   eax
c000e8e7:	e8 c4 fe ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e8f3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e8f8:	75 1a                	jne    c000e914 <scanMADT()+0xec>
c000e8fa:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e8ff:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e905:	83 e2 fe             	and    edx,0xfffffffe
c000e908:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e90e:	e9 e1 03 00 00       	jmp    c000ecf4 <scanMADT()+0x4cc>
c000e913:	90                   	nop
c000e914:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e91c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e920:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e923:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e927:	0f 87 c7 03 00 00    	ja     c000ecf4 <scanMADT()+0x4cc>
c000e92d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e935:	0f 87 b9 03 00 00    	ja     c000ecf4 <scanMADT()+0x4cc>
c000e93b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e93f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e943:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e947:	8d 50 01             	lea    edx,[eax+0x1]
c000e94a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e94e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e952:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e956:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e95a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e95e:	8d 50 01             	lea    edx,[eax+0x1]
c000e961:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e965:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e969:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e96d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e971:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e976:	0f 86 74 03 00 00    	jbe    c000ecf0 <scanMADT()+0x4c8>
c000e97c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e981:	75 5d                	jne    c000e9e0 <scanMADT()+0x1b8>
c000e983:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e987:	8d 50 01             	lea    edx,[eax+0x1]
c000e98a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e98e:	8a 15 40 33 02 c0    	mov    dl,BYTE PTR ds:0xc0023340
c000e994:	81 e2 ff 00 00 00    	and    edx,0xff
c000e99a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e99e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9a2:	88 82 80 33 02 c0    	mov    BYTE PTR [edx-0x3ffdcc80],al
c000e9a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e9ac:	8d 42 01             	lea    eax,[edx+0x1]
c000e9af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e9b3:	a0 40 33 02 c0       	mov    al,ds:0xc0023340
c000e9b8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9bb:	88 0d 40 33 02 c0    	mov    BYTE PTR ds:0xc0023340,cl
c000e9c1:	25 ff 00 00 00       	and    eax,0xff
c000e9c6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9ca:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e9ce:	88 90 60 33 02 c0    	mov    BYTE PTR [eax-0x3ffdcca0],dl
c000e9d4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9d9:	e9 f6 02 00 00       	jmp    c000ecd4 <scanMADT()+0x4ac>
c000e9de:	66 90                	xchg   ax,ax
c000e9e0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e9e5:	0f 85 29 01 00 00    	jne    c000eb14 <scanMADT()+0x2ec>
c000e9eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e9f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9f6:	8a 15 00 32 02 c0    	mov    dl,BYTE PTR ds:0xc0023200
c000e9fc:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea02:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea06:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea0a:	88 82 20 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcde0],al
c000ea10:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea14:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea1c:	01 d0                	add    eax,edx
c000ea1e:	83 c0 2c             	add    eax,0x2c
c000ea21:	8a 00                	mov    al,BYTE PTR [eax]
c000ea23:	31 d2                	xor    edx,edx
c000ea25:	88 c2                	mov    dl,al
c000ea27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea2b:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea32:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea36:	25 ff 00 00 00       	and    eax,0xff
c000ea3b:	c1 e0 08             	shl    eax,0x8
c000ea3e:	89 d1                	mov    ecx,edx
c000ea40:	09 c1                	or     ecx,eax
c000ea42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea46:	8d 50 02             	lea    edx,[eax+0x2]
c000ea49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea4d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea51:	25 ff 00 00 00       	and    eax,0xff
c000ea56:	c1 e0 10             	shl    eax,0x10
c000ea59:	09 c1                	or     ecx,eax
c000ea5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea5f:	8d 50 03             	lea    edx,[eax+0x3]
c000ea62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea66:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea6a:	25 ff 00 00 00       	and    eax,0xff
c000ea6f:	c1 e0 18             	shl    eax,0x18
c000ea72:	09 c1                	or     ecx,eax
c000ea74:	89 ca                	mov    edx,ecx
c000ea76:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000ea7b:	25 ff 00 00 00       	and    eax,0xff
c000ea80:	89 14 85 40 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcdc0],edx
c000ea87:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea94:	01 d0                	add    eax,edx
c000ea96:	83 c0 2c             	add    eax,0x2c
c000ea99:	8a 00                	mov    al,BYTE PTR [eax]
c000ea9b:	31 d2                	xor    edx,edx
c000ea9d:	88 c2                	mov    dl,al
c000ea9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa3:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaaa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eaae:	25 ff 00 00 00       	and    eax,0xff
c000eab3:	c1 e0 08             	shl    eax,0x8
c000eab6:	89 d1                	mov    ecx,edx
c000eab8:	09 c1                	or     ecx,eax
c000eaba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eabe:	8d 50 02             	lea    edx,[eax+0x2]
c000eac1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eac9:	25 ff 00 00 00       	and    eax,0xff
c000eace:	c1 e0 10             	shl    eax,0x10
c000ead1:	09 c1                	or     ecx,eax
c000ead3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead7:	8d 50 03             	lea    edx,[eax+0x3]
c000eada:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eade:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eae2:	25 ff 00 00 00       	and    eax,0xff
c000eae7:	c1 e0 18             	shl    eax,0x18
c000eaea:	09 c1                	or     ecx,eax
c000eaec:	89 ca                	mov    edx,ecx
c000eaee:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000eaf3:	25 ff 00 00 00       	and    eax,0xff
c000eaf8:	89 14 85 c0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd40],edx
c000eaff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb04:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000eb09:	40                   	inc    eax
c000eb0a:	a2 00 32 02 c0       	mov    ds:0xc0023200,al
c000eb0f:	e9 c0 01 00 00       	jmp    c000ecd4 <scanMADT()+0x4ac>
c000eb14:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000eb19:	0f 85 fd 00 00 00    	jne    c000ec1c <scanMADT()+0x3f4>
c000eb1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb23:	8d 50 01             	lea    edx,[eax+0x1]
c000eb26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb2e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb32:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb3a:	8d 50 01             	lea    edx,[eax+0x1]
c000eb3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb49:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb55:	01 d0                	add    eax,edx
c000eb57:	83 c0 2c             	add    eax,0x2c
c000eb5a:	8a 00                	mov    al,BYTE PTR [eax]
c000eb5c:	31 d2                	xor    edx,edx
c000eb5e:	88 c2                	mov    dl,al
c000eb60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb64:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb6b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb6f:	25 ff 00 00 00       	and    eax,0xff
c000eb74:	c1 e0 08             	shl    eax,0x8
c000eb77:	89 d1                	mov    ecx,edx
c000eb79:	09 c1                	or     ecx,eax
c000eb7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7f:	8d 50 02             	lea    edx,[eax+0x2]
c000eb82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb8a:	25 ff 00 00 00       	and    eax,0xff
c000eb8f:	c1 e0 10             	shl    eax,0x10
c000eb92:	09 c1                	or     ecx,eax
c000eb94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb98:	8d 50 03             	lea    edx,[eax+0x3]
c000eb9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb9f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eba3:	25 ff 00 00 00       	and    eax,0xff
c000eba8:	c1 e0 18             	shl    eax,0x18
c000ebab:	09 c8                	or     eax,ecx
c000ebad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebb1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebbe:	01 d0                	add    eax,edx
c000ebc0:	83 c0 2c             	add    eax,0x2c
c000ebc3:	8a 00                	mov    al,BYTE PTR [eax]
c000ebc5:	25 ff 00 00 00       	and    eax,0xff
c000ebca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebce:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ebd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebd5:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ebd9:	81 e2 ff 00 00 00    	and    edx,0xff
c000ebdf:	c1 e2 08             	shl    edx,0x8
c000ebe2:	09 d0                	or     eax,edx
c000ebe4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ebe9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebee:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ebf2:	25 ff 00 00 00       	and    eax,0xff
c000ebf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebfb:	88 90 a0 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe0760],dl
c000ec01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec05:	31 d2                	xor    edx,edx
c000ec07:	88 c2                	mov    dl,al
c000ec09:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec0e:	66 89 84 12 e0 31 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdce20],ax
c000ec16:	e9 b9 00 00 00       	jmp    c000ecd4 <scanMADT()+0x4ac>
c000ec1b:	90                   	nop
c000ec1c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ec21:	0f 85 a1 00 00 00    	jne    c000ecc8 <scanMADT()+0x4a0>
c000ec27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec2b:	8d 50 01             	lea    edx,[eax+0x1]
c000ec2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec36:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec3a:	25 ff 00 00 00       	and    eax,0xff
c000ec3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec4b:	01 d0                	add    eax,edx
c000ec4d:	83 c0 2c             	add    eax,0x2c
c000ec50:	8a 00                	mov    al,BYTE PTR [eax]
c000ec52:	31 d2                	xor    edx,edx
c000ec54:	88 c2                	mov    dl,al
c000ec56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec5a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec61:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec65:	25 ff 00 00 00       	and    eax,0xff
c000ec6a:	c1 e0 08             	shl    eax,0x8
c000ec6d:	09 d0                	or     eax,edx
c000ec6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec73:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec7c:	8d 50 01             	lea    edx,[eax+0x1]
c000ec7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec87:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec8b:	25 ff 00 00 00       	and    eax,0xff
c000ec90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec98:	c1 e0 08             	shl    eax,0x8
c000ec9b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ec9f:	89 c1                	mov    ecx,eax
c000eca1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eca5:	c1 e0 18             	shl    eax,0x18
c000eca8:	89 c3                	mov    ebx,eax
c000ecaa:	a1 50 31 02 c0       	mov    eax,ds:0xc0023150
c000ecaf:	8d 50 01             	lea    edx,[eax+0x1]
c000ecb2:	89 15 50 31 02 c0    	mov    DWORD PTR ds:0xc0023150,edx
c000ecb8:	09 d9                	or     ecx,ebx
c000ecba:	89 ca                	mov    edx,ecx
c000ecbc:	89 14 85 60 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcea0],edx
c000ecc3:	eb 0f                	jmp    c000ecd4 <scanMADT()+0x4ac>
c000ecc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecc8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000eccd:	75 05                	jne    c000ecd4 <scanMADT()+0x4ac>
c000eccf:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecd4:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ecd8:	31 d2                	xor    edx,edx
c000ecda:	88 c2                	mov    dl,al
c000ecdc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ece0:	01 d0                	add    eax,edx
c000ece2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ece6:	e9 31 fc ff ff       	jmp    c000e91c <scanMADT()+0xf4>
c000eceb:	90                   	nop
c000ecec:	90                   	nop
c000eced:	eb 05                	jmp    c000ecf4 <scanMADT()+0x4cc>
c000ecef:	90                   	nop
c000ecf0:	90                   	nop
c000ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf4:	83 c4 38             	add    esp,0x38
c000ecf7:	5b                   	pop    ebx
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop
c000ecfa:	66 90                	xchg   ax,ax

c000ecfc <ACPI::ACPI()>:
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed03:	83 ec 08             	sub    esp,0x8
c000ed06:	68 2d e4 01 c0       	push   0xc001e42d
c000ed0b:	50                   	push   eax
c000ed0c:	e8 af d4 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000ed11:	83 c4 10             	add    esp,0x10
c000ed14:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c000ed19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed1d:	89 10                	mov    DWORD PTR [eax],edx
c000ed1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed23:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed2e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed3c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed46:	e8 dd fa ff ff       	call   c000e828 <scanMADT()>
c000ed4b:	90                   	nop
c000ed4c:	83 c4 0c             	add    esp,0xc
c000ed4f:	c3                   	ret    

c000ed50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed50:	83 ec 2c             	sub    esp,0x2c
c000ed53:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed5b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed5f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed63:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed68:	88 d0                	mov    al,dl
c000ed6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed6e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed73:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed7b:	90                   	nop
c000ed7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed80:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed86:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed8a:	0f 8d 9c 00 00 00    	jge    c000ee2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000ed90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed98:	83 c2 2a             	add    edx,0x2a
c000ed9b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ed9f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000eda4:	75 7a                	jne    c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000eda6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edaa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edae:	83 c2 2a             	add    edx,0x2a
c000edb1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edb5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000edb9:	75 65                	jne    c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000edbb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000edc0:	74 3a                	je     c000edfc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000edc2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edc6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edca:	83 c2 2a             	add    edx,0x2a
c000edcd:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000edd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edd8:	39 c2                	cmp    edx,eax
c000edda:	74 10                	je     c000edec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000eddc:	83 ec 0c             	sub    esp,0xc
c000eddf:	68 a8 e3 01 c0       	push   0xc001e3a8
c000ede4:	e8 ea 18 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000ede9:	83 c4 10             	add    esp,0x10
c000edec:	83 ec 0c             	sub    esp,0xc
c000edef:	68 32 e4 01 c0       	push   0xc001e432
c000edf4:	e8 da 18 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000edf9:	83 c4 10             	add    esp,0x10
c000edfc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee08:	83 c2 2a             	add    edx,0x2a
c000ee0b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee0f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee11:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee14:	89 01                	mov    DWORD PTR [ecx],eax
c000ee16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee19:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee1e:	66 90                	xchg   ax,ax
c000ee20:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee24:	e9 53 ff ff ff       	jmp    c000ed7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee29:	8d 76 00             	lea    esi,[esi+0x0]
c000ee2c:	90                   	nop
c000ee2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee31:	83 c4 2c             	add    esp,0x2c
c000ee34:	c2 04 00             	ret    0x4
c000ee37:	90                   	nop

c000ee38 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee38:	83 ec 1c             	sub    esp,0x1c
c000ee3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee3f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee43:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee47:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee4c:	88 c8                	mov    al,cl
c000ee4e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee52:	88 d0                	mov    al,dl
c000ee54:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee5c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee66:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee69:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee6d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee75:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee7f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ee82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee86:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ee8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee8f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee95:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ee99:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea0:	83 c2 2a             	add    edx,0x2a
c000eea3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeab:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eeb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eebc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eeca:	8d 50 01             	lea    edx,[eax+0x1]
c000eecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eedb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eee1:	3d 00 02 00 00       	cmp    eax,0x200
c000eee6:	75 10                	jne    c000eef8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000eee8:	83 ec 0c             	sub    esp,0xc
c000eeeb:	68 41 e4 01 c0       	push   0xc001e441
c000eef0:	e8 de 17 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000eef5:	83 c4 10             	add    esp,0x10
c000eef8:	90                   	nop
c000eef9:	83 c4 1c             	add    esp,0x1c
c000eefc:	c3                   	ret    
c000eefd:	90                   	nop
c000eefe:	66 90                	xchg   ax,ax

c000ef00 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef00:	b8 00 00 00 00       	mov    eax,0x0
c000ef05:	c3                   	ret    
c000ef06:	66 90                	xchg   ax,ax

c000ef08 <ACPI::detectPCI()>:
c000ef08:	53                   	push   ebx
c000ef09:	83 ec 28             	sub    esp,0x28
c000ef0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef11:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef16:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000ef1b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef21:	83 e0 04             	and    eax,0x4
c000ef24:	84 c0                	test   al,al
c000ef26:	74 2c                	je     c000ef54 <ACPI::detectPCI()+0x4c>
c000ef28:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000ef2d:	83 ec 08             	sub    esp,0x8
c000ef30:	68 5e e4 01 c0       	push   0xc001e45e
c000ef35:	50                   	push   eax
c000ef36:	e8 75 f8 ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000ef3b:	83 c4 10             	add    esp,0x10
c000ef3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef42:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef47:	74 0b                	je     c000ef54 <ACPI::detectPCI()+0x4c>
c000ef49:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef4e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef53:	90                   	nop
c000ef54:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef60:	8a 00                	mov    al,BYTE PTR [eax]
c000ef62:	3c 01                	cmp    al,0x1
c000ef64:	75 0e                	jne    c000ef74 <ACPI::detectPCI()+0x6c>
c000ef66:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef6b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef70:	eb 2a                	jmp    c000ef9c <ACPI::detectPCI()+0x94>
c000ef72:	66 90                	xchg   ax,ax
c000ef74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef78:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7a:	3c 02                	cmp    al,0x2
c000ef7c:	75 1e                	jne    c000ef9c <ACPI::detectPCI()+0x94>
c000ef7e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef83:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ef88:	74 12                	je     c000ef9c <ACPI::detectPCI()+0x94>
c000ef8a:	83 ec 0c             	sub    esp,0xc
c000ef8d:	68 d8 e3 01 c0       	push   0xc001e3d8
c000ef92:	e8 3c 17 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000ef97:	83 c4 10             	add    esp,0x10
c000ef9a:	66 90                	xchg   ax,ax
c000ef9c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efa0:	83 f0 01             	xor    eax,0x1
c000efa3:	84 c0                	test   al,al
c000efa5:	74 41                	je     c000efe8 <ACPI::detectPCI()+0xe0>
c000efa7:	e8 a4 11 ff ff       	call   c0000150 <manualPCIProbe>
c000efac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efb0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efb5:	75 0d                	jne    c000efc4 <ACPI::detectPCI()+0xbc>
c000efb7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efbc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efc1:	eb 25                	jmp    c000efe8 <ACPI::detectPCI()+0xe0>
c000efc3:	90                   	nop
c000efc4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efc9:	75 1d                	jne    c000efe8 <ACPI::detectPCI()+0xe0>
c000efcb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000efd5:	74 11                	je     c000efe8 <ACPI::detectPCI()+0xe0>
c000efd7:	83 ec 0c             	sub    esp,0xc
c000efda:	68 d8 e3 01 c0       	push   0xc001e3d8
c000efdf:	e8 ef 16 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c000efe4:	83 c4 10             	add    esp,0x10
c000efe7:	90                   	nop
c000efe8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000efed:	0f 84 85 00 00 00    	je     c000f078 <ACPI::detectPCI()+0x170>
c000eff3:	83 ec 0c             	sub    esp,0xc
c000eff6:	68 63 e4 01 c0       	push   0xc001e463
c000effb:	e8 b3 8e ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f000:	83 c4 10             	add    esp,0x10
c000f003:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f00b:	83 ec 0c             	sub    esp,0xc
c000f00e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f012:	e8 42 8e ff ff       	call   c0007e59 <malloc>
c000f017:	83 c4 10             	add    esp,0x10
c000f01a:	89 c3                	mov    ebx,eax
c000f01c:	83 ec 0c             	sub    esp,0xc
c000f01f:	53                   	push   ebx
c000f020:	e8 dd 94 00 00       	call   c0018502 <PCI::PCI()>
c000f025:	83 c4 10             	add    esp,0x10
c000f028:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f02c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f030:	83 ec 08             	sub    esp,0x8
c000f033:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f037:	50                   	push   eax
c000f038:	e8 eb cf ff ff       	call   c000c028 <Device::addChild(Device*)>
c000f03d:	83 c4 10             	add    esp,0x10
c000f040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f044:	8b 00                	mov    eax,DWORD PTR [eax]
c000f046:	83 c0 08             	add    eax,0x8
c000f049:	8b 00                	mov    eax,DWORD PTR [eax]
c000f04b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f050:	74 0a                	je     c000f05c <ACPI::detectPCI()+0x154>
c000f052:	ba 01 00 00 00       	mov    edx,0x1
c000f057:	eb 0b                	jmp    c000f064 <ACPI::detectPCI()+0x15c>
c000f059:	8d 76 00             	lea    esi,[esi+0x0]
c000f05c:	ba 02 00 00 00       	mov    edx,0x2
c000f061:	8d 76 00             	lea    esi,[esi+0x0]
c000f064:	6a 00                	push   0x0
c000f066:	6a 00                	push   0x0
c000f068:	52                   	push   edx
c000f069:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f06d:	ff d0                	call   eax
c000f06f:	83 c4 10             	add    esp,0x10
c000f072:	e9 91 00 00 00       	jmp    c000f108 <ACPI::detectPCI()+0x200>
c000f077:	90                   	nop
c000f078:	83 ec 0c             	sub    esp,0xc
c000f07b:	68 7b e4 01 c0       	push   0xc001e47b
c000f080:	e8 2e 8e ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f08f:	83 ec 0c             	sub    esp,0xc
c000f092:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f096:	e8 be 8d ff ff       	call   c0007e59 <malloc>
c000f09b:	83 c4 10             	add    esp,0x10
c000f09e:	89 c3                	mov    ebx,eax
c000f0a0:	83 ec 0c             	sub    esp,0xc
c000f0a3:	53                   	push   ebx
c000f0a4:	e8 85 9f 00 00       	call   c001902e <IDE::IDE()>
c000f0a9:	83 c4 10             	add    esp,0x10
c000f0ac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0b4:	83 ec 08             	sub    esp,0x8
c000f0b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0bb:	50                   	push   eax
c000f0bc:	e8 67 cf ff ff       	call   c000c028 <Device::addChild(Device*)>
c000f0c1:	83 c4 10             	add    esp,0x10
c000f0c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0c8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0d6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f0ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0f2:	83 c0 08             	add    eax,0x8
c000f0f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0f7:	6a 00                	push   0x0
c000f0f9:	6a 00                	push   0x0
c000f0fb:	6a 00                	push   0x0
c000f0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f101:	ff d0                	call   eax
c000f103:	83 c4 10             	add    esp,0x10
c000f106:	66 90                	xchg   ax,ax
c000f108:	90                   	nop
c000f109:	83 c4 28             	add    esp,0x28
c000f10c:	5b                   	pop    ebx
c000f10d:	c3                   	ret    
c000f10e:	66 90                	xchg   ax,ax

c000f110 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f110:	83 ec 1c             	sub    esp,0x1c
c000f113:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f117:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f11a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f11e:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000f124:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f128:	25 ff 00 00 00       	and    eax,0xff
c000f12d:	83 ec 08             	sub    esp,0x8
c000f130:	50                   	push   eax
c000f131:	52                   	push   edx
c000f132:	e8 13 84 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c000f137:	83 c4 10             	add    esp,0x10
c000f13a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f13e:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000f144:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f148:	25 ff 00 00 00       	and    eax,0xff
c000f14d:	83 ec 04             	sub    esp,0x4
c000f150:	6a 01                	push   0x1
c000f152:	50                   	push   eax
c000f153:	52                   	push   edx
c000f154:	e8 07 85 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f159:	83 c4 10             	add    esp,0x10
c000f15c:	90                   	nop
c000f15d:	83 c4 1c             	add    esp,0x1c
c000f160:	c3                   	ret    
c000f161:	90                   	nop
c000f162:	66 90                	xchg   ax,ax

c000f164 <ACPI::sleep()>:
c000f164:	83 ec 0c             	sub    esp,0xc
c000f167:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c000f16c:	85 c0                	test   eax,eax
c000f16e:	74 08                	je     c000f178 <ACPI::sleep()+0x14>
c000f170:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c000f175:	ff d0                	call   eax
c000f177:	90                   	nop
c000f178:	90                   	nop
c000f179:	83 c4 0c             	add    esp,0xc
c000f17c:	c3                   	ret    
c000f17d:	90                   	nop
c000f17e:	66 90                	xchg   ax,ax

c000f180 <ACPI::open(int, int, void*)>:
c000f180:	57                   	push   edi
c000f181:	56                   	push   esi
c000f182:	53                   	push   ebx
c000f183:	81 ec 70 01 00 00    	sub    esp,0x170
c000f189:	83 ec 0c             	sub    esp,0xc
c000f18c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f193:	e8 70 fd ff ff       	call   c000ef08 <ACPI::detectPCI()>
c000f198:	83 c4 10             	add    esp,0x10
c000f19b:	83 ec 0c             	sub    esp,0xc
c000f19e:	68 00 e4 01 c0       	push   0xc001e400
c000f1a3:	e8 0b 8d ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f1a8:	83 c4 10             	add    esp,0x10
c000f1ab:	83 ec 0c             	sub    esp,0xc
c000f1ae:	68 90 e4 01 c0       	push   0xc001e490
c000f1b3:	e8 07 34 00 00       	call   c00125bf <Thr::loadKernelSymbolTable(char const*)>
c000f1b8:	83 c4 10             	add    esp,0x10
c000f1bb:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f1c3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f1ce:	83 ec 0c             	sub    esp,0xc
c000f1d1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1d8:	e8 7c 8c ff ff       	call   c0007e59 <malloc>
c000f1dd:	83 c4 10             	add    esp,0x10
c000f1e0:	89 c3                	mov    ebx,eax
c000f1e2:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f1e7:	83 ec 04             	sub    esp,0x4
c000f1ea:	50                   	push   eax
c000f1eb:	68 ae e4 01 c0       	push   0xc001e4ae
c000f1f0:	53                   	push   ebx
c000f1f1:	e8 68 bf ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f1f6:	83 c4 10             	add    esp,0x10
c000f1f9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f200:	83 ec 08             	sub    esp,0x8
c000f203:	6a 01                	push   0x1
c000f205:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f20c:	e8 0d c0 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c000f211:	83 c4 10             	add    esp,0x10
c000f214:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f21b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f223:	75 17                	jne    c000f23c <ACPI::open(int, int, void*)+0xbc>
c000f225:	83 ec 0c             	sub    esp,0xc
c000f228:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f22f:	e8 48 c0 ff ff       	call   c000b27c <File::close()>
c000f234:	83 c4 10             	add    esp,0x10
c000f237:	eb 0b                	jmp    c000f244 <ACPI::open(int, int, void*)+0xc4>
c000f239:	8d 76 00             	lea    esi,[esi+0x0]
c000f23c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f244:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f24c:	74 1e                	je     c000f26c <ACPI::open(int, int, void*)+0xec>
c000f24e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f255:	8b 00                	mov    eax,DWORD PTR [eax]
c000f257:	83 c0 08             	add    eax,0x8
c000f25a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f25c:	83 ec 0c             	sub    esp,0xc
c000f25f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f266:	ff d0                	call   eax
c000f268:	83 c4 10             	add    esp,0x10
c000f26b:	90                   	nop
c000f26c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f273:	83 f0 01             	xor    eax,0x1
c000f276:	84 c0                	test   al,al
c000f278:	74 42                	je     c000f2bc <ACPI::open(int, int, void*)+0x13c>
c000f27a:	83 ec 0c             	sub    esp,0xc
c000f27d:	68 cc e4 01 c0       	push   0xc001e4cc
c000f282:	e8 2c 8c ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f287:	83 c4 10             	add    esp,0x10
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	6a 0c                	push   0xc
c000f28f:	68 e7 e4 01 c0       	push   0xc001e4e7
c000f294:	68 f8 e4 01 c0       	push   0xc001e4f8
c000f299:	e8 20 1b 00 00       	call   c0010dbe <Reg::readIntWithDefault(char*, char*, int)>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f2a8:	83 ec 0c             	sub    esp,0xc
c000f2ab:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f2b2:	e8 e8 a8 ff ff       	call   c0009b9f <Virt::setupPageSwapping(int)>
c000f2b7:	83 c4 10             	add    esp,0x10
c000f2ba:	66 90                	xchg   ax,ax
c000f2bc:	83 ec 0c             	sub    esp,0xc
c000f2bf:	68 80 d5 01 c0       	push   0xc001d580
c000f2c4:	e8 ea 8b ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f2c9:	83 c4 10             	add    esp,0x10
c000f2cc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f2d3:	83 ec 08             	sub    esp,0x8
c000f2d6:	6a 12                	push   0x12
c000f2d8:	50                   	push   eax
c000f2d9:	e8 62 d0 ff ff       	call   c000c340 <getDevicesOfType(DeviceType)>
c000f2de:	83 c4 0c             	add    esp,0xc
c000f2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2e4:	83 ec 0c             	sub    esp,0xc
c000f2e7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f2ee:	50                   	push   eax
c000f2ef:	e8 88 d6 00 00       	call   c001c97c <LinkedList<Device>::isEmpty()>
c000f2f4:	83 c4 10             	add    esp,0x10
c000f2f7:	83 f0 01             	xor    eax,0x1
c000f2fa:	84 c0                	test   al,al
c000f2fc:	0f 84 46 01 00 00    	je     c000f448 <ACPI::open(int, int, void*)+0x2c8>
c000f302:	83 ec 0c             	sub    esp,0xc
c000f305:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f30c:	50                   	push   eax
c000f30d:	e8 86 d6 00 00       	call   c001c998 <LinkedList<Device>::getFirstElement()>
c000f312:	83 c4 10             	add    esp,0x10
c000f315:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f31c:	83 ec 0c             	sub    esp,0xc
c000f31f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f326:	50                   	push   eax
c000f327:	e8 74 d6 00 00       	call   c001c9a0 <LinkedList<Device>::removeFirst()>
c000f32c:	83 c4 10             	add    esp,0x10
c000f32f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f336:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f33d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f344:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f348:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f34e:	ba 09 00 00 00       	mov    edx,0x9
c000f353:	fc                   	cld    
c000f354:	89 c7                	mov    edi,eax
c000f356:	89 de                	mov    esi,ebx
c000f358:	89 d1                	mov    ecx,edx
c000f35a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f35c:	83 ec 08             	sub    esp,0x8
c000f35f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f363:	50                   	push   eax
c000f364:	83 ec 24             	sub    esp,0x24
c000f367:	89 e0                	mov    eax,esp
c000f369:	89 c3                	mov    ebx,eax
c000f36b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f36f:	ba 09 00 00 00       	mov    edx,0x9
c000f374:	89 df                	mov    edi,ebx
c000f376:	89 c6                	mov    esi,eax
c000f378:	89 d1                	mov    ecx,edx
c000f37a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f37c:	e8 63 96 00 00       	call   c00189e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f381:	83 c4 30             	add    esp,0x30
c000f384:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f38b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f393:	0f 84 4b ff ff ff    	je     c000f2e4 <ACPI::open(int, int, void*)+0x164>
c000f399:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f3a4:	83 ec 0c             	sub    esp,0xc
c000f3a7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f3ae:	e8 a6 8a ff ff       	call   c0007e59 <malloc>
c000f3b3:	83 c4 10             	add    esp,0x10
c000f3b6:	89 c3                	mov    ebx,eax
c000f3b8:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f3bd:	83 ec 04             	sub    esp,0x4
c000f3c0:	50                   	push   eax
c000f3c1:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3c8:	53                   	push   ebx
c000f3c9:	e8 90 bd ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f3ce:	83 c4 10             	add    esp,0x10
c000f3d1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f3d8:	83 ec 0c             	sub    esp,0xc
c000f3db:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3e2:	e8 a5 c0 ff ff       	call   c000b48c <File::exists()>
c000f3e7:	83 c4 10             	add    esp,0x10
c000f3ea:	84 c0                	test   al,al
c000f3ec:	74 2a                	je     c000f418 <ACPI::open(int, int, void*)+0x298>
c000f3ee:	83 ec 08             	sub    esp,0x8
c000f3f1:	6a 01                	push   0x1
c000f3f3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f3fa:	e8 37 3c 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c000f3ff:	83 c4 10             	add    esp,0x10
c000f402:	83 ec 08             	sub    esp,0x8
c000f405:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f40c:	50                   	push   eax
c000f40d:	e8 55 3e 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c000f412:	83 c4 10             	add    esp,0x10
c000f415:	8d 76 00             	lea    esi,[esi+0x0]
c000f418:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f420:	0f 84 be fe ff ff    	je     c000f2e4 <ACPI::open(int, int, void*)+0x164>
c000f426:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f42d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f42f:	83 c0 08             	add    eax,0x8
c000f432:	8b 00                	mov    eax,DWORD PTR [eax]
c000f434:	83 ec 0c             	sub    esp,0xc
c000f437:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f43e:	ff d0                	call   eax
c000f440:	83 c4 10             	add    esp,0x10
c000f443:	e9 9c fe ff ff       	jmp    c000f2e4 <ACPI::open(int, int, void*)+0x164>
c000f448:	83 ec 0c             	sub    esp,0xc
c000f44b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f452:	50                   	push   eax
c000f453:	e8 20 d5 00 00       	call   c001c978 <LinkedList<Device>::~LinkedList()>
c000f458:	83 c4 10             	add    esp,0x10
c000f45b:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000f461:	83 ec 08             	sub    esp,0x8
c000f464:	6a 01                	push   0x1
c000f466:	68 ff e4 01 c0       	push   0xc001e4ff
c000f46b:	e8 c6 3b 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c000f470:	83 c4 10             	add    esp,0x10
c000f473:	83 ec 08             	sub    esp,0x8
c000f476:	53                   	push   ebx
c000f477:	50                   	push   eax
c000f478:	e8 ea 3d 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c000f47d:	83 c4 10             	add    esp,0x10
c000f480:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000f485:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f48b:	83 e0 04             	and    eax,0x4
c000f48e:	84 c0                	test   al,al
c000f490:	0f 84 16 01 00 00    	je     c000f5ac <ACPI::open(int, int, void*)+0x42c>
c000f496:	83 ec 0c             	sub    esp,0xc
c000f499:	68 1c e5 01 c0       	push   0xc001e51c
c000f49e:	e8 10 8a ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c000f4a3:	83 c4 10             	add    esp,0x10
c000f4a6:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f4b1:	83 ec 0c             	sub    esp,0xc
c000f4b4:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f4bb:	e8 99 89 ff ff       	call   c0007e59 <malloc>
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	89 c3                	mov    ebx,eax
c000f4c5:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f4ca:	83 ec 04             	sub    esp,0x4
c000f4cd:	50                   	push   eax
c000f4ce:	68 39 e5 01 c0       	push   0xc001e539
c000f4d3:	53                   	push   ebx
c000f4d4:	e8 85 bc ff ff       	call   c000b15e <File::File(char const*, Process*)>
c000f4d9:	83 c4 10             	add    esp,0x10
c000f4dc:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f4e3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f4eb:	74 1b                	je     c000f508 <ACPI::open(int, int, void*)+0x388>
c000f4ed:	83 ec 0c             	sub    esp,0xc
c000f4f0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f4f7:	e8 90 bf ff ff       	call   c000b48c <File::exists()>
c000f4fc:	83 c4 10             	add    esp,0x10
c000f4ff:	84 c0                	test   al,al
c000f501:	74 05                	je     c000f508 <ACPI::open(int, int, void*)+0x388>
c000f503:	b0 01                	mov    al,0x1
c000f505:	eb 05                	jmp    c000f50c <ACPI::open(int, int, void*)+0x38c>
c000f507:	90                   	nop
c000f508:	b0 00                	mov    al,0x0
c000f50a:	66 90                	xchg   ax,ax
c000f50c:	84 c0                	test   al,al
c000f50e:	74 28                	je     c000f538 <ACPI::open(int, int, void*)+0x3b8>
c000f510:	83 ec 08             	sub    esp,0x8
c000f513:	6a 01                	push   0x1
c000f515:	68 39 e5 01 c0       	push   0xc001e539
c000f51a:	e8 17 3b 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c000f51f:	83 c4 10             	add    esp,0x10
c000f522:	83 ec 08             	sub    esp,0x8
c000f525:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f52c:	50                   	push   eax
c000f52d:	e8 35 3d 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c000f532:	83 c4 10             	add    esp,0x10
c000f535:	8d 76 00             	lea    esi,[esi+0x0]
c000f538:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f540:	74 2a                	je     c000f56c <ACPI::open(int, int, void*)+0x3ec>
c000f542:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f54a:	74 20                	je     c000f56c <ACPI::open(int, int, void*)+0x3ec>
c000f54c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f553:	8b 00                	mov    eax,DWORD PTR [eax]
c000f555:	83 c0 08             	add    eax,0x8
c000f558:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55a:	83 ec 0c             	sub    esp,0xc
c000f55d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f564:	ff d0                	call   eax
c000f566:	83 c4 10             	add    esp,0x10
c000f569:	8d 76 00             	lea    esi,[esi+0x0]
c000f56c:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000f571:	83 ec 08             	sub    esp,0x8
c000f574:	68 56 e5 01 c0       	push   0xc001e556
c000f579:	50                   	push   eax
c000f57a:	e8 31 f2 ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000f57f:	83 c4 10             	add    esp,0x10
c000f582:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f589:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f591:	74 19                	je     c000f5ac <ACPI::open(int, int, void*)+0x42c>
c000f593:	83 ec 08             	sub    esp,0x8
c000f596:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f59d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f5a4:	e8 67 fb ff ff       	call   c000f110 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	b8 00 00 00 00       	mov    eax,0x0
c000f5b1:	81 c4 70 01 00 00    	add    esp,0x170
c000f5b7:	5b                   	pop    ebx
c000f5b8:	5e                   	pop    esi
c000f5b9:	5f                   	pop    edi
c000f5ba:	c3                   	ret    
c000f5bb:	90                   	nop

c000f5bc <CPU::close(int, int, void*)>:
c000f5bc:	31 c0                	xor    eax,eax
c000f5be:	c3                   	ret    
c000f5bf:	90                   	nop

c000f5c0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5c0:	60                   	pusha  
c000f5c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5cd:	9c                   	pushf  
c000f5ce:	fa                   	cli    
c000f5cf:	0f 09                	wbinvd 
c000f5d1:	0f 30                	wrmsr  
c000f5d3:	9d                   	popf   
c000f5d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5d8:	89 02                	mov    DWORD PTR [edx],eax
c000f5da:	61                   	popa   
c000f5db:	c3                   	ret    

c000f5dc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5dc:	60                   	pusha  
c000f5dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5e1:	9c                   	pushf  
c000f5e2:	fa                   	cli    
c000f5e3:	0f 09                	wbinvd 
c000f5e5:	31 c0                	xor    eax,eax
c000f5e7:	31 d2                	xor    edx,edx
c000f5e9:	0f 32                	rdmsr  
c000f5eb:	9d                   	popf   
c000f5ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5f0:	89 02                	mov    DWORD PTR [edx],eax
c000f5f2:	61                   	popa   
c000f5f3:	c3                   	ret    

c000f5f4 <CPU::AMD_K6_writeback(int, int, int)>:
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	83 ec 10             	sub    esp,0x10
c000f5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5fd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f602:	75 5d                	jne    c000f661 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f604:	83 f8 08             	cmp    eax,0x8
c000f607:	75 09                	jne    c000f612 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f609:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f60e:	7e 13                	jle    c000f623 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f610:	eb 30                	jmp    c000f642 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f612:	83 f8 06             	cmp    eax,0x6
c000f615:	7c 4a                	jl     c000f661 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f617:	83 f8 07             	cmp    eax,0x7
c000f61a:	7e 07                	jle    c000f623 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f61c:	83 f8 09             	cmp    eax,0x9
c000f61f:	74 21                	je     c000f642 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f621:	eb 3e                	jmp    c000f661 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f623:	89 e6                	mov    esi,esp
c000f625:	8b 1d 5c 09 02 c0    	mov    ebx,DWORD PTR ds:0xc002095c
c000f62b:	56                   	push   esi
c000f62c:	c1 eb 15             	shr    ebx,0x15
c000f62f:	68 82 00 00 c0       	push   0xc0000082
c000f634:	83 e3 7e             	and    ebx,0x7e
c000f637:	e8 a0 ff ff ff       	call   c000f5dc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f63c:	56                   	push   esi
c000f63d:	6a 00                	push   0x0
c000f63f:	53                   	push   ebx
c000f640:	eb 12                	jmp    c000f654 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f642:	89 e3                	mov    ebx,esp
c000f644:	53                   	push   ebx
c000f645:	68 82 00 00 c0       	push   0xc0000082
c000f64a:	e8 8d ff ff ff       	call   c000f5dc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f64f:	53                   	push   ebx
c000f650:	6a 00                	push   0x0
c000f652:	6a 00                	push   0x0
c000f654:	68 82 00 00 c0       	push   0xc0000082
c000f659:	e8 62 ff ff ff       	call   c000f5c0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f65e:	83 c4 18             	add    esp,0x18
c000f661:	83 c4 10             	add    esp,0x10
c000f664:	5b                   	pop    ebx
c000f665:	5e                   	pop    esi
c000f666:	c3                   	ret    
c000f667:	90                   	nop

c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f668:	55                   	push   ebp
c000f669:	57                   	push   edi
c000f66a:	56                   	push   esi
c000f66b:	53                   	push   ebx
c000f66c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f670:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f674:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f678:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f67c:	39 05 b0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8b0,eax
c000f682:	75 23                	jne    c000f6a7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f684:	a1 ac 33 02 c0       	mov    eax,ds:0xc00233ac
c000f689:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f68d:	89 06                	mov    DWORD PTR [esi],eax
c000f68f:	a1 a8 33 02 c0       	mov    eax,ds:0xc00233a8
c000f694:	89 07                	mov    DWORD PTR [edi],eax
c000f696:	a1 a4 33 02 c0       	mov    eax,ds:0xc00233a4
c000f69b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f69e:	a1 a0 33 02 c0       	mov    eax,ds:0xc00233a0
c000f6a3:	89 02                	mov    DWORD PTR [edx],eax
c000f6a5:	eb 3f                	jmp    c000f6e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6a7:	31 c9                	xor    ecx,ecx
c000f6a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6ad:	0f a2                	cpuid  
c000f6af:	89 06                	mov    DWORD PTR [esi],eax
c000f6b1:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6b7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6ba:	89 10                	mov    DWORD PTR [eax],edx
c000f6bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6c0:	a3 b0 f8 01 c0       	mov    ds:0xc001f8b0,eax
c000f6c5:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6c7:	a3 ac 33 02 c0       	mov    ds:0xc00233ac,eax
c000f6cc:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6ce:	a3 a8 33 02 c0       	mov    ds:0xc00233a8,eax
c000f6d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6d6:	a3 a4 33 02 c0       	mov    ds:0xc00233a4,eax
c000f6db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e1:	a3 a0 33 02 c0       	mov    ds:0xc00233a0,eax
c000f6e6:	5b                   	pop    ebx
c000f6e7:	5e                   	pop    esi
c000f6e8:	5f                   	pop    edi
c000f6e9:	5d                   	pop    ebp
c000f6ea:	c3                   	ret    
c000f6eb:	90                   	nop

c000f6ec <CPU::cpuidCheckEDX(unsigned int)>:
c000f6ec:	83 ec 10             	sub    esp,0x10
c000f6ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f3:	50                   	push   eax
c000f6f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f8:	50                   	push   eax
c000f6f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6fd:	50                   	push   eax
c000f6fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f702:	50                   	push   eax
c000f703:	6a 01                	push   0x1
c000f705:	e8 5e ff ff ff       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f70a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f70e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f712:	0f 95 c0             	setne  al
c000f715:	83 c4 24             	add    esp,0x24
c000f718:	c3                   	ret    
c000f719:	90                   	nop

c000f71a <CPU::cpuidCheckECX(unsigned int)>:
c000f71a:	83 ec 10             	sub    esp,0x10
c000f71d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f721:	50                   	push   eax
c000f722:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f726:	50                   	push   eax
c000f727:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f72b:	50                   	push   eax
c000f72c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f730:	50                   	push   eax
c000f731:	6a 01                	push   0x1
c000f733:	e8 30 ff ff ff       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f738:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f73c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f740:	0f 95 c0             	setne  al
c000f743:	83 c4 24             	add    esp,0x24
c000f746:	c3                   	ret    
c000f747:	90                   	nop

c000f748 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f748:	83 ec 10             	sub    esp,0x10
c000f74b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74f:	50                   	push   eax
c000f750:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f754:	50                   	push   eax
c000f755:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f759:	50                   	push   eax
c000f75a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f75e:	50                   	push   eax
c000f75f:	6a 07                	push   0x7
c000f761:	e8 02 ff ff ff       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f766:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f76e:	0f 95 c0             	setne  al
c000f771:	83 c4 24             	add    esp,0x24
c000f774:	c3                   	ret    
c000f775:	90                   	nop

c000f776 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f776:	83 ec 10             	sub    esp,0x10
c000f779:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f77d:	50                   	push   eax
c000f77e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f782:	50                   	push   eax
c000f783:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f787:	50                   	push   eax
c000f788:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f78c:	50                   	push   eax
c000f78d:	6a 07                	push   0x7
c000f78f:	e8 d4 fe ff ff       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f794:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f798:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f79c:	0f 95 c0             	setne  al
c000f79f:	83 c4 24             	add    esp,0x24
c000f7a2:	c3                   	ret    
c000f7a3:	90                   	nop

c000f7a4 <CPU::CPU()>:
c000f7a4:	83 ec 0c             	sub    esp,0xc
c000f7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ab:	83 ec 08             	sub    esp,0x8
c000f7ae:	68 79 e6 01 c0       	push   0xc001e679
c000f7b3:	50                   	push   eax
c000f7b4:	e8 07 ca ff ff       	call   c000c1c0 <Device::Device(char const*)>
c000f7b9:	83 c4 10             	add    esp,0x10
c000f7bc:	ba 00 e7 01 c0       	mov    edx,0xc001e700
c000f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7c5:	89 10                	mov    DWORD PTR [eax],edx
c000f7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7cb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d9:	05 78 01 00 00       	add    eax,0x178
c000f7de:	83 ec 0c             	sub    esp,0xc
c000f7e1:	50                   	push   eax
c000f7e2:	e8 37 7f ff ff       	call   c000771e <GDT::GDT()>
c000f7e7:	83 c4 10             	add    esp,0x10
c000f7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ee:	05 7c 09 00 00       	add    eax,0x97c
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	50                   	push   eax
c000f7f7:	e8 58 81 ff ff       	call   c0007954 <IDT::IDT()>
c000f7fc:	83 c4 10             	add    esp,0x10
c000f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f803:	05 7c 11 00 00       	add    eax,0x117c
c000f808:	83 ec 0c             	sub    esp,0xc
c000f80b:	50                   	push   eax
c000f80c:	e8 c7 9a ff ff       	call   c00092d8 <TSS::TSS()>
c000f811:	83 c4 10             	add    esp,0x10
c000f814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f818:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f823:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f82d:	90                   	nop
c000f82e:	83 c4 0c             	add    esp,0xc
c000f831:	c3                   	ret    

c000f832 <CPU::displayFeatures()>:
c000f832:	c3                   	ret    
c000f833:	90                   	nop

c000f834 <CPU::detectFeatures()>:
c000f834:	55                   	push   ebp
c000f835:	57                   	push   edi
c000f836:	56                   	push   esi
c000f837:	53                   	push   ebx
c000f838:	83 ec 30             	sub    esp,0x30
c000f83b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f83f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f849:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f850:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f856:	6a 0d                	push   0xd
c000f858:	6a 00                	push   0x0
c000f85a:	55                   	push   ebp
c000f85b:	e8 90 0c ff ff       	call   c00004f0 <memset>
c000f860:	83 c4 10             	add    esp,0x10
c000f863:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000f868:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f86f:	0f 84 d5 05 00 00    	je     c000fe4a <CPU::detectFeatures()+0x616>
c000f875:	83 ec 0c             	sub    esp,0xc
c000f878:	89 ef                	mov    edi,ebp
c000f87a:	6a 10                	push   0x10
c000f87c:	e8 6b fe ff ff       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c000f881:	83 e0 01             	and    eax,0x1
c000f884:	8d 14 00             	lea    edx,[eax+eax*1]
c000f887:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f88d:	83 e0 fd             	and    eax,0xfffffffd
c000f890:	09 d0                	or     eax,edx
c000f892:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f898:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f89f:	e8 48 fe ff ff       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c000f8a4:	83 e0 01             	and    eax,0x1
c000f8a7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8ae:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8b4:	83 e0 fb             	and    eax,0xfffffffb
c000f8b7:	09 d0                	or     eax,edx
c000f8b9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8bf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8c6:	e8 21 fe ff ff       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c000f8cb:	83 e0 01             	and    eax,0x1
c000f8ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8d5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8db:	83 e0 f7             	and    eax,0xfffffff7
c000f8de:	09 d0                	or     eax,edx
c000f8e0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8e6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8ed:	e8 fa fd ff ff       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c000f8f2:	83 e0 01             	and    eax,0x1
c000f8f5:	c1 e0 04             	shl    eax,0x4
c000f8f8:	88 c2                	mov    dl,al
c000f8fa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f900:	83 e0 ef             	and    eax,0xffffffef
c000f903:	09 d0                	or     eax,edx
c000f905:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f90b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f912:	e8 d5 fd ff ff       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c000f917:	83 e0 01             	and    eax,0x1
c000f91a:	c1 e0 05             	shl    eax,0x5
c000f91d:	88 c2                	mov    dl,al
c000f91f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f925:	83 e0 df             	and    eax,0xffffffdf
c000f928:	09 d0                	or     eax,edx
c000f92a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f930:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f937:	e8 b0 fd ff ff       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c000f93c:	83 e0 01             	and    eax,0x1
c000f93f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f942:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f948:	83 e0 fd             	and    eax,0xfffffffd
c000f94b:	09 d0                	or     eax,edx
c000f94d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f953:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f95a:	e8 8d fd ff ff       	call   c000f6ec <CPU::cpuidCheckEDX(unsigned int)>
c000f95f:	83 e0 01             	and    eax,0x1
c000f962:	c1 e0 06             	shl    eax,0x6
c000f965:	88 c2                	mov    dl,al
c000f967:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f96d:	83 e0 bf             	and    eax,0xffffffbf
c000f970:	09 d0                	or     eax,edx
c000f972:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f978:	58                   	pop    eax
c000f979:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f97d:	50                   	push   eax
c000f97e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f982:	50                   	push   eax
c000f983:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f987:	56                   	push   esi
c000f988:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f98c:	50                   	push   eax
c000f98d:	6a 00                	push   0x0
c000f98f:	e8 d4 fc ff ff       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f994:	b8 04 00 00 00       	mov    eax,0x4
c000f999:	89 c1                	mov    ecx,eax
c000f99b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f99d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9a3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9a7:	89 c1                	mov    ecx,eax
c000f9a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9ab:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9b1:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9b5:	89 c1                	mov    ecx,eax
c000f9b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9b9:	83 c4 18             	add    esp,0x18
c000f9bc:	68 88 e5 01 c0       	push   0xc001e588
c000f9c1:	55                   	push   ebp
c000f9c2:	e8 39 0d ff ff       	call   c0000700 <strcmp>
c000f9c7:	83 c4 10             	add    esp,0x10
c000f9ca:	85 c0                	test   eax,eax
c000f9cc:	75 0f                	jne    c000f9dd <CPU::detectFeatures()+0x1a9>
c000f9ce:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9d8:	e9 22 02 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000f9dd:	50                   	push   eax
c000f9de:	50                   	push   eax
c000f9df:	68 95 e5 01 c0       	push   0xc001e595
c000f9e4:	55                   	push   ebp
c000f9e5:	e8 16 0d ff ff       	call   c0000700 <strcmp>
c000f9ea:	83 c4 10             	add    esp,0x10
c000f9ed:	85 c0                	test   eax,eax
c000f9ef:	74 dd                	je     c000f9ce <CPU::detectFeatures()+0x19a>
c000f9f1:	50                   	push   eax
c000f9f2:	50                   	push   eax
c000f9f3:	68 a2 e5 01 c0       	push   0xc001e5a2
c000f9f8:	55                   	push   ebp
c000f9f9:	e8 02 0d ff ff       	call   c0000700 <strcmp>
c000f9fe:	83 c4 10             	add    esp,0x10
c000fa01:	85 c0                	test   eax,eax
c000fa03:	74 2a                	je     c000fa2f <CPU::detectFeatures()+0x1fb>
c000fa05:	50                   	push   eax
c000fa06:	50                   	push   eax
c000fa07:	68 af e5 01 c0       	push   0xc001e5af
c000fa0c:	55                   	push   ebp
c000fa0d:	e8 ee 0c ff ff       	call   c0000700 <strcmp>
c000fa12:	83 c4 10             	add    esp,0x10
c000fa15:	85 c0                	test   eax,eax
c000fa17:	74 16                	je     c000fa2f <CPU::detectFeatures()+0x1fb>
c000fa19:	50                   	push   eax
c000fa1a:	50                   	push   eax
c000fa1b:	68 bc e5 01 c0       	push   0xc001e5bc
c000fa20:	55                   	push   ebp
c000fa21:	e8 da 0c ff ff       	call   c0000700 <strcmp>
c000fa26:	83 c4 10             	add    esp,0x10
c000fa29:	85 c0                	test   eax,eax
c000fa2b:	74 48                	je     c000fa75 <CPU::detectFeatures()+0x241>
c000fa2d:	eb 0f                	jmp    c000fa3e <CPU::detectFeatures()+0x20a>
c000fa2f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa39:	e9 c1 01 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fa3e:	50                   	push   eax
c000fa3f:	50                   	push   eax
c000fa40:	68 c9 e5 01 c0       	push   0xc001e5c9
c000fa45:	55                   	push   ebp
c000fa46:	e8 b5 0c ff ff       	call   c0000700 <strcmp>
c000fa4b:	83 c4 10             	add    esp,0x10
c000fa4e:	85 c0                	test   eax,eax
c000fa50:	74 23                	je     c000fa75 <CPU::detectFeatures()+0x241>
c000fa52:	57                   	push   edi
c000fa53:	57                   	push   edi
c000fa54:	68 d6 e5 01 c0       	push   0xc001e5d6
c000fa59:	55                   	push   ebp
c000fa5a:	e8 a1 0c ff ff       	call   c0000700 <strcmp>
c000fa5f:	83 c4 10             	add    esp,0x10
c000fa62:	85 c0                	test   eax,eax
c000fa64:	75 1e                	jne    c000fa84 <CPU::detectFeatures()+0x250>
c000fa66:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa70:	e9 8a 01 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fa75:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa7f:	e9 7b 01 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fa84:	56                   	push   esi
c000fa85:	56                   	push   esi
c000fa86:	68 e3 e5 01 c0       	push   0xc001e5e3
c000fa8b:	55                   	push   ebp
c000fa8c:	e8 6f 0c ff ff       	call   c0000700 <strcmp>
c000fa91:	83 c4 10             	add    esp,0x10
c000fa94:	85 c0                	test   eax,eax
c000fa96:	75 0f                	jne    c000faa7 <CPU::detectFeatures()+0x273>
c000fa98:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000faa2:	e9 58 01 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000faa7:	51                   	push   ecx
c000faa8:	51                   	push   ecx
c000faa9:	68 a2 e5 01 c0       	push   0xc001e5a2
c000faae:	55                   	push   ebp
c000faaf:	e8 4c 0c ff ff       	call   c0000700 <strcmp>
c000fab4:	83 c4 10             	add    esp,0x10
c000fab7:	85 c0                	test   eax,eax
c000fab9:	75 0f                	jne    c000faca <CPU::detectFeatures()+0x296>
c000fabb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fac5:	e9 35 01 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000faca:	52                   	push   edx
c000facb:	52                   	push   edx
c000facc:	68 f0 e5 01 c0       	push   0xc001e5f0
c000fad1:	55                   	push   ebp
c000fad2:	e8 29 0c ff ff       	call   c0000700 <strcmp>
c000fad7:	83 c4 10             	add    esp,0x10
c000fada:	85 c0                	test   eax,eax
c000fadc:	75 0f                	jne    c000faed <CPU::detectFeatures()+0x2b9>
c000fade:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fae8:	e9 12 01 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000faed:	50                   	push   eax
c000faee:	50                   	push   eax
c000faef:	68 fd e5 01 c0       	push   0xc001e5fd
c000faf4:	55                   	push   ebp
c000faf5:	e8 06 0c ff ff       	call   c0000700 <strcmp>
c000fafa:	83 c4 10             	add    esp,0x10
c000fafd:	85 c0                	test   eax,eax
c000faff:	75 0f                	jne    c000fb10 <CPU::detectFeatures()+0x2dc>
c000fb01:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb0b:	e9 ef 00 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fb10:	50                   	push   eax
c000fb11:	50                   	push   eax
c000fb12:	68 0a e6 01 c0       	push   0xc001e60a
c000fb17:	55                   	push   ebp
c000fb18:	e8 e3 0b ff ff       	call   c0000700 <strcmp>
c000fb1d:	83 c4 10             	add    esp,0x10
c000fb20:	85 c0                	test   eax,eax
c000fb22:	75 0f                	jne    c000fb33 <CPU::detectFeatures()+0x2ff>
c000fb24:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb2e:	e9 cc 00 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fb33:	50                   	push   eax
c000fb34:	50                   	push   eax
c000fb35:	68 17 e6 01 c0       	push   0xc001e617
c000fb3a:	55                   	push   ebp
c000fb3b:	e8 c0 0b ff ff       	call   c0000700 <strcmp>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	85 c0                	test   eax,eax
c000fb45:	75 0f                	jne    c000fb56 <CPU::detectFeatures()+0x322>
c000fb47:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb51:	e9 a9 00 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fb56:	50                   	push   eax
c000fb57:	50                   	push   eax
c000fb58:	68 24 e6 01 c0       	push   0xc001e624
c000fb5d:	55                   	push   ebp
c000fb5e:	e8 9d 0b ff ff       	call   c0000700 <strcmp>
c000fb63:	83 c4 10             	add    esp,0x10
c000fb66:	85 c0                	test   eax,eax
c000fb68:	75 0f                	jne    c000fb79 <CPU::detectFeatures()+0x345>
c000fb6a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb74:	e9 86 00 00 00       	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fb79:	50                   	push   eax
c000fb7a:	50                   	push   eax
c000fb7b:	68 31 e6 01 c0       	push   0xc001e631
c000fb80:	55                   	push   ebp
c000fb81:	e8 7a 0b ff ff       	call   c0000700 <strcmp>
c000fb86:	83 c4 10             	add    esp,0x10
c000fb89:	85 c0                	test   eax,eax
c000fb8b:	75 0c                	jne    c000fb99 <CPU::detectFeatures()+0x365>
c000fb8d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb97:	eb 66                	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fb99:	50                   	push   eax
c000fb9a:	50                   	push   eax
c000fb9b:	68 3e e6 01 c0       	push   0xc001e63e
c000fba0:	55                   	push   ebp
c000fba1:	e8 5a 0b ff ff       	call   c0000700 <strcmp>
c000fba6:	83 c4 10             	add    esp,0x10
c000fba9:	85 c0                	test   eax,eax
c000fbab:	75 0c                	jne    c000fbb9 <CPU::detectFeatures()+0x385>
c000fbad:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbb7:	eb 46                	jmp    c000fbff <CPU::detectFeatures()+0x3cb>
c000fbb9:	57                   	push   edi
c000fbba:	57                   	push   edi
c000fbbb:	68 4b e6 01 c0       	push   0xc001e64b
c000fbc0:	55                   	push   ebp
c000fbc1:	e8 3a 0b ff ff       	call   c0000700 <strcmp>
c000fbc6:	83 c4 10             	add    esp,0x10
c000fbc9:	85 c0                	test   eax,eax
c000fbcb:	74 e0                	je     c000fbad <CPU::detectFeatures()+0x379>
c000fbcd:	56                   	push   esi
c000fbce:	56                   	push   esi
c000fbcf:	68 58 e6 01 c0       	push   0xc001e658
c000fbd4:	55                   	push   ebp
c000fbd5:	e8 26 0b ff ff       	call   c0000700 <strcmp>
c000fbda:	83 c4 10             	add    esp,0x10
c000fbdd:	85 c0                	test   eax,eax
c000fbdf:	74 cc                	je     c000fbad <CPU::detectFeatures()+0x379>
c000fbe1:	51                   	push   ecx
c000fbe2:	51                   	push   ecx
c000fbe3:	68 65 e6 01 c0       	push   0xc001e665
c000fbe8:	55                   	push   ebp
c000fbe9:	e8 12 0b ff ff       	call   c0000700 <strcmp>
c000fbee:	83 c4 10             	add    esp,0x10
c000fbf1:	85 c0                	test   eax,eax
c000fbf3:	74 b8                	je     c000fbad <CPU::detectFeatures()+0x379>
c000fbf5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbff:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc04:	0f 86 be 00 00 00    	jbe    c000fcc8 <CPU::detectFeatures()+0x494>
c000fc0a:	83 ec 0c             	sub    esp,0xc
c000fc0d:	68 80 00 00 00       	push   0x80
c000fc12:	e8 31 fb ff ff       	call   c000f748 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc17:	83 e0 01             	and    eax,0x1
c000fc1a:	c1 e0 06             	shl    eax,0x6
c000fc1d:	88 c2                	mov    dl,al
c000fc1f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc25:	83 e0 bf             	and    eax,0xffffffbf
c000fc28:	09 d0                	or     eax,edx
c000fc2a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc30:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc37:	e8 0c fb ff ff       	call   c000f748 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc3c:	83 e0 01             	and    eax,0x1
c000fc3f:	c1 e0 04             	shl    eax,0x4
c000fc42:	88 c2                	mov    dl,al
c000fc44:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc4a:	83 e0 ef             	and    eax,0xffffffef
c000fc4d:	09 d0                	or     eax,edx
c000fc4f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc55:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc5c:	e8 e7 fa ff ff       	call   c000f748 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc61:	c1 e0 07             	shl    eax,0x7
c000fc64:	88 c2                	mov    dl,al
c000fc66:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc6c:	83 e0 7f             	and    eax,0x7f
c000fc6f:	09 d0                	or     eax,edx
c000fc71:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc77:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc7e:	e8 f3 fa ff ff       	call   c000f776 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc83:	83 e0 01             	and    eax,0x1
c000fc86:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc8d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc93:	83 e0 f7             	and    eax,0xfffffff7
c000fc96:	09 d0                	or     eax,edx
c000fc98:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc9e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fca5:	e8 cc fa ff ff       	call   c000f776 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcaa:	83 c4 10             	add    esp,0x10
c000fcad:	83 e0 01             	and    eax,0x1
c000fcb0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcb7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fcbd:	83 e0 fb             	and    eax,0xfffffffb
c000fcc0:	09 d0                	or     eax,edx
c000fcc2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fccf:	50                   	push   eax
c000fcd0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcd4:	50                   	push   eax
c000fcd5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcd9:	56                   	push   esi
c000fcda:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcde:	50                   	push   eax
c000fcdf:	6a 01                	push   0x1
c000fce1:	e8 82 f9 ff ff       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fce6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fcea:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fcf0:	88 ca                	mov    dl,cl
c000fcf2:	83 e0 f0             	and    eax,0xfffffff0
c000fcf5:	83 e2 0f             	and    edx,0xf
c000fcf8:	09 d0                	or     eax,edx
c000fcfa:	88 ca                	mov    dl,cl
c000fcfc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fd02:	c0 ea 04             	shr    dl,0x4
c000fd05:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fd09:	0f b6 c2             	movzx  eax,dl
c000fd0c:	83 c4 20             	add    esp,0x20
c000fd0f:	c1 e0 06             	shl    eax,0x6
c000fd12:	89 c7                	mov    edi,eax
c000fd14:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fd1a:	66 25 3f c0          	and    ax,0xc03f
c000fd1e:	09 f8                	or     eax,edi
c000fd20:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fd27:	89 c8                	mov    eax,ecx
c000fd29:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fd30:	c1 e8 08             	shr    eax,0x8
c000fd33:	83 e5 3f             	and    ebp,0x3f
c000fd36:	83 e0 0f             	and    eax,0xf
c000fd39:	89 c7                	mov    edi,eax
c000fd3b:	c1 e7 06             	shl    edi,0x6
c000fd3e:	09 ef                	or     edi,ebp
c000fd40:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fd47:	89 fa                	mov    edx,edi
c000fd49:	83 e5 c0             	and    ebp,0xffffffc0
c000fd4c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd52:	88 c2                	mov    dl,al
c000fd54:	c0 ea 02             	shr    dl,0x2
c000fd57:	89 d7                	mov    edi,edx
c000fd59:	09 ef                	or     edi,ebp
c000fd5b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd61:	89 fa                	mov    edx,edi
c000fd63:	83 e5 cf             	and    ebp,0xffffffcf
c000fd66:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fd6c:	89 cf                	mov    edi,ecx
c000fd6e:	c1 ef 0c             	shr    edi,0xc
c000fd71:	83 e7 03             	and    edi,0x3
c000fd74:	c1 e7 04             	shl    edi,0x4
c000fd77:	09 ef                	or     edi,ebp
c000fd79:	3c 06                	cmp    al,0x6
c000fd7b:	89 fa                	mov    edx,edi
c000fd7d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd83:	74 04                	je     c000fd89 <CPU::detectFeatures()+0x555>
c000fd85:	3c 0f                	cmp    al,0xf
c000fd87:	75 5c                	jne    c000fde5 <CPU::detectFeatures()+0x5b1>
c000fd89:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fd8d:	89 cf                	mov    edi,ecx
c000fd8f:	c1 ef 10             	shr    edi,0x10
c000fd92:	c1 e7 04             	shl    edi,0x4
c000fd95:	09 fa                	or     edx,edi
c000fd97:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fd9d:	0f b6 d2             	movzx  edx,dl
c000fda0:	66 81 e7 3f c0       	and    di,0xc03f
c000fda5:	c1 e2 06             	shl    edx,0x6
c000fda8:	09 fa                	or     edx,edi
c000fdaa:	3c 0f                	cmp    al,0xf
c000fdac:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fdb3:	75 30                	jne    c000fde5 <CPU::detectFeatures()+0x5b1>
c000fdb5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fdbb:	c1 e9 14             	shr    ecx,0x14
c000fdbe:	83 e0 3f             	and    eax,0x3f
c000fdc1:	83 c1 0f             	add    ecx,0xf
c000fdc4:	88 ca                	mov    dl,cl
c000fdc6:	c0 e9 02             	shr    cl,0x2
c000fdc9:	c1 e2 06             	shl    edx,0x6
c000fdcc:	09 d0                	or     eax,edx
c000fdce:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fdd4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fdda:	83 e0 c0             	and    eax,0xffffffc0
c000fddd:	09 c1                	or     ecx,eax
c000fddf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fde5:	83 ec 0c             	sub    esp,0xc
c000fde8:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fdef:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fdf3:	50                   	push   eax
c000fdf4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fdf8:	55                   	push   ebp
c000fdf9:	56                   	push   esi
c000fdfa:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fdfe:	57                   	push   edi
c000fdff:	68 00 00 00 80       	push   0x80000000
c000fe04:	e8 5f f8 ff ff       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe09:	83 c4 20             	add    esp,0x20
c000fe0c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe14:	76 22                	jbe    c000fe38 <CPU::detectFeatures()+0x604>
c000fe16:	83 ec 0c             	sub    esp,0xc
c000fe19:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe1d:	50                   	push   eax
c000fe1e:	55                   	push   ebp
c000fe1f:	56                   	push   esi
c000fe20:	57                   	push   edi
c000fe21:	68 01 00 00 80       	push   0x80000001
c000fe26:	e8 3d f8 ff ff       	call   c000f668 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe2b:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe35:	83 c4 20             	add    esp,0x20
c000fe38:	52                   	push   edx
c000fe39:	52                   	push   edx
c000fe3a:	68 71 e6 01 c0       	push   0xc001e671
c000fe3f:	53                   	push   ebx
c000fe40:	e8 6d c3 ff ff       	call   c000c1b2 <Device::setName(char const*)>
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	eb 67                	jmp    c000feb1 <CPU::detectFeatures()+0x67d>
c000fe4a:	50                   	push   eax
c000fe4b:	50                   	push   eax
c000fe4c:	68 d6 e5 01 c0       	push   0xc001e5d6
c000fe51:	55                   	push   ebp
c000fe52:	e8 c9 07 ff ff       	call   c0000620 <strcpy>
c000fe57:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe61:	e8 7d 03 ff ff       	call   c00001e3 <is486>
c000fe66:	83 c4 10             	add    esp,0x10
c000fe69:	85 c0                	test   eax,eax
c000fe6b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe71:	74 1d                	je     c000fe90 <CPU::detectFeatures()+0x65c>
c000fe73:	83 c8 07             	or     eax,0x7
c000fe76:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe7c:	0f 20 c0             	mov    eax,cr0
c000fe7f:	83 e0 14             	and    eax,0x14
c000fe82:	83 f8 04             	cmp    eax,0x4
c000fe85:	75 0e                	jne    c000fe95 <CPU::detectFeatures()+0x661>
c000fe87:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fe8e:	eb 21                	jmp    c000feb1 <CPU::detectFeatures()+0x67d>
c000fe90:	83 e0 f8             	and    eax,0xfffffff8
c000fe93:	eb e1                	jmp    c000fe76 <CPU::detectFeatures()+0x642>
c000fe95:	e8 24 03 ff ff       	call   c00001be <hasLegacyFPU>
c000fe9a:	83 e0 01             	and    eax,0x1
c000fe9d:	8d 14 00             	lea    edx,[eax+eax*1]
c000fea0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fea6:	83 e0 fd             	and    eax,0xfffffffd
c000fea9:	09 d0                	or     eax,edx
c000feab:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000feb1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000feb8:	74 0e                	je     c000fec8 <CPU::detectFeatures()+0x694>
c000feba:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000febf:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fec6:	eb 20                	jmp    c000fee8 <CPU::detectFeatures()+0x6b4>
c000fec8:	e8 f1 02 ff ff       	call   c00001be <hasLegacyFPU>
c000fecd:	83 e0 01             	and    eax,0x1
c000fed0:	8d 14 00             	lea    edx,[eax+eax*1]
c000fed3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fed9:	83 e0 fd             	and    eax,0xfffffffd
c000fedc:	09 d0                	or     eax,edx
c000fede:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fee4:	a8 02                	test   al,0x2
c000fee6:	75 d2                	jne    c000feba <CPU::detectFeatures()+0x686>
c000fee8:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000feef:	83 c4 2c             	add    esp,0x2c
c000fef2:	5b                   	pop    ebx
c000fef3:	5e                   	pop    esi
c000fef4:	5f                   	pop    edi
c000fef5:	5d                   	pop    ebp
c000fef6:	c3                   	ret    
c000fef7:	90                   	nop

c000fef8 <CPU::setupSMEP()>:
c000fef8:	0f 20 e0             	mov    eax,cr4
c000fefb:	0d 00 00 10 00       	or     eax,0x100000
c000ff00:	0f 22 e0             	mov    cr4,eax
c000ff03:	c3                   	ret    

c000ff04 <CPU::setupUMIP()>:
c000ff04:	0f 20 e0             	mov    eax,cr4
c000ff07:	80 cc 08             	or     ah,0x8
c000ff0a:	0f 22 e0             	mov    cr4,eax
c000ff0d:	c3                   	ret    

c000ff0e <CPU::setupTSC()>:
c000ff0e:	0f 20 e0             	mov    eax,cr4
c000ff11:	83 c8 04             	or     eax,0x4
c000ff14:	0f 22 e0             	mov    cr4,eax
c000ff17:	c3                   	ret    

c000ff18 <CPU::setupLargePages()>:
c000ff18:	0f 20 e0             	mov    eax,cr4
c000ff1b:	83 c8 10             	or     eax,0x10
c000ff1e:	0f 22 e0             	mov    cr4,eax
c000ff21:	c3                   	ret    

c000ff22 <CPU::setupPAT()>:
c000ff22:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000ff27:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff2e:	74 2c                	je     c000ff5c <CPU::setupPAT()+0x3a>
c000ff30:	53                   	push   ebx
c000ff31:	83 ec 10             	sub    esp,0x10
c000ff34:	68 77 02 00 00       	push   0x277
c000ff39:	50                   	push   eax
c000ff3a:	e8 57 75 ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c000ff3f:	83 e2 f8             	and    edx,0xfffffff8
c000ff42:	83 ca 01             	or     edx,0x1
c000ff45:	52                   	push   edx
c000ff46:	50                   	push   eax
c000ff47:	68 77 02 00 00       	push   0x277
c000ff4c:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000ff52:	e8 6b 75 ff ff       	call   c00074c2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff57:	83 c4 28             	add    esp,0x28
c000ff5a:	5b                   	pop    ebx
c000ff5b:	c3                   	ret    
c000ff5c:	c3                   	ret    
c000ff5d:	90                   	nop

c000ff5e <CPU::setupMTRR()>:
c000ff5e:	c3                   	ret    
c000ff5f:	90                   	nop

c000ff60 <CPU::setupGlobalPages()>:
c000ff60:	0f 20 e0             	mov    eax,cr4
c000ff63:	0c 80                	or     al,0x80
c000ff65:	0f 22 e0             	mov    cr4,eax
c000ff68:	c3                   	ret    
c000ff69:	90                   	nop

c000ff6a <CPU::allowUsermodeDataAccess()>:
c000ff6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff6e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff75:	74 03                	je     c000ff7a <CPU::allowUsermodeDataAccess()+0x10>
c000ff77:	0f 01 cb             	stac   
c000ff7a:	c3                   	ret    
c000ff7b:	90                   	nop

c000ff7c <CPU::prohibitUsermodeDataAccess()>:
c000ff7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff80:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff87:	74 03                	je     c000ff8c <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff89:	0f 01 ca             	clac   
c000ff8c:	c3                   	ret    
c000ff8d:	90                   	nop

c000ff8e <CPU::setupSMAP()>:
c000ff8e:	0f 20 e0             	mov    eax,cr4
c000ff91:	0d 00 00 20 00       	or     eax,0x200000
c000ff96:	0f 22 e0             	mov    cr4,eax
c000ff99:	eb e1                	jmp    c000ff7c <CPU::prohibitUsermodeDataAccess()>
c000ff9b:	90                   	nop

c000ff9c <CPU::setupFeatures()>:
c000ff9c:	53                   	push   ebx
c000ff9d:	83 ec 08             	sub    esp,0x8
c000ffa0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffa4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffab:	74 18                	je     c000ffc5 <CPU::setupFeatures()+0x29>
c000ffad:	83 ec 0c             	sub    esp,0xc
c000ffb0:	68 7d e6 01 c0       	push   0xc001e67d
c000ffb5:	e8 2e ac ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000ffba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffbd:	e8 42 ff ff ff       	call   c000ff04 <CPU::setupUMIP()>
c000ffc2:	83 c4 10             	add    esp,0x10
c000ffc5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffcc:	74 18                	je     c000ffe6 <CPU::setupFeatures()+0x4a>
c000ffce:	83 ec 0c             	sub    esp,0xc
c000ffd1:	68 87 e6 01 c0       	push   0xc001e687
c000ffd6:	e8 0d ac ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000ffdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffde:	e8 2b ff ff ff       	call   c000ff0e <CPU::setupTSC()>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ffed:	74 18                	je     c0010007 <CPU::setupFeatures()+0x6b>
c000ffef:	83 ec 0c             	sub    esp,0xc
c000fff2:	68 90 e6 01 c0       	push   0xc001e690
c000fff7:	e8 ec ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c000fffc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffff:	e8 14 ff ff ff       	call   c000ff18 <CPU::setupLargePages()>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001000e:	74 18                	je     c0010028 <CPU::setupFeatures()+0x8c>
c0010010:	83 ec 0c             	sub    esp,0xc
c0010013:	68 99 e6 01 c0       	push   0xc001e699
c0010018:	e8 cb ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001001d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010020:	e8 3b ff ff ff       	call   c000ff60 <CPU::setupGlobalPages()>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001002f:	74 18                	je     c0010049 <CPU::setupFeatures()+0xad>
c0010031:	83 ec 0c             	sub    esp,0xc
c0010034:	68 ab e6 01 c0       	push   0xc001e6ab
c0010039:	e8 aa ab ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001003e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010041:	e8 dc fe ff ff       	call   c000ff22 <CPU::setupPAT()>
c0010046:	83 c4 10             	add    esp,0x10
c0010049:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010050:	74 11                	je     c0010063 <CPU::setupFeatures()+0xc7>
c0010052:	c7 44 24 10 b4 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e6b4
c001005a:	83 c4 08             	add    esp,0x8
c001005d:	5b                   	pop    ebx
c001005e:	e9 85 ab ff ff       	jmp    c000abe8 <Dbg::kprintf(char const*, ...)>
c0010063:	83 c4 08             	add    esp,0x8
c0010066:	5b                   	pop    ebx
c0010067:	c3                   	ret    

c0010068 <CPU::open(int, int, void*)>:
c0010068:	57                   	push   edi
c0010069:	56                   	push   esi
c001006a:	53                   	push   ebx
c001006b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001006f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010073:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010079:	83 ec 0c             	sub    esp,0xc
c001007c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010082:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0010088:	50                   	push   eax
c0010089:	e8 f2 76 ff ff       	call   c0007780 <GDT::setup()>
c001008e:	83 c4 0c             	add    esp,0xc
c0010091:	6a 00                	push   0x0
c0010093:	68 ef be ad de       	push   0xdeadbeef
c0010098:	57                   	push   edi
c0010099:	e8 7e 92 ff ff       	call   c000931c <TSS::setup(unsigned long, unsigned long)>
c001009e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100a1:	e8 56 92 ff ff       	call   c00092fc <TSS::flush()>
c00100a6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00100af:	e8 16 79 ff ff       	call   c00079ca <IDT::setup()>
c00100b4:	b8 00 04 00 00       	mov    eax,0x400
c00100b9:	0f 23 f8             	mov    db7,eax
c00100bc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100c6:	e8 5b 81 ff ff       	call   c0008226 <Phys::allocatePage()>
c00100cb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100d1:	89 30                	mov    DWORD PTR [eax],esi
c00100d3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100d9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100dc:	58                   	pop    eax
c00100dd:	5a                   	pop    edx
c00100de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100e8:	e8 19 a2 ff ff       	call   c000a306 <VAS::setCPUSpecific(unsigned long)>
c00100ed:	c7 04 24 be e6 01 c0 	mov    DWORD PTR [esp],0xc001e6be
c00100f4:	e8 ba 7d ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c00100f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100fc:	e8 33 f7 ff ff       	call   c000f834 <CPU::detectFeatures()>
c0010101:	c7 04 24 e1 e6 01 c0 	mov    DWORD PTR [esp],0xc001e6e1
c0010108:	e8 a6 7d ff ff       	call   c0007eb3 <Krnl::setBootMessage(char const*)>
c001010d:	e8 b8 56 00 00       	call   c00157ca <HalInitialise()>
c0010112:	a1 50 09 02 c0       	mov    eax,ds:0xc0020950
c0010117:	83 e0 10             	and    eax,0x10
c001011a:	83 f8 01             	cmp    eax,0x1
c001011d:	19 c0                	sbb    eax,eax
c001011f:	83 e0 46             	and    eax,0x46
c0010122:	83 c0 1e             	add    eax,0x1e
c0010125:	89 04 24             	mov    DWORD PTR [esp],eax
c0010128:	e8 54 d7 ff ff       	call   c000d881 <setupTimer(int)>
c001012d:	83 c4 10             	add    esp,0x10
c0010130:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010136:	f6 05 50 09 02 c0 20 	test   BYTE PTR ds:0xc0020950,0x20
c001013d:	74 0c                	je     c001014b <CPU::open(int, int, void*)+0xe3>
c001013f:	83 ec 0c             	sub    esp,0xc
c0010142:	53                   	push   ebx
c0010143:	e8 54 fe ff ff       	call   c000ff9c <CPU::setupFeatures()>
c0010148:	83 c4 10             	add    esp,0x10
c001014b:	5b                   	pop    ebx
c001014c:	31 c0                	xor    eax,eax
c001014e:	5e                   	pop    esi
c001014f:	5f                   	pop    edi
c0010150:	c3                   	ret    
c0010151:	90                   	nop

c0010152 <EnvVarContainer::getEnv(char const*)>:
c0010152:	57                   	push   edi
c0010153:	56                   	push   esi
c0010154:	53                   	push   ebx
c0010155:	31 db                	xor    ebx,ebx
c0010157:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001015b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001015d:	7e 2b                	jle    c001018a <EnvVarContainer::getEnv(char const*)+0x38>
c001015f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010166:	50                   	push   eax
c0010167:	50                   	push   eax
c0010168:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001016b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001016e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010172:	e8 89 05 ff ff       	call   c0000700 <strcmp>
c0010177:	83 c4 10             	add    esp,0x10
c001017a:	85 c0                	test   eax,eax
c001017c:	75 09                	jne    c0010187 <EnvVarContainer::getEnv(char const*)+0x35>
c001017e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010181:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010185:	eb 05                	jmp    c001018c <EnvVarContainer::getEnv(char const*)+0x3a>
c0010187:	43                   	inc    ebx
c0010188:	eb d1                	jmp    c001015b <EnvVarContainer::getEnv(char const*)+0x9>
c001018a:	31 c0                	xor    eax,eax
c001018c:	5b                   	pop    ebx
c001018d:	5e                   	pop    esi
c001018e:	5f                   	pop    edi
c001018f:	c3                   	ret    

c0010190 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010190:	55                   	push   ebp
c0010191:	57                   	push   edi
c0010192:	56                   	push   esi
c0010193:	53                   	push   ebx
c0010194:	83 ec 28             	sub    esp,0x28
c0010197:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001019b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001019f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00101a3:	56                   	push   esi
c00101a4:	e8 b7 03 ff ff       	call   c0000560 <strlen>
c00101a9:	40                   	inc    eax
c00101aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00101ad:	e8 a7 7c ff ff       	call   c0007e59 <malloc>
c00101b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101b9:	e8 a2 03 ff ff       	call   c0000560 <strlen>
c00101be:	40                   	inc    eax
c00101bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00101c2:	e8 92 7c ff ff       	call   c0007e59 <malloc>
c00101c7:	89 34 24             	mov    DWORD PTR [esp],esi
c00101ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101ce:	e8 8d 03 ff ff       	call   c0000560 <strlen>
c00101d3:	83 c4 0c             	add    esp,0xc
c00101d6:	40                   	inc    eax
c00101d7:	50                   	push   eax
c00101d8:	6a 00                	push   0x0
c00101da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00101de:	e8 0d 03 ff ff       	call   c00004f0 <memset>
c00101e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00101e6:	e8 75 03 ff ff       	call   c0000560 <strlen>
c00101eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00101ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00101f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101f7:	89 de                	mov    esi,ebx
c00101f9:	e8 62 03 ff ff       	call   c0000560 <strlen>
c00101fe:	83 c4 0c             	add    esp,0xc
c0010201:	40                   	inc    eax
c0010202:	50                   	push   eax
c0010203:	6a 00                	push   0x0
c0010205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010209:	e8 e2 02 ff ff       	call   c00004f0 <memset>
c001020e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010211:	e8 4a 03 ff ff       	call   c0000560 <strlen>
c0010216:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001021a:	8d 48 01             	lea    ecx,[eax+0x1]
c001021d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001021f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010222:	40                   	inc    eax
c0010223:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010226:	c1 e0 03             	shl    eax,0x3
c0010229:	5a                   	pop    edx
c001022a:	59                   	pop    ecx
c001022b:	50                   	push   eax
c001022c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001022f:	e8 11 7c ff ff       	call   c0007e45 <realloc>
c0010234:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010238:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001023b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001023e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010242:	b9 08 00 00 00       	mov    ecx,0x8
c0010247:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010249:	83 c4 2c             	add    esp,0x2c
c001024c:	5b                   	pop    ebx
c001024d:	5e                   	pop    esi
c001024e:	5f                   	pop    edi
c001024f:	5d                   	pop    ebp
c0010250:	c3                   	ret    
c0010251:	90                   	nop

c0010252 <EnvVarContainer::deleteEnv(char const*)>:
c0010252:	c3                   	ret    
c0010253:	90                   	nop

c0010254 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010254:	55                   	push   ebp
c0010255:	57                   	push   edi
c0010256:	56                   	push   esi
c0010257:	53                   	push   ebx
c0010258:	81 ec 38 01 00 00    	sub    esp,0x138
c001025e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010265:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001026c:	68 14 01 00 00       	push   0x114
c0010271:	e8 e3 7b ff ff       	call   c0007e59 <malloc>
c0010276:	83 c4 0c             	add    esp,0xc
c0010279:	89 c3                	mov    ebx,eax
c001027b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001027e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010285:	50                   	push   eax
c0010286:	e8 d3 ae ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001028b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001028e:	e8 f9 b1 ff ff       	call   c000b48c <File::exists()>
c0010293:	83 c4 10             	add    esp,0x10
c0010296:	84 c0                	test   al,al
c0010298:	75 31                	jne    c00102cb <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001029a:	50                   	push   eax
c001029b:	50                   	push   eax
c001029c:	6a 12                	push   0x12
c001029e:	53                   	push   ebx
c001029f:	e8 7a af ff ff       	call   c000b21e <File::open(FileOpenMode)>
c00102a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102a6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00102a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00102ac:	e8 af 02 ff ff       	call   c0000560 <strlen>
c00102b1:	5a                   	pop    edx
c00102b2:	31 d2                	xor    edx,edx
c00102b4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102b8:	51                   	push   ecx
c00102b9:	56                   	push   esi
c00102ba:	52                   	push   edx
c00102bb:	50                   	push   eax
c00102bc:	53                   	push   ebx
c00102bd:	ff d7                	call   edi
c00102bf:	83 c4 14             	add    esp,0x14
c00102c2:	53                   	push   ebx
c00102c3:	e8 b4 af ff ff       	call   c000b27c <File::close()>
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	56                   	push   esi
c00102cc:	31 f6                	xor    esi,esi
c00102ce:	68 00 01 00 00       	push   0x100
c00102d3:	6a 00                	push   0x0
c00102d5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00102d9:	50                   	push   eax
c00102da:	e8 11 02 ff ff       	call   c00004f0 <memset>
c00102df:	5f                   	pop    edi
c00102e0:	58                   	pop    eax
c00102e1:	6a 01                	push   0x1
c00102e3:	53                   	push   ebx
c00102e4:	e8 35 af ff ff       	call   c000b21e <File::open(FileOpenMode)>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00102f4:	83 ec 0c             	sub    esp,0xc
c00102f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102f9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102fd:	51                   	push   ecx
c00102fe:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010302:	52                   	push   edx
c0010303:	6a 00                	push   0x0
c0010305:	6a 01                	push   0x1
c0010307:	53                   	push   ebx
c0010308:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001030b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001030f:	83 c4 20             	add    esp,0x20
c0010312:	3c 0d                	cmp    al,0xd
c0010314:	0f 84 09 01 00 00    	je     c0010423 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001031a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001031f:	0f 84 ef 00 00 00    	je     c0010414 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010325:	3c 0a                	cmp    al,0xa
c0010327:	74 13                	je     c001033c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010329:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001032e:	74 0c                	je     c001033c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010330:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010336:	0f 8e d8 00 00 00    	jle    c0010414 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001033c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010340:	83 ec 0c             	sub    esp,0xc
c0010343:	8d 78 01             	lea    edi,[eax+0x1]
c0010346:	57                   	push   edi
c0010347:	e8 0d 7b ff ff       	call   c0007e59 <malloc>
c001034c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010350:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010354:	8d 56 04             	lea    edx,[esi+0x4]
c0010357:	89 14 24             	mov    DWORD PTR [esp],edx
c001035a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001035e:	e8 f6 7a ff ff       	call   c0007e59 <malloc>
c0010363:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010367:	83 c4 0c             	add    esp,0xc
c001036a:	57                   	push   edi
c001036b:	6a 00                	push   0x0
c001036d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010371:	e8 7a 01 ff ff       	call   c00004f0 <memset>
c0010376:	8d 74 24 30          	lea    esi,[esp+0x30]
c001037a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001037e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010382:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010384:	83 c4 0c             	add    esp,0xc
c0010387:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001038b:	52                   	push   edx
c001038c:	6a 00                	push   0x0
c001038e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010392:	e8 59 01 ff ff       	call   c00004f0 <memset>
c0010397:	8d 74 24 30          	lea    esi,[esp+0x30]
c001039b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001039f:	89 34 24             	mov    DWORD PTR [esp],esi
c00103a2:	e8 b9 01 ff ff       	call   c0000560 <strlen>
c00103a7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00103ab:	89 c1                	mov    ecx,eax
c00103ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103b2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00103b5:	40                   	inc    eax
c00103b6:	83 c4 10             	add    esp,0x10
c00103b9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103bc:	85 d2                	test   edx,edx
c00103be:	75 0c                	jne    c00103cc <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00103c0:	83 ec 0c             	sub    esp,0xc
c00103c3:	6a 08                	push   0x8
c00103c5:	e8 8f 7a ff ff       	call   c0007e59 <malloc>
c00103ca:	eb 0c                	jmp    c00103d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00103cc:	c1 e0 03             	shl    eax,0x3
c00103cf:	51                   	push   ecx
c00103d0:	51                   	push   ecx
c00103d1:	50                   	push   eax
c00103d2:	52                   	push   edx
c00103d3:	e8 6d 7a ff ff       	call   c0007e45 <realloc>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00103de:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103e1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00103e4:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103e8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00103ec:	b9 08 00 00 00       	mov    ecx,0x8
c00103f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103f3:	31 f6                	xor    esi,esi
c00103f5:	50                   	push   eax
c00103f6:	68 00 01 00 00       	push   0x100
c00103fb:	6a 00                	push   0x0
c00103fd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010401:	50                   	push   eax
c0010402:	e8 e9 00 ff ff       	call   c00004f0 <memset>
c0010407:	83 c4 10             	add    esp,0x10
c001040a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010412:	eb 0f                	jmp    c0010423 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010414:	3c 3d                	cmp    al,0x3d
c0010416:	74 07                	je     c001041f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010418:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001041c:	46                   	inc    esi
c001041d:	eb 04                	jmp    c0010423 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001041f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010423:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010428:	0f 85 c6 fe ff ff    	jne    c00102f4 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001042e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010434:	5b                   	pop    ebx
c0010435:	5e                   	pop    esi
c0010436:	5f                   	pop    edi
c0010437:	5d                   	pop    ebp
c0010438:	c3                   	ret    
c0010439:	90                   	nop

c001043a <EnvVarContainer::__loadSystem()>:
c001043a:	83 ec 10             	sub    esp,0x10
c001043d:	68 c0 f8 01 c0       	push   0xc001f8c0
c0010442:	68 24 e7 01 c0       	push   0xc001e724
c0010447:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044b:	e8 04 fe ff ff       	call   c0010254 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010450:	83 c4 1c             	add    esp,0x1c
c0010453:	c3                   	ret    

c0010454 <EnvVarContainer::__loadUser()>:
c0010454:	c3                   	ret    
c0010455:	90                   	nop

c0010456 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010464:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010468:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001046b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001046f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010476:	90                   	nop
c0010477:	c3                   	ret    

c0010478 <EnvVarContainer::~EnvVarContainer()>:
c0010478:	83 ec 0c             	sub    esp,0xc
c001047b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010482:	85 c0                	test   eax,eax
c0010484:	74 1d                	je     c00104a3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048a:	8b 00                	mov    eax,DWORD PTR [eax]
c001048c:	85 c0                	test   eax,eax
c001048e:	74 13                	je     c00104a3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010497:	83 ec 0c             	sub    esp,0xc
c001049a:	50                   	push   eax
c001049b:	e8 c9 79 ff ff       	call   c0007e69 <free>
c00104a0:	83 c4 10             	add    esp,0x10
c00104a3:	90                   	nop
c00104a4:	83 c4 0c             	add    esp,0xc
c00104a7:	c3                   	ret    

c00104a8 <Krnl::getEnv(Process*, char const*)>:
c00104a8:	53                   	push   ebx
c00104a9:	83 ec 08             	sub    esp,0x8
c00104ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00104b4:	39 05 30 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e30,eax
c00104ba:	74 04                	je     c00104c0 <Krnl::getEnv(Process*, char const*)+0x18>
c00104bc:	85 c0                	test   eax,eax
c00104be:	75 0b                	jne    c00104cb <Krnl::getEnv(Process*, char const*)+0x23>
c00104c0:	a1 b0 33 02 c0       	mov    eax,ds:0xc00233b0
c00104c5:	85 c0                	test   eax,eax
c00104c7:	75 19                	jne    c00104e2 <Krnl::getEnv(Process*, char const*)+0x3a>
c00104c9:	eb 27                	jmp    c00104f2 <Krnl::getEnv(Process*, char const*)+0x4a>
c00104cb:	52                   	push   edx
c00104cc:	52                   	push   edx
c00104cd:	53                   	push   ebx
c00104ce:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00104d4:	e8 79 fc ff ff       	call   c0010152 <EnvVarContainer::getEnv(char const*)>
c00104d9:	83 c4 10             	add    esp,0x10
c00104dc:	85 c0                	test   eax,eax
c00104de:	75 28                	jne    c0010508 <Krnl::getEnv(Process*, char const*)+0x60>
c00104e0:	eb de                	jmp    c00104c0 <Krnl::getEnv(Process*, char const*)+0x18>
c00104e2:	52                   	push   edx
c00104e3:	52                   	push   edx
c00104e4:	53                   	push   ebx
c00104e5:	50                   	push   eax
c00104e6:	e8 67 fc ff ff       	call   c0010152 <EnvVarContainer::getEnv(char const*)>
c00104eb:	83 c4 10             	add    esp,0x10
c00104ee:	85 c0                	test   eax,eax
c00104f0:	75 16                	jne    c0010508 <Krnl::getEnv(Process*, char const*)+0x60>
c00104f2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00104f6:	a1 b4 33 02 c0       	mov    eax,ds:0xc00233b4
c00104fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104ff:	83 c4 08             	add    esp,0x8
c0010502:	5b                   	pop    ebx
c0010503:	e9 4a fc ff ff       	jmp    c0010152 <EnvVarContainer::getEnv(char const*)>
c0010508:	83 c4 08             	add    esp,0x8
c001050b:	5b                   	pop    ebx
c001050c:	c3                   	ret    

c001050d <Krnl::setEnvSystem(char const*, char const*)>:
c001050d:	83 ec 10             	sub    esp,0x10
c0010510:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010514:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010518:	ff 35 b4 33 02 c0    	push   DWORD PTR ds:0xc00233b4
c001051e:	e8 6d fc ff ff       	call   c0010190 <EnvVarContainer::setEnv(char const*, char const*)>
c0010523:	83 c4 1c             	add    esp,0x1c
c0010526:	c3                   	ret    

c0010527 <Krnl::setEnvUser(char const*, char const*)>:
c0010527:	a1 b0 33 02 c0       	mov    eax,ds:0xc00233b0
c001052c:	85 c0                	test   eax,eax
c001052e:	74 15                	je     c0010545 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010530:	83 ec 10             	sub    esp,0x10
c0010533:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010537:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001053b:	50                   	push   eax
c001053c:	e8 4f fc ff ff       	call   c0010190 <EnvVarContainer::setEnv(char const*, char const*)>
c0010541:	83 c4 1c             	add    esp,0x1c
c0010544:	c3                   	ret    
c0010545:	c3                   	ret    

c0010546 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010550:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010554:	e9 37 fc ff ff       	jmp    c0010190 <EnvVarContainer::setEnv(char const*, char const*)>

c0010559 <Krnl::deleteEnvSystem(char const*)>:
c0010559:	c3                   	ret    

c001055a <Krnl::deleteEnvUser(char const*)>:
c001055a:	c3                   	ret    

c001055b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001055b:	c3                   	ret    

c001055c <Krnl::newProcessEnv(Process*)>:
c001055c:	83 ec 28             	sub    esp,0x28
c001055f:	6a 0c                	push   0xc
c0010561:	e8 f3 78 ff ff       	call   c0007e59 <malloc>
c0010566:	5a                   	pop    edx
c0010567:	59                   	pop    ecx
c0010568:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001056c:	50                   	push   eax
c001056d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010571:	e8 e0 fe ff ff       	call   c0010456 <EnvVarContainer::EnvVarContainer(Process*)>
c0010576:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001057a:	83 c4 2c             	add    esp,0x2c
c001057d:	c3                   	ret    

c001057e <Krnl::copyProcessEnv(Process*, Process*)>:
c001057e:	57                   	push   edi
c001057f:	56                   	push   esi
c0010580:	53                   	push   ebx
c0010581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010585:	83 ec 0c             	sub    esp,0xc
c0010588:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001058e:	6a 0c                	push   0xc
c0010590:	e8 c4 78 ff ff       	call   c0007e59 <malloc>
c0010595:	89 c3                	mov    ebx,eax
c0010597:	58                   	pop    eax
c0010598:	5a                   	pop    edx
c0010599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059d:	53                   	push   ebx
c001059e:	e8 b3 fe ff ff       	call   c0010456 <EnvVarContainer::EnvVarContainer(Process*)>
c00105a3:	8b 07                	mov    eax,DWORD PTR [edi]
c00105a5:	89 03                	mov    DWORD PTR [ebx],eax
c00105a7:	c1 e0 03             	shl    eax,0x3
c00105aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00105ad:	e8 a7 78 ff ff       	call   c0007e59 <malloc>
c00105b2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00105b5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00105b7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00105ba:	c1 e1 03             	shl    ecx,0x3
c00105bd:	89 c7                	mov    edi,eax
c00105bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105c1:	83 c4 10             	add    esp,0x10
c00105c4:	89 d8                	mov    eax,ebx
c00105c6:	5b                   	pop    ebx
c00105c7:	5e                   	pop    esi
c00105c8:	5f                   	pop    edi
c00105c9:	c3                   	ret    

c00105ca <Krnl::loadSystemEnv()>:
c00105ca:	53                   	push   ebx
c00105cb:	83 ec 14             	sub    esp,0x14
c00105ce:	6a 0c                	push   0xc
c00105d0:	e8 84 78 ff ff       	call   c0007e59 <malloc>
c00105d5:	89 c3                	mov    ebx,eax
c00105d7:	58                   	pop    eax
c00105d8:	5a                   	pop    edx
c00105d9:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c00105df:	53                   	push   ebx
c00105e0:	e8 71 fe ff ff       	call   c0010456 <EnvVarContainer::EnvVarContainer(Process*)>
c00105e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105e8:	89 1d b4 33 02 c0    	mov    DWORD PTR ds:0xc00233b4,ebx
c00105ee:	e8 47 fe ff ff       	call   c001043a <EnvVarContainer::__loadSystem()>
c00105f3:	83 c4 18             	add    esp,0x18
c00105f6:	5b                   	pop    ebx
c00105f7:	c3                   	ret    

c00105f8 <Krnl::loadUserEnv()>:
c00105f8:	53                   	push   ebx
c00105f9:	83 ec 14             	sub    esp,0x14
c00105fc:	6a 0c                	push   0xc
c00105fe:	e8 56 78 ff ff       	call   c0007e59 <malloc>
c0010603:	89 c3                	mov    ebx,eax
c0010605:	58                   	pop    eax
c0010606:	5a                   	pop    edx
c0010607:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c001060d:	53                   	push   ebx
c001060e:	e8 43 fe ff ff       	call   c0010456 <EnvVarContainer::EnvVarContainer(Process*)>
c0010613:	89 1d b0 33 02 c0    	mov    DWORD PTR ds:0xc00233b0,ebx
c0010619:	83 c4 18             	add    esp,0x18
c001061c:	5b                   	pop    ebx
c001061d:	c3                   	ret    

c001061e <Krnl::flushEnv()>:
c001061e:	c3                   	ret    

c001061f <Krnl::getProcessTotalEnvCount(Process*)>:
c001061f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010623:	8b 15 b0 33 02 c0    	mov    edx,DWORD PTR ds:0xc00233b0
c0010629:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001062f:	a1 b4 33 02 c0       	mov    eax,ds:0xc00233b4
c0010634:	8b 00                	mov    eax,DWORD PTR [eax]
c0010636:	03 01                	add    eax,DWORD PTR [ecx]
c0010638:	85 d2                	test   edx,edx
c001063a:	74 02                	je     c001063e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001063c:	03 02                	add    eax,DWORD PTR [edx]
c001063e:	c3                   	ret    

c001063f <Krnl::getProcessEnvPair(Process*, int)>:
c001063f:	57                   	push   edi
c0010640:	56                   	push   esi
c0010641:	8b 35 b0 33 02 c0    	mov    esi,DWORD PTR ds:0xc00233b0
c0010647:	53                   	push   ebx
c0010648:	85 f6                	test   esi,esi
c001064a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001064e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010652:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010658:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001065c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001065e:	75 16                	jne    c0010676 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010660:	39 c2                	cmp    edx,eax
c0010662:	7c 16                	jl     c001067a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010664:	8b 0d b4 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233b4
c001066a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001066c:	01 c6                	add    esi,eax
c001066e:	39 d6                	cmp    esi,edx
c0010670:	7e 3c                	jle    c00106ae <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010672:	29 c2                	sub    edx,eax
c0010674:	eb 04                	jmp    c001067a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010676:	39 c2                	cmp    edx,eax
c0010678:	7d 05                	jge    c001067f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001067a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001067d:	eb 20                	jmp    c001069f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001067f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010681:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010684:	39 d1                	cmp    ecx,edx
c0010686:	7e 04                	jle    c001068c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010688:	29 c2                	sub    edx,eax
c001068a:	eb 10                	jmp    c001069c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001068c:	8b 35 b4 33 02 c0    	mov    esi,DWORD PTR ds:0xc00233b4
c0010692:	03 0e                	add    ecx,DWORD PTR [esi]
c0010694:	39 d1                	cmp    ecx,edx
c0010696:	7e 16                	jle    c00106ae <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010698:	29 c2                	sub    edx,eax
c001069a:	29 fa                	sub    edx,edi
c001069c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001069f:	8d 14 d0             	lea    edx,[eax+edx*8]
c00106a2:	8b 02                	mov    eax,DWORD PTR [edx]
c00106a4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00106a7:	89 03                	mov    DWORD PTR [ebx],eax
c00106a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00106ac:	eb 1d                	jmp    c00106cb <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00106ae:	83 ec 0c             	sub    esp,0xc
c00106b1:	68 46 e7 01 c0       	push   0xc001e746
c00106b6:	e8 18 00 00 00       	call   c00106d3 <Krnl::panic(char const*)>
c00106bb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00106c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00106c8:	83 c4 10             	add    esp,0x10
c00106cb:	89 d8                	mov    eax,ebx
c00106cd:	5b                   	pop    ebx
c00106ce:	5e                   	pop    esi
c00106cf:	5f                   	pop    edi
c00106d0:	c2 04 00             	ret    0x4

c00106d3 <Krnl::panic(char const*)>:
c00106d3:	53                   	push   ebx
c00106d4:	83 ec 10             	sub    esp,0x10
c00106d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106db:	fa                   	cli    
c00106dc:	c6 05 c0 33 02 c0 01 	mov    BYTE PTR ds:0xc00233c0,0x1
c00106e3:	53                   	push   ebx
c00106e4:	68 60 e7 01 c0       	push   0xc001e760
c00106e9:	e8 fa a4 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00106ee:	83 c4 0c             	add    esp,0xc
c00106f1:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c00106f6:	6a 01                	push   0x1
c00106f8:	6a 0f                	push   0xf
c00106fa:	50                   	push   eax
c00106fb:	e8 dc 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010700:	5a                   	pop    edx
c0010701:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010707:	51                   	push   ecx
c0010708:	e8 c7 84 ff ff       	call   c0008bd4 <VgaText::clearScreen()>
c001070d:	58                   	pop    eax
c001070e:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010714:	5a                   	pop    edx
c0010715:	68 91 e7 01 c0       	push   0xc001e791
c001071a:	51                   	push   ecx
c001071b:	e8 f4 82 ff ff       	call   c0008a14 <VgaText::setTitle(char*)>
c0010720:	83 c4 0c             	add    esp,0xc
c0010723:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0010728:	6a 01                	push   0x1
c001072a:	6a 0f                	push   0xf
c001072c:	50                   	push   eax
c001072d:	e8 aa 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010732:	58                   	pop    eax
c0010733:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010739:	5a                   	pop    edx
c001073a:	68 79 e7 01 c0       	push   0xc001e779
c001073f:	51                   	push   ecx
c0010740:	e8 83 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0010745:	83 c4 0c             	add    esp,0xc
c0010748:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c001074d:	6a 0f                	push   0xf
c001074f:	6a 01                	push   0x1
c0010751:	50                   	push   eax
c0010752:	e8 85 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010757:	58                   	pop    eax
c0010758:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c001075e:	5a                   	pop    edx
c001075f:	68 82 e7 01 c0       	push   0xc001e782
c0010764:	51                   	push   ecx
c0010765:	e8 5e 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001076a:	83 c4 0c             	add    esp,0xc
c001076d:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0010772:	6a 01                	push   0x1
c0010774:	6a 0f                	push   0xf
c0010776:	50                   	push   eax
c0010777:	e8 60 82 ff ff       	call   c00089dc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001077c:	58                   	pop    eax
c001077d:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010783:	5a                   	pop    edx
c0010784:	68 8f e7 01 c0       	push   0xc001e78f
c0010789:	51                   	push   ecx
c001078a:	e8 39 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001078f:	58                   	pop    eax
c0010790:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010796:	5a                   	pop    edx
c0010797:	68 a0 e7 01 c0       	push   0xc001e7a0
c001079c:	51                   	push   ecx
c001079d:	e8 26 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107a2:	58                   	pop    eax
c00107a3:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c00107a9:	5a                   	pop    edx
c00107aa:	68 92 e7 01 c0       	push   0xc001e792
c00107af:	51                   	push   ecx
c00107b0:	e8 13 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107b5:	58                   	pop    eax
c00107b6:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c00107bc:	5a                   	pop    edx
c00107bd:	53                   	push   ebx
c00107be:	51                   	push   ecx
c00107bf:	e8 04 87 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107c4:	5b                   	pop    ebx
c00107c5:	58                   	pop    eax
c00107c6:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c00107cb:	68 8f e7 01 c0       	push   0xc001e78f
c00107d0:	50                   	push   eax
c00107d1:	e8 f2 86 ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00107d6:	83 c4 10             	add    esp,0x10
c00107d9:	eb fe                	jmp    c00107d9 <Krnl::panic(char const*)+0x106>

c00107db <Krnl::powerThread(void*)>:
c00107db:	83 ec 0c             	sub    esp,0xc
c00107de:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00107e3:	48                   	dec    eax
c00107e4:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00107e9:	75 01                	jne    c00107ec <Krnl::powerThread(void*)+0x11>
c00107eb:	fb                   	sti    
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	c6 05 e0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233e0,0x0
c00107f6:	6a 0a                	push   0xa
c00107f8:	e8 3b 35 00 00       	call   c0013d38 <sleep(unsigned int)>
c00107fd:	83 05 24 34 02 c0 0a 	add    DWORD PTR ds:0xc0023424,0xa
c0010804:	83 c4 10             	add    esp,0x10
c0010807:	eb e3                	jmp    c00107ec <Krnl::powerThread(void*)+0x11>

c0010809 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010809:	57                   	push   edi
c001080a:	b9 09 00 00 00       	mov    ecx,0x9
c001080f:	56                   	push   esi
c0010810:	bf 00 34 02 c0       	mov    edi,0xc0023400
c0010815:	fc                   	cld    
c0010816:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001081a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001081c:	5e                   	pop    esi
c001081d:	5f                   	pop    edi
c001081e:	c3                   	ret    

c001081f <Krnl::userIOReceived()>:
c001081f:	c7 05 24 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023424,0x0
c0010829:	c3                   	ret    

c001082a <Krnl::handlePowerButton()>:
c001082a:	83 ec 0c             	sub    esp,0xc
c001082d:	a1 00 34 02 c0       	mov    eax,ds:0xc0023400
c0010832:	83 f8 02             	cmp    eax,0x2
c0010835:	75 10                	jne    c0010847 <Krnl::handlePowerButton()+0x1d>
c0010837:	83 ec 0c             	sub    esp,0xc
c001083a:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010840:	e8 b5 6c ff ff       	call   c00074fa <Computer::shutdown()>
c0010845:	eb 11                	jmp    c0010858 <Krnl::handlePowerButton()+0x2e>
c0010847:	48                   	dec    eax
c0010848:	75 11                	jne    c001085b <Krnl::handlePowerButton()+0x31>
c001084a:	83 ec 0c             	sub    esp,0xc
c001084d:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010853:	e8 d2 6c ff ff       	call   c000752a <Computer::sleep()>
c0010858:	83 c4 10             	add    esp,0x10
c001085b:	83 c4 0c             	add    esp,0xc
c001085e:	c3                   	ret    

c001085f <Krnl::handleSleepButton()>:
c001085f:	83 ec 0c             	sub    esp,0xc
c0010862:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c0010867:	83 f8 02             	cmp    eax,0x2
c001086a:	75 10                	jne    c001087c <Krnl::handleSleepButton()+0x1d>
c001086c:	83 ec 0c             	sub    esp,0xc
c001086f:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010875:	e8 80 6c ff ff       	call   c00074fa <Computer::shutdown()>
c001087a:	eb 11                	jmp    c001088d <Krnl::handleSleepButton()+0x2e>
c001087c:	48                   	dec    eax
c001087d:	75 11                	jne    c0010890 <Krnl::handleSleepButton()+0x31>
c001087f:	83 ec 0c             	sub    esp,0xc
c0010882:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010888:	e8 9d 6c ff ff       	call   c000752a <Computer::sleep()>
c001088d:	83 c4 10             	add    esp,0x10
c0010890:	83 c4 0c             	add    esp,0xc
c0010893:	c3                   	ret    

c0010894 <Krnl::setupPowerManager()>:
c0010894:	83 ec 0c             	sub    esp,0xc
c0010897:	c7 05 24 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023424,0x0
c00108a1:	68 f0 00 00 00       	push   0xf0
c00108a6:	c6 05 e0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233e0,0x0
c00108ad:	6a 00                	push   0x0
c00108af:	68 db 07 01 c0       	push   0xc00107db
c00108b4:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c00108ba:	e8 49 2f 00 00       	call   c0013808 <Process::createThread(void (*)(void*), void*, int)>
c00108bf:	c7 05 00 34 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023400,0x2
c00108c9:	c7 05 04 34 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023404,0x1
c00108d3:	c7 05 08 34 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023408,0x3
c00108dd:	c7 05 0c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002340c,0x0
c00108e7:	c7 05 18 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023418,0x0
c00108f1:	c7 05 10 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023410,0x0
c00108fb:	c7 05 1c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002341c,0x0
c0010905:	c7 05 14 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023414,0x3c
c001090f:	c7 05 20 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023420,0x3c
c0010919:	83 c4 1c             	add    esp,0x1c
c001091c:	c3                   	ret    

c001091d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001091d:	55                   	push   ebp
c001091e:	57                   	push   edi
c001091f:	56                   	push   esi
c0010920:	53                   	push   ebx
c0010921:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010927:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001092e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0010930:	8d 6e 01             	lea    ebp,[esi+0x1]
c0010933:	80 fb 40             	cmp    bl,0x40
c0010936:	75 1b                	jne    c0010953 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0010938:	8a 16                	mov    dl,BYTE PTR [esi]
c001093a:	84 d2                	test   dl,dl
c001093c:	0f 84 f1 00 00 00    	je     c0010a33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010942:	8d 46 01             	lea    eax,[esi+0x1]
c0010945:	80 fa 3a             	cmp    dl,0x3a
c0010948:	74 04                	je     c001094e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001094a:	89 c6                	mov    esi,eax
c001094c:	eb ea                	jmp    c0010938 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001094e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010951:	89 c6                	mov    esi,eax
c0010953:	50                   	push   eax
c0010954:	6a 40                	push   0x40
c0010956:	6a 00                	push   0x0
c0010958:	8d 44 24 24          	lea    eax,[esp+0x24]
c001095c:	50                   	push   eax
c001095d:	e8 8e fb fe ff       	call   c00004f0 <memset>
c0010962:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0010969:	31 c0                	xor    eax,eax
c001096b:	83 c4 10             	add    esp,0x10
c001096e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0010970:	84 c9                	test   cl,cl
c0010972:	0f 84 bb 00 00 00    	je     c0010a33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010978:	3d c7 00 00 00       	cmp    eax,0xc7
c001097d:	0f 8f b0 00 00 00    	jg     c0010a33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010983:	80 f9 0a             	cmp    cl,0xa
c0010986:	0f 85 98 00 00 00    	jne    c0010a24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001098c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0010991:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0010995:	a8 df                	test   al,0xdf
c0010997:	0f 94 c1             	sete   cl
c001099a:	3c 23                	cmp    al,0x23
c001099c:	0f 94 c2             	sete   dl
c001099f:	08 d1                	or     cl,dl
c00109a1:	75 4a                	jne    c00109ed <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109a3:	8d 50 f7             	lea    edx,[eax-0x9]
c00109a6:	80 fa 01             	cmp    dl,0x1
c00109a9:	76 42                	jbe    c00109ed <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109ab:	3c 5b                	cmp    al,0x5b
c00109ad:	75 42                	jne    c00109f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00109af:	80 fb 40             	cmp    bl,0x40
c00109b2:	75 39                	jne    c00109ed <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	8d 54 24 65          	lea    edx,[esp+0x65]
c00109bb:	52                   	push   edx
c00109bc:	e8 9f fb fe ff       	call   c0000560 <strlen>
c00109c1:	83 c4 10             	add    esp,0x10
c00109c4:	83 f8 3f             	cmp    eax,0x3f
c00109c7:	77 6a                	ja     c0010a33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109c9:	50                   	push   eax
c00109ca:	50                   	push   eax
c00109cb:	8d 54 24 61          	lea    edx,[esp+0x61]
c00109cf:	52                   	push   edx
c00109d0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00109d4:	52                   	push   edx
c00109d5:	e8 46 fc fe ff       	call   c0000620 <strcpy>
c00109da:	58                   	pop    eax
c00109db:	8d 54 24 24          	lea    edx,[esp+0x24]
c00109df:	52                   	push   edx
c00109e0:	e8 7b fb fe ff       	call   c0000560 <strlen>
c00109e5:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00109ea:	83 c4 10             	add    esp,0x10
c00109ed:	31 d2                	xor    edx,edx
c00109ef:	eb 3a                	jmp    c0010a2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00109f1:	80 fb 40             	cmp    bl,0x40
c00109f4:	74 06                	je     c00109fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00109f6:	8d 44 24 58          	lea    eax,[esp+0x58]
c00109fa:	eb 20                	jmp    c0010a1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00109fc:	50                   	push   eax
c00109fd:	50                   	push   eax
c00109fe:	55                   	push   ebp
c00109ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a03:	50                   	push   eax
c0010a04:	e8 f7 fc fe ff       	call   c0000700 <strcmp>
c0010a09:	83 c4 10             	add    esp,0x10
c0010a0c:	85 c0                	test   eax,eax
c0010a0e:	75 dd                	jne    c00109ed <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a10:	eb e4                	jmp    c00109f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010a12:	8d 50 01             	lea    edx,[eax+0x1]
c0010a15:	80 f9 3d             	cmp    cl,0x3d
c0010a18:	74 1d                	je     c0010a37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010a1a:	89 d0                	mov    eax,edx
c0010a1c:	8a 08                	mov    cl,BYTE PTR [eax]
c0010a1e:	84 c9                	test   cl,cl
c0010a20:	75 f0                	jne    c0010a12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010a22:	eb 0f                	jmp    c0010a33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a24:	8d 50 01             	lea    edx,[eax+0x1]
c0010a27:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010a2b:	47                   	inc    edi
c0010a2c:	89 d0                	mov    eax,edx
c0010a2e:	e9 3b ff ff ff       	jmp    c001096e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010a33:	31 c0                	xor    eax,eax
c0010a35:	eb 33                	jmp    c0010a6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010a37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a3b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010a3e:	50                   	push   eax
c0010a3f:	50                   	push   eax
c0010a40:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010a44:	50                   	push   eax
c0010a45:	56                   	push   esi
c0010a46:	e8 b5 fc fe ff       	call   c0000700 <strcmp>
c0010a4b:	83 c4 10             	add    esp,0x10
c0010a4e:	85 c0                	test   eax,eax
c0010a50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a54:	75 97                	jne    c00109ed <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a56:	51                   	push   ecx
c0010a57:	51                   	push   ecx
c0010a58:	52                   	push   edx
c0010a59:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010a60:	e8 bb fb fe ff       	call   c0000620 <strcpy>
c0010a65:	83 c4 10             	add    esp,0x10
c0010a68:	b0 01                	mov    al,0x1
c0010a6a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010a70:	5b                   	pop    ebx
c0010a71:	5e                   	pop    esi
c0010a72:	5f                   	pop    edi
c0010a73:	5d                   	pop    ebp
c0010a74:	c3                   	ret    

c0010a75 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010a75:	57                   	push   edi
c0010a76:	56                   	push   esi
c0010a77:	53                   	push   ebx
c0010a78:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010a7e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010a85:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010a8c:	53                   	push   ebx
c0010a8d:	e8 ce fa fe ff       	call   c0000560 <strlen>
c0010a92:	89 34 24             	mov    DWORD PTR [esp],esi
c0010a95:	89 c7                	mov    edi,eax
c0010a97:	e8 c4 fa fe ff       	call   c0000560 <strlen>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010aa3:	3d ff 00 00 00       	cmp    eax,0xff
c0010aa8:	0f 87 d3 00 00 00    	ja     c0010b81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010aae:	57                   	push   edi
c0010aaf:	57                   	push   edi
c0010ab0:	56                   	push   esi
c0010ab1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010ab5:	56                   	push   esi
c0010ab6:	e8 65 fb fe ff       	call   c0000620 <strcpy>
c0010abb:	58                   	pop    eax
c0010abc:	5a                   	pop    edx
c0010abd:	68 bf ea 01 c0       	push   0xc001eabf
c0010ac2:	56                   	push   esi
c0010ac3:	e8 18 fd fe ff       	call   c00007e0 <strcat>
c0010ac8:	59                   	pop    ecx
c0010ac9:	5f                   	pop    edi
c0010aca:	53                   	push   ebx
c0010acb:	56                   	push   esi
c0010acc:	e8 0f fd fe ff       	call   c00007e0 <strcat>
c0010ad1:	58                   	pop    eax
c0010ad2:	5a                   	pop    edx
c0010ad3:	68 da e7 01 c0       	push   0xc001e7da
c0010ad8:	56                   	push   esi
c0010ad9:	e8 02 fd fe ff       	call   c00007e0 <strcat>
c0010ade:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010ae5:	e8 6f 73 ff ff       	call   c0007e59 <malloc>
c0010aea:	83 c4 0c             	add    esp,0xc
c0010aed:	89 c3                	mov    ebx,eax
c0010aef:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0010af5:	56                   	push   esi
c0010af6:	50                   	push   eax
c0010af7:	e8 62 a6 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0010afc:	83 c4 10             	add    esp,0x10
c0010aff:	85 db                	test   ebx,ebx
c0010b01:	74 7e                	je     c0010b81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b03:	51                   	push   ecx
c0010b04:	51                   	push   ecx
c0010b05:	6a 01                	push   0x1
c0010b07:	53                   	push   ebx
c0010b08:	e8 11 a7 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0010b0d:	83 c4 10             	add    esp,0x10
c0010b10:	85 c0                	test   eax,eax
c0010b12:	74 08                	je     c0010b1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b19:	53                   	push   ebx
c0010b1a:	eb 5f                	jmp    c0010b7b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010b1c:	52                   	push   edx
c0010b1d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010b21:	50                   	push   eax
c0010b22:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010b26:	50                   	push   eax
c0010b27:	53                   	push   ebx
c0010b28:	e8 9d a9 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0010b2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b31:	83 c4 10             	add    esp,0x10
c0010b34:	89 c1                	mov    ecx,eax
c0010b36:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010b3a:	74 31                	je     c0010b6d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b3c:	83 ec 0c             	sub    esp,0xc
c0010b3f:	50                   	push   eax
c0010b40:	e8 14 73 ff ff       	call   c0007e59 <malloc>
c0010b45:	89 c6                	mov    esi,eax
c0010b47:	58                   	pop    eax
c0010b48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b4a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010b4e:	52                   	push   edx
c0010b4f:	56                   	push   esi
c0010b50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b54:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b58:	53                   	push   ebx
c0010b59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010b5c:	83 c4 20             	add    esp,0x20
c0010b5f:	85 c0                	test   eax,eax
c0010b61:	75 0a                	jne    c0010b6d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b67:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010b6b:	74 18                	je     c0010b85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010b6d:	83 ec 0c             	sub    esp,0xc
c0010b70:	53                   	push   ebx
c0010b71:	e8 06 a7 ff ff       	call   c000b27c <File::close()>
c0010b76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b7e:	83 c4 10             	add    esp,0x10
c0010b81:	31 c0                	xor    eax,eax
c0010b83:	eb 3b                	jmp    c0010bc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010b85:	83 ec 0c             	sub    esp,0xc
c0010b88:	53                   	push   ebx
c0010b89:	e8 ee a6 ff ff       	call   c000b27c <File::close()>
c0010b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b96:	83 c4 0c             	add    esp,0xc
c0010b99:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010ba0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010ba7:	56                   	push   esi
c0010ba8:	e8 70 fd ff ff       	call   c001091d <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010bad:	89 34 24             	mov    DWORD PTR [esp],esi
c0010bb0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010bb4:	e8 b0 72 ff ff       	call   c0007e69 <free>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010bc0:	81 c4 20 01 00 00    	add    esp,0x120
c0010bc6:	5b                   	pop    ebx
c0010bc7:	5e                   	pop    esi
c0010bc8:	5f                   	pop    edi
c0010bc9:	c3                   	ret    

c0010bca <Reg::getLine(char*, char*, char*)>:
c0010bca:	57                   	push   edi
c0010bcb:	56                   	push   esi
c0010bcc:	53                   	push   ebx
c0010bcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010bd5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010bd9:	57                   	push   edi
c0010bda:	56                   	push   esi
c0010bdb:	53                   	push   ebx
c0010bdc:	68 df e7 01 c0       	push   0xc001e7df
c0010be1:	e8 8f fe ff ff       	call   c0010a75 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010be6:	83 c4 10             	add    esp,0x10
c0010be9:	84 c0                	test   al,al
c0010beb:	75 10                	jne    c0010bfd <Reg::getLine(char*, char*, char*)+0x33>
c0010bed:	57                   	push   edi
c0010bee:	56                   	push   esi
c0010bef:	53                   	push   ebx
c0010bf0:	68 04 e8 01 c0       	push   0xc001e804
c0010bf5:	e8 7b fe ff ff       	call   c0010a75 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010bfa:	83 c4 10             	add    esp,0x10
c0010bfd:	5b                   	pop    ebx
c0010bfe:	5e                   	pop    esi
c0010bff:	5f                   	pop    edi
c0010c00:	c3                   	ret    

c0010c01 <Reg::readInt(char*, char*, int*)>:
c0010c01:	55                   	push   ebp
c0010c02:	57                   	push   edi
c0010c03:	56                   	push   esi
c0010c04:	53                   	push   ebx
c0010c05:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010c0b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010c0f:	57                   	push   edi
c0010c10:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c17:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c1e:	e8 a7 ff ff ff       	call   c0010bca <Reg::getLine(char*, char*, char*)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	84 c0                	test   al,al
c0010c28:	0f 84 b3 00 00 00    	je     c0010ce1 <Reg::readInt(char*, char*, int*)+0xe0>
c0010c2e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010c32:	80 fa 2b             	cmp    dl,0x2b
c0010c35:	74 0c                	je     c0010c43 <Reg::readInt(char*, char*, int*)+0x42>
c0010c37:	80 fa 2d             	cmp    dl,0x2d
c0010c3a:	75 0e                	jne    c0010c4a <Reg::readInt(char*, char*, int*)+0x49>
c0010c3c:	ba 01 00 00 00       	mov    edx,0x1
c0010c41:	eb 0b                	jmp    c0010c4e <Reg::readInt(char*, char*, int*)+0x4d>
c0010c43:	ba 01 00 00 00       	mov    edx,0x1
c0010c48:	eb 02                	jmp    c0010c4c <Reg::readInt(char*, char*, int*)+0x4b>
c0010c4a:	31 d2                	xor    edx,edx
c0010c4c:	31 c0                	xor    eax,eax
c0010c4e:	be 0a 00 00 00       	mov    esi,0xa
c0010c53:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010c58:	75 20                	jne    c0010c7a <Reg::readInt(char*, char*, int*)+0x79>
c0010c5a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010c5e:	80 f9 78             	cmp    cl,0x78
c0010c61:	75 0a                	jne    c0010c6d <Reg::readInt(char*, char*, int*)+0x6c>
c0010c63:	83 c2 02             	add    edx,0x2
c0010c66:	be 10 00 00 00       	mov    esi,0x10
c0010c6b:	eb 0d                	jmp    c0010c7a <Reg::readInt(char*, char*, int*)+0x79>
c0010c6d:	80 f9 62             	cmp    cl,0x62
c0010c70:	75 08                	jne    c0010c7a <Reg::readInt(char*, char*, int*)+0x79>
c0010c72:	83 c2 02             	add    edx,0x2
c0010c75:	be 02 00 00 00       	mov    esi,0x2
c0010c7a:	01 d7                	add    edi,edx
c0010c7c:	31 d2                	xor    edx,edx
c0010c7e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010c80:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010c84:	80 fb 0d             	cmp    bl,0xd
c0010c87:	0f 94 c3             	sete   bl
c0010c8a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010c8f:	0f 94 c1             	sete   cl
c0010c92:	08 cb                	or     bl,cl
c0010c94:	75 3a                	jne    c0010cd0 <Reg::readInt(char*, char*, int*)+0xcf>
c0010c96:	0f af d6             	imul   edx,esi
c0010c99:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010c9e:	83 fe 10             	cmp    esi,0x10
c0010ca1:	75 26                	jne    c0010cc9 <Reg::readInt(char*, char*, int*)+0xc8>
c0010ca3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ca7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010caa:	89 e9                	mov    ecx,ebp
c0010cac:	80 f9 05             	cmp    cl,0x5
c0010caf:	77 06                	ja     c0010cb7 <Reg::readInt(char*, char*, int*)+0xb6>
c0010cb1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010cb5:	eb 16                	jmp    c0010ccd <Reg::readInt(char*, char*, int*)+0xcc>
c0010cb7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cbb:	83 e9 61             	sub    ecx,0x61
c0010cbe:	80 f9 05             	cmp    cl,0x5
c0010cc1:	77 06                	ja     c0010cc9 <Reg::readInt(char*, char*, int*)+0xc8>
c0010cc3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010cc7:	eb 04                	jmp    c0010ccd <Reg::readInt(char*, char*, int*)+0xcc>
c0010cc9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010ccd:	47                   	inc    edi
c0010cce:	eb ae                	jmp    c0010c7e <Reg::readInt(char*, char*, int*)+0x7d>
c0010cd0:	84 c0                	test   al,al
c0010cd2:	74 02                	je     c0010cd6 <Reg::readInt(char*, char*, int*)+0xd5>
c0010cd4:	f7 da                	neg    edx
c0010cd6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010cdd:	89 10                	mov    DWORD PTR [eax],edx
c0010cdf:	88 d8                	mov    al,bl
c0010ce1:	81 c4 ec 00 00 00    	add    esp,0xec
c0010ce7:	5b                   	pop    ebx
c0010ce8:	5e                   	pop    esi
c0010ce9:	5f                   	pop    edi
c0010cea:	5d                   	pop    ebp
c0010ceb:	c3                   	ret    

c0010cec <Reg::readString(char*, char*, char*, int)>:
c0010cec:	57                   	push   edi
c0010ced:	56                   	push   esi
c0010cee:	53                   	push   ebx
c0010cef:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010cf5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010cfc:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010d00:	57                   	push   edi
c0010d01:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d08:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d0f:	e8 b6 fe ff ff       	call   c0010bca <Reg::getLine(char*, char*, char*)>
c0010d14:	83 c4 10             	add    esp,0x10
c0010d17:	89 c6                	mov    esi,eax
c0010d19:	84 c0                	test   al,al
c0010d1b:	74 44                	je     c0010d61 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d1d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010d24:	31 c0                	xor    eax,eax
c0010d26:	4a                   	dec    edx
c0010d27:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010d2a:	84 c9                	test   cl,cl
c0010d2c:	74 0f                	je     c0010d3d <Reg::readString(char*, char*, char*, int)+0x51>
c0010d2e:	39 c2                	cmp    edx,eax
c0010d30:	7e 0b                	jle    c0010d3d <Reg::readString(char*, char*, char*, int)+0x51>
c0010d32:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010d35:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010d3a:	40                   	inc    eax
c0010d3b:	eb ea                	jmp    c0010d27 <Reg::readString(char*, char*, char*, int)+0x3b>
c0010d3d:	83 ec 0c             	sub    esp,0xc
c0010d40:	53                   	push   ebx
c0010d41:	e8 1a f8 fe ff       	call   c0000560 <strlen>
c0010d46:	83 c4 10             	add    esp,0x10
c0010d49:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010d4e:	75 11                	jne    c0010d61 <Reg::readString(char*, char*, char*, int)+0x75>
c0010d50:	83 ec 0c             	sub    esp,0xc
c0010d53:	53                   	push   ebx
c0010d54:	e8 07 f8 fe ff       	call   c0000560 <strlen>
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010d61:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010d67:	89 f0                	mov    eax,esi
c0010d69:	5b                   	pop    ebx
c0010d6a:	5e                   	pop    esi
c0010d6b:	5f                   	pop    edi
c0010d6c:	c3                   	ret    

c0010d6d <Reg::readBool(char*, char*, bool*)>:
c0010d6d:	83 ec 20             	sub    esp,0x20
c0010d70:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010d74:	50                   	push   eax
c0010d75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d7d:	e8 7f fe ff ff       	call   c0010c01 <Reg::readInt(char*, char*, int*)>
c0010d82:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010d87:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d8b:	0f 95 02             	setne  BYTE PTR [edx]
c0010d8e:	83 c4 2c             	add    esp,0x2c
c0010d91:	c3                   	ret    

c0010d92 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010d92:	53                   	push   ebx
c0010d93:	83 ec 1c             	sub    esp,0x1c
c0010d96:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010d9a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010d9e:	50                   	push   eax
c0010d9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010da3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010da7:	e8 c1 ff ff ff       	call   c0010d6d <Reg::readBool(char*, char*, bool*)>
c0010dac:	83 c4 10             	add    esp,0x10
c0010daf:	84 c0                	test   al,al
c0010db1:	74 04                	je     c0010db7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010db3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010db7:	88 d8                	mov    al,bl
c0010db9:	83 c4 18             	add    esp,0x18
c0010dbc:	5b                   	pop    ebx
c0010dbd:	c3                   	ret    

c0010dbe <Reg::readIntWithDefault(char*, char*, int)>:
c0010dbe:	53                   	push   ebx
c0010dbf:	83 ec 1c             	sub    esp,0x1c
c0010dc2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dc6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010dca:	50                   	push   eax
c0010dcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dd3:	e8 29 fe ff ff       	call   c0010c01 <Reg::readInt(char*, char*, int*)>
c0010dd8:	83 c4 10             	add    esp,0x10
c0010ddb:	84 c0                	test   al,al
c0010ddd:	74 04                	je     c0010de3 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010ddf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010de3:	89 d8                	mov    eax,ebx
c0010de5:	83 c4 18             	add    esp,0x18
c0010de8:	5b                   	pop    ebx
c0010de9:	c3                   	ret    

c0010dea <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010dea:	57                   	push   edi
c0010deb:	56                   	push   esi
c0010dec:	56                   	push   esi
c0010ded:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010df1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010df5:	56                   	push   esi
c0010df6:	57                   	push   edi
c0010df7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dff:	e8 e8 fe ff ff       	call   c0010cec <Reg::readString(char*, char*, char*, int)>
c0010e04:	83 c4 10             	add    esp,0x10
c0010e07:	84 c0                	test   al,al
c0010e09:	75 1a                	jne    c0010e25 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010e0b:	51                   	push   ecx
c0010e0c:	56                   	push   esi
c0010e0d:	6a 00                	push   0x0
c0010e0f:	57                   	push   edi
c0010e10:	e8 db f6 fe ff       	call   c00004f0 <memset>
c0010e15:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010e18:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010e25:	89 f8                	mov    eax,edi
c0010e27:	5a                   	pop    edx
c0010e28:	5e                   	pop    esi
c0010e29:	5f                   	pop    edi
c0010e2a:	c3                   	ret    

c0010e2b <Sys::eject(regs*)>:
c0010e2b:	83 ec 0c             	sub    esp,0xc
c0010e2e:	83 ca ff             	or     edx,0xffffffff
c0010e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e35:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010e38:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010e3d:	83 e9 41             	sub    ecx,0x41
c0010e40:	83 f9 19             	cmp    ecx,0x19
c0010e43:	77 18                	ja     c0010e5d <Sys::eject(regs*)+0x32>
c0010e45:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c0010e4c:	85 c9                	test   ecx,ecx
c0010e4e:	74 0d                	je     c0010e5d <Sys::eject(regs*)+0x32>
c0010e50:	83 ec 0c             	sub    esp,0xc
c0010e53:	51                   	push   ecx
c0010e54:	e8 0d c4 ff ff       	call   c000d266 <LogicalDisk::eject()>
c0010e59:	83 c4 10             	add    esp,0x10
c0010e5c:	99                   	cdq    
c0010e5d:	83 c4 0c             	add    esp,0xc
c0010e60:	c3                   	ret    

c0010e61 <Sys::exit(regs*)>:
c0010e61:	83 ec 18             	sub    esp,0x18
c0010e64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e68:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010e6b:	e8 dc 34 00 00       	call   c001434c <terminateTask(int)>
c0010e70:	83 c8 ff             	or     eax,0xffffffff
c0010e73:	83 c4 1c             	add    esp,0x1c
c0010e76:	89 c2                	mov    edx,eax
c0010e78:	c3                   	ret    

c0010e79 <Sys::getCwd(regs*)>:
c0010e79:	83 ec 10             	sub    esp,0x10
c0010e7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e80:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010e83:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010e86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e8b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010e8e:	e8 cd a0 ff ff       	call   c000af60 <Fs::getcwd(Process*, char*, int)>
c0010e93:	83 c4 1c             	add    esp,0x1c
c0010e96:	99                   	cdq    
c0010e97:	c3                   	ret    

c0010e98 <Sys::getPID(regs*)>:
c0010e98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ea2:	99                   	cdq    
c0010ea3:	c3                   	ret    

c0010ea4 <Sys::getRAMData(regs*)>:
c0010ea4:	8b 0d 68 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020968
c0010eaa:	69 05 64 09 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020964,0xc8
c0010eb4:	99                   	cdq    
c0010eb5:	f7 f9                	idiv   ecx
c0010eb7:	c1 e0 18             	shl    eax,0x18
c0010eba:	09 c8                	or     eax,ecx
c0010ebc:	99                   	cdq    
c0010ebd:	c3                   	ret    

c0010ebe <Sys::getVGAPtr(regs*)>:
c0010ebe:	55                   	push   ebp
c0010ebf:	57                   	push   edi
c0010ec0:	56                   	push   esi
c0010ec1:	53                   	push   ebx
c0010ec2:	83 ec 18             	sub    esp,0x18
c0010ec5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ec9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ecc:	e8 7b 2f 00 00       	call   c0013e4c <Thr::processFromPID(int)>
c0010ed1:	83 c4 10             	add    esp,0x10
c0010ed4:	89 c1                	mov    ecx,eax
c0010ed6:	b8 01 00 00 00       	mov    eax,0x1
c0010edb:	85 c9                	test   ecx,ecx
c0010edd:	74 57                	je     c0010f36 <Sys::getVGAPtr(regs*)+0x78>
c0010edf:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010ee5:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010ee9:	74 0c                	je     c0010ef7 <Sys::getVGAPtr(regs*)+0x39>
c0010eeb:	83 ec 0c             	sub    esp,0xc
c0010eee:	55                   	push   ebp
c0010eef:	e8 95 7c ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c0010ef4:	83 c4 10             	add    esp,0x10
c0010ef7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010efa:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010efd:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010f02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f04:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010f07:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f0a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010f10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f13:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010f16:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010f1c:	50                   	push   eax
c0010f1d:	50                   	push   eax
c0010f1e:	68 1f e8 01 c0       	push   0xc001e81f
c0010f23:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f26:	05 a8 0f 00 00       	add    eax,0xfa8
c0010f2b:	50                   	push   eax
c0010f2c:	e8 ef f6 fe ff       	call   c0000620 <strcpy>
c0010f31:	83 c4 10             	add    esp,0x10
c0010f34:	31 c0                	xor    eax,eax
c0010f36:	83 c4 0c             	add    esp,0xc
c0010f39:	31 d2                	xor    edx,edx
c0010f3b:	5b                   	pop    ebx
c0010f3c:	5e                   	pop    esi
c0010f3d:	5f                   	pop    edi
c0010f3e:	5d                   	pop    ebp
c0010f3f:	c3                   	ret    

c0010f40 <Sys::loadDLL(regs*)>:
c0010f40:	56                   	push   esi
c0010f41:	53                   	push   ebx
c0010f42:	31 d2                	xor    edx,edx
c0010f44:	51                   	push   ecx
c0010f45:	b8 01 00 00 00       	mov    eax,0x1
c0010f4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f4e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010f52:	0f 84 8c 00 00 00    	je     c0010fe4 <Sys::loadDLL(regs*)+0xa4>
c0010f58:	83 ec 0c             	sub    esp,0xc
c0010f5b:	68 14 01 00 00       	push   0x114
c0010f60:	e8 f4 6e ff ff       	call   c0007e59 <malloc>
c0010f65:	83 c4 0c             	add    esp,0xc
c0010f68:	89 c3                	mov    ebx,eax
c0010f6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f6f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010f72:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010f75:	53                   	push   ebx
c0010f76:	e8 e3 a1 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0010f7b:	83 c4 10             	add    esp,0x10
c0010f7e:	31 d2                	xor    edx,edx
c0010f80:	b8 02 00 00 00       	mov    eax,0x2
c0010f85:	85 db                	test   ebx,ebx
c0010f87:	74 5b                	je     c0010fe4 <Sys::loadDLL(regs*)+0xa4>
c0010f89:	83 ec 0c             	sub    esp,0xc
c0010f8c:	53                   	push   ebx
c0010f8d:	e8 fa a4 ff ff       	call   c000b48c <File::exists()>
c0010f92:	83 c4 10             	add    esp,0x10
c0010f95:	84 c0                	test   al,al
c0010f97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f99:	75 11                	jne    c0010fac <Sys::loadDLL(regs*)+0x6c>
c0010f9b:	83 ec 0c             	sub    esp,0xc
c0010f9e:	53                   	push   ebx
c0010f9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	b8 03 00 00 00       	mov    eax,0x3
c0010faa:	eb 36                	jmp    c0010fe2 <Sys::loadDLL(regs*)+0xa2>
c0010fac:	83 ec 0c             	sub    esp,0xc
c0010faf:	53                   	push   ebx
c0010fb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fb3:	58                   	pop    eax
c0010fb4:	5a                   	pop    edx
c0010fb5:	6a 00                	push   0x0
c0010fb7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010fba:	e8 77 20 00 00       	call   c0013036 <Thr::loadDLL(char const*, bool)>
c0010fbf:	83 c4 10             	add    esp,0x10
c0010fc2:	89 c1                	mov    ecx,eax
c0010fc4:	31 d2                	xor    edx,edx
c0010fc6:	b8 04 00 00 00       	mov    eax,0x4
c0010fcb:	85 c9                	test   ecx,ecx
c0010fcd:	74 15                	je     c0010fe4 <Sys::loadDLL(regs*)+0xa4>
c0010fcf:	53                   	push   ebx
c0010fd0:	53                   	push   ebx
c0010fd1:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0010fd7:	51                   	push   ecx
c0010fd8:	e8 8a 22 00 00       	call   c0013267 <Thr::executeDLL(unsigned long, void*)>
c0010fdd:	83 c4 10             	add    esp,0x10
c0010fe0:	31 c0                	xor    eax,eax
c0010fe2:	31 d2                	xor    edx,edx
c0010fe4:	59                   	pop    ecx
c0010fe5:	5b                   	pop    ebx
c0010fe6:	5e                   	pop    esi
c0010fe7:	c3                   	ret    

c0010fe8 <Sys::read(regs*)>:
c0010fe8:	57                   	push   edi
c0010fe9:	56                   	push   esi
c0010fea:	53                   	push   ebx
c0010feb:	83 ec 10             	sub    esp,0x10
c0010fee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ff2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ff5:	83 f8 02             	cmp    eax,0x2
c0010ff8:	77 10                	ja     c001100a <Sys::read(regs*)+0x22>
c0010ffa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011002:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011008:	eb 0e                	jmp    c0011018 <Sys::read(regs*)+0x30>
c001100a:	83 ec 0c             	sub    esp,0xc
c001100d:	50                   	push   eax
c001100e:	e8 2c 88 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	89 c1                	mov    ecx,eax
c0011018:	83 c8 ff             	or     eax,0xffffffff
c001101b:	85 c9                	test   ecx,ecx
c001101d:	89 c2                	mov    edx,eax
c001101f:	74 28                	je     c0011049 <Sys::read(regs*)+0x61>
c0011021:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011029:	31 ff                	xor    edi,edi
c001102b:	83 ec 0c             	sub    esp,0xc
c001102e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011030:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011034:	52                   	push   edx
c0011035:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011038:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001103b:	57                   	push   edi
c001103c:	56                   	push   esi
c001103d:	51                   	push   ecx
c001103e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011041:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011045:	83 c4 20             	add    esp,0x20
c0011048:	99                   	cdq    
c0011049:	83 c4 10             	add    esp,0x10
c001104c:	5b                   	pop    ebx
c001104d:	5e                   	pop    esi
c001104e:	5f                   	pop    edi
c001104f:	c3                   	ret    

c0011050 <Sys::sbrk(regs*)>:
c0011050:	56                   	push   esi
c0011051:	53                   	push   ebx
c0011052:	50                   	push   eax
c0011053:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011058:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001105f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011062:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011068:	85 db                	test   ebx,ebx
c001106a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001106d:	74 02                	je     c0011071 <Sys::sbrk(regs*)+0x21>
c001106f:	79 06                	jns    c0011077 <Sys::sbrk(regs*)+0x27>
c0011071:	89 f0                	mov    eax,esi
c0011073:	31 d2                	xor    edx,edx
c0011075:	eb 2a                	jmp    c00110a1 <Sys::sbrk(regs*)+0x51>
c0011077:	83 c8 ff             	or     eax,0xffffffff
c001107a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011080:	89 c2                	mov    edx,eax
c0011082:	77 1d                	ja     c00110a1 <Sys::sbrk(regs*)+0x51>
c0011084:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001108a:	50                   	push   eax
c001108b:	c1 ea 0c             	shr    edx,0xc
c001108e:	68 07 0c 00 00       	push   0xc07
c0011093:	52                   	push   edx
c0011094:	51                   	push   ecx
c0011095:	e8 94 90 ff ff       	call   c000a12e <VAS::allocatePages(int, int)>
c001109a:	89 f0                	mov    eax,esi
c001109c:	31 d2                	xor    edx,edx
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	59                   	pop    ecx
c00110a2:	5b                   	pop    ebx
c00110a3:	5e                   	pop    esi
c00110a4:	c3                   	ret    

c00110a5 <Sys::setCwd(regs*)>:
c00110a5:	83 ec 14             	sub    esp,0x14
c00110a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00110ac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00110af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00110b7:	e8 6f a4 ff ff       	call   c000b52b <Fs::setcwd(Process*, char*)>
c00110bc:	83 c4 1c             	add    esp,0x1c
c00110bf:	99                   	cdq    
c00110c0:	c3                   	ret    

c00110c1 <Sys::setTime(regs*)>:
c00110c1:	55                   	push   ebp
c00110c2:	31 c9                	xor    ecx,ecx
c00110c4:	57                   	push   edi
c00110c5:	bd 0c 00 00 00       	mov    ebp,0xc
c00110ca:	56                   	push   esi
c00110cb:	53                   	push   ebx
c00110cc:	31 db                	xor    ebx,ebx
c00110ce:	83 ec 10             	sub    esp,0x10
c00110d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00110d5:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00110d8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00110db:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00110de:	89 c2                	mov    edx,eax
c00110e0:	66 81 ef 6c 07       	sub    di,0x76c
c00110e5:	83 e2 1f             	and    edx,0x1f
c00110e8:	c1 e7 10             	shl    edi,0x10
c00110eb:	42                   	inc    edx
c00110ec:	c1 e8 05             	shr    eax,0x5
c00110ef:	88 d1                	mov    cl,dl
c00110f1:	31 d2                	xor    edx,edx
c00110f3:	f7 f5                	div    ebp
c00110f5:	89 dd                	mov    ebp,ebx
c00110f7:	88 d5                	mov    ch,dl
c00110f9:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00110ff:	0f b7 c1             	movzx  eax,cx
c0011102:	31 d2                	xor    edx,edx
c0011104:	09 f8                	or     eax,edi
c0011106:	bf 3c 00 00 00       	mov    edi,0x3c
c001110b:	89 c1                	mov    ecx,eax
c001110d:	89 f0                	mov    eax,esi
c001110f:	f7 f7                	div    edi
c0011111:	c1 e2 10             	shl    edx,0x10
c0011114:	09 d5                	or     ebp,edx
c0011116:	31 d2                	xor    edx,edx
c0011118:	89 eb                	mov    ebx,ebp
c001111a:	f7 f7                	div    edi
c001111c:	bf 10 0e 00 00       	mov    edi,0xe10
c0011121:	88 d7                	mov    bh,dl
c0011123:	89 f0                	mov    eax,esi
c0011125:	31 d2                	xor    edx,edx
c0011127:	f7 f7                	div    edi
c0011129:	bf 18 00 00 00       	mov    edi,0x18
c001112e:	31 d2                	xor    edx,edx
c0011130:	f7 f7                	div    edi
c0011132:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0011137:	88 d3                	mov    bl,dl
c0011139:	53                   	push   ebx
c001113a:	51                   	push   ecx
c001113b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011141:	e8 f6 ab ff ff       	call   c000bd3c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011146:	83 c4 1c             	add    esp,0x1c
c0011149:	83 f0 01             	xor    eax,0x1
c001114c:	5b                   	pop    ebx
c001114d:	0f b6 c0             	movzx  eax,al
c0011150:	5e                   	pop    esi
c0011151:	31 d2                	xor    edx,edx
c0011153:	5f                   	pop    edi
c0011154:	5d                   	pop    ebp
c0011155:	c3                   	ret    

c0011156 <Sys::timezone(regs*)>:
c0011156:	53                   	push   ebx
c0011157:	83 ec 08             	sub    esp,0x8
c001115a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001115e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011162:	75 17                	jne    c001117b <Sys::timezone(regs*)+0x25>
c0011164:	83 ec 0c             	sub    esp,0xc
c0011167:	68 29 e8 01 c0       	push   0xc001e829
c001116c:	e8 77 9a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0011171:	83 c8 ff             	or     eax,0xffffffff
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	89 c2                	mov    edx,eax
c0011179:	eb 20                	jmp    c001119b <Sys::timezone(regs*)+0x45>
c001117b:	83 ec 0c             	sub    esp,0xc
c001117e:	68 3e e8 01 c0       	push   0xc001e83e
c0011183:	e8 60 9a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0011188:	58                   	pop    eax
c0011189:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001118c:	e8 07 a9 ff ff       	call   c000ba98 <User::loadClockSettings(int)>
c0011191:	83 c4 10             	add    esp,0x10
c0011194:	b8 01 00 00 00       	mov    eax,0x1
c0011199:	31 d2                	xor    edx,edx
c001119b:	83 c4 08             	add    esp,0x8
c001119e:	5b                   	pop    ebx
c001119f:	c3                   	ret    

c00111a0 <Sys::write(regs*)>:
c00111a0:	57                   	push   edi
c00111a1:	56                   	push   esi
c00111a2:	53                   	push   ebx
c00111a3:	83 ec 10             	sub    esp,0x10
c00111a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111aa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111ad:	83 f8 02             	cmp    eax,0x2
c00111b0:	77 10                	ja     c00111c2 <Sys::write(regs*)+0x22>
c00111b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111ba:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00111c0:	eb 0e                	jmp    c00111d0 <Sys::write(regs*)+0x30>
c00111c2:	83 ec 0c             	sub    esp,0xc
c00111c5:	50                   	push   eax
c00111c6:	e8 74 86 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c00111cb:	83 c4 10             	add    esp,0x10
c00111ce:	89 c1                	mov    ecx,eax
c00111d0:	83 c8 ff             	or     eax,0xffffffff
c00111d3:	85 c9                	test   ecx,ecx
c00111d5:	89 c2                	mov    edx,eax
c00111d7:	74 28                	je     c0011201 <Sys::write(regs*)+0x61>
c00111d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111e1:	31 ff                	xor    edi,edi
c00111e3:	83 ec 0c             	sub    esp,0xc
c00111e6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00111e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00111ec:	52                   	push   edx
c00111ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00111f0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00111f3:	57                   	push   edi
c00111f4:	56                   	push   esi
c00111f5:	51                   	push   ecx
c00111f6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00111f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00111fd:	83 c4 20             	add    esp,0x20
c0011200:	99                   	cdq    
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	5b                   	pop    ebx
c0011205:	5e                   	pop    esi
c0011206:	5f                   	pop    edi
c0011207:	c3                   	ret    

c0011208 <Sys::wsbe(regs*)>:
c0011208:	57                   	push   edi
c0011209:	b9 0b 00 00 00       	mov    ecx,0xb
c001120e:	56                   	push   esi
c001120f:	be 7d e8 01 c0       	mov    esi,0xc001e87d
c0011214:	53                   	push   ebx
c0011215:	83 ec 30             	sub    esp,0x30
c0011218:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001121c:	fc                   	cld    
c001121d:	83 ec 0c             	sub    esp,0xc
c0011220:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011222:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001122b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001122e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011234:	8b 06                	mov    eax,DWORD PTR [esi]
c0011236:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011239:	57                   	push   edi
c001123a:	e8 21 f3 fe ff       	call   c0000560 <strlen>
c001123f:	5a                   	pop    edx
c0011240:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011244:	52                   	push   edx
c0011245:	31 d2                	xor    edx,edx
c0011247:	57                   	push   edi
c0011248:	52                   	push   edx
c0011249:	50                   	push   eax
c001124a:	56                   	push   esi
c001124b:	ff d3                	call   ebx
c001124d:	83 c4 14             	add    esp,0x14
c0011250:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011254:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011257:	e8 f0 30 00 00       	call   c001434c <terminateTask(int)>
c001125c:	83 c4 40             	add    esp,0x40
c001125f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011264:	5b                   	pop    ebx
c0011265:	31 d2                	xor    edx,edx
c0011267:	5e                   	pop    esi
c0011268:	5f                   	pop    edi
c0011269:	c3                   	ret    

c001126a <Sys::yield(regs*)>:
c001126a:	83 ec 0c             	sub    esp,0xc
c001126d:	fa                   	cli    
c001126e:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0011274:	e8 af 27 00 00       	call   c0013a28 <schedule()>
c0011279:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001127e:	48                   	dec    eax
c001127f:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0011284:	75 01                	jne    c0011287 <Sys::yield(regs*)+0x1d>
c0011286:	fb                   	sti    
c0011287:	31 c0                	xor    eax,eax
c0011289:	31 d2                	xor    edx,edx
c001128b:	83 c4 0c             	add    esp,0xc
c001128e:	c3                   	ret    

c001128f <sysCallSeekDir(regs*)>:
c001128f:	31 c0                	xor    eax,eax
c0011291:	31 d2                	xor    edx,edx
c0011293:	c3                   	ret    

c0011294 <sysCallTellDir(regs*)>:
c0011294:	31 c0                	xor    eax,eax
c0011296:	31 d2                	xor    edx,edx
c0011298:	c3                   	ret    

c0011299 <sysCallVerify(regs*)>:
c0011299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001129d:	31 d2                	xor    edx,edx
c001129f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112a2:	c3                   	ret    

c00112a3 <sysCallGetArgc(regs*)>:
c00112a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112ab:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00112b1:	99                   	cdq    
c00112b2:	c3                   	ret    

c00112b3 <sysCallTTYName(regs*)>:
c00112b3:	b8 01 00 00 00       	mov    eax,0x1
c00112b8:	31 d2                	xor    edx,edx
c00112ba:	c3                   	ret    

c00112bb <sysFormatDisk(regs*)>:
c00112bb:	56                   	push   esi
c00112bc:	53                   	push   ebx
c00112bd:	50                   	push   eax
c00112be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112c2:	8b 1d 34 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a34
c00112c8:	eb 28                	jmp    c00112f2 <sysFormatDisk(regs*)+0x37>
c00112ca:	83 ec 0c             	sub    esp,0xc
c00112cd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00112d0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00112d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112d5:	51                   	push   ecx
c00112d6:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112d9:	51                   	push   ecx
c00112da:	50                   	push   eax
c00112db:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c00112e2:	50                   	push   eax
c00112e3:	53                   	push   ebx
c00112e4:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00112e7:	83 c4 20             	add    esp,0x20
c00112ea:	83 f8 08             	cmp    eax,0x8
c00112ed:	75 12                	jne    c0011301 <sysFormatDisk(regs*)+0x46>
c00112ef:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112f2:	85 db                	test   ebx,ebx
c00112f4:	75 d4                	jne    c00112ca <sysFormatDisk(regs*)+0xf>
c00112f6:	59                   	pop    ecx
c00112f7:	b8 03 00 00 00       	mov    eax,0x3
c00112fc:	31 d2                	xor    edx,edx
c00112fe:	5b                   	pop    ebx
c00112ff:	5e                   	pop    esi
c0011300:	c3                   	ret    
c0011301:	85 c0                	test   eax,eax
c0011303:	74 1b                	je     c0011320 <sysFormatDisk(regs*)+0x65>
c0011305:	83 f8 09             	cmp    eax,0x9
c0011308:	74 0b                	je     c0011315 <sysFormatDisk(regs*)+0x5a>
c001130a:	59                   	pop    ecx
c001130b:	b8 02 00 00 00       	mov    eax,0x2
c0011310:	31 d2                	xor    edx,edx
c0011312:	5b                   	pop    ebx
c0011313:	5e                   	pop    esi
c0011314:	c3                   	ret    
c0011315:	59                   	pop    ecx
c0011316:	b8 01 00 00 00       	mov    eax,0x1
c001131b:	31 d2                	xor    edx,edx
c001131d:	5b                   	pop    ebx
c001131e:	5e                   	pop    esi
c001131f:	c3                   	ret    
c0011320:	59                   	pop    ecx
c0011321:	31 c0                	xor    eax,eax
c0011323:	31 d2                	xor    edx,edx
c0011325:	5b                   	pop    ebx
c0011326:	5e                   	pop    esi
c0011327:	c3                   	ret    

c0011328 <sysSetDiskVolumeLabel(regs*)>:
c0011328:	56                   	push   esi
c0011329:	53                   	push   ebx
c001132a:	53                   	push   ebx
c001132b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001132f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011332:	83 f8 19             	cmp    eax,0x19
c0011335:	77 2d                	ja     c0011364 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011337:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c001133e:	85 c9                	test   ecx,ecx
c0011340:	74 22                	je     c0011364 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011342:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011345:	85 db                	test   ebx,ebx
c0011347:	74 1b                	je     c0011364 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011349:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001134f:	85 d2                	test   edx,edx
c0011351:	74 11                	je     c0011364 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011353:	8b 32                	mov    esi,DWORD PTR [edx]
c0011355:	53                   	push   ebx
c0011356:	50                   	push   eax
c0011357:	51                   	push   ecx
c0011358:	52                   	push   edx
c0011359:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	99                   	cdq    
c0011360:	59                   	pop    ecx
c0011361:	5b                   	pop    ebx
c0011362:	5e                   	pop    esi
c0011363:	c3                   	ret    
c0011364:	59                   	pop    ecx
c0011365:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001136a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001136f:	5b                   	pop    ebx
c0011370:	5e                   	pop    esi
c0011371:	c3                   	ret    

c0011372 <sysGetDiskVolumeLabel(regs*)>:
c0011372:	57                   	push   edi
c0011373:	56                   	push   esi
c0011374:	53                   	push   ebx
c0011375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011379:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001137c:	83 fa 19             	cmp    edx,0x19
c001137f:	77 38                	ja     c00113b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011381:	8b 0c 95 a0 2e 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd160]
c0011388:	85 c9                	test   ecx,ecx
c001138a:	74 2d                	je     c00113b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c001138c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001138f:	85 db                	test   ebx,ebx
c0011391:	74 26                	je     c00113b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011393:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011396:	85 f6                	test   esi,esi
c0011398:	74 1f                	je     c00113b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c001139a:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00113a0:	85 c0                	test   eax,eax
c00113a2:	74 15                	je     c00113b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113a4:	83 ec 0c             	sub    esp,0xc
c00113a7:	8b 38                	mov    edi,DWORD PTR [eax]
c00113a9:	56                   	push   esi
c00113aa:	53                   	push   ebx
c00113ab:	52                   	push   edx
c00113ac:	51                   	push   ecx
c00113ad:	50                   	push   eax
c00113ae:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00113b1:	83 c4 20             	add    esp,0x20
c00113b4:	99                   	cdq    
c00113b5:	5b                   	pop    ebx
c00113b6:	5e                   	pop    esi
c00113b7:	5f                   	pop    edi
c00113b8:	c3                   	ret    
c00113b9:	5b                   	pop    ebx
c00113ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113c4:	5e                   	pop    esi
c00113c5:	5f                   	pop    edi
c00113c6:	c3                   	ret    

c00113c7 <sysShutdown(regs*)>:
c00113c7:	83 ec 0c             	sub    esp,0xc
c00113ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113d1:	85 c0                	test   eax,eax
c00113d3:	74 18                	je     c00113ed <sysShutdown(regs*)+0x26>
c00113d5:	83 f8 01             	cmp    eax,0x1
c00113d8:	74 38                	je     c0011412 <sysShutdown(regs*)+0x4b>
c00113da:	83 f8 02             	cmp    eax,0x2
c00113dd:	74 24                	je     c0011403 <sysShutdown(regs*)+0x3c>
c00113df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113e9:	83 c4 0c             	add    esp,0xc
c00113ec:	c3                   	ret    
c00113ed:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00113f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00113f4:	6a 00                	push   0x0
c00113f6:	6a 00                	push   0x0
c00113f8:	6a 00                	push   0x0
c00113fa:	50                   	push   eax
c00113fb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00113fe:	83 c4 10             	add    esp,0x10
c0011401:	eb dc                	jmp    c00113df <sysShutdown(regs*)+0x18>
c0011403:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0011408:	8b 10                	mov    edx,DWORD PTR [eax]
c001140a:	6a 00                	push   0x0
c001140c:	6a 00                	push   0x0
c001140e:	6a 01                	push   0x1
c0011410:	eb e8                	jmp    c00113fa <sysShutdown(regs*)+0x33>
c0011412:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c0011417:	85 c0                	test   eax,eax
c0011419:	74 02                	je     c001141d <sysShutdown(regs*)+0x56>
c001141b:	ff d0                	call   eax
c001141d:	31 c0                	xor    eax,eax
c001141f:	31 d2                	xor    edx,edx
c0011421:	83 c4 0c             	add    esp,0xc
c0011424:	c3                   	ret    

c0011425 <sysCallRealpath(regs*)>:
c0011425:	83 ec 0c             	sub    esp,0xc
c0011428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001142f:	85 d2                	test   edx,edx
c0011431:	74 07                	je     c001143a <sysCallRealpath(regs*)+0x15>
c0011433:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011436:	85 c0                	test   eax,eax
c0011438:	75 0b                	jne    c0011445 <sysCallRealpath(regs*)+0x20>
c001143a:	b8 01 00 00 00       	mov    eax,0x1
c001143f:	31 d2                	xor    edx,edx
c0011441:	83 c4 0c             	add    esp,0xc
c0011444:	c3                   	ret    
c0011445:	51                   	push   ecx
c0011446:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001144c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001144f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011455:	51                   	push   ecx
c0011456:	52                   	push   edx
c0011457:	50                   	push   eax
c0011458:	e8 57 9b ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	31 c0                	xor    eax,eax
c0011462:	31 d2                	xor    edx,edx
c0011464:	83 c4 0c             	add    esp,0xc
c0011467:	c3                   	ret    

c0011468 <sysCallReadDir(regs*)>:
c0011468:	53                   	push   ebx
c0011469:	83 ec 18             	sub    esp,0x18
c001146c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011470:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011473:	83 f8 02             	cmp    eax,0x2
c0011476:	76 61                	jbe    c00114d9 <sysCallReadDir(regs*)+0x71>
c0011478:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001147f:	77 49                	ja     c00114ca <sysCallReadDir(regs*)+0x62>
c0011481:	83 ec 0c             	sub    esp,0xc
c0011484:	50                   	push   eax
c0011485:	e8 b5 83 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001148a:	83 c4 10             	add    esp,0x10
c001148d:	85 c0                	test   eax,eax
c001148f:	74 39                	je     c00114ca <sysCallReadDir(regs*)+0x62>
c0011491:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011499:	83 ec 0c             	sub    esp,0xc
c001149c:	8b 10                	mov    edx,DWORD PTR [eax]
c001149e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00114a2:	51                   	push   ecx
c00114a3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114a6:	51                   	push   ecx
c00114a7:	6a 00                	push   0x0
c00114a9:	68 10 01 00 00       	push   0x110
c00114ae:	50                   	push   eax
c00114af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114b2:	83 c4 20             	add    esp,0x20
c00114b5:	85 c0                	test   eax,eax
c00114b7:	74 29                	je     c00114e2 <sysCallReadDir(regs*)+0x7a>
c00114b9:	83 f8 07             	cmp    eax,0x7
c00114bc:	74 1b                	je     c00114d9 <sysCallReadDir(regs*)+0x71>
c00114be:	b8 02 00 00 00       	mov    eax,0x2
c00114c3:	31 d2                	xor    edx,edx
c00114c5:	83 c4 18             	add    esp,0x18
c00114c8:	5b                   	pop    ebx
c00114c9:	c3                   	ret    
c00114ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114d4:	83 c4 18             	add    esp,0x18
c00114d7:	5b                   	pop    ebx
c00114d8:	c3                   	ret    
c00114d9:	b8 01 00 00 00       	mov    eax,0x1
c00114de:	31 d2                	xor    edx,edx
c00114e0:	eb e3                	jmp    c00114c5 <sysCallReadDir(regs*)+0x5d>
c00114e2:	31 c0                	xor    eax,eax
c00114e4:	31 d2                	xor    edx,edx
c00114e6:	eb dd                	jmp    c00114c5 <sysCallReadDir(regs*)+0x5d>

c00114e8 <sysCallIsATTY(regs*)>:
c00114e8:	83 ec 0c             	sub    esp,0xc
c00114eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114f2:	83 f8 02             	cmp    eax,0x2
c00114f5:	76 07                	jbe    c00114fe <sysCallIsATTY(regs*)+0x16>
c00114f7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114fc:	75 28                	jne    c0011526 <sysCallIsATTY(regs*)+0x3e>
c00114fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011503:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011506:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001150c:	85 c0                	test   eax,eax
c001150e:	74 26                	je     c0011536 <sysCallIsATTY(regs*)+0x4e>
c0011510:	83 ec 0c             	sub    esp,0xc
c0011513:	8b 10                	mov    edx,DWORD PTR [eax]
c0011515:	50                   	push   eax
c0011516:	ff 12                	call   DWORD PTR [edx]
c0011518:	31 d2                	xor    edx,edx
c001151a:	25 ff 00 00 00       	and    eax,0xff
c001151f:	83 c4 10             	add    esp,0x10
c0011522:	83 c4 0c             	add    esp,0xc
c0011525:	c3                   	ret    
c0011526:	83 ec 0c             	sub    esp,0xc
c0011529:	50                   	push   eax
c001152a:	e8 10 83 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	85 c0                	test   eax,eax
c0011534:	75 da                	jne    c0011510 <sysCallIsATTY(regs*)+0x28>
c0011536:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001153b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011540:	83 c4 0c             	add    esp,0xc
c0011543:	c3                   	ret    

c0011544 <sysCallSeek(regs*)>:
c0011544:	53                   	push   ebx
c0011545:	83 ec 08             	sub    esp,0x8
c0011548:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001154c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001154f:	8d 50 fd             	lea    edx,[eax-0x3]
c0011552:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011558:	77 34                	ja     c001158e <sysCallSeek(regs*)+0x4a>
c001155a:	83 ec 0c             	sub    esp,0xc
c001155d:	50                   	push   eax
c001155e:	e8 dc 82 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011563:	83 c4 0c             	add    esp,0xc
c0011566:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011569:	31 db                	xor    ebx,ebx
c001156b:	53                   	push   ebx
c001156c:	51                   	push   ecx
c001156d:	50                   	push   eax
c001156e:	e8 69 9d ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	85 c0                	test   eax,eax
c0011578:	0f 95 c0             	setne  al
c001157b:	31 d2                	xor    edx,edx
c001157d:	25 ff 00 00 00       	and    eax,0xff
c0011582:	f7 d8                	neg    eax
c0011584:	83 d2 00             	adc    edx,0x0
c0011587:	83 c4 08             	add    esp,0x8
c001158a:	f7 da                	neg    edx
c001158c:	5b                   	pop    ebx
c001158d:	c3                   	ret    
c001158e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011593:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011598:	83 c4 08             	add    esp,0x8
c001159b:	5b                   	pop    ebx
c001159c:	c3                   	ret    

c001159d <sysCallTell(regs*)>:
c001159d:	53                   	push   ebx
c001159e:	83 ec 08             	sub    esp,0x8
c00115a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115a8:	83 f8 02             	cmp    eax,0x2
c00115ab:	76 50                	jbe    c00115fd <sysCallTell(regs*)+0x60>
c00115ad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115b2:	76 19                	jbe    c00115cd <sysCallTell(regs*)+0x30>
c00115b4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115b7:	31 d2                	xor    edx,edx
c00115b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115c6:	31 c0                	xor    eax,eax
c00115c8:	83 c4 08             	add    esp,0x8
c00115cb:	5b                   	pop    ebx
c00115cc:	c3                   	ret    
c00115cd:	83 ec 0c             	sub    esp,0xc
c00115d0:	50                   	push   eax
c00115d1:	e8 69 82 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c00115d6:	5a                   	pop    edx
c00115d7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00115da:	59                   	pop    ecx
c00115db:	53                   	push   ebx
c00115dc:	50                   	push   eax
c00115dd:	e8 50 9d ff ff       	call   c000b332 <File::tell(unsigned long long*)>
c00115e2:	83 c4 10             	add    esp,0x10
c00115e5:	85 c0                	test   eax,eax
c00115e7:	0f 95 c0             	setne  al
c00115ea:	31 d2                	xor    edx,edx
c00115ec:	25 ff 00 00 00       	and    eax,0xff
c00115f1:	f7 d8                	neg    eax
c00115f3:	83 d2 00             	adc    edx,0x0
c00115f6:	83 c4 08             	add    esp,0x8
c00115f9:	f7 da                	neg    edx
c00115fb:	5b                   	pop    ebx
c00115fc:	c3                   	ret    
c00115fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011602:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011607:	83 c4 08             	add    esp,0x8
c001160a:	5b                   	pop    ebx
c001160b:	c3                   	ret    

c001160c <sysCallSize(regs*)>:
c001160c:	53                   	push   ebx
c001160d:	83 ec 18             	sub    esp,0x18
c0011610:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011614:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011617:	83 f8 02             	cmp    eax,0x2
c001161a:	76 56                	jbe    c0011672 <sysCallSize(regs*)+0x66>
c001161c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011621:	76 19                	jbe    c001163c <sysCallSize(regs*)+0x30>
c0011623:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011626:	31 d2                	xor    edx,edx
c0011628:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001162e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011635:	31 c0                	xor    eax,eax
c0011637:	83 c4 18             	add    esp,0x18
c001163a:	5b                   	pop    ebx
c001163b:	c3                   	ret    
c001163c:	83 ec 0c             	sub    esp,0xc
c001163f:	50                   	push   eax
c0011640:	e8 fa 81 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c0011645:	83 c4 0c             	add    esp,0xc
c0011648:	8d 54 24 13          	lea    edx,[esp+0x13]
c001164c:	52                   	push   edx
c001164d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011650:	52                   	push   edx
c0011651:	50                   	push   eax
c0011652:	e8 73 9e ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0011657:	83 c4 10             	add    esp,0x10
c001165a:	85 c0                	test   eax,eax
c001165c:	0f 95 c0             	setne  al
c001165f:	31 d2                	xor    edx,edx
c0011661:	25 ff 00 00 00       	and    eax,0xff
c0011666:	f7 d8                	neg    eax
c0011668:	83 d2 00             	adc    edx,0x0
c001166b:	83 c4 18             	add    esp,0x18
c001166e:	f7 da                	neg    edx
c0011670:	5b                   	pop    ebx
c0011671:	c3                   	ret    
c0011672:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011677:	ba ff ff ff ff       	mov    edx,0xffffffff
c001167c:	83 c4 18             	add    esp,0x18
c001167f:	5b                   	pop    ebx
c0011680:	c3                   	ret    

c0011681 <sysCallSizeFromFilename(regs*)>:
c0011681:	57                   	push   edi
c0011682:	56                   	push   esi
c0011683:	53                   	push   ebx
c0011684:	83 ec 20             	sub    esp,0x20
c0011687:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001168b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001168e:	83 fb 02             	cmp    ebx,0x2
c0011691:	0f 86 8c 00 00 00    	jbe    c0011723 <sysCallSizeFromFilename(regs*)+0xa2>
c0011697:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001169d:	76 1b                	jbe    c00116ba <sysCallSizeFromFilename(regs*)+0x39>
c001169f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00116a2:	31 d2                	xor    edx,edx
c00116a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116b1:	83 c4 20             	add    esp,0x20
c00116b4:	31 c0                	xor    eax,eax
c00116b6:	5b                   	pop    ebx
c00116b7:	5e                   	pop    esi
c00116b8:	5f                   	pop    edi
c00116b9:	c3                   	ret    
c00116ba:	83 ec 0c             	sub    esp,0xc
c00116bd:	68 14 01 00 00       	push   0x114
c00116c2:	e8 92 67 ff ff       	call   c0007e59 <malloc>
c00116c7:	83 c4 0c             	add    esp,0xc
c00116ca:	89 c7                	mov    edi,eax
c00116cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116d4:	50                   	push   eax
c00116d5:	53                   	push   ebx
c00116d6:	57                   	push   edi
c00116d7:	e8 82 9a ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00116dc:	83 c4 0c             	add    esp,0xc
c00116df:	8d 44 24 23          	lea    eax,[esp+0x23]
c00116e3:	50                   	push   eax
c00116e4:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00116e7:	52                   	push   edx
c00116e8:	57                   	push   edi
c00116e9:	e8 dc 9d ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c00116ee:	83 c4 10             	add    esp,0x10
c00116f1:	85 ff                	test   edi,edi
c00116f3:	74 14                	je     c0011709 <sysCallSizeFromFilename(regs*)+0x88>
c00116f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116f9:	8b 17                	mov    edx,DWORD PTR [edi]
c00116fb:	83 ec 0c             	sub    esp,0xc
c00116fe:	57                   	push   edi
c00116ff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011709:	85 c0                	test   eax,eax
c001170b:	0f 95 c0             	setne  al
c001170e:	31 d2                	xor    edx,edx
c0011710:	25 ff 00 00 00       	and    eax,0xff
c0011715:	f7 d8                	neg    eax
c0011717:	83 d2 00             	adc    edx,0x0
c001171a:	83 c4 20             	add    esp,0x20
c001171d:	f7 da                	neg    edx
c001171f:	5b                   	pop    ebx
c0011720:	5e                   	pop    esi
c0011721:	5f                   	pop    edi
c0011722:	c3                   	ret    
c0011723:	83 c4 20             	add    esp,0x20
c0011726:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001172b:	5b                   	pop    ebx
c001172c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011731:	5e                   	pop    esi
c0011732:	5f                   	pop    edi
c0011733:	c3                   	ret    

c0011734 <sysCallClose(regs*)>:
c0011734:	53                   	push   ebx
c0011735:	83 ec 08             	sub    esp,0x8
c0011738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001173c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001173f:	83 f8 02             	cmp    eax,0x2
c0011742:	76 41                	jbe    c0011785 <sysCallClose(regs*)+0x51>
c0011744:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001174a:	83 fa 01             	cmp    edx,0x1
c001174d:	76 2d                	jbe    c001177c <sysCallClose(regs*)+0x48>
c001174f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011754:	77 2f                	ja     c0011785 <sysCallClose(regs*)+0x51>
c0011756:	83 ec 0c             	sub    esp,0xc
c0011759:	50                   	push   eax
c001175a:	e8 e0 80 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001175f:	89 c3                	mov    ebx,eax
c0011761:	89 04 24             	mov    DWORD PTR [esp],eax
c0011764:	e8 13 9b ff ff       	call   c000b27c <File::close()>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	85 db                	test   ebx,ebx
c001176e:	74 0c                	je     c001177c <sysCallClose(regs*)+0x48>
c0011770:	83 ec 0c             	sub    esp,0xc
c0011773:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011775:	53                   	push   ebx
c0011776:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	31 c0                	xor    eax,eax
c001177e:	31 d2                	xor    edx,edx
c0011780:	83 c4 08             	add    esp,0x8
c0011783:	5b                   	pop    ebx
c0011784:	c3                   	ret    
c0011785:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001178a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001178f:	83 c4 08             	add    esp,0x8
c0011792:	5b                   	pop    ebx
c0011793:	c3                   	ret    

c0011794 <sysCallOpenDir(regs*)>:
c0011794:	56                   	push   esi
c0011795:	53                   	push   ebx
c0011796:	50                   	push   eax
c0011797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001179b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001179e:	85 c0                	test   eax,eax
c00117a0:	74 5b                	je     c00117fd <sysCallOpenDir(regs*)+0x69>
c00117a2:	83 ec 0c             	sub    esp,0xc
c00117a5:	68 14 01 00 00       	push   0x114
c00117aa:	e8 aa 66 ff ff       	call   c0007e59 <malloc>
c00117af:	83 c4 0c             	add    esp,0xc
c00117b2:	89 c6                	mov    esi,eax
c00117b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117bc:	50                   	push   eax
c00117bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00117c0:	50                   	push   eax
c00117c1:	56                   	push   esi
c00117c2:	e8 c1 9e ff ff       	call   c000b688 <Directory::Directory(char const*, Process*)>
c00117c7:	83 c4 10             	add    esp,0x10
c00117ca:	85 f6                	test   esi,esi
c00117cc:	74 2f                	je     c00117fd <sysCallOpenDir(regs*)+0x69>
c00117ce:	83 ec 0c             	sub    esp,0xc
c00117d1:	56                   	push   esi
c00117d2:	e8 71 9f ff ff       	call   c000b748 <Directory::open()>
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	85 c0                	test   eax,eax
c00117dc:	75 1f                	jne    c00117fd <sysCallOpenDir(regs*)+0x69>
c00117de:	83 ec 0c             	sub    esp,0xc
c00117e1:	56                   	push   esi
c00117e2:	e8 63 7d ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c00117e7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	89 02                	mov    DWORD PTR [edx],eax
c00117ef:	c1 f8 1f             	sar    eax,0x1f
c00117f2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117f5:	31 c0                	xor    eax,eax
c00117f7:	59                   	pop    ecx
c00117f8:	31 d2                	xor    edx,edx
c00117fa:	5b                   	pop    ebx
c00117fb:	5e                   	pop    esi
c00117fc:	c3                   	ret    
c00117fd:	59                   	pop    ecx
c00117fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011803:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011808:	5b                   	pop    ebx
c0011809:	5e                   	pop    esi
c001180a:	c3                   	ret    

c001180b <sysCallCloseDir(regs*)>:
c001180b:	53                   	push   ebx
c001180c:	83 ec 08             	sub    esp,0x8
c001180f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011813:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011816:	8d 50 fd             	lea    edx,[eax-0x3]
c0011819:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001181f:	77 2f                	ja     c0011850 <sysCallCloseDir(regs*)+0x45>
c0011821:	83 ec 0c             	sub    esp,0xc
c0011824:	50                   	push   eax
c0011825:	e8 15 80 ff ff       	call   c000983f <getFromFileDescriptor(int)>
c001182a:	89 c3                	mov    ebx,eax
c001182c:	89 04 24             	mov    DWORD PTR [esp],eax
c001182f:	e8 70 9f ff ff       	call   c000b7a4 <Directory::close()>
c0011834:	83 c4 10             	add    esp,0x10
c0011837:	85 db                	test   ebx,ebx
c0011839:	74 0c                	je     c0011847 <sysCallCloseDir(regs*)+0x3c>
c001183b:	83 ec 0c             	sub    esp,0xc
c001183e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011840:	53                   	push   ebx
c0011841:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011844:	83 c4 10             	add    esp,0x10
c0011847:	31 c0                	xor    eax,eax
c0011849:	31 d2                	xor    edx,edx
c001184b:	83 c4 08             	add    esp,0x8
c001184e:	5b                   	pop    ebx
c001184f:	c3                   	ret    
c0011850:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011855:	ba ff ff ff ff       	mov    edx,0xffffffff
c001185a:	83 c4 08             	add    esp,0x8
c001185d:	5b                   	pop    ebx
c001185e:	c3                   	ret    

c001185f <sysCallMakeDir(regs*)>:
c001185f:	56                   	push   esi
c0011860:	53                   	push   ebx
c0011861:	83 ec 10             	sub    esp,0x10
c0011864:	68 14 01 00 00       	push   0x114
c0011869:	e8 eb 65 ff ff       	call   c0007e59 <malloc>
c001186e:	83 c4 0c             	add    esp,0xc
c0011871:	89 c3                	mov    ebx,eax
c0011873:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011878:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c001187b:	56                   	push   esi
c001187c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011880:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011883:	50                   	push   eax
c0011884:	53                   	push   ebx
c0011885:	e8 fe 9d ff ff       	call   c000b688 <Directory::Directory(char const*, Process*)>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	85 db                	test   ebx,ebx
c001188f:	74 32                	je     c00118c3 <sysCallMakeDir(regs*)+0x64>
c0011891:	83 ec 0c             	sub    esp,0xc
c0011894:	53                   	push   ebx
c0011895:	e8 8e a0 ff ff       	call   c000b928 <Directory::create()>
c001189a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001189d:	89 c6                	mov    esi,eax
c001189f:	e8 00 9f ff ff       	call   c000b7a4 <Directory::close()>
c00118a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	31 c0                	xor    eax,eax
c00118b1:	59                   	pop    ecx
c00118b2:	85 f6                	test   esi,esi
c00118b4:	5b                   	pop    ebx
c00118b5:	0f 95 c0             	setne  al
c00118b8:	5e                   	pop    esi
c00118b9:	31 d2                	xor    edx,edx
c00118bb:	f7 d8                	neg    eax
c00118bd:	83 d2 00             	adc    edx,0x0
c00118c0:	f7 da                	neg    edx
c00118c2:	c3                   	ret    
c00118c3:	59                   	pop    ecx
c00118c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118ce:	5b                   	pop    ebx
c00118cf:	5e                   	pop    esi
c00118d0:	c3                   	ret    

c00118d1 <sysCallWait(regs*)>:
c00118d1:	83 ec 10             	sub    esp,0x10
c00118d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118d8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00118db:	52                   	push   edx
c00118dc:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00118df:	51                   	push   ecx
c00118e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118e3:	50                   	push   eax
c00118e4:	e8 6b 23 00 00       	call   c0013c54 <waitTask(int, int*, int)>
c00118e9:	83 c4 1c             	add    esp,0x1c
c00118ec:	99                   	cdq    
c00118ed:	c3                   	ret    

c00118ee <sysCallNotImpl(regs*)>:
c00118ee:	83 ec 18             	sub    esp,0x18
c00118f1:	68 a9 e8 01 c0       	push   0xc001e8a9
c00118f6:	e8 d8 ed ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c00118fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011900:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011905:	83 c4 1c             	add    esp,0x1c
c0011908:	c3                   	ret    

c0011909 <sysPanic(regs*)>:
c0011909:	83 ec 18             	sub    esp,0x18
c001190c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011910:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011913:	50                   	push   eax
c0011914:	e8 ba ed ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0011919:	b8 01 00 00 00       	mov    eax,0x1
c001191e:	31 d2                	xor    edx,edx
c0011920:	83 c4 1c             	add    esp,0x1c
c0011923:	c3                   	ret    

c0011924 <sysCallRmdir(regs*)>:
c0011924:	56                   	push   esi
c0011925:	53                   	push   ebx
c0011926:	83 ec 20             	sub    esp,0x20
c0011929:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001192d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011930:	68 14 01 00 00       	push   0x114
c0011935:	e8 1f 65 ff ff       	call   c0007e59 <malloc>
c001193a:	83 c4 0c             	add    esp,0xc
c001193d:	89 c3                	mov    ebx,eax
c001193f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011944:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011947:	50                   	push   eax
c0011948:	56                   	push   esi
c0011949:	53                   	push   ebx
c001194a:	e8 0f 98 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001194f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011952:	e8 3f 9a ff ff       	call   c000b396 <File::unlink()>
c0011957:	83 c4 10             	add    esp,0x10
c001195a:	85 db                	test   ebx,ebx
c001195c:	74 14                	je     c0011972 <sysCallRmdir(regs*)+0x4e>
c001195e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011962:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011964:	83 ec 0c             	sub    esp,0xc
c0011967:	53                   	push   ebx
c0011968:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011972:	85 c0                	test   eax,eax
c0011974:	0f 95 c0             	setne  al
c0011977:	31 d2                	xor    edx,edx
c0011979:	25 ff 00 00 00       	and    eax,0xff
c001197e:	f7 d8                	neg    eax
c0011980:	83 d2 00             	adc    edx,0x0
c0011983:	83 c4 14             	add    esp,0x14
c0011986:	f7 da                	neg    edx
c0011988:	5b                   	pop    ebx
c0011989:	5e                   	pop    esi
c001198a:	c3                   	ret    

c001198b <sysCallUnlink(regs*)>:
c001198b:	56                   	push   esi
c001198c:	53                   	push   ebx
c001198d:	83 ec 20             	sub    esp,0x20
c0011990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011994:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011997:	68 14 01 00 00       	push   0x114
c001199c:	e8 b8 64 ff ff       	call   c0007e59 <malloc>
c00119a1:	83 c4 0c             	add    esp,0xc
c00119a4:	89 c3                	mov    ebx,eax
c00119a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119ae:	50                   	push   eax
c00119af:	56                   	push   esi
c00119b0:	53                   	push   ebx
c00119b1:	e8 a8 97 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00119b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119b9:	e8 d8 99 ff ff       	call   c000b396 <File::unlink()>
c00119be:	83 c4 10             	add    esp,0x10
c00119c1:	85 db                	test   ebx,ebx
c00119c3:	74 14                	je     c00119d9 <sysCallUnlink(regs*)+0x4e>
c00119c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119cb:	83 ec 0c             	sub    esp,0xc
c00119ce:	53                   	push   ebx
c00119cf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119d9:	85 c0                	test   eax,eax
c00119db:	0f 95 c0             	setne  al
c00119de:	31 d2                	xor    edx,edx
c00119e0:	25 ff 00 00 00       	and    eax,0xff
c00119e5:	f7 d8                	neg    eax
c00119e7:	83 d2 00             	adc    edx,0x0
c00119ea:	83 c4 14             	add    esp,0x14
c00119ed:	f7 da                	neg    edx
c00119ef:	5b                   	pop    ebx
c00119f0:	5e                   	pop    esi
c00119f1:	c3                   	ret    

c00119f2 <sysCallGetArgv(regs*)>:
c00119f2:	83 ec 0c             	sub    esp,0xc
c00119f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119f9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119fc:	85 c0                	test   eax,eax
c00119fe:	78 2c                	js     c0011a2c <sysCallGetArgv(regs*)+0x3a>
c0011a00:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a06:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a09:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a0f:	7d 1b                	jge    c0011a2c <sysCallGetArgv(regs*)+0x3a>
c0011a11:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a18:	85 c0                	test   eax,eax
c0011a1a:	74 18                	je     c0011a34 <sysCallGetArgv(regs*)+0x42>
c0011a1c:	83 ec 08             	sub    esp,0x8
c0011a1f:	50                   	push   eax
c0011a20:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a23:	50                   	push   eax
c0011a24:	e8 f7 eb fe ff       	call   c0000620 <strcpy>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	31 c0                	xor    eax,eax
c0011a2e:	31 d2                	xor    edx,edx
c0011a30:	83 c4 0c             	add    esp,0xc
c0011a33:	c3                   	ret    
c0011a34:	b8 01 00 00 00       	mov    eax,0x1
c0011a39:	31 d2                	xor    edx,edx
c0011a3b:	83 c4 0c             	add    esp,0xc
c0011a3e:	c3                   	ret    

c0011a3f <sysCallUSleep(regs*)>:
c0011a3f:	83 ec 1c             	sub    esp,0x1c
c0011a42:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a46:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a49:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a4c:	6a 00                	push   0x0
c0011a4e:	6a 64                	push   0x64
c0011a50:	52                   	push   edx
c0011a51:	50                   	push   eax
c0011a52:	e8 49 a7 00 00       	call   c001c1a0 <__udivdi3>
c0011a57:	83 c4 14             	add    esp,0x14
c0011a5a:	50                   	push   eax
c0011a5b:	e8 c8 22 00 00       	call   c0013d28 <milliTenthSleep(unsigned int)>
c0011a60:	31 c0                	xor    eax,eax
c0011a62:	31 d2                	xor    edx,edx
c0011a64:	83 c4 1c             	add    esp,0x1c
c0011a67:	c3                   	ret    

c0011a68 <sysCallSpawn(regs*)>:
c0011a68:	56                   	push   esi
c0011a69:	53                   	push   ebx
c0011a6a:	50                   	push   eax
c0011a6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a72:	85 c0                	test   eax,eax
c0011a74:	75 08                	jne    c0011a7e <sysCallSpawn(regs*)+0x16>
c0011a76:	59                   	pop    ecx
c0011a77:	31 c0                	xor    eax,eax
c0011a79:	31 d2                	xor    edx,edx
c0011a7b:	5b                   	pop    ebx
c0011a7c:	5e                   	pop    esi
c0011a7d:	c3                   	ret    
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	68 1f 07 00 00       	push   0x71f
c0011a86:	e8 ce 63 ff ff       	call   c0007e59 <malloc>
c0011a8b:	83 c4 10             	add    esp,0x10
c0011a8e:	89 c6                	mov    esi,eax
c0011a90:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a96:	85 c0                	test   eax,eax
c0011a98:	75 33                	jne    c0011acd <sysCallSpawn(regs*)+0x65>
c0011a9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aa2:	52                   	push   edx
c0011aa3:	50                   	push   eax
c0011aa4:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011aa7:	53                   	push   ebx
c0011aa8:	56                   	push   esi
c0011aa9:	e8 5e 19 00 00       	call   c001340c <Process::Process(char const*, Process*, char**)>
c0011aae:	83 c4 10             	add    esp,0x10
c0011ab1:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011ab8:	75 bc                	jne    c0011a76 <sysCallSpawn(regs*)+0xe>
c0011aba:	83 ec 0c             	sub    esp,0xc
c0011abd:	56                   	push   esi
c0011abe:	e8 3d 1e 00 00       	call   c0013900 <Process::createUserThread()>
c0011ac3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	99                   	cdq    
c0011ac9:	59                   	pop    ecx
c0011aca:	5b                   	pop    ebx
c0011acb:	5e                   	pop    esi
c0011acc:	c3                   	ret    
c0011acd:	31 c0                	xor    eax,eax
c0011acf:	eb d1                	jmp    c0011aa2 <sysCallSpawn(regs*)+0x3a>

c0011ad1 <sysCallGetEnv(regs*)>:
c0011ad1:	57                   	push   edi
c0011ad2:	56                   	push   esi
c0011ad3:	53                   	push   ebx
c0011ad4:	83 ec 1c             	sub    esp,0x1c
c0011ad7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011adb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011ae3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011ae6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ae9:	50                   	push   eax
c0011aea:	e8 30 eb ff ff       	call   c001061f <Krnl::getProcessTotalEnvCount(Process*)>
c0011aef:	83 c4 10             	add    esp,0x10
c0011af2:	39 c7                	cmp    edi,eax
c0011af4:	7c 14                	jl     c0011b0a <sysCallGetEnv(regs*)+0x39>
c0011af6:	85 f6                	test   esi,esi
c0011af8:	75 0b                	jne    c0011b05 <sysCallGetEnv(regs*)+0x34>
c0011afa:	83 c4 10             	add    esp,0x10
c0011afd:	31 c0                	xor    eax,eax
c0011aff:	5b                   	pop    ebx
c0011b00:	31 d2                	xor    edx,edx
c0011b02:	5e                   	pop    esi
c0011b03:	5f                   	pop    edi
c0011b04:	c3                   	ret    
c0011b05:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b08:	eb f0                	jmp    c0011afa <sysCallGetEnv(regs*)+0x29>
c0011b0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b0e:	52                   	push   edx
c0011b0f:	57                   	push   edi
c0011b10:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b16:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011b19:	51                   	push   ecx
c0011b1a:	50                   	push   eax
c0011b1b:	e8 1f eb ff ff       	call   c001063f <Krnl::getProcessEnvPair(Process*, int)>
c0011b20:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011b23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b2b:	83 c4 0c             	add    esp,0xc
c0011b2e:	85 db                	test   ebx,ebx
c0011b30:	75 23                	jne    c0011b55 <sysCallGetEnv(regs*)+0x84>
c0011b32:	83 ec 0c             	sub    esp,0xc
c0011b35:	50                   	push   eax
c0011b36:	e8 25 ea fe ff       	call   c0000560 <strlen>
c0011b3b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b3e:	89 c3                	mov    ebx,eax
c0011b40:	e8 1b ea fe ff       	call   c0000560 <strlen>
c0011b45:	31 d2                	xor    edx,edx
c0011b47:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	5b                   	pop    ebx
c0011b52:	5e                   	pop    esi
c0011b53:	5f                   	pop    edi
c0011b54:	c3                   	ret    
c0011b55:	83 ec 08             	sub    esp,0x8
c0011b58:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b5b:	50                   	push   eax
c0011b5c:	56                   	push   esi
c0011b5d:	e8 be ea fe ff       	call   c0000620 <strcpy>
c0011b62:	58                   	pop    eax
c0011b63:	5a                   	pop    edx
c0011b64:	68 c3 e8 01 c0       	push   0xc001e8c3
c0011b69:	56                   	push   esi
c0011b6a:	e8 71 ec fe ff       	call   c00007e0 <strcat>
c0011b6f:	59                   	pop    ecx
c0011b70:	5b                   	pop    ebx
c0011b71:	57                   	push   edi
c0011b72:	56                   	push   esi
c0011b73:	e8 68 ec fe ff       	call   c00007e0 <strcat>
c0011b78:	83 c4 10             	add    esp,0x10
c0011b7b:	e9 7a ff ff ff       	jmp    c0011afa <sysCallGetEnv(regs*)+0x29>

c0011b80 <sysSetFatAttrib(regs*)>:
c0011b80:	57                   	push   edi
c0011b81:	56                   	push   esi
c0011b82:	53                   	push   ebx
c0011b83:	83 ec 1c             	sub    esp,0x1c
c0011b86:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011b8a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011b8d:	68 14 01 00 00       	push   0x114
c0011b92:	e8 c2 62 ff ff       	call   c0007e59 <malloc>
c0011b97:	83 c4 0c             	add    esp,0xc
c0011b9a:	89 c3                	mov    ebx,eax
c0011b9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba4:	50                   	push   eax
c0011ba5:	57                   	push   edi
c0011ba6:	53                   	push   ebx
c0011ba7:	e8 b2 95 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011bac:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011baf:	83 c4 0c             	add    esp,0xc
c0011bb2:	0f b6 d4             	movzx  edx,ah
c0011bb5:	25 ff 00 00 00       	and    eax,0xff
c0011bba:	52                   	push   edx
c0011bbb:	50                   	push   eax
c0011bbc:	53                   	push   ebx
c0011bbd:	e8 6e 98 ff ff       	call   c000b430 <File::chfatattr(unsigned char, unsigned char)>
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	85 db                	test   ebx,ebx
c0011bc7:	74 14                	je     c0011bdd <sysSetFatAttrib(regs*)+0x5d>
c0011bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bcd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bcf:	83 ec 0c             	sub    esp,0xc
c0011bd2:	53                   	push   ebx
c0011bd3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bdd:	85 c0                	test   eax,eax
c0011bdf:	0f 95 c0             	setne  al
c0011be2:	31 d2                	xor    edx,edx
c0011be4:	25 ff 00 00 00       	and    eax,0xff
c0011be9:	f7 d8                	neg    eax
c0011beb:	83 d2 00             	adc    edx,0x0
c0011bee:	83 c4 10             	add    esp,0x10
c0011bf1:	f7 da                	neg    edx
c0011bf3:	5b                   	pop    ebx
c0011bf4:	5e                   	pop    esi
c0011bf5:	5f                   	pop    edi
c0011bf6:	c3                   	ret    

c0011bf7 <sysPipe(regs*)>:
c0011bf7:	57                   	push   edi
c0011bf8:	56                   	push   esi
c0011bf9:	53                   	push   ebx
c0011bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bfe:	83 ec 0c             	sub    esp,0xc
c0011c01:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c04:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c07:	6a 20                	push   0x20
c0011c09:	e8 4b 62 ff ff       	call   c0007e59 <malloc>
c0011c0e:	89 c3                	mov    ebx,eax
c0011c10:	58                   	pop    eax
c0011c11:	5a                   	pop    edx
c0011c12:	68 00 50 00 00       	push   0x5000
c0011c17:	53                   	push   ebx
c0011c18:	e8 33 6c ff ff       	call   c0008850 <Pipe::Pipe(int)>
c0011c1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c20:	e8 25 79 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011c25:	89 07                	mov    DWORD PTR [edi],eax
c0011c27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c2a:	e8 1b 79 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011c2f:	83 c4 10             	add    esp,0x10
c0011c32:	89 06                	mov    DWORD PTR [esi],eax
c0011c34:	31 d2                	xor    edx,edx
c0011c36:	5b                   	pop    ebx
c0011c37:	31 c0                	xor    eax,eax
c0011c39:	5e                   	pop    esi
c0011c3a:	5f                   	pop    edi
c0011c3b:	c3                   	ret    

c0011c3c <sysGetUnixTime(regs*)>:
c0011c3c:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0011c41:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011c47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c4b:	e9 1e 9f ff ff       	jmp    c000bb6e <Clock::timeInSecondsLocal()>

c0011c50 <string_ends_with(char const*, char const*)>:
c0011c50:	57                   	push   edi
c0011c51:	56                   	push   esi
c0011c52:	53                   	push   ebx
c0011c53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c57:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011c5b:	83 ec 0c             	sub    esp,0xc
c0011c5e:	53                   	push   ebx
c0011c5f:	e8 fc e8 fe ff       	call   c0000560 <strlen>
c0011c64:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c67:	89 c6                	mov    esi,eax
c0011c69:	e8 f2 e8 fe ff       	call   c0000560 <strlen>
c0011c6e:	83 c4 10             	add    esp,0x10
c0011c71:	39 c6                	cmp    esi,eax
c0011c73:	7d 06                	jge    c0011c7b <string_ends_with(char const*, char const*)+0x2b>
c0011c75:	5b                   	pop    ebx
c0011c76:	31 c0                	xor    eax,eax
c0011c78:	5e                   	pop    esi
c0011c79:	5f                   	pop    edi
c0011c7a:	c3                   	ret    
c0011c7b:	83 ec 08             	sub    esp,0x8
c0011c7e:	29 c6                	sub    esi,eax
c0011c80:	57                   	push   edi
c0011c81:	01 f3                	add    ebx,esi
c0011c83:	53                   	push   ebx
c0011c84:	e8 77 ea fe ff       	call   c0000700 <strcmp>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	85 c0                	test   eax,eax
c0011c8e:	5b                   	pop    ebx
c0011c8f:	0f 94 c0             	sete   al
c0011c92:	5e                   	pop    esi
c0011c93:	25 ff 00 00 00       	and    eax,0xff
c0011c98:	5f                   	pop    edi
c0011c99:	c3                   	ret    

c0011c9a <sysCallOpen(regs*)>:
c0011c9a:	56                   	push   esi
c0011c9b:	53                   	push   ebx
c0011c9c:	81 ec 04 01 00 00    	sub    esp,0x104
c0011ca2:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011ca9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011cac:	85 c9                	test   ecx,ecx
c0011cae:	0f 84 b9 01 00 00    	je     c0011e6d <sysCallOpen(regs*)+0x1d3>
c0011cb4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011cb7:	85 c0                	test   eax,eax
c0011cb9:	0f 84 ae 01 00 00    	je     c0011e6d <sysCallOpen(regs*)+0x1d3>
c0011cbf:	52                   	push   edx
c0011cc0:	68 c5 e8 01 c0       	push   0xc001e8c5
c0011cc5:	50                   	push   eax
c0011cc6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011cca:	56                   	push   esi
c0011ccb:	e8 e4 92 ff ff       	call   c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011cd0:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cd3:	e8 88 e8 fe ff       	call   c0000560 <strlen>
c0011cd8:	83 c4 10             	add    esp,0x10
c0011cdb:	48                   	dec    eax
c0011cdc:	74 1d                	je     c0011cfb <sysCallOpen(regs*)+0x61>
c0011cde:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011ce1:	eb 0f                	jmp    c0011cf2 <sysCallOpen(regs*)+0x58>
c0011ce3:	80 fa 3a             	cmp    dl,0x3a
c0011ce6:	74 0f                	je     c0011cf7 <sysCallOpen(regs*)+0x5d>
c0011ce8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011cec:	48                   	dec    eax
c0011ced:	74 0c                	je     c0011cfb <sysCallOpen(regs*)+0x61>
c0011cef:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011cf2:	80 fa 2e             	cmp    dl,0x2e
c0011cf5:	75 ec                	jne    c0011ce3 <sysCallOpen(regs*)+0x49>
c0011cf7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011cfb:	83 ec 08             	sub    esp,0x8
c0011cfe:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011d03:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d06:	50                   	push   eax
c0011d07:	e8 44 ff ff ff       	call   c0011c50 <string_ends_with(char const*, char const*)>
c0011d0c:	83 c4 10             	add    esp,0x10
c0011d0f:	85 c0                	test   eax,eax
c0011d11:	74 1d                	je     c0011d30 <sysCallOpen(regs*)+0x96>
c0011d13:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d16:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d23:	81 c4 04 01 00 00    	add    esp,0x104
c0011d29:	31 c0                	xor    eax,eax
c0011d2b:	31 d2                	xor    edx,edx
c0011d2d:	5b                   	pop    ebx
c0011d2e:	5e                   	pop    esi
c0011d2f:	c3                   	ret    
c0011d30:	83 ec 08             	sub    esp,0x8
c0011d33:	68 ce e8 01 c0       	push   0xc001e8ce
c0011d38:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d3b:	50                   	push   eax
c0011d3c:	e8 0f ff ff ff       	call   c0011c50 <string_ends_with(char const*, char const*)>
c0011d41:	83 c4 10             	add    esp,0x10
c0011d44:	85 c0                	test   eax,eax
c0011d46:	75 cb                	jne    c0011d13 <sysCallOpen(regs*)+0x79>
c0011d48:	83 ec 08             	sub    esp,0x8
c0011d4b:	68 ca e8 01 c0       	push   0xc001e8ca
c0011d50:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d53:	50                   	push   eax
c0011d54:	e8 a7 e9 fe ff       	call   c0000700 <strcmp>
c0011d59:	83 c4 10             	add    esp,0x10
c0011d5c:	85 c0                	test   eax,eax
c0011d5e:	74 b3                	je     c0011d13 <sysCallOpen(regs*)+0x79>
c0011d60:	83 ec 08             	sub    esp,0x8
c0011d63:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011d68:	56                   	push   esi
c0011d69:	e8 e2 fe ff ff       	call   c0011c50 <string_ends_with(char const*, char const*)>
c0011d6e:	83 c4 10             	add    esp,0x10
c0011d71:	85 c0                	test   eax,eax
c0011d73:	75 9e                	jne    c0011d13 <sysCallOpen(regs*)+0x79>
c0011d75:	83 ec 08             	sub    esp,0x8
c0011d78:	68 d3 e8 01 c0       	push   0xc001e8d3
c0011d7d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d80:	50                   	push   eax
c0011d81:	e8 ca fe ff ff       	call   c0011c50 <string_ends_with(char const*, char const*)>
c0011d86:	83 c4 10             	add    esp,0x10
c0011d89:	85 c0                	test   eax,eax
c0011d8b:	0f 85 ef 00 00 00    	jne    c0011e80 <sysCallOpen(regs*)+0x1e6>
c0011d91:	83 ec 08             	sub    esp,0x8
c0011d94:	68 d8 e8 01 c0       	push   0xc001e8d8
c0011d99:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d9c:	50                   	push   eax
c0011d9d:	e8 ae fe ff ff       	call   c0011c50 <string_ends_with(char const*, char const*)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	85 c0                	test   eax,eax
c0011da7:	0f 85 d3 00 00 00    	jne    c0011e80 <sysCallOpen(regs*)+0x1e6>
c0011dad:	83 ec 08             	sub    esp,0x8
c0011db0:	68 d4 e8 01 c0       	push   0xc001e8d4
c0011db5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011db8:	51                   	push   ecx
c0011db9:	e8 42 e9 fe ff       	call   c0000700 <strcmp>
c0011dbe:	83 c4 10             	add    esp,0x10
c0011dc1:	85 c0                	test   eax,eax
c0011dc3:	0f 84 b7 00 00 00    	je     c0011e80 <sysCallOpen(regs*)+0x1e6>
c0011dc9:	83 ec 08             	sub    esp,0x8
c0011dcc:	68 d3 e8 01 c0       	push   0xc001e8d3
c0011dd1:	56                   	push   esi
c0011dd2:	e8 79 fe ff ff       	call   c0011c50 <string_ends_with(char const*, char const*)>
c0011dd7:	83 c4 10             	add    esp,0x10
c0011dda:	85 c0                	test   eax,eax
c0011ddc:	0f 85 9e 00 00 00    	jne    c0011e80 <sysCallOpen(regs*)+0x1e6>
c0011de2:	83 ec 0c             	sub    esp,0xc
c0011de5:	68 14 01 00 00       	push   0x114
c0011dea:	e8 6a 60 ff ff       	call   c0007e59 <malloc>
c0011def:	83 c4 0c             	add    esp,0xc
c0011df2:	89 c6                	mov    esi,eax
c0011df4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011df9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dfc:	50                   	push   eax
c0011dfd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e00:	52                   	push   edx
c0011e01:	56                   	push   esi
c0011e02:	e8 57 93 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0011e07:	83 c4 10             	add    esp,0x10
c0011e0a:	85 f6                	test   esi,esi
c0011e0c:	74 5f                	je     c0011e6d <sysCallOpen(regs*)+0x1d3>
c0011e0e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e11:	89 d0                	mov    eax,edx
c0011e13:	25 ff 00 00 00       	and    eax,0xff
c0011e18:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e1b:	89 d0                	mov    eax,edx
c0011e1d:	83 e0 01             	and    eax,0x1
c0011e20:	f6 c2 02             	test   dl,0x2
c0011e23:	74 03                	je     c0011e28 <sysCallOpen(regs*)+0x18e>
c0011e25:	83 c8 02             	or     eax,0x2
c0011e28:	f6 c2 04             	test   dl,0x4
c0011e2b:	74 03                	je     c0011e30 <sysCallOpen(regs*)+0x196>
c0011e2d:	83 c8 04             	or     eax,0x4
c0011e30:	f6 c2 08             	test   dl,0x8
c0011e33:	74 03                	je     c0011e38 <sysCallOpen(regs*)+0x19e>
c0011e35:	83 c8 0a             	or     eax,0xa
c0011e38:	83 e2 10             	and    edx,0x10
c0011e3b:	74 03                	je     c0011e40 <sysCallOpen(regs*)+0x1a6>
c0011e3d:	83 c8 12             	or     eax,0x12
c0011e40:	83 ec 08             	sub    esp,0x8
c0011e43:	50                   	push   eax
c0011e44:	56                   	push   esi
c0011e45:	e8 d4 93 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	85 c0                	test   eax,eax
c0011e4f:	75 1c                	jne    c0011e6d <sysCallOpen(regs*)+0x1d3>
c0011e51:	83 ec 0c             	sub    esp,0xc
c0011e54:	56                   	push   esi
c0011e55:	e8 f0 76 ff ff       	call   c000954a <UnixFile::getFileDescriptor()>
c0011e5a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	89 02                	mov    DWORD PTR [edx],eax
c0011e62:	c1 f8 1f             	sar    eax,0x1f
c0011e65:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e68:	e9 b6 fe ff ff       	jmp    c0011d23 <sysCallOpen(regs*)+0x89>
c0011e6d:	81 c4 04 01 00 00    	add    esp,0x104
c0011e73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e78:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e7d:	5b                   	pop    ebx
c0011e7e:	5e                   	pop    esi
c0011e7f:	c3                   	ret    
c0011e80:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e83:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011e89:	e9 8e fe ff ff       	jmp    c0011d1c <sysCallOpen(regs*)+0x82>

c0011e8e <Sys::loadSyscalls()>:
c0011e8e:	c7 05 40 34 02 c0 6a 12 01 c0 	mov    DWORD PTR ds:0xc0023440,0xc001126a
c0011e98:	c7 05 44 34 02 c0 61 0e 01 c0 	mov    DWORD PTR ds:0xc0023444,0xc0010e61
c0011ea2:	c7 05 48 34 02 c0 50 10 01 c0 	mov    DWORD PTR ds:0xc0023448,0xc0011050
c0011eac:	c7 05 4c 34 02 c0 a0 11 01 c0 	mov    DWORD PTR ds:0xc002344c,0xc00111a0
c0011eb6:	c7 05 50 34 02 c0 e8 0f 01 c0 	mov    DWORD PTR ds:0xc0023450,0xc0010fe8
c0011ec0:	c7 05 54 34 02 c0 98 0e 01 c0 	mov    DWORD PTR ds:0xc0023454,0xc0010e98
c0011eca:	c7 05 58 34 02 c0 79 0e 01 c0 	mov    DWORD PTR ds:0xc0023458,0xc0010e79
c0011ed4:	c7 05 5c 34 02 c0 a5 10 01 c0 	mov    DWORD PTR ds:0xc002345c,0xc00110a5
c0011ede:	c7 05 64 34 02 c0 34 17 01 c0 	mov    DWORD PTR ds:0xc0023464,0xc0011734
c0011ee8:	c7 05 60 34 02 c0 9a 1c 01 c0 	mov    DWORD PTR ds:0xc0023460,0xc0011c9a
c0011ef2:	c7 05 68 34 02 c0 94 17 01 c0 	mov    DWORD PTR ds:0xc0023468,0xc0011794
c0011efc:	c7 05 6c 34 02 c0 68 14 01 c0 	mov    DWORD PTR ds:0xc002346c,0xc0011468
c0011f06:	c7 05 70 34 02 c0 8f 12 01 c0 	mov    DWORD PTR ds:0xc0023470,0xc001128f
c0011f10:	c7 05 74 34 02 c0 94 12 01 c0 	mov    DWORD PTR ds:0xc0023474,0xc0011294
c0011f1a:	c7 05 78 34 02 c0 5f 18 01 c0 	mov    DWORD PTR ds:0xc0023478,0xc001185f
c0011f24:	c7 05 7c 34 02 c0 0b 18 01 c0 	mov    DWORD PTR ds:0xc002347c,0xc001180b
c0011f2e:	c7 05 80 34 02 c0 44 15 01 c0 	mov    DWORD PTR ds:0xc0023480,0xc0011544
c0011f38:	c7 05 84 34 02 c0 9d 15 01 c0 	mov    DWORD PTR ds:0xc0023484,0xc001159d
c0011f42:	c7 05 88 34 02 c0 0c 16 01 c0 	mov    DWORD PTR ds:0xc0023488,0xc001160c
c0011f4c:	c7 05 8c 34 02 c0 99 12 01 c0 	mov    DWORD PTR ds:0xc002348c,0xc0011299
c0011f56:	c7 05 90 34 02 c0 d1 18 01 c0 	mov    DWORD PTR ds:0xc0023490,0xc00118d1
c0011f60:	c7 05 94 34 02 c0 ee 18 01 c0 	mov    DWORD PTR ds:0xc0023494,0xc00118ee
c0011f6a:	c7 05 98 34 02 c0 ee 18 01 c0 	mov    DWORD PTR ds:0xc0023498,0xc00118ee
c0011f74:	c7 05 9c 34 02 c0 24 19 01 c0 	mov    DWORD PTR ds:0xc002349c,0xc0011924
c0011f7e:	c7 05 a0 34 02 c0 8b 19 01 c0 	mov    DWORD PTR ds:0xc00234a0,0xc001198b
c0011f88:	c7 05 a4 34 02 c0 a3 12 01 c0 	mov    DWORD PTR ds:0xc00234a4,0xc00112a3
c0011f92:	c7 05 a8 34 02 c0 f2 19 01 c0 	mov    DWORD PTR ds:0xc00234a8,0xc00119f2
c0011f9c:	c7 05 ac 34 02 c0 25 14 01 c0 	mov    DWORD PTR ds:0xc00234ac,0xc0011425
c0011fa6:	c7 05 b0 34 02 c0 b3 12 01 c0 	mov    DWORD PTR ds:0xc00234b0,0xc00112b3
c0011fb0:	c7 05 b4 34 02 c0 e8 14 01 c0 	mov    DWORD PTR ds:0xc00234b4,0xc00114e8
c0011fba:	c7 05 b8 34 02 c0 3f 1a 01 c0 	mov    DWORD PTR ds:0xc00234b8,0xc0011a3f
c0011fc4:	c7 05 bc 34 02 c0 81 16 01 c0 	mov    DWORD PTR ds:0xc00234bc,0xc0011681
c0011fce:	c7 05 c0 34 02 c0 68 1a 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc0011a68
c0011fd8:	c7 05 c4 34 02 c0 d1 1a 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0011ad1
c0011fe2:	c7 05 cc 34 02 c0 bb 12 01 c0 	mov    DWORD PTR ds:0xc00234cc,0xc00112bb
c0011fec:	c7 05 d0 34 02 c0 28 13 01 c0 	mov    DWORD PTR ds:0xc00234d0,0xc0011328
c0011ff6:	c7 05 d4 34 02 c0 72 13 01 c0 	mov    DWORD PTR ds:0xc00234d4,0xc0011372
c0012000:	c7 05 d8 34 02 c0 80 1b 01 c0 	mov    DWORD PTR ds:0xc00234d8,0xc0011b80
c001200a:	c7 05 dc 34 02 c0 09 19 01 c0 	mov    DWORD PTR ds:0xc00234dc,0xc0011909
c0012014:	c7 05 e0 34 02 c0 c7 13 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc00113c7
c001201e:	c7 05 e4 34 02 c0 f7 1b 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0011bf7
c0012028:	c7 05 e8 34 02 c0 3c 1c 01 c0 	mov    DWORD PTR ds:0xc00234e8,0xc0011c3c
c0012032:	c7 05 ec 34 02 c0 40 0f 01 c0 	mov    DWORD PTR ds:0xc00234ec,0xc0010f40
c001203c:	c7 05 f0 34 02 c0 c1 10 01 c0 	mov    DWORD PTR ds:0xc00234f0,0xc00110c1
c0012046:	c7 05 f4 34 02 c0 56 11 01 c0 	mov    DWORD PTR ds:0xc00234f4,0xc0011156
c0012050:	c7 05 f8 34 02 c0 2b 0e 01 c0 	mov    DWORD PTR ds:0xc00234f8,0xc0010e2b
c001205a:	c7 05 fc 34 02 c0 08 12 01 c0 	mov    DWORD PTR ds:0xc00234fc,0xc0011208
c0012064:	c7 05 00 35 02 c0 a4 0e 01 c0 	mov    DWORD PTR ds:0xc0023500,0xc0010ea4
c001206e:	c7 05 04 35 02 c0 be 0e 01 c0 	mov    DWORD PTR ds:0xc0023504,0xc0010ebe
c0012078:	c3                   	ret    

c0012079 <Sys::systemCall(regs*, void*)>:
c0012079:	53                   	push   ebx
c001207a:	83 ec 08             	sub    esp,0x8
c001207d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012081:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012084:	83 f8 7f             	cmp    eax,0x7f
c0012087:	77 16                	ja     c001209f <Sys::systemCall(regs*, void*)+0x26>
c0012089:	8b 14 85 40 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbc0]
c0012090:	85 d2                	test   edx,edx
c0012092:	74 0b                	je     c001209f <Sys::systemCall(regs*, void*)+0x26>
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	53                   	push   ebx
c0012098:	ff d2                	call   edx
c001209a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001209d:	eb 0d                	jmp    c00120ac <Sys::systemCall(regs*, void*)+0x33>
c001209f:	52                   	push   edx
c00120a0:	52                   	push   edx
c00120a1:	50                   	push   eax
c00120a2:	68 dd e8 01 c0       	push   0xc001e8dd
c00120a7:	e8 3c 8b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00120ac:	83 c4 10             	add    esp,0x10
c00120af:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00120b4:	31 d2                	xor    edx,edx
c00120b6:	83 c4 08             	add    esp,0x8
c00120b9:	5b                   	pop    ebx
c00120ba:	c3                   	ret    

c00120bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00120bb:	55                   	push   ebp
c00120bc:	57                   	push   edi
c00120bd:	56                   	push   esi
c00120be:	53                   	push   ebx
c00120bf:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00120c5:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00120cd:	0f 95 c2             	setne  dl
c00120d0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00120d8:	0f 94 c0             	sete   al
c00120db:	84 c2                	test   dl,al
c00120dd:	74 34                	je     c0012113 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00120df:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00120ea:	74 27                	je     c0012113 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00120ec:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00120f3:	05 00 10 00 00       	add    eax,0x1000
c00120f8:	89 c1                	mov    ecx,eax
c00120fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ff:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012105:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001210c:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012113:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001211a:	83 ec 0c             	sub    esp,0xc
c001211d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012123:	6a 01                	push   0x1
c0012125:	e8 6b 78 ff ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c001212a:	83 c4 10             	add    esp,0x10
c001212d:	89 c3                	mov    ebx,eax
c001212f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012135:	0f 86 25 01 00 00    	jbe    c0012260 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c001213b:	c1 ee 0c             	shr    esi,0xc
c001213e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012145:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0012149:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012151:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0012158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001215c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012163:	29 ef                	sub    edi,ebp
c0012165:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0012169:	0f 83 f8 00 00 00    	jae    c0012267 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c001216f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012175:	76 05                	jbe    c001217c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0012177:	bf 00 10 00 00       	mov    edi,0x1000
c001217c:	83 ec 0c             	sub    esp,0xc
c001217f:	31 d2                	xor    edx,edx
c0012181:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012188:	8b 08                	mov    ecx,DWORD PTR [eax]
c001218a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001218e:	50                   	push   eax
c001218f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012193:	56                   	push   esi
c0012194:	52                   	push   edx
c0012195:	57                   	push   edi
c0012196:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001219d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121a0:	83 c4 20             	add    esp,0x20
c00121a3:	85 c0                	test   eax,eax
c00121a5:	75 06                	jne    c00121ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00121a7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00121ab:	74 13                	je     c00121c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00121ad:	83 ec 0c             	sub    esp,0xc
c00121b0:	53                   	push   ebx
c00121b1:	e8 0f 7b ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	31 c0                	xor    eax,eax
c00121bb:	e9 7c 01 00 00       	jmp    c001233c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00121c0:	fa                   	cli    
c00121c1:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00121c7:	e8 5a 60 ff ff       	call   c0008226 <Phys::allocatePage()>
c00121cc:	6a 07                	push   0x7
c00121ce:	89 c7                	mov    edi,eax
c00121d0:	53                   	push   ebx
c00121d1:	50                   	push   eax
c00121d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121da:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121e0:	e8 45 7e ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c00121e5:	83 c4 0c             	add    esp,0xc
c00121e8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00121ef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121f5:	6a 00                	push   0x0
c00121f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012205:	e8 92 7c ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c001220a:	58                   	pop    eax
c001220b:	5a                   	pop    edx
c001220c:	68 07 0c 00 00       	push   0xc07
c0012211:	55                   	push   ebp
c0012212:	57                   	push   edi
c0012213:	89 df                	mov    edi,ebx
c0012215:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001221c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012222:	6a 00                	push   0x0
c0012224:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012229:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001222c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012232:	e8 b3 81 ff ff       	call   c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012237:	b9 00 10 00 00       	mov    ecx,0x1000
c001223c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001223e:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0012243:	83 c4 20             	add    esp,0x20
c0012246:	48                   	dec    eax
c0012247:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001224c:	85 c0                	test   eax,eax
c001224e:	75 01                	jne    c0012251 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012250:	fb                   	sti    
c0012251:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012257:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001225b:	e9 f1 fe ff ff       	jmp    c0012151 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012260:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012267:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001226e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012274:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001227a:	0f 86 ae 00 00 00    	jbe    c001232e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012280:	fa                   	cli    
c0012281:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0012287:	c1 ee 0c             	shr    esi,0xc
c001228a:	51                   	push   ecx
c001228b:	31 ff                	xor    edi,edi
c001228d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012294:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001229a:	6a 00                	push   0x0
c001229c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122a4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122aa:	e8 ed 7b ff ff       	call   c0009e9c <VAS::mapOtherVASIn(bool, VAS*)>
c00122af:	83 c4 10             	add    esp,0x10
c00122b2:	e8 6f 5f ff ff       	call   c0008226 <Phys::allocatePage()>
c00122b7:	47                   	inc    edi
c00122b8:	6a 07                	push   0x7
c00122ba:	53                   	push   ebx
c00122bb:	50                   	push   eax
c00122bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00122c6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00122c9:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00122cf:	e8 56 7d ff ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c00122d4:	58                   	pop    eax
c00122d5:	5a                   	pop    edx
c00122d6:	68 07 0c 00 00       	push   0xc07
c00122db:	55                   	push   ebp
c00122dc:	81 c5 00 10 00 00    	add    ebp,0x1000
c00122e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122e6:	50                   	push   eax
c00122e7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00122ee:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122f4:	6a 00                	push   0x0
c00122f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122fe:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012304:	e8 e1 80 ff ff       	call   c000a3ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012309:	83 c4 1c             	add    esp,0x1c
c001230c:	68 00 10 00 00       	push   0x1000
c0012311:	6a 00                	push   0x0
c0012313:	53                   	push   ebx
c0012314:	e8 d7 e1 fe ff       	call   c00004f0 <memset>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	39 fe                	cmp    esi,edi
c001231e:	77 92                	ja     c00122b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012320:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0012325:	48                   	dec    eax
c0012326:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001232b:	75 01                	jne    c001232e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001232d:	fb                   	sti    
c001232e:	83 ec 0c             	sub    esp,0xc
c0012331:	53                   	push   ebx
c0012332:	e8 8e 79 ff ff       	call   c0009cc5 <Virt::freeKernelVirtualPages(unsigned long)>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	b0 01                	mov    al,0x1
c001233c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012342:	5b                   	pop    ebx
c0012343:	5e                   	pop    esi
c0012344:	5f                   	pop    edi
c0012345:	5d                   	pop    ebp
c0012346:	c3                   	ret    

c0012347 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0012347:	55                   	push   ebp
c0012348:	57                   	push   edi
c0012349:	56                   	push   esi
c001234a:	53                   	push   ebx
c001234b:	83 ec 48             	sub    esp,0x48
c001234e:	68 14 01 00 00       	push   0x114
c0012353:	e8 01 5b ff ff       	call   c0007e59 <malloc>
c0012358:	83 c4 0c             	add    esp,0xc
c001235b:	89 c6                	mov    esi,eax
c001235d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012361:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012365:	50                   	push   eax
c0012366:	e8 f3 8d ff ff       	call   c000b15e <File::File(char const*, Process*)>
c001236b:	58                   	pop    eax
c001236c:	5a                   	pop    edx
c001236d:	6a 01                	push   0x1
c001236f:	56                   	push   esi
c0012370:	e8 a9 8e ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	85 c0                	test   eax,eax
c001237a:	0f 85 47 01 00 00    	jne    c00124c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012380:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012388:	83 ec 0c             	sub    esp,0xc
c001238b:	6a 34                	push   0x34
c001238d:	e8 c7 5a ff ff       	call   c0007e59 <malloc>
c0012392:	89 c3                	mov    ebx,eax
c0012394:	58                   	pop    eax
c0012395:	8b 06                	mov    eax,DWORD PTR [esi]
c0012397:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001239b:	57                   	push   edi
c001239c:	53                   	push   ebx
c001239d:	6a 00                	push   0x0
c001239f:	6a 34                	push   0x34
c00123a1:	56                   	push   esi
c00123a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123a5:	83 c4 20             	add    esp,0x20
c00123a8:	85 c0                	test   eax,eax
c00123aa:	0f 85 17 01 00 00    	jne    c00124c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123b0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00123b6:	0f 85 0b 01 00 00    	jne    c00124c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123bf:	85 c0                	test   eax,eax
c00123c1:	0f 84 00 01 00 00    	je     c00124c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123c7:	31 d2                	xor    edx,edx
c00123c9:	55                   	push   ebp
c00123ca:	52                   	push   edx
c00123cb:	50                   	push   eax
c00123cc:	56                   	push   esi
c00123cd:	e8 0a 8f ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	85 c0                	test   eax,eax
c00123d7:	0f 85 ea 00 00 00    	jne    c00124c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123dd:	83 ec 0c             	sub    esp,0xc
c00123e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00123e3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00123e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00123eb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00123ef:	0f af c2             	imul   eax,edx
c00123f2:	50                   	push   eax
c00123f3:	e8 61 5a ff ff       	call   c0007e59 <malloc>
c00123f8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00123fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00123fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012401:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012405:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012409:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001240d:	0f af c2             	imul   eax,edx
c0012410:	99                   	cdq    
c0012411:	52                   	push   edx
c0012412:	50                   	push   eax
c0012413:	56                   	push   esi
c0012414:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012417:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001241a:	83 c4 20             	add    esp,0x20
c001241d:	85 c0                	test   eax,eax
c001241f:	0f 84 a2 00 00 00    	je     c00124c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012425:	31 d2                	xor    edx,edx
c0012427:	51                   	push   ecx
c0012428:	52                   	push   edx
c0012429:	50                   	push   eax
c001242a:	56                   	push   esi
c001242b:	e8 ac 8e ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	85 c0                	test   eax,eax
c0012435:	0f 85 8c 00 00 00    	jne    c00124c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001243b:	83 ec 0c             	sub    esp,0xc
c001243e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012442:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012446:	31 ed                	xor    ebp,ebp
c0012448:	0f af c2             	imul   eax,edx
c001244b:	50                   	push   eax
c001244c:	e8 08 5a ff ff       	call   c0007e59 <malloc>
c0012451:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012457:	89 3c 24             	mov    DWORD PTR [esp],edi
c001245a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001245e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012462:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012466:	0f af c2             	imul   eax,edx
c0012469:	99                   	cdq    
c001246a:	52                   	push   edx
c001246b:	50                   	push   eax
c001246c:	56                   	push   esi
c001246d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012470:	83 c4 20             	add    esp,0x20
c0012473:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001247b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001247f:	0f 86 80 00 00 00    	jbe    c0012505 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012485:	0f b7 fd             	movzx  edi,bp
c0012488:	c1 e7 05             	shl    edi,0x5
c001248b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001248f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012492:	75 6b                	jne    c00124ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012494:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012497:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001249b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001249e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124a2:	52                   	push   edx
c00124a3:	31 d2                	xor    edx,edx
c00124a5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124a8:	52                   	push   edx
c00124a9:	50                   	push   eax
c00124aa:	56                   	push   esi
c00124ab:	e8 2c 8e ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00124b0:	83 c4 10             	add    esp,0x10
c00124b3:	85 c0                	test   eax,eax
c00124b5:	74 17                	je     c00124ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	68 f1 e8 01 c0       	push   0xc001e8f1
c00124bf:	e8 24 87 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	31 c0                	xor    eax,eax
c00124c9:	e9 87 00 00 00       	jmp    c0012555 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00124ce:	83 ec 0c             	sub    esp,0xc
c00124d1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00124d4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00124d7:	50                   	push   eax
c00124d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00124dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124e0:	56                   	push   esi
c00124e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00124e5:	e8 d1 fb ff ff       	call   c00120bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00124ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ee:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00124f2:	83 c4 20             	add    esp,0x20
c00124f5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00124f9:	73 04                	jae    c00124ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00124fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124ff:	45                   	inc    ebp
c0012500:	e9 76 ff ff ff       	jmp    c001247b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012505:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012509:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001250d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012511:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012517:	83 ec 0c             	sub    esp,0xc
c001251a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012520:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012525:	05 00 10 00 00       	add    eax,0x1000
c001252a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001252d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012531:	e8 33 59 ff ff       	call   c0007e69 <free>
c0012536:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012539:	e8 2b 59 ff ff       	call   c0007e69 <free>
c001253e:	58                   	pop    eax
c001253f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012543:	e8 21 59 ff ff       	call   c0007e69 <free>
c0012548:	89 34 24             	mov    DWORD PTR [esp],esi
c001254b:	e8 2c 8d ff ff       	call   c000b27c <File::close()>
c0012550:	83 c4 10             	add    esp,0x10
c0012553:	b0 01                	mov    al,0x1
c0012555:	83 c4 3c             	add    esp,0x3c
c0012558:	5b                   	pop    ebx
c0012559:	5e                   	pop    esi
c001255a:	5f                   	pop    edi
c001255b:	5d                   	pop    ebp
c001255c:	c3                   	ret    

c001255d <Thr::runtimeReferenceHelper()>:
c001255d:	83 ec 18             	sub    esp,0x18
c0012560:	68 f9 e8 01 c0       	push   0xc001e8f9
c0012565:	e8 7e 86 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001256a:	fa                   	cli    
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	eb fe                	jmp    c001256e <Thr::runtimeReferenceHelper()+0x11>

c0012570 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012570:	57                   	push   edi
c0012571:	56                   	push   esi
c0012572:	53                   	push   ebx
c0012573:	31 db                	xor    ebx,ebx
c0012575:	39 1d e0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023de0,ebx
c001257b:	7e 3c                	jle    c00125b9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001257d:	8b 34 9d 60 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc2a0]
c0012584:	31 ff                	xor    edi,edi
c0012586:	39 3c 9d 60 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc3a0],edi
c001258d:	7e 27                	jle    c00125b6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001258f:	50                   	push   eax
c0012590:	50                   	push   eax
c0012591:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012595:	8b 06                	mov    eax,DWORD PTR [esi]
c0012597:	03 04 9d e0 3c 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc320]
c001259e:	50                   	push   eax
c001259f:	e8 5c e1 fe ff       	call   c0000700 <strcmp>
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	85 c0                	test   eax,eax
c00125a9:	75 05                	jne    c00125b0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00125ab:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00125ae:	eb 0b                	jmp    c00125bb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00125b0:	83 c6 10             	add    esi,0x10
c00125b3:	47                   	inc    edi
c00125b4:	eb d0                	jmp    c0012586 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00125b6:	43                   	inc    ebx
c00125b7:	eb bc                	jmp    c0012575 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00125b9:	31 c0                	xor    eax,eax
c00125bb:	5b                   	pop    ebx
c00125bc:	5e                   	pop    esi
c00125bd:	5f                   	pop    edi
c00125be:	c3                   	ret    

c00125bf <Thr::loadKernelSymbolTable(char const*)>:
c00125bf:	55                   	push   ebp
c00125c0:	57                   	push   edi
c00125c1:	56                   	push   esi
c00125c2:	53                   	push   ebx
c00125c3:	83 ec 68             	sub    esp,0x68
c00125c6:	8b 35 30 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023e30
c00125cc:	68 14 01 00 00       	push   0x114
c00125d1:	e8 83 58 ff ff       	call   c0007e59 <malloc>
c00125d6:	83 c4 0c             	add    esp,0xc
c00125d9:	89 c3                	mov    ebx,eax
c00125db:	56                   	push   esi
c00125dc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00125e0:	50                   	push   eax
c00125e1:	e8 78 8b ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00125e6:	5e                   	pop    esi
c00125e7:	5f                   	pop    edi
c00125e8:	6a 01                	push   0x1
c00125ea:	53                   	push   ebx
c00125eb:	e8 2e 8c ff ff       	call   c000b21e <File::open(FileOpenMode)>
c00125f0:	83 c4 10             	add    esp,0x10
c00125f3:	85 c0                	test   eax,eax
c00125f5:	74 0a                	je     c0012601 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00125f7:	83 ec 0c             	sub    esp,0xc
c00125fa:	68 1b e9 01 c0       	push   0xc001e91b
c00125ff:	eb 34                	jmp    c0012635 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012601:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012609:	83 ec 0c             	sub    esp,0xc
c001260c:	6a 34                	push   0x34
c001260e:	e8 46 58 ff ff       	call   c0007e59 <malloc>
c0012613:	59                   	pop    ecx
c0012614:	89 c7                	mov    edi,eax
c0012616:	8d 74 24 34          	lea    esi,[esp+0x34]
c001261a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001261c:	56                   	push   esi
c001261d:	57                   	push   edi
c001261e:	6a 00                	push   0x0
c0012620:	6a 34                	push   0x34
c0012622:	53                   	push   ebx
c0012623:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012626:	83 c4 20             	add    esp,0x20
c0012629:	85 c0                	test   eax,eax
c001262b:	74 17                	je     c0012644 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001262d:	83 ec 0c             	sub    esp,0xc
c0012630:	68 32 e9 01 c0       	push   0xc001e932
c0012635:	e8 99 e0 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001263a:	83 c4 10             	add    esp,0x10
c001263d:	31 c0                	xor    eax,eax
c001263f:	e9 31 02 00 00       	jmp    c0012875 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012644:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001264a:	75 e1                	jne    c001262d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001264c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001264f:	85 c0                	test   eax,eax
c0012651:	74 da                	je     c001262d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012653:	52                   	push   edx
c0012654:	31 d2                	xor    edx,edx
c0012656:	52                   	push   edx
c0012657:	50                   	push   eax
c0012658:	53                   	push   ebx
c0012659:	e8 7e 8c ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c001265e:	83 c4 10             	add    esp,0x10
c0012661:	85 c0                	test   eax,eax
c0012663:	75 c8                	jne    c001262d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012665:	83 ec 0c             	sub    esp,0xc
c0012668:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001266c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012670:	31 ed                	xor    ebp,ebp
c0012672:	0f af c2             	imul   eax,edx
c0012675:	50                   	push   eax
c0012676:	e8 de 57 ff ff       	call   c0007e59 <malloc>
c001267b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001267d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012681:	89 34 24             	mov    DWORD PTR [esp],esi
c0012684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012688:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001268c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012690:	0f af c2             	imul   eax,edx
c0012693:	99                   	cdq    
c0012694:	52                   	push   edx
c0012695:	50                   	push   eax
c0012696:	53                   	push   ebx
c0012697:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001269a:	83 c4 20             	add    esp,0x20
c001269d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126ad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00126b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126bd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00126c1:	0f 86 aa 00 00 00    	jbe    c0012771 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00126c7:	0f b7 f5             	movzx  esi,bp
c00126ca:	6b f6 28             	imul   esi,esi,0x28
c00126cd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00126d1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00126d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126d8:	50                   	push   eax
c00126d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00126dd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00126e1:	8b 16                	mov    edx,DWORD PTR [esi]
c00126e3:	6b c0 28             	imul   eax,eax,0x28
c00126e6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00126ea:	89 d0                	mov    eax,edx
c00126ec:	31 d2                	xor    edx,edx
c00126ee:	52                   	push   edx
c00126ef:	50                   	push   eax
c00126f0:	53                   	push   ebx
c00126f1:	e8 e6 8b ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00126f6:	83 c4 0c             	add    esp,0xc
c00126f9:	6a 20                	push   0x20
c00126fb:	6a 00                	push   0x0
c00126fd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012701:	52                   	push   edx
c0012702:	e8 e9 dd fe ff       	call   c00004f0 <memset>
c0012707:	58                   	pop    eax
c0012708:	8b 03                	mov    eax,DWORD PTR [ebx]
c001270a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001270e:	51                   	push   ecx
c001270f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012713:	52                   	push   edx
c0012714:	6a 00                	push   0x0
c0012716:	6a 1f                	push   0x1f
c0012718:	53                   	push   ebx
c0012719:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001271c:	83 c4 18             	add    esp,0x18
c001271f:	68 49 e9 01 c0       	push   0xc001e949
c0012724:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012728:	52                   	push   edx
c0012729:	e8 d2 df fe ff       	call   c0000700 <strcmp>
c001272e:	83 c4 10             	add    esp,0x10
c0012731:	85 c0                	test   eax,eax
c0012733:	75 0f                	jne    c0012744 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012735:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012738:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001273c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012744:	50                   	push   eax
c0012745:	50                   	push   eax
c0012746:	68 51 e9 01 c0       	push   0xc001e951
c001274b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001274f:	50                   	push   eax
c0012750:	e8 ab df fe ff       	call   c0000700 <strcmp>
c0012755:	83 c4 10             	add    esp,0x10
c0012758:	85 c0                	test   eax,eax
c001275a:	75 0f                	jne    c001276b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001275c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001275f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012763:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012767:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001276b:	45                   	inc    ebp
c001276c:	e9 4c ff ff ff       	jmp    c00126bd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012771:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012776:	75 10                	jne    c0012788 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012778:	83 ec 0c             	sub    esp,0xc
c001277b:	68 59 e9 01 c0       	push   0xc001e959
c0012780:	e8 4e df ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0012785:	83 c4 10             	add    esp,0x10
c0012788:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001278d:	75 10                	jne    c001279f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001278f:	83 ec 0c             	sub    esp,0xc
c0012792:	68 59 e9 01 c0       	push   0xc001e959
c0012797:	e8 37 df ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001279c:	83 c4 10             	add    esp,0x10
c001279f:	31 d2                	xor    edx,edx
c00127a1:	50                   	push   eax
c00127a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a6:	52                   	push   edx
c00127a7:	50                   	push   eax
c00127a8:	53                   	push   ebx
c00127a9:	e8 2e 8b ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00127ae:	5a                   	pop    edx
c00127af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00127b3:	e8 a1 56 ff ff       	call   c0007e59 <malloc>
c00127b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127c0:	31 c9                	xor    ecx,ecx
c00127c2:	5e                   	pop    esi
c00127c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127c5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00127c9:	55                   	push   ebp
c00127ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127ce:	51                   	push   ecx
c00127cf:	52                   	push   edx
c00127d0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00127d4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00127d8:	53                   	push   ebx
c00127d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127dc:	83 c4 14             	add    esp,0x14
c00127df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127e3:	e8 71 56 ff ff       	call   c0007e59 <malloc>
c00127e8:	89 c6                	mov    esi,eax
c00127ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00127ef:	56                   	push   esi
c00127f0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00127f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00127f8:	51                   	push   ecx
c00127f9:	52                   	push   edx
c00127fa:	53                   	push   ebx
c00127fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012802:	8b 15 e0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023de0
c0012808:	83 c4 1c             	add    esp,0x1c
c001280b:	c1 e8 04             	shr    eax,0x4
c001280e:	89 04 95 60 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc3a0],eax
c0012815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012819:	31 d2                	xor    edx,edx
c001281b:	52                   	push   edx
c001281c:	50                   	push   eax
c001281d:	53                   	push   ebx
c001281e:	e8 b9 8a ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012823:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012825:	31 d2                	xor    edx,edx
c0012827:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001282a:	56                   	push   esi
c001282b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001282f:	52                   	push   edx
c0012830:	50                   	push   eax
c0012831:	53                   	push   ebx
c0012832:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012835:	83 c4 14             	add    esp,0x14
c0012838:	53                   	push   ebx
c0012839:	e8 3e 8a ff ff       	call   c000b27c <File::close()>
c001283e:	5d                   	pop    ebp
c001283f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012843:	e8 21 56 ff ff       	call   c0007e69 <free>
c0012848:	89 3c 24             	mov    DWORD PTR [esp],edi
c001284b:	e8 19 56 ff ff       	call   c0007e69 <free>
c0012850:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c0012855:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012859:	8d 50 01             	lea    edx,[eax+0x1]
c001285c:	89 0c 85 60 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2a0],ecx
c0012863:	89 34 85 e0 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc320],esi
c001286a:	89 15 e0 3d 02 c0    	mov    DWORD PTR ds:0xc0023de0,edx
c0012870:	83 c4 10             	add    esp,0x10
c0012873:	b0 01                	mov    al,0x1
c0012875:	83 c4 5c             	add    esp,0x5c
c0012878:	5b                   	pop    ebx
c0012879:	5e                   	pop    esi
c001287a:	5f                   	pop    edi
c001287b:	5d                   	pop    ebp
c001287c:	c3                   	ret    

c001287d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001287d:	55                   	push   ebp
c001287e:	57                   	push   edi
c001287f:	56                   	push   esi
c0012880:	53                   	push   ebx
c0012881:	81 ec 68 03 00 00    	sub    esp,0x368
c0012887:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001288e:	8b 1d 30 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e30
c0012894:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012898:	68 14 01 00 00       	push   0x114
c001289d:	e8 b7 55 ff ff       	call   c0007e59 <malloc>
c00128a2:	83 c4 0c             	add    esp,0xc
c00128a5:	89 c5                	mov    ebp,eax
c00128a7:	53                   	push   ebx
c00128a8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00128af:	50                   	push   eax
c00128b0:	e8 a9 88 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c00128b5:	5e                   	pop    esi
c00128b6:	5f                   	pop    edi
c00128b7:	6a 01                	push   0x1
c00128b9:	55                   	push   ebp
c00128ba:	e8 5f 89 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c00128bf:	83 c4 10             	add    esp,0x10
c00128c2:	85 c0                	test   eax,eax
c00128c4:	0f 85 a7 06 00 00    	jne    c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128ca:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00128d2:	83 ec 0c             	sub    esp,0xc
c00128d5:	6a 34                	push   0x34
c00128d7:	e8 7d 55 ff ff       	call   c0007e59 <malloc>
c00128dc:	5b                   	pop    ebx
c00128dd:	89 c7                	mov    edi,eax
c00128df:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00128e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128e6:	53                   	push   ebx
c00128e7:	57                   	push   edi
c00128e8:	6a 00                	push   0x0
c00128ea:	6a 34                	push   0x34
c00128ec:	55                   	push   ebp
c00128ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00128f0:	83 c4 20             	add    esp,0x20
c00128f3:	85 c0                	test   eax,eax
c00128f5:	0f 85 76 06 00 00    	jne    c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128fb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012901:	0f 85 6a 06 00 00    	jne    c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012907:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001290a:	85 c0                	test   eax,eax
c001290c:	0f 84 5f 06 00 00    	je     c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012912:	31 d2                	xor    edx,edx
c0012914:	51                   	push   ecx
c0012915:	52                   	push   edx
c0012916:	50                   	push   eax
c0012917:	55                   	push   ebp
c0012918:	e8 bf 89 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c001291d:	83 c4 10             	add    esp,0x10
c0012920:	85 c0                	test   eax,eax
c0012922:	0f 85 49 06 00 00    	jne    c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012928:	83 ec 0c             	sub    esp,0xc
c001292b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001292e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012932:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012936:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001293a:	0f af c2             	imul   eax,edx
c001293d:	50                   	push   eax
c001293e:	e8 16 55 ff ff       	call   c0007e59 <malloc>
c0012943:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012946:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001294a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001294d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012951:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012955:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012959:	0f af c2             	imul   eax,edx
c001295c:	99                   	cdq    
c001295d:	52                   	push   edx
c001295e:	50                   	push   eax
c001295f:	55                   	push   ebp
c0012960:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012963:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012966:	83 c4 20             	add    esp,0x20
c0012969:	85 c0                	test   eax,eax
c001296b:	0f 84 00 06 00 00    	je     c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012971:	52                   	push   edx
c0012972:	31 d2                	xor    edx,edx
c0012974:	52                   	push   edx
c0012975:	50                   	push   eax
c0012976:	55                   	push   ebp
c0012977:	e8 60 89 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c001297c:	83 c4 10             	add    esp,0x10
c001297f:	85 c0                	test   eax,eax
c0012981:	0f 85 ea 05 00 00    	jne    c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012987:	83 ec 0c             	sub    esp,0xc
c001298a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001298e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012992:	31 f6                	xor    esi,esi
c0012994:	0f af c2             	imul   eax,edx
c0012997:	50                   	push   eax
c0012998:	e8 bc 54 ff ff       	call   c0007e59 <malloc>
c001299d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00129a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129ab:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129af:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129b3:	0f af c2             	imul   eax,edx
c00129b6:	99                   	cdq    
c00129b7:	52                   	push   edx
c00129b8:	50                   	push   eax
c00129b9:	55                   	push   ebp
c00129ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129bd:	83 c4 20             	add    esp,0x20
c00129c0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00129c4:	0f 86 8a 00 00 00    	jbe    c0012a54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00129ca:	0f b7 de             	movzx  ebx,si
c00129cd:	c1 e3 05             	shl    ebx,0x5
c00129d0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00129d4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00129d7:	75 75                	jne    c0012a4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00129d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00129dc:	31 d2                	xor    edx,edx
c00129de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00129e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129e9:	50                   	push   eax
c00129ea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00129ed:	52                   	push   edx
c00129ee:	50                   	push   eax
c00129ef:	55                   	push   ebp
c00129f0:	e8 e7 88 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c00129f5:	83 c4 10             	add    esp,0x10
c00129f8:	85 c0                	test   eax,eax
c00129fa:	0f 85 71 05 00 00    	jne    c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a00:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012a07:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a0a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012a0e:	31 d2                	xor    edx,edx
c0012a10:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012a14:	83 ec 0c             	sub    esp,0xc
c0012a17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012a1b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a22:	50                   	push   eax
c0012a23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a2b:	52                   	push   edx
c0012a2c:	50                   	push   eax
c0012a2d:	55                   	push   ebp
c0012a2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a31:	83 c4 1c             	add    esp,0x1c
c0012a34:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012a37:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012a3a:	50                   	push   eax
c0012a3b:	6a 00                	push   0x0
c0012a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a41:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012a45:	50                   	push   eax
c0012a46:	e8 a5 da fe ff       	call   c00004f0 <memset>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	46                   	inc    esi
c0012a4f:	e9 6c ff ff ff       	jmp    c00129c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012a54:	53                   	push   ebx
c0012a55:	31 db                	xor    ebx,ebx
c0012a57:	68 00 01 00 00       	push   0x100
c0012a5c:	6a 00                	push   0x0
c0012a5e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012a62:	50                   	push   eax
c0012a63:	e8 88 da fe ff       	call   c00004f0 <memset>
c0012a68:	83 c4 0c             	add    esp,0xc
c0012a6b:	68 00 01 00 00       	push   0x100
c0012a70:	6a 00                	push   0x0
c0012a72:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012a79:	50                   	push   eax
c0012a7a:	e8 71 da fe ff       	call   c00004f0 <memset>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012a8a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a92:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012a9a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012aa2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012aaa:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012aae:	0f 86 30 01 00 00    	jbe    c0012be4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012ab4:	0f b7 f3             	movzx  esi,bx
c0012ab7:	6b f6 28             	imul   esi,esi,0x28
c0012aba:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012abe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ac5:	52                   	push   edx
c0012ac6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012aca:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012ace:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ad0:	6b d2 28             	imul   edx,edx,0x28
c0012ad3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012ad7:	31 d2                	xor    edx,edx
c0012ad9:	52                   	push   edx
c0012ada:	50                   	push   eax
c0012adb:	55                   	push   ebp
c0012adc:	e8 fb 87 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012ae1:	83 c4 0c             	add    esp,0xc
c0012ae4:	6a 20                	push   0x20
c0012ae6:	6a 00                	push   0x0
c0012ae8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012aef:	51                   	push   ecx
c0012af0:	e8 fb d9 fe ff       	call   c00004f0 <memset>
c0012af5:	59                   	pop    ecx
c0012af6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012af9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012afd:	52                   	push   edx
c0012afe:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012b05:	51                   	push   ecx
c0012b06:	6a 00                	push   0x0
c0012b08:	6a 1f                	push   0x1f
c0012b0a:	55                   	push   ebp
c0012b0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b0e:	83 c4 1c             	add    esp,0x1c
c0012b11:	6a 09                	push   0x9
c0012b13:	68 73 e9 01 c0       	push   0xc001e973
c0012b18:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b1f:	51                   	push   ecx
c0012b20:	e8 8b d8 fe ff       	call   c00003b0 <memcmp>
c0012b25:	83 c4 10             	add    esp,0x10
c0012b28:	85 c0                	test   eax,eax
c0012b2a:	75 21                	jne    c0012b4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b34:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b3c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b3f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012b46:	89 d0                	mov    eax,edx
c0012b48:	40                   	inc    eax
c0012b49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b4d:	50                   	push   eax
c0012b4e:	6a 09                	push   0x9
c0012b50:	68 7d e9 01 c0       	push   0xc001e97d
c0012b55:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b5c:	50                   	push   eax
c0012b5d:	e8 4e d8 fe ff       	call   c00003b0 <memcmp>
c0012b62:	83 c4 10             	add    esp,0x10
c0012b65:	85 c0                	test   eax,eax
c0012b67:	75 21                	jne    c0012b8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012b69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b71:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b7c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012b83:	89 d0                	mov    eax,edx
c0012b85:	40                   	inc    eax
c0012b86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b8a:	50                   	push   eax
c0012b8b:	50                   	push   eax
c0012b8c:	68 49 e9 01 c0       	push   0xc001e949
c0012b91:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b98:	50                   	push   eax
c0012b99:	e8 62 db fe ff       	call   c0000700 <strcmp>
c0012b9e:	83 c4 10             	add    esp,0x10
c0012ba1:	85 c0                	test   eax,eax
c0012ba3:	75 0f                	jne    c0012bb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012ba5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012ba8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012bac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bb4:	50                   	push   eax
c0012bb5:	50                   	push   eax
c0012bb6:	68 51 e9 01 c0       	push   0xc001e951
c0012bbb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bc2:	50                   	push   eax
c0012bc3:	e8 38 db fe ff       	call   c0000700 <strcmp>
c0012bc8:	83 c4 10             	add    esp,0x10
c0012bcb:	85 c0                	test   eax,eax
c0012bcd:	75 0f                	jne    c0012bde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012bcf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bd2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012bd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012bde:	43                   	inc    ebx
c0012bdf:	e9 c6 fe ff ff       	jmp    c0012aaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012be4:	31 d2                	xor    edx,edx
c0012be6:	50                   	push   eax
c0012be7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012beb:	52                   	push   edx
c0012bec:	50                   	push   eax
c0012bed:	55                   	push   ebp
c0012bee:	e8 e9 86 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012bf3:	58                   	pop    eax
c0012bf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012bf8:	e8 5c 52 ff ff       	call   c0007e59 <malloc>
c0012bfd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c00:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012c04:	31 d2                	xor    edx,edx
c0012c06:	58                   	pop    eax
c0012c07:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012c0b:	53                   	push   ebx
c0012c0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c14:	52                   	push   edx
c0012c15:	50                   	push   eax
c0012c16:	55                   	push   ebp
c0012c17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c1a:	83 c4 14             	add    esp,0x14
c0012c1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c21:	e8 33 52 ff ff       	call   c0007e59 <malloc>
c0012c26:	31 d2                	xor    edx,edx
c0012c28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012c2c:	83 c4 0c             	add    esp,0xc
c0012c2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c33:	52                   	push   edx
c0012c34:	50                   	push   eax
c0012c35:	55                   	push   ebp
c0012c36:	e8 a1 86 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012c3b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c3e:	31 d2                	xor    edx,edx
c0012c40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c4b:	52                   	push   edx
c0012c4c:	50                   	push   eax
c0012c4d:	55                   	push   ebp
c0012c4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c51:	83 c4 20             	add    esp,0x20
c0012c54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c5c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c60:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012c64:	0f 84 0b 03 00 00    	je     c0012f75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012c6a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012c71:	31 d2                	xor    edx,edx
c0012c73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c77:	c1 e8 03             	shr    eax,0x3
c0012c7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012c7e:	51                   	push   ecx
c0012c7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c83:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012c87:	52                   	push   edx
c0012c88:	50                   	push   eax
c0012c89:	55                   	push   ebp
c0012c8a:	e8 4d 86 ff ff       	call   c000b2dc <File::seek(unsigned long long)>
c0012c8f:	5b                   	pop    ebx
c0012c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c94:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012c9b:	e8 b9 51 ff ff       	call   c0007e59 <malloc>
c0012ca0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012ca3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ca7:	31 d2                	xor    edx,edx
c0012ca9:	5e                   	pop    esi
c0012caa:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012cae:	50                   	push   eax
c0012caf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cb7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012cbe:	52                   	push   edx
c0012cbf:	50                   	push   eax
c0012cc0:	55                   	push   ebp
c0012cc1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cc4:	83 c4 20             	add    esp,0x20
c0012cc7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012ccf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012cd3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012cd7:	0f 8d 7c 02 00 00    	jge    c0012f59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012cdd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ce1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ce5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012cea:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012ced:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012cf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cf5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012cf9:	89 d8                	mov    eax,ebx
c0012cfb:	c1 e8 08             	shr    eax,0x8
c0012cfe:	89 c6                	mov    esi,eax
c0012d00:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d04:	c1 e6 04             	shl    esi,0x4
c0012d07:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012d0b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012d0e:	85 d2                	test   edx,edx
c0012d10:	0f 85 bf 00 00 00    	jne    c0012dd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d16:	83 ec 0c             	sub    esp,0xc
c0012d19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d1d:	03 06                	add    eax,DWORD PTR [esi]
c0012d1f:	50                   	push   eax
c0012d20:	e8 4b f8 ff ff       	call   c0012570 <Thr::getAddressOfKernelSymbol(char const*)>
c0012d25:	83 c4 10             	add    esp,0x10
c0012d28:	89 c2                	mov    edx,eax
c0012d2a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012d2f:	85 c0                	test   eax,eax
c0012d31:	0f 85 9e 00 00 00    	jne    c0012dd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d37:	83 ec 0c             	sub    esp,0xc
c0012d3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d3e:	03 06                	add    eax,DWORD PTR [esi]
c0012d40:	50                   	push   eax
c0012d41:	e8 fa 41 ff ff       	call   c0006f40 <Krnl::resolveCompatibilitySymbol(char*)>
c0012d46:	83 c4 10             	add    esp,0x10
c0012d49:	89 c2                	mov    edx,eax
c0012d4b:	85 c0                	test   eax,eax
c0012d4d:	0f 85 82 00 00 00    	jne    c0012dd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d53:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012d57:	50                   	push   eax
c0012d58:	50                   	push   eax
c0012d59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d5d:	03 06                	add    eax,DWORD PTR [esi]
c0012d5f:	50                   	push   eax
c0012d60:	68 87 e9 01 c0       	push   0xc001e987
c0012d65:	e8 7e 7e ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0012d6a:	58                   	pop    eax
c0012d6b:	5a                   	pop    edx
c0012d6c:	68 a1 e9 01 c0       	push   0xc001e9a1
c0012d71:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012d78:	50                   	push   eax
c0012d79:	e8 a2 d8 fe ff       	call   c0000620 <strcpy>
c0012d7e:	59                   	pop    ecx
c0012d7f:	58                   	pop    eax
c0012d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d84:	03 06                	add    eax,DWORD PTR [esi]
c0012d86:	50                   	push   eax
c0012d87:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012d8e:	50                   	push   eax
c0012d8f:	e8 4c da fe ff       	call   c00007e0 <strcat>
c0012d94:	58                   	pop    eax
c0012d95:	5a                   	pop    edx
c0012d96:	68 37 ea 01 c0       	push   0xc001ea37
c0012d9b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012da2:	50                   	push   eax
c0012da3:	e8 38 da fe ff       	call   c00007e0 <strcat>
c0012da8:	83 c4 10             	add    esp,0x10
c0012dab:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012db0:	0f 84 5d 01 00 00    	je     c0012f13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012db6:	83 ec 0c             	sub    esp,0xc
c0012db9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dc0:	50                   	push   eax
c0012dc1:	e8 0d d9 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0012dc6:	83 c4 10             	add    esp,0x10
c0012dc9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012dcd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012dd1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012dd5:	80 fb 01             	cmp    bl,0x1
c0012dd8:	0f 85 88 00 00 00    	jne    c0012e66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012dde:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012de5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012de9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012ded:	01 ce                	add    esi,ecx
c0012def:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012df5:	0f 94 c0             	sete   al
c0012df8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012dfe:	0f 94 c3             	sete   bl
c0012e01:	09 c3                	or     ebx,eax
c0012e03:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e05:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012e0a:	74 41                	je     c0012e4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012e0c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e0f:	84 db                	test   bl,bl
c0012e11:	75 15                	jne    c0012e28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012e13:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e17:	66 83 f8 0c          	cmp    ax,0xc
c0012e1b:	76 05                	jbe    c0012e22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012e1d:	b8 0c 00 00 00       	mov    eax,0xc
c0012e22:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e26:	76 37                	jbe    c0012e5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e28:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012e2c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e31:	0f 84 dc 00 00 00    	je     c0012f13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e37:	83 ec 0c             	sub    esp,0xc
c0012e3a:	68 b8 e9 01 c0       	push   0xc001e9b8
c0012e3f:	e8 8f d8 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012e4b:	eb 12                	jmp    c0012e5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e4d:	01 c1                	add    ecx,eax
c0012e4f:	84 db                	test   bl,bl
c0012e51:	75 0c                	jne    c0012e5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e53:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e57:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e5b:	77 02                	ja     c0012e5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e5d:	01 d1                	add    ecx,edx
c0012e5f:	89 0e                	mov    DWORD PTR [esi],ecx
c0012e61:	e9 ea 00 00 00       	jmp    c0012f50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012e66:	80 fb 02             	cmp    bl,0x2
c0012e69:	75 7c                	jne    c0012ee7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012e6b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012e72:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012e76:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012e7a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e80:	74 20                	je     c0012ea2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012e82:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e88:	74 18                	je     c0012ea2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012e8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e8e:	b9 0a 00 00 00       	mov    ecx,0xa
c0012e93:	66 83 f8 0e          	cmp    ax,0xe
c0012e97:	77 03                	ja     c0012e9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012e99:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012e9c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012ea0:	76 1f                	jbe    c0012ec1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012ea2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012ea6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012eab:	74 66                	je     c0012f13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012ead:	83 ec 0c             	sub    esp,0xc
c0012eb0:	68 d4 e9 01 c0       	push   0xc001e9d4
c0012eb5:	e8 19 d8 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0012eba:	83 c4 10             	add    esp,0x10
c0012ebd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012ec1:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ec3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012ec8:	74 13                	je     c0012edd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012eca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012ece:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012ed5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012ed9:	01 c8                	add    eax,ecx
c0012edb:	eb 04                	jmp    c0012ee1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012edd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012ee1:	01 c2                	add    edx,eax
c0012ee3:	89 16                	mov    DWORD PTR [esi],edx
c0012ee5:	eb 69                	jmp    c0012f50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ee7:	0f b6 db             	movzx  ebx,bl
c0012eea:	50                   	push   eax
c0012eeb:	50                   	push   eax
c0012eec:	53                   	push   ebx
c0012eed:	68 f0 e9 01 c0       	push   0xc001e9f0
c0012ef2:	e8 f1 7c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0012ef7:	83 c4 10             	add    esp,0x10
c0012efa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012eff:	74 12                	je     c0012f13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f01:	83 ec 0c             	sub    esp,0xc
c0012f04:	68 fb e9 01 c0       	push   0xc001e9fb
c0012f09:	e8 c5 d7 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	eb 3d                	jmp    c0012f50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f13:	83 ec 0c             	sub    esp,0xc
c0012f16:	55                   	push   ebp
c0012f17:	e8 60 83 ff ff       	call   c000b27c <File::close()>
c0012f1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f25:	59                   	pop    ecx
c0012f26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f2a:	e8 3a 4f ff ff       	call   c0007e69 <free>
c0012f2f:	5b                   	pop    ebx
c0012f30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f34:	e8 30 4f ff ff       	call   c0007e69 <free>
c0012f39:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012f3c:	e8 28 4f ff ff       	call   c0007e69 <free>
c0012f41:	5e                   	pop    esi
c0012f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f46:	e8 1e 4f ff ff       	call   c0007e69 <free>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	eb 21                	jmp    c0012f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012f50:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012f54:	e9 76 fd ff ff       	jmp    c0012ccf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012f59:	83 ec 0c             	sub    esp,0xc
c0012f5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f60:	e8 04 4f ff ff       	call   c0007e69 <free>
c0012f65:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012f69:	83 c4 10             	add    esp,0x10
c0012f6c:	e9 eb fc ff ff       	jmp    c0012c5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012f71:	31 c0                	xor    eax,eax
c0012f73:	eb 33                	jmp    c0012fa8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012f75:	83 ec 0c             	sub    esp,0xc
c0012f78:	55                   	push   ebp
c0012f79:	e8 fe 82 ff ff       	call   c000b27c <File::close()>
c0012f7e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f81:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f87:	58                   	pop    eax
c0012f88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f8c:	e8 d8 4e ff ff       	call   c0007e69 <free>
c0012f91:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012f94:	e8 d0 4e ff ff       	call   c0007e69 <free>
c0012f99:	5a                   	pop    edx
c0012f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f9e:	e8 c6 4e ff ff       	call   c0007e69 <free>
c0012fa3:	83 c4 10             	add    esp,0x10
c0012fa6:	b0 01                	mov    al,0x1
c0012fa8:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012fae:	5b                   	pop    ebx
c0012faf:	5e                   	pop    esi
c0012fb0:	5f                   	pop    edi
c0012fb1:	5d                   	pop    ebp
c0012fb2:	c3                   	ret    

c0012fb3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012fb3:	56                   	push   esi
c0012fb4:	31 d2                	xor    edx,edx
c0012fb6:	53                   	push   ebx
c0012fb7:	8b 1d 40 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023640
c0012fbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012fc1:	39 d3                	cmp    ebx,edx
c0012fc3:	7e 1b                	jle    c0012fe0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012fc5:	8b 04 95 60 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc7a0]
c0012fcc:	39 c8                	cmp    eax,ecx
c0012fce:	77 0d                	ja     c0012fdd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012fd0:	8b 34 95 60 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc9a0]
c0012fd7:	01 c6                	add    esi,eax
c0012fd9:	39 ce                	cmp    esi,ecx
c0012fdb:	77 05                	ja     c0012fe2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012fdd:	42                   	inc    edx
c0012fde:	eb e1                	jmp    c0012fc1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012fe0:	31 c0                	xor    eax,eax
c0012fe2:	5b                   	pop    ebx
c0012fe3:	5e                   	pop    esi
c0012fe4:	c3                   	ret    

c0012fe5 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012fe5:	53                   	push   ebx
c0012fe6:	31 c0                	xor    eax,eax
c0012fe8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012fec:	8b 1d 40 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023640
c0012ff2:	39 c3                	cmp    ebx,eax
c0012ff4:	7e 22                	jle    c0013018 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012ff6:	8b 14 85 60 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc7a0]
c0012ffd:	39 ca                	cmp    edx,ecx
c0012fff:	77 14                	ja     c0013015 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013001:	03 14 85 60 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc9a0]
c0013008:	39 ca                	cmp    edx,ecx
c001300a:	76 09                	jbe    c0013015 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001300c:	8b 04 85 60 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5a0]
c0013013:	eb 05                	jmp    c001301a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013015:	40                   	inc    eax
c0013016:	eb da                	jmp    c0012ff2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013018:	31 c0                	xor    eax,eax
c001301a:	5b                   	pop    ebx
c001301b:	c3                   	ret    

c001301c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001301c:	53                   	push   ebx
c001301d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013021:	53                   	push   ebx
c0013022:	e8 8c ff ff ff       	call   c0012fb3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0013027:	5a                   	pop    edx
c0013028:	31 d2                	xor    edx,edx
c001302a:	85 c0                	test   eax,eax
c001302c:	74 04                	je     c0013032 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001302e:	89 da                	mov    edx,ebx
c0013030:	29 c2                	sub    edx,eax
c0013032:	89 d0                	mov    eax,edx
c0013034:	5b                   	pop    ebx
c0013035:	c3                   	ret    

c0013036 <Thr::loadDLL(char const*, bool)>:
c0013036:	55                   	push   ebp
c0013037:	57                   	push   edi
c0013038:	56                   	push   esi
c0013039:	53                   	push   ebx
c001303a:	81 ec 34 01 00 00    	sub    esp,0x134
c0013040:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0013047:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001304e:	56                   	push   esi
c001304f:	68 13 ea 01 c0       	push   0xc001ea13
c0013054:	e8 8f 7b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013059:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013060:	e8 f4 4d ff ff       	call   c0007e59 <malloc>
c0013065:	83 c4 0c             	add    esp,0xc
c0013068:	89 c3                	mov    ebx,eax
c001306a:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0013070:	56                   	push   esi
c0013071:	50                   	push   eax
c0013072:	e8 e7 80 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	85 db                	test   ebx,ebx
c001307c:	75 3c                	jne    c00130ba <Thr::loadDLL(char const*, bool)+0x84>
c001307e:	89 f8                	mov    eax,edi
c0013080:	84 c0                	test   al,al
c0013082:	0f 84 d2 01 00 00    	je     c001325a <Thr::loadDLL(char const*, bool)+0x224>
c0013088:	55                   	push   ebp
c0013089:	55                   	push   ebp
c001308a:	68 24 ea 01 c0       	push   0xc001ea24
c001308f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0013093:	55                   	push   ebp
c0013094:	e8 87 d5 fe ff       	call   c0000620 <strcpy>
c0013099:	58                   	pop    eax
c001309a:	5a                   	pop    edx
c001309b:	56                   	push   esi
c001309c:	55                   	push   ebp
c001309d:	e8 3e d7 fe ff       	call   c00007e0 <strcat>
c00130a2:	59                   	pop    ecx
c00130a3:	58                   	pop    eax
c00130a4:	68 37 ea 01 c0       	push   0xc001ea37
c00130a9:	55                   	push   ebp
c00130aa:	e8 31 d7 fe ff       	call   c00007e0 <strcat>
c00130af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00130b2:	e8 1c d6 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	51                   	push   ecx
c00130bb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00130bf:	50                   	push   eax
c00130c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130c4:	50                   	push   eax
c00130c5:	53                   	push   ebx
c00130c6:	e8 ff 83 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	85 db                	test   ebx,ebx
c00130d0:	74 0c                	je     c00130de <Thr::loadDLL(char const*, bool)+0xa8>
c00130d2:	83 ec 0c             	sub    esp,0xc
c00130d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130d7:	53                   	push   ebx
c00130d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00130e3:	75 0a                	jne    c00130ef <Thr::loadDLL(char const*, bool)+0xb9>
c00130e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130e9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00130ed:	75 3c                	jne    c001312b <Thr::loadDLL(char const*, bool)+0xf5>
c00130ef:	89 f8                	mov    eax,edi
c00130f1:	84 c0                	test   al,al
c00130f3:	0f 84 49 01 00 00    	je     c0013242 <Thr::loadDLL(char const*, bool)+0x20c>
c00130f9:	51                   	push   ecx
c00130fa:	51                   	push   ecx
c00130fb:	68 24 ea 01 c0       	push   0xc001ea24
c0013100:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013104:	53                   	push   ebx
c0013105:	e8 16 d5 fe ff       	call   c0000620 <strcpy>
c001310a:	5d                   	pop    ebp
c001310b:	58                   	pop    eax
c001310c:	56                   	push   esi
c001310d:	53                   	push   ebx
c001310e:	e8 cd d6 fe ff       	call   c00007e0 <strcat>
c0013113:	58                   	pop    eax
c0013114:	5a                   	pop    edx
c0013115:	68 37 ea 01 c0       	push   0xc001ea37
c001311a:	53                   	push   ebx
c001311b:	e8 c0 d6 fe ff       	call   c00007e0 <strcat>
c0013120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013123:	e8 ab d5 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0013128:	83 c4 10             	add    esp,0x10
c001312b:	52                   	push   edx
c001312c:	6a 03                	push   0x3
c001312e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013132:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013136:	05 ff 0f 00 00       	add    eax,0xfff
c001313b:	83 d2 00             	adc    edx,0x0
c001313e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013142:	50                   	push   eax
c0013143:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0013149:	e8 e0 6f ff ff       	call   c000a12e <VAS::allocatePages(int, int)>
c001314e:	59                   	pop    ecx
c001314f:	89 c3                	mov    ebx,eax
c0013151:	5d                   	pop    ebp
c0013152:	50                   	push   eax
c0013153:	68 1e d8 01 c0       	push   0xc001d81e
c0013158:	e8 8b 7a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001315d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013160:	e8 fb d3 fe ff       	call   c0000560 <strlen>
c0013165:	8b 2d 40 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023640
c001316b:	40                   	inc    eax
c001316c:	89 04 24             	mov    DWORD PTR [esp],eax
c001316f:	e8 e5 4c ff ff       	call   c0007e59 <malloc>
c0013174:	89 04 ad 60 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc5a0],eax
c001317b:	58                   	pop    eax
c001317c:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c0013181:	5a                   	pop    edx
c0013182:	56                   	push   esi
c0013183:	ff 34 85 60 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc5a0]
c001318a:	e8 91 d4 fe ff       	call   c0000620 <strcpy>
c001318f:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c0013194:	8d 50 01             	lea    edx,[eax+0x1]
c0013197:	89 1c 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],ebx
c001319e:	89 15 40 36 02 c0    	mov    DWORD PTR ds:0xc0023640,edx
c00131a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131a8:	83 c4 0c             	add    esp,0xc
c00131ab:	89 14 85 60 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9a0],edx
c00131b2:	6a 01                	push   0x1
c00131b4:	53                   	push   ebx
c00131b5:	56                   	push   esi
c00131b6:	e8 c2 f6 ff ff       	call   c001287d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00131bb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00131bf:	83 c4 10             	add    esp,0x10
c00131c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131c7:	0f 85 89 00 00 00    	jne    c0013256 <Thr::loadDLL(char const*, bool)+0x220>
c00131cd:	89 f8                	mov    eax,edi
c00131cf:	84 c0                	test   al,al
c00131d1:	74 73                	je     c0013246 <Thr::loadDLL(char const*, bool)+0x210>
c00131d3:	83 ec 0c             	sub    esp,0xc
c00131d6:	68 39 ea 01 c0       	push   0xc001ea39
c00131db:	e8 f3 d4 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c00131e0:	83 c4 10             	add    esp,0x10
c00131e3:	eb 61                	jmp    c0013246 <Thr::loadDLL(char const*, bool)+0x210>
c00131e5:	50                   	push   eax
c00131e6:	50                   	push   eax
c00131e7:	89 e8                	mov    eax,ebp
c00131e9:	c1 e0 0c             	shl    eax,0xc
c00131ec:	01 d8                	add    eax,ebx
c00131ee:	50                   	push   eax
c00131ef:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c00131f5:	e8 ac 6a ff ff       	call   c0009ca6 <VAS::getPageTableEntry(unsigned long)>
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00131ff:	a8 60                	test   al,0x60
c0013201:	75 11                	jne    c0013214 <Thr::loadDLL(char const*, bool)+0x1de>
c0013203:	83 ec 0c             	sub    esp,0xc
c0013206:	25 00 f0 ff ff       	and    eax,0xfffff000
c001320b:	50                   	push   eax
c001320c:	e8 b3 4f ff ff       	call   c00081c4 <Phys::freePage(unsigned long)>
c0013211:	83 c4 10             	add    esp,0x10
c0013214:	45                   	inc    ebp
c0013215:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013219:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001321d:	05 ff 0f 00 00       	add    eax,0xfff
c0013222:	bf 00 00 00 00       	mov    edi,0x0
c0013227:	83 d2 00             	adc    edx,0x0
c001322a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001322e:	c1 ea 0c             	shr    edx,0xc
c0013231:	39 c5                	cmp    ebp,eax
c0013233:	89 d1                	mov    ecx,edx
c0013235:	89 f8                	mov    eax,edi
c0013237:	19 c8                	sbb    eax,ecx
c0013239:	72 aa                	jb     c00131e5 <Thr::loadDLL(char const*, bool)+0x1af>
c001323b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013240:	75 18                	jne    c001325a <Thr::loadDLL(char const*, bool)+0x224>
c0013242:	31 db                	xor    ebx,ebx
c0013244:	eb 14                	jmp    c001325a <Thr::loadDLL(char const*, bool)+0x224>
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	68 58 ea 01 c0       	push   0xc001ea58
c001324e:	e8 80 d4 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0013253:	83 c4 10             	add    esp,0x10
c0013256:	31 ed                	xor    ebp,ebp
c0013258:	eb bb                	jmp    c0013215 <Thr::loadDLL(char const*, bool)+0x1df>
c001325a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013260:	89 d8                	mov    eax,ebx
c0013262:	5b                   	pop    ebx
c0013263:	5e                   	pop    esi
c0013264:	5f                   	pop    edi
c0013265:	5d                   	pop    ebp
c0013266:	c3                   	ret    

c0013267 <Thr::executeDLL(unsigned long, void*)>:
c0013267:	56                   	push   esi
c0013268:	53                   	push   ebx
c0013269:	52                   	push   edx
c001326a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001326e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013272:	85 db                	test   ebx,ebx
c0013274:	75 10                	jne    c0013286 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013276:	83 ec 0c             	sub    esp,0xc
c0013279:	68 74 ea 01 c0       	push   0xc001ea74
c001327e:	e8 50 d4 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0013283:	83 c4 10             	add    esp,0x10
c0013286:	50                   	push   eax
c0013287:	50                   	push   eax
c0013288:	53                   	push   ebx
c0013289:	68 9e ea 01 c0       	push   0xc001ea9e
c001328e:	e8 55 79 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013293:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013297:	89 d8                	mov    eax,ebx
c0013299:	83 c4 14             	add    esp,0x14
c001329c:	5b                   	pop    ebx
c001329d:	5e                   	pop    esi
c001329e:	ff e0                	jmp    eax

c00132a0 <userModeEntryPoint(void*)>:
c00132a0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00132a5:	48                   	dec    eax
c00132a6:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00132ab:	75 03                	jne    c00132b0 <userModeEntryPoint(void*)+0x10>
c00132ad:	fb                   	sti    
c00132ae:	66 90                	xchg   ax,ax
c00132b0:	fb                   	sti    
c00132b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132b9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00132bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00132c3:	e9 97 cf fe ff       	jmp    c000025f <goToUsermode>

c00132c8 <changeTSS>:
c00132c8:	83 ec 14             	sub    esp,0x14
c00132cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132d0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00132d3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00132d8:	c1 e2 15             	shl    edx,0x15
c00132db:	29 d0                	sub    eax,edx
c00132dd:	50                   	push   eax
c00132de:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00132e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00132e9:	05 7c 11 00 00       	add    eax,0x117c
c00132ee:	50                   	push   eax
c00132ef:	e8 f4 5f ff ff       	call   c00092e8 <TSS::setESP(unsigned long)>
c00132f4:	83 c4 1c             	add    esp,0x1c
c00132f7:	c3                   	ret    

c00132f8 <switchToThread(ThreadControlBlock*)>:
c00132f8:	57                   	push   edi
c00132f9:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c00132fe:	56                   	push   esi
c00132ff:	85 c0                	test   eax,eax
c0013301:	53                   	push   ebx
c0013302:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013306:	0f 85 90 00 00 00    	jne    c001339c <switchToThread(ThreadControlBlock*)+0xa4>
c001330c:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001330f:	80 fa ff             	cmp    dl,0xff
c0013312:	0f 84 80 00 00 00    	je     c0013398 <switchToThread(ThreadControlBlock*)+0xa0>
c0013318:	81 e2 ff 00 00 00    	and    edx,0xff
c001331e:	b8 00 04 00 00       	mov    eax,0x400
c0013323:	29 d0                	sub    eax,edx
c0013325:	d1 f8                	sar    eax,1
c0013327:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001332a:	66 90                	xchg   ax,ax
c001332c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001332f:	e8 7b 24 00 00       	call   c00157af <HalQueryPerformanceCounter()>
c0013334:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013339:	89 15 4c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e4c,edx
c001333f:	89 c6                	mov    esi,eax
c0013341:	89 d7                	mov    edi,edx
c0013343:	2b 35 38 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023e38
c0013349:	a3 38 3e 02 c0       	mov    ds:0xc0023e38,eax
c001334e:	1b 3d 3c 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023e3c
c0013354:	89 35 40 3e 02 c0    	mov    DWORD PTR ds:0xc0023e40,esi
c001335a:	89 3d 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,edi
c0013360:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013366:	89 15 3c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e3c,edx
c001336c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001336f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013372:	01 c6                	add    esi,eax
c0013374:	11 d7                	adc    edi,edx
c0013376:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013379:	83 ec 0c             	sub    esp,0xc
c001337c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001337f:	53                   	push   ebx
c0013380:	e8 12 cf fe ff       	call   c0000297 <switchToThreadASM>
c0013385:	0f 20 c0             	mov    eax,cr0
c0013388:	83 c8 08             	or     eax,0x8
c001338b:	0f 22 c0             	mov    cr0,eax
c001338e:	83 c4 10             	add    esp,0x10
c0013391:	5b                   	pop    ebx
c0013392:	5e                   	pop    esi
c0013393:	5f                   	pop    edi
c0013394:	c3                   	ret    
c0013395:	8d 76 00             	lea    esi,[esi+0x0]
c0013398:	31 c0                	xor    eax,eax
c001339a:	eb 90                	jmp    c001332c <switchToThread(ThreadControlBlock*)+0x34>
c001339c:	5b                   	pop    ebx
c001339d:	c7 05 00 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x1
c00133a7:	5e                   	pop    esi
c00133a8:	5f                   	pop    edi
c00133a9:	c3                   	ret    
c00133aa:	66 90                	xchg   ax,ax

c00133ac <Process::addArgs(char**)>:
c00133ac:	57                   	push   edi
c00133ad:	56                   	push   esi
c00133ae:	53                   	push   ebx
c00133af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00133b7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00133c1:	85 ff                	test   edi,edi
c00133c3:	74 43                	je     c0013408 <Process::addArgs(char**)+0x5c>
c00133c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00133c7:	85 c0                	test   eax,eax
c00133c9:	74 3d                	je     c0013408 <Process::addArgs(char**)+0x5c>
c00133cb:	31 db                	xor    ebx,ebx
c00133cd:	8d 76 00             	lea    esi,[esi+0x0]
c00133d0:	83 ec 0c             	sub    esp,0xc
c00133d3:	50                   	push   eax
c00133d4:	e8 87 d1 fe ff       	call   c0000560 <strlen>
c00133d9:	40                   	inc    eax
c00133da:	89 04 24             	mov    DWORD PTR [esp],eax
c00133dd:	e8 77 4a ff ff       	call   c0007e59 <malloc>
c00133e2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00133e9:	5a                   	pop    edx
c00133ea:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00133ed:	59                   	pop    ecx
c00133ee:	43                   	inc    ebx
c00133ef:	52                   	push   edx
c00133f0:	50                   	push   eax
c00133f1:	e8 2a d2 fe ff       	call   c0000620 <strcpy>
c00133f6:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00133fc:	83 c4 10             	add    esp,0x10
c00133ff:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013402:	85 c0                	test   eax,eax
c0013404:	75 ca                	jne    c00133d0 <Process::addArgs(char**)+0x24>
c0013406:	66 90                	xchg   ax,ax
c0013408:	5b                   	pop    ebx
c0013409:	5e                   	pop    esi
c001340a:	5f                   	pop    edi
c001340b:	c3                   	ret    

c001340c <Process::Process(char const*, Process*, char**)>:
c001340c:	56                   	push   esi
c001340d:	53                   	push   ebx
c001340e:	83 ec 14             	sub    esp,0x14
c0013411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013415:	05 0c 02 00 00       	add    eax,0x20c
c001341a:	bb 07 00 00 00       	mov    ebx,0x7
c001341f:	89 c6                	mov    esi,eax
c0013421:	8d 76 00             	lea    esi,[esi+0x0]
c0013424:	85 db                	test   ebx,ebx
c0013426:	78 14                	js     c001343c <Process::Process(char const*, Process*, char**)+0x30>
c0013428:	83 ec 0c             	sub    esp,0xc
c001342b:	56                   	push   esi
c001342c:	e8 7b 96 00 00       	call   c001caac <ThreadControlBlock::ThreadControlBlock()>
c0013431:	83 c4 10             	add    esp,0x10
c0013434:	83 c6 5f             	add    esi,0x5f
c0013437:	4b                   	dec    ebx
c0013438:	eb ea                	jmp    c0013424 <Process::Process(char const*, Process*, char**)+0x18>
c001343a:	66 90                	xchg   ax,ax
c001343c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013440:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013447:	83 ec 0c             	sub    esp,0xc
c001344a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001344e:	e8 09 d1 ff ff       	call   c001055c <Krnl::newProcessEnv(Process*)>
c0013453:	83 c4 10             	add    esp,0x10
c0013456:	89 c2                	mov    edx,eax
c0013458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001345c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013466:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001346f:	a1 10 f9 01 c0       	mov    eax,ds:0xc001f910
c0013474:	8d 50 01             	lea    edx,[eax+0x1]
c0013477:	89 15 10 f9 01 c0    	mov    DWORD PTR ds:0xc001f910,edx
c001347d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013481:	89 02                	mov    DWORD PTR [edx],eax
c0013483:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001348b:	83 ec 0c             	sub    esp,0xc
c001348e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013492:	e8 c2 49 ff ff       	call   c0007e59 <malloc>
c0013497:	83 c4 10             	add    esp,0x10
c001349a:	89 c3                	mov    ebx,eax
c001349c:	83 ec 08             	sub    esp,0x8
c001349f:	6a 00                	push   0x0
c00134a1:	53                   	push   ebx
c00134a2:	e8 31 70 ff ff       	call   c000a4d8 <VAS::VAS(bool)>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134ae:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00134b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134b8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00134c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00134ca:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00134d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134da:	85 c0                	test   eax,eax
c00134dc:	74 42                	je     c0013520 <Process::Process(char const*, Process*, char**)+0x114>
c00134de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134e2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134e8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00134ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134f2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00134f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013502:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001350c:	05 0c 01 00 00       	add    eax,0x10c
c0013511:	83 ec 08             	sub    esp,0x8
c0013514:	52                   	push   edx
c0013515:	50                   	push   eax
c0013516:	e8 05 d1 fe ff       	call   c0000620 <strcpy>
c001351b:	83 c4 10             	add    esp,0x10
c001351e:	eb 64                	jmp    c0013584 <Process::Process(char const*, Process*, char**)+0x178>
c0013520:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013528:	83 ec 0c             	sub    esp,0xc
c001352b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001352f:	e8 25 49 ff ff       	call   c0007e59 <malloc>
c0013534:	83 c4 10             	add    esp,0x10
c0013537:	89 c3                	mov    ebx,eax
c0013539:	83 ec 08             	sub    esp,0x8
c001353c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013540:	53                   	push   ebx
c0013541:	e8 46 5b ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c0013546:	83 c4 10             	add    esp,0x10
c0013549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001354d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013557:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001355d:	83 ec 0c             	sub    esp,0xc
c0013560:	50                   	push   eax
c0013561:	e8 c6 53 ff ff       	call   c000892c <addToTerminalCycle(VgaText*)>
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001356d:	05 0c 01 00 00       	add    eax,0x10c
c0013572:	83 ec 08             	sub    esp,0x8
c0013575:	68 bd ea 01 c0       	push   0xc001eabd
c001357a:	50                   	push   eax
c001357b:	e8 a0 d0 fe ff       	call   c0000620 <strcpy>
c0013580:	83 c4 10             	add    esp,0x10
c0013583:	90                   	nop
c0013584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013588:	83 c0 0c             	add    eax,0xc
c001358b:	83 ec 08             	sub    esp,0x8
c001358e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013592:	50                   	push   eax
c0013593:	e8 88 d0 fe ff       	call   c0000620 <strcpy>
c0013598:	83 c4 10             	add    esp,0x10
c001359b:	83 ec 08             	sub    esp,0x8
c001359e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00135a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135a6:	e8 01 fe ff ff       	call   c00133ac <Process::addArgs(char**)>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	83 ec 08             	sub    esp,0x8
c00135b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135b9:	e8 89 ed ff ff       	call   c0012347 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00135be:	83 c4 10             	add    esp,0x10
c00135c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135c5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135c9:	83 f0 01             	xor    eax,0x1
c00135cc:	88 c2                	mov    dl,al
c00135ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135d2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00135d8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135dc:	25 ff 00 00 00       	and    eax,0xff
c00135e1:	83 ec 08             	sub    esp,0x8
c00135e4:	50                   	push   eax
c00135e5:	68 14 eb 01 c0       	push   0xc001eb14
c00135ea:	e8 f9 75 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00135ef:	83 c4 10             	add    esp,0x10
c00135f2:	90                   	nop
c00135f3:	83 c4 14             	add    esp,0x14
c00135f6:	5b                   	pop    ebx
c00135f7:	5e                   	pop    esi
c00135f8:	c3                   	ret    
c00135f9:	90                   	nop
c00135fa:	66 90                	xchg   ax,ax

c00135fc <Process::Process(bool, char const*, Process*, char**)>:
c00135fc:	56                   	push   esi
c00135fd:	53                   	push   ebx
c00135fe:	83 ec 24             	sub    esp,0x24
c0013601:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013605:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001360d:	05 0c 02 00 00       	add    eax,0x20c
c0013612:	bb 07 00 00 00       	mov    ebx,0x7
c0013617:	89 c6                	mov    esi,eax
c0013619:	8d 76 00             	lea    esi,[esi+0x0]
c001361c:	85 db                	test   ebx,ebx
c001361e:	78 14                	js     c0013634 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013620:	83 ec 0c             	sub    esp,0xc
c0013623:	56                   	push   esi
c0013624:	e8 83 94 00 00       	call   c001caac <ThreadControlBlock::ThreadControlBlock()>
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	83 c6 5f             	add    esi,0x5f
c001362f:	4b                   	dec    ebx
c0013630:	eb ea                	jmp    c001361c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013632:	66 90                	xchg   ax,ax
c0013634:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013638:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001363f:	83 ec 0c             	sub    esp,0xc
c0013642:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013646:	e8 11 cf ff ff       	call   c001055c <Krnl::newProcessEnv(Process*)>
c001364b:	83 c4 10             	add    esp,0x10
c001364e:	89 c2                	mov    edx,eax
c0013650:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013654:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001365a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001365e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013667:	a1 10 f9 01 c0       	mov    eax,ds:0xc001f910
c001366c:	8d 50 01             	lea    edx,[eax+0x1]
c001366f:	89 15 10 f9 01 c0    	mov    DWORD PTR ds:0xc001f910,edx
c0013675:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013679:	89 02                	mov    DWORD PTR [edx],eax
c001367b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013683:	83 ec 0c             	sub    esp,0xc
c0013686:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001368a:	e8 ca 47 ff ff       	call   c0007e59 <malloc>
c001368f:	83 c4 10             	add    esp,0x10
c0013692:	89 c3                	mov    ebx,eax
c0013694:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013698:	25 ff 00 00 00       	and    eax,0xff
c001369d:	83 ec 08             	sub    esp,0x8
c00136a0:	50                   	push   eax
c00136a1:	53                   	push   ebx
c00136a2:	e8 31 6e ff ff       	call   c000a4d8 <VAS::VAS(bool)>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136ae:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00136b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136b8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00136c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00136ca:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00136d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00136da:	85 c0                	test   eax,eax
c00136dc:	74 42                	je     c0013720 <Process::Process(bool, char const*, Process*, char**)+0x124>
c00136de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136e2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00136e8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00136ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136f2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00136f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013702:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001370c:	05 0c 01 00 00       	add    eax,0x10c
c0013711:	83 ec 08             	sub    esp,0x8
c0013714:	52                   	push   edx
c0013715:	50                   	push   eax
c0013716:	e8 05 cf fe ff       	call   c0000620 <strcpy>
c001371b:	83 c4 10             	add    esp,0x10
c001371e:	eb 64                	jmp    c0013784 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013720:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001372f:	e8 25 47 ff ff       	call   c0007e59 <malloc>
c0013734:	83 c4 10             	add    esp,0x10
c0013737:	89 c3                	mov    ebx,eax
c0013739:	83 ec 08             	sub    esp,0x8
c001373c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013740:	53                   	push   ebx
c0013741:	e8 46 59 ff ff       	call   c000908c <VgaText::VgaText(char const*)>
c0013746:	83 c4 10             	add    esp,0x10
c0013749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001374d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013757:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001375d:	83 ec 0c             	sub    esp,0xc
c0013760:	50                   	push   eax
c0013761:	e8 c6 51 ff ff       	call   c000892c <addToTerminalCycle(VgaText*)>
c0013766:	83 c4 10             	add    esp,0x10
c0013769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001376d:	05 0c 01 00 00       	add    eax,0x10c
c0013772:	83 ec 08             	sub    esp,0x8
c0013775:	68 bd ea 01 c0       	push   0xc001eabd
c001377a:	50                   	push   eax
c001377b:	e8 a0 ce fe ff       	call   c0000620 <strcpy>
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	90                   	nop
c0013784:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013788:	83 c0 0c             	add    eax,0xc
c001378b:	83 ec 08             	sub    esp,0x8
c001378e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013792:	50                   	push   eax
c0013793:	e8 88 ce fe ff       	call   c0000620 <strcpy>
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	83 ec 08             	sub    esp,0x8
c001379e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00137a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00137a6:	e8 01 fc ff ff       	call   c00133ac <Process::addArgs(char**)>
c00137ab:	83 c4 10             	add    esp,0x10
c00137ae:	90                   	nop
c00137af:	83 c4 24             	add    esp,0x24
c00137b2:	5b                   	pop    ebx
c00137b3:	5e                   	pop    esi
c00137b4:	c3                   	ret    
c00137b5:	8d 76 00             	lea    esi,[esi+0x0]

c00137b8 <taskStartupFunction>:
c00137b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137bd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00137c0:	c3                   	ret    
c00137c1:	90                   	nop
c00137c2:	66 90                	xchg   ax,ax

c00137c4 <Semaphore::Semaphore(int)>:
c00137c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137cc:	89 10                	mov    DWORD PTR [eax],edx
c00137ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137d2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00137d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137e8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00137ef:	90                   	nop
c00137f0:	c3                   	ret    
c00137f1:	90                   	nop
c00137f2:	66 90                	xchg   ax,ax

c00137f4 <Mutex::Mutex()>:
c00137f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137f8:	6a 01                	push   0x1
c00137fa:	50                   	push   eax
c00137fb:	e8 c4 ff ff ff       	call   c00137c4 <Semaphore::Semaphore(int)>
c0013800:	83 c4 08             	add    esp,0x8
c0013803:	90                   	nop
c0013804:	c3                   	ret    
c0013805:	90                   	nop
c0013806:	66 90                	xchg   ax,ax

c0013808 <Process::createThread(void (*)(void*), void*, int)>:
c0013808:	57                   	push   edi
c0013809:	31 c9                	xor    ecx,ecx
c001380b:	56                   	push   esi
c001380c:	53                   	push   ebx
c001380d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013811:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013818:	89 f2                	mov    edx,esi
c001381a:	66 90                	xchg   ax,ax
c001381c:	31 c0                	xor    eax,eax
c001381e:	66 89 d0             	mov    ax,dx
c0013821:	83 e2 01             	and    edx,0x1
c0013824:	74 12                	je     c0013838 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013826:	d1 f8                	sar    eax,1
c0013828:	41                   	inc    ecx
c0013829:	89 c2                	mov    edx,eax
c001382b:	83 f9 10             	cmp    ecx,0x10
c001382e:	75 ec                	jne    c001381c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013830:	31 db                	xor    ebx,ebx
c0013832:	89 d8                	mov    eax,ebx
c0013834:	5b                   	pop    ebx
c0013835:	5e                   	pop    esi
c0013836:	5f                   	pop    edi
c0013837:	c3                   	ret    
c0013838:	b8 01 00 00 00       	mov    eax,0x1
c001383d:	d3 e0                	shl    eax,cl
c001383f:	09 c6                	or     esi,eax
c0013841:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013844:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001384b:	01 c0                	add    eax,eax
c001384d:	01 c8                	add    eax,ecx
c001384f:	8d 04 80             	lea    eax,[eax+eax*4]
c0013852:	01 d8                	add    eax,ebx
c0013854:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001385b:	75 0b                	jne    c0013868 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001385d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013867:	90                   	nop
c0013868:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001386e:	83 ec 08             	sub    esp,0x8
c0013871:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013874:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013877:	01 c0                	add    eax,eax
c0013879:	01 c8                	add    eax,ecx
c001387b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001387e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013881:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013887:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001388d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013891:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013897:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001389d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00138a4:	89 ca                	mov    edx,ecx
c00138a6:	f7 da                	neg    edx
c00138a8:	c1 e2 15             	shl    edx,0x15
c00138ab:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00138b1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00138b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00138bb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00138c5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00138cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00138cf:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00138d5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00138df:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00138e9:	53                   	push   ebx
c00138ea:	68 24 3e 02 c0       	push   0xc0023e24
c00138ef:	e8 58 8f 00 00       	call   c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138f4:	83 c4 10             	add    esp,0x10
c00138f7:	89 d8                	mov    eax,ebx
c00138f9:	5b                   	pop    ebx
c00138fa:	5e                   	pop    esi
c00138fb:	5f                   	pop    edi
c00138fc:	c3                   	ret    
c00138fd:	90                   	nop
c00138fe:	66 90                	xchg   ax,ax

c0013900 <Process::createUserThread()>:
c0013900:	83 ec 0c             	sub    esp,0xc
c0013903:	68 80 00 00 00       	push   0x80
c0013908:	6a 00                	push   0x0
c001390a:	68 a0 32 01 c0       	push   0xc00132a0
c001390f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013913:	50                   	push   eax
c0013914:	e8 ef fe ff ff       	call   c0013808 <Process::createThread(void (*)(void*), void*, int)>
c0013919:	83 c4 1c             	add    esp,0x1c
c001391c:	c3                   	ret    
c001391d:	8d 76 00             	lea    esi,[esi+0x0]

c0013920 <setupMultitasking(void (*)())>:
c0013920:	56                   	push   esi
c0013921:	53                   	push   ebx
c0013922:	53                   	push   ebx
c0013923:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013927:	eb 13                	jmp    c001393c <setupMultitasking(void (*)())+0x1c>
c0013929:	8d 76 00             	lea    esi,[esi+0x0]
c001392c:	83 ec 0c             	sub    esp,0xc
c001392f:	68 24 3e 02 c0       	push   0xc0023e24
c0013934:	e8 5b 8e 00 00       	call   c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013939:	83 c4 10             	add    esp,0x10
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	68 24 3e 02 c0       	push   0xc0023e24
c0013944:	e8 27 8e 00 00       	call   c001c770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	84 c0                	test   al,al
c001394e:	74 dc                	je     c001392c <setupMultitasking(void (*)())+0xc>
c0013950:	83 ec 0c             	sub    esp,0xc
c0013953:	68 1f 07 00 00       	push   0x71f
c0013958:	e8 fc 44 ff ff       	call   c0007e59 <malloc>
c001395d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013964:	89 c3                	mov    ebx,eax
c0013966:	6a 00                	push   0x0
c0013968:	68 c1 ea 01 c0       	push   0xc001eac1
c001396d:	6a 01                	push   0x1
c001396f:	50                   	push   eax
c0013970:	e8 87 fc ff ff       	call   c00135fc <Process::Process(bool, char const*, Process*, char**)>
c0013975:	83 c4 14             	add    esp,0x14
c0013978:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001397e:	89 1d 30 3e 02 c0    	mov    DWORD PTR ds:0xc0023e30,ebx
c0013984:	50                   	push   eax
c0013985:	e8 ff 51 ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c001398a:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013992:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001399c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00139a2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139a5:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00139af:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00139b5:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00139bb:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00139c5:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00139cf:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00139d9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00139df:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00139e5:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00139ef:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00139f5:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00139ff:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013a05:	5a                   	pop    edx
c0013a06:	59                   	pop    ecx
c0013a07:	68 bd ea 01 c0       	push   0xc001eabd
c0013a0c:	50                   	push   eax
c0013a0d:	e8 0e cc fe ff       	call   c0000620 <strcpy>
c0013a12:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013a19:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013a1d:	83 c4 14             	add    esp,0x14
c0013a20:	5b                   	pop    ebx
c0013a21:	5e                   	pop    esi
c0013a22:	e9 62 c8 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013a27:	90                   	nop

c0013a28 <schedule()>:
c0013a28:	8b 15 04 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e04
c0013a2e:	85 d2                	test   edx,edx
c0013a30:	74 0e                	je     c0013a40 <schedule()+0x18>
c0013a32:	c7 05 00 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x1
c0013a3c:	c3                   	ret    
c0013a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a40:	53                   	push   ebx
c0013a41:	83 ec 14             	sub    esp,0x14
c0013a44:	68 24 3e 02 c0       	push   0xc0023e24
c0013a49:	e8 22 8d 00 00       	call   c001c770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	84 c0                	test   al,al
c0013a53:	75 3b                	jne    c0013a90 <schedule()+0x68>
c0013a55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013a5d:	4a                   	dec    edx
c0013a5e:	74 38                	je     c0013a98 <schedule()+0x70>
c0013a60:	83 ec 0c             	sub    esp,0xc
c0013a63:	68 24 3e 02 c0       	push   0xc0023e24
c0013a68:	e8 1f 8d 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a6d:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0013a74:	89 c3                	mov    ebx,eax
c0013a76:	e8 19 8d 00 00       	call   c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013a7b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013a82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a85:	e8 6e f8 ff ff       	call   c00132f8 <switchToThread(ThreadControlBlock*)>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a90:	83 c4 08             	add    esp,0x8
c0013a93:	5b                   	pop    ebx
c0013a94:	c3                   	ret    
c0013a95:	8d 76 00             	lea    esi,[esi+0x0]
c0013a98:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013a9f:	83 ec 08             	sub    esp,0x8
c0013aa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aa7:	50                   	push   eax
c0013aa8:	68 24 3e 02 c0       	push   0xc0023e24
c0013aad:	e8 9a 8d 00 00       	call   c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ab2:	83 c4 10             	add    esp,0x10
c0013ab5:	eb a9                	jmp    c0013a60 <schedule()+0x38>
c0013ab7:	90                   	nop

c0013ab8 <Semaphore::tryAcquire()>:
c0013ab8:	53                   	push   ebx
c0013ab9:	83 ec 08             	sub    esp,0x8
c0013abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ac0:	fa                   	cli    
c0013ac1:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013ac6:	8d 50 01             	lea    edx,[eax+0x1]
c0013ac9:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c0013acf:	8b 15 04 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e04
c0013ad5:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013ad8:	89 1d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ebx
c0013ade:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013ae1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013ae3:	7c 33                	jl     c0013b18 <Semaphore::tryAcquire()+0x60>
c0013ae5:	89 15 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,edx
c0013aeb:	85 d2                	test   edx,edx
c0013aed:	75 0d                	jne    c0013afc <Semaphore::tryAcquire()+0x44>
c0013aef:	8b 15 00 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e00
c0013af5:	85 d2                	test   edx,edx
c0013af7:	75 6b                	jne    c0013b64 <Semaphore::tryAcquire()+0xac>
c0013af9:	8d 76 00             	lea    esi,[esi+0x0]
c0013afc:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013b01:	85 c0                	test   eax,eax
c0013b03:	74 0b                	je     c0013b10 <Semaphore::tryAcquire()+0x58>
c0013b05:	8d 76 00             	lea    esi,[esi+0x0]
c0013b08:	31 c0                	xor    eax,eax
c0013b0a:	83 c4 08             	add    esp,0x8
c0013b0d:	5b                   	pop    ebx
c0013b0e:	c3                   	ret    
c0013b0f:	90                   	nop
c0013b10:	fb                   	sti    
c0013b11:	83 c4 08             	add    esp,0x8
c0013b14:	5b                   	pop    ebx
c0013b15:	c3                   	ret    
c0013b16:	66 90                	xchg   ax,ax
c0013b18:	43                   	inc    ebx
c0013b19:	89 15 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,edx
c0013b1f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013b22:	85 d2                	test   edx,edx
c0013b24:	75 22                	jne    c0013b48 <Semaphore::tryAcquire()+0x90>
c0013b26:	8b 0d 00 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e00
c0013b2c:	85 c9                	test   ecx,ecx
c0013b2e:	74 18                	je     c0013b48 <Semaphore::tryAcquire()+0x90>
c0013b30:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013b3a:	e8 e9 fe ff ff       	call   c0013a28 <schedule()>
c0013b3f:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013b44:	48                   	dec    eax
c0013b45:	8d 76 00             	lea    esi,[esi+0x0]
c0013b48:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013b4d:	85 c0                	test   eax,eax
c0013b4f:	75 0b                	jne    c0013b5c <Semaphore::tryAcquire()+0xa4>
c0013b51:	fb                   	sti    
c0013b52:	b0 01                	mov    al,0x1
c0013b54:	83 c4 08             	add    esp,0x8
c0013b57:	5b                   	pop    ebx
c0013b58:	c3                   	ret    
c0013b59:	8d 76 00             	lea    esi,[esi+0x0]
c0013b5c:	b0 01                	mov    al,0x1
c0013b5e:	83 c4 08             	add    esp,0x8
c0013b61:	5b                   	pop    ebx
c0013b62:	c3                   	ret    
c0013b63:	90                   	nop
c0013b64:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013b6e:	e8 b5 fe ff ff       	call   c0013a28 <schedule()>
c0013b73:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013b78:	48                   	dec    eax
c0013b79:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013b7e:	85 c0                	test   eax,eax
c0013b80:	75 86                	jne    c0013b08 <Semaphore::tryAcquire()+0x50>
c0013b82:	eb 8c                	jmp    c0013b10 <Semaphore::tryAcquire()+0x58>

c0013b84 <Semaphore::assertLocked(char const*)>:
c0013b84:	83 ec 0c             	sub    esp,0xc
c0013b87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b8b:	fa                   	cli    
c0013b8c:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013b92:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013b97:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b9a:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c0013ba0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013ba2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013ba5:	7c 29                	jl     c0013bd0 <Semaphore::assertLocked(char const*)+0x4c>
c0013ba7:	90                   	nop
c0013ba8:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013bad:	85 c0                	test   eax,eax
c0013baf:	75 0b                	jne    c0013bbc <Semaphore::assertLocked(char const*)+0x38>
c0013bb1:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013bb6:	85 c0                	test   eax,eax
c0013bb8:	75 2e                	jne    c0013be8 <Semaphore::assertLocked(char const*)+0x64>
c0013bba:	66 90                	xchg   ax,ax
c0013bbc:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013bc1:	48                   	dec    eax
c0013bc2:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013bc7:	75 03                	jne    c0013bcc <Semaphore::assertLocked(char const*)+0x48>
c0013bc9:	fb                   	sti    
c0013bca:	66 90                	xchg   ax,ax
c0013bcc:	83 c4 0c             	add    esp,0xc
c0013bcf:	c3                   	ret    
c0013bd0:	83 ec 0c             	sub    esp,0xc
c0013bd3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013bd7:	52                   	push   edx
c0013bd8:	e8 f6 ca ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0013bdd:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013be2:	83 c4 10             	add    esp,0x10
c0013be5:	48                   	dec    eax
c0013be6:	eb c0                	jmp    c0013ba8 <Semaphore::assertLocked(char const*)+0x24>
c0013be8:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013bf2:	e8 31 fe ff ff       	call   c0013a28 <schedule()>
c0013bf7:	eb c3                	jmp    c0013bbc <Semaphore::assertLocked(char const*)+0x38>
c0013bf9:	8d 76 00             	lea    esi,[esi+0x0]

c0013bfc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013bfc:	83 ec 0c             	sub    esp,0xc
c0013bff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c0b:	e8 18 fe ff ff       	call   c0013a28 <schedule()>
c0013c10:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013c15:	48                   	dec    eax
c0013c16:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013c1b:	75 03                	jne    c0013c20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013c1d:	fb                   	sti    
c0013c1e:	66 90                	xchg   ax,ax
c0013c20:	83 c4 0c             	add    esp,0xc
c0013c23:	c3                   	ret    

c0013c24 <blockTask(TaskState)>:
c0013c24:	83 ec 0c             	sub    esp,0xc
c0013c27:	fa                   	cli    
c0013c28:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013c2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c37:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c3a:	e8 e9 fd ff ff       	call   c0013a28 <schedule()>
c0013c3f:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013c44:	48                   	dec    eax
c0013c45:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013c4a:	75 04                	jne    c0013c50 <blockTask(TaskState)+0x2c>
c0013c4c:	fb                   	sti    
c0013c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c50:	83 c4 0c             	add    esp,0xc
c0013c53:	c3                   	ret    

c0013c54 <waitTask(int, int*, int)>:
c0013c54:	83 ec 18             	sub    esp,0x18
c0013c57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c60:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013c63:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c6c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013c6f:	6a 07                	push   0x7
c0013c71:	e8 ae ff ff ff       	call   c0013c24 <blockTask(TaskState)>
c0013c76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c7b:	83 c4 10             	add    esp,0x10
c0013c7e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013c81:	85 d2                	test   edx,edx
c0013c83:	74 0b                	je     c0013c90 <waitTask(int, int*, int)+0x3c>
c0013c85:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013c88:	89 02                	mov    DWORD PTR [edx],eax
c0013c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c8f:	90                   	nop
c0013c90:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013c93:	83 c4 0c             	add    esp,0xc
c0013c96:	c3                   	ret    
c0013c97:	90                   	nop

c0013c98 <milliTenthSleepUntil(unsigned int)>:
c0013c98:	83 ec 0c             	sub    esp,0xc
c0013c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9f:	39 05 0c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f0c,eax
c0013ca5:	76 05                	jbe    c0013cac <milliTenthSleepUntil(unsigned int)+0x14>
c0013ca7:	90                   	nop
c0013ca8:	83 c4 0c             	add    esp,0xc
c0013cab:	c3                   	ret    
c0013cac:	fa                   	cli    
c0013cad:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013cb3:	83 ec 08             	sub    esp,0x8
c0013cb6:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c0013cbc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013cc2:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013cc5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ccb:	52                   	push   edx
c0013ccc:	68 18 3e 02 c0       	push   0xc0023e18
c0013cd1:	e8 76 8b 00 00       	call   c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013cdd:	e8 42 ff ff ff       	call   c0013c24 <blockTask(TaskState)>
c0013ce2:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	48                   	dec    eax
c0013ceb:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013cf0:	85 c0                	test   eax,eax
c0013cf2:	75 0c                	jne    c0013d00 <milliTenthSleepUntil(unsigned int)+0x68>
c0013cf4:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013cf9:	85 c0                	test   eax,eax
c0013cfb:	75 17                	jne    c0013d14 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0013d00:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013d05:	48                   	dec    eax
c0013d06:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013d0b:	75 9b                	jne    c0013ca8 <milliTenthSleepUntil(unsigned int)+0x10>
c0013d0d:	fb                   	sti    
c0013d0e:	83 c4 0c             	add    esp,0xc
c0013d11:	c3                   	ret    
c0013d12:	66 90                	xchg   ax,ax
c0013d14:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013d1e:	e8 05 fd ff ff       	call   c0013a28 <schedule()>
c0013d23:	eb db                	jmp    c0013d00 <milliTenthSleepUntil(unsigned int)+0x68>
c0013d25:	8d 76 00             	lea    esi,[esi+0x0]

c0013d28 <milliTenthSleep(unsigned int)>:
c0013d28:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c0013d2d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013d31:	e9 62 ff ff ff       	jmp    c0013c98 <milliTenthSleepUntil(unsigned int)>
c0013d36:	66 90                	xchg   ax,ax

c0013d38 <sleep(unsigned int)>:
c0013d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d3c:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d3f:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d42:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d45:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d48:	c1 e0 04             	shl    eax,0x4
c0013d4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d4f:	eb d7                	jmp    c0013d28 <milliTenthSleep(unsigned int)>
c0013d51:	90                   	nop
c0013d52:	66 90                	xchg   ax,ax

c0013d54 <Semaphore::acquire()>:
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d5b:	fa                   	cli    
c0013d5c:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013d61:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013d67:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d6a:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c0013d70:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013d73:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013d75:	7d 2d                	jge    c0013da4 <Semaphore::acquire()+0x50>
c0013d77:	41                   	inc    ecx
c0013d78:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013d7b:	90                   	nop
c0013d7c:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013d81:	85 c0                	test   eax,eax
c0013d83:	75 0b                	jne    c0013d90 <Semaphore::acquire()+0x3c>
c0013d85:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013d8a:	85 c0                	test   eax,eax
c0013d8c:	75 62                	jne    c0013df0 <Semaphore::acquire()+0x9c>
c0013d8e:	66 90                	xchg   ax,ax
c0013d90:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013d95:	48                   	dec    eax
c0013d96:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013d9b:	75 03                	jne    c0013da0 <Semaphore::acquire()+0x4c>
c0013d9d:	fb                   	sti    
c0013d9e:	66 90                	xchg   ax,ax
c0013da0:	83 c4 0c             	add    esp,0xc
c0013da3:	c3                   	ret    
c0013da4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013da9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013db0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013db3:	85 c9                	test   ecx,ecx
c0013db5:	74 4d                	je     c0013e04 <Semaphore::acquire()+0xb0>
c0013db7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013dba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013dc0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013dc3:	90                   	nop
c0013dc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dc9:	83 ec 0c             	sub    esp,0xc
c0013dcc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013dcf:	68 3c eb 01 c0       	push   0xc001eb3c
c0013dd4:	e8 0f 6e ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013dd9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013de0:	e8 3f fe ff ff       	call   c0013c24 <blockTask(TaskState)>
c0013de5:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013dea:	83 c4 10             	add    esp,0x10
c0013ded:	48                   	dec    eax
c0013dee:	eb 8c                	jmp    c0013d7c <Semaphore::acquire()+0x28>
c0013df0:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013dfa:	e8 29 fc ff ff       	call   c0013a28 <schedule()>
c0013dff:	eb 8f                	jmp    c0013d90 <Semaphore::acquire()+0x3c>
c0013e01:	8d 76 00             	lea    esi,[esi+0x0]
c0013e04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e0c:	eb b6                	jmp    c0013dc4 <Semaphore::acquire()+0x70>
c0013e0e:	66 90                	xchg   ax,ax

c0013e10 <taskReturned>:
c0013e10:	83 ec 18             	sub    esp,0x18
c0013e13:	68 5c eb 01 c0       	push   0xc001eb5c
c0013e18:	e8 b6 c8 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0013e1d:	83 c4 10             	add    esp,0x10
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	6a 02                	push   0x2
c0013e25:	e8 fa fd ff ff       	call   c0013c24 <blockTask(TaskState)>
c0013e2a:	fa                   	cli    
c0013e2b:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013e31:	e8 f2 fb ff ff       	call   c0013a28 <schedule()>
c0013e36:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013e3b:	83 c4 10             	add    esp,0x10
c0013e3e:	48                   	dec    eax
c0013e3f:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013e44:	85 c0                	test   eax,eax
c0013e46:	75 d8                	jne    c0013e20 <taskReturned+0x10>
c0013e48:	fb                   	sti    
c0013e49:	eb d5                	jmp    c0013e20 <taskReturned+0x10>
c0013e4b:	90                   	nop

c0013e4c <Thr::processFromPID(int)>:
c0013e4c:	57                   	push   edi
c0013e4d:	56                   	push   esi
c0013e4e:	53                   	push   ebx
c0013e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e53:	fa                   	cli    
c0013e54:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	68 24 3e 02 c0       	push   0xc0023e24
c0013e62:	e8 25 89 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	89 c7                	mov    edi,eax
c0013e6c:	eb 16                	jmp    c0013e84 <Thr::processFromPID(int)+0x38>
c0013e6e:	66 90                	xchg   ax,ax
c0013e70:	83 ec 0c             	sub    esp,0xc
c0013e73:	68 24 3e 02 c0       	push   0xc0023e24
c0013e78:	e8 0f 89 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e7d:	83 c4 10             	add    esp,0x10
c0013e80:	39 f8                	cmp    eax,edi
c0013e82:	74 4c                	je     c0013ed0 <Thr::processFromPID(int)+0x84>
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	68 24 3e 02 c0       	push   0xc0023e24
c0013e8c:	e8 fb 88 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e91:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0013e98:	89 c3                	mov    ebx,eax
c0013e9a:	e8 f5 88 00 00       	call   c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013e9f:	58                   	pop    eax
c0013ea0:	5a                   	pop    edx
c0013ea1:	53                   	push   ebx
c0013ea2:	68 24 3e 02 c0       	push   0xc0023e24
c0013ea7:	e8 a0 89 00 00       	call   c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013eac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eaf:	83 c4 10             	add    esp,0x10
c0013eb2:	39 30                	cmp    DWORD PTR [eax],esi
c0013eb4:	75 ba                	jne    c0013e70 <Thr::processFromPID(int)+0x24>
c0013eb6:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013ebb:	48                   	dec    eax
c0013ebc:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013ec1:	74 09                	je     c0013ecc <Thr::processFromPID(int)+0x80>
c0013ec3:	90                   	nop
c0013ec4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ec7:	5b                   	pop    ebx
c0013ec8:	5e                   	pop    esi
c0013ec9:	5f                   	pop    edi
c0013eca:	c3                   	ret    
c0013ecb:	90                   	nop
c0013ecc:	fb                   	sti    
c0013ecd:	eb f5                	jmp    c0013ec4 <Thr::processFromPID(int)+0x78>
c0013ecf:	90                   	nop
c0013ed0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013ed5:	48                   	dec    eax
c0013ed6:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013edb:	75 07                	jne    c0013ee4 <Thr::processFromPID(int)+0x98>
c0013edd:	fb                   	sti    
c0013ede:	5b                   	pop    ebx
c0013edf:	5e                   	pop    esi
c0013ee0:	5f                   	pop    edi
c0013ee1:	c3                   	ret    
c0013ee2:	66 90                	xchg   ax,ax
c0013ee4:	5b                   	pop    ebx
c0013ee5:	31 c0                	xor    eax,eax
c0013ee7:	5e                   	pop    esi
c0013ee8:	5f                   	pop    edi
c0013ee9:	c3                   	ret    
c0013eea:	66 90                	xchg   ax,ax

c0013eec <unblockTask(ThreadControlBlock*)>:
c0013eec:	53                   	push   ebx
c0013eed:	83 ec 08             	sub    esp,0x8
c0013ef0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ef4:	fa                   	cli    
c0013ef5:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013efb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013efe:	85 c0                	test   eax,eax
c0013f00:	74 66                	je     c0013f68 <unblockTask(ThreadControlBlock*)+0x7c>
c0013f02:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f05:	48                   	dec    eax
c0013f06:	74 38                	je     c0013f40 <unblockTask(ThreadControlBlock*)+0x54>
c0013f08:	83 ec 0c             	sub    esp,0xc
c0013f0b:	68 24 3e 02 c0       	push   0xc0023e24
c0013f10:	e8 77 88 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f15:	83 c4 10             	add    esp,0x10
c0013f18:	85 c0                	test   eax,eax
c0013f1a:	75 1c                	jne    c0013f38 <unblockTask(ThreadControlBlock*)+0x4c>
c0013f1c:	eb 5e                	jmp    c0013f7c <unblockTask(ThreadControlBlock*)+0x90>
c0013f1e:	66 90                	xchg   ax,ax
c0013f20:	83 ec 08             	sub    esp,0x8
c0013f23:	50                   	push   eax
c0013f24:	68 24 3e 02 c0       	push   0xc0023e24
c0013f29:	e8 0e 8c 00 00       	call   c001cb3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f2e:	83 c4 10             	add    esp,0x10
c0013f31:	85 c0                	test   eax,eax
c0013f33:	74 47                	je     c0013f7c <unblockTask(ThreadControlBlock*)+0x90>
c0013f35:	8d 76 00             	lea    esi,[esi+0x0]
c0013f38:	39 c3                	cmp    ebx,eax
c0013f3a:	75 e4                	jne    c0013f20 <unblockTask(ThreadControlBlock*)+0x34>
c0013f3c:	eb 12                	jmp    c0013f50 <unblockTask(ThreadControlBlock*)+0x64>
c0013f3e:	66 90                	xchg   ax,ax
c0013f40:	83 ec 0c             	sub    esp,0xc
c0013f43:	68 df ea 01 c0       	push   0xc001eadf
c0013f48:	e8 9b 6c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013f4d:	83 c4 10             	add    esp,0x10
c0013f50:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013f55:	48                   	dec    eax
c0013f56:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013f5b:	75 03                	jne    c0013f60 <unblockTask(ThreadControlBlock*)+0x74>
c0013f5d:	fb                   	sti    
c0013f5e:	66 90                	xchg   ax,ax
c0013f60:	83 c4 08             	add    esp,0x8
c0013f63:	5b                   	pop    ebx
c0013f64:	c3                   	ret    
c0013f65:	8d 76 00             	lea    esi,[esi+0x0]
c0013f68:	83 ec 0c             	sub    esp,0xc
c0013f6b:	68 c8 ea 01 c0       	push   0xc001eac8
c0013f70:	e8 73 6c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	eb d6                	jmp    c0013f50 <unblockTask(ThreadControlBlock*)+0x64>
c0013f7a:	66 90                	xchg   ax,ax
c0013f7c:	83 ec 08             	sub    esp,0x8
c0013f7f:	53                   	push   ebx
c0013f80:	68 24 3e 02 c0       	push   0xc0023e24
c0013f85:	e8 c2 88 00 00       	call   c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f8a:	83 c4 10             	add    esp,0x10
c0013f8d:	eb c1                	jmp    c0013f50 <unblockTask(ThreadControlBlock*)+0x64>
c0013f8f:	90                   	nop

c0013f90 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013f90:	55                   	push   ebp
c0013f91:	57                   	push   edi
c0013f92:	56                   	push   esi
c0013f93:	53                   	push   ebx
c0013f94:	83 ec 1c             	sub    esp,0x1c
c0013f97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013f9b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f9e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013fa4:	85 ed                	test   ebp,ebp
c0013fa6:	7e 24                	jle    c0013fcc <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013fa8:	31 f6                	xor    esi,esi
c0013faa:	66 90                	xchg   ax,ax
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013fb6:	46                   	inc    esi
c0013fb7:	57                   	push   edi
c0013fb8:	e8 ac 3e ff ff       	call   c0007e69 <free>
c0013fbd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fc0:	83 c4 10             	add    esp,0x10
c0013fc3:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013fc9:	7f e1                	jg     c0013fac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013fcb:	90                   	nop
c0013fcc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013fd6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013fdb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013fde:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013fe1:	d3 c0                	rol    eax,cl
c0013fe3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013fea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fed:	89 f7                	mov    edi,esi
c0013fef:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013ff7:	0f 85 77 01 00 00    	jne    c0014174 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ffd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014003:	85 ed                	test   ebp,ebp
c0014005:	74 1d                	je     c0014024 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014007:	83 ec 0c             	sub    esp,0xc
c001400a:	55                   	push   ebp
c001400b:	e8 68 c4 ff ff       	call   c0010478 <EnvVarContainer::~EnvVarContainer()>
c0014010:	59                   	pop    ecx
c0014011:	5e                   	pop    esi
c0014012:	6a 0c                	push   0xc
c0014014:	55                   	push   ebp
c0014015:	e8 d8 6a ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001401a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001401d:	83 c4 10             	add    esp,0x10
c0014020:	89 f7                	mov    edi,esi
c0014022:	66 90                	xchg   ax,ax
c0014024:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001402a:	85 c0                	test   eax,eax
c001402c:	0f 84 b6 00 00 00    	je     c00140e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014032:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014039:	31 c9                	xor    ecx,ecx
c001403b:	eb 17                	jmp    c0014054 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001403d:	8d 76 00             	lea    esi,[esi+0x0]
c0014040:	41                   	inc    ecx
c0014041:	83 f9 10             	cmp    ecx,0x10
c0014044:	0f 84 9e 00 00 00    	je     c00140e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001404a:	66 90                	xchg   ax,ax
c001404c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014052:	66 90                	xchg   ax,ax
c0014054:	31 d2                	xor    edx,edx
c0014056:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c001405d:	d3 fa                	sar    edx,cl
c001405f:	83 e2 01             	and    edx,0x1
c0014062:	74 dc                	je     c0014040 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014064:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0014067:	01 d2                	add    edx,edx
c0014069:	01 ca                	add    edx,ecx
c001406b:	8d 14 92             	lea    edx,[edx+edx*4]
c001406e:	01 d0                	add    eax,edx
c0014070:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0014076:	83 fd 07             	cmp    ebp,0x7
c0014079:	75 c5                	jne    c0014040 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001407b:	05 40 02 00 00       	add    eax,0x240
c0014080:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0014083:	83 fd ff             	cmp    ebp,0xffffffff
c0014086:	0f 8c f0 00 00 00    	jl     c001417c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001408c:	0f 84 ae 01 00 00    	je     c0014240 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0014092:	85 ed                	test   ebp,ebp
c0014094:	0f 84 92 01 00 00    	je     c001422c <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001409a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001409c:	75 a2                	jne    c0014040 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001409e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00140a8:	01 d0                	add    eax,edx
c00140aa:	66 90                	xchg   ax,ax
c00140ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00140b9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00140bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00140c2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00140c9:	50                   	push   eax
c00140ca:	e8 1d fe ff ff       	call   c0013eec <unblockTask(ThreadControlBlock*)>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00140d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140d9:	89 f7                	mov    edi,esi
c00140db:	41                   	inc    ecx
c00140dc:	83 f9 10             	cmp    ecx,0x10
c00140df:	0f 85 67 ff ff ff    	jne    c001404c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00140e5:	8d 76 00             	lea    esi,[esi+0x0]
c00140e8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00140ee:	85 c0                	test   eax,eax
c00140f0:	74 62                	je     c0014154 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00140f2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00140f8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00140fe:	74 54                	je     c0014154 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014100:	83 ec 0c             	sub    esp,0xc
c0014103:	68 24 3e 02 c0       	push   0xc0023e24
c0014108:	e8 7f 86 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001410d:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0014114:	89 c7                	mov    edi,eax
c0014116:	e8 55 86 00 00       	call   c001c770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001411b:	83 c4 10             	add    esp,0x10
c001411e:	84 c0                	test   al,al
c0014120:	0f 84 ce 00 00 00    	je     c00141f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014126:	66 90                	xchg   ax,ax
c0014128:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001412b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014131:	85 d2                	test   edx,edx
c0014133:	74 0f                	je     c0014144 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014135:	83 ec 0c             	sub    esp,0xc
c0014138:	8b 02                	mov    eax,DWORD PTR [edx]
c001413a:	52                   	push   edx
c001413b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001413e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014141:	83 c4 10             	add    esp,0x10
c0014144:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001414e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014151:	8d 76 00             	lea    esi,[esi+0x0]
c0014154:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001415a:	85 db                	test   ebx,ebx
c001415c:	74 16                	je     c0014174 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c001415e:	83 ec 0c             	sub    esp,0xc
c0014161:	53                   	push   ebx
c0014162:	e8 5f 5d ff ff       	call   c0009ec6 <VAS::~VAS()>
c0014167:	58                   	pop    eax
c0014168:	5a                   	pop    edx
c0014169:	6a 14                	push   0x14
c001416b:	53                   	push   ebx
c001416c:	e8 81 69 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0014171:	83 c4 10             	add    esp,0x10
c0014174:	83 c4 1c             	add    esp,0x1c
c0014177:	5b                   	pop    ebx
c0014178:	5e                   	pop    esi
c0014179:	5f                   	pop    edi
c001417a:	5d                   	pop    ebp
c001417b:	c3                   	ret    
c001417c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014180:	83 ec 0c             	sub    esp,0xc
c0014183:	68 90 eb 01 c0       	push   0xc001eb90
c0014188:	e8 46 c5 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001418d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014190:	83 c4 10             	add    esp,0x10
c0014193:	89 f7                	mov    edi,esi
c0014195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014199:	e9 a2 fe ff ff       	jmp    c0014040 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001419e:	66 90                	xchg   ax,ax
c00141a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141a6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00141ac:	75 1e                	jne    c00141cc <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00141ae:	83 ec 0c             	sub    esp,0xc
c00141b1:	68 f8 eb 01 c0       	push   0xc001ebf8
c00141b6:	e8 2d 6a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00141bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00141c2:	e8 5d fa ff ff       	call   c0013c24 <blockTask(TaskState)>
c00141c7:	83 c4 10             	add    esp,0x10
c00141ca:	66 90                	xchg   ax,ax
c00141cc:	83 ec 08             	sub    esp,0x8
c00141cf:	56                   	push   esi
c00141d0:	68 24 3e 02 c0       	push   0xc0023e24
c00141d5:	e8 72 86 00 00       	call   c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00141da:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c00141e1:	e8 a6 85 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141e6:	83 c4 10             	add    esp,0x10
c00141e9:	39 f8                	cmp    eax,edi
c00141eb:	0f 84 37 ff ff ff    	je     c0014128 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00141f1:	8d 76 00             	lea    esi,[esi+0x0]
c00141f4:	83 ec 0c             	sub    esp,0xc
c00141f7:	68 24 3e 02 c0       	push   0xc0023e24
c00141fc:	e8 8b 85 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014201:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0014208:	89 c6                	mov    esi,eax
c001420a:	e8 85 85 00 00       	call   c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001420f:	83 c4 10             	add    esp,0x10
c0014212:	39 f3                	cmp    ebx,esi
c0014214:	74 b6                	je     c00141cc <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014216:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014219:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001421c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014222:	75 a8                	jne    c00141cc <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014224:	e9 77 ff ff ff       	jmp    c00141a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014229:	8d 76 00             	lea    esi,[esi+0x0]
c001422c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014230:	83 ec 0c             	sub    esp,0xc
c0014233:	68 c4 eb 01 c0       	push   0xc001ebc4
c0014238:	e9 4b ff ff ff       	jmp    c0014188 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001423d:	8d 76 00             	lea    esi,[esi+0x0]
c0014240:	8b 36                	mov    esi,DWORD PTR [esi]
c0014242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014246:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014249:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001424c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014252:	01 d7                	add    edi,edx
c0014254:	89 f8                	mov    eax,edi
c0014256:	e9 51 fe ff ff       	jmp    c00140ac <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001425b:	90                   	nop

c001425c <cleanerTaskFunction(void*)>:
c001425c:	53                   	push   ebx
c001425d:	83 ec 08             	sub    esp,0x8
c0014260:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014265:	48                   	dec    eax
c0014266:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001426b:	75 03                	jne    c0014270 <cleanerTaskFunction(void*)+0x14>
c001426d:	fb                   	sti    
c001426e:	66 90                	xchg   ax,ax
c0014270:	fa                   	cli    
c0014271:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014276:	80 3d ec 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023dec,0x0
c001427d:	8d 50 01             	lea    edx,[eax+0x1]
c0014280:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c0014286:	0f 84 ac 00 00 00    	je     c0014338 <cleanerTaskFunction(void*)+0xdc>
c001428c:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014291:	85 c0                	test   eax,eax
c0014293:	75 03                	jne    c0014298 <cleanerTaskFunction(void*)+0x3c>
c0014295:	fb                   	sti    
c0014296:	66 90                	xchg   ax,ax
c0014298:	c6 05 ec 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023dec,0x0
c001429f:	fa                   	cli    
c00142a0:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00142a6:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c00142ac:	fa                   	cli    
c00142ad:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00142b3:	eb 2b                	jmp    c00142e0 <cleanerTaskFunction(void*)+0x84>
c00142b5:	8d 76 00             	lea    esi,[esi+0x0]
c00142b8:	83 ec 0c             	sub    esp,0xc
c00142bb:	68 0c 3e 02 c0       	push   0xc0023e0c
c00142c0:	e8 c7 84 00 00       	call   c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00142c5:	c7 04 24 0c 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e0c
c00142cc:	89 c3                	mov    ebx,eax
c00142ce:	e8 c1 84 00 00       	call   c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00142d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142d6:	e8 b5 fc ff ff       	call   c0013f90 <cleanupTerminatedTask(ThreadControlBlock*)>
c00142db:	83 c4 10             	add    esp,0x10
c00142de:	66 90                	xchg   ax,ax
c00142e0:	83 ec 0c             	sub    esp,0xc
c00142e3:	68 0c 3e 02 c0       	push   0xc0023e0c
c00142e8:	e8 83 84 00 00       	call   c001c770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00142ed:	83 c4 10             	add    esp,0x10
c00142f0:	84 c0                	test   al,al
c00142f2:	74 c4                	je     c00142b8 <cleanerTaskFunction(void*)+0x5c>
c00142f4:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00142f9:	48                   	dec    eax
c00142fa:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00142ff:	75 03                	jne    c0014304 <cleanerTaskFunction(void*)+0xa8>
c0014301:	fb                   	sti    
c0014302:	66 90                	xchg   ax,ax
c0014304:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0014309:	48                   	dec    eax
c001430a:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c001430f:	0f 85 4b ff ff ff    	jne    c0014260 <cleanerTaskFunction(void*)+0x4>
c0014315:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c001431a:	85 c0                	test   eax,eax
c001431c:	0f 84 3e ff ff ff    	je     c0014260 <cleanerTaskFunction(void*)+0x4>
c0014322:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c001432c:	e8 f7 f6 ff ff       	call   c0013a28 <schedule()>
c0014331:	e9 2a ff ff ff       	jmp    c0014260 <cleanerTaskFunction(void*)+0x4>
c0014336:	66 90                	xchg   ax,ax
c0014338:	83 ec 0c             	sub    esp,0xc
c001433b:	6a 02                	push   0x2
c001433d:	e8 ba f8 ff ff       	call   c0013bfc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	e9 4e ff ff ff       	jmp    c0014298 <cleanerTaskFunction(void*)+0x3c>
c001434a:	66 90                	xchg   ax,ax

c001434c <terminateTask(int)>:
c001434c:	83 ec 14             	sub    esp,0x14
c001434f:	fa                   	cli    
c0014350:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014356:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c001435c:	fa                   	cli    
c001435d:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014367:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001436c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001436f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014374:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014377:	50                   	push   eax
c0014378:	68 0c 3e 02 c0       	push   0xc0023e0c
c001437d:	e8 ca 84 00 00       	call   c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014387:	83 c4 10             	add    esp,0x10
c001438a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014391:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c0014396:	85 c0                	test   eax,eax
c0014398:	74 5e                	je     c00143f8 <terminateTask(int)+0xac>
c001439a:	83 ec 0c             	sub    esp,0xc
c001439d:	c6 05 ec 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023dec,0x1
c00143a4:	50                   	push   eax
c00143a5:	e8 42 fb ff ff       	call   c0013eec <unblockTask(ThreadControlBlock*)>
c00143aa:	83 c4 10             	add    esp,0x10
c00143ad:	8d 76 00             	lea    esi,[esi+0x0]
c00143b0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00143b5:	48                   	dec    eax
c00143b6:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00143bb:	75 03                	jne    c00143c0 <terminateTask(int)+0x74>
c00143bd:	fb                   	sti    
c00143be:	66 90                	xchg   ax,ax
c00143c0:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c00143c5:	48                   	dec    eax
c00143c6:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c00143cb:	75 0b                	jne    c00143d8 <terminateTask(int)+0x8c>
c00143cd:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c00143d4:	75 36                	jne    c001440c <terminateTask(int)+0xc0>
c00143d6:	66 90                	xchg   ax,ax
c00143d8:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00143dd:	48                   	dec    eax
c00143de:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00143e3:	75 03                	jne    c00143e8 <terminateTask(int)+0x9c>
c00143e5:	fb                   	sti    
c00143e6:	66 90                	xchg   ax,ax
c00143e8:	fa                   	cli    
c00143e9:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00143ef:	90                   	nop
c00143f0:	e8 33 f6 ff ff       	call   c0013a28 <schedule()>
c00143f5:	eb e1                	jmp    c00143d8 <terminateTask(int)+0x8c>
c00143f7:	90                   	nop
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	68 f6 ea 01 c0       	push   0xc001eaf6
c0014400:	e8 e3 67 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	eb a6                	jmp    c00143b0 <terminateTask(int)+0x64>
c001440a:	66 90                	xchg   ax,ax
c001440c:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0014416:	eb d8                	jmp    c00143f0 <terminateTask(int)+0xa4>

c0014418 <Thr::terminateFromIRQ(int)>:
c0014418:	83 ec 18             	sub    esp,0x18
c001441b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001441f:	50                   	push   eax
c0014420:	e8 27 ff ff ff       	call   c001434c <terminateTask(int)>
c0014425:	90                   	nop
c0014426:	66 90                	xchg   ax,ax

c0014428 <Semaphore::release()>:
c0014428:	83 ec 0c             	sub    esp,0xc
c001442b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001442f:	fa                   	cli    
c0014430:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0014435:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001443b:	8d 48 01             	lea    ecx,[eax+0x1]
c001443e:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c0014444:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014447:	85 c9                	test   ecx,ecx
c0014449:	74 41                	je     c001448c <Semaphore::release()+0x64>
c001444b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001444e:	83 ec 0c             	sub    esp,0xc
c0014451:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014454:	51                   	push   ecx
c0014455:	e8 92 fa ff ff       	call   c0013eec <unblockTask(ThreadControlBlock*)>
c001445a:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c001445f:	83 c4 10             	add    esp,0x10
c0014462:	48                   	dec    eax
c0014463:	90                   	nop
c0014464:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0014469:	85 c0                	test   eax,eax
c001446b:	75 0b                	jne    c0014478 <Semaphore::release()+0x50>
c001446d:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0014472:	85 c0                	test   eax,eax
c0014474:	75 1e                	jne    c0014494 <Semaphore::release()+0x6c>
c0014476:	66 90                	xchg   ax,ax
c0014478:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001447d:	48                   	dec    eax
c001447e:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014483:	75 03                	jne    c0014488 <Semaphore::release()+0x60>
c0014485:	fb                   	sti    
c0014486:	66 90                	xchg   ax,ax
c0014488:	83 c4 0c             	add    esp,0xc
c001448b:	c3                   	ret    
c001448c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001448f:	eb d3                	jmp    c0014464 <Semaphore::release()+0x3c>
c0014491:	8d 76 00             	lea    esi,[esi+0x0]
c0014494:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c001449e:	e8 85 f5 ff ff       	call   c0013a28 <schedule()>
c00144a3:	eb d3                	jmp    c0014478 <Semaphore::release()+0x50>
c00144a5:	8d 76 00             	lea    esi,[esi+0x0]

c00144a8 <__static_initialization_and_destruction_0(int, int)>:
c00144a8:	83 ec 0c             	sub    esp,0xc
c00144ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00144b0:	0f 85 8e 00 00 00    	jne    c0014544 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00144b6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00144be:	0f 85 80 00 00 00    	jne    c0014544 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00144c4:	83 ec 0c             	sub    esp,0xc
c00144c7:	68 24 3e 02 c0       	push   0xc0023e24
c00144cc:	e8 27 86 00 00       	call   c001caf8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00144d1:	83 c4 10             	add    esp,0x10
c00144d4:	83 ec 04             	sub    esp,0x4
c00144d7:	68 b8 f6 01 c0       	push   0xc001f6b8
c00144dc:	68 24 3e 02 c0       	push   0xc0023e24
c00144e1:	68 a8 ca 01 c0       	push   0xc001caa8
c00144e6:	e8 b7 65 ff ff       	call   c000aaa2 <__cxa_atexit>
c00144eb:	83 c4 10             	add    esp,0x10
c00144ee:	83 ec 0c             	sub    esp,0xc
c00144f1:	68 18 3e 02 c0       	push   0xc0023e18
c00144f6:	e8 fd 85 00 00       	call   c001caf8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00144fb:	83 c4 10             	add    esp,0x10
c00144fe:	83 ec 04             	sub    esp,0x4
c0014501:	68 b8 f6 01 c0       	push   0xc001f6b8
c0014506:	68 18 3e 02 c0       	push   0xc0023e18
c001450b:	68 a8 ca 01 c0       	push   0xc001caa8
c0014510:	e8 8d 65 ff ff       	call   c000aaa2 <__cxa_atexit>
c0014515:	83 c4 10             	add    esp,0x10
c0014518:	83 ec 0c             	sub    esp,0xc
c001451b:	68 0c 3e 02 c0       	push   0xc0023e0c
c0014520:	e8 d3 85 00 00       	call   c001caf8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014525:	83 c4 10             	add    esp,0x10
c0014528:	83 ec 04             	sub    esp,0x4
c001452b:	68 b8 f6 01 c0       	push   0xc001f6b8
c0014530:	68 0c 3e 02 c0       	push   0xc0023e0c
c0014535:	68 a8 ca 01 c0       	push   0xc001caa8
c001453a:	e8 63 65 ff ff       	call   c000aaa2 <__cxa_atexit>
c001453f:	83 c4 10             	add    esp,0x10
c0014542:	66 90                	xchg   ax,ax
c0014544:	90                   	nop
c0014545:	83 c4 0c             	add    esp,0xc
c0014548:	c3                   	ret    
c0014549:	8d 76 00             	lea    esi,[esi+0x0]

c001454c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	83 ec 08             	sub    esp,0x8
c0014552:	68 ff ff 00 00       	push   0xffff
c0014557:	6a 01                	push   0x1
c0014559:	e8 4a ff ff ff       	call   c00144a8 <__static_initialization_and_destruction_0(int, int)>
c001455e:	83 c4 10             	add    esp,0x10
c0014561:	83 c4 0c             	add    esp,0xc
c0014564:	c3                   	ret    

c0014565 <Vm::inbv(unsigned short)>:
c0014565:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014569:	66 81 fa fe fe       	cmp    dx,0xfefe
c001456e:	75 06                	jne    c0014576 <Vm::inbv(unsigned short)+0x11>
c0014570:	a0 6c 3e 02 c0       	mov    al,ds:0xc0023e6c
c0014575:	c3                   	ret    
c0014576:	ec                   	in     al,dx
c0014577:	c3                   	ret    

c0014578 <Vm::outbv(unsigned short, unsigned char)>:
c0014578:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001457c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014580:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014585:	75 25                	jne    c00145ac <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014587:	8b 0d 6c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e6c
c001458d:	8d 51 01             	lea    edx,[ecx+0x1]
c0014590:	88 81 80 3e 02 c0    	mov    BYTE PTR [ecx-0x3ffdc180],al
c0014596:	89 15 6c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e6c,edx
c001459c:	83 fa 20             	cmp    edx,0x20
c001459f:	75 0c                	jne    c00145ad <Vm::outbv(unsigned short, unsigned char)+0x35>
c00145a1:	c7 05 6c 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x1f
c00145ab:	c3                   	ret    
c00145ac:	ee                   	out    dx,al
c00145ad:	c3                   	ret    

c00145ae <Vm::realToLinear(unsigned short, unsigned short)>:
c00145ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145b8:	c1 e0 04             	shl    eax,0x4
c00145bb:	01 d0                	add    eax,edx
c00145bd:	c3                   	ret    

c00145be <Vm::getSegment(unsigned int)>:
c00145be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145c2:	c1 e8 10             	shr    eax,0x10
c00145c5:	c3                   	ret    

c00145c6 <Vm::getOffset(unsigned int)>:
c00145c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145ca:	c3                   	ret    

c00145cb <Vm::mainloop2()>:
c00145cb:	83 ec 18             	sub    esp,0x18
c00145ce:	fa                   	cli    
c00145cf:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00145d5:	6a 02                	push   0x2
c00145d7:	c6 05 65 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e65,0x1
c00145de:	e8 19 f6 ff ff       	call   c0013bfc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00145e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145e8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00145ec:	52                   	push   edx
c00145ed:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00145f1:	52                   	push   edx
c00145f2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00145f6:	52                   	push   edx
c00145f7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00145fb:	50                   	push   eax
c00145fc:	e8 2e bc fe ff       	call   c000022f <goToVM86>
c0014601:	83 c4 2c             	add    esp,0x2c
c0014604:	c3                   	ret    

c0014605 <Vm::mainVm8086Loop(void*)>:
c0014605:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001460a:	48                   	dec    eax
c001460b:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014610:	75 01                	jne    c0014613 <Vm::mainVm8086Loop(void*)+0xe>
c0014612:	fb                   	sti    
c0014613:	eb b6                	jmp    c00145cb <Vm::mainloop2()>

c0014615 <Vm::mainloop3(unsigned long)>:
c0014615:	83 ec 18             	sub    esp,0x18
c0014618:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001461c:	fa                   	cli    
c001461d:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014623:	6a 02                	push   0x2
c0014625:	c6 05 64 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e64,0x1
c001462c:	a3 60 3e 02 c0       	mov    ds:0xc0023e60,eax
c0014631:	e8 c6 f5 ff ff       	call   c0013bfc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014636:	83 c4 1c             	add    esp,0x1c
c0014639:	eb 90                	jmp    c00145cb <Vm::mainloop2()>

c001463b <Vm::initialise8086()>:
c001463b:	83 ec 0c             	sub    esp,0xc
c001463e:	68 80 00 00 00       	push   0x80
c0014643:	6a 00                	push   0x0
c0014645:	68 05 46 01 c0       	push   0xc0014605
c001464a:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0014650:	e8 b3 f1 ff ff       	call   c0013808 <Process::createThread(void (*)(void*), void*, int)>
c0014655:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001465c:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0014661:	68 00 01 00 00       	push   0x100
c0014666:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001466b:	6a 00                	push   0x0
c001466d:	6a 00                	push   0x0
c001466f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014675:	e8 aa 5c ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001467a:	83 c4 2c             	add    esp,0x2c
c001467d:	c3                   	ret    

c001467e <Vm::finish8086()>:
c001467e:	53                   	push   ebx
c001467f:	83 ec 08             	sub    esp,0x8
c0014682:	fa                   	cli    
c0014683:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014689:	80 3d 64 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e64,0x0
c0014690:	75 15                	jne    c00146a7 <Vm::finish8086()+0x29>
c0014692:	e8 91 f3 ff ff       	call   c0013a28 <schedule()>
c0014697:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001469c:	48                   	dec    eax
c001469d:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00146a2:	75 de                	jne    c0014682 <Vm::finish8086()+0x4>
c00146a4:	fb                   	sti    
c00146a5:	eb db                	jmp    c0014682 <Vm::finish8086()+0x4>
c00146a7:	83 ec 0c             	sub    esp,0xc
c00146aa:	8b 1d 60 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e60
c00146b0:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c00146b6:	c6 05 64 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e64,0x0
c00146bd:	e8 2a f8 ff ff       	call   c0013eec <unblockTask(ThreadControlBlock*)>
c00146c2:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00146c7:	83 c4 10             	add    esp,0x10
c00146ca:	8d 50 ff             	lea    edx,[eax-0x1]
c00146cd:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c00146d3:	85 d2                	test   edx,edx
c00146d5:	75 01                	jne    c00146d8 <Vm::finish8086()+0x5a>
c00146d7:	fb                   	sti    
c00146d8:	89 d8                	mov    eax,ebx
c00146da:	83 c4 08             	add    esp,0x8
c00146dd:	5b                   	pop    ebx
c00146de:	c3                   	ret    

c00146df <Vm::getOutput8086(unsigned char*)>:
c00146df:	57                   	push   edi
c00146e0:	8b 0d 6c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e6c
c00146e6:	56                   	push   esi
c00146e7:	be 80 3e 02 c0       	mov    esi,0xc0023e80
c00146ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00146f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146f2:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c00146f7:	5e                   	pop    esi
c00146f8:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c0014702:	5f                   	pop    edi
c0014703:	c3                   	ret    

c0014704 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014704:	55                   	push   ebp
c0014705:	57                   	push   edi
c0014706:	56                   	push   esi
c0014707:	53                   	push   ebx
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001470f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014713:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014717:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001471b:	fa                   	cli    
c001471c:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014722:	80 3d 65 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e65,0x0
c0014729:	75 15                	jne    c0014740 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001472b:	e8 f8 f2 ff ff       	call   c0013a28 <schedule()>
c0014730:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014735:	48                   	dec    eax
c0014736:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001473b:	75 de                	jne    c001471b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001473d:	fb                   	sti    
c001473e:	eb db                	jmp    c001471b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014740:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0014745:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c001474f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014753:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014757:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001475b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001475f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014763:	0f b7 ff             	movzx  edi,di
c0014766:	0f b7 f6             	movzx  esi,si
c0014769:	50                   	push   eax
c001476a:	6a 20                	push   0x20
c001476c:	6a 00                	push   0x0
c001476e:	68 80 3e 02 c0       	push   0xc0023e80
c0014773:	e8 78 bd fe ff       	call   c00004f0 <memset>
c0014778:	5a                   	pop    edx
c0014779:	59                   	pop    ecx
c001477a:	57                   	push   edi
c001477b:	56                   	push   esi
c001477c:	e8 2d fe ff ff       	call   c00145ae <Vm::realToLinear(unsigned short, unsigned short)>
c0014781:	83 c4 10             	add    esp,0x10
c0014784:	89 c7                	mov    edi,eax
c0014786:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001478a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001478e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014790:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014795:	c6 05 65 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e65,0x0
c001479c:	48                   	dec    eax
c001479d:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00147a2:	75 01                	jne    c00147a5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00147a4:	fb                   	sti    
c00147a5:	83 ec 0c             	sub    esp,0xc
c00147a8:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c00147ae:	e8 39 f7 ff ff       	call   c0013eec <unblockTask(ThreadControlBlock*)>
c00147b3:	83 c4 1c             	add    esp,0x1c
c00147b6:	b0 01                	mov    al,0x1
c00147b8:	5b                   	pop    ebx
c00147b9:	5e                   	pop    esi
c00147ba:	5f                   	pop    edi
c00147bb:	5d                   	pop    ebp
c00147bc:	c3                   	ret    

c00147bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00147bd:	55                   	push   ebp
c00147be:	57                   	push   edi
c00147bf:	56                   	push   esi
c00147c0:	53                   	push   ebx
c00147c1:	83 ec 2c             	sub    esp,0x2c
c00147c4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00147c8:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00147cc:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00147d0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00147d4:	fa                   	cli    
c00147d5:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00147db:	0f b6 35 65 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023e65
c00147e2:	89 f0                	mov    eax,esi
c00147e4:	84 c0                	test   al,al
c00147e6:	75 1d                	jne    c0014805 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00147e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147ec:	e8 37 f2 ff ff       	call   c0013a28 <schedule()>
c00147f1:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00147f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147fa:	48                   	dec    eax
c00147fb:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014800:	75 d2                	jne    c00147d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014802:	fb                   	sti    
c0014803:	eb cf                	jmp    c00147d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014805:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c001480a:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c0014814:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014818:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001481c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014820:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014824:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014828:	50                   	push   eax
c0014829:	6a 20                	push   0x20
c001482b:	6a 00                	push   0x0
c001482d:	68 80 3e 02 c0       	push   0xc0023e80
c0014832:	e8 b9 bc fe ff       	call   c00004f0 <memset>
c0014837:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001483e:	e8 16 36 ff ff       	call   c0007e59 <malloc>
c0014843:	83 c4 0c             	add    esp,0xc
c0014846:	89 c3                	mov    ebx,eax
c0014848:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c001484e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014852:	50                   	push   eax
c0014853:	e8 06 69 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0014858:	83 c4 10             	add    esp,0x10
c001485b:	85 db                	test   ebx,ebx
c001485d:	75 0a                	jne    c0014869 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001485f:	83 ec 0c             	sub    esp,0xc
c0014862:	68 20 ec 01 c0       	push   0xc001ec20
c0014867:	eb 3e                	jmp    c00148a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014869:	50                   	push   eax
c001486a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001486e:	50                   	push   eax
c001486f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014873:	50                   	push   eax
c0014874:	53                   	push   ebx
c0014875:	e8 50 6c ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c001487a:	83 c4 10             	add    esp,0x10
c001487d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014882:	74 0a                	je     c001488e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014884:	83 ec 0c             	sub    esp,0xc
c0014887:	68 34 ec 01 c0       	push   0xc001ec34
c001488c:	eb 19                	jmp    c00148a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001488e:	51                   	push   ecx
c001488f:	51                   	push   ecx
c0014890:	6a 01                	push   0x1
c0014892:	53                   	push   ebx
c0014893:	e8 86 69 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0014898:	83 c4 10             	add    esp,0x10
c001489b:	85 c0                	test   eax,eax
c001489d:	74 24                	je     c00148c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001489f:	83 ec 0c             	sub    esp,0xc
c00148a2:	68 4d ec 01 c0       	push   0xc001ec4d
c00148a7:	e8 27 be ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c00148ac:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00148b1:	83 c4 10             	add    esp,0x10
c00148b4:	48                   	dec    eax
c00148b5:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00148ba:	85 c0                	test   eax,eax
c00148bc:	75 01                	jne    c00148bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00148be:	fb                   	sti    
c00148bf:	31 f6                	xor    esi,esi
c00148c1:	eb 58                	jmp    c001491b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00148c3:	0f b7 ed             	movzx  ebp,bp
c00148c6:	50                   	push   eax
c00148c7:	0f b7 ff             	movzx  edi,di
c00148ca:	50                   	push   eax
c00148cb:	55                   	push   ebp
c00148cc:	57                   	push   edi
c00148cd:	e8 dc fc ff ff       	call   c00145ae <Vm::realToLinear(unsigned short, unsigned short)>
c00148d2:	5a                   	pop    edx
c00148d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00148d5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00148d9:	51                   	push   ecx
c00148da:	50                   	push   eax
c00148db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00148df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00148e3:	53                   	push   ebx
c00148e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00148e7:	83 c4 14             	add    esp,0x14
c00148ea:	53                   	push   ebx
c00148eb:	e8 8c 69 ff ff       	call   c000b27c <File::close()>
c00148f0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00148f5:	83 c4 10             	add    esp,0x10
c00148f8:	48                   	dec    eax
c00148f9:	c6 05 65 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e65,0x0
c0014900:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014905:	85 c0                	test   eax,eax
c0014907:	75 01                	jne    c001490a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014909:	fb                   	sti    
c001490a:	83 ec 0c             	sub    esp,0xc
c001490d:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c0014913:	e8 d4 f5 ff ff       	call   c0013eec <unblockTask(ThreadControlBlock*)>
c0014918:	83 c4 10             	add    esp,0x10
c001491b:	83 c4 2c             	add    esp,0x2c
c001491e:	89 f0                	mov    eax,esi
c0014920:	5b                   	pop    ebx
c0014921:	5e                   	pop    esi
c0014922:	5f                   	pop    edi
c0014923:	5d                   	pop    ebp
c0014924:	c3                   	ret    

c0014925 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014925:	57                   	push   edi
c0014926:	56                   	push   esi
c0014927:	53                   	push   ebx
c0014928:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001492c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014930:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014934:	83 e8 06             	sub    eax,0x6
c0014937:	0f b7 c0             	movzx  eax,ax
c001493a:	50                   	push   eax
c001493b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014940:	50                   	push   eax
c0014941:	e8 68 fc ff ff       	call   c00145ae <Vm::realToLinear(unsigned short, unsigned short)>
c0014946:	5a                   	pop    edx
c0014947:	5e                   	pop    esi
c0014948:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001494b:	8d 56 fa             	lea    edx,[esi-0x6]
c001494e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014954:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014957:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001495a:	83 c2 02             	add    edx,0x2
c001495d:	66 89 10             	mov    WORD PTR [eax],dx
c0014960:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014963:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014967:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001496a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001496e:	89 d6                	mov    esi,edx
c0014970:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014976:	66 81 e6 ff fd       	and    si,0xfdff
c001497b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001497f:	74 07                	je     c0014988 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014981:	89 d6                	mov    esi,edx
c0014983:	66 81 ce 00 02       	or     si,0x200
c0014988:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001498c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014991:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014995:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001499d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00149a0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00149a8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00149ab:	5b                   	pop    ebx
c00149ac:	5e                   	pop    esi
c00149ad:	5f                   	pop    edi
c00149ae:	c3                   	ret    

c00149af <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00149af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149b9:	c1 e0 04             	shl    eax,0x4
c00149bc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00149bf:	c3                   	ret    

c00149c0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00149c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149ca:	c1 e0 04             	shl    eax,0x4
c00149cd:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00149d1:	c3                   	ret    

c00149d2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00149d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149dc:	c1 e0 04             	shl    eax,0x4
c00149df:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00149e2:	c3                   	ret    

c00149e3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00149e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00149ed:	c1 e0 04             	shl    eax,0x4
c00149f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149f4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00149f7:	c3                   	ret    

c00149f8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00149f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00149fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a02:	c1 e0 04             	shl    eax,0x4
c0014a05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a09:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014a0d:	c3                   	ret    

c0014a0e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014a0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a18:	c1 e0 04             	shl    eax,0x4
c0014a1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a1f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014a22:	c3                   	ret    

c0014a23 <Vm::faultHandler(regs*)>:
c0014a23:	55                   	push   ebp
c0014a24:	57                   	push   edi
c0014a25:	56                   	push   esi
c0014a26:	53                   	push   ebx
c0014a27:	83 ec 1c             	sub    esp,0x1c
c0014a2a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014a2e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a31:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014a35:	0f b7 f8             	movzx  edi,ax
c0014a38:	52                   	push   edx
c0014a39:	0f b7 c0             	movzx  eax,ax
c0014a3c:	50                   	push   eax
c0014a3d:	e8 6c fb ff ff       	call   c00145ae <Vm::realToLinear(unsigned short, unsigned short)>
c0014a42:	5a                   	pop    edx
c0014a43:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014a46:	59                   	pop    ecx
c0014a47:	89 c1                	mov    ecx,eax
c0014a49:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a50:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a59:	0f b7 c5             	movzx  eax,bp
c0014a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a60:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014a64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a68:	e8 41 fb ff ff       	call   c00145ae <Vm::realToLinear(unsigned short, unsigned short)>
c0014a6d:	5e                   	pop    esi
c0014a6e:	be 06 00 00 00       	mov    esi,0x6
c0014a73:	5a                   	pop    edx
c0014a74:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014a79:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014a7e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014a81:	80 fa 9d             	cmp    dl,0x9d
c0014a84:	0f 84 2c 02 00 00    	je     c0014cb6 <Vm::faultHandler(regs*)+0x293>
c0014a8a:	0f 87 91 00 00 00    	ja     c0014b21 <Vm::faultHandler(regs*)+0xfe>
c0014a90:	80 fa 66             	cmp    dl,0x66
c0014a93:	0f 84 98 01 00 00    	je     c0014c31 <Vm::faultHandler(regs*)+0x20e>
c0014a99:	77 47                	ja     c0014ae2 <Vm::faultHandler(regs*)+0xbf>
c0014a9b:	80 fa 36             	cmp    dl,0x36
c0014a9e:	0f 84 80 01 00 00    	je     c0014c24 <Vm::faultHandler(regs*)+0x201>
c0014aa4:	77 1a                	ja     c0014ac0 <Vm::faultHandler(regs*)+0x9d>
c0014aa6:	80 fa 26             	cmp    dl,0x26
c0014aa9:	0f 84 4e 01 00 00    	je     c0014bfd <Vm::faultHandler(regs*)+0x1da>
c0014aaf:	80 fa 2e             	cmp    dl,0x2e
c0014ab2:	0f 85 e2 05 00 00    	jne    c001509a <Vm::faultHandler(regs*)+0x677>
c0014ab8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014abb:	31 f6                	xor    esi,esi
c0014abd:	41                   	inc    ecx
c0014abe:	eb be                	jmp    c0014a7e <Vm::faultHandler(regs*)+0x5b>
c0014ac0:	80 fa 64             	cmp    dl,0x64
c0014ac3:	0f 84 41 01 00 00    	je     c0014c0a <Vm::faultHandler(regs*)+0x1e7>
c0014ac9:	0f 87 48 01 00 00    	ja     c0014c17 <Vm::faultHandler(regs*)+0x1f4>
c0014acf:	80 fa 3e             	cmp    dl,0x3e
c0014ad2:	0f 85 c2 05 00 00    	jne    c001509a <Vm::faultHandler(regs*)+0x677>
c0014ad8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014adb:	be 01 00 00 00       	mov    esi,0x1
c0014ae0:	eb db                	jmp    c0014abd <Vm::faultHandler(regs*)+0x9a>
c0014ae2:	80 fa 6d             	cmp    dl,0x6d
c0014ae5:	0f 84 ec 02 00 00    	je     c0014dd7 <Vm::faultHandler(regs*)+0x3b4>
c0014aeb:	77 17                	ja     c0014b04 <Vm::faultHandler(regs*)+0xe1>
c0014aed:	80 fa 67             	cmp    dl,0x67
c0014af0:	0f 84 48 01 00 00    	je     c0014c3e <Vm::faultHandler(regs*)+0x21b>
c0014af6:	80 fa 6c             	cmp    dl,0x6c
c0014af9:	0f 84 69 02 00 00    	je     c0014d68 <Vm::faultHandler(regs*)+0x345>
c0014aff:	e9 96 05 00 00       	jmp    c001509a <Vm::faultHandler(regs*)+0x677>
c0014b04:	80 fa 6f             	cmp    dl,0x6f
c0014b07:	0f 84 f4 03 00 00    	je     c0014f01 <Vm::faultHandler(regs*)+0x4de>
c0014b0d:	0f 82 59 03 00 00    	jb     c0014e6c <Vm::faultHandler(regs*)+0x449>
c0014b13:	80 fa 9c             	cmp    dl,0x9c
c0014b16:	0f 84 2f 01 00 00    	je     c0014c4b <Vm::faultHandler(regs*)+0x228>
c0014b1c:	e9 79 05 00 00       	jmp    c001509a <Vm::faultHandler(regs*)+0x677>
c0014b21:	80 fa ec             	cmp    dl,0xec
c0014b24:	0f 84 14 05 00 00    	je     c001503e <Vm::faultHandler(regs*)+0x61b>
c0014b2a:	77 7b                	ja     c0014ba7 <Vm::faultHandler(regs*)+0x184>
c0014b2c:	80 fa e4             	cmp    dl,0xe4
c0014b2f:	0f 84 93 04 00 00    	je     c0014fc8 <Vm::faultHandler(regs*)+0x5a5>
c0014b35:	77 53                	ja     c0014b8a <Vm::faultHandler(regs*)+0x167>
c0014b37:	80 fa cd             	cmp    dl,0xcd
c0014b3a:	0f 84 d9 01 00 00    	je     c0014d19 <Vm::faultHandler(regs*)+0x2f6>
c0014b40:	80 fa cf             	cmp    dl,0xcf
c0014b43:	0f 85 51 05 00 00    	jne    c001509a <Vm::faultHandler(regs*)+0x677>
c0014b49:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014b4c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014b4f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014b53:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014b56:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014b5a:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b60:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b63:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b67:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b6d:	66 c1 e8 09          	shr    ax,0x9
c0014b71:	83 e0 01             	and    eax,0x1
c0014b74:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b77:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b7a:	83 c0 06             	add    eax,0x6
c0014b7d:	25 ff ff 00 00       	and    eax,0xffff
c0014b82:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b85:	e9 0c 05 00 00       	jmp    c0015096 <Vm::faultHandler(regs*)+0x673>
c0014b8a:	80 fa e6             	cmp    dl,0xe6
c0014b8d:	0f 84 7f 04 00 00    	je     c0015012 <Vm::faultHandler(regs*)+0x5ef>
c0014b93:	0f 82 4b 04 00 00    	jb     c0014fe4 <Vm::faultHandler(regs*)+0x5c1>
c0014b99:	80 fa e7             	cmp    dl,0xe7
c0014b9c:	0f 84 87 04 00 00    	je     c0015029 <Vm::faultHandler(regs*)+0x606>
c0014ba2:	e9 f3 04 00 00       	jmp    c001509a <Vm::faultHandler(regs*)+0x677>
c0014ba7:	80 fa ef             	cmp    dl,0xef
c0014baa:	0f 84 d1 04 00 00    	je     c0015081 <Vm::faultHandler(regs*)+0x65e>
c0014bb0:	77 28                	ja     c0014bda <Vm::faultHandler(regs*)+0x1b7>
c0014bb2:	80 fa ed             	cmp    dl,0xed
c0014bb5:	0f 84 9f 04 00 00    	je     c001505a <Vm::faultHandler(regs*)+0x637>
c0014bbb:	80 fa ee             	cmp    dl,0xee
c0014bbe:	0f 85 d6 04 00 00    	jne    c001509a <Vm::faultHandler(regs*)+0x677>
c0014bc4:	50                   	push   eax
c0014bc5:	50                   	push   eax
c0014bc6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014bca:	50                   	push   eax
c0014bcb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014bcf:	50                   	push   eax
c0014bd0:	e8 a3 f9 ff ff       	call   c0014578 <Vm::outbv(unsigned short, unsigned char)>
c0014bd5:	e9 9f 04 00 00       	jmp    c0015079 <Vm::faultHandler(regs*)+0x656>
c0014bda:	80 fa fa             	cmp    dl,0xfa
c0014bdd:	0f 84 69 01 00 00    	je     c0014d4c <Vm::faultHandler(regs*)+0x329>
c0014be3:	80 fa fb             	cmp    dl,0xfb
c0014be6:	0f 84 6e 01 00 00    	je     c0014d5a <Vm::faultHandler(regs*)+0x337>
c0014bec:	80 fa f3             	cmp    dl,0xf3
c0014bef:	0f 85 a5 04 00 00    	jne    c001509a <Vm::faultHandler(regs*)+0x677>
c0014bf5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014bf8:	e9 c0 fe ff ff       	jmp    c0014abd <Vm::faultHandler(regs*)+0x9a>
c0014bfd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c00:	be 02 00 00 00       	mov    esi,0x2
c0014c05:	e9 b3 fe ff ff       	jmp    c0014abd <Vm::faultHandler(regs*)+0x9a>
c0014c0a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c0d:	be 03 00 00 00       	mov    esi,0x3
c0014c12:	e9 a6 fe ff ff       	jmp    c0014abd <Vm::faultHandler(regs*)+0x9a>
c0014c17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c1a:	be 04 00 00 00       	mov    esi,0x4
c0014c1f:	e9 99 fe ff ff       	jmp    c0014abd <Vm::faultHandler(regs*)+0x9a>
c0014c24:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c27:	be 05 00 00 00       	mov    esi,0x5
c0014c2c:	e9 8c fe ff ff       	jmp    c0014abd <Vm::faultHandler(regs*)+0x9a>
c0014c31:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c34:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014c39:	e9 7f fe ff ff       	jmp    c0014abd <Vm::faultHandler(regs*)+0x9a>
c0014c3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c41:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014c46:	e9 72 fe ff ff       	jmp    c0014abd <Vm::faultHandler(regs*)+0x9a>
c0014c4b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014c4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014c52:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c57:	74 30                	je     c0014c89 <Vm::faultHandler(regs*)+0x266>
c0014c59:	83 e9 04             	sub    ecx,0x4
c0014c5c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014c62:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014c68:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014c6b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014c6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c74:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014c78:	0f 84 15 04 00 00    	je     c0015093 <Vm::faultHandler(regs*)+0x670>
c0014c7e:	80 ce 02             	or     dh,0x2
c0014c81:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014c84:	e9 0a 04 00 00       	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0014c89:	83 e9 02             	sub    ecx,0x2
c0014c8c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014c92:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014c95:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014c99:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c9f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014ca3:	74 05                	je     c0014caa <Vm::faultHandler(regs*)+0x287>
c0014ca5:	80 ce 02             	or     dh,0x2
c0014ca8:	eb 03                	jmp    c0014cad <Vm::faultHandler(regs*)+0x28a>
c0014caa:	80 e6 fd             	and    dh,0xfd
c0014cad:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014cb1:	e9 dd 03 00 00       	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0014cb6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cbb:	74 2a                	je     c0014ce7 <Vm::faultHandler(regs*)+0x2c4>
c0014cbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0014cbf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014cc5:	81 ca 00 02 02 00    	or     edx,0x20200
c0014ccb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014cd6:	c1 e8 09             	shr    eax,0x9
c0014cd9:	83 e0 01             	and    eax,0x1
c0014cdc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014cdf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ce2:	83 c0 04             	add    eax,0x4
c0014ce5:	eb 25                	jmp    c0014d0c <Vm::faultHandler(regs*)+0x2e9>
c0014ce7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014cea:	81 ca 00 02 02 00    	or     edx,0x20200
c0014cf0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014cf3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014cf6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014cfc:	66 c1 e8 09          	shr    ax,0x9
c0014d00:	83 e0 01             	and    eax,0x1
c0014d03:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d06:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d09:	83 c0 02             	add    eax,0x2
c0014d0c:	25 ff ff 00 00       	and    eax,0xffff
c0014d11:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014d14:	e9 7a 03 00 00       	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0014d19:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d1d:	3c ee                	cmp    al,0xee
c0014d1f:	75 10                	jne    c0014d31 <Vm::faultHandler(regs*)+0x30e>
c0014d21:	83 ec 0c             	sub    esp,0xc
c0014d24:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d27:	e8 e9 f8 ff ff       	call   c0014615 <Vm::mainloop3(unsigned long)>
c0014d2c:	e9 4b 03 00 00       	jmp    c001507c <Vm::faultHandler(regs*)+0x659>
c0014d31:	83 ec 0c             	sub    esp,0xc
c0014d34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d3c:	51                   	push   ecx
c0014d3d:	50                   	push   eax
c0014d3e:	53                   	push   ebx
c0014d3f:	e8 e1 fb ff ff       	call   c0014925 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014d44:	83 c4 20             	add    esp,0x20
c0014d47:	e9 4a 03 00 00       	jmp    c0015096 <Vm::faultHandler(regs*)+0x673>
c0014d4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d51:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014d55:	e9 39 03 00 00       	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0014d5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d5f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014d63:	e9 2b 03 00 00       	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0014d68:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014d6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d70:	74 2b                	je     c0014d9d <Vm::faultHandler(regs*)+0x37a>
c0014d72:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014d79:	76 22                	jbe    c0014d9d <Vm::faultHandler(regs*)+0x37a>
c0014d7b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d7f:	50                   	push   eax
c0014d80:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d84:	50                   	push   eax
c0014d85:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d89:	50                   	push   eax
c0014d8a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d8e:	50                   	push   eax
c0014d8f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d93:	50                   	push   eax
c0014d94:	6a 6c                	push   0x6c
c0014d96:	6a 6c                	push   0x6c
c0014d98:	e9 b9 01 00 00       	jmp    c0014f56 <Vm::faultHandler(regs*)+0x533>
c0014d9d:	83 ec 0c             	sub    esp,0xc
c0014da0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014da4:	0f b7 f6             	movzx  esi,si
c0014da7:	50                   	push   eax
c0014da8:	e8 b8 f7 ff ff       	call   c0014565 <Vm::inbv(unsigned short)>
c0014dad:	83 c4 0c             	add    esp,0xc
c0014db0:	0f b6 c0             	movzx  eax,al
c0014db3:	50                   	push   eax
c0014db4:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014db8:	50                   	push   eax
c0014db9:	56                   	push   esi
c0014dba:	e8 24 fc ff ff       	call   c00149e3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014dbf:	83 c4 10             	add    esp,0x10
c0014dc2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014dc5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014dc9:	74 03                	je     c0014dce <Vm::faultHandler(regs*)+0x3ab>
c0014dcb:	48                   	dec    eax
c0014dcc:	eb 01                	jmp    c0014dcf <Vm::faultHandler(regs*)+0x3ac>
c0014dce:	40                   	inc    eax
c0014dcf:	0f b7 c0             	movzx  eax,ax
c0014dd2:	e9 8d 00 00 00       	jmp    c0014e64 <Vm::faultHandler(regs*)+0x441>
c0014dd7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014dda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ddd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014de2:	74 29                	je     c0014e0d <Vm::faultHandler(regs*)+0x3ea>
c0014de4:	3d ff ff 00 00       	cmp    eax,0xffff
c0014de9:	76 22                	jbe    c0014e0d <Vm::faultHandler(regs*)+0x3ea>
c0014deb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014def:	50                   	push   eax
c0014df0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014df4:	50                   	push   eax
c0014df5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014df9:	50                   	push   eax
c0014dfa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014dfe:	50                   	push   eax
c0014dff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e03:	50                   	push   eax
c0014e04:	6a 6d                	push   0x6d
c0014e06:	6a 6d                	push   0x6d
c0014e08:	e9 49 01 00 00       	jmp    c0014f56 <Vm::faultHandler(regs*)+0x533>
c0014e0d:	0f b7 c8             	movzx  ecx,ax
c0014e10:	0f b7 f6             	movzx  esi,si
c0014e13:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e16:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e1b:	74 20                	je     c0014e3d <Vm::faultHandler(regs*)+0x41a>
c0014e1d:	ed                   	in     eax,dx
c0014e1e:	55                   	push   ebp
c0014e1f:	50                   	push   eax
c0014e20:	51                   	push   ecx
c0014e21:	56                   	push   esi
c0014e22:	e8 e7 fb ff ff       	call   c0014a0e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e2d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e31:	74 05                	je     c0014e38 <Vm::faultHandler(regs*)+0x415>
c0014e33:	83 e8 04             	sub    eax,0x4
c0014e36:	eb 27                	jmp    c0014e5f <Vm::faultHandler(regs*)+0x43c>
c0014e38:	83 c0 04             	add    eax,0x4
c0014e3b:	eb 22                	jmp    c0014e5f <Vm::faultHandler(regs*)+0x43c>
c0014e3d:	66 ed                	in     ax,dx
c0014e3f:	0f b7 c0             	movzx  eax,ax
c0014e42:	57                   	push   edi
c0014e43:	50                   	push   eax
c0014e44:	51                   	push   ecx
c0014e45:	56                   	push   esi
c0014e46:	e8 ad fb ff ff       	call   c00149f8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014e4b:	83 c4 10             	add    esp,0x10
c0014e4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e51:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e55:	74 05                	je     c0014e5c <Vm::faultHandler(regs*)+0x439>
c0014e57:	83 e8 02             	sub    eax,0x2
c0014e5a:	eb 03                	jmp    c0014e5f <Vm::faultHandler(regs*)+0x43c>
c0014e5c:	83 c0 02             	add    eax,0x2
c0014e5f:	25 ff ff 00 00       	and    eax,0xffff
c0014e64:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014e67:	e9 27 02 00 00       	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0014e6c:	8d 46 ff             	lea    eax,[esi-0x1]
c0014e6f:	3c 05                	cmp    al,0x5
c0014e71:	77 24                	ja     c0014e97 <Vm::faultHandler(regs*)+0x474>
c0014e73:	0f b6 c0             	movzx  eax,al
c0014e76:	ff 24 85 c0 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1340]
c0014e7d:	0f b7 fd             	movzx  edi,bp
c0014e80:	eb 15                	jmp    c0014e97 <Vm::faultHandler(regs*)+0x474>
c0014e82:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014e86:	eb 0f                	jmp    c0014e97 <Vm::faultHandler(regs*)+0x474>
c0014e88:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014e8c:	eb 09                	jmp    c0014e97 <Vm::faultHandler(regs*)+0x474>
c0014e8e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014e92:	eb 03                	jmp    c0014e97 <Vm::faultHandler(regs*)+0x474>
c0014e94:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014e97:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014e9a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e9f:	74 29                	je     c0014eca <Vm::faultHandler(regs*)+0x4a7>
c0014ea1:	3d ff ff 00 00       	cmp    eax,0xffff
c0014ea6:	76 22                	jbe    c0014eca <Vm::faultHandler(regs*)+0x4a7>
c0014ea8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014eac:	50                   	push   eax
c0014ead:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014eb1:	50                   	push   eax
c0014eb2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014eb6:	50                   	push   eax
c0014eb7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ebb:	50                   	push   eax
c0014ebc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ec0:	50                   	push   eax
c0014ec1:	6a 6e                	push   0x6e
c0014ec3:	6a 6e                	push   0x6e
c0014ec5:	e9 8c 00 00 00       	jmp    c0014f56 <Vm::faultHandler(regs*)+0x533>
c0014eca:	0f b7 c0             	movzx  eax,ax
c0014ecd:	52                   	push   edx
c0014ece:	52                   	push   edx
c0014ecf:	50                   	push   eax
c0014ed0:	57                   	push   edi
c0014ed1:	e8 d9 fa ff ff       	call   c00149af <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014ed6:	59                   	pop    ecx
c0014ed7:	0f b6 c0             	movzx  eax,al
c0014eda:	5e                   	pop    esi
c0014edb:	50                   	push   eax
c0014edc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ee0:	50                   	push   eax
c0014ee1:	e8 92 f6 ff ff       	call   c0014578 <Vm::outbv(unsigned short, unsigned char)>
c0014ee6:	83 c4 10             	add    esp,0x10
c0014ee9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014eec:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ef0:	74 03                	je     c0014ef5 <Vm::faultHandler(regs*)+0x4d2>
c0014ef2:	48                   	dec    eax
c0014ef3:	eb 01                	jmp    c0014ef6 <Vm::faultHandler(regs*)+0x4d3>
c0014ef5:	40                   	inc    eax
c0014ef6:	0f b7 c0             	movzx  eax,ax
c0014ef9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014efc:	e9 92 01 00 00       	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0014f01:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f04:	3c 05                	cmp    al,0x5
c0014f06:	77 1f                	ja     c0014f27 <Vm::faultHandler(regs*)+0x504>
c0014f08:	0f b6 c0             	movzx  eax,al
c0014f0b:	ff 24 85 d8 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1328]
c0014f12:	89 ef                	mov    edi,ebp
c0014f14:	eb 11                	jmp    c0014f27 <Vm::faultHandler(regs*)+0x504>
c0014f16:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014f19:	eb 0c                	jmp    c0014f27 <Vm::faultHandler(regs*)+0x504>
c0014f1b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014f1e:	eb 07                	jmp    c0014f27 <Vm::faultHandler(regs*)+0x504>
c0014f20:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014f23:	eb 02                	jmp    c0014f27 <Vm::faultHandler(regs*)+0x504>
c0014f25:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014f27:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014f2a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f2f:	74 37                	je     c0014f68 <Vm::faultHandler(regs*)+0x545>
c0014f31:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014f37:	76 2f                	jbe    c0014f68 <Vm::faultHandler(regs*)+0x545>
c0014f39:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f3d:	50                   	push   eax
c0014f3e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f42:	50                   	push   eax
c0014f43:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f47:	50                   	push   eax
c0014f48:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f4c:	50                   	push   eax
c0014f4d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f51:	50                   	push   eax
c0014f52:	6a 6f                	push   0x6f
c0014f54:	6a 6f                	push   0x6f
c0014f56:	68 66 ec 01 c0       	push   0xc001ec66
c0014f5b:	e8 88 5c ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0014f60:	83 c4 20             	add    esp,0x20
c0014f63:	e9 86 01 00 00       	jmp    c00150ee <Vm::faultHandler(regs*)+0x6cb>
c0014f68:	0f b7 d7             	movzx  edx,di
c0014f6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014f6e:	0f b7 c6             	movzx  eax,si
c0014f71:	81 e1 00 04 00 00    	and    ecx,0x400
c0014f77:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014f7a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f7f:	74 1d                	je     c0014f9e <Vm::faultHandler(regs*)+0x57b>
c0014f81:	55                   	push   ebp
c0014f82:	55                   	push   ebp
c0014f83:	50                   	push   eax
c0014f84:	52                   	push   edx
c0014f85:	e8 48 fa ff ff       	call   c00149d2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	89 fa                	mov    edx,edi
c0014f8f:	ef                   	out    dx,eax
c0014f90:	85 c9                	test   ecx,ecx
c0014f92:	74 05                	je     c0014f99 <Vm::faultHandler(regs*)+0x576>
c0014f94:	83 ee 04             	sub    esi,0x4
c0014f97:	eb 21                	jmp    c0014fba <Vm::faultHandler(regs*)+0x597>
c0014f99:	83 c6 04             	add    esi,0x4
c0014f9c:	eb 1c                	jmp    c0014fba <Vm::faultHandler(regs*)+0x597>
c0014f9e:	55                   	push   ebp
c0014f9f:	55                   	push   ebp
c0014fa0:	50                   	push   eax
c0014fa1:	52                   	push   edx
c0014fa2:	e8 19 fa ff ff       	call   c00149c0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014fa7:	83 c4 10             	add    esp,0x10
c0014faa:	89 fa                	mov    edx,edi
c0014fac:	66 ef                	out    dx,ax
c0014fae:	85 c9                	test   ecx,ecx
c0014fb0:	74 05                	je     c0014fb7 <Vm::faultHandler(regs*)+0x594>
c0014fb2:	83 ee 02             	sub    esi,0x2
c0014fb5:	eb 03                	jmp    c0014fba <Vm::faultHandler(regs*)+0x597>
c0014fb7:	83 c6 02             	add    esi,0x2
c0014fba:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014fc0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014fc3:	e9 cb 00 00 00       	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0014fc8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014fcf:	83 ec 0c             	sub    esp,0xc
c0014fd2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fd6:	50                   	push   eax
c0014fd7:	e8 89 f5 ff ff       	call   c0014565 <Vm::inbv(unsigned short)>
c0014fdc:	0f b6 c0             	movzx  eax,al
c0014fdf:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014fe2:	eb 3f                	jmp    c0015023 <Vm::faultHandler(regs*)+0x600>
c0014fe4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014fe9:	74 07                	je     c0014ff2 <Vm::faultHandler(regs*)+0x5cf>
c0014feb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014fef:	ed                   	in     eax,dx
c0014ff0:	eb 14                	jmp    c0015006 <Vm::faultHandler(regs*)+0x5e3>
c0014ff2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014ff5:	66 31 f6             	xor    si,si
c0014ff8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014ffb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014fff:	66 ed                	in     ax,dx
c0015001:	0f b7 c0             	movzx  eax,ax
c0015004:	09 f0                	or     eax,esi
c0015006:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015009:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001500d:	e9 84 00 00 00       	jmp    c0015096 <Vm::faultHandler(regs*)+0x673>
c0015012:	52                   	push   edx
c0015013:	52                   	push   edx
c0015014:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015018:	50                   	push   eax
c0015019:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001501d:	50                   	push   eax
c001501e:	e8 55 f5 ff ff       	call   c0014578 <Vm::outbv(unsigned short, unsigned char)>
c0015023:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015027:	eb 53                	jmp    c001507c <Vm::faultHandler(regs*)+0x659>
c0015029:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001502c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015030:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015035:	74 03                	je     c001503a <Vm::faultHandler(regs*)+0x617>
c0015037:	ef                   	out    dx,eax
c0015038:	eb cf                	jmp    c0015009 <Vm::faultHandler(regs*)+0x5e6>
c001503a:	66 ef                	out    dx,ax
c001503c:	eb cb                	jmp    c0015009 <Vm::faultHandler(regs*)+0x5e6>
c001503e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015045:	83 ec 0c             	sub    esp,0xc
c0015048:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001504c:	50                   	push   eax
c001504d:	e8 13 f5 ff ff       	call   c0014565 <Vm::inbv(unsigned short)>
c0015052:	0f b6 c0             	movzx  eax,al
c0015055:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015058:	eb 1f                	jmp    c0015079 <Vm::faultHandler(regs*)+0x656>
c001505a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001505d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015062:	74 03                	je     c0015067 <Vm::faultHandler(regs*)+0x644>
c0015064:	ed                   	in     eax,dx
c0015065:	eb 0d                	jmp    c0015074 <Vm::faultHandler(regs*)+0x651>
c0015067:	66 ed                	in     ax,dx
c0015069:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001506c:	0f b7 c0             	movzx  eax,ax
c001506f:	66 31 d2             	xor    dx,dx
c0015072:	09 d0                	or     eax,edx
c0015074:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015077:	eb 1a                	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0015079:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001507c:	83 c4 10             	add    esp,0x10
c001507f:	eb 15                	jmp    c0015096 <Vm::faultHandler(regs*)+0x673>
c0015081:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015084:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015087:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001508c:	74 03                	je     c0015091 <Vm::faultHandler(regs*)+0x66e>
c001508e:	ef                   	out    dx,eax
c001508f:	eb 02                	jmp    c0015093 <Vm::faultHandler(regs*)+0x670>
c0015091:	66 ef                	out    dx,ax
c0015093:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015096:	b0 01                	mov    al,0x1
c0015098:	eb 56                	jmp    c00150f0 <Vm::faultHandler(regs*)+0x6cd>
c001509a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001509e:	50                   	push   eax
c001509f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00150a3:	50                   	push   eax
c00150a4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00150a8:	50                   	push   eax
c00150a9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00150ad:	50                   	push   eax
c00150ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00150b2:	50                   	push   eax
c00150b3:	52                   	push   edx
c00150b4:	52                   	push   edx
c00150b5:	68 93 ec 01 c0       	push   0xc001ec93
c00150ba:	e8 29 5b ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00150bf:	83 c4 20             	add    esp,0x20
c00150c2:	83 ec 0c             	sub    esp,0xc
c00150c5:	6a 60                	push   0x60
c00150c7:	e8 99 f4 ff ff       	call   c0014565 <Vm::inbv(unsigned short)>
c00150cc:	83 c4 10             	add    esp,0x10
c00150cf:	3c 1c                	cmp    al,0x1c
c00150d1:	74 04                	je     c00150d7 <Vm::faultHandler(regs*)+0x6b4>
c00150d3:	3c 5a                	cmp    al,0x5a
c00150d5:	75 eb                	jne    c00150c2 <Vm::faultHandler(regs*)+0x69f>
c00150d7:	3c 5a                	cmp    al,0x5a
c00150d9:	74 04                	je     c00150df <Vm::faultHandler(regs*)+0x6bc>
c00150db:	3c 1c                	cmp    al,0x1c
c00150dd:	75 0f                	jne    c00150ee <Vm::faultHandler(regs*)+0x6cb>
c00150df:	83 ec 0c             	sub    esp,0xc
c00150e2:	6a 60                	push   0x60
c00150e4:	e8 7c f4 ff ff       	call   c0014565 <Vm::inbv(unsigned short)>
c00150e9:	83 c4 10             	add    esp,0x10
c00150ec:	eb e9                	jmp    c00150d7 <Vm::faultHandler(regs*)+0x6b4>
c00150ee:	31 c0                	xor    eax,eax
c00150f0:	83 c4 1c             	add    esp,0x1c
c00150f3:	5b                   	pop    ebx
c00150f4:	5e                   	pop    esi
c00150f5:	5f                   	pop    edi
c00150f6:	5d                   	pop    ebp
c00150f7:	c3                   	ret    

c00150f8 <noCopro(unsigned long)>:
c00150f8:	c3                   	ret    

c00150f9 <nmiHandler(regs*, void*)>:
c00150f9:	83 ec 0c             	sub    esp,0xc
c00150fc:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0015101:	83 ec 0c             	sub    esp,0xc
c0015104:	50                   	push   eax
c0015105:	e8 74 25 ff ff       	call   c000767e <Computer::handleNMI()>
c001510a:	83 c4 10             	add    esp,0x10
c001510d:	90                   	nop
c001510e:	83 c4 0c             	add    esp,0xc
c0015111:	c3                   	ret    

c0015112 <doubleFault(regs*, void*)>:
c0015112:	55                   	push   ebp
c0015113:	89 e5                	mov    ebp,esp
c0015115:	83 ec 08             	sub    esp,0x8
c0015118:	83 ec 0c             	sub    esp,0xc
c001511b:	68 f0 ec 01 c0       	push   0xc001ecf0
c0015120:	e8 ae b5 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0015125:	83 c4 10             	add    esp,0x10
c0015128:	90                   	nop
c0015129:	c9                   	leave  
c001512a:	c3                   	ret    

c001512b <displayDebugInfo(regs*)>:
c001512b:	83 ec 1c             	sub    esp,0x1c
c001512e:	0f 20 c0             	mov    eax,cr0
c0015131:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015135:	0f 20 d0             	mov    eax,cr2
c0015138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001513c:	0f 20 d8             	mov    eax,cr3
c001513f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015143:	0f 20 e0             	mov    eax,cr4
c0015146:	89 04 24             	mov    DWORD PTR [esp],eax
c0015149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001514d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015150:	83 ec 08             	sub    esp,0x8
c0015153:	50                   	push   eax
c0015154:	68 0c ed 01 c0       	push   0xc001ed0c
c0015159:	e8 8a 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001515e:	83 c4 10             	add    esp,0x10
c0015161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015165:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015168:	83 ec 08             	sub    esp,0x8
c001516b:	50                   	push   eax
c001516c:	68 fd ec 01 c0       	push   0xc001ecfd
c0015171:	e8 72 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001517d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015180:	83 ec 08             	sub    esp,0x8
c0015183:	50                   	push   eax
c0015184:	68 08 ed 01 c0       	push   0xc001ed08
c0015189:	e8 5a 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001518e:	83 c4 10             	add    esp,0x10
c0015191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015195:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015198:	83 ec 08             	sub    esp,0x8
c001519b:	50                   	push   eax
c001519c:	68 17 ed 01 c0       	push   0xc001ed17
c00151a1:	e8 42 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151a6:	83 c4 10             	add    esp,0x10
c00151a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151ad:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00151b0:	83 ec 08             	sub    esp,0x8
c00151b3:	50                   	push   eax
c00151b4:	68 22 ed 01 c0       	push   0xc001ed22
c00151b9:	e8 2a 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151be:	83 c4 10             	add    esp,0x10
c00151c1:	83 ec 08             	sub    esp,0x8
c00151c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151c8:	68 2d ed 01 c0       	push   0xc001ed2d
c00151cd:	e8 16 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151d2:	83 c4 10             	add    esp,0x10
c00151d5:	83 ec 08             	sub    esp,0x8
c00151d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151dc:	68 38 ed 01 c0       	push   0xc001ed38
c00151e1:	e8 02 5a ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00151ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f4:	83 ec 0c             	sub    esp,0xc
c00151f7:	50                   	push   eax
c00151f8:	e8 8c 39 ff ff       	call   c0008b89 <setActiveTerminal(VgaText*)>
c00151fd:	83 c4 10             	add    esp,0x10
c0015200:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015205:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520b:	83 ec 08             	sub    esp,0x8
c001520e:	68 43 ed 01 c0       	push   0xc001ed43
c0015213:	50                   	push   eax
c0015214:	e8 af 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015221:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015227:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001522c:	8b 12                	mov    edx,DWORD PTR [edx]
c001522e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015231:	83 c2 0c             	add    edx,0xc
c0015234:	83 ec 08             	sub    esp,0x8
c0015237:	52                   	push   edx
c0015238:	50                   	push   eax
c0015239:	e8 8a 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001523e:	83 c4 10             	add    esp,0x10
c0015241:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015246:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001524c:	83 ec 08             	sub    esp,0x8
c001524f:	68 4c ed 01 c0       	push   0xc001ed4c
c0015254:	50                   	push   eax
c0015255:	e8 6e 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001525a:	83 c4 10             	add    esp,0x10
c001525d:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015262:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015268:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001526c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001526f:	83 ec 08             	sub    esp,0x8
c0015272:	52                   	push   edx
c0015273:	50                   	push   eax
c0015274:	e8 09 3c ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015279:	83 c4 10             	add    esp,0x10
c001527c:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015281:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015287:	83 ec 08             	sub    esp,0x8
c001528a:	68 54 ed 01 c0       	push   0xc001ed54
c001528f:	50                   	push   eax
c0015290:	e8 33 3c ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015295:	83 c4 10             	add    esp,0x10
c0015298:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001529d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152a7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00152aa:	83 ec 08             	sub    esp,0x8
c00152ad:	52                   	push   edx
c00152ae:	50                   	push   eax
c00152af:	e8 ce 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00152b4:	83 c4 10             	add    esp,0x10
c00152b7:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152c2:	83 ec 08             	sub    esp,0x8
c00152c5:	68 5c ed 01 c0       	push   0xc001ed5c
c00152ca:	50                   	push   eax
c00152cb:	e8 f8 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00152d0:	83 c4 10             	add    esp,0x10
c00152d3:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152e2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00152e5:	83 ec 08             	sub    esp,0x8
c00152e8:	52                   	push   edx
c00152e9:	50                   	push   eax
c00152ea:	e8 93 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00152ef:	83 c4 10             	add    esp,0x10
c00152f2:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152fd:	83 ec 08             	sub    esp,0x8
c0015300:	68 64 ed 01 c0       	push   0xc001ed64
c0015305:	50                   	push   eax
c0015306:	e8 bd 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001530b:	83 c4 10             	add    esp,0x10
c001530e:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015313:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015319:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001531d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015320:	83 ec 08             	sub    esp,0x8
c0015323:	52                   	push   edx
c0015324:	50                   	push   eax
c0015325:	e8 58 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c001532a:	83 c4 10             	add    esp,0x10
c001532d:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015332:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015338:	83 ec 08             	sub    esp,0x8
c001533b:	68 6c ed 01 c0       	push   0xc001ed6c
c0015340:	50                   	push   eax
c0015341:	e8 82 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001534e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015354:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015358:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001535b:	83 ec 08             	sub    esp,0x8
c001535e:	52                   	push   edx
c001535f:	50                   	push   eax
c0015360:	e8 1d 3b ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001536d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015373:	83 ec 08             	sub    esp,0x8
c0015376:	68 74 ed 01 c0       	push   0xc001ed74
c001537b:	50                   	push   eax
c001537c:	e8 47 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015389:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001538f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015393:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015396:	83 ec 08             	sub    esp,0x8
c0015399:	52                   	push   edx
c001539a:	50                   	push   eax
c001539b:	e8 e2 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00153a0:	83 c4 10             	add    esp,0x10
c00153a3:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153ae:	83 ec 08             	sub    esp,0x8
c00153b1:	68 7c ed 01 c0       	push   0xc001ed7c
c00153b6:	50                   	push   eax
c00153b7:	e8 0c 3b ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00153bc:	83 c4 10             	add    esp,0x10
c00153bf:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153ca:	83 ec 08             	sub    esp,0x8
c00153cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153d1:	50                   	push   eax
c00153d2:	e8 ab 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153e5:	83 ec 08             	sub    esp,0x8
c00153e8:	68 85 ed 01 c0       	push   0xc001ed85
c00153ed:	50                   	push   eax
c00153ee:	e8 d5 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c00153f3:	83 c4 10             	add    esp,0x10
c00153f6:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015401:	83 ec 08             	sub    esp,0x8
c0015404:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015408:	50                   	push   eax
c0015409:	e8 74 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015416:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001541c:	83 ec 08             	sub    esp,0x8
c001541f:	68 8d ed 01 c0       	push   0xc001ed8d
c0015424:	50                   	push   eax
c0015425:	e8 9e 3a ff ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015432:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015438:	83 ec 08             	sub    esp,0x8
c001543b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001543f:	50                   	push   eax
c0015440:	e8 3d 3a ff ff       	call   c0008e82 <VgaText::putx(unsigned int)>
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	fa                   	cli    
c0015449:	f4                   	hlt    
c001544a:	eb fe                	jmp    c001544a <displayDebugInfo(regs*)+0x31f>

c001544c <displayProgramFault(char const*)>:
c001544c:	83 ec 0c             	sub    esp,0xc
c001544f:	83 ec 0c             	sub    esp,0xc
c0015452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015456:	e8 8d 57 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015463:	8b 00                	mov    eax,DWORD PTR [eax]
c0015465:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015468:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001546e:	85 c0                	test   eax,eax
c0015470:	74 21                	je     c0015493 <displayProgramFault(char const*)+0x47>
c0015472:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015477:	8b 00                	mov    eax,DWORD PTR [eax]
c0015479:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001547c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015482:	6a 04                	push   0x4
c0015484:	6a 0f                	push   0xf
c0015486:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001548a:	50                   	push   eax
c001548b:	e8 aa 3a ff ff       	call   c0008f3a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015490:	83 c4 10             	add    esp,0x10
c0015493:	90                   	nop
c0015494:	83 c4 0c             	add    esp,0xc
c0015497:	c3                   	ret    

c0015498 <gpFault(regs*, void*)>:
c0015498:	83 ec 1c             	sub    esp,0x1c
c001549b:	c7 05 b0 3e 02 c0 23 4a 01 c0 	mov    DWORD PTR ds:0xc0023eb0,0xc0014a23
c00154a5:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00154aa:	85 c0                	test   eax,eax
c00154ac:	74 1c                	je     c00154ca <gpFault(regs*, void*)+0x32>
c00154ae:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c00154b3:	83 ec 0c             	sub    esp,0xc
c00154b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154ba:	ff d0                	call   eax
c00154bc:	83 c4 10             	add    esp,0x10
c00154bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00154c3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00154c8:	75 2e                	jne    c00154f8 <gpFault(regs*, void*)+0x60>
c00154ca:	83 ec 0c             	sub    esp,0xc
c00154cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154d1:	e8 55 fc ff ff       	call   c001512b <displayDebugInfo(regs*)>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	83 ec 0c             	sub    esp,0xc
c00154dc:	68 95 ed 01 c0       	push   0xc001ed95
c00154e1:	e8 66 ff ff ff       	call   c001544c <displayProgramFault(char const*)>
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	83 ec 0c             	sub    esp,0xc
c00154ec:	6a 00                	push   0x0
c00154ee:	e8 25 ef ff ff       	call   c0014418 <Thr::terminateFromIRQ(int)>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	eb 01                	jmp    c00154f9 <gpFault(regs*, void*)+0x61>
c00154f8:	90                   	nop
c00154f9:	83 c4 1c             	add    esp,0x1c
c00154fc:	c3                   	ret    

c00154fd <pgFault(regs*, void*)>:
c00154fd:	83 ec 1c             	sub    esp,0x1c
c0015500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015504:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015507:	0f 20 d0             	mov    eax,cr2
c001550a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001550e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015512:	83 ec 04             	sub    esp,0x4
c0015515:	52                   	push   edx
c0015516:	50                   	push   eax
c0015517:	68 00 ee 01 c0       	push   0xc001ee00
c001551c:	e8 c7 56 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0015521:	83 c4 10             	add    esp,0x10
c0015524:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015529:	8b 00                	mov    eax,DWORD PTR [eax]
c001552b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001552e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015534:	0f 20 d2             	mov    edx,cr2
c0015537:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001553b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001553f:	83 ec 08             	sub    esp,0x8
c0015542:	52                   	push   edx
c0015543:	50                   	push   eax
c0015544:	e8 d1 52 ff ff       	call   c000a81a <VAS::tryLoadBackOffDisk(unsigned long)>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	84 c0                	test   al,al
c001554e:	75 2e                	jne    c001557e <pgFault(regs*, void*)+0x81>
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015557:	e8 cf fb ff ff       	call   c001512b <displayDebugInfo(regs*)>
c001555c:	83 c4 10             	add    esp,0x10
c001555f:	83 ec 0c             	sub    esp,0xc
c0015562:	68 ae ed 01 c0       	push   0xc001edae
c0015567:	e8 e0 fe ff ff       	call   c001544c <displayProgramFault(char const*)>
c001556c:	83 c4 10             	add    esp,0x10
c001556f:	83 ec 0c             	sub    esp,0xc
c0015572:	6a 00                	push   0x0
c0015574:	e8 9f ee ff ff       	call   c0014418 <Thr::terminateFromIRQ(int)>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	eb 01                	jmp    c001557f <pgFault(regs*, void*)+0x82>
c001557e:	90                   	nop
c001557f:	83 c4 1c             	add    esp,0x1c
c0015582:	c3                   	ret    

c0015583 <otherISRHandler(regs*, void*)>:
c0015583:	83 ec 0c             	sub    esp,0xc
c0015586:	83 ec 0c             	sub    esp,0xc
c0015589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001558d:	e8 99 fb ff ff       	call   c001512b <displayDebugInfo(regs*)>
c0015592:	83 c4 10             	add    esp,0x10
c0015595:	83 ec 0c             	sub    esp,0xc
c0015598:	68 28 ee 01 c0       	push   0xc001ee28
c001559d:	e8 aa fe ff ff       	call   c001544c <displayProgramFault(char const*)>
c00155a2:	83 c4 10             	add    esp,0x10
c00155a5:	83 ec 0c             	sub    esp,0xc
c00155a8:	6a 00                	push   0x0
c00155aa:	e8 69 ee ff ff       	call   c0014418 <Thr::terminateFromIRQ(int)>
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	90                   	nop
c00155b3:	83 c4 0c             	add    esp,0xc
c00155b6:	c3                   	ret    

c00155b7 <opcodeFault(regs*, void*)>:
c00155b7:	55                   	push   ebp
c00155b8:	89 e5                	mov    ebp,esp
c00155ba:	83 ec 08             	sub    esp,0x8
c00155bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155c3:	83 ec 08             	sub    esp,0x8
c00155c6:	50                   	push   eax
c00155c7:	68 b9 ed 01 c0       	push   0xc001edb9
c00155cc:	e8 17 56 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00155d1:	83 c4 10             	add    esp,0x10
c00155d4:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00155d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00155df:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00155e5:	84 c0                	test   al,al
c00155e7:	74 21                	je     c001560a <opcodeFault(regs*, void*)+0x53>
c00155e9:	83 ec 0c             	sub    esp,0xc
c00155ec:	68 50 ee 01 c0       	push   0xc001ee50
c00155f1:	e8 f2 55 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00155f6:	83 c4 10             	add    esp,0x10
c00155f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155ff:	8d 50 19             	lea    edx,[eax+0x19]
c0015602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015605:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015608:	eb 2b                	jmp    c0015635 <opcodeFault(regs*, void*)+0x7e>
c001560a:	83 ec 0c             	sub    esp,0xc
c001560d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015610:	e8 16 fb ff ff       	call   c001512b <displayDebugInfo(regs*)>
c0015615:	83 c4 10             	add    esp,0x10
c0015618:	83 ec 0c             	sub    esp,0xc
c001561b:	68 c7 ed 01 c0       	push   0xc001edc7
c0015620:	e8 27 fe ff ff       	call   c001544c <displayProgramFault(char const*)>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	83 ec 0c             	sub    esp,0xc
c001562b:	6a 00                	push   0x0
c001562d:	e8 e6 ed ff ff       	call   c0014418 <Thr::terminateFromIRQ(int)>
c0015632:	83 c4 10             	add    esp,0x10
c0015635:	c9                   	leave  
c0015636:	c3                   	ret    

c0015637 <i386SaveCoprocessor(void*)>:
c0015637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001563b:	83 c0 3f             	add    eax,0x3f
c001563e:	83 e0 c0             	and    eax,0xffffffc0
c0015641:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015645:	ff 25 ac 3e 02 c0    	jmp    DWORD PTR ds:0xc0023eac

c001564b <i386LoadCoprocessor(void*)>:
c001564b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001564f:	83 c0 3f             	add    eax,0x3f
c0015652:	83 e0 c0             	and    eax,0xffffffc0
c0015655:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015659:	ff 25 a8 3e 02 c0    	jmp    DWORD PTR ds:0xc0023ea8

c001565f <x87EmulHandler(regs*, void*)>:
c001565f:	53                   	push   ebx
c0015660:	83 ec 08             	sub    esp,0x8
c0015663:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015668:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001566c:	74 10                	je     c001567e <x87EmulHandler(regs*, void*)+0x1f>
c001566e:	83 ec 0c             	sub    esp,0xc
c0015671:	68 d4 ed 01 c0       	push   0xc001edd4
c0015676:	e8 58 b0 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001567b:	83 c4 10             	add    esp,0x10
c001567e:	0f 20 c0             	mov    eax,cr0
c0015681:	a8 08                	test   al,0x8
c0015683:	74 59                	je     c00156de <x87EmulHandler(regs*, void*)+0x7f>
c0015685:	0f 06                	clts   
c0015687:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c001568c:	85 c0                	test   eax,eax
c001568e:	74 0e                	je     c001569e <x87EmulHandler(regs*, void*)+0x3f>
c0015690:	83 ec 0c             	sub    esp,0xc
c0015693:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015696:	e8 9c ff ff ff       	call   c0015637 <i386SaveCoprocessor(void*)>
c001569b:	83 c4 10             	add    esp,0x10
c001569e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00156a4:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00156a8:	75 12                	jne    c00156bc <x87EmulHandler(regs*, void*)+0x5d>
c00156aa:	83 ec 0c             	sub    esp,0xc
c00156ad:	68 40 02 00 00       	push   0x240
c00156b2:	e8 a2 27 ff ff       	call   c0007e59 <malloc>
c00156b7:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00156ba:	eb 10                	jmp    c00156cc <x87EmulHandler(regs*, void*)+0x6d>
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c00156c4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00156c7:	e8 7f ff ff ff       	call   c001564b <i386LoadCoprocessor(void*)>
c00156cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156d1:	83 c4 10             	add    esp,0x10
c00156d4:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c00156d9:	83 c4 08             	add    esp,0x8
c00156dc:	5b                   	pop    ebx
c00156dd:	c3                   	ret    
c00156de:	83 ec 0c             	sub    esp,0xc
c00156e1:	68 e8 ed 01 c0       	push   0xc001ede8
c00156e6:	e8 fd 54 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c00156eb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00156f3:	83 c4 18             	add    esp,0x18
c00156f6:	5b                   	pop    ebx
c00156f7:	e9 1c ed ff ff       	jmp    c0014418 <Thr::terminateFromIRQ(int)>

c00156fc <HalInitialiseCoprocessor()>:
c00156fc:	83 ec 10             	sub    esp,0x10
c00156ff:	c7 05 a4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea4,0x0
c0015709:	6a 00                	push   0x0
c001570b:	68 5f 56 01 c0       	push   0xc001565f
c0015710:	6a 07                	push   0x7
c0015712:	e8 45 6e ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015717:	e8 84 64 00 00       	call   c001bba0 <avxDetect>
c001571c:	83 c4 10             	add    esp,0x10
c001571f:	85 c0                	test   eax,eax
c0015721:	74 1c                	je     c001573f <HalInitialiseCoprocessor()+0x43>
c0015723:	c7 05 ac 3e 02 c0 ca bb 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001bbca
c001572d:	c7 05 a8 3e 02 c0 db bb 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001bbdb
c0015737:	83 c4 0c             	add    esp,0xc
c001573a:	e9 ad 64 00 00       	jmp    c001bbec <avxInit>
c001573f:	e8 dc 66 00 00       	call   c001be20 <absolutelyNoChanceInHell>
c0015744:	85 c0                	test   eax,eax
c0015746:	74 1c                	je     c0015764 <HalInitialiseCoprocessor()+0x68>
c0015748:	c7 05 ac 3e 02 c0 38 be 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001be38
c0015752:	c7 05 a8 3e 02 c0 40 be 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001be40
c001575c:	83 c4 0c             	add    esp,0xc
c001575f:	e9 e4 66 00 00       	jmp    c001be48 <sseInit>
c0015764:	e8 fd 66 00 00       	call   c001be66 <x87Detect>
c0015769:	85 c0                	test   eax,eax
c001576b:	74 1c                	je     c0015789 <HalInitialiseCoprocessor()+0x8d>
c001576d:	c7 05 ac 3e 02 c0 81 be 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001be81
c0015777:	c7 05 a8 3e 02 c0 88 be 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001be88
c0015781:	83 c4 0c             	add    esp,0xc
c0015784:	e9 06 67 00 00       	jmp    c001be8f <x87Init>
c0015789:	c7 05 ac 3e 02 c0 f8 50 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc00150f8
c0015793:	c7 05 a8 3e 02 c0 f8 50 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc00150f8
c001579d:	0f 20 c0             	mov    eax,cr0
c00157a0:	83 c8 04             	or     eax,0x4
c00157a3:	0f 22 c0             	mov    cr0,eax
c00157a6:	83 c4 0c             	add    esp,0xc
c00157a9:	c3                   	ret    

c00157aa <HalPanic(char const*)>:
c00157aa:	e9 24 af ff ff       	jmp    c00106d3 <Krnl::panic(char const*)>

c00157af <HalQueryPerformanceCounter()>:
c00157af:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00157b4:	31 d2                	xor    edx,edx
c00157b6:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00157bc:	31 c0                	xor    eax,eax
c00157be:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00157c5:	74 02                	je     c00157c9 <HalQueryPerformanceCounter()+0x1a>
c00157c7:	0f 31                	rdtsc  
c00157c9:	c3                   	ret    

c00157ca <HalInitialise()>:
c00157ca:	53                   	push   ebx
c00157cb:	83 ec 08             	sub    esp,0x8
c00157ce:	e8 bc 6f ff ff       	call   c000c78f <setupINTS()>
c00157d3:	80 3d 00 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023200,0x0
c00157da:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00157df:	75 07                	jne    c00157e8 <HalInitialise()+0x1e>
c00157e1:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00157e8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00157ee:	83 e0 01             	and    eax,0x1
c00157f1:	a2 a0 3e 02 c0       	mov    ds:0xc0023ea0,al
c00157f6:	e8 a9 02 00 00       	call   c0015aa4 <picOpen()>
c00157fb:	80 3d a0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ea0,0x0
c0015802:	74 0a                	je     c001580e <HalInitialise()+0x44>
c0015804:	e8 e3 01 00 00       	call   c00159ec <picDisable()>
c0015809:	e8 0a 5d 00 00       	call   c001b518 <apicOpen()>
c001580e:	bb 0f 00 00 00       	mov    ebx,0xf
c0015813:	50                   	push   eax
c0015814:	6a 00                	push   0x0
c0015816:	68 83 55 01 c0       	push   0xc0015583
c001581b:	6a 00                	push   0x0
c001581d:	e8 3a 6d ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015822:	83 c4 0c             	add    esp,0xc
c0015825:	6a 00                	push   0x0
c0015827:	68 83 55 01 c0       	push   0xc0015583
c001582c:	6a 01                	push   0x1
c001582e:	e8 29 6d ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015833:	83 c4 0c             	add    esp,0xc
c0015836:	6a 00                	push   0x0
c0015838:	68 f9 50 01 c0       	push   0xc00150f9
c001583d:	6a 02                	push   0x2
c001583f:	e8 18 6d ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015844:	83 c4 0c             	add    esp,0xc
c0015847:	6a 00                	push   0x0
c0015849:	68 83 55 01 c0       	push   0xc0015583
c001584e:	6a 03                	push   0x3
c0015850:	e8 07 6d ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015855:	83 c4 0c             	add    esp,0xc
c0015858:	6a 00                	push   0x0
c001585a:	68 83 55 01 c0       	push   0xc0015583
c001585f:	6a 04                	push   0x4
c0015861:	e8 f6 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015866:	83 c4 0c             	add    esp,0xc
c0015869:	6a 00                	push   0x0
c001586b:	68 83 55 01 c0       	push   0xc0015583
c0015870:	6a 05                	push   0x5
c0015872:	e8 e5 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015877:	83 c4 0c             	add    esp,0xc
c001587a:	6a 00                	push   0x0
c001587c:	68 b7 55 01 c0       	push   0xc00155b7
c0015881:	6a 06                	push   0x6
c0015883:	e8 d4 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015888:	83 c4 0c             	add    esp,0xc
c001588b:	6a 00                	push   0x0
c001588d:	68 12 51 01 c0       	push   0xc0015112
c0015892:	6a 08                	push   0x8
c0015894:	e8 c3 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015899:	83 c4 0c             	add    esp,0xc
c001589c:	6a 00                	push   0x0
c001589e:	68 83 55 01 c0       	push   0xc0015583
c00158a3:	6a 09                	push   0x9
c00158a5:	e8 b2 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158aa:	83 c4 0c             	add    esp,0xc
c00158ad:	6a 00                	push   0x0
c00158af:	68 83 55 01 c0       	push   0xc0015583
c00158b4:	6a 0a                	push   0xa
c00158b6:	e8 a1 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158bb:	83 c4 0c             	add    esp,0xc
c00158be:	6a 00                	push   0x0
c00158c0:	68 83 55 01 c0       	push   0xc0015583
c00158c5:	6a 0b                	push   0xb
c00158c7:	e8 90 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158cc:	83 c4 0c             	add    esp,0xc
c00158cf:	6a 00                	push   0x0
c00158d1:	68 98 54 01 c0       	push   0xc0015498
c00158d6:	6a 0d                	push   0xd
c00158d8:	e8 7f 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158dd:	83 c4 0c             	add    esp,0xc
c00158e0:	6a 00                	push   0x0
c00158e2:	68 fd 54 01 c0       	push   0xc00154fd
c00158e7:	6a 0e                	push   0xe
c00158e9:	e8 6e 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ee:	83 c4 10             	add    esp,0x10
c00158f1:	50                   	push   eax
c00158f2:	6a 00                	push   0x0
c00158f4:	68 83 55 01 c0       	push   0xc0015583
c00158f9:	53                   	push   ebx
c00158fa:	43                   	inc    ebx
c00158fb:	e8 5c 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015900:	83 c4 10             	add    esp,0x10
c0015903:	83 fb 1e             	cmp    ebx,0x1e
c0015906:	75 e9                	jne    c00158f1 <HalInitialise()+0x127>
c0015908:	50                   	push   eax
c0015909:	6a 00                	push   0x0
c001590b:	68 79 20 01 c0       	push   0xc0012079
c0015910:	6a 60                	push   0x60
c0015912:	e8 45 6c ff ff       	call   c000c55c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015917:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001591c:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015926:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001592d:	e8 27 25 ff ff       	call   c0007e59 <malloc>
c0015932:	89 04 24             	mov    DWORD PTR [esp],eax
c0015935:	89 c3                	mov    ebx,eax
c0015937:	e8 30 09 00 00       	call   c001626c <RTC::RTC()>
c001593c:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015946:	5a                   	pop    edx
c0015947:	59                   	pop    ecx
c0015948:	53                   	push   ebx
c0015949:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001594f:	e8 d4 66 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0015954:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015956:	6a 00                	push   0x0
c0015958:	6a 00                	push   0x0
c001595a:	6a 00                	push   0x0
c001595c:	53                   	push   ebx
c001595d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015960:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0015965:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001596b:	83 c4 28             	add    esp,0x28
c001596e:	5b                   	pop    ebx
c001596f:	c3                   	ret    

c0015970 <HalMakeBeep(int)>:
c0015970:	53                   	push   ebx
c0015971:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015975:	85 db                	test   ebx,ebx
c0015977:	75 07                	jne    c0015980 <HalMakeBeep(int)+0x10>
c0015979:	e4 61                	in     al,0x61
c001597b:	83 e0 fc             	and    eax,0xfffffffc
c001597e:	eb 26                	jmp    c00159a6 <HalMakeBeep(int)+0x36>
c0015980:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015985:	99                   	cdq    
c0015986:	f7 fb                	idiv   ebx
c0015988:	89 c1                	mov    ecx,eax
c001598a:	b0 b6                	mov    al,0xb6
c001598c:	e6 43                	out    0x43,al
c001598e:	88 c8                	mov    al,cl
c0015990:	e6 42                	out    0x42,al
c0015992:	89 c8                	mov    eax,ecx
c0015994:	c1 e8 08             	shr    eax,0x8
c0015997:	e6 42                	out    0x42,al
c0015999:	e4 61                	in     al,0x61
c001599b:	88 c2                	mov    dl,al
c001599d:	83 ca 03             	or     edx,0x3
c00159a0:	38 c2                	cmp    dl,al
c00159a2:	74 04                	je     c00159a8 <HalMakeBeep(int)+0x38>
c00159a4:	88 d0                	mov    al,dl
c00159a6:	e6 61                	out    0x61,al
c00159a8:	5b                   	pop    ebx
c00159a9:	c3                   	ret    

c00159aa <HalGetRand()>:
c00159aa:	31 c0                	xor    eax,eax
c00159ac:	c3                   	ret    

c00159ad <HalEndOfInterrupt(int)>:
c00159ad:	80 3d a0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ea0,0x0
c00159b4:	74 23                	je     c00159d9 <HalEndOfInterrupt(int)+0x2c>
c00159b6:	83 ec 14             	sub    esp,0x14
c00159b9:	6a 1b                	push   0x1b
c00159bb:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00159c1:	e8 d0 1a ff ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c00159c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00159cb:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00159d5:	83 c4 1c             	add    esp,0x1c
c00159d8:	c3                   	ret    
c00159d9:	e9 56 02 00 00       	jmp    c0015c34 <picEOI(int)>

c00159de <HalRestart()>:
c00159de:	c3                   	ret    

c00159df <HalShutdown()>:
c00159df:	c3                   	ret    

c00159e0 <HalSleep()>:
c00159e0:	c3                   	ret    
c00159e1:	66 90                	xchg   ax,ax
c00159e3:	90                   	nop

c00159e4 <picIoWait()>:
c00159e4:	eb 00                	jmp    c00159e6 <picIoWait()+0x2>
c00159e6:	eb 00                	jmp    c00159e8 <picIoWait()+0x4>
c00159e8:	90                   	nop
c00159e9:	c3                   	ret    
c00159ea:	66 90                	xchg   ax,ax

c00159ec <picDisable()>:
c00159ec:	83 ec 10             	sub    esp,0x10
c00159ef:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00159f6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00159fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159ff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a04:	ee                   	out    dx,al
c0015a05:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a0c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a11:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a15:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a1a:	ee                   	out    dx,al
c0015a1b:	90                   	nop
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	c3                   	ret    

c0015a20 <picGetIRQReg(int)>:
c0015a20:	83 ec 10             	sub    esp,0x10
c0015a23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a27:	25 ff 00 00 00       	and    eax,0xff
c0015a2c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a33:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a37:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a3b:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a40:	ee                   	out    dx,al
c0015a41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a45:	25 ff 00 00 00       	and    eax,0xff
c0015a4a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a51:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015a55:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a59:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a5e:	ee                   	out    dx,al
c0015a5f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015a66:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015a6b:	89 c2                	mov    edx,eax
c0015a6d:	ec                   	in     al,dx
c0015a6e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015a72:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a76:	25 ff 00 00 00       	and    eax,0xff
c0015a7b:	c1 e0 08             	shl    eax,0x8
c0015a7e:	89 c1                	mov    ecx,eax
c0015a80:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015a87:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015a8c:	89 c2                	mov    edx,eax
c0015a8e:	ec                   	in     al,dx
c0015a8f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015a93:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a97:	25 ff 00 00 00       	and    eax,0xff
c0015a9c:	09 c8                	or     eax,ecx
c0015a9e:	83 c4 10             	add    esp,0x10
c0015aa1:	c3                   	ret    
c0015aa2:	66 90                	xchg   ax,ax

c0015aa4 <picOpen()>:
c0015aa4:	83 ec 50             	sub    esp,0x50
c0015aa7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015aae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015ab3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015ab7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015abb:	ee                   	out    dx,al
c0015abc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015ac3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015ac8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015acc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015ad0:	ee                   	out    dx,al
c0015ad1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015ad9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015ae1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015aec:	89 c2                	mov    edx,eax
c0015aee:	ec                   	in     al,dx
c0015aef:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015af3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015af7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015afb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b06:	89 c2                	mov    edx,eax
c0015b08:	ec                   	in     al,dx
c0015b09:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b0d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b11:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b15:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b1c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b21:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b29:	ee                   	out    dx,al
c0015b2a:	e8 b5 fe ff ff       	call   c00159e4 <picIoWait()>
c0015b2f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b36:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b3b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b3f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b43:	ee                   	out    dx,al
c0015b44:	e8 9b fe ff ff       	call   c00159e4 <picIoWait()>
c0015b49:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b4d:	25 ff 00 00 00       	and    eax,0xff
c0015b52:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015b59:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015b5d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015b61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b65:	ee                   	out    dx,al
c0015b66:	e8 79 fe ff ff       	call   c00159e4 <picIoWait()>
c0015b6b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b6f:	25 ff 00 00 00       	and    eax,0xff
c0015b74:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015b7b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015b7f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015b83:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b87:	ee                   	out    dx,al
c0015b88:	e8 57 fe ff ff       	call   c00159e4 <picIoWait()>
c0015b8d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015b94:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015b99:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015b9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ba1:	ee                   	out    dx,al
c0015ba2:	e8 3d fe ff ff       	call   c00159e4 <picIoWait()>
c0015ba7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015bae:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015bb3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015bb7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015bbb:	ee                   	out    dx,al
c0015bbc:	e8 23 fe ff ff       	call   c00159e4 <picIoWait()>
c0015bc1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015bc8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015bcd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015bd1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015bd5:	ee                   	out    dx,al
c0015bd6:	e8 09 fe ff ff       	call   c00159e4 <picIoWait()>
c0015bdb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015be2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015be7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015beb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015bef:	ee                   	out    dx,al
c0015bf0:	e8 ef fd ff ff       	call   c00159e4 <picIoWait()>
c0015bf5:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015bf9:	25 ff 00 00 00       	and    eax,0xff
c0015bfe:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c05:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c09:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c0d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c11:	ee                   	out    dx,al
c0015c12:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c16:	25 ff 00 00 00       	and    eax,0xff
c0015c1b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c22:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c26:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c2a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c2e:	ee                   	out    dx,al
c0015c2f:	90                   	nop
c0015c30:	83 c4 50             	add    esp,0x50
c0015c33:	c3                   	ret    

c0015c34 <picEOI(int)>:
c0015c34:	83 ec 10             	sub    esp,0x10
c0015c37:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c3c:	75 22                	jne    c0015c60 <picEOI(int)+0x2c>
c0015c3e:	6a 0b                	push   0xb
c0015c40:	e8 db fd ff ff       	call   c0015a20 <picGetIRQReg(int)>
c0015c45:	83 c4 04             	add    esp,0x4
c0015c48:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015c4d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c52:	25 ff ff 00 00       	and    eax,0xffff
c0015c57:	25 80 00 00 00       	and    eax,0x80
c0015c5c:	74 72                	je     c0015cd0 <picEOI(int)+0x9c>
c0015c5e:	66 90                	xchg   ax,ax
c0015c60:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015c65:	75 31                	jne    c0015c98 <picEOI(int)+0x64>
c0015c67:	6a 0b                	push   0xb
c0015c69:	e8 b2 fd ff ff       	call   c0015a20 <picGetIRQReg(int)>
c0015c6e:	83 c4 04             	add    esp,0x4
c0015c71:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015c76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c7a:	66 85 c0             	test   ax,ax
c0015c7d:	78 19                	js     c0015c98 <picEOI(int)+0x64>
c0015c7f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015c86:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015c8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015c8f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015c94:	ee                   	out    dx,al
c0015c95:	eb 3d                	jmp    c0015cd4 <picEOI(int)+0xa0>
c0015c97:	90                   	nop
c0015c98:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c9d:	7e 19                	jle    c0015cb8 <picEOI(int)+0x84>
c0015c9f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015ca6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015cab:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015caf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015cb4:	ee                   	out    dx,al
c0015cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0015cb8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015cbf:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015cc4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015cc8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015ccd:	ee                   	out    dx,al
c0015cce:	eb 04                	jmp    c0015cd4 <picEOI(int)+0xa0>
c0015cd0:	90                   	nop
c0015cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cd4:	83 c4 10             	add    esp,0x10
c0015cd7:	c3                   	ret    

c0015cd8 <RTC::open(int, int, void*)>:
c0015cd8:	31 c0                	xor    eax,eax
c0015cda:	c3                   	ret    
c0015cdb:	90                   	nop

c0015cdc <RTC::close(int, int, void*)>:
c0015cdc:	31 c0                	xor    eax,eax
c0015cde:	c3                   	ret    
c0015cdf:	90                   	nop

c0015ce0 <RTC::timeInSecondsUTC()>:
c0015ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ce4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015cea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015cf0:	c3                   	ret    
c0015cf1:	90                   	nop

c0015cf2 <RTC::timeInDatetimeUTC()>:
c0015cf2:	53                   	push   ebx
c0015cf3:	83 ec 14             	sub    esp,0x14
c0015cf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cfe:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d00:	50                   	push   eax
c0015d01:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d04:	83 c4 0c             	add    esp,0xc
c0015d07:	52                   	push   edx
c0015d08:	50                   	push   eax
c0015d09:	53                   	push   ebx
c0015d0a:	e8 8d 60 ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c0015d0f:	89 d8                	mov    eax,ebx
c0015d11:	83 c4 14             	add    esp,0x14
c0015d14:	5b                   	pop    ebx
c0015d15:	c2 04 00             	ret    0x4

c0015d18 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d18:	56                   	push   esi
c0015d19:	53                   	push   ebx
c0015d1a:	83 ec 14             	sub    esp,0x14
c0015d1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d23:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d26:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d2a:	52                   	push   edx
c0015d2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d33:	50                   	push   eax
c0015d34:	e8 63 60 ff ff       	call   c000bd9c <secondsToDatetime(unsigned long long)>
c0015d39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d45:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015d49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d4d:	89 f0                	mov    eax,esi
c0015d4f:	83 c4 20             	add    esp,0x20
c0015d52:	5b                   	pop    ebx
c0015d53:	5e                   	pop    esi
c0015d54:	ff e0                	jmp    eax

c0015d56 <RTC::~RTC()>:
c0015d56:	83 ec 0c             	sub    esp,0xc
c0015d59:	ba 90 ee 01 c0       	mov    edx,0xc001ee90
c0015d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d62:	89 10                	mov    DWORD PTR [eax],edx
c0015d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d68:	83 ec 0c             	sub    esp,0xc
c0015d6b:	50                   	push   eax
c0015d6c:	e8 af 5d ff ff       	call   c000bb20 <Clock::~Clock()>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	90                   	nop
c0015d75:	83 c4 0c             	add    esp,0xc
c0015d78:	c3                   	ret    
c0015d79:	90                   	nop

c0015d7a <RTC::~RTC()>:
c0015d7a:	83 ec 0c             	sub    esp,0xc
c0015d7d:	83 ec 0c             	sub    esp,0xc
c0015d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d84:	e8 cd ff ff ff       	call   c0015d56 <RTC::~RTC()>
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	83 ec 08             	sub    esp,0x8
c0015d8f:	68 60 01 00 00       	push   0x160
c0015d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d98:	e8 55 4d ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0015d9d:	83 c4 10             	add    esp,0x10
c0015da0:	83 c4 0c             	add    esp,0xc
c0015da3:	c3                   	ret    

c0015da4 <RTC::get_update_in_progress_flag()>:
c0015da4:	83 ec 14             	sub    esp,0x14
c0015da7:	6a 0a                	push   0xa
c0015da9:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015daf:	e8 96 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015db4:	83 c4 1c             	add    esp,0x1c
c0015db7:	c0 e8 07             	shr    al,0x7
c0015dba:	c3                   	ret    
c0015dbb:	90                   	nop

c0015dbc <RTC::completeRTCRefresh()>:
c0015dbc:	55                   	push   ebp
c0015dbd:	57                   	push   edi
c0015dbe:	56                   	push   esi
c0015dbf:	53                   	push   ebx
c0015dc0:	83 ec 2c             	sub    esp,0x2c
c0015dc3:	8b 1d 0c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f0c
c0015dc9:	83 ec 0c             	sub    esp,0xc
c0015dcc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015dd0:	e8 cf ff ff ff       	call   c0015da4 <RTC::get_update_in_progress_flag()>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	84 c0                	test   al,al
c0015dda:	74 0e                	je     c0015dea <RTC::completeRTCRefresh()+0x2e>
c0015ddc:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015de2:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c0015de8:	73 df                	jae    c0015dc9 <RTC::completeRTCRefresh()+0xd>
c0015dea:	55                   	push   ebp
c0015deb:	55                   	push   ebp
c0015dec:	6a 00                	push   0x0
c0015dee:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015df4:	e8 51 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015df9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015dfd:	58                   	pop    eax
c0015dfe:	5a                   	pop    edx
c0015dff:	6a 02                	push   0x2
c0015e01:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e07:	e8 3e 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e0c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e10:	59                   	pop    ecx
c0015e11:	5b                   	pop    ebx
c0015e12:	6a 04                	push   0x4
c0015e14:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e1a:	e8 2b 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e1f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e23:	5e                   	pop    esi
c0015e24:	5f                   	pop    edi
c0015e25:	6a 07                	push   0x7
c0015e27:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e2d:	e8 18 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e32:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e36:	5d                   	pop    ebp
c0015e37:	58                   	pop    eax
c0015e38:	6a 08                	push   0x8
c0015e3a:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e40:	e8 05 17 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e45:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015e49:	58                   	pop    eax
c0015e4a:	5a                   	pop    edx
c0015e4b:	6a 09                	push   0x9
c0015e4d:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e53:	e8 f2 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e58:	83 c4 10             	add    esp,0x10
c0015e5b:	0f b6 e8             	movzx  ebp,al
c0015e5e:	8b 1d 0c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f0c
c0015e64:	83 ec 0c             	sub    esp,0xc
c0015e67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e6b:	e8 34 ff ff ff       	call   c0015da4 <RTC::get_update_in_progress_flag()>
c0015e70:	83 c4 10             	add    esp,0x10
c0015e73:	84 c0                	test   al,al
c0015e75:	74 0e                	je     c0015e85 <RTC::completeRTCRefresh()+0xc9>
c0015e77:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e7d:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c0015e83:	73 df                	jae    c0015e64 <RTC::completeRTCRefresh()+0xa8>
c0015e85:	50                   	push   eax
c0015e86:	50                   	push   eax
c0015e87:	6a 00                	push   0x0
c0015e89:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e8f:	e8 b6 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015e94:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015e98:	58                   	pop    eax
c0015e99:	5a                   	pop    edx
c0015e9a:	6a 02                	push   0x2
c0015e9c:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015ea2:	e8 a3 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ea7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015eab:	59                   	pop    ecx
c0015eac:	5b                   	pop    ebx
c0015ead:	6a 04                	push   0x4
c0015eaf:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015eb5:	e8 90 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015eba:	5e                   	pop    esi
c0015ebb:	88 c3                	mov    bl,al
c0015ebd:	5f                   	pop    edi
c0015ebe:	6a 07                	push   0x7
c0015ec0:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015ec6:	e8 7f 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015ecb:	89 c6                	mov    esi,eax
c0015ecd:	58                   	pop    eax
c0015ece:	5a                   	pop    edx
c0015ecf:	6a 08                	push   0x8
c0015ed1:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015ed7:	e8 6e 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015edc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015ee0:	59                   	pop    ecx
c0015ee1:	5f                   	pop    edi
c0015ee2:	6a 09                	push   0x9
c0015ee4:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015eea:	e8 5b 16 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015eef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015ef3:	0f b6 f8             	movzx  edi,al
c0015ef6:	83 c4 10             	add    esp,0x10
c0015ef9:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015efd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f01:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f05:	89 f1                	mov    ecx,esi
c0015f07:	0f 94 c0             	sete   al
c0015f0a:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f0e:	0f 94 c2             	sete   dl
c0015f11:	21 d0                	and    eax,edx
c0015f13:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f17:	0f 94 c2             	sete   dl
c0015f1a:	21 c2                	and    edx,eax
c0015f1c:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f20:	0f 94 c0             	sete   al
c0015f23:	21 d0                	and    eax,edx
c0015f25:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f29:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f2d:	0f 94 c1             	sete   cl
c0015f30:	84 c8                	test   al,cl
c0015f32:	75 29                	jne    c0015f5d <RTC::completeRTCRefresh()+0x1a1>
c0015f34:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f38:	89 fd                	mov    ebp,edi
c0015f3a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f3e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f42:	89 f0                	mov    eax,esi
c0015f44:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015f48:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f4c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f50:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f54:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f58:	e9 01 ff ff ff       	jmp    c0015e5e <RTC::completeRTCRefresh()+0xa2>
c0015f5d:	39 fd                	cmp    ebp,edi
c0015f5f:	75 d3                	jne    c0015f34 <RTC::completeRTCRefresh()+0x178>
c0015f61:	55                   	push   ebp
c0015f62:	55                   	push   ebp
c0015f63:	6a 0b                	push   0xb
c0015f65:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015f6b:	e8 da 15 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c0015f70:	83 c4 10             	add    esp,0x10
c0015f73:	89 c5                	mov    ebp,eax
c0015f75:	a8 04                	test   al,0x4
c0015f77:	75 78                	jne    c0015ff1 <RTC::completeRTCRefresh()+0x235>
c0015f79:	b1 0a                	mov    cl,0xa
c0015f7b:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015f7f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f83:	83 e2 0f             	and    edx,0xf
c0015f86:	c0 e8 04             	shr    al,0x4
c0015f89:	c1 ef 04             	shr    edi,0x4
c0015f8c:	f6 e1                	mul    cl
c0015f8e:	6b ff 0a             	imul   edi,edi,0xa
c0015f91:	01 d0                	add    eax,edx
c0015f93:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f97:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015f9b:	83 e2 0f             	and    edx,0xf
c0015f9e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fa2:	c0 e8 04             	shr    al,0x4
c0015fa5:	f6 e1                	mul    cl
c0015fa7:	01 d0                	add    eax,edx
c0015fa9:	88 da                	mov    dl,bl
c0015fab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015faf:	83 e2 0f             	and    edx,0xf
c0015fb2:	88 d8                	mov    al,bl
c0015fb4:	83 e3 80             	and    ebx,0xffffff80
c0015fb7:	c0 e8 04             	shr    al,0x4
c0015fba:	83 e0 07             	and    eax,0x7
c0015fbd:	f6 e1                	mul    cl
c0015fbf:	01 d0                	add    eax,edx
c0015fc1:	89 f2                	mov    edx,esi
c0015fc3:	09 c3                	or     ebx,eax
c0015fc5:	83 e2 0f             	and    edx,0xf
c0015fc8:	89 f0                	mov    eax,esi
c0015fca:	c0 e8 04             	shr    al,0x4
c0015fcd:	f6 e1                	mul    cl
c0015fcf:	8d 34 02             	lea    esi,[edx+eax*1]
c0015fd2:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015fd6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fda:	83 e2 0f             	and    edx,0xf
c0015fdd:	c0 e8 04             	shr    al,0x4
c0015fe0:	f6 e1                	mul    cl
c0015fe2:	01 d0                	add    eax,edx
c0015fe4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015fe8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015fec:	83 e0 0f             	and    eax,0xf
c0015fef:	01 c7                	add    edi,eax
c0015ff1:	83 e5 02             	and    ebp,0x2
c0015ff4:	75 14                	jne    c001600a <RTC::completeRTCRefresh()+0x24e>
c0015ff6:	84 db                	test   bl,bl
c0015ff8:	79 10                	jns    c001600a <RTC::completeRTCRefresh()+0x24e>
c0015ffa:	83 e3 7f             	and    ebx,0x7f
c0015ffd:	b9 18 00 00 00       	mov    ecx,0x18
c0016002:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016005:	99                   	cdq    
c0016006:	f7 f9                	idiv   ecx
c0016008:	88 d3                	mov    bl,dl
c001600a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016010:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016016:	77 06                	ja     c001601e <RTC::completeRTCRefresh()+0x262>
c0016018:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001601e:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016023:	31 d2                	xor    edx,edx
c0016025:	c1 e1 10             	shl    ecx,0x10
c0016028:	89 d7                	mov    edi,edx
c001602a:	c1 e5 10             	shl    ebp,0x10
c001602d:	31 c0                	xor    eax,eax
c001602f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016035:	09 cf                	or     edi,ecx
c0016037:	89 fa                	mov    edx,edi
c0016039:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001603d:	88 da                	mov    dl,bl
c001603f:	89 f3                	mov    ebx,esi
c0016041:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016045:	88 d8                	mov    al,bl
c0016047:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001604b:	0f b7 c8             	movzx  ecx,ax
c001604e:	09 e9                	or     ecx,ebp
c0016050:	89 c8                	mov    eax,ecx
c0016052:	51                   	push   ecx
c0016053:	51                   	push   ecx
c0016054:	52                   	push   edx
c0016055:	50                   	push   eax
c0016056:	e8 b4 5b ff ff       	call   c000bc0f <datetimeToSeconds(datetime_t)>
c001605b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001605f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016065:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001606b:	83 c4 3c             	add    esp,0x3c
c001606e:	5b                   	pop    ebx
c001606f:	5e                   	pop    esi
c0016070:	5f                   	pop    edi
c0016071:	5d                   	pop    ebp
c0016072:	c3                   	ret    
c0016073:	90                   	nop

c0016074 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016074:	55                   	push   ebp
c0016075:	57                   	push   edi
c0016076:	56                   	push   esi
c0016077:	53                   	push   ebx
c0016078:	83 ec 30             	sub    esp,0x30
c001607b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001607f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016083:	6a 00                	push   0x0
c0016085:	6a 00                	push   0x0
c0016087:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001608d:	e8 ce 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016092:	83 c4 0c             	add    esp,0xc
c0016095:	6a 00                	push   0x0
c0016097:	6a 02                	push   0x2
c0016099:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001609f:	e8 bc 15 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160a4:	31 d2                	xor    edx,edx
c00160a6:	89 f9                	mov    ecx,edi
c00160a8:	89 f8                	mov    eax,edi
c00160aa:	c1 e9 10             	shr    ecx,0x10
c00160ad:	0f b6 c4             	movzx  eax,ah
c00160b0:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00160b4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00160b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160bc:	b9 64 00 00 00       	mov    ecx,0x64
c00160c1:	89 f0                	mov    eax,esi
c00160c3:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00160c7:	89 f0                	mov    eax,esi
c00160c9:	0f b6 c4             	movzx  eax,ah
c00160cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160d0:	89 f0                	mov    eax,esi
c00160d2:	c1 e8 10             	shr    eax,0x10
c00160d5:	66 f7 f1             	div    cx
c00160d8:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c00160dd:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c00160e2:	59                   	pop    ecx
c00160e3:	5b                   	pop    ebx
c00160e4:	89 fb                	mov    ebx,edi
c00160e6:	6a 0b                	push   0xb
c00160e8:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00160ee:	e8 57 14 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c00160f3:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00160f7:	83 c4 10             	add    esp,0x10
c00160fa:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c00160ff:	75 74                	jne    c0016175 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016101:	b2 0a                	mov    dl,0xa
c0016103:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016107:	0f b6 c1             	movzx  eax,cl
c001610a:	f6 f2                	div    dl
c001610c:	88 c3                	mov    bl,al
c001610e:	88 e0                	mov    al,ah
c0016110:	c1 e3 04             	shl    ebx,0x4
c0016113:	09 c3                	or     ebx,eax
c0016115:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001611a:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001611e:	f6 f2                	div    dl
c0016120:	88 c1                	mov    cl,al
c0016122:	88 e0                	mov    al,ah
c0016124:	c1 e1 04             	shl    ecx,0x4
c0016127:	09 c1                	or     ecx,eax
c0016129:	89 f8                	mov    eax,edi
c001612b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001612f:	0f b6 c0             	movzx  eax,al
c0016132:	f6 f2                	div    dl
c0016134:	88 c3                	mov    bl,al
c0016136:	88 e0                	mov    al,ah
c0016138:	c1 e3 04             	shl    ebx,0x4
c001613b:	09 c3                	or     ebx,eax
c001613d:	89 f0                	mov    eax,esi
c001613f:	0f b6 c0             	movzx  eax,al
c0016142:	f6 f2                	div    dl
c0016144:	88 c1                	mov    cl,al
c0016146:	88 e0                	mov    al,ah
c0016148:	c1 e1 04             	shl    ecx,0x4
c001614b:	09 c1                	or     ecx,eax
c001614d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016152:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016156:	f6 f2                	div    dl
c0016158:	88 c1                	mov    cl,al
c001615a:	88 e0                	mov    al,ah
c001615c:	c1 e1 04             	shl    ecx,0x4
c001615f:	09 c1                	or     ecx,eax
c0016161:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016166:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001616a:	f6 f2                	div    dl
c001616c:	89 c5                	mov    ebp,eax
c001616e:	88 e0                	mov    al,ah
c0016170:	c1 e5 04             	shl    ebp,0x4
c0016173:	09 c5                	or     ebp,eax
c0016175:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001617a:	75 17                	jne    c0016193 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001617c:	80 fb 0b             	cmp    bl,0xb
c001617f:	76 0c                	jbe    c001618d <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016181:	80 eb 0c             	sub    bl,0xc
c0016184:	75 02                	jne    c0016188 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016186:	b3 0c                	mov    bl,0xc
c0016188:	83 cb 80             	or     ebx,0xffffff80
c001618b:	eb 06                	jmp    c0016193 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001618d:	84 db                	test   bl,bl
c001618f:	75 02                	jne    c0016193 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016191:	b3 0c                	mov    bl,0xc
c0016193:	0f b6 db             	movzx  ebx,bl
c0016196:	50                   	push   eax
c0016197:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001619c:	50                   	push   eax
c001619d:	6a 00                	push   0x0
c001619f:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161a5:	e8 b6 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161aa:	83 c4 0c             	add    esp,0xc
c00161ad:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161b2:	50                   	push   eax
c00161b3:	6a 02                	push   0x2
c00161b5:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161bb:	e8 a0 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161c0:	83 c4 0c             	add    esp,0xc
c00161c3:	53                   	push   ebx
c00161c4:	6a 04                	push   0x4
c00161c6:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161cc:	e8 8f 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161d1:	83 c4 0c             	add    esp,0xc
c00161d4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00161d9:	50                   	push   eax
c00161da:	6a 07                	push   0x7
c00161dc:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161e2:	e8 79 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161e7:	83 c4 0c             	add    esp,0xc
c00161ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00161ef:	50                   	push   eax
c00161f0:	6a 08                	push   0x8
c00161f2:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00161f8:	e8 63 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00161fd:	83 c4 0c             	add    esp,0xc
c0016200:	89 e8                	mov    eax,ebp
c0016202:	0f b6 e8             	movzx  ebp,al
c0016205:	55                   	push   ebp
c0016206:	6a 09                	push   0x9
c0016208:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001620e:	e8 4d 14 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016213:	5a                   	pop    edx
c0016214:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016218:	e8 9f fb ff ff       	call   c0015dbc <RTC::completeRTCRefresh()>
c001621d:	83 c4 3c             	add    esp,0x3c
c0016220:	b0 01                	mov    al,0x1
c0016222:	5b                   	pop    ebx
c0016223:	5e                   	pop    esi
c0016224:	5f                   	pop    edi
c0016225:	5d                   	pop    ebp
c0016226:	c3                   	ret    

c0016227 <rtcIRQHandler(regs*, void*)>:
c0016227:	53                   	push   ebx
c0016228:	83 ec 10             	sub    esp,0x10
c001622b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001622f:	6a 0c                	push   0xc
c0016231:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0016237:	e8 0e 13 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c001623c:	83 c4 10             	add    esp,0x10
c001623f:	84 c0                	test   al,al
c0016241:	79 24                	jns    c0016267 <rtcIRQHandler(regs*, void*)+0x40>
c0016243:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001624a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016251:	66 ff 05 b4 3e 02 c0 	inc    WORD PTR ds:0xc0023eb4
c0016258:	75 0d                	jne    c0016267 <rtcIRQHandler(regs*, void*)+0x40>
c001625a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001625e:	83 c4 08             	add    esp,0x8
c0016261:	5b                   	pop    ebx
c0016262:	e9 55 fb ff ff       	jmp    c0015dbc <RTC::completeRTCRefresh()>
c0016267:	83 c4 08             	add    esp,0x8
c001626a:	5b                   	pop    ebx
c001626b:	c3                   	ret    

c001626c <RTC::RTC()>:
c001626c:	83 ec 1c             	sub    esp,0x1c
c001626f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016273:	83 ec 08             	sub    esp,0x8
c0016276:	68 73 ee 01 c0       	push   0xc001ee73
c001627b:	50                   	push   eax
c001627c:	e8 69 58 ff ff       	call   c000baea <Clock::Clock(char const*)>
c0016281:	83 c4 10             	add    esp,0x10
c0016284:	ba 90 ee 01 c0       	mov    edx,0xc001ee90
c0016289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001628d:	89 10                	mov    DWORD PTR [eax],edx
c001628f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016293:	83 ec 0c             	sub    esp,0xc
c0016296:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001629a:	6a 01                	push   0x1
c001629c:	68 27 62 01 c0       	push   0xc0016227
c00162a1:	6a 08                	push   0x8
c00162a3:	50                   	push   eax
c00162a4:	e8 2b 5d ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00162a9:	83 c4 20             	add    esp,0x20
c00162ac:	89 c2                	mov    edx,eax
c00162ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162b2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00162b8:	fa                   	cli    
c00162b9:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00162be:	40                   	inc    eax
c00162bf:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00162c4:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00162c9:	83 ec 08             	sub    esp,0x8
c00162cc:	6a 0b                	push   0xb
c00162ce:	50                   	push   eax
c00162cf:	e8 76 12 ff ff       	call   c000754a <Computer::readCMOS(unsigned char)>
c00162d4:	83 c4 10             	add    esp,0x10
c00162d7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162db:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00162e0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00162e4:	83 ca 10             	or     edx,0x10
c00162e7:	81 e2 ff 00 00 00    	and    edx,0xff
c00162ed:	83 ec 04             	sub    esp,0x4
c00162f0:	52                   	push   edx
c00162f1:	6a 0b                	push   0xb
c00162f3:	50                   	push   eax
c00162f4:	e8 67 13 ff ff       	call   c0007660 <Computer::writeCMOS(unsigned char, unsigned char)>
c00162f9:	83 c4 10             	add    esp,0x10
c00162fc:	83 ec 0c             	sub    esp,0xc
c00162ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016303:	e8 b4 fa ff ff       	call   c0015dbc <RTC::completeRTCRefresh()>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0016310:	48                   	dec    eax
c0016311:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0016316:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001631b:	85 c0                	test   eax,eax
c001631d:	75 01                	jne    c0016320 <RTC::RTC()+0xb4>
c001631f:	fb                   	sti    
c0016320:	90                   	nop
c0016321:	83 c4 1c             	add    esp,0x1c
c0016324:	c3                   	ret    
c0016325:	66 90                	xchg   ax,ax
c0016327:	90                   	nop

c0016328 <HalConsoleScroll(int, int)>:
c0016328:	83 ec 10             	sub    esp,0x10
c001632b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016333:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001633b:	90                   	nop
c001633c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016341:	0f 8f e1 00 00 00    	jg     c0016428 <HalConsoleScroll(int, int)+0x100>
c0016347:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001634f:	90                   	nop
c0016350:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016358:	0f 8f be 00 00 00    	jg     c001641c <HalConsoleScroll(int, int)+0xf4>
c001635e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016362:	89 d0                	mov    eax,edx
c0016364:	c1 e0 02             	shl    eax,0x2
c0016367:	01 d0                	add    eax,edx
c0016369:	c1 e0 05             	shl    eax,0x5
c001636c:	89 c2                	mov    edx,eax
c001636e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016372:	01 d0                	add    eax,edx
c0016374:	89 c2                	mov    edx,eax
c0016376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001637a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001637d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016381:	89 d0                	mov    eax,edx
c0016383:	c1 e0 02             	shl    eax,0x2
c0016386:	01 d0                	add    eax,edx
c0016388:	c1 e0 05             	shl    eax,0x5
c001638b:	89 c2                	mov    edx,eax
c001638d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016391:	01 d0                	add    eax,edx
c0016393:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016399:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001639d:	01 c2                	add    edx,eax
c001639f:	8a 01                	mov    al,BYTE PTR [ecx]
c00163a1:	88 02                	mov    BYTE PTR [edx],al
c00163a3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163a8:	75 66                	jne    c0016410 <HalConsoleScroll(int, int)+0xe8>
c00163aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ae:	83 e0 01             	and    eax,0x1
c00163b1:	74 39                	je     c00163ec <HalConsoleScroll(int, int)+0xc4>
c00163b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163b7:	83 e0 0f             	and    eax,0xf
c00163ba:	88 c2                	mov    dl,al
c00163bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163c0:	c1 e0 04             	shl    eax,0x4
c00163c3:	88 d1                	mov    cl,dl
c00163c5:	09 c1                	or     ecx,eax
c00163c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163cb:	89 d0                	mov    eax,edx
c00163cd:	c1 e0 02             	shl    eax,0x2
c00163d0:	01 d0                	add    eax,edx
c00163d2:	c1 e0 05             	shl    eax,0x5
c00163d5:	89 c2                	mov    edx,eax
c00163d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163db:	01 d0                	add    eax,edx
c00163dd:	89 c2                	mov    edx,eax
c00163df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163e3:	01 d0                	add    eax,edx
c00163e5:	88 ca                	mov    dl,cl
c00163e7:	88 10                	mov    BYTE PTR [eax],dl
c00163e9:	eb 25                	jmp    c0016410 <HalConsoleScroll(int, int)+0xe8>
c00163eb:	90                   	nop
c00163ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163f0:	89 d0                	mov    eax,edx
c00163f2:	c1 e0 02             	shl    eax,0x2
c00163f5:	01 d0                	add    eax,edx
c00163f7:	c1 e0 05             	shl    eax,0x5
c00163fa:	89 c2                	mov    edx,eax
c00163fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016400:	01 d0                	add    eax,edx
c0016402:	89 c2                	mov    edx,eax
c0016404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016408:	01 d0                	add    eax,edx
c001640a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001640d:	8d 76 00             	lea    esi,[esi+0x0]
c0016410:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016414:	e9 37 ff ff ff       	jmp    c0016350 <HalConsoleScroll(int, int)+0x28>
c0016419:	8d 76 00             	lea    esi,[esi+0x0]
c001641c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016420:	e9 17 ff ff ff       	jmp    c001633c <HalConsoleScroll(int, int)+0x14>
c0016425:	8d 76 00             	lea    esi,[esi+0x0]
c0016428:	90                   	nop
c0016429:	83 c4 10             	add    esp,0x10
c001642c:	c3                   	ret    
c001642d:	8d 76 00             	lea    esi,[esi+0x0]

c0016430 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016430:	83 ec 14             	sub    esp,0x14
c0016433:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016437:	88 04 24             	mov    BYTE PTR [esp],al
c001643a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001643d:	25 ff 00 00 00       	and    eax,0xff
c0016442:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016446:	89 d1                	mov    ecx,edx
c0016448:	83 e1 0f             	and    ecx,0xf
c001644b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001644f:	c1 e2 04             	shl    edx,0x4
c0016452:	81 e2 ff 00 00 00    	and    edx,0xff
c0016458:	09 ca                	or     edx,ecx
c001645a:	c1 e2 08             	shl    edx,0x8
c001645d:	09 d0                	or     eax,edx
c001645f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016464:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001646c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016470:	89 d0                	mov    eax,edx
c0016472:	c1 e0 02             	shl    eax,0x2
c0016475:	01 d0                	add    eax,edx
c0016477:	c1 e0 04             	shl    eax,0x4
c001647a:	89 c2                	mov    edx,eax
c001647c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016480:	01 d0                	add    eax,edx
c0016482:	01 c0                	add    eax,eax
c0016484:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016488:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001648c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016491:	66 89 02             	mov    WORD PTR [edx],ax
c0016494:	90                   	nop
c0016495:	83 c4 14             	add    esp,0x14
c0016498:	c3                   	ret    
c0016499:	8d 76 00             	lea    esi,[esi+0x0]

c001649c <HalConsoleCursorUpdate(int, int)>:
c001649c:	83 ec 20             	sub    esp,0x20
c001649f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164a3:	89 c2                	mov    edx,eax
c00164a5:	89 d0                	mov    eax,edx
c00164a7:	c1 e0 02             	shl    eax,0x2
c00164aa:	01 d0                	add    eax,edx
c00164ac:	c1 e0 04             	shl    eax,0x4
c00164af:	89 c2                	mov    edx,eax
c00164b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164b5:	01 d0                	add    eax,edx
c00164b7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00164bc:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00164c3:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00164c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00164cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164d0:	ee                   	out    dx,al
c00164d1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00164d6:	25 ff 00 00 00       	and    eax,0xff
c00164db:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00164e2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00164e6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00164ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164ee:	ee                   	out    dx,al
c00164ef:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00164f6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00164fb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00164ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016503:	ee                   	out    dx,al
c0016504:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016509:	66 c1 e8 08          	shr    ax,0x8
c001650d:	25 ff 00 00 00       	and    eax,0xff
c0016512:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016519:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001651d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016525:	ee                   	out    dx,al
c0016526:	90                   	nop
c0016527:	83 c4 20             	add    esp,0x20
c001652a:	c3                   	ret    
c001652b:	90                   	nop

c001652c <FAT::getName()>:
c001652c:	b8 c4 ee 01 c0       	mov    eax,0xc001eec4
c0016531:	c3                   	ret    
c0016532:	66 90                	xchg   ax,ax

c0016534 <FAT::tell(void*, unsigned long long*)>:
c0016534:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016539:	75 09                	jne    c0016544 <FAT::tell(void*, unsigned long long*)+0x10>
c001653b:	b8 04 00 00 00       	mov    eax,0x4
c0016540:	c3                   	ret    
c0016541:	8d 76 00             	lea    esi,[esi+0x0]
c0016544:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016549:	75 09                	jne    c0016554 <FAT::tell(void*, unsigned long long*)+0x20>
c001654b:	b8 04 00 00 00       	mov    eax,0x4
c0016550:	c3                   	ret    
c0016551:	8d 76 00             	lea    esi,[esi+0x0]
c0016554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016558:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001655b:	ba 00 00 00 00       	mov    edx,0x0
c0016560:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016564:	89 01                	mov    DWORD PTR [ecx],eax
c0016566:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016569:	b8 00 00 00 00       	mov    eax,0x0
c001656e:	c3                   	ret    
c001656f:	90                   	nop

c0016570 <FAT::stat(void*, unsigned long long*)>:
c0016570:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016575:	75 09                	jne    c0016580 <FAT::stat(void*, unsigned long long*)+0x10>
c0016577:	b8 04 00 00 00       	mov    eax,0x4
c001657c:	c3                   	ret    
c001657d:	8d 76 00             	lea    esi,[esi+0x0]
c0016580:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016585:	75 09                	jne    c0016590 <FAT::stat(void*, unsigned long long*)+0x20>
c0016587:	b8 04 00 00 00       	mov    eax,0x4
c001658c:	c3                   	ret    
c001658d:	8d 76 00             	lea    esi,[esi+0x0]
c0016590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016594:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016597:	ba 00 00 00 00       	mov    edx,0x0
c001659c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165a0:	89 01                	mov    DWORD PTR [ecx],eax
c00165a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165a5:	b8 00 00 00 00       	mov    eax,0x0
c00165aa:	c3                   	ret    
c00165ab:	90                   	nop

c00165ac <FAT::~FAT()>:
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c00165b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b8:	89 10                	mov    DWORD PTR [eax],edx
c00165ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165be:	83 ec 0c             	sub    esp,0xc
c00165c1:	50                   	push   eax
c00165c2:	e8 67 49 ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c00165c7:	83 c4 10             	add    esp,0x10
c00165ca:	90                   	nop
c00165cb:	83 c4 0c             	add    esp,0xc
c00165ce:	c3                   	ret    
c00165cf:	90                   	nop

c00165d0 <FAT::~FAT()>:
c00165d0:	83 ec 0c             	sub    esp,0xc
c00165d3:	83 ec 0c             	sub    esp,0xc
c00165d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165da:	e8 cd ff ff ff       	call   c00165ac <FAT::~FAT()>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	83 ec 08             	sub    esp,0x8
c00165e5:	6a 08                	push   0x8
c00165e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165eb:	e8 02 45 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c00165f0:	83 c4 10             	add    esp,0x10
c00165f3:	83 c4 0c             	add    esp,0xc
c00165f6:	c3                   	ret    
c00165f7:	90                   	nop

c00165f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00165f8:	83 ec 1c             	sub    esp,0x1c
c00165fb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016602:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016607:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001660b:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016612:	83 f8 ff             	cmp    eax,0xffffffff
c0016615:	75 35                	jne    c001664c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016617:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001661b:	88 c2                	mov    dl,al
c001661d:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016622:	01 d0                	add    eax,edx
c0016624:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016628:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c001662e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016632:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c0016639:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001663e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016642:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016649:	eb 19                	jmp    c0016664 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001664b:	90                   	nop
c001664c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016650:	88 c2                	mov    dl,al
c0016652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016656:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c001665d:	01 d0                	add    eax,edx
c001665f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016663:	90                   	nop
c0016664:	83 ec 04             	sub    esp,0x4
c0016667:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001666b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001666f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016673:	50                   	push   eax
c0016674:	e8 fb e7 fe ff       	call   c0004e74 <f_getlabel>
c0016679:	83 c4 10             	add    esp,0x10
c001667c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016680:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016685:	75 09                	jne    c0016690 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016687:	b8 00 00 00 00       	mov    eax,0x0
c001668c:	eb 0a                	jmp    c0016698 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001668e:	66 90                	xchg   ax,ax
c0016690:	b8 01 00 00 00       	mov    eax,0x1
c0016695:	8d 76 00             	lea    esi,[esi+0x0]
c0016698:	83 c4 1c             	add    esp,0x1c
c001669b:	c3                   	ret    

c001669c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001669c:	57                   	push   edi
c001669d:	83 ec 58             	sub    esp,0x58
c00166a0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00166a8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00166ac:	b8 00 00 00 00       	mov    eax,0x0
c00166b1:	b9 0f 00 00 00       	mov    ecx,0xf
c00166b6:	fc                   	cld    
c00166b7:	89 d7                	mov    edi,edx
c00166b9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00166bb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166bf:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00166c6:	83 f8 ff             	cmp    eax,0xffffffff
c00166c9:	75 35                	jne    c0016700 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00166cb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166cf:	88 c2                	mov    dl,al
c00166d1:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00166d6:	01 d0                	add    eax,edx
c00166d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00166dc:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c00166e2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166e6:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c00166ed:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00166f2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00166f6:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c00166fd:	eb 19                	jmp    c0016718 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00166ff:	90                   	nop
c0016700:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016704:	88 c2                	mov    dl,al
c0016706:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001670a:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016711:	01 d0                	add    eax,edx
c0016713:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016717:	90                   	nop
c0016718:	83 ec 08             	sub    esp,0x8
c001671b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001671f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016723:	50                   	push   eax
c0016724:	e8 b7 a0 fe ff       	call   c00007e0 <strcat>
c0016729:	83 c4 10             	add    esp,0x10
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016733:	50                   	push   eax
c0016734:	e8 8c e8 fe ff       	call   c0004fc5 <f_setlabel>
c0016739:	83 c4 10             	add    esp,0x10
c001673c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016740:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016745:	75 09                	jne    c0016750 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016747:	b8 00 00 00 00       	mov    eax,0x0
c001674c:	eb 0a                	jmp    c0016758 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001674e:	66 90                	xchg   ax,ax
c0016750:	b8 01 00 00 00       	mov    eax,0x1
c0016755:	8d 76 00             	lea    esi,[esi+0x0]
c0016758:	83 c4 58             	add    esp,0x58
c001675b:	5f                   	pop    edi
c001675c:	c3                   	ret    
c001675d:	90                   	nop
c001675e:	66 90                	xchg   ax,ax

c0016760 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016760:	83 ec 2c             	sub    esp,0x2c
c0016763:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001676b:	83 ec 08             	sub    esp,0x8
c001676e:	68 e8 ee 01 c0       	push   0xc001eee8
c0016773:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016777:	e8 84 9f fe ff       	call   c0000700 <strcmp>
c001677c:	83 c4 10             	add    esp,0x10
c001677f:	85 c0                	test   eax,eax
c0016781:	0f 94 c0             	sete   al
c0016784:	84 c0                	test   al,al
c0016786:	74 10                	je     c0016798 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016788:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016790:	e9 b3 00 00 00       	jmp    c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016795:	8d 76 00             	lea    esi,[esi+0x0]
c0016798:	83 ec 08             	sub    esp,0x8
c001679b:	68 da ee 01 c0       	push   0xc001eeda
c00167a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167a4:	e8 57 9f fe ff       	call   c0000700 <strcmp>
c00167a9:	83 c4 10             	add    esp,0x10
c00167ac:	85 c0                	test   eax,eax
c00167ae:	0f 94 c0             	sete   al
c00167b1:	84 c0                	test   al,al
c00167b3:	74 0f                	je     c00167c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00167b5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167bd:	e9 86 00 00 00       	jmp    c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167c2:	66 90                	xchg   ax,ax
c00167c4:	83 ec 08             	sub    esp,0x8
c00167c7:	68 e0 ee 01 c0       	push   0xc001eee0
c00167cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167d0:	e8 2b 9f fe ff       	call   c0000700 <strcmp>
c00167d5:	83 c4 10             	add    esp,0x10
c00167d8:	85 c0                	test   eax,eax
c00167da:	0f 94 c0             	sete   al
c00167dd:	84 c0                	test   al,al
c00167df:	74 0b                	je     c00167ec <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00167e1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167e9:	eb 5d                	jmp    c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167eb:	90                   	nop
c00167ec:	83 ec 08             	sub    esp,0x8
c00167ef:	68 9c cf 01 c0       	push   0xc001cf9c
c00167f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167f8:	e8 03 9f fe ff       	call   c0000700 <strcmp>
c00167fd:	83 c4 10             	add    esp,0x10
c0016800:	85 c0                	test   eax,eax
c0016802:	0f 94 c0             	sete   al
c0016805:	84 c0                	test   al,al
c0016807:	74 0b                	je     c0016814 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016809:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016811:	eb 35                	jmp    c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016813:	90                   	nop
c0016814:	83 ec 08             	sub    esp,0x8
c0016817:	68 e6 ee 01 c0       	push   0xc001eee6
c001681c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016820:	e8 db 9e fe ff       	call   c0000700 <strcmp>
c0016825:	83 c4 10             	add    esp,0x10
c0016828:	85 c0                	test   eax,eax
c001682a:	0f 94 c0             	sete   al
c001682d:	84 c0                	test   al,al
c001682f:	74 0b                	je     c001683c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016831:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016839:	eb 0d                	jmp    c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001683b:	90                   	nop
c001683c:	b8 08 00 00 00       	mov    eax,0x8
c0016841:	e9 ea 00 00 00       	jmp    c0016930 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016846:	66 90                	xchg   ax,ax
c0016848:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001684f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016854:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016858:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c001685f:	83 f8 ff             	cmp    eax,0xffffffff
c0016862:	75 34                	jne    c0016898 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016864:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016868:	88 c2                	mov    dl,al
c001686a:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001686f:	01 d0                	add    eax,edx
c0016871:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016875:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c001687b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001687f:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c0016886:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001688b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001688f:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016896:	eb 18                	jmp    c00168b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016898:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001689c:	88 c2                	mov    dl,al
c001689e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168a2:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00168a9:	01 d0                	add    eax,edx
c00168ab:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168af:	90                   	nop
c00168b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168b4:	88 04 24             	mov    BYTE PTR [esp],al
c00168b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00168bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00168c7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00168cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	68 00 20 00 00       	push   0x2000
c00168dc:	e8 78 15 ff ff       	call   c0007e59 <malloc>
c00168e1:	83 c4 10             	add    esp,0x10
c00168e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168e8:	68 00 20 00 00       	push   0x2000
c00168ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168f5:	50                   	push   eax
c00168f6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00168fa:	50                   	push   eax
c00168fb:	e8 b5 e9 fe ff       	call   c00052b5 <f_mkfs>
c0016900:	83 c4 10             	add    esp,0x10
c0016903:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016907:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001690c:	75 0a                	jne    c0016918 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001690e:	b8 00 00 00 00       	mov    eax,0x0
c0016913:	eb 1b                	jmp    c0016930 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016915:	8d 76 00             	lea    esi,[esi+0x0]
c0016918:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001691d:	75 09                	jne    c0016928 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001691f:	b8 09 00 00 00       	mov    eax,0x9
c0016924:	eb 0a                	jmp    c0016930 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016926:	66 90                	xchg   ax,ax
c0016928:	b8 01 00 00 00       	mov    eax,0x1
c001692d:	8d 76 00             	lea    esi,[esi+0x0]
c0016930:	83 c4 2c             	add    esp,0x2c
c0016933:	c3                   	ret    

c0016934 <FAT::tryMount(LogicalDisk*, int)>:
c0016934:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001693a:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001693f:	83 f8 14             	cmp    eax,0x14
c0016942:	75 18                	jne    c001695c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	68 ec ee 01 c0       	push   0xc001eeec
c001694c:	e8 82 9d ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	b0 00                	mov    al,0x0
c0016956:	e9 e9 01 00 00       	jmp    c0016b44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001695b:	90                   	nop
c001695c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016963:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016969:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001696f:	3d 00 02 00 00       	cmp    eax,0x200
c0016974:	74 0a                	je     c0016980 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016976:	b0 00                	mov    al,0x0
c0016978:	e9 c7 01 00 00       	jmp    c0016b44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001697d:	8d 76 00             	lea    esi,[esi+0x0]
c0016980:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016988:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001698f:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016996:	83 f8 ff             	cmp    eax,0xffffffff
c0016999:	74 09                	je     c00169a4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001699b:	b0 01                	mov    al,0x1
c001699d:	e9 a2 01 00 00       	jmp    c0016b44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169a2:	66 90                	xchg   ax,ax
c00169a4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00169ae:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00169b6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00169bd:	88 c2                	mov    dl,al
c00169bf:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00169c4:	01 d0                	add    eax,edx
c00169c6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00169cd:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c00169d3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169da:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c00169e1:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00169e6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00169ed:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c00169f4:	83 ec 0c             	sub    esp,0xc
c00169f7:	68 34 02 00 00       	push   0x234
c00169fc:	e8 58 14 ff ff       	call   c0007e59 <malloc>
c0016a01:	83 c4 10             	add    esp,0x10
c0016a04:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a0b:	83 ec 04             	sub    esp,0x4
c0016a0e:	6a 00                	push   0x0
c0016a10:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a17:	50                   	push   eax
c0016a18:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a1f:	e8 b7 d0 fe ff       	call   c0003adb <f_mount>
c0016a24:	83 c4 10             	add    esp,0x10
c0016a27:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a2e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a36:	74 1c                	je     c0016a54 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a42:	e8 32 14 ff ff       	call   c0007e79 <rfree>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	b0 00                	mov    al,0x0
c0016a4c:	e9 f3 00 00 00       	jmp    c0016b44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a51:	8d 76 00             	lea    esi,[esi+0x0]
c0016a54:	83 ec 04             	sub    esp,0x4
c0016a57:	68 00 01 00 00       	push   0x100
c0016a5c:	6a 00                	push   0x0
c0016a5e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a65:	50                   	push   eax
c0016a66:	e8 85 9a fe ff       	call   c00004f0 <memset>
c0016a6b:	83 c4 10             	add    esp,0x10
c0016a6e:	83 ec 08             	sub    esp,0x8
c0016a71:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a78:	50                   	push   eax
c0016a79:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a80:	50                   	push   eax
c0016a81:	e8 5a 9d fe ff       	call   c00007e0 <strcat>
c0016a86:	83 c4 10             	add    esp,0x10
c0016a89:	83 ec 08             	sub    esp,0x8
c0016a8c:	68 fa ee 01 c0       	push   0xc001eefa
c0016a91:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a98:	50                   	push   eax
c0016a99:	e8 42 9d fe ff       	call   c00007e0 <strcat>
c0016a9e:	83 c4 10             	add    esp,0x10
c0016aa1:	83 ec 04             	sub    esp,0x4
c0016aa4:	6a 01                	push   0x1
c0016aa6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016aad:	50                   	push   eax
c0016aae:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ab2:	50                   	push   eax
c0016ab3:	e8 85 d0 fe ff       	call   c0003b3d <f_open>
c0016ab8:	83 c4 10             	add    esp,0x10
c0016abb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016ac2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016ac9:	85 c0                	test   eax,eax
c0016acb:	74 0b                	je     c0016ad8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016acd:	78 31                	js     c0016b00 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016acf:	83 e8 04             	sub    eax,0x4
c0016ad2:	83 f8 01             	cmp    eax,0x1
c0016ad5:	77 29                	ja     c0016b00 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016ad7:	90                   	nop
c0016ad8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016ae0:	83 ec 0c             	sub    esp,0xc
c0016ae3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ae7:	50                   	push   eax
c0016ae8:	e8 03 d8 fe ff       	call   c00042f0 <f_close>
c0016aed:	83 c4 10             	add    esp,0x10
c0016af0:	90                   	nop
c0016af1:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016af9:	74 41                	je     c0016b3c <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016afb:	eb 33                	jmp    c0016b30 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016afd:	8d 76 00             	lea    esi,[esi+0x0]
c0016b00:	83 ec 0c             	sub    esp,0xc
c0016b03:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b0a:	e8 6a 13 ff ff       	call   c0007e79 <rfree>
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	83 ec 04             	sub    esp,0x4
c0016b15:	6a 00                	push   0x0
c0016b17:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b1e:	50                   	push   eax
c0016b1f:	6a 00                	push   0x0
c0016b21:	e8 b5 cf fe ff       	call   c0003adb <f_mount>
c0016b26:	83 c4 10             	add    esp,0x10
c0016b29:	b0 00                	mov    al,0x0
c0016b2b:	eb 17                	jmp    c0016b44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b30:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016b35:	40                   	inc    eax
c0016b36:	a3 c0 3e 02 c0       	mov    ds:0xc0023ec0,eax
c0016b3b:	90                   	nop
c0016b3c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b43:	90                   	nop
c0016b44:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016b4a:	c3                   	ret    
c0016b4b:	90                   	nop

c0016b4c <FAT::allocateSwapfile(char const*, int)>:
c0016b4c:	55                   	push   ebp
c0016b4d:	57                   	push   edi
c0016b4e:	56                   	push   esi
c0016b4f:	53                   	push   ebx
c0016b50:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016b56:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016b61:	83 ec 0c             	sub    esp,0xc
c0016b64:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016b6b:	e8 e9 12 ff ff       	call   c0007e59 <malloc>
c0016b70:	83 c4 10             	add    esp,0x10
c0016b73:	89 c7                	mov    edi,eax
c0016b75:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0016b7a:	83 ec 04             	sub    esp,0x4
c0016b7d:	50                   	push   eax
c0016b7e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016b85:	57                   	push   edi
c0016b86:	e8 d3 45 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0016b8b:	83 c4 10             	add    esp,0x10
c0016b8e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016b95:	83 ec 04             	sub    esp,0x4
c0016b98:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016b9c:	50                   	push   eax
c0016b9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ba1:	50                   	push   eax
c0016ba2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ba9:	e8 1c 49 ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0016bae:	83 c4 10             	add    esp,0x10
c0016bb1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016bb8:	c1 e0 14             	shl    eax,0x14
c0016bbb:	89 c7                	mov    edi,eax
c0016bbd:	89 c5                	mov    ebp,eax
c0016bbf:	c1 fd 1f             	sar    ebp,0x1f
c0016bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bca:	89 f9                	mov    ecx,edi
c0016bcc:	31 c1                	xor    ecx,eax
c0016bce:	89 cb                	mov    ebx,ecx
c0016bd0:	89 e9                	mov    ecx,ebp
c0016bd2:	31 d1                	xor    ecx,edx
c0016bd4:	89 ce                	mov    esi,ecx
c0016bd6:	89 f0                	mov    eax,esi
c0016bd8:	09 d8                	or     eax,ebx
c0016bda:	0f 84 9c 00 00 00    	je     c0016c7c <FAT::allocateSwapfile(char const*, int)+0x130>
c0016be0:	83 ec 0c             	sub    esp,0xc
c0016be3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bea:	e8 a7 47 ff ff       	call   c000b396 <File::unlink()>
c0016bef:	83 c4 10             	add    esp,0x10
c0016bf2:	83 ec 08             	sub    esp,0x8
c0016bf5:	6a 12                	push   0x12
c0016bf7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bfe:	e8 1b 46 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c0d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c13:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c1a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c21:	c1 e0 14             	shl    eax,0x14
c0016c24:	83 ec 04             	sub    esp,0x4
c0016c27:	6a 01                	push   0x1
c0016c29:	50                   	push   eax
c0016c2a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c31:	e8 1f e5 fe ff       	call   c0005155 <f_expand>
c0016c36:	83 c4 10             	add    esp,0x10
c0016c39:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c42:	83 c0 10             	add    eax,0x10
c0016c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c47:	83 ec 0c             	sub    esp,0xc
c0016c4a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c4e:	52                   	push   edx
c0016c4f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016c53:	52                   	push   edx
c0016c54:	6a 00                	push   0x0
c0016c56:	68 00 04 00 00       	push   0x400
c0016c5b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c62:	ff d0                	call   eax
c0016c64:	83 c4 20             	add    esp,0x20
c0016c67:	83 ec 0c             	sub    esp,0xc
c0016c6a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c71:	e8 06 46 ff ff       	call   c000b27c <File::close()>
c0016c76:	83 c4 10             	add    esp,0x10
c0016c79:	8d 76 00             	lea    esi,[esi+0x0]
c0016c7c:	83 ec 08             	sub    esp,0x8
c0016c7f:	6a 01                	push   0x1
c0016c81:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c88:	e8 91 45 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0016c8d:	83 c4 10             	add    esp,0x10
c0016c90:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c99:	83 c0 0c             	add    eax,0xc
c0016c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c9e:	83 ec 0c             	sub    esp,0xc
c0016ca1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016ca5:	52                   	push   edx
c0016ca6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016caa:	52                   	push   edx
c0016cab:	6a 00                	push   0x0
c0016cad:	6a 04                	push   0x4
c0016caf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cb6:	ff d0                	call   eax
c0016cb8:	83 c4 20             	add    esp,0x20
c0016cbb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cc2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016cc8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016ccf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016cd6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016cd9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cea:	e8 8d 45 ff ff       	call   c000b27c <File::close()>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016cf9:	ba 00 00 00 00       	mov    edx,0x0
c0016cfe:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d04:	5b                   	pop    ebx
c0016d05:	5e                   	pop    esi
c0016d06:	5f                   	pop    edi
c0016d07:	5d                   	pop    ebp
c0016d08:	c3                   	ret    
c0016d09:	90                   	nop
c0016d0a:	66 90                	xchg   ax,ax

c0016d0c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d0c:	57                   	push   edi
c0016d0d:	56                   	push   esi
c0016d0e:	53                   	push   ebx
c0016d0f:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d15:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d1d:	74 0d                	je     c0016d2c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d1f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d27:	75 0f                	jne    c0016d38 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d29:	8d 76 00             	lea    esi,[esi+0x0]
c0016d2c:	b8 04 00 00 00       	mov    eax,0x4
c0016d31:	e9 36 01 00 00       	jmp    c0016e6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d36:	66 90                	xchg   ax,ax
c0016d38:	83 ec 08             	sub    esp,0x8
c0016d3b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d42:	50                   	push   eax
c0016d43:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016d4a:	e8 64 d8 fe ff       	call   c00045b3 <f_readdir>
c0016d4f:	83 c4 10             	add    esp,0x10
c0016d52:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016d59:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016d60:	83 ec 0c             	sub    esp,0xc
c0016d63:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016d6a:	83 c0 16             	add    eax,0x16
c0016d6d:	50                   	push   eax
c0016d6e:	e8 ed 97 fe ff       	call   c0000560 <strlen>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	ba 00 00 00 00       	mov    edx,0x0
c0016d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d7f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d83:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016d8a:	25 ff 00 00 00       	and    eax,0xff
c0016d8f:	83 e0 10             	and    eax,0x10
c0016d92:	74 08                	je     c0016d9c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016d94:	b8 02 00 00 00       	mov    eax,0x2
c0016d99:	eb 09                	jmp    c0016da4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016d9b:	90                   	nop
c0016d9c:	b8 01 00 00 00       	mov    eax,0x1
c0016da1:	8d 76 00             	lea    esi,[esi+0x0]
c0016da4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016da8:	83 ec 08             	sub    esp,0x8
c0016dab:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016db2:	83 c0 16             	add    eax,0x16
c0016db5:	50                   	push   eax
c0016db6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016dba:	83 c0 10             	add    eax,0x10
c0016dbd:	50                   	push   eax
c0016dbe:	e8 5d 98 fe ff       	call   c0000620 <strcpy>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016dcd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016dd4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dd8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016ddf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016de6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016ded:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016df4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016dfb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e02:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e09:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e10:	89 c6                	mov    esi,eax
c0016e12:	89 d7                	mov    edi,edx
c0016e14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e16:	89 c8                	mov    eax,ecx
c0016e18:	89 fa                	mov    edx,edi
c0016e1a:	89 f3                	mov    ebx,esi
c0016e1c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e23:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e2a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e31:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e38:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e3e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016e45:	84 c0                	test   al,al
c0016e47:	75 07                	jne    c0016e50 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016e49:	b8 07 00 00 00       	mov    eax,0x7
c0016e4e:	eb 1c                	jmp    c0016e6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e50:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016e57:	85 c0                	test   eax,eax
c0016e59:	75 09                	jne    c0016e64 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016e5b:	b8 00 00 00 00       	mov    eax,0x0
c0016e60:	eb 0a                	jmp    c0016e6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e62:	66 90                	xchg   ax,ax
c0016e64:	b8 01 00 00 00       	mov    eax,0x1
c0016e69:	8d 76 00             	lea    esi,[esi+0x0]
c0016e6c:	81 c4 50 02 00 00    	add    esp,0x250
c0016e72:	5b                   	pop    ebx
c0016e73:	5e                   	pop    esi
c0016e74:	5f                   	pop    edi
c0016e75:	c3                   	ret    
c0016e76:	66 90                	xchg   ax,ax

c0016e78 <FAT::read(void*, unsigned long, void*, int*)>:
c0016e78:	83 ec 1c             	sub    esp,0x1c
c0016e7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e80:	74 0a                	je     c0016e8c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016e82:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e87:	75 0b                	jne    c0016e94 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016e89:	8d 76 00             	lea    esi,[esi+0x0]
c0016e8c:	b8 04 00 00 00       	mov    eax,0x4
c0016e91:	eb 41                	jmp    c0016ed4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e93:	90                   	nop
c0016e94:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e98:	50                   	push   eax
c0016e99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ea1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ea5:	e8 5e cf fe ff       	call   c0003e08 <f_read>
c0016eaa:	83 c4 10             	add    esp,0x10
c0016ead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016eb5:	89 c2                	mov    edx,eax
c0016eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ebb:	89 10                	mov    DWORD PTR [eax],edx
c0016ebd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ec1:	85 c0                	test   eax,eax
c0016ec3:	75 07                	jne    c0016ecc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016ec5:	b8 00 00 00 00       	mov    eax,0x0
c0016eca:	eb 08                	jmp    c0016ed4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016ecc:	b8 01 00 00 00       	mov    eax,0x1
c0016ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed4:	83 c4 1c             	add    esp,0x1c
c0016ed7:	c3                   	ret    

c0016ed8 <FAT::write(void*, unsigned long, void*, int*)>:
c0016ed8:	83 ec 1c             	sub    esp,0x1c
c0016edb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ee0:	74 0a                	je     c0016eec <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016ee2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ee7:	75 0b                	jne    c0016ef4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0016eec:	b8 04 00 00 00       	mov    eax,0x4
c0016ef1:	eb 41                	jmp    c0016f34 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016ef3:	90                   	nop
c0016ef4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ef8:	50                   	push   eax
c0016ef9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016efd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f05:	e8 fd d0 fe ff       	call   c0004007 <f_write>
c0016f0a:	83 c4 10             	add    esp,0x10
c0016f0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f15:	89 c2                	mov    edx,eax
c0016f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f1b:	89 10                	mov    DWORD PTR [eax],edx
c0016f1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f21:	85 c0                	test   eax,eax
c0016f23:	75 07                	jne    c0016f2c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f25:	b8 00 00 00 00       	mov    eax,0x0
c0016f2a:	eb 08                	jmp    c0016f34 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f2c:	b8 01 00 00 00       	mov    eax,0x1
c0016f31:	8d 76 00             	lea    esi,[esi+0x0]
c0016f34:	83 c4 1c             	add    esp,0x1c
c0016f37:	c3                   	ret    

c0016f38 <FAT::close(void*)>:
c0016f38:	83 ec 1c             	sub    esp,0x1c
c0016f3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f40:	75 0a                	jne    c0016f4c <FAT::close(void*)+0x14>
c0016f42:	b8 04 00 00 00       	mov    eax,0x4
c0016f47:	eb 3f                	jmp    c0016f88 <FAT::close(void*)+0x50>
c0016f49:	8d 76 00             	lea    esi,[esi+0x0]
c0016f4c:	83 ec 0c             	sub    esp,0xc
c0016f4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f53:	e8 98 d3 fe ff       	call   c00042f0 <f_close>
c0016f58:	83 c4 10             	add    esp,0x10
c0016f5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f5f:	83 ec 0c             	sub    esp,0xc
c0016f62:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f66:	e8 fe 0e ff ff       	call   c0007e69 <free>
c0016f6b:	83 c4 10             	add    esp,0x10
c0016f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f72:	85 c0                	test   eax,eax
c0016f74:	75 0a                	jne    c0016f80 <FAT::close(void*)+0x48>
c0016f76:	b8 00 00 00 00       	mov    eax,0x0
c0016f7b:	eb 0b                	jmp    c0016f88 <FAT::close(void*)+0x50>
c0016f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f80:	b8 01 00 00 00       	mov    eax,0x1
c0016f85:	8d 76 00             	lea    esi,[esi+0x0]
c0016f88:	83 c4 1c             	add    esp,0x1c
c0016f8b:	c3                   	ret    

c0016f8c <FAT::closeDir(void*)>:
c0016f8c:	83 ec 1c             	sub    esp,0x1c
c0016f8f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f94:	75 0a                	jne    c0016fa0 <FAT::closeDir(void*)+0x14>
c0016f96:	b8 04 00 00 00       	mov    eax,0x4
c0016f9b:	eb 3f                	jmp    c0016fdc <FAT::closeDir(void*)+0x50>
c0016f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fa7:	e8 e5 d5 fe ff       	call   c0004591 <f_closedir>
c0016fac:	83 c4 10             	add    esp,0x10
c0016faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fb3:	83 ec 0c             	sub    esp,0xc
c0016fb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fba:	e8 aa 0e ff ff       	call   c0007e69 <free>
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fc6:	85 c0                	test   eax,eax
c0016fc8:	75 0a                	jne    c0016fd4 <FAT::closeDir(void*)+0x48>
c0016fca:	b8 00 00 00 00       	mov    eax,0x0
c0016fcf:	eb 0b                	jmp    c0016fdc <FAT::closeDir(void*)+0x50>
c0016fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd4:	b8 01 00 00 00       	mov    eax,0x1
c0016fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fdc:	83 c4 1c             	add    esp,0x1c
c0016fdf:	c3                   	ret    

c0016fe0 <FAT::seek(void*, unsigned long long)>:
c0016fe0:	83 ec 2c             	sub    esp,0x2c
c0016fe3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016feb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ff3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016ff8:	75 0a                	jne    c0017004 <FAT::seek(void*, unsigned long long)+0x24>
c0016ffa:	b8 04 00 00 00       	mov    eax,0x4
c0016fff:	eb 33                	jmp    c0017034 <FAT::seek(void*, unsigned long long)+0x54>
c0017001:	8d 76 00             	lea    esi,[esi+0x0]
c0017004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017008:	83 ec 08             	sub    esp,0x8
c001700b:	50                   	push   eax
c001700c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017010:	e8 0a d3 fe ff       	call   c000431f <f_lseek>
c0017015:	83 c4 10             	add    esp,0x10
c0017018:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001701c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017020:	85 c0                	test   eax,eax
c0017022:	75 08                	jne    c001702c <FAT::seek(void*, unsigned long long)+0x4c>
c0017024:	b8 00 00 00 00       	mov    eax,0x0
c0017029:	eb 09                	jmp    c0017034 <FAT::seek(void*, unsigned long long)+0x54>
c001702b:	90                   	nop
c001702c:	b8 01 00 00 00       	mov    eax,0x1
c0017031:	8d 76 00             	lea    esi,[esi+0x0]
c0017034:	83 c4 2c             	add    esp,0x2c
c0017037:	c3                   	ret    

c0017038 <fatWrapperReadDisk>:
c0017038:	53                   	push   ebx
c0017039:	83 ec 18             	sub    esp,0x18
c001703c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017040:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017044:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017048:	25 ff 00 00 00       	and    eax,0xff
c001704d:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c0017054:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017058:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001705c:	ba 00 00 00 00       	mov    edx,0x0
c0017061:	83 ec 0c             	sub    esp,0xc
c0017064:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017068:	53                   	push   ebx
c0017069:	52                   	push   edx
c001706a:	50                   	push   eax
c001706b:	51                   	push   ecx
c001706c:	e8 5f 62 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0017071:	83 c4 20             	add    esp,0x20
c0017074:	83 c4 18             	add    esp,0x18
c0017077:	5b                   	pop    ebx
c0017078:	c3                   	ret    
c0017079:	8d 76 00             	lea    esi,[esi+0x0]

c001707c <fatWrapperWriteDisk>:
c001707c:	53                   	push   ebx
c001707d:	83 ec 18             	sub    esp,0x18
c0017080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017084:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017088:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001708c:	25 ff 00 00 00       	and    eax,0xff
c0017091:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c0017098:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001709c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170a0:	ba 00 00 00 00       	mov    edx,0x0
c00170a5:	83 ec 0c             	sub    esp,0xc
c00170a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170ac:	53                   	push   ebx
c00170ad:	52                   	push   edx
c00170ae:	50                   	push   eax
c00170af:	51                   	push   ecx
c00170b0:	e8 87 62 ff ff       	call   c000d33c <LogicalDisk::write(unsigned long long, int, void*)>
c00170b5:	83 c4 20             	add    esp,0x20
c00170b8:	83 c4 18             	add    esp,0x18
c00170bb:	5b                   	pop    ebx
c00170bc:	c3                   	ret    
c00170bd:	8d 76 00             	lea    esi,[esi+0x0]

c00170c0 <fatWrapperIoctl>:
c00170c0:	53                   	push   ebx
c00170c1:	83 ec 28             	sub    esp,0x28
c00170c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170cc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00170d0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00170d4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00170d9:	75 35                	jne    c0017110 <fatWrapperIoctl+0x50>
c00170db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170e3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170e7:	25 ff 00 00 00       	and    eax,0xff
c00170ec:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c00170f3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00170f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017103:	66 89 02             	mov    WORD PTR [edx],ax
c0017106:	b8 00 00 00 00       	mov    eax,0x0
c001710b:	e9 c4 00 00 00       	jmp    c00171d4 <fatWrapperIoctl+0x114>
c0017110:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017115:	75 75                	jne    c001718c <fatWrapperIoctl+0xcc>
c0017117:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001711b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001711f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017123:	25 ff 00 00 00       	and    eax,0xff
c0017128:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c001712f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017135:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001713b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017141:	89 c8                	mov    eax,ecx
c0017143:	89 da                	mov    edx,ebx
c0017145:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017149:	c1 e0 0a             	shl    eax,0xa
c001714c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017150:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017156:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c001715d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017163:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017169:	89 cb                	mov    ebx,ecx
c001716b:	c1 fb 1f             	sar    ebx,0x1f
c001716e:	53                   	push   ebx
c001716f:	51                   	push   ecx
c0017170:	52                   	push   edx
c0017171:	50                   	push   eax
c0017172:	e8 29 50 00 00       	call   c001c1a0 <__udivdi3>
c0017177:	83 c4 10             	add    esp,0x10
c001717a:	89 c2                	mov    edx,eax
c001717c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017180:	89 10                	mov    DWORD PTR [eax],edx
c0017182:	b8 00 00 00 00       	mov    eax,0x0
c0017187:	eb 4b                	jmp    c00171d4 <fatWrapperIoctl+0x114>
c0017189:	8d 76 00             	lea    esi,[esi+0x0]
c001718c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017191:	75 09                	jne    c001719c <fatWrapperIoctl+0xdc>
c0017193:	b8 00 00 00 00       	mov    eax,0x0
c0017198:	eb 3a                	jmp    c00171d4 <fatWrapperIoctl+0x114>
c001719a:	66 90                	xchg   ax,ax
c001719c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171a1:	75 19                	jne    c00171bc <fatWrapperIoctl+0xfc>
c00171a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171af:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00171b5:	b8 00 00 00 00       	mov    eax,0x0
c00171ba:	eb 18                	jmp    c00171d4 <fatWrapperIoctl+0x114>
c00171bc:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00171c1:	75 09                	jne    c00171cc <fatWrapperIoctl+0x10c>
c00171c3:	b8 00 00 00 00       	mov    eax,0x0
c00171c8:	eb 0a                	jmp    c00171d4 <fatWrapperIoctl+0x114>
c00171ca:	66 90                	xchg   ax,ax
c00171cc:	b8 04 00 00 00       	mov    eax,0x4
c00171d1:	8d 76 00             	lea    esi,[esi+0x0]
c00171d4:	83 c4 28             	add    esp,0x28
c00171d7:	5b                   	pop    ebx
c00171d8:	c3                   	ret    
c00171d9:	90                   	nop
c00171da:	66 90                	xchg   ax,ax

c00171dc <FAT::FAT()>:
c00171dc:	83 ec 1c             	sub    esp,0x1c
c00171df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171e3:	83 ec 0c             	sub    esp,0xc
c00171e6:	50                   	push   eax
c00171e7:	e8 1e 3d ff ff       	call   c000af0a <Filesystem::Filesystem()>
c00171ec:	83 c4 10             	add    esp,0x10
c00171ef:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c00171f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171f8:	89 10                	mov    DWORD PTR [eax],edx
c00171fa:	c7 05 c0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ec0,0x0
c0017204:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001720c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017211:	7f 15                	jg     c0017228 <FAT::FAT()+0x4c>
c0017213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017217:	c7 04 85 e0 3e 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc120],0xffffffff
c0017222:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017226:	eb e4                	jmp    c001720c <FAT::FAT()+0x30>
c0017228:	90                   	nop
c0017229:	83 c4 1c             	add    esp,0x1c
c001722c:	c3                   	ret    
c001722d:	90                   	nop
c001722e:	66 90                	xchg   ax,ax

c0017230 <FAT::fixFilepath(char*)>:
c0017230:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017234:	8a 00                	mov    al,BYTE PTR [eax]
c0017236:	3c 40                	cmp    al,0x40
c0017238:	7e 2e                	jle    c0017268 <FAT::fixFilepath(char*)+0x38>
c001723a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001723e:	8a 00                	mov    al,BYTE PTR [eax]
c0017240:	83 e8 41             	sub    eax,0x41
c0017243:	88 c2                	mov    dl,al
c0017245:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017249:	88 10                	mov    BYTE PTR [eax],dl
c001724b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001724f:	8a 00                	mov    al,BYTE PTR [eax]
c0017251:	0f be c0             	movsx  eax,al
c0017254:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c001725b:	83 c0 30             	add    eax,0x30
c001725e:	88 c2                	mov    dl,al
c0017260:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017264:	88 10                	mov    BYTE PTR [eax],dl
c0017266:	66 90                	xchg   ax,ax
c0017268:	90                   	nop
c0017269:	c3                   	ret    
c001726a:	66 90                	xchg   ax,ax

c001726c <FAT::open(char const*, void**, FileOpenMode)>:
c001726c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017272:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001727a:	74 0c                	je     c0017288 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001727c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017284:	75 0e                	jne    c0017294 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017286:	66 90                	xchg   ax,ax
c0017288:	b8 04 00 00 00       	mov    eax,0x4
c001728d:	e9 0a 01 00 00       	jmp    c001739c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017292:	66 90                	xchg   ax,ax
c0017294:	83 ec 08             	sub    esp,0x8
c0017297:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001729e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172a2:	50                   	push   eax
c00172a3:	e8 78 93 fe ff       	call   c0000620 <strcpy>
c00172a8:	83 c4 10             	add    esp,0x10
c00172ab:	83 ec 08             	sub    esp,0x8
c00172ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172b2:	50                   	push   eax
c00172b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ba:	e8 71 ff ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00172ca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172d1:	83 e0 01             	and    eax,0x1
c00172d4:	74 0a                	je     c00172e0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00172d6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00172de:	66 90                	xchg   ax,ax
c00172e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172e7:	83 e0 04             	and    eax,0x4
c00172ea:	74 10                	je     c00172fc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00172ec:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00172f4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00172fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017303:	83 e0 02             	and    eax,0x2
c0017306:	74 08                	je     c0017310 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017308:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017310:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017317:	83 e0 08             	and    eax,0x8
c001731a:	74 08                	je     c0017324 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001731c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017324:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001732b:	83 e0 10             	and    eax,0x10
c001732e:	74 08                	je     c0017338 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017330:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017338:	83 ec 0c             	sub    esp,0xc
c001733b:	68 28 02 00 00       	push   0x228
c0017340:	e8 14 0b ff ff       	call   c0007e59 <malloc>
c0017345:	83 c4 10             	add    esp,0x10
c0017348:	89 c2                	mov    edx,eax
c001734a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017351:	89 10                	mov    DWORD PTR [eax],edx
c0017353:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001735a:	31 d2                	xor    edx,edx
c001735c:	88 c2                	mov    dl,al
c001735e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017365:	8b 00                	mov    eax,DWORD PTR [eax]
c0017367:	83 ec 04             	sub    esp,0x4
c001736a:	52                   	push   edx
c001736b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001736f:	52                   	push   edx
c0017370:	50                   	push   eax
c0017371:	e8 c7 c7 fe ff       	call   c0003b3d <f_open>
c0017376:	83 c4 10             	add    esp,0x10
c0017379:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017380:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017388:	74 0a                	je     c0017394 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001738a:	b8 01 00 00 00       	mov    eax,0x1
c001738f:	eb 0b                	jmp    c001739c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017391:	8d 76 00             	lea    esi,[esi+0x0]
c0017394:	b8 00 00 00 00       	mov    eax,0x0
c0017399:	8d 76 00             	lea    esi,[esi+0x0]
c001739c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173a2:	c3                   	ret    
c00173a3:	90                   	nop

c00173a4 <FAT::openDir(char const*, void**)>:
c00173a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00173b2:	74 0c                	je     c00173c0 <FAT::openDir(char const*, void**)+0x1c>
c00173b4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00173bc:	75 0e                	jne    c00173cc <FAT::openDir(char const*, void**)+0x28>
c00173be:	66 90                	xchg   ax,ax
c00173c0:	b8 04 00 00 00       	mov    eax,0x4
c00173c5:	e9 82 00 00 00       	jmp    c001744c <FAT::openDir(char const*, void**)+0xa8>
c00173ca:	66 90                	xchg   ax,ax
c00173cc:	83 ec 08             	sub    esp,0x8
c00173cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173da:	50                   	push   eax
c00173db:	e8 40 92 fe ff       	call   c0000620 <strcpy>
c00173e0:	83 c4 10             	add    esp,0x10
c00173e3:	83 ec 08             	sub    esp,0x8
c00173e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00173ea:	50                   	push   eax
c00173eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173f2:	e8 39 fe ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c00173f7:	83 c4 10             	add    esp,0x10
c00173fa:	83 ec 0c             	sub    esp,0xc
c00173fd:	6a 30                	push   0x30
c00173ff:	e8 55 0a ff ff       	call   c0007e59 <malloc>
c0017404:	83 c4 10             	add    esp,0x10
c0017407:	89 c2                	mov    edx,eax
c0017409:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017410:	89 10                	mov    DWORD PTR [eax],edx
c0017412:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017419:	8b 00                	mov    eax,DWORD PTR [eax]
c001741b:	83 ec 08             	sub    esp,0x8
c001741e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017422:	52                   	push   edx
c0017423:	50                   	push   eax
c0017424:	e8 9d d0 fe ff       	call   c00044c6 <f_opendir>
c0017429:	83 c4 10             	add    esp,0x10
c001742c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017433:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001743b:	74 07                	je     c0017444 <FAT::openDir(char const*, void**)+0xa0>
c001743d:	b8 01 00 00 00       	mov    eax,0x1
c0017442:	eb 08                	jmp    c001744c <FAT::openDir(char const*, void**)+0xa8>
c0017444:	b8 00 00 00 00       	mov    eax,0x0
c0017449:	8d 76 00             	lea    esi,[esi+0x0]
c001744c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017452:	c3                   	ret    
c0017453:	90                   	nop

c0017454 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017454:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001745a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017462:	75 0c                	jne    c0017470 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017464:	b8 04 00 00 00       	mov    eax,0x4
c0017469:	e9 d6 00 00 00       	jmp    c0017544 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001746e:	66 90                	xchg   ax,ax
c0017470:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017478:	75 0a                	jne    c0017484 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001747a:	b8 04 00 00 00       	mov    eax,0x4
c001747f:	e9 c0 00 00 00       	jmp    c0017544 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017484:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001748c:	75 0a                	jne    c0017498 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001748e:	b8 04 00 00 00       	mov    eax,0x4
c0017493:	e9 ac 00 00 00       	jmp    c0017544 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017498:	83 ec 08             	sub    esp,0x8
c001749b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174a2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174a9:	50                   	push   eax
c00174aa:	e8 71 91 fe ff       	call   c0000620 <strcpy>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	83 ec 08             	sub    esp,0x8
c00174b5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00174bc:	50                   	push   eax
c00174bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174c4:	e8 67 fd ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	83 ec 08             	sub    esp,0x8
c00174cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00174d3:	50                   	push   eax
c00174d4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174db:	50                   	push   eax
c00174dc:	e8 64 d1 fe ff       	call   c0004645 <f_stat>
c00174e1:	83 c4 10             	add    esp,0x10
c00174e4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00174eb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00174f2:	85 c0                	test   eax,eax
c00174f4:	74 0a                	je     c0017500 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00174f6:	83 f8 04             	cmp    eax,0x4
c00174f9:	74 39                	je     c0017534 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00174fb:	eb 3f                	jmp    c001753c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00174fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017500:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017504:	25 ff 00 00 00       	and    eax,0xff
c0017509:	83 e0 10             	and    eax,0x10
c001750c:	0f 95 c2             	setne  dl
c001750f:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017516:	88 10                	mov    BYTE PTR [eax],dl
c0017518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001751c:	ba 00 00 00 00       	mov    edx,0x0
c0017521:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017528:	89 01                	mov    DWORD PTR [ecx],eax
c001752a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001752d:	b8 00 00 00 00       	mov    eax,0x0
c0017532:	eb 10                	jmp    c0017544 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017534:	b8 02 00 00 00       	mov    eax,0x2
c0017539:	eb 09                	jmp    c0017544 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001753b:	90                   	nop
c001753c:	b8 01 00 00 00       	mov    eax,0x1
c0017541:	8d 76 00             	lea    esi,[esi+0x0]
c0017544:	81 c4 2c 02 00 00    	add    esp,0x22c
c001754a:	c3                   	ret    
c001754b:	90                   	nop

c001754c <FAT::unlink(char const*)>:
c001754c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017552:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001755a:	75 08                	jne    c0017564 <FAT::unlink(char const*)+0x18>
c001755c:	b8 04 00 00 00       	mov    eax,0x4
c0017561:	eb 61                	jmp    c00175c4 <FAT::unlink(char const*)+0x78>
c0017563:	90                   	nop
c0017564:	83 ec 08             	sub    esp,0x8
c0017567:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001756e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017572:	50                   	push   eax
c0017573:	e8 a8 90 fe ff       	call   c0000620 <strcpy>
c0017578:	83 c4 10             	add    esp,0x10
c001757b:	83 ec 08             	sub    esp,0x8
c001757e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017582:	50                   	push   eax
c0017583:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001758a:	e8 a1 fc ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	83 ec 0c             	sub    esp,0xc
c0017595:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017599:	50                   	push   eax
c001759a:	e8 0b d3 fe ff       	call   c00048aa <f_unlink>
c001759f:	83 c4 10             	add    esp,0x10
c00175a2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00175a9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00175b0:	85 c0                	test   eax,eax
c00175b2:	75 08                	jne    c00175bc <FAT::unlink(char const*)+0x70>
c00175b4:	b8 00 00 00 00       	mov    eax,0x0
c00175b9:	eb 09                	jmp    c00175c4 <FAT::unlink(char const*)+0x78>
c00175bb:	90                   	nop
c00175bc:	b8 01 00 00 00       	mov    eax,0x1
c00175c1:	8d 76 00             	lea    esi,[esi+0x0]
c00175c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00175ca:	c3                   	ret    
c00175cb:	90                   	nop

c00175cc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00175cc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00175d2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00175d9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00175e0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00175e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00175e8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00175f0:	75 0a                	jne    c00175fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00175f2:	b8 04 00 00 00       	mov    eax,0x4
c00175f7:	e9 54 01 00 00       	jmp    c0017750 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00175fc:	83 ec 08             	sub    esp,0x8
c00175ff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017606:	8d 44 24 24          	lea    eax,[esp+0x24]
c001760a:	50                   	push   eax
c001760b:	e8 10 90 fe ff       	call   c0000620 <strcpy>
c0017610:	83 c4 10             	add    esp,0x10
c0017613:	83 ec 08             	sub    esp,0x8
c0017616:	8d 44 24 20          	lea    eax,[esp+0x20]
c001761a:	50                   	push   eax
c001761b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017622:	e8 09 fc ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017632:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001763a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001763e:	25 ff 00 00 00       	and    eax,0xff
c0017643:	83 e0 01             	and    eax,0x1
c0017646:	74 08                	je     c0017650 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017648:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017650:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017654:	25 ff 00 00 00       	and    eax,0xff
c0017659:	83 e0 02             	and    eax,0x2
c001765c:	74 0a                	je     c0017668 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001765e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017666:	66 90                	xchg   ax,ax
c0017668:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001766c:	25 ff 00 00 00       	and    eax,0xff
c0017671:	83 e0 04             	and    eax,0x4
c0017674:	74 0a                	je     c0017680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017676:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001767e:	66 90                	xchg   ax,ax
c0017680:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017684:	25 ff 00 00 00       	and    eax,0xff
c0017689:	83 e0 08             	and    eax,0x8
c001768c:	74 0a                	je     c0017698 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001768e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017696:	66 90                	xchg   ax,ax
c0017698:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001769c:	25 ff 00 00 00       	and    eax,0xff
c00176a1:	83 e0 01             	and    eax,0x1
c00176a4:	74 0a                	je     c00176b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00176a6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00176ae:	66 90                	xchg   ax,ax
c00176b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176b4:	25 ff 00 00 00       	and    eax,0xff
c00176b9:	83 e0 02             	and    eax,0x2
c00176bc:	74 0a                	je     c00176c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00176be:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00176c6:	66 90                	xchg   ax,ax
c00176c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176cc:	25 ff 00 00 00       	and    eax,0xff
c00176d1:	83 e0 04             	and    eax,0x4
c00176d4:	74 0a                	je     c00176e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00176d6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00176de:	66 90                	xchg   ax,ax
c00176e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176e4:	25 ff 00 00 00       	and    eax,0xff
c00176e9:	83 e0 08             	and    eax,0x8
c00176ec:	74 0a                	je     c00176f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00176ee:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00176f6:	66 90                	xchg   ax,ax
c00176f8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00176ff:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017706:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001770d:	31 d2                	xor    edx,edx
c001770f:	88 c2                	mov    dl,al
c0017711:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017718:	25 ff 00 00 00       	and    eax,0xff
c001771d:	83 ec 04             	sub    esp,0x4
c0017720:	52                   	push   edx
c0017721:	50                   	push   eax
c0017722:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017726:	50                   	push   eax
c0017727:	e8 f1 d5 fe ff       	call   c0004d1d <f_chmod>
c001772c:	83 c4 10             	add    esp,0x10
c001772f:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017736:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001773d:	85 c0                	test   eax,eax
c001773f:	75 07                	jne    c0017748 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017741:	b8 00 00 00 00       	mov    eax,0x0
c0017746:	eb 08                	jmp    c0017750 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017748:	b8 01 00 00 00       	mov    eax,0x1
c001774d:	8d 76 00             	lea    esi,[esi+0x0]
c0017750:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017756:	c3                   	ret    
c0017757:	90                   	nop

c0017758 <FAT::rename(char const*, char const*)>:
c0017758:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001775e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017766:	74 0c                	je     c0017774 <FAT::rename(char const*, char const*)+0x1c>
c0017768:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017770:	75 0e                	jne    c0017780 <FAT::rename(char const*, char const*)+0x28>
c0017772:	66 90                	xchg   ax,ax
c0017774:	b8 04 00 00 00       	mov    eax,0x4
c0017779:	e9 9e 00 00 00       	jmp    c001781c <FAT::rename(char const*, char const*)+0xc4>
c001777e:	66 90                	xchg   ax,ax
c0017780:	83 ec 08             	sub    esp,0x8
c0017783:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001778a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017791:	50                   	push   eax
c0017792:	e8 89 8e fe ff       	call   c0000620 <strcpy>
c0017797:	83 c4 10             	add    esp,0x10
c001779a:	83 ec 08             	sub    esp,0x8
c001779d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00177a4:	50                   	push   eax
c00177a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177ac:	e8 7f fa ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c00177b1:	83 c4 10             	add    esp,0x10
c00177b4:	83 ec 08             	sub    esp,0x8
c00177b7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00177be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177c2:	50                   	push   eax
c00177c3:	e8 58 8e fe ff       	call   c0000620 <strcpy>
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	83 ec 08             	sub    esp,0x8
c00177ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177d2:	50                   	push   eax
c00177d3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177da:	e8 51 fa ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c00177df:	83 c4 10             	add    esp,0x10
c00177e2:	83 ec 08             	sub    esp,0x8
c00177e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00177e9:	50                   	push   eax
c00177ea:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177f1:	50                   	push   eax
c00177f2:	e8 70 d3 fe ff       	call   c0004b67 <f_rename>
c00177f7:	83 c4 10             	add    esp,0x10
c00177fa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017801:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017808:	85 c0                	test   eax,eax
c001780a:	75 08                	jne    c0017814 <FAT::rename(char const*, char const*)+0xbc>
c001780c:	b8 00 00 00 00       	mov    eax,0x0
c0017811:	eb 09                	jmp    c001781c <FAT::rename(char const*, char const*)+0xc4>
c0017813:	90                   	nop
c0017814:	b8 01 00 00 00       	mov    eax,0x1
c0017819:	8d 76 00             	lea    esi,[esi+0x0]
c001781c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017822:	c3                   	ret    
c0017823:	90                   	nop

c0017824 <FAT::mkdir(char const*)>:
c0017824:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001782a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017832:	75 08                	jne    c001783c <FAT::mkdir(char const*)+0x18>
c0017834:	b8 04 00 00 00       	mov    eax,0x4
c0017839:	eb 61                	jmp    c001789c <FAT::mkdir(char const*)+0x78>
c001783b:	90                   	nop
c001783c:	83 ec 08             	sub    esp,0x8
c001783f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017846:	8d 44 24 18          	lea    eax,[esp+0x18]
c001784a:	50                   	push   eax
c001784b:	e8 d0 8d fe ff       	call   c0000620 <strcpy>
c0017850:	83 c4 10             	add    esp,0x10
c0017853:	83 ec 08             	sub    esp,0x8
c0017856:	8d 44 24 14          	lea    eax,[esp+0x14]
c001785a:	50                   	push   eax
c001785b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017862:	e8 c9 f9 ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c0017867:	83 c4 10             	add    esp,0x10
c001786a:	83 ec 0c             	sub    esp,0xc
c001786d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017871:	50                   	push   eax
c0017872:	e8 55 d1 fe ff       	call   c00049cc <f_mkdir>
c0017877:	83 c4 10             	add    esp,0x10
c001787a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017881:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017888:	85 c0                	test   eax,eax
c001788a:	75 08                	jne    c0017894 <FAT::mkdir(char const*)+0x70>
c001788c:	b8 00 00 00 00       	mov    eax,0x0
c0017891:	eb 09                	jmp    c001789c <FAT::mkdir(char const*)+0x78>
c0017893:	90                   	nop
c0017894:	b8 01 00 00 00       	mov    eax,0x1
c0017899:	8d 76 00             	lea    esi,[esi+0x0]
c001789c:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178a2:	c3                   	ret    
c00178a3:	90                   	nop

c00178a4 <FAT::exists(char const*)>:
c00178a4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00178aa:	83 ec 08             	sub    esp,0x8
c00178ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178b4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178b8:	50                   	push   eax
c00178b9:	e8 62 8d fe ff       	call   c0000620 <strcpy>
c00178be:	83 c4 10             	add    esp,0x10
c00178c1:	83 ec 08             	sub    esp,0x8
c00178c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178c8:	50                   	push   eax
c00178c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00178d0:	e8 5b f9 ff ff       	call   c0017230 <FAT::fixFilepath(char*)>
c00178d5:	83 c4 10             	add    esp,0x10
c00178d8:	83 ec 08             	sub    esp,0x8
c00178db:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00178e2:	50                   	push   eax
c00178e3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00178e7:	50                   	push   eax
c00178e8:	e8 58 cd fe ff       	call   c0004645 <f_stat>
c00178ed:	83 c4 10             	add    esp,0x10
c00178f0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00178f7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00178fe:	85 c0                	test   eax,eax
c0017900:	75 06                	jne    c0017908 <FAT::exists(char const*)+0x64>
c0017902:	b0 01                	mov    al,0x1
c0017904:	eb 06                	jmp    c001790c <FAT::exists(char const*)+0x68>
c0017906:	66 90                	xchg   ax,ax
c0017908:	b0 00                	mov    al,0x0
c001790a:	66 90                	xchg   ax,ax
c001790c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017912:	c3                   	ret    
c0017913:	90                   	nop

c0017914 <isoReadDiscSectorHelper>:
c0017914:	83 ec 2c             	sub    esp,0x2c
c0017917:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001791b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001791f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017924:	83 e8 41             	sub    eax,0x41
c0017927:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c001792e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017932:	ba 00 00 00 00       	mov    edx,0x0
c0017937:	83 ec 0c             	sub    esp,0xc
c001793a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001793e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017942:	52                   	push   edx
c0017943:	50                   	push   eax
c0017944:	51                   	push   ecx
c0017945:	e8 86 59 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001794a:	83 c4 20             	add    esp,0x20
c001794d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017951:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017956:	74 0c                	je     c0017964 <isoReadDiscSectorHelper+0x50>
c0017958:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001795c:	c1 e0 0b             	shl    eax,0xb
c001795f:	eb 0b                	jmp    c001796c <isoReadDiscSectorHelper+0x58>
c0017961:	8d 76 00             	lea    esi,[esi+0x0]
c0017964:	b8 00 00 00 00       	mov    eax,0x0
c0017969:	8d 76 00             	lea    esi,[esi+0x0]
c001796c:	83 c4 2c             	add    esp,0x2c
c001796f:	c3                   	ret    

c0017970 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017970:	b8 08 00 00 00       	mov    eax,0x8
c0017975:	c3                   	ret    

c0017976 <ISO9660::getName()>:
c0017976:	b8 70 ef 01 c0       	mov    eax,0xc001ef70
c001797b:	c3                   	ret    

c001797c <ISO9660::closeDir(void*)>:
c001797c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017980:	8b 00                	mov    eax,DWORD PTR [eax]
c0017982:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017985:	90                   	nop

c0017986 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017986:	b8 01 00 00 00       	mov    eax,0x1
c001798b:	c3                   	ret    

c001798c <ISO9660::unlink(char const*)>:
c001798c:	b8 01 00 00 00       	mov    eax,0x1
c0017991:	c3                   	ret    

c0017992 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017992:	b8 03 00 00 00       	mov    eax,0x3
c0017997:	c3                   	ret    

c0017998 <ISO9660::rename(char const*, char const*)>:
c0017998:	b8 01 00 00 00       	mov    eax,0x1
c001799d:	c3                   	ret    

c001799e <ISO9660::mkdir(char const*)>:
c001799e:	b8 01 00 00 00       	mov    eax,0x1
c00179a3:	c3                   	ret    

c00179a4 <ISO9660::~ISO9660()>:
c00179a4:	83 ec 0c             	sub    esp,0xc
c00179a7:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c00179ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b0:	89 10                	mov    DWORD PTR [eax],edx
c00179b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b6:	83 ec 0c             	sub    esp,0xc
c00179b9:	50                   	push   eax
c00179ba:	e8 6f 35 ff ff       	call   c000af2e <Filesystem::~Filesystem()>
c00179bf:	83 c4 10             	add    esp,0x10
c00179c2:	90                   	nop
c00179c3:	83 c4 0c             	add    esp,0xc
c00179c6:	c3                   	ret    
c00179c7:	90                   	nop

c00179c8 <ISO9660::~ISO9660()>:
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	83 ec 0c             	sub    esp,0xc
c00179ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179d2:	e8 cd ff ff ff       	call   c00179a4 <ISO9660::~ISO9660()>
c00179d7:	83 c4 10             	add    esp,0x10
c00179da:	83 ec 08             	sub    esp,0x8
c00179dd:	6a 08                	push   0x8
c00179df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179e3:	e8 0a 31 ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c00179e8:	83 c4 10             	add    esp,0x10
c00179eb:	83 c4 0c             	add    esp,0xc
c00179ee:	c3                   	ret    
c00179ef:	90                   	nop

c00179f0 <ISO9660::exists(char const*)>:
c00179f0:	83 ec 18             	sub    esp,0x18
c00179f3:	68 8b ef 01 c0       	push   0xc001ef8b
c00179f8:	e8 ad dd ff ff       	call   c00157aa <HalPanic(char const*)>
c00179fd:	31 c0                	xor    eax,eax
c00179ff:	83 c4 1c             	add    esp,0x1c
c0017a02:	c3                   	ret    
c0017a03:	90                   	nop

c0017a04 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a04:	56                   	push   esi
c0017a05:	53                   	push   ebx
c0017a06:	53                   	push   ebx
c0017a07:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a0b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a0f:	85 db                	test   ebx,ebx
c0017a11:	74 72                	je     c0017a85 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a13:	85 f6                	test   esi,esi
c0017a15:	74 6e                	je     c0017a85 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a17:	ba 03 00 00 00       	mov    edx,0x3
c0017a1c:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a21:	75 67                	jne    c0017a8a <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a23:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a26:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017a2c:	74 34                	je     c0017a62 <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017a2e:	83 ec 0c             	sub    esp,0xc
c0017a31:	50                   	push   eax
c0017a32:	e8 5b f2 fe ff       	call   c0006c92 <init_percd>
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	ba 0b 00 00 00       	mov    edx,0xb
c0017a3f:	40                   	inc    eax
c0017a40:	74 48                	je     c0017a8a <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a42:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017a49:	74 10                	je     c0017a5b <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017a4b:	83 ec 0c             	sub    esp,0xc
c0017a4e:	68 a9 ef 01 c0       	push   0xc001efa9
c0017a53:	e8 52 dd ff ff       	call   c00157aa <HalPanic(char const*)>
c0017a58:	83 c4 10             	add    esp,0x10
c0017a5b:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a5d:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017a62:	83 c3 03             	add    ebx,0x3
c0017a65:	51                   	push   ecx
c0017a66:	51                   	push   ecx
c0017a67:	6a 00                	push   0x0
c0017a69:	53                   	push   ebx
c0017a6a:	e8 93 ea fe ff       	call   c0006502 <iso_open>
c0017a6f:	83 c4 10             	add    esp,0x10
c0017a72:	ba 01 00 00 00       	mov    edx,0x1
c0017a77:	83 f8 ff             	cmp    eax,0xffffffff
c0017a7a:	74 0e                	je     c0017a8a <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a7c:	83 c0 64             	add    eax,0x64
c0017a7f:	31 d2                	xor    edx,edx
c0017a81:	89 06                	mov    DWORD PTR [esi],eax
c0017a83:	eb 05                	jmp    c0017a8a <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a85:	ba 04 00 00 00       	mov    edx,0x4
c0017a8a:	89 d0                	mov    eax,edx
c0017a8c:	5a                   	pop    edx
c0017a8d:	5b                   	pop    ebx
c0017a8e:	5e                   	pop    esi
c0017a8f:	c3                   	ret    

c0017a90 <ISO9660::openDir(char const*, void**)>:
c0017a90:	56                   	push   esi
c0017a91:	53                   	push   ebx
c0017a92:	53                   	push   ebx
c0017a93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a97:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a9b:	85 db                	test   ebx,ebx
c0017a9d:	74 66                	je     c0017b05 <ISO9660::openDir(char const*, void**)+0x75>
c0017a9f:	85 f6                	test   esi,esi
c0017aa1:	74 62                	je     c0017b05 <ISO9660::openDir(char const*, void**)+0x75>
c0017aa3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017aa6:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017aac:	74 34                	je     c0017ae2 <ISO9660::openDir(char const*, void**)+0x52>
c0017aae:	83 ec 0c             	sub    esp,0xc
c0017ab1:	50                   	push   eax
c0017ab2:	e8 db f1 fe ff       	call   c0006c92 <init_percd>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	ba 0b 00 00 00       	mov    edx,0xb
c0017abf:	40                   	inc    eax
c0017ac0:	74 48                	je     c0017b0a <ISO9660::openDir(char const*, void**)+0x7a>
c0017ac2:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017ac9:	74 10                	je     c0017adb <ISO9660::openDir(char const*, void**)+0x4b>
c0017acb:	83 ec 0c             	sub    esp,0xc
c0017ace:	68 a9 ef 01 c0       	push   0xc001efa9
c0017ad3:	e8 d2 dc ff ff       	call   c00157aa <HalPanic(char const*)>
c0017ad8:	83 c4 10             	add    esp,0x10
c0017adb:	8a 03                	mov    al,BYTE PTR [ebx]
c0017add:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017ae2:	83 c3 03             	add    ebx,0x3
c0017ae5:	51                   	push   ecx
c0017ae6:	51                   	push   ecx
c0017ae7:	6a 01                	push   0x1
c0017ae9:	53                   	push   ebx
c0017aea:	e8 13 ea fe ff       	call   c0006502 <iso_open>
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	ba 01 00 00 00       	mov    edx,0x1
c0017af7:	83 f8 ff             	cmp    eax,0xffffffff
c0017afa:	74 0e                	je     c0017b0a <ISO9660::openDir(char const*, void**)+0x7a>
c0017afc:	83 c0 64             	add    eax,0x64
c0017aff:	31 d2                	xor    edx,edx
c0017b01:	89 06                	mov    DWORD PTR [esi],eax
c0017b03:	eb 05                	jmp    c0017b0a <ISO9660::openDir(char const*, void**)+0x7a>
c0017b05:	ba 04 00 00 00       	mov    edx,0x4
c0017b0a:	89 d0                	mov    eax,edx
c0017b0c:	5a                   	pop    edx
c0017b0d:	5b                   	pop    ebx
c0017b0e:	5e                   	pop    esi
c0017b0f:	c3                   	ret    

c0017b10 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b10:	53                   	push   ebx
c0017b11:	83 ec 08             	sub    esp,0x8
c0017b14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b1c:	85 c0                	test   eax,eax
c0017b1e:	74 25                	je     c0017b45 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b20:	85 db                	test   ebx,ebx
c0017b22:	74 21                	je     c0017b45 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b24:	83 e8 64             	sub    eax,0x64
c0017b27:	52                   	push   edx
c0017b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b30:	50                   	push   eax
c0017b31:	e8 cc ea fe ff       	call   c0006602 <iso_read>
c0017b36:	83 c4 10             	add    esp,0x10
c0017b39:	89 03                	mov    DWORD PTR [ebx],eax
c0017b3b:	09 d0                	or     eax,edx
c0017b3d:	0f 94 c0             	sete   al
c0017b40:	0f b6 c0             	movzx  eax,al
c0017b43:	eb 05                	jmp    c0017b4a <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b45:	b8 04 00 00 00       	mov    eax,0x4
c0017b4a:	83 c4 08             	add    esp,0x8
c0017b4d:	5b                   	pop    ebx
c0017b4e:	c3                   	ret    
c0017b4f:	90                   	nop

c0017b50 <ISO9660::seek(void*, unsigned long long)>:
c0017b50:	57                   	push   edi
c0017b51:	56                   	push   esi
c0017b52:	b8 04 00 00 00       	mov    eax,0x4
c0017b57:	51                   	push   ecx
c0017b58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b5c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b60:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017b64:	85 d2                	test   edx,edx
c0017b66:	74 1c                	je     c0017b84 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017b68:	6a 00                	push   0x0
c0017b6a:	83 ea 64             	sub    edx,0x64
c0017b6d:	57                   	push   edi
c0017b6e:	56                   	push   esi
c0017b6f:	52                   	push   edx
c0017b70:	e8 8b ec fe ff       	call   c0006800 <iso_seek>
c0017b75:	83 c4 10             	add    esp,0x10
c0017b78:	31 f0                	xor    eax,esi
c0017b7a:	31 fa                	xor    edx,edi
c0017b7c:	09 d0                	or     eax,edx
c0017b7e:	0f 95 c0             	setne  al
c0017b81:	0f b6 c0             	movzx  eax,al
c0017b84:	5a                   	pop    edx
c0017b85:	5e                   	pop    esi
c0017b86:	5f                   	pop    edi
c0017b87:	c3                   	ret    

c0017b88 <ISO9660::tell(void*, unsigned long long*)>:
c0017b88:	53                   	push   ebx
c0017b89:	83 ec 08             	sub    esp,0x8
c0017b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b90:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b94:	85 c0                	test   eax,eax
c0017b96:	74 1c                	je     c0017bb4 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b98:	85 db                	test   ebx,ebx
c0017b9a:	74 18                	je     c0017bb4 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b9c:	83 ec 0c             	sub    esp,0xc
c0017b9f:	83 e8 64             	sub    eax,0x64
c0017ba2:	50                   	push   eax
c0017ba3:	e8 36 ed fe ff       	call   c00068de <iso_tell>
c0017ba8:	83 c4 10             	add    esp,0x10
c0017bab:	89 03                	mov    DWORD PTR [ebx],eax
c0017bad:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017bb0:	31 c0                	xor    eax,eax
c0017bb2:	eb 05                	jmp    c0017bb9 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017bb4:	b8 04 00 00 00       	mov    eax,0x4
c0017bb9:	83 c4 08             	add    esp,0x8
c0017bbc:	5b                   	pop    ebx
c0017bbd:	c3                   	ret    

c0017bbe <ISO9660::stat(void*, unsigned long long*)>:
c0017bbe:	53                   	push   ebx
c0017bbf:	83 ec 08             	sub    esp,0x8
c0017bc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bc6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bca:	85 c0                	test   eax,eax
c0017bcc:	74 20                	je     c0017bee <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017bce:	85 db                	test   ebx,ebx
c0017bd0:	74 1c                	je     c0017bee <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017bd2:	83 ec 0c             	sub    esp,0xc
c0017bd5:	83 e8 64             	sub    eax,0x64
c0017bd8:	50                   	push   eax
c0017bd9:	e8 5d ed fe ff       	call   c000693b <iso_total>
c0017bde:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017be5:	89 03                	mov    DWORD PTR [ebx],eax
c0017be7:	83 c4 10             	add    esp,0x10
c0017bea:	31 c0                	xor    eax,eax
c0017bec:	eb 05                	jmp    c0017bf3 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017bee:	b8 04 00 00 00       	mov    eax,0x4
c0017bf3:	83 c4 08             	add    esp,0x8
c0017bf6:	5b                   	pop    ebx
c0017bf7:	c3                   	ret    

c0017bf8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017bf8:	55                   	push   ebp
c0017bf9:	57                   	push   edi
c0017bfa:	56                   	push   esi
c0017bfb:	53                   	push   ebx
c0017bfc:	83 ec 0c             	sub    esp,0xc
c0017bff:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c03:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c07:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c0b:	85 ff                	test   edi,edi
c0017c0d:	0f 94 c2             	sete   dl
c0017c10:	85 f6                	test   esi,esi
c0017c12:	0f 94 c0             	sete   al
c0017c15:	08 c2                	or     dl,al
c0017c17:	0f 85 b7 00 00 00    	jne    c0017cd4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c1d:	85 db                	test   ebx,ebx
c0017c1f:	0f 84 af 00 00 00    	je     c0017cd4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c25:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c28:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c2e:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c35:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c38:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017c3e:	74 38                	je     c0017c78 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	50                   	push   eax
c0017c44:	e8 49 f0 fe ff       	call   c0006c92 <init_percd>
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	ba 0b 00 00 00       	mov    edx,0xb
c0017c51:	40                   	inc    eax
c0017c52:	0f 84 81 00 00 00    	je     c0017cd9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017c58:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017c5f:	74 10                	je     c0017c71 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c0017c61:	83 ec 0c             	sub    esp,0xc
c0017c64:	68 a9 ef 01 c0       	push   0xc001efa9
c0017c69:	e8 3c db ff ff       	call   c00157aa <HalPanic(char const*)>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c73:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017c78:	83 c3 03             	add    ebx,0x3
c0017c7b:	55                   	push   ebp
c0017c7c:	55                   	push   ebp
c0017c7d:	6a 00                	push   0x0
c0017c7f:	53                   	push   ebx
c0017c80:	e8 7d e8 fe ff       	call   c0006502 <iso_open>
c0017c85:	83 c4 10             	add    esp,0x10
c0017c88:	89 c5                	mov    ebp,eax
c0017c8a:	83 f8 ff             	cmp    eax,0xffffffff
c0017c8d:	75 0f                	jne    c0017c9e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017c8f:	56                   	push   esi
c0017c90:	56                   	push   esi
c0017c91:	6a 01                	push   0x1
c0017c93:	53                   	push   ebx
c0017c94:	e8 69 e8 fe ff       	call   c0006502 <iso_open>
c0017c99:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c9c:	eb 2f                	jmp    c0017ccd <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017c9e:	83 ec 0c             	sub    esp,0xc
c0017ca1:	50                   	push   eax
c0017ca2:	e8 94 ec fe ff       	call   c000693b <iso_total>
c0017ca7:	5a                   	pop    edx
c0017ca8:	59                   	pop    ecx
c0017ca9:	50                   	push   eax
c0017caa:	68 b9 ef 01 c0       	push   0xc001efb9
c0017caf:	e8 34 2f ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0017cb4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017cb7:	e8 7f ec fe ff       	call   c000693b <iso_total>
c0017cbc:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cc3:	89 06                	mov    DWORD PTR [esi],eax
c0017cc5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017cc8:	e8 15 e9 fe ff       	call   c00065e2 <iso_close>
c0017ccd:	83 c4 10             	add    esp,0x10
c0017cd0:	31 d2                	xor    edx,edx
c0017cd2:	eb 05                	jmp    c0017cd9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017cd4:	ba 04 00 00 00       	mov    edx,0x4
c0017cd9:	83 c4 0c             	add    esp,0xc
c0017cdc:	89 d0                	mov    eax,edx
c0017cde:	5b                   	pop    ebx
c0017cdf:	5e                   	pop    esi
c0017ce0:	5f                   	pop    edi
c0017ce1:	5d                   	pop    ebp
c0017ce2:	c3                   	ret    
c0017ce3:	90                   	nop

c0017ce4 <ISO9660::close(void*)>:
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	b8 04 00 00 00       	mov    eax,0x4
c0017cec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cf0:	85 d2                	test   edx,edx
c0017cf2:	74 11                	je     c0017d05 <ISO9660::close(void*)+0x21>
c0017cf4:	83 ec 0c             	sub    esp,0xc
c0017cf7:	83 ea 64             	sub    edx,0x64
c0017cfa:	52                   	push   edx
c0017cfb:	e8 e2 e8 fe ff       	call   c00065e2 <iso_close>
c0017d00:	83 c4 10             	add    esp,0x10
c0017d03:	31 c0                	xor    eax,eax
c0017d05:	83 c4 0c             	add    esp,0xc
c0017d08:	c3                   	ret    
c0017d09:	90                   	nop

c0017d0a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d0a:	55                   	push   ebp
c0017d0b:	57                   	push   edi
c0017d0c:	56                   	push   esi
c0017d0d:	53                   	push   ebx
c0017d0e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d14:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d1b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d22:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d29:	85 c0                	test   eax,eax
c0017d2b:	0f 84 96 00 00 00    	je     c0017dc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d31:	85 db                	test   ebx,ebx
c0017d33:	0f 84 8e 00 00 00    	je     c0017dc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d39:	83 ec 0c             	sub    esp,0xc
c0017d3c:	83 e8 64             	sub    eax,0x64
c0017d3f:	50                   	push   eax
c0017d40:	e8 73 ec fe ff       	call   c00069b8 <iso_readdir>
c0017d45:	83 c4 10             	add    esp,0x10
c0017d48:	89 c6                	mov    esi,eax
c0017d4a:	85 c0                	test   eax,eax
c0017d4c:	75 18                	jne    c0017d66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017d4e:	52                   	push   edx
c0017d4f:	68 10 01 00 00       	push   0x110
c0017d54:	6a 00                	push   0x0
c0017d56:	57                   	push   edi
c0017d57:	e8 94 87 fe ff       	call   c00004f0 <memset>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	b8 01 00 00 00       	mov    eax,0x1
c0017d64:	eb 66                	jmp    c0017dcc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d66:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d6c:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d6f:	83 ec 0c             	sub    esp,0xc
c0017d72:	55                   	push   ebp
c0017d73:	e8 e8 87 fe ff       	call   c0000560 <strlen>
c0017d78:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d84:	83 c4 10             	add    esp,0x10
c0017d87:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017d8b:	75 0a                	jne    c0017d97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017d8d:	b8 02 00 00 00       	mov    eax,0x2
c0017d92:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017d95:	74 05                	je     c0017d9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017d97:	b8 01 00 00 00       	mov    eax,0x1
c0017d9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017da0:	50                   	push   eax
c0017da1:	50                   	push   eax
c0017da2:	55                   	push   ebp
c0017da3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017da7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017dab:	50                   	push   eax
c0017dac:	e8 6f 88 fe ff       	call   c0000620 <strcpy>
c0017db1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017db8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dba:	31 c0                	xor    eax,eax
c0017dbc:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017dc2:	83 c4 10             	add    esp,0x10
c0017dc5:	eb 05                	jmp    c0017dcc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017dc7:	b8 04 00 00 00       	mov    eax,0x4
c0017dcc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017dd2:	5b                   	pop    ebx
c0017dd3:	5e                   	pop    esi
c0017dd4:	5f                   	pop    edi
c0017dd5:	5d                   	pop    ebp
c0017dd6:	c3                   	ret    

c0017dd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017dd7:	57                   	push   edi
c0017dd8:	56                   	push   esi
c0017dd9:	53                   	push   ebx
c0017dda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017dde:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017de2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017de6:	39 35 c4 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fc4,esi
c0017dec:	75 08                	jne    c0017df6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017dee:	38 1d 14 f9 01 c0    	cmp    BYTE PTR ds:0xc001f914,bl
c0017df4:	74 59                	je     c0017e4f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017df6:	83 ec 0c             	sub    esp,0xc
c0017df9:	31 d2                	xor    edx,edx
c0017dfb:	68 e0 3f 02 c0       	push   0xc0023fe0
c0017e00:	0f be c3             	movsx  eax,bl
c0017e03:	6a 01                	push   0x1
c0017e05:	52                   	push   edx
c0017e06:	56                   	push   esi
c0017e07:	ff 34 85 9c 2d 02 c0 	push   DWORD PTR [eax*4-0x3ffdd264]
c0017e0e:	e8 bd 54 ff ff       	call   c000d2d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e13:	83 c4 20             	add    esp,0x20
c0017e16:	85 c0                	test   eax,eax
c0017e18:	75 0e                	jne    c0017e28 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e1a:	89 35 c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,esi
c0017e20:	88 1d 14 f9 01 c0    	mov    BYTE PTR ds:0xc001f914,bl
c0017e26:	eb 27                	jmp    c0017e4f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e28:	83 ec 0c             	sub    esp,0xc
c0017e2b:	68 cb ef 01 c0       	push   0xc001efcb
c0017e30:	e8 b3 2d ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0017e35:	83 c4 0c             	add    esp,0xc
c0017e38:	68 00 08 00 00       	push   0x800
c0017e3d:	6a 00                	push   0x0
c0017e3f:	57                   	push   edi
c0017e40:	e8 ab 86 fe ff       	call   c00004f0 <memset>
c0017e45:	83 c4 10             	add    esp,0x10
c0017e48:	b8 01 00 00 00       	mov    eax,0x1
c0017e4d:	eb 0e                	jmp    c0017e5d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017e4f:	be e0 3f 02 c0       	mov    esi,0xc0023fe0
c0017e54:	b9 00 08 00 00       	mov    ecx,0x800
c0017e59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e5b:	31 c0                	xor    eax,eax
c0017e5d:	5b                   	pop    ebx
c0017e5e:	5e                   	pop    esi
c0017e5f:	5f                   	pop    edi
c0017e60:	c3                   	ret    
c0017e61:	90                   	nop

c0017e62 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e62:	53                   	push   ebx
c0017e63:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e69:	c7 05 c4 3f 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023fc4,0xdeadbeef
c0017e73:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e7a:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e7d:	0f be db             	movsx  ebx,bl
c0017e80:	53                   	push   ebx
c0017e81:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e85:	50                   	push   eax
c0017e86:	6a 10                	push   0x10
c0017e88:	e8 4a ff ff ff       	call   c0017dd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e8d:	83 c4 10             	add    esp,0x10
c0017e90:	31 d2                	xor    edx,edx
c0017e92:	85 c0                	test   eax,eax
c0017e94:	75 33                	jne    c0017ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e96:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017e9b:	75 2c                	jne    c0017ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e9d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017ea2:	75 25                	jne    c0017ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ea4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017ea9:	75 1e                	jne    c0017ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eab:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017eb0:	75 17                	jne    c0017ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017eb7:	75 10                	jne    c0017ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	53                   	push   ebx
c0017ebd:	e8 d0 ed fe ff       	call   c0006c92 <init_percd>
c0017ec2:	83 c4 10             	add    esp,0x10
c0017ec5:	40                   	inc    eax
c0017ec6:	0f 95 c2             	setne  dl
c0017ec9:	88 d0                	mov    al,dl
c0017ecb:	81 c4 08 08 00 00    	add    esp,0x808
c0017ed1:	5b                   	pop    ebx
c0017ed2:	c3                   	ret    
c0017ed3:	90                   	nop

c0017ed4 <ISO9660::ISO9660()>:
c0017ed4:	83 ec 0c             	sub    esp,0xc
c0017ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017edb:	83 ec 0c             	sub    esp,0xc
c0017ede:	50                   	push   eax
c0017edf:	e8 26 30 ff ff       	call   c000af0a <Filesystem::Filesystem()>
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c0017eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ef0:	89 10                	mov    DWORD PTR [eax],edx
c0017ef2:	e8 ab ee fe ff       	call   c0006da2 <fs_iso9660_init>
c0017ef7:	90                   	nop
c0017ef8:	83 c4 0c             	add    esp,0xc
c0017efb:	c3                   	ret    

c0017efc <SoundCard::beginPlayback()>:
c0017efc:	c7 44 24 04 50 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f050
c0017f04:	e9 ca 87 ff ff       	jmp    c00106d3 <Krnl::panic(char const*)>
c0017f09:	90                   	nop

c0017f0a <SoundCard::stopPlayback()>:
c0017f0a:	c7 44 24 04 50 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f050
c0017f12:	e9 bc 87 ff ff       	jmp    c00106d3 <Krnl::panic(char const*)>
c0017f17:	90                   	nop

c0017f18 <SoundCard::SoundCard(char const*)>:
c0017f18:	83 ec 1c             	sub    esp,0x1c
c0017f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1f:	83 ec 08             	sub    esp,0x8
c0017f22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f26:	50                   	push   eax
c0017f27:	e8 94 42 ff ff       	call   c000c1c0 <Device::Device(char const*)>
c0017f2c:	83 c4 10             	add    esp,0x10
c0017f2f:	ba 9c f0 01 c0       	mov    edx,0xc001f09c
c0017f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f38:	89 10                	mov    DWORD PTR [eax],edx
c0017f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f49:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f57:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f65:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f73:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f85:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f8a:	7f 19                	jg     c0017fa5 <SoundCard::SoundCard(char const*)+0x8d>
c0017f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f94:	83 c2 54             	add    edx,0x54
c0017f97:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017f9f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fa3:	eb e0                	jmp    c0017f85 <SoundCard::SoundCard(char const*)+0x6d>
c0017fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa9:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fb0:	90                   	nop
c0017fb1:	83 c4 1c             	add    esp,0x1c
c0017fb4:	c3                   	ret    
c0017fb5:	90                   	nop

c0017fb6 <SoundCard::~SoundCard()>:
c0017fb6:	83 ec 0c             	sub    esp,0xc
c0017fb9:	ba 9c f0 01 c0       	mov    edx,0xc001f09c
c0017fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc2:	89 10                	mov    DWORD PTR [eax],edx
c0017fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc8:	83 ec 0c             	sub    esp,0xc
c0017fcb:	50                   	push   eax
c0017fcc:	e8 59 3f ff ff       	call   c000bf2a <Device::~Device()>
c0017fd1:	83 c4 10             	add    esp,0x10
c0017fd4:	90                   	nop
c0017fd5:	83 c4 0c             	add    esp,0xc
c0017fd8:	c3                   	ret    
c0017fd9:	90                   	nop

c0017fda <SoundCard::~SoundCard()>:
c0017fda:	83 ec 0c             	sub    esp,0xc
c0017fdd:	83 ec 0c             	sub    esp,0xc
c0017fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fe4:	e8 cd ff ff ff       	call   c0017fb6 <SoundCard::~SoundCard()>
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	83 ec 08             	sub    esp,0x8
c0017fef:	68 e8 01 00 00       	push   0x1e8
c0017ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ff8:	e8 f5 2a ff ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c0017ffd:	83 c4 10             	add    esp,0x10
c0018000:	83 c4 0c             	add    esp,0xc
c0018003:	c3                   	ret    

c0018004 <SoundCard::configureRates(int, int, int)>:
c0018004:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018008:	31 c0                	xor    eax,eax
c001800a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018011:	75 20                	jne    c0018033 <SoundCard::configureRates(int, int, int)+0x2f>
c0018013:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018017:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001801d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018021:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018031:	b0 01                	mov    al,0x1
c0018033:	c3                   	ret    

c0018034 <SoundCard::getSamples16(int, short*)>:
c0018034:	55                   	push   ebp
c0018035:	57                   	push   edi
c0018036:	31 ff                	xor    edi,edi
c0018038:	56                   	push   esi
c0018039:	53                   	push   ebx
c001803a:	31 db                	xor    ebx,ebx
c001803c:	83 ec 10             	sub    esp,0x10
c001803f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018043:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018047:	8d 04 36             	lea    eax,[esi+esi*1]
c001804a:	50                   	push   eax
c001804b:	6a 00                	push   0x0
c001804d:	55                   	push   ebp
c001804e:	e8 9d 84 fe ff       	call   c00004f0 <memset>
c0018053:	83 c4 10             	add    esp,0x10
c0018056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001805a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018061:	85 c0                	test   eax,eax
c0018063:	74 1b                	je     c0018080 <SoundCard::getSamples16(int, short*)+0x4c>
c0018065:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018069:	75 15                	jne    c0018080 <SoundCard::getSamples16(int, short*)+0x4c>
c001806b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001806f:	55                   	push   ebp
c0018070:	56                   	push   esi
c0018071:	50                   	push   eax
c0018072:	e8 ed 02 00 00       	call   c0018364 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018077:	83 c4 10             	add    esp,0x10
c001807a:	39 c7                	cmp    edi,eax
c001807c:	7d 02                	jge    c0018080 <SoundCard::getSamples16(int, short*)+0x4c>
c001807e:	89 c7                	mov    edi,eax
c0018080:	43                   	inc    ebx
c0018081:	83 fb 20             	cmp    ebx,0x20
c0018084:	75 d0                	jne    c0018056 <SoundCard::getSamples16(int, short*)+0x22>
c0018086:	83 c4 0c             	add    esp,0xc
c0018089:	89 f8                	mov    eax,edi
c001808b:	5b                   	pop    ebx
c001808c:	5e                   	pop    esi
c001808d:	5f                   	pop    edi
c001808e:	5d                   	pop    ebp
c001808f:	c3                   	ret    

c0018090 <SoundCard::getSamples32(int, int*)>:
c0018090:	55                   	push   ebp
c0018091:	57                   	push   edi
c0018092:	31 ff                	xor    edi,edi
c0018094:	56                   	push   esi
c0018095:	31 f6                	xor    esi,esi
c0018097:	53                   	push   ebx
c0018098:	83 ec 10             	sub    esp,0x10
c001809b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180a3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180a7:	c1 e0 02             	shl    eax,0x2
c00180aa:	50                   	push   eax
c00180ab:	6a 00                	push   0x0
c00180ad:	55                   	push   ebp
c00180ae:	e8 3d 84 fe ff       	call   c00004f0 <memset>
c00180b3:	83 c4 10             	add    esp,0x10
c00180b6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00180bd:	85 c0                	test   eax,eax
c00180bf:	74 1b                	je     c00180dc <SoundCard::getSamples32(int, int*)+0x4c>
c00180c1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180c5:	75 15                	jne    c00180dc <SoundCard::getSamples32(int, int*)+0x4c>
c00180c7:	53                   	push   ebx
c00180c8:	55                   	push   ebp
c00180c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180cd:	50                   	push   eax
c00180ce:	e8 55 03 00 00       	call   c0018428 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00180d3:	83 c4 10             	add    esp,0x10
c00180d6:	39 c6                	cmp    esi,eax
c00180d8:	7d 02                	jge    c00180dc <SoundCard::getSamples32(int, int*)+0x4c>
c00180da:	89 c6                	mov    esi,eax
c00180dc:	47                   	inc    edi
c00180dd:	83 ff 20             	cmp    edi,0x20
c00180e0:	75 d4                	jne    c00180b6 <SoundCard::getSamples32(int, int*)+0x26>
c00180e2:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00180e8:	85 f6                	test   esi,esi
c00180ea:	75 0f                	jne    c00180fb <SoundCard::getSamples32(int, int*)+0x6b>
c00180ec:	84 c0                	test   al,al
c00180ee:	74 1b                	je     c001810b <SoundCard::getSamples32(int, int*)+0x7b>
c00180f0:	83 ec 0c             	sub    esp,0xc
c00180f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180f5:	53                   	push   ebx
c00180f6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00180f9:	eb 0d                	jmp    c0018108 <SoundCard::getSamples32(int, int*)+0x78>
c00180fb:	84 c0                	test   al,al
c00180fd:	75 0c                	jne    c001810b <SoundCard::getSamples32(int, int*)+0x7b>
c00180ff:	83 ec 0c             	sub    esp,0xc
c0018102:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018104:	53                   	push   ebx
c0018105:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018108:	83 c4 10             	add    esp,0x10
c001810b:	83 c4 0c             	add    esp,0xc
c001810e:	89 f0                	mov    eax,esi
c0018110:	5b                   	pop    ebx
c0018111:	5e                   	pop    esi
c0018112:	5f                   	pop    edi
c0018113:	5d                   	pop    ebp
c0018114:	c3                   	ret    
c0018115:	90                   	nop

c0018116 <SoundCard::addChannel(SoundPort*)>:
c0018116:	83 ec 0c             	sub    esp,0xc
c0018119:	31 c0                	xor    eax,eax
c001811b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001811f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018127:	74 1b                	je     c0018144 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018129:	40                   	inc    eax
c001812a:	83 f8 20             	cmp    eax,0x20
c001812d:	75 f0                	jne    c001811f <SoundCard::addChannel(SoundPort*)+0x9>
c001812f:	83 ec 0c             	sub    esp,0xc
c0018132:	68 75 f0 01 c0       	push   0xc001f075
c0018137:	e8 97 85 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001813c:	83 c4 10             	add    esp,0x10
c001813f:	83 c8 ff             	or     eax,0xffffffff
c0018142:	eb 0b                	jmp    c001814f <SoundCard::addChannel(SoundPort*)+0x39>
c0018144:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018148:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001814f:	83 c4 0c             	add    esp,0xc
c0018152:	c3                   	ret    
c0018153:	90                   	nop

c0018154 <SoundCard::removeChannel(int)>:
c0018154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018158:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001815c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018167:	c3                   	ret    

c0018168 <SoundPort::SoundPort(int, int, int, int)>:
c0018168:	83 ec 0c             	sub    esp,0xc
c001816b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001817e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018182:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018186:	89 10                	mov    DWORD PTR [eax],edx
c0018188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018190:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018197:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001819b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001819e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181a3:	75 13                	jne    c00181b8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00181ab:	05 a0 0f 00 00       	add    eax,0xfa0
c00181b0:	01 c0                	add    eax,eax
c00181b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181b6:	66 90                	xchg   ax,ax
c00181b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00181ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181d5:	c1 e0 02             	shl    eax,0x2
c00181d8:	83 ec 0c             	sub    esp,0xc
c00181db:	50                   	push   eax
c00181dc:	e8 78 fc fe ff       	call   c0007e59 <malloc>
c00181e1:	83 c4 10             	add    esp,0x10
c00181e4:	89 c2                	mov    edx,eax
c00181e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00181ed:	90                   	nop
c00181ee:	83 c4 0c             	add    esp,0xc
c00181f1:	c3                   	ret    
c00181f2:	66 90                	xchg   ax,ax

c00181f4 <SoundPort::~SoundPort()>:
c00181f4:	83 ec 0c             	sub    esp,0xc
c00181f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181fe:	85 c0                	test   eax,eax
c0018200:	74 1e                	je     c0018220 <SoundPort::~SoundPort()+0x2c>
c0018202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018206:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018209:	83 ec 0c             	sub    esp,0xc
c001820c:	50                   	push   eax
c001820d:	e8 57 fc fe ff       	call   c0007e69 <free>
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018219:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018220:	90                   	nop
c0018221:	83 c4 0c             	add    esp,0xc
c0018224:	c3                   	ret    
c0018225:	90                   	nop
c0018226:	66 90                	xchg   ax,ax

c0018228 <SoundPort::unpause()>:
c0018228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001822c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018230:	c3                   	ret    
c0018231:	90                   	nop
c0018232:	66 90                	xchg   ax,ax

c0018234 <SoundPort::pause()>:
c0018234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018238:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001823c:	c3                   	ret    
c001823d:	90                   	nop
c001823e:	66 90                	xchg   ax,ax

c0018240 <SoundPort::getBufferUsed()>:
c0018240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018244:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018247:	c3                   	ret    

c0018248 <SoundPort::getBufferSize()>:
c0018248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001824c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001824f:	c3                   	ret    

c0018250 <SoundPort::buffer16(short*, int)>:
c0018250:	55                   	push   ebp
c0018251:	57                   	push   edi
c0018252:	56                   	push   esi
c0018253:	53                   	push   ebx
c0018254:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018258:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001825c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001825f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018262:	74 68                	je     c00182cc <SoundPort::buffer16(short*, int)+0x7c>
c0018264:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018268:	85 c9                	test   ecx,ecx
c001826a:	7e 60                	jle    c00182cc <SoundPort::buffer16(short*, int)+0x7c>
c001826c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018270:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018273:	c1 e1 0f             	shl    ecx,0xf
c0018276:	8d 70 01             	lea    esi,[eax+0x1]
c0018279:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001827c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001827f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018282:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018285:	74 4d                	je     c00182d4 <SoundPort::buffer16(short*, int)+0x84>
c0018287:	31 f6                	xor    esi,esi
c0018289:	eb 21                	jmp    c00182ac <SoundPort::buffer16(short*, int)+0x5c>
c001828b:	90                   	nop
c001828c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018291:	8d 79 01             	lea    edi,[ecx+0x1]
c0018294:	c1 e3 0f             	shl    ebx,0xf
c0018297:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001829a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001829d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182a0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182a3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182a6:	74 1c                	je     c00182c4 <SoundPort::buffer16(short*, int)+0x74>
c00182a8:	89 c6                	mov    esi,eax
c00182aa:	66 90                	xchg   ax,ax
c00182ac:	8d 46 01             	lea    eax,[esi+0x1]
c00182af:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182b3:	75 d7                	jne    c001828c <SoundPort::buffer16(short*, int)+0x3c>
c00182b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182b9:	8d 76 00             	lea    esi,[esi+0x0]
c00182bc:	5b                   	pop    ebx
c00182bd:	5e                   	pop    esi
c00182be:	5f                   	pop    edi
c00182bf:	5d                   	pop    ebp
c00182c0:	c3                   	ret    
c00182c1:	8d 76 00             	lea    esi,[esi+0x0]
c00182c4:	5b                   	pop    ebx
c00182c5:	8d 46 02             	lea    eax,[esi+0x2]
c00182c8:	5e                   	pop    esi
c00182c9:	5f                   	pop    edi
c00182ca:	5d                   	pop    ebp
c00182cb:	c3                   	ret    
c00182cc:	5b                   	pop    ebx
c00182cd:	31 c0                	xor    eax,eax
c00182cf:	5e                   	pop    esi
c00182d0:	5f                   	pop    edi
c00182d1:	5d                   	pop    ebp
c00182d2:	c3                   	ret    
c00182d3:	90                   	nop
c00182d4:	b8 01 00 00 00       	mov    eax,0x1
c00182d9:	eb e1                	jmp    c00182bc <SoundPort::buffer16(short*, int)+0x6c>
c00182db:	90                   	nop

c00182dc <SoundPort::buffer32(int*, int)>:
c00182dc:	55                   	push   ebp
c00182dd:	57                   	push   edi
c00182de:	56                   	push   esi
c00182df:	53                   	push   ebx
c00182e0:	51                   	push   ecx
c00182e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182e9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182ec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00182f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00182f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182f6:	74 5c                	je     c0018354 <SoundPort::buffer32(int*, int)+0x78>
c00182f8:	85 c0                	test   eax,eax
c00182fa:	7e 58                	jle    c0018354 <SoundPort::buffer32(int*, int)+0x78>
c00182fc:	8d 71 01             	lea    esi,[ecx+0x1]
c00182ff:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018302:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018305:	8b 37                	mov    esi,DWORD PTR [edi]
c0018307:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001830a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001830d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018310:	74 4a                	je     c001835c <SoundPort::buffer32(int*, int)+0x80>
c0018312:	31 f6                	xor    esi,esi
c0018314:	eb 1e                	jmp    c0018334 <SoundPort::buffer32(int*, int)+0x58>
c0018316:	66 90                	xchg   ax,ax
c0018318:	8d 69 01             	lea    ebp,[ecx+0x1]
c001831b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001831e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018321:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018324:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018328:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001832b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001832e:	74 18                	je     c0018348 <SoundPort::buffer32(int*, int)+0x6c>
c0018330:	89 de                	mov    esi,ebx
c0018332:	66 90                	xchg   ax,ax
c0018334:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018337:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001833a:	75 dc                	jne    c0018318 <SoundPort::buffer32(int*, int)+0x3c>
c001833c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001833f:	90                   	nop
c0018340:	5a                   	pop    edx
c0018341:	5b                   	pop    ebx
c0018342:	5e                   	pop    esi
c0018343:	5f                   	pop    edi
c0018344:	5d                   	pop    ebp
c0018345:	c3                   	ret    
c0018346:	66 90                	xchg   ax,ax
c0018348:	5a                   	pop    edx
c0018349:	8d 46 02             	lea    eax,[esi+0x2]
c001834c:	5b                   	pop    ebx
c001834d:	5e                   	pop    esi
c001834e:	5f                   	pop    edi
c001834f:	5d                   	pop    ebp
c0018350:	c3                   	ret    
c0018351:	8d 76 00             	lea    esi,[esi+0x0]
c0018354:	5a                   	pop    edx
c0018355:	31 c0                	xor    eax,eax
c0018357:	5b                   	pop    ebx
c0018358:	5e                   	pop    esi
c0018359:	5f                   	pop    edi
c001835a:	5d                   	pop    ebp
c001835b:	c3                   	ret    
c001835c:	b8 01 00 00 00       	mov    eax,0x1
c0018361:	eb dd                	jmp    c0018340 <SoundPort::buffer32(int*, int)+0x64>
c0018363:	90                   	nop

c0018364 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018364:	57                   	push   edi
c0018365:	56                   	push   esi
c0018366:	53                   	push   ebx
c0018367:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001836b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001836f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018375:	39 03                	cmp    DWORD PTR [ebx],eax
c0018377:	74 13                	je     c001838c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018379:	83 ec 0c             	sub    esp,0xc
c001837c:	68 c8 f0 01 c0       	push   0xc001f0c8
c0018381:	e8 4d 83 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0018386:	83 c4 10             	add    esp,0x10
c0018389:	8d 76 00             	lea    esi,[esi+0x0]
c001838c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018392:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018395:	74 11                	je     c00183a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018397:	83 ec 0c             	sub    esp,0xc
c001839a:	68 07 f1 01 c0       	push   0xc001f107
c001839f:	e8 2f 83 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c00183a4:	83 c4 10             	add    esp,0x10
c00183a7:	90                   	nop
c00183a8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183ae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183b1:	74 11                	je     c00183c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183b3:	83 ec 0c             	sub    esp,0xc
c00183b6:	68 07 f1 01 c0       	push   0xc001f107
c00183bb:	e8 13 83 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c00183c0:	83 c4 10             	add    esp,0x10
c00183c3:	90                   	nop
c00183c4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183c7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183cb:	7e 07                	jle    c00183d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00183cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183d1:	8d 76 00             	lea    esi,[esi+0x0]
c00183d4:	85 f6                	test   esi,esi
c00183d6:	7e 2c                	jle    c0018404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00183d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183dc:	8d 3c 36             	lea    edi,[esi+esi*1]
c00183df:	31 c9                	xor    ecx,ecx
c00183e1:	01 d7                	add    edi,edx
c00183e3:	90                   	nop
c00183e4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00183e7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00183ea:	85 c0                	test   eax,eax
c00183ec:	79 06                	jns    c00183f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00183ee:	05 ff 7f 00 00       	add    eax,0x7fff
c00183f3:	90                   	nop
c00183f4:	c1 f8 0f             	sar    eax,0xf
c00183f7:	83 c1 04             	add    ecx,0x4
c00183fa:	66 01 02             	add    WORD PTR [edx],ax
c00183fd:	83 c2 02             	add    edx,0x2
c0018400:	39 d7                	cmp    edi,edx
c0018402:	75 e0                	jne    c00183e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018404:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018407:	50                   	push   eax
c0018408:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001840b:	29 f0                	sub    eax,esi
c001840d:	c1 e0 02             	shl    eax,0x2
c0018410:	50                   	push   eax
c0018411:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018414:	50                   	push   eax
c0018415:	52                   	push   edx
c0018416:	e8 e5 7f fe ff       	call   c0000400 <memmove>
c001841b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	89 f0                	mov    eax,esi
c0018423:	5b                   	pop    ebx
c0018424:	5e                   	pop    esi
c0018425:	5f                   	pop    edi
c0018426:	c3                   	ret    
c0018427:	90                   	nop

c0018428 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018428:	57                   	push   edi
c0018429:	56                   	push   esi
c001842a:	53                   	push   ebx
c001842b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001842f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018433:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018437:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001843d:	39 06                	cmp    DWORD PTR [esi],eax
c001843f:	74 13                	je     c0018454 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018441:	83 ec 0c             	sub    esp,0xc
c0018444:	68 e8 f0 01 c0       	push   0xc001f0e8
c0018449:	e8 85 82 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001844e:	83 c4 10             	add    esp,0x10
c0018451:	8d 76 00             	lea    esi,[esi+0x0]
c0018454:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001845a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001845d:	74 11                	je     c0018470 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001845f:	83 ec 0c             	sub    esp,0xc
c0018462:	68 23 f1 01 c0       	push   0xc001f123
c0018467:	e8 67 82 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001846c:	83 c4 10             	add    esp,0x10
c001846f:	90                   	nop
c0018470:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018476:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018479:	74 11                	je     c001848c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001847b:	83 ec 0c             	sub    esp,0xc
c001847e:	68 23 f1 01 c0       	push   0xc001f123
c0018483:	e8 4b 82 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0018488:	83 c4 10             	add    esp,0x10
c001848b:	90                   	nop
c001848c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001848f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018493:	7e 07                	jle    c001849c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018495:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018499:	8d 76 00             	lea    esi,[esi+0x0]
c001849c:	85 ff                	test   edi,edi
c001849e:	7e 1c                	jle    c00184bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184a0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184a7:	31 c0                	xor    eax,eax
c00184a9:	8d 76 00             	lea    esi,[esi+0x0]
c00184ac:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184af:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184b2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184b5:	83 c0 04             	add    eax,0x4
c00184b8:	39 c1                	cmp    ecx,eax
c00184ba:	75 f0                	jne    c00184ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00184bc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184bf:	50                   	push   eax
c00184c0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00184c3:	29 f8                	sub    eax,edi
c00184c5:	c1 e0 02             	shl    eax,0x2
c00184c8:	50                   	push   eax
c00184c9:	8d 04 ba             	lea    eax,[edx+edi*4]
c00184cc:	50                   	push   eax
c00184cd:	52                   	push   edx
c00184ce:	e8 2d 7f fe ff       	call   c0000400 <memmove>
c00184d3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00184d6:	83 c4 10             	add    esp,0x10
c00184d9:	89 f8                	mov    eax,edi
c00184db:	5b                   	pop    ebx
c00184dc:	5e                   	pop    esi
c00184dd:	5f                   	pop    edi
c00184de:	c3                   	ret    
c00184df:	90                   	nop

c00184e0 <PCI::open(int, int, void*)>:
c00184e0:	83 ec 18             	sub    esp,0x18
c00184e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00184f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00184f3:	50                   	push   eax
c00184f4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00184f7:	31 c0                	xor    eax,eax
c00184f9:	83 c4 1c             	add    esp,0x1c
c00184fc:	c3                   	ret    
c00184fd:	90                   	nop

c00184fe <PCI::close(int, int, void*)>:
c00184fe:	31 c0                	xor    eax,eax
c0018500:	c3                   	ret    
c0018501:	90                   	nop

c0018502 <PCI::PCI()>:
c0018502:	83 ec 0c             	sub    esp,0xc
c0018505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018509:	83 ec 08             	sub    esp,0x8
c001850c:	68 3f f1 01 c0       	push   0xc001f13f
c0018511:	50                   	push   eax
c0018512:	e8 65 34 ff ff       	call   c000b97c <Bus::Bus(char const*)>
c0018517:	83 c4 10             	add    esp,0x10
c001851a:	ba e8 f1 01 c0       	mov    edx,0xc001f1e8
c001851f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018523:	89 10                	mov    DWORD PTR [eax],edx
c0018525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018529:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018537:	a3 e0 47 02 c0       	mov    ds:0xc00247e0,eax
c001853c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018540:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018546:	31 d2                	xor    edx,edx
c0018548:	88 c2                	mov    dl,al
c001854a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001854e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018559:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001855f:	31 d2                	xor    edx,edx
c0018561:	88 c2                	mov    dl,al
c0018563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018567:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018570:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018576:	8d 50 01             	lea    edx,[eax+0x1]
c0018579:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001857d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018583:	31 d2                	xor    edx,edx
c0018585:	88 c2                	mov    dl,al
c0018587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001858f:	83 c9 c0             	or     ecx,0xffffffc0
c0018592:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018596:	90                   	nop
c0018597:	83 c4 0c             	add    esp,0xc
c001859a:	c3                   	ret    
c001859b:	90                   	nop

c001859c <PCI::readBAR8(unsigned int, int)>:
c001859c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185a4:	f6 c2 01             	test   dl,0x1
c00185a7:	74 07                	je     c00185b0 <PCI::readBAR8(unsigned int, int)+0x14>
c00185a9:	83 e2 fc             	and    edx,0xfffffffc
c00185ac:	01 c2                	add    edx,eax
c00185ae:	ec                   	in     al,dx
c00185af:	c3                   	ret    
c00185b0:	83 e2 f0             	and    edx,0xfffffff0
c00185b3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185b6:	c3                   	ret    
c00185b7:	90                   	nop

c00185b8 <PCI::readBAR16(unsigned int, int)>:
c00185b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185c0:	f6 c2 01             	test   dl,0x1
c00185c3:	74 08                	je     c00185cd <PCI::readBAR16(unsigned int, int)+0x15>
c00185c5:	83 e2 fc             	and    edx,0xfffffffc
c00185c8:	01 c2                	add    edx,eax
c00185ca:	66 ed                	in     ax,dx
c00185cc:	c3                   	ret    
c00185cd:	83 e2 f0             	and    edx,0xfffffff0
c00185d0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00185d4:	c3                   	ret    
c00185d5:	90                   	nop

c00185d6 <PCI::readBAR32(unsigned int, int)>:
c00185d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185de:	f6 c2 01             	test   dl,0x1
c00185e1:	74 07                	je     c00185ea <PCI::readBAR32(unsigned int, int)+0x14>
c00185e3:	83 e2 fc             	and    edx,0xfffffffc
c00185e6:	01 c2                	add    edx,eax
c00185e8:	ed                   	in     eax,dx
c00185e9:	c3                   	ret    
c00185ea:	83 e2 f0             	and    edx,0xfffffff0
c00185ed:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00185f0:	c3                   	ret    
c00185f1:	90                   	nop

c00185f2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00185f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185fe:	f6 c2 01             	test   dl,0x1
c0018601:	74 07                	je     c001860a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018603:	83 e2 fc             	and    edx,0xfffffffc
c0018606:	01 ca                	add    edx,ecx
c0018608:	ee                   	out    dx,al
c0018609:	c3                   	ret    
c001860a:	83 e2 f0             	and    edx,0xfffffff0
c001860d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018610:	c3                   	ret    
c0018611:	90                   	nop

c0018612 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018612:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001861a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001861e:	f6 c2 01             	test   dl,0x1
c0018621:	74 08                	je     c001862b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018623:	83 e2 fc             	and    edx,0xfffffffc
c0018626:	01 ca                	add    edx,ecx
c0018628:	66 ef                	out    dx,ax
c001862a:	c3                   	ret    
c001862b:	83 e2 f0             	and    edx,0xfffffff0
c001862e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018632:	c3                   	ret    
c0018633:	90                   	nop

c0018634 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018634:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001863c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018640:	f6 c2 01             	test   dl,0x1
c0018643:	74 07                	je     c001864c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018645:	83 e2 fc             	and    edx,0xfffffffc
c0018648:	01 ca                	add    edx,ecx
c001864a:	ef                   	out    dx,eax
c001864b:	c3                   	ret    
c001864c:	83 e2 f0             	and    edx,0xfffffff0
c001864f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018652:	c3                   	ret    
c0018653:	90                   	nop

c0018654 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018654:	55                   	push   ebp
c0018655:	57                   	push   edi
c0018656:	56                   	push   esi
c0018657:	53                   	push   ebx
c0018658:	83 ec 0c             	sub    esp,0xc
c001865b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001865f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018663:	89 f0                	mov    eax,esi
c0018665:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018669:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001866d:	3c 07                	cmp    al,0x7
c001866f:	76 10                	jbe    c0018681 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018671:	83 ec 0c             	sub    esp,0xc
c0018674:	68 47 f1 01 c0       	push   0xc001f147
c0018679:	e8 55 80 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	80 fb 0f             	cmp    bl,0xf
c0018684:	76 10                	jbe    c0018696 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018686:	83 ec 0c             	sub    esp,0xc
c0018689:	68 77 f1 01 c0       	push   0xc001f177
c001868e:	e8 40 80 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0018693:	83 c4 10             	add    esp,0x10
c0018696:	8d 04 36             	lea    eax,[esi+esi*1]
c0018699:	ba f8 0c 00 00       	mov    edx,0xcf8
c001869e:	83 c8 f0             	or     eax,0xfffffff0
c00186a1:	ee                   	out    dx,al
c00186a2:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186a7:	89 e8                	mov    eax,ebp
c00186a9:	ee                   	out    dx,al
c00186aa:	83 c4 0c             	add    esp,0xc
c00186ad:	89 d8                	mov    eax,ebx
c00186af:	66 81 e7 fc 00       	and    di,0xfc
c00186b4:	5b                   	pop    ebx
c00186b5:	c1 e0 08             	shl    eax,0x8
c00186b8:	5e                   	pop    esi
c00186b9:	09 f8                	or     eax,edi
c00186bb:	5f                   	pop    edi
c00186bc:	66 0d 00 c0          	or     ax,0xc000
c00186c0:	5d                   	pop    ebp
c00186c1:	c3                   	ret    

c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186c2:	57                   	push   edi
c00186c3:	56                   	push   esi
c00186c4:	53                   	push   ebx
c00186c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186cd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00186d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186df:	83 ff 01             	cmp    edi,0x1
c00186e2:	75 3e                	jne    c0018722 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00186e4:	89 de                	mov    esi,ebx
c00186e6:	0f b6 c0             	movzx  eax,al
c00186e9:	81 e6 fc 00 00 00    	and    esi,0xfc
c00186ef:	c1 e0 10             	shl    eax,0x10
c00186f2:	0f b6 c9             	movzx  ecx,cl
c00186f5:	09 f0                	or     eax,esi
c00186f7:	c1 e1 08             	shl    ecx,0x8
c00186fa:	0f b6 d2             	movzx  edx,dl
c00186fd:	09 c8                	or     eax,ecx
c00186ff:	c1 e2 0b             	shl    edx,0xb
c0018702:	09 d0                	or     eax,edx
c0018704:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018709:	0d 00 00 00 80       	or     eax,0x80000000
c001870e:	ef                   	out    dx,eax
c001870f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018714:	ed                   	in     eax,dx
c0018715:	83 e3 02             	and    ebx,0x2
c0018718:	0f b6 cb             	movzx  ecx,bl
c001871b:	c1 e1 03             	shl    ecx,0x3
c001871e:	d3 e8                	shr    eax,cl
c0018720:	eb 43                	jmp    c0018765 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018722:	83 ff 02             	cmp    edi,0x2
c0018725:	75 2c                	jne    c0018753 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018727:	83 ec 0c             	sub    esp,0xc
c001872a:	0f b6 c9             	movzx  ecx,cl
c001872d:	0f b6 d2             	movzx  edx,dl
c0018730:	0f b6 fb             	movzx  edi,bl
c0018733:	0f b6 c0             	movzx  eax,al
c0018736:	57                   	push   edi
c0018737:	51                   	push   ecx
c0018738:	52                   	push   edx
c0018739:	50                   	push   eax
c001873a:	56                   	push   esi
c001873b:	e8 14 ff ff ff       	call   c0018654 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018740:	89 c2                	mov    edx,eax
c0018742:	ed                   	in     eax,dx
c0018743:	83 e3 02             	and    ebx,0x2
c0018746:	83 c4 20             	add    esp,0x20
c0018749:	0f b6 cb             	movzx  ecx,bl
c001874c:	c1 e1 03             	shl    ecx,0x3
c001874f:	d3 e8                	shr    eax,cl
c0018751:	eb 12                	jmp    c0018765 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018753:	83 ec 0c             	sub    esp,0xc
c0018756:	68 a7 f1 01 c0       	push   0xc001f1a7
c001875b:	e8 73 7f ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	31 c0                	xor    eax,eax
c0018765:	5b                   	pop    ebx
c0018766:	5e                   	pop    esi
c0018767:	5f                   	pop    edi
c0018768:	c3                   	ret    
c0018769:	90                   	nop

c001876a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001876a:	83 ec 18             	sub    esp,0x18
c001876d:	6a 00                	push   0x0
c001876f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018774:	50                   	push   eax
c0018775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877a:	50                   	push   eax
c001877b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018780:	50                   	push   eax
c0018781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018785:	e8 38 ff ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001878a:	83 c4 2c             	add    esp,0x2c
c001878d:	c3                   	ret    

c001878e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001878e:	83 ec 18             	sub    esp,0x18
c0018791:	6a 0e                	push   0xe
c0018793:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018798:	50                   	push   eax
c0018799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879e:	50                   	push   eax
c001879f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a4:	50                   	push   eax
c00187a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187a9:	e8 14 ff ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187ae:	83 c4 2c             	add    esp,0x2c
c00187b1:	0f b6 c0             	movzx  eax,al
c00187b4:	c3                   	ret    
c00187b5:	90                   	nop

c00187b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187b6:	55                   	push   ebp
c00187b7:	57                   	push   edi
c00187b8:	56                   	push   esi
c00187b9:	53                   	push   ebx
c00187ba:	83 ec 18             	sub    esp,0x18
c00187bd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00187c2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187c7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00187cc:	6a 0a                	push   0xa
c00187ce:	56                   	push   esi
c00187cf:	55                   	push   ebp
c00187d0:	57                   	push   edi
c00187d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187d5:	e8 e8 fe ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187da:	83 c4 14             	add    esp,0x14
c00187dd:	89 c3                	mov    ebx,eax
c00187df:	6a 0a                	push   0xa
c00187e1:	0f b6 db             	movzx  ebx,bl
c00187e4:	56                   	push   esi
c00187e5:	55                   	push   ebp
c00187e6:	57                   	push   edi
c00187e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187eb:	e8 d2 fe ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187f0:	83 c4 2c             	add    esp,0x2c
c00187f3:	25 00 ff 00 00       	and    eax,0xff00
c00187f8:	09 d8                	or     eax,ebx
c00187fa:	5b                   	pop    ebx
c00187fb:	5e                   	pop    esi
c00187fc:	5f                   	pop    edi
c00187fd:	5d                   	pop    ebp
c00187fe:	c3                   	ret    
c00187ff:	90                   	nop

c0018800 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018800:	83 ec 18             	sub    esp,0x18
c0018803:	6a 08                	push   0x8
c0018805:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001880a:	50                   	push   eax
c001880b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018810:	50                   	push   eax
c0018811:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018816:	50                   	push   eax
c0018817:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001881b:	e8 a2 fe ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018820:	83 c4 2c             	add    esp,0x2c
c0018823:	0f b6 c4             	movzx  eax,ah
c0018826:	c3                   	ret    
c0018827:	90                   	nop

c0018828 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018828:	83 ec 18             	sub    esp,0x18
c001882b:	6a 08                	push   0x8
c001882d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018832:	50                   	push   eax
c0018833:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018838:	50                   	push   eax
c0018839:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883e:	50                   	push   eax
c001883f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018843:	e8 7a fe ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018848:	83 c4 2c             	add    esp,0x2c
c001884b:	c3                   	ret    

c001884c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001884c:	83 ec 18             	sub    esp,0x18
c001884f:	6a 3c                	push   0x3c
c0018851:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018856:	50                   	push   eax
c0018857:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001885c:	50                   	push   eax
c001885d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018862:	50                   	push   eax
c0018863:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018867:	e8 56 fe ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001886c:	83 c4 2c             	add    esp,0x2c
c001886f:	c3                   	ret    

c0018870 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018870:	83 ec 18             	sub    esp,0x18
c0018873:	6a 18                	push   0x18
c0018875:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001887a:	50                   	push   eax
c001887b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018880:	50                   	push   eax
c0018881:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018886:	50                   	push   eax
c0018887:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001888b:	e8 32 fe ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018890:	83 c4 2c             	add    esp,0x2c
c0018893:	0f b6 c4             	movzx  eax,ah
c0018896:	c3                   	ret    
c0018897:	90                   	nop

c0018898 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018898:	55                   	push   ebp
c0018899:	57                   	push   edi
c001889a:	56                   	push   esi
c001889b:	53                   	push   ebx
c001889c:	83 ec 28             	sub    esp,0x28
c001889f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188a3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188a8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188ad:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188b2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00188b9:	8d 43 12             	lea    eax,[ebx+0x12]
c00188bc:	83 c3 10             	add    ebx,0x10
c00188bf:	0f b6 c0             	movzx  eax,al
c00188c2:	0f b6 db             	movzx  ebx,bl
c00188c5:	50                   	push   eax
c00188c6:	51                   	push   ecx
c00188c7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188cb:	57                   	push   edi
c00188cc:	55                   	push   ebp
c00188cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188d1:	e8 ec fd ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188d6:	83 c4 14             	add    esp,0x14
c00188d9:	89 c6                	mov    esi,eax
c00188db:	53                   	push   ebx
c00188dc:	c1 e6 10             	shl    esi,0x10
c00188df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188e3:	51                   	push   ecx
c00188e4:	57                   	push   edi
c00188e5:	55                   	push   ebp
c00188e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188ea:	e8 d3 fd ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188ef:	83 c4 3c             	add    esp,0x3c
c00188f2:	0f b7 c0             	movzx  eax,ax
c00188f5:	5b                   	pop    ebx
c00188f6:	09 f0                	or     eax,esi
c00188f8:	5e                   	pop    esi
c00188f9:	5f                   	pop    edi
c00188fa:	5d                   	pop    ebp
c00188fb:	c3                   	ret    

c00188fc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00188fc:	55                   	push   ebp
c00188fd:	57                   	push   edi
c00188fe:	56                   	push   esi
c00188ff:	53                   	push   ebx
c0018900:	83 ec 0c             	sub    esp,0xc
c0018903:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018907:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001890b:	89 f5                	mov    ebp,esi
c001890d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018913:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018917:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001891b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001891f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018923:	83 f9 01             	cmp    ecx,0x1
c0018926:	75 5d                	jne    c0018985 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018928:	0f b6 c8             	movzx  ecx,al
c001892b:	0f b6 d2             	movzx  edx,dl
c001892e:	c1 e1 10             	shl    ecx,0x10
c0018931:	c1 e2 0b             	shl    edx,0xb
c0018934:	89 f0                	mov    eax,esi
c0018936:	25 fc 00 00 00       	and    eax,0xfc
c001893b:	09 c1                	or     ecx,eax
c001893d:	89 e8                	mov    eax,ebp
c001893f:	0f b6 c0             	movzx  eax,al
c0018942:	c1 e0 08             	shl    eax,0x8
c0018945:	09 c1                	or     ecx,eax
c0018947:	09 d1                	or     ecx,edx
c0018949:	ba f8 0c 00 00       	mov    edx,0xcf8
c001894e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018954:	89 c8                	mov    eax,ecx
c0018956:	ef                   	out    dx,eax
c0018957:	ba fc 0c 00 00       	mov    edx,0xcfc
c001895c:	ed                   	in     eax,dx
c001895d:	0f b7 db             	movzx  ebx,bx
c0018960:	83 e6 02             	and    esi,0x2
c0018963:	74 0a                	je     c001896f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018965:	0f b7 d0             	movzx  edx,ax
c0018968:	c1 e3 10             	shl    ebx,0x10
c001896b:	09 d3                	or     ebx,edx
c001896d:	eb 05                	jmp    c0018974 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001896f:	66 31 c0             	xor    ax,ax
c0018972:	09 c3                	or     ebx,eax
c0018974:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018979:	89 c8                	mov    eax,ecx
c001897b:	ef                   	out    dx,eax
c001897c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018981:	89 d8                	mov    eax,ebx
c0018983:	eb 41                	jmp    c00189c6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018985:	83 f9 02             	cmp    ecx,0x2
c0018988:	75 45                	jne    c00189cf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001898a:	83 ec 0c             	sub    esp,0xc
c001898d:	0f b6 d2             	movzx  edx,dl
c0018990:	89 f1                	mov    ecx,esi
c0018992:	0f b6 c0             	movzx  eax,al
c0018995:	0f b6 f1             	movzx  esi,cl
c0018998:	89 e9                	mov    ecx,ebp
c001899a:	56                   	push   esi
c001899b:	0f b6 c9             	movzx  ecx,cl
c001899e:	51                   	push   ecx
c001899f:	52                   	push   edx
c00189a0:	50                   	push   eax
c00189a1:	57                   	push   edi
c00189a2:	e8 ad fc ff ff       	call   c0018654 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189a7:	89 c2                	mov    edx,eax
c00189a9:	ed                   	in     eax,dx
c00189aa:	83 c4 20             	add    esp,0x20
c00189ad:	0f b7 db             	movzx  ebx,bx
c00189b0:	f6 c2 02             	test   dl,0x2
c00189b3:	74 0c                	je     c00189c1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189b5:	0f b7 c8             	movzx  ecx,ax
c00189b8:	89 d8                	mov    eax,ebx
c00189ba:	c1 e0 10             	shl    eax,0x10
c00189bd:	09 c8                	or     eax,ecx
c00189bf:	eb 05                	jmp    c00189c6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189c1:	66 31 c0             	xor    ax,ax
c00189c4:	09 d8                	or     eax,ebx
c00189c6:	ef                   	out    dx,eax
c00189c7:	83 c4 0c             	add    esp,0xc
c00189ca:	5b                   	pop    ebx
c00189cb:	5e                   	pop    esi
c00189cc:	5f                   	pop    edi
c00189cd:	5d                   	pop    ebp
c00189ce:	c3                   	ret    
c00189cf:	c7 44 24 20 a7 f1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f1a7
c00189d7:	83 c4 0c             	add    esp,0xc
c00189da:	5b                   	pop    ebx
c00189db:	5e                   	pop    esi
c00189dc:	5f                   	pop    edi
c00189dd:	5d                   	pop    ebp
c00189de:	e9 f0 7c ff ff       	jmp    c00106d3 <Krnl::panic(char const*)>
c00189e3:	90                   	nop

c00189e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00189e4:	55                   	push   ebp
c00189e5:	57                   	push   edi
c00189e6:	56                   	push   esi
c00189e7:	53                   	push   ebx
c00189e8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00189ee:	80 3d ec 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ec,0x0
c00189f5:	0f 85 84 00 00 00    	jne    c0018a7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00189fb:	83 ec 0c             	sub    esp,0xc
c00189fe:	68 14 01 00 00       	push   0x114
c0018a03:	e8 51 f4 fe ff       	call   c0007e59 <malloc>
c0018a08:	83 c4 0c             	add    esp,0xc
c0018a0b:	89 c3                	mov    ebx,eax
c0018a0d:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0018a13:	68 ad f1 01 c0       	push   0xc001f1ad
c0018a18:	50                   	push   eax
c0018a19:	e8 40 27 ff ff       	call   c000b15e <File::File(char const*, Process*)>
c0018a1e:	5a                   	pop    edx
c0018a1f:	59                   	pop    ecx
c0018a20:	6a 01                	push   0x1
c0018a22:	53                   	push   ebx
c0018a23:	e8 f6 27 ff ff       	call   c000b21e <File::open(FileOpenMode)>
c0018a28:	83 c4 0c             	add    esp,0xc
c0018a2b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a2f:	50                   	push   eax
c0018a30:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a34:	50                   	push   eax
c0018a35:	53                   	push   ebx
c0018a36:	e8 8f 2a ff ff       	call   c000b4ca <File::stat(unsigned long long*, bool*)>
c0018a3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a3f:	40                   	inc    eax
c0018a40:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a43:	e8 11 f4 fe ff       	call   c0007e59 <malloc>
c0018a48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a4c:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c0018a51:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a55:	5e                   	pop    esi
c0018a56:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a58:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a5c:	51                   	push   ecx
c0018a5d:	50                   	push   eax
c0018a5e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a62:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a66:	53                   	push   ebx
c0018a67:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a6a:	83 c4 14             	add    esp,0x14
c0018a6d:	53                   	push   ebx
c0018a6e:	e8 09 28 ff ff       	call   c000b27c <File::close()>
c0018a73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a77:	83 c4 10             	add    esp,0x10
c0018a7a:	a3 e4 47 02 c0       	mov    ds:0xc00247e4,eax
c0018a7f:	a1 e4 47 02 c0       	mov    eax,ds:0xc00247e4
c0018a84:	8b 15 e8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247e8
c0018a8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a8d:	31 ff                	xor    edi,edi
c0018a8f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018a97:	31 f6                	xor    esi,esi
c0018a99:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018a9e:	31 db                	xor    ebx,ebx
c0018aa0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018aa8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018aad:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018ab4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018ab8:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018abf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018ac3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ac6:	0f 8e 6b 01 00 00    	jle    c0018c37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018acc:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018acf:	d4 40                	aam    0x40
c0018ad1:	d5 39                	aad    0x39
c0018ad3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ad7:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018adb:	d4 40                	aam    0x40
c0018add:	d5 39                	aad    0x39
c0018adf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018ae3:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018ae7:	d4 40                	aam    0x40
c0018ae9:	d5 39                	aad    0x39
c0018aeb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018aef:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018af3:	d4 40                	aam    0x40
c0018af5:	d5 39                	aad    0x39
c0018af7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018afb:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018aff:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b03:	3c 56                	cmp    al,0x56
c0018b05:	74 45                	je     c0018b4c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b07:	d4 40                	aam    0x40
c0018b09:	d5 39                	aad    0x39
c0018b0b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b0e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b12:	0f b6 c9             	movzx  ecx,cl
c0018b15:	c1 e1 04             	shl    ecx,0x4
c0018b18:	d4 40                	aam    0x40
c0018b1a:	d5 39                	aad    0x39
c0018b1c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b1f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b23:	0f b6 db             	movzx  ebx,bl
c0018b26:	09 cb                	or     ebx,ecx
c0018b28:	c1 e3 04             	shl    ebx,0x4
c0018b2b:	d4 40                	aam    0x40
c0018b2d:	d5 39                	aad    0x39
c0018b2f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b32:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b36:	0f b6 c9             	movzx  ecx,cl
c0018b39:	09 cb                	or     ebx,ecx
c0018b3b:	c1 e3 04             	shl    ebx,0x4
c0018b3e:	89 d9                	mov    ecx,ebx
c0018b40:	d4 40                	aam    0x40
c0018b42:	d5 39                	aad    0x39
c0018b44:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b47:	0f b6 db             	movzx  ebx,bl
c0018b4a:	09 cb                	or     ebx,ecx
c0018b4c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b50:	80 f9 44             	cmp    cl,0x44
c0018b53:	74 47                	je     c0018b9c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b55:	88 c8                	mov    al,cl
c0018b57:	d4 40                	aam    0x40
c0018b59:	d5 39                	aad    0x39
c0018b5b:	83 e8 30             	sub    eax,0x30
c0018b5e:	0f b6 e8             	movzx  ebp,al
c0018b61:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b65:	c1 e5 04             	shl    ebp,0x4
c0018b68:	d4 40                	aam    0x40
c0018b6a:	d5 39                	aad    0x39
c0018b6c:	83 e8 30             	sub    eax,0x30
c0018b6f:	0f b6 f0             	movzx  esi,al
c0018b72:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b76:	09 ee                	or     esi,ebp
c0018b78:	c1 e6 04             	shl    esi,0x4
c0018b7b:	d4 40                	aam    0x40
c0018b7d:	d5 39                	aad    0x39
c0018b7f:	83 e8 30             	sub    eax,0x30
c0018b82:	0f b6 e8             	movzx  ebp,al
c0018b85:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b89:	09 ee                	or     esi,ebp
c0018b8b:	c1 e6 04             	shl    esi,0x4
c0018b8e:	89 f5                	mov    ebp,esi
c0018b90:	d4 40                	aam    0x40
c0018b92:	d5 39                	aad    0x39
c0018b94:	83 e8 30             	sub    eax,0x30
c0018b97:	0f b6 f0             	movzx  esi,al
c0018b9a:	09 ee                	or     esi,ebp
c0018b9c:	83 c7 10             	add    edi,0x10
c0018b9f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018ba3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018ba6:	3c 0a                	cmp    al,0xa
c0018ba8:	74 09                	je     c0018bb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018baa:	45                   	inc    ebp
c0018bab:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018bae:	75 16                	jne    c0018bc6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018bb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018bb3:	3c 0a                	cmp    al,0xa
c0018bb5:	0f 94 c0             	sete   al
c0018bb8:	0f b6 c0             	movzx  eax,al
c0018bbb:	01 c7                	add    edi,eax
c0018bbd:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018bc2:	75 0c                	jne    c0018bd0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018bc4:	eb 15                	jmp    c0018bdb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018bc6:	47                   	inc    edi
c0018bc7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018bca:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018bce:	eb d3                	jmp    c0018ba3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018bd0:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018bd5:	0f 85 e8 fe ff ff    	jne    c0018ac3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bdb:	80 f9 44             	cmp    cl,0x44
c0018bde:	74 0b                	je     c0018beb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018be0:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018be5:	0f 85 d8 fe ff ff    	jne    c0018ac3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018beb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018bef:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018bf3:	c1 e1 04             	shl    ecx,0x4
c0018bf6:	83 e8 30             	sub    eax,0x30
c0018bf9:	09 c8                	or     eax,ecx
c0018bfb:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018bff:	0f 85 be fe ff ff    	jne    c0018ac3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c05:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c09:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c0d:	c1 e1 04             	shl    ecx,0x4
c0018c10:	83 e8 30             	sub    eax,0x30
c0018c13:	09 c8                	or     eax,ecx
c0018c15:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c19:	0f 85 a4 fe ff ff    	jne    c0018ac3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c1f:	50                   	push   eax
c0018c20:	50                   	push   eax
c0018c21:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c25:	50                   	push   eax
c0018c26:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c2d:	e8 ee 79 fe ff       	call   c0000620 <strcpy>
c0018c32:	83 c4 10             	add    esp,0x10
c0018c35:	eb 15                	jmp    c0018c4c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c37:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c3e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c49:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c4c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c53:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c59:	5b                   	pop    ebx
c0018c5a:	5e                   	pop    esi
c0018c5b:	5f                   	pop    edi
c0018c5c:	5d                   	pop    ebp
c0018c5d:	c3                   	ret    

c0018c5e <PCI::checkBus(unsigned char)>:
c0018c5e:	56                   	push   esi
c0018c5f:	53                   	push   ebx
c0018c60:	31 f6                	xor    esi,esi
c0018c62:	51                   	push   ecx
c0018c63:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c67:	0f b6 c3             	movzx  eax,bl
c0018c6a:	52                   	push   edx
c0018c6b:	56                   	push   esi
c0018c6c:	46                   	inc    esi
c0018c6d:	50                   	push   eax
c0018c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c72:	e8 f3 02 00 00       	call   c0018f6a <PCI::checkDevice(unsigned char, unsigned char)>
c0018c77:	83 c4 10             	add    esp,0x10
c0018c7a:	83 fe 20             	cmp    esi,0x20
c0018c7d:	75 e8                	jne    c0018c67 <PCI::checkBus(unsigned char)+0x9>
c0018c7f:	58                   	pop    eax
c0018c80:	5b                   	pop    ebx
c0018c81:	5e                   	pop    esi
c0018c82:	c3                   	ret    
c0018c83:	90                   	nop

c0018c84 <PCI::foundDevice(PCIDeviceInfo)>:
c0018c84:	55                   	push   ebp
c0018c85:	57                   	push   edi
c0018c86:	56                   	push   esi
c0018c87:	53                   	push   ebx
c0018c88:	83 ec 1c             	sub    esp,0x1c
c0018c8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c8f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018c95:	0f 84 52 01 00 00    	je     c0018ded <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c9b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018c9f:	66 81 f9 06 04       	cmp    cx,0x406
c0018ca4:	75 2c                	jne    c0018cd2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018ca6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cab:	50                   	push   eax
c0018cac:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018cb1:	50                   	push   eax
c0018cb2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018cb7:	50                   	push   eax
c0018cb8:	56                   	push   esi
c0018cb9:	e8 b2 fb ff ff       	call   c0018870 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018cbe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018cc2:	0f b6 c0             	movzx  eax,al
c0018cc5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018cc9:	83 c4 2c             	add    esp,0x2c
c0018ccc:	5b                   	pop    ebx
c0018ccd:	5e                   	pop    esi
c0018cce:	5f                   	pop    edi
c0018ccf:	5d                   	pop    ebp
c0018cd0:	eb 8c                	jmp    c0018c5e <PCI::checkBus(unsigned char)>
c0018cd2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018cd6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018cdc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018ce0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018ce4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018ce8:	88 d3                	mov    bl,dl
c0018cea:	85 c0                	test   eax,eax
c0018cec:	74 33                	je     c0018d21 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018cee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018cf1:	85 d2                	test   edx,edx
c0018cf3:	74 28                	je     c0018d1d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018cf5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018cfb:	31 ef                	xor    edi,ebp
c0018cfd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d03:	75 18                	jne    c0018d1d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d05:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d09:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d0f:	75 0c                	jne    c0018d1d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d11:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d17:	0f 84 d0 00 00 00    	je     c0018ded <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d1f:	eb c9                	jmp    c0018cea <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d21:	66 81 f9 01 06       	cmp    cx,0x601
c0018d26:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d2a:	75 19                	jne    c0018d45 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d2c:	83 ec 0c             	sub    esp,0xc
c0018d2f:	68 64 01 00 00       	push   0x164
c0018d34:	e8 20 f1 fe ff       	call   c0007e59 <malloc>
c0018d39:	89 c5                	mov    ebp,eax
c0018d3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d3e:	e8 47 0e 00 00       	call   c0019b8a <SATABus::SATABus()>
c0018d43:	eb 1e                	jmp    c0018d63 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d45:	66 81 f9 01 01       	cmp    cx,0x101
c0018d4a:	75 60                	jne    c0018dac <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d4c:	83 ec 0c             	sub    esp,0xc
c0018d4f:	68 70 02 00 00       	push   0x270
c0018d54:	e8 00 f1 fe ff       	call   c0007e59 <malloc>
c0018d59:	89 c5                	mov    ebp,eax
c0018d5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d5e:	e8 cb 02 00 00       	call   c001902e <IDE::IDE()>
c0018d63:	58                   	pop    eax
c0018d64:	5a                   	pop    edx
c0018d65:	55                   	push   ebp
c0018d66:	56                   	push   esi
c0018d67:	e8 bc 32 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0018d6c:	83 ec 1c             	sub    esp,0x1c
c0018d6f:	b9 09 00 00 00       	mov    ecx,0x9
c0018d74:	fc                   	cld    
c0018d75:	89 e7                	mov    edi,esp
c0018d77:	89 de                	mov    esi,ebx
c0018d79:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d7b:	55                   	push   ebp
c0018d7c:	e8 ed 31 ff ff       	call   c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>
c0018d81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d84:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d88:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018d90:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018d98:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018da0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018da3:	83 c4 4c             	add    esp,0x4c
c0018da6:	5b                   	pop    ebx
c0018da7:	5e                   	pop    esi
c0018da8:	5f                   	pop    edi
c0018da9:	5d                   	pop    ebp
c0018daa:	ff e0                	jmp    eax
c0018dac:	83 ec 0c             	sub    esp,0xc
c0018daf:	68 58 01 00 00       	push   0x158
c0018db4:	e8 a0 f0 fe ff       	call   c0007e59 <malloc>
c0018db9:	89 c5                	mov    ebp,eax
c0018dbb:	58                   	pop    eax
c0018dbc:	5a                   	pop    edx
c0018dbd:	68 c6 f1 01 c0       	push   0xc001f1c6
c0018dc2:	55                   	push   ebp
c0018dc3:	e8 fe 34 ff ff       	call   c000c2c6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018dc8:	59                   	pop    ecx
c0018dc9:	5f                   	pop    edi
c0018dca:	55                   	push   ebp
c0018dcb:	56                   	push   esi
c0018dcc:	e8 57 32 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0018dd1:	b9 09 00 00 00       	mov    ecx,0x9
c0018dd6:	fc                   	cld    
c0018dd7:	89 df                	mov    edi,ebx
c0018dd9:	89 de                	mov    esi,ebx
c0018ddb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ddd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018de1:	83 c4 2c             	add    esp,0x2c
c0018de4:	5b                   	pop    ebx
c0018de5:	5e                   	pop    esi
c0018de6:	5f                   	pop    edi
c0018de7:	5d                   	pop    ebp
c0018de8:	e9 81 31 ff ff       	jmp    c000bf6e <Device::preOpenPCI(PCIDeviceInfo)>
c0018ded:	83 c4 1c             	add    esp,0x1c
c0018df0:	5b                   	pop    ebx
c0018df1:	5e                   	pop    esi
c0018df2:	5f                   	pop    edi
c0018df3:	5d                   	pop    ebp
c0018df4:	c3                   	ret    
c0018df5:	90                   	nop

c0018df6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018df6:	55                   	push   ebp
c0018df7:	57                   	push   edi
c0018df8:	56                   	push   esi
c0018df9:	53                   	push   ebx
c0018dfa:	83 ec 68             	sub    esp,0x68
c0018dfd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e01:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e0c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e13:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e1c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e23:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e2c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e31:	6a 0c                	push   0xc
c0018e33:	57                   	push   edi
c0018e34:	53                   	push   ebx
c0018e35:	56                   	push   esi
c0018e36:	55                   	push   ebp
c0018e37:	e8 86 f8 ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e3c:	83 c4 20             	add    esp,0x20
c0018e3f:	57                   	push   edi
c0018e40:	53                   	push   ebx
c0018e41:	56                   	push   esi
c0018e42:	55                   	push   ebp
c0018e43:	e8 6e f9 ff ff       	call   c00187b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e48:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e4d:	57                   	push   edi
c0018e4e:	53                   	push   ebx
c0018e4f:	56                   	push   esi
c0018e50:	55                   	push   ebp
c0018e51:	e8 f6 f9 ff ff       	call   c001884c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e56:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e5a:	83 c4 14             	add    esp,0x14
c0018e5d:	6a 3c                	push   0x3c
c0018e5f:	57                   	push   edi
c0018e60:	53                   	push   ebx
c0018e61:	56                   	push   esi
c0018e62:	55                   	push   ebp
c0018e63:	e8 5a f8 ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e68:	0f b6 c4             	movzx  eax,ah
c0018e6b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e6f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e73:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e77:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0018e7c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e82:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e8c:	83 c4 20             	add    esp,0x20
c0018e8f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e94:	74 30                	je     c0018ec6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e96:	31 c0                	xor    eax,eax
c0018e98:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018e9c:	7e 28                	jle    c0018ec6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e9e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018ea6:	39 cb                	cmp    ebx,ecx
c0018ea8:	75 19                	jne    c0018ec3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018eaa:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018eb2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018eb6:	75 0b                	jne    c0018ec3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018eb8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018ebf:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018ec3:	40                   	inc    eax
c0018ec4:	eb d2                	jmp    c0018e98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018ec6:	31 d2                	xor    edx,edx
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	57                   	push   edi
c0018ecc:	53                   	push   ebx
c0018ecd:	56                   	push   esi
c0018ece:	52                   	push   edx
c0018ecf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018ed3:	55                   	push   ebp
c0018ed4:	e8 bf f9 ff ff       	call   c0018898 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ed9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018edd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018ee1:	42                   	inc    edx
c0018ee2:	83 c4 20             	add    esp,0x20
c0018ee5:	83 fa 06             	cmp    edx,0x6
c0018ee8:	75 de                	jne    c0018ec8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018eea:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018eef:	83 ec 0c             	sub    esp,0xc
c0018ef2:	86 e0                	xchg   al,ah
c0018ef4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018ef9:	6a 02                	push   0x2
c0018efb:	57                   	push   edi
c0018efc:	53                   	push   ebx
c0018efd:	56                   	push   esi
c0018efe:	55                   	push   ebp
c0018eff:	e8 be f7 ff ff       	call   c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f04:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f09:	83 c4 20             	add    esp,0x20
c0018f0c:	57                   	push   edi
c0018f0d:	53                   	push   ebx
c0018f0e:	56                   	push   esi
c0018f0f:	55                   	push   ebp
c0018f10:	e8 eb f8 ff ff       	call   c0018800 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f15:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f19:	57                   	push   edi
c0018f1a:	53                   	push   ebx
c0018f1b:	56                   	push   esi
c0018f1c:	55                   	push   ebp
c0018f1d:	e8 48 f8 ff ff       	call   c001876a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f22:	b9 09 00 00 00       	mov    ecx,0x9
c0018f27:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f2c:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f30:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f34:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f38:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f3c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f40:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f44:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f48:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f4c:	83 ec 0c             	sub    esp,0xc
c0018f4f:	fc                   	cld    
c0018f50:	89 e7                	mov    edi,esp
c0018f52:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f56:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f58:	55                   	push   ebp
c0018f59:	e8 26 fd ff ff       	call   c0018c84 <PCI::foundDevice(PCIDeviceInfo)>
c0018f5e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f64:	5b                   	pop    ebx
c0018f65:	5e                   	pop    esi
c0018f66:	5f                   	pop    edi
c0018f67:	5d                   	pop    ebp
c0018f68:	c3                   	ret    
c0018f69:	90                   	nop

c0018f6a <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f6a:	55                   	push   ebp
c0018f6b:	57                   	push   edi
c0018f6c:	56                   	push   esi
c0018f6d:	53                   	push   ebx
c0018f6e:	83 ec 0c             	sub    esp,0xc
c0018f71:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f75:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f7a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f7f:	6a 00                	push   0x0
c0018f81:	56                   	push   esi
c0018f82:	57                   	push   edi
c0018f83:	55                   	push   ebp
c0018f84:	e8 e1 f7 ff ff       	call   c001876a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f89:	6a 00                	push   0x0
c0018f8b:	56                   	push   esi
c0018f8c:	57                   	push   edi
c0018f8d:	55                   	push   ebp
c0018f8e:	e8 63 fe ff ff       	call   c0018df6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f93:	83 c4 20             	add    esp,0x20
c0018f96:	6a 00                	push   0x0
c0018f98:	56                   	push   esi
c0018f99:	57                   	push   edi
c0018f9a:	55                   	push   ebp
c0018f9b:	e8 ee f7 ff ff       	call   c001878e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	84 c0                	test   al,al
c0018fa5:	79 27                	jns    c0018fce <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fa7:	bb 01 00 00 00       	mov    ebx,0x1
c0018fac:	53                   	push   ebx
c0018fad:	56                   	push   esi
c0018fae:	57                   	push   edi
c0018faf:	55                   	push   ebp
c0018fb0:	e8 b5 f7 ff ff       	call   c001876a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fb5:	83 c4 10             	add    esp,0x10
c0018fb8:	66 40                	inc    ax
c0018fba:	74 0c                	je     c0018fc8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018fbc:	53                   	push   ebx
c0018fbd:	56                   	push   esi
c0018fbe:	57                   	push   edi
c0018fbf:	55                   	push   ebp
c0018fc0:	e8 31 fe ff ff       	call   c0018df6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fc5:	83 c4 10             	add    esp,0x10
c0018fc8:	43                   	inc    ebx
c0018fc9:	83 fb 08             	cmp    ebx,0x8
c0018fcc:	75 de                	jne    c0018fac <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018fce:	83 c4 0c             	add    esp,0xc
c0018fd1:	5b                   	pop    ebx
c0018fd2:	5e                   	pop    esi
c0018fd3:	5f                   	pop    edi
c0018fd4:	5d                   	pop    ebp
c0018fd5:	c3                   	ret    

c0018fd6 <PCI::detect()>:
c0018fd6:	56                   	push   esi
c0018fd7:	53                   	push   ebx
c0018fd8:	53                   	push   ebx
c0018fd9:	31 db                	xor    ebx,ebx
c0018fdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018fdf:	6a 00                	push   0x0
c0018fe1:	6a 00                	push   0x0
c0018fe3:	6a 00                	push   0x0
c0018fe5:	56                   	push   esi
c0018fe6:	e8 a3 f7 ff ff       	call   c001878e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	a8 80                	test   al,0x80
c0018ff0:	75 21                	jne    c0019013 <PCI::detect()+0x3d>
c0018ff2:	51                   	push   ecx
c0018ff3:	51                   	push   ecx
c0018ff4:	6a 00                	push   0x0
c0018ff6:	56                   	push   esi
c0018ff7:	e8 62 fc ff ff       	call   c0018c5e <PCI::checkBus(unsigned char)>
c0018ffc:	83 c4 10             	add    esp,0x10
c0018fff:	eb 24                	jmp    c0019025 <PCI::detect()+0x4f>
c0019001:	52                   	push   edx
c0019002:	52                   	push   edx
c0019003:	53                   	push   ebx
c0019004:	43                   	inc    ebx
c0019005:	56                   	push   esi
c0019006:	e8 53 fc ff ff       	call   c0018c5e <PCI::checkBus(unsigned char)>
c001900b:	83 c4 10             	add    esp,0x10
c001900e:	83 fb 08             	cmp    ebx,0x8
c0019011:	74 12                	je     c0019025 <PCI::detect()+0x4f>
c0019013:	53                   	push   ebx
c0019014:	6a 00                	push   0x0
c0019016:	6a 00                	push   0x0
c0019018:	56                   	push   esi
c0019019:	e8 4c f7 ff ff       	call   c001876a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001901e:	83 c4 10             	add    esp,0x10
c0019021:	66 40                	inc    ax
c0019023:	74 dc                	je     c0019001 <PCI::detect()+0x2b>
c0019025:	58                   	pop    eax
c0019026:	5b                   	pop    ebx
c0019027:	5e                   	pop    esi
c0019028:	c3                   	ret    
c0019029:	90                   	nop

c001902a <IDE::close(int, int, void*)>:
c001902a:	83 c8 ff             	or     eax,0xffffffff
c001902d:	c3                   	ret    

c001902e <IDE::IDE()>:
c001902e:	83 ec 0c             	sub    esp,0xc
c0019031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019035:	83 ec 08             	sub    esp,0x8
c0019038:	68 0c f2 01 c0       	push   0xc001f20c
c001903d:	50                   	push   eax
c001903e:	e8 29 33 ff ff       	call   c000c36c <HardDiskController::HardDiskController(char const*)>
c0019043:	83 c4 10             	add    esp,0x10
c0019046:	ba 9c f2 01 c0       	mov    edx,0xc001f29c
c001904b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001904f:	89 10                	mov    DWORD PTR [eax],edx
c0019051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019055:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001905c:	90                   	nop
c001905d:	83 c4 0c             	add    esp,0xc
c0019060:	c3                   	ret    
c0019061:	90                   	nop

c0019062 <IDE::prepareInterrupt(unsigned char)>:
c0019062:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019067:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001906b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019073:	c3                   	ret    

c0019074 <selectDrive(unsigned char, unsigned char)>:
c0019074:	c3                   	ret    
c0019075:	90                   	nop

c0019076 <IDE::getBase(unsigned char)>:
c0019076:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001907b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001907f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019087:	c3                   	ret    

c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019088:	55                   	push   ebp
c0019089:	57                   	push   edi
c001908a:	56                   	push   esi
c001908b:	53                   	push   ebx
c001908c:	83 ec 1c             	sub    esp,0x1c
c001908f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019093:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019097:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001909a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001909e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190a2:	80 f9 03             	cmp    cl,0x3
c00190a5:	77 51                	ja     c00190f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190ab:	0f b6 f2             	movzx  esi,dl
c00190ae:	0f b6 db             	movzx  ebx,bl
c00190b1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190b4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00190b8:	83 ca 80             	or     edx,0xffffff80
c00190bb:	0f b6 d2             	movzx  edx,dl
c00190be:	52                   	push   edx
c00190bf:	6a 0c                	push   0xc
c00190c1:	56                   	push   esi
c00190c2:	57                   	push   edi
c00190c3:	e8 c0 ff ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190c8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00190cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190d1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00190d5:	ee                   	out    dx,al
c00190d6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00190db:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00190df:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00190e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190e7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00190ef:	83 c4 2c             	add    esp,0x2c
c00190f2:	5b                   	pop    ebx
c00190f3:	5e                   	pop    esi
c00190f4:	5f                   	pop    edi
c00190f5:	5d                   	pop    ebp
c00190f6:	eb 90                	jmp    c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190f8:	80 fb 07             	cmp    bl,0x7
c00190fb:	77 12                	ja     c001910f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00190fd:	0f b6 d2             	movzx  edx,dl
c0019100:	0f b6 db             	movzx  ebx,bl
c0019103:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001910b:	89 da                	mov    edx,ebx
c001910d:	eb 2f                	jmp    c001913e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001910f:	80 fb 0d             	cmp    bl,0xd
c0019112:	77 13                	ja     c0019127 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019114:	0f b6 d2             	movzx  edx,dl
c0019117:	0f b6 db             	movzx  ebx,bl
c001911a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019121:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019125:	eb 17                	jmp    c001913e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019127:	80 fb 15             	cmp    bl,0x15
c001912a:	77 13                	ja     c001913f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001912c:	0f b6 d2             	movzx  edx,dl
c001912f:	0f b6 db             	movzx  ebx,bl
c0019132:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001913a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001913e:	ee                   	out    dx,al
c001913f:	83 c4 1c             	add    esp,0x1c
c0019142:	5b                   	pop    ebx
c0019143:	5e                   	pop    esi
c0019144:	5f                   	pop    edi
c0019145:	5d                   	pop    ebp
c0019146:	c3                   	ret    
c0019147:	90                   	nop

c0019148 <IDE::read(unsigned char, unsigned char)>:
c0019148:	55                   	push   ebp
c0019149:	57                   	push   edi
c001914a:	56                   	push   esi
c001914b:	53                   	push   ebx
c001914c:	83 ec 1c             	sub    esp,0x1c
c001914f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019153:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019157:	8d 43 f8             	lea    eax,[ebx-0x8]
c001915a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001915e:	3c 03                	cmp    al,0x3
c0019160:	77 43                	ja     c00191a5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019162:	0f b6 f2             	movzx  esi,dl
c0019165:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019168:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001916c:	83 c8 80             	or     eax,0xffffff80
c001916f:	0f b6 c0             	movzx  eax,al
c0019172:	50                   	push   eax
c0019173:	6a 0c                	push   0xc
c0019175:	56                   	push   esi
c0019176:	57                   	push   edi
c0019177:	e8 0c ff ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001917c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019181:	0f b6 c3             	movzx  eax,bl
c0019184:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019188:	ec                   	in     al,dx
c0019189:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001918d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0019192:	52                   	push   edx
c0019193:	6a 0c                	push   0xc
c0019195:	56                   	push   esi
c0019196:	57                   	push   edi
c0019197:	e8 ec fe ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001919c:	83 c4 20             	add    esp,0x20
c001919f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191a3:	eb 49                	jmp    c00191ee <IDE::read(unsigned char, unsigned char)+0xa6>
c00191a5:	80 fb 07             	cmp    bl,0x7
c00191a8:	77 12                	ja     c00191bc <IDE::read(unsigned char, unsigned char)+0x74>
c00191aa:	0f b6 d2             	movzx  edx,dl
c00191ad:	0f b6 c3             	movzx  eax,bl
c00191b0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00191b8:	89 c2                	mov    edx,eax
c00191ba:	eb 31                	jmp    c00191ed <IDE::read(unsigned char, unsigned char)+0xa5>
c00191bc:	80 fb 0d             	cmp    bl,0xd
c00191bf:	77 13                	ja     c00191d4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00191c1:	0f b6 d2             	movzx  edx,dl
c00191c4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191cb:	0f b6 d3             	movzx  edx,bl
c00191ce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00191d2:	eb 19                	jmp    c00191ed <IDE::read(unsigned char, unsigned char)+0xa5>
c00191d4:	31 c0                	xor    eax,eax
c00191d6:	80 fb 15             	cmp    bl,0x15
c00191d9:	77 13                	ja     c00191ee <IDE::read(unsigned char, unsigned char)+0xa6>
c00191db:	0f b6 d2             	movzx  edx,dl
c00191de:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00191e6:	0f b6 d3             	movzx  edx,bl
c00191e9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00191ed:	ec                   	in     al,dx
c00191ee:	83 c4 1c             	add    esp,0x1c
c00191f1:	5b                   	pop    ebx
c00191f2:	5e                   	pop    esi
c00191f3:	5f                   	pop    edi
c00191f4:	5d                   	pop    ebp
c00191f5:	c3                   	ret    

c00191f6 <IDE::waitInterrupt(unsigned char)>:
c00191f6:	57                   	push   edi
c00191f7:	56                   	push   esi
c00191f8:	31 f6                	xor    esi,esi
c00191fa:	53                   	push   ebx
c00191fb:	83 ec 10             	sub    esp,0x10
c00191fe:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019202:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019206:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001920a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001920f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019216:	84 db                	test   bl,bl
c0019218:	75 33                	jne    c001924d <IDE::waitInterrupt(unsigned char)+0x57>
c001921a:	52                   	push   edx
c001921b:	6a 0c                	push   0xc
c001921d:	50                   	push   eax
c001921e:	57                   	push   edi
c001921f:	e8 24 ff ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019224:	83 c4 10             	add    esp,0x10
c0019227:	a8 01                	test   al,0x1
c0019229:	75 2a                	jne    c0019255 <IDE::waitInterrupt(unsigned char)+0x5f>
c001922b:	f7 c6 04 00 00 00    	test   esi,0x4
c0019231:	75 12                	jne    c0019245 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019233:	83 fe 32             	cmp    esi,0x32
c0019236:	7e 0d                	jle    c0019245 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019238:	83 ec 0c             	sub    esp,0xc
c001923b:	6a 64                	push   0x64
c001923d:	e8 e6 aa ff ff       	call   c0013d28 <milliTenthSleep(unsigned int)>
c0019242:	83 c4 10             	add    esp,0x10
c0019245:	83 fe 3c             	cmp    esi,0x3c
c0019248:	74 0b                	je     c0019255 <IDE::waitInterrupt(unsigned char)+0x5f>
c001924a:	46                   	inc    esi
c001924b:	eb bd                	jmp    c001920a <IDE::waitInterrupt(unsigned char)+0x14>
c001924d:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019255:	83 c4 10             	add    esp,0x10
c0019258:	88 d8                	mov    al,bl
c001925a:	5b                   	pop    ebx
c001925b:	5e                   	pop    esi
c001925c:	5f                   	pop    edi
c001925d:	c3                   	ret    

c001925e <ideChannel0IRQHandler(regs*, void*)>:
c001925e:	83 ec 10             	sub    esp,0x10
c0019261:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019265:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001926c:	6a 07                	push   0x7
c001926e:	6a 00                	push   0x0
c0019270:	50                   	push   eax
c0019271:	e8 d2 fe ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019276:	83 c4 1c             	add    esp,0x1c
c0019279:	c3                   	ret    

c001927a <ideChannel1IRQHandler(regs*, void*)>:
c001927a:	83 ec 10             	sub    esp,0x10
c001927d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019281:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019288:	6a 07                	push   0x7
c001928a:	6a 01                	push   0x1
c001928c:	50                   	push   eax
c001928d:	e8 b6 fe ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019292:	83 c4 1c             	add    esp,0x1c
c0019295:	c3                   	ret    

c0019296 <IDE::enableIRQs(unsigned char, bool)>:
c0019296:	57                   	push   edi
c0019297:	56                   	push   esi
c0019298:	be 04 00 00 00       	mov    esi,0x4
c001929d:	53                   	push   ebx
c001929e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192a7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192ac:	0f 94 c0             	sete   al
c00192af:	01 c0                	add    eax,eax
c00192b1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00192b8:	0f b6 c0             	movzx  eax,al
c00192bb:	50                   	push   eax
c00192bc:	6a 0c                	push   0xc
c00192be:	57                   	push   edi
c00192bf:	53                   	push   ebx
c00192c0:	e8 c3 fd ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192c5:	83 c4 10             	add    esp,0x10
c00192c8:	50                   	push   eax
c00192c9:	6a 0c                	push   0xc
c00192cb:	57                   	push   edi
c00192cc:	53                   	push   ebx
c00192cd:	e8 76 fe ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c00192d2:	83 c4 10             	add    esp,0x10
c00192d5:	4e                   	dec    esi
c00192d6:	75 f0                	jne    c00192c8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00192d8:	5b                   	pop    ebx
c00192d9:	5e                   	pop    esi
c00192da:	5f                   	pop    edi
c00192db:	c3                   	ret    

c00192dc <IDE::open(int, int, void*)>:
c00192dc:	55                   	push   ebp
c00192dd:	57                   	push   edi
c00192de:	56                   	push   esi
c00192df:	53                   	push   ebx
c00192e0:	83 ec 1c             	sub    esp,0x1c
c00192e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00192e7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00192f0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00192f9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019300:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019307:	0f 85 b0 02 00 00    	jne    c00195bd <IDE::open(int, int, void*)+0x2e1>
c001930d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019313:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019317:	83 e0 7f             	and    eax,0x7f
c001931a:	3c 05                	cmp    al,0x5
c001931c:	74 04                	je     c0019322 <IDE::open(int, int, void*)+0x46>
c001931e:	3c 0f                	cmp    al,0xf
c0019320:	75 32                	jne    c0019354 <IDE::open(int, int, void*)+0x78>
c0019322:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019328:	83 e0 fc             	and    eax,0xfffffffc
c001932b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019332:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019338:	83 e0 fc             	and    eax,0xfffffffc
c001933b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019342:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019348:	83 e0 fc             	and    eax,0xfffffffc
c001934b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019352:	eb 14                	jmp    c0019368 <IDE::open(int, int, void*)+0x8c>
c0019354:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001935e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019368:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001936f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019376:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001937a:	89 c6                	mov    esi,eax
c001937c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019381:	c1 e6 10             	shl    esi,0x10
c0019384:	89 e8                	mov    eax,ebp
c0019386:	89 fa                	mov    edx,edi
c0019388:	c1 e0 0b             	shl    eax,0xb
c001938b:	09 f0                	or     eax,esi
c001938d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019394:	c1 e6 08             	shl    esi,0x8
c0019397:	09 c6                	or     esi,eax
c0019399:	89 f0                	mov    eax,esi
c001939b:	0d 08 00 00 80       	or     eax,0x80000008
c00193a0:	ef                   	out    dx,eax
c00193a1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193a6:	89 ca                	mov    edx,ecx
c00193a8:	ed                   	in     eax,dx
c00193a9:	c1 e8 10             	shr    eax,0x10
c00193ac:	3d ff ff 00 00       	cmp    eax,0xffff
c00193b1:	0f 84 f5 00 00 00    	je     c00194ac <IDE::open(int, int, void*)+0x1d0>
c00193b7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00193bd:	89 fa                	mov    edx,edi
c00193bf:	89 f0                	mov    eax,esi
c00193c1:	ef                   	out    dx,eax
c00193c2:	b0 fe                	mov    al,0xfe
c00193c4:	89 ca                	mov    edx,ecx
c00193c6:	ee                   	out    dx,al
c00193c7:	89 f0                	mov    eax,esi
c00193c9:	89 fa                	mov    edx,edi
c00193cb:	ef                   	out    dx,eax
c00193cc:	89 ca                	mov    edx,ecx
c00193ce:	ed                   	in     eax,dx
c00193cf:	3c fe                	cmp    al,0xfe
c00193d1:	0f 85 a9 00 00 00    	jne    c0019480 <IDE::open(int, int, void*)+0x1a4>
c00193d7:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c00193dd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00193e4:	74 33                	je     c0019419 <IDE::open(int, int, void*)+0x13d>
c00193e6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00193ec:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00193f0:	40                   	inc    eax
c00193f1:	83 ec 0c             	sub    esp,0xc
c00193f4:	0f b6 c0             	movzx  eax,al
c00193f7:	50                   	push   eax
c00193f8:	55                   	push   ebp
c00193f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193fd:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019403:	51                   	push   ecx
c0019404:	e8 47 59 ff ff       	call   c000ed50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019409:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001940e:	83 c4 1c             	add    esp,0x1c
c0019411:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019417:	eb 0a                	jmp    c0019423 <IDE::open(int, int, void*)+0x147>
c0019419:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019423:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001942a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019431:	c1 e1 10             	shl    ecx,0x10
c0019434:	c1 e0 08             	shl    eax,0x8
c0019437:	bf f8 0c 00 00       	mov    edi,0xcf8
c001943c:	09 c1                	or     ecx,eax
c001943e:	89 fa                	mov    edx,edi
c0019440:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019447:	c1 e0 0b             	shl    eax,0xb
c001944a:	09 c1                	or     ecx,eax
c001944c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019452:	89 c8                	mov    eax,ecx
c0019454:	ef                   	out    dx,eax
c0019455:	be fc 0c 00 00       	mov    esi,0xcfc
c001945a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019460:	89 f2                	mov    edx,esi
c0019462:	ee                   	out    dx,al
c0019463:	89 c8                	mov    eax,ecx
c0019465:	89 fa                	mov    edx,edi
c0019467:	ef                   	out    dx,eax
c0019468:	89 f2                	mov    edx,esi
c001946a:	ed                   	in     eax,dx
c001946b:	0f b6 c0             	movzx  eax,al
c001946e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019474:	74 46                	je     c00194bc <IDE::open(int, int, void*)+0x1e0>
c0019476:	83 ec 0c             	sub    esp,0xc
c0019479:	68 24 f2 01 c0       	push   0xc001f224
c001947e:	eb 34                	jmp    c00194b4 <IDE::open(int, int, void*)+0x1d8>
c0019480:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019489:	75 17                	jne    c00194a2 <IDE::open(int, int, void*)+0x1c6>
c001948b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019490:	74 07                	je     c0019499 <IDE::open(int, int, void*)+0x1bd>
c0019492:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019497:	75 09                	jne    c00194a2 <IDE::open(int, int, void*)+0x1c6>
c0019499:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194a0:	eb 1a                	jmp    c00194bc <IDE::open(int, int, void*)+0x1e0>
c00194a2:	83 ec 0c             	sub    esp,0xc
c00194a5:	68 2c f2 01 c0       	push   0xc001f22c
c00194aa:	eb 08                	jmp    c00194b4 <IDE::open(int, int, void*)+0x1d8>
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	68 5d f2 01 c0       	push   0xc001f25d
c00194b4:	e8 1a 72 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c00194b9:	83 c4 10             	add    esp,0x10
c00194bc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00194c3:	79 1a                	jns    c00194df <IDE::open(int, int, void*)+0x203>
c00194c5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194cb:	83 e0 fc             	and    eax,0xfffffffc
c00194ce:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00194d5:	83 c0 08             	add    eax,0x8
c00194d8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00194df:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194e5:	89 c2                	mov    edx,eax
c00194e7:	83 e2 0f             	and    edx,0xf
c00194ea:	66 83 fa 08          	cmp    dx,0x8
c00194ee:	75 0a                	jne    c00194fa <IDE::open(int, int, void*)+0x21e>
c00194f0:	83 e8 02             	sub    eax,0x2
c00194f3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00194fa:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019500:	89 c2                	mov    edx,eax
c0019502:	83 e2 0f             	and    edx,0xf
c0019505:	66 83 fa 08          	cmp    dx,0x8
c0019509:	75 0a                	jne    c0019515 <IDE::open(int, int, void*)+0x239>
c001950b:	83 e8 02             	sub    eax,0x2
c001950e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019515:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001951c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019523:	89 d0                	mov    eax,edx
c0019525:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019528:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001952c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019530:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019533:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019538:	0f b6 c9             	movzx  ecx,cl
c001953b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019542:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019545:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019549:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001954d:	8d 50 02             	lea    edx,[eax+0x2]
c0019550:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019555:	0f b6 d2             	movzx  edx,dl
c0019558:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001955e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019561:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019565:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019569:	8d 48 03             	lea    ecx,[eax+0x3]
c001956c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019571:	0f b6 c9             	movzx  ecx,cl
c0019574:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001957a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001957d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019581:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019585:	8d 50 04             	lea    edx,[eax+0x4]
c0019588:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001958e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019593:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001959a:	66 85 f6             	test   si,si
c001959d:	74 5b                	je     c00195fa <IDE::open(int, int, void*)+0x31e>
c001959f:	0f b6 d2             	movzx  edx,dl
c00195a2:	83 c0 05             	add    eax,0x5
c00195a5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195a8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195ac:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195b0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195b6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195bb:	eb 3d                	jmp    c00195fa <IDE::open(int, int, void*)+0x31e>
c00195bd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00195c3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195ca:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00195d1:	66 05 06 02          	add    ax,0x206
c00195d5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195dc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00195e3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00195ea:	66 05 06 02          	add    ax,0x206
c00195ee:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195f5:	e9 e5 fe ff ff       	jmp    c00194df <IDE::open(int, int, void*)+0x203>
c00195fa:	50                   	push   eax
c00195fb:	50                   	push   eax
c00195fc:	6a 00                	push   0x0
c00195fe:	53                   	push   ebx
c00195ff:	e8 5e fa ff ff       	call   c0019062 <IDE::prepareInterrupt(unsigned char)>
c0019604:	5a                   	pop    edx
c0019605:	59                   	pop    ecx
c0019606:	6a 01                	push   0x1
c0019608:	53                   	push   ebx
c0019609:	e8 54 fa ff ff       	call   c0019062 <IDE::prepareInterrupt(unsigned char)>
c001960e:	83 c4 0c             	add    esp,0xc
c0019611:	6a 00                	push   0x0
c0019613:	6a 00                	push   0x0
c0019615:	53                   	push   ebx
c0019616:	e8 7b fc ff ff       	call   c0019296 <IDE::enableIRQs(unsigned char, bool)>
c001961b:	83 c4 0c             	add    esp,0xc
c001961e:	6a 00                	push   0x0
c0019620:	6a 01                	push   0x1
c0019622:	53                   	push   ebx
c0019623:	e8 6e fc ff ff       	call   c0019296 <IDE::enableIRQs(unsigned char, bool)>
c0019628:	83 c4 10             	add    esp,0x10
c001962b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019632:	74 34                	je     c0019668 <IDE::open(int, int, void*)+0x38c>
c0019634:	83 ec 0c             	sub    esp,0xc
c0019637:	53                   	push   ebx
c0019638:	6a 01                	push   0x1
c001963a:	68 5e 92 01 c0       	push   0xc001925e
c001963f:	6a 0e                	push   0xe
c0019641:	53                   	push   ebx
c0019642:	e8 8d 29 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019647:	83 c4 14             	add    esp,0x14
c001964a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019650:	53                   	push   ebx
c0019651:	6a 01                	push   0x1
c0019653:	68 7a 92 01 c0       	push   0xc001927a
c0019658:	6a 0f                	push   0xf
c001965a:	53                   	push   ebx
c001965b:	e8 74 29 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019660:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019666:	eb 38                	jmp    c00196a0 <IDE::open(int, int, void*)+0x3c4>
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019675:	53                   	push   ebx
c0019676:	6a 00                	push   0x0
c0019678:	68 5e 92 01 c0       	push   0xc001925e
c001967d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019683:	53                   	push   ebx
c0019684:	e8 4b 29 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019689:	83 c4 14             	add    esp,0x14
c001968c:	53                   	push   ebx
c001968d:	6a 00                	push   0x0
c001968f:	68 7a 92 01 c0       	push   0xc001927a
c0019694:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001969a:	53                   	push   ebx
c001969b:	e8 34 29 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196a2:	83 c4 20             	add    esp,0x20
c00196a5:	83 ec 0c             	sub    esp,0xc
c00196a8:	53                   	push   ebx
c00196a9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196ac:	83 c4 0c             	add    esp,0xc
c00196af:	6a 07                	push   0x7
c00196b1:	6a 00                	push   0x0
c00196b3:	53                   	push   ebx
c00196b4:	e8 8f fa ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c00196b9:	83 c4 0c             	add    esp,0xc
c00196bc:	6a 07                	push   0x7
c00196be:	6a 01                	push   0x1
c00196c0:	53                   	push   ebx
c00196c1:	e8 82 fa ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c00196c6:	83 c4 0c             	add    esp,0xc
c00196c9:	6a 01                	push   0x1
c00196cb:	6a 00                	push   0x0
c00196cd:	53                   	push   ebx
c00196ce:	e8 c3 fb ff ff       	call   c0019296 <IDE::enableIRQs(unsigned char, bool)>
c00196d3:	83 c4 0c             	add    esp,0xc
c00196d6:	6a 01                	push   0x1
c00196d8:	6a 01                	push   0x1
c00196da:	53                   	push   ebx
c00196db:	e8 b6 fb ff ff       	call   c0019296 <IDE::enableIRQs(unsigned char, bool)>
c00196e0:	83 c4 2c             	add    esp,0x2c
c00196e3:	31 c0                	xor    eax,eax
c00196e5:	5b                   	pop    ebx
c00196e6:	5e                   	pop    esi
c00196e7:	5f                   	pop    edi
c00196e8:	5d                   	pop    ebp
c00196e9:	c3                   	ret    

c00196ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00196ea:	55                   	push   ebp
c00196eb:	57                   	push   edi
c00196ec:	56                   	push   esi
c00196ed:	53                   	push   ebx
c00196ee:	83 ec 1c             	sub    esp,0x1c
c00196f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00196f9:	8d 50 f8             	lea    edx,[eax-0x8]
c00196fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019700:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019704:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019708:	80 fa 03             	cmp    dl,0x3
c001970b:	77 5d                	ja     c001976a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001970d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019711:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019715:	0f b6 db             	movzx  ebx,bl
c0019718:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001971b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001971f:	83 ca 80             	or     edx,0xffffff80
c0019722:	0f b6 d2             	movzx  edx,dl
c0019725:	52                   	push   edx
c0019726:	6a 0c                	push   0xc
c0019728:	53                   	push   ebx
c0019729:	56                   	push   esi
c001972a:	e8 59 f9 ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001972f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019734:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019738:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001973c:	0f b6 c0             	movzx  eax,al
c001973f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019743:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019745:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001974a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001974e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019752:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019756:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001975e:	83 c4 2c             	add    esp,0x2c
c0019761:	5b                   	pop    ebx
c0019762:	5e                   	pop    esi
c0019763:	5f                   	pop    edi
c0019764:	5d                   	pop    ebp
c0019765:	e9 1e f9 ff ff       	jmp    c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001976a:	3c 07                	cmp    al,0x7
c001976c:	77 10                	ja     c001977e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001976e:	0f b6 db             	movzx  ebx,bl
c0019771:	0f b6 d0             	movzx  edx,al
c0019774:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001977c:	eb 2d                	jmp    c00197ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001977e:	3c 0d                	cmp    al,0xd
c0019780:	77 13                	ja     c0019795 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019782:	0f b6 db             	movzx  ebx,bl
c0019785:	0f b6 c0             	movzx  eax,al
c0019788:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001978f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019793:	eb 16                	jmp    c00197ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019795:	3c 15                	cmp    al,0x15
c0019797:	77 14                	ja     c00197ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019799:	0f b6 db             	movzx  ebx,bl
c001979c:	0f b6 c0             	movzx  eax,al
c001979f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197a7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197ab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197ad:	83 c4 1c             	add    esp,0x1c
c00197b0:	5b                   	pop    ebx
c00197b1:	5e                   	pop    esi
c00197b2:	5f                   	pop    edi
c00197b3:	5d                   	pop    ebp
c00197b4:	c3                   	ret    
c00197b5:	90                   	nop

c00197b6 <IDE::detect()>:
c00197b6:	55                   	push   ebp
c00197b7:	57                   	push   edi
c00197b8:	56                   	push   esi
c00197b9:	53                   	push   ebx
c00197ba:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00197c0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197c7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00197ce:	0f 85 97 02 00 00    	jne    c0019a6b <IDE::detect()+0x2b5>
c00197d4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00197db:	31 f6                	xor    esi,esi
c00197dd:	31 ed                	xor    ebp,ebp
c00197df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00197e7:	89 e8                	mov    eax,ebp
c00197e9:	c1 e0 06             	shl    eax,0x6
c00197ec:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00197f4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00197f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00197fc:	c1 e0 04             	shl    eax,0x4
c00197ff:	83 c8 a0             	or     eax,0xffffffa0
c0019802:	0f b6 c0             	movzx  eax,al
c0019805:	50                   	push   eax
c0019806:	6a 06                	push   0x6
c0019808:	56                   	push   esi
c0019809:	53                   	push   ebx
c001980a:	e8 79 f8 ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001980f:	83 c4 0c             	add    esp,0xc
c0019812:	6a 0c                	push   0xc
c0019814:	56                   	push   esi
c0019815:	53                   	push   ebx
c0019816:	e8 2d f9 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c001981b:	83 c4 0c             	add    esp,0xc
c001981e:	6a 0c                	push   0xc
c0019820:	56                   	push   esi
c0019821:	53                   	push   ebx
c0019822:	e8 21 f9 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019827:	83 c4 0c             	add    esp,0xc
c001982a:	6a 0c                	push   0xc
c001982c:	56                   	push   esi
c001982d:	53                   	push   ebx
c001982e:	e8 15 f9 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019833:	83 c4 0c             	add    esp,0xc
c0019836:	6a 0c                	push   0xc
c0019838:	56                   	push   esi
c0019839:	53                   	push   ebx
c001983a:	e8 09 f9 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c001983f:	68 ec 00 00 00       	push   0xec
c0019844:	6a 07                	push   0x7
c0019846:	56                   	push   esi
c0019847:	53                   	push   ebx
c0019848:	e8 3b f8 ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001984d:	83 c4 1c             	add    esp,0x1c
c0019850:	6a 0c                	push   0xc
c0019852:	56                   	push   esi
c0019853:	53                   	push   ebx
c0019854:	e8 ef f8 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019859:	83 c4 0c             	add    esp,0xc
c001985c:	6a 0c                	push   0xc
c001985e:	56                   	push   esi
c001985f:	53                   	push   ebx
c0019860:	e8 e3 f8 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019865:	83 c4 0c             	add    esp,0xc
c0019868:	6a 0c                	push   0xc
c001986a:	56                   	push   esi
c001986b:	53                   	push   ebx
c001986c:	e8 d7 f8 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019871:	83 c4 0c             	add    esp,0xc
c0019874:	6a 0c                	push   0xc
c0019876:	56                   	push   esi
c0019877:	53                   	push   ebx
c0019878:	e8 cb f8 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c001987d:	83 c4 0c             	add    esp,0xc
c0019880:	6a 0c                	push   0xc
c0019882:	56                   	push   esi
c0019883:	53                   	push   ebx
c0019884:	e8 bf f8 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019889:	83 c4 10             	add    esp,0x10
c001988c:	84 c0                	test   al,al
c001988e:	0f 84 5f 01 00 00    	je     c00199f3 <IDE::detect()+0x23d>
c0019894:	31 ff                	xor    edi,edi
c0019896:	50                   	push   eax
c0019897:	6a 0c                	push   0xc
c0019899:	56                   	push   esi
c001989a:	53                   	push   ebx
c001989b:	e8 a8 f8 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c00198a0:	83 c4 10             	add    esp,0x10
c00198a3:	a8 01                	test   al,0x1
c00198a5:	0f 85 69 01 00 00    	jne    c0019a14 <IDE::detect()+0x25e>
c00198ab:	84 c0                	test   al,al
c00198ad:	78 04                	js     c00198b3 <IDE::detect()+0xfd>
c00198af:	a8 08                	test   al,0x8
c00198b1:	75 23                	jne    c00198d6 <IDE::detect()+0x120>
c00198b3:	47                   	inc    edi
c00198b4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00198ba:	7e da                	jle    c0019896 <IDE::detect()+0xe0>
c00198bc:	83 ec 0c             	sub    esp,0xc
c00198bf:	6a 32                	push   0x32
c00198c1:	e8 62 a4 ff ff       	call   c0013d28 <milliTenthSleep(unsigned int)>
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00198cf:	75 c5                	jne    c0019896 <IDE::detect()+0xe0>
c00198d1:	e9 3e 01 00 00       	jmp    c0019a14 <IDE::detect()+0x25e>
c00198d6:	31 c9                	xor    ecx,ecx
c00198d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00198dc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198e0:	83 ec 0c             	sub    esp,0xc
c00198e3:	68 80 00 00 00       	push   0x80
c00198e8:	57                   	push   edi
c00198e9:	6a 00                	push   0x0
c00198eb:	56                   	push   esi
c00198ec:	53                   	push   ebx
c00198ed:	e8 f8 fd ff ff       	call   c00196ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00198f2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00198f7:	89 e8                	mov    eax,ebp
c00198f9:	89 d1                	mov    ecx,edx
c00198fb:	c1 e0 06             	shl    eax,0x6
c00198fe:	01 d8                	add    eax,ebx
c0019900:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019907:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001990e:	89 f2                	mov    edx,esi
c0019910:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019916:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001991a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019920:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019924:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001992b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019933:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001993a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019942:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019948:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001994f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019955:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019959:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001995d:	83 c4 20             	add    esp,0x20
c0019960:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019963:	83 c0 02             	add    eax,0x2
c0019966:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001996c:	83 c7 02             	add    edi,0x2
c001996f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019972:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019978:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001997c:	75 e2                	jne    c0019960 <IDE::detect()+0x1aa>
c001997e:	89 e8                	mov    eax,ebp
c0019980:	c1 e0 06             	shl    eax,0x6
c0019983:	01 d8                	add    eax,ebx
c0019985:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001998b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019992:	66 c1 ea 09          	shr    dx,0x9
c0019996:	83 e2 01             	and    edx,0x1
c0019999:	84 c9                	test   cl,cl
c001999b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199a1:	75 22                	jne    c00199c5 <IDE::detect()+0x20f>
c00199a3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199aa:	74 46                	je     c00199f2 <IDE::detect()+0x23c>
c00199ac:	83 ec 0c             	sub    esp,0xc
c00199af:	68 7c 01 00 00       	push   0x17c
c00199b4:	e8 a0 e4 fe ff       	call   c0007e59 <malloc>
c00199b9:	89 c7                	mov    edi,eax
c00199bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00199be:	e8 11 05 00 00       	call   c0019ed4 <ATA::ATA()>
c00199c3:	eb 17                	jmp    c00199dc <IDE::detect()+0x226>
c00199c5:	83 ec 0c             	sub    esp,0xc
c00199c8:	68 84 01 00 00       	push   0x184
c00199cd:	e8 87 e4 fe ff       	call   c0007e59 <malloc>
c00199d2:	89 c7                	mov    edi,eax
c00199d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00199d7:	e8 f0 0a 00 00       	call   c001a4cc <ATAPI::ATAPI()>
c00199dc:	5a                   	pop    edx
c00199dd:	59                   	pop    ecx
c00199de:	57                   	push   edi
c00199df:	53                   	push   ebx
c00199e0:	e8 43 26 ff ff       	call   c000c028 <Device::addChild(Device*)>
c00199e5:	8b 07                	mov    eax,DWORD PTR [edi]
c00199e7:	53                   	push   ebx
c00199e8:	55                   	push   ebp
c00199e9:	6a 00                	push   0x0
c00199eb:	57                   	push   edi
c00199ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199ef:	83 c4 20             	add    esp,0x20
c00199f2:	45                   	inc    ebp
c00199f3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00199f8:	74 0d                	je     c0019a07 <IDE::detect()+0x251>
c00199fa:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a02:	e9 e0 fd ff ff       	jmp    c00197e7 <IDE::detect()+0x31>
c0019a07:	4e                   	dec    esi
c0019a08:	74 61                	je     c0019a6b <IDE::detect()+0x2b5>
c0019a0a:	be 01 00 00 00       	mov    esi,0x1
c0019a0f:	e9 cb fd ff ff       	jmp    c00197df <IDE::detect()+0x29>
c0019a14:	50                   	push   eax
c0019a15:	6a 04                	push   0x4
c0019a17:	56                   	push   esi
c0019a18:	53                   	push   ebx
c0019a19:	e8 2a f7 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019a1e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a22:	83 c4 0c             	add    esp,0xc
c0019a25:	6a 05                	push   0x5
c0019a27:	56                   	push   esi
c0019a28:	53                   	push   ebx
c0019a29:	e8 1a f7 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019a2e:	83 c4 10             	add    esp,0x10
c0019a31:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a35:	80 fa 14             	cmp    dl,0x14
c0019a38:	75 04                	jne    c0019a3e <IDE::detect()+0x288>
c0019a3a:	3c eb                	cmp    al,0xeb
c0019a3c:	eb 07                	jmp    c0019a45 <IDE::detect()+0x28f>
c0019a3e:	3c 96                	cmp    al,0x96
c0019a40:	75 b1                	jne    c00199f3 <IDE::detect()+0x23d>
c0019a42:	80 fa 69             	cmp    dl,0x69
c0019a45:	75 ac                	jne    c00199f3 <IDE::detect()+0x23d>
c0019a47:	68 a1 00 00 00       	push   0xa1
c0019a4c:	6a 07                	push   0x7
c0019a4e:	56                   	push   esi
c0019a4f:	53                   	push   ebx
c0019a50:	e8 33 f6 ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a55:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a5c:	e8 c7 a2 ff ff       	call   c0013d28 <milliTenthSleep(unsigned int)>
c0019a61:	83 c4 10             	add    esp,0x10
c0019a64:	b1 01                	mov    cl,0x1
c0019a66:	e9 6d fe ff ff       	jmp    c00198d8 <IDE::detect()+0x122>
c0019a6b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a71:	5b                   	pop    ebx
c0019a72:	5e                   	pop    esi
c0019a73:	5f                   	pop    edi
c0019a74:	5d                   	pop    ebp
c0019a75:	c3                   	ret    

c0019a76 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a76:	55                   	push   ebp
c0019a77:	57                   	push   edi
c0019a78:	56                   	push   esi
c0019a79:	53                   	push   ebx
c0019a7a:	83 ec 1c             	sub    esp,0x1c
c0019a7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a81:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a85:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a89:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a8d:	88 c3                	mov    bl,al
c0019a8f:	84 c0                	test   al,al
c0019a91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a95:	0f 84 81 00 00 00    	je     c0019b1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a9b:	83 ec 0c             	sub    esp,0xc
c0019a9e:	68 87 f2 01 c0       	push   0xc001f287
c0019aa3:	e8 40 11 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c0019aa8:	83 c4 10             	add    esp,0x10
c0019aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019aaf:	3c 01                	cmp    al,0x1
c0019ab1:	74 63                	je     c0019b16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019ab3:	3c 02                	cmp    al,0x2
c0019ab5:	75 53                	jne    c0019b0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019ab7:	01 f6                	add    esi,esi
c0019ab9:	09 ee                	or     esi,ebp
c0019abb:	50                   	push   eax
c0019abc:	89 f0                	mov    eax,esi
c0019abe:	6a 01                	push   0x1
c0019ac0:	0f b6 f0             	movzx  esi,al
c0019ac3:	c1 e6 06             	shl    esi,0x6
c0019ac6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019ace:	50                   	push   eax
c0019acf:	57                   	push   edi
c0019ad0:	e8 73 f6 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019ad5:	83 c4 10             	add    esp,0x10
c0019ad8:	a8 01                	test   al,0x1
c0019ada:	74 02                	je     c0019ade <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019adc:	b3 07                	mov    bl,0x7
c0019ade:	a8 02                	test   al,0x2
c0019ae0:	74 02                	je     c0019ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019ae2:	b3 03                	mov    bl,0x3
c0019ae4:	a8 04                	test   al,0x4
c0019ae6:	74 02                	je     c0019aea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019ae8:	b3 14                	mov    bl,0x14
c0019aea:	a8 08                	test   al,0x8
c0019aec:	74 02                	je     c0019af0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019aee:	b3 03                	mov    bl,0x3
c0019af0:	a8 10                	test   al,0x10
c0019af2:	74 02                	je     c0019af6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019af4:	b3 15                	mov    bl,0x15
c0019af6:	a8 20                	test   al,0x20
c0019af8:	74 02                	je     c0019afc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019afa:	b3 03                	mov    bl,0x3
c0019afc:	a8 40                	test   al,0x40
c0019afe:	74 02                	je     c0019b02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b00:	b3 16                	mov    bl,0x16
c0019b02:	84 c0                	test   al,al
c0019b04:	79 16                	jns    c0019b1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b06:	b3 0d                	mov    bl,0xd
c0019b08:	eb 12                	jmp    c0019b1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b0a:	3c 03                	cmp    al,0x3
c0019b0c:	74 0c                	je     c0019b1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b0e:	3c 04                	cmp    al,0x4
c0019b10:	75 0a                	jne    c0019b1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b12:	b3 08                	mov    bl,0x8
c0019b14:	eb 06                	jmp    c0019b1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b16:	b3 13                	mov    bl,0x13
c0019b18:	eb 02                	jmp    c0019b1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b1a:	b3 17                	mov    bl,0x17
c0019b1c:	83 c4 1c             	add    esp,0x1c
c0019b1f:	88 d8                	mov    al,bl
c0019b21:	5b                   	pop    ebx
c0019b22:	5e                   	pop    esi
c0019b23:	5f                   	pop    edi
c0019b24:	5d                   	pop    ebp
c0019b25:	c3                   	ret    

c0019b26 <IDE::polling(unsigned char, unsigned int)>:
c0019b26:	55                   	push   ebp
c0019b27:	bd 04 00 00 00       	mov    ebp,0x4
c0019b2c:	57                   	push   edi
c0019b2d:	56                   	push   esi
c0019b2e:	53                   	push   ebx
c0019b2f:	83 ec 0c             	sub    esp,0xc
c0019b32:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b36:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b3a:	0f b6 f3             	movzx  esi,bl
c0019b3d:	52                   	push   edx
c0019b3e:	6a 0c                	push   0xc
c0019b40:	56                   	push   esi
c0019b41:	57                   	push   edi
c0019b42:	e8 01 f6 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019b47:	83 c4 10             	add    esp,0x10
c0019b4a:	4d                   	dec    ebp
c0019b4b:	75 ed                	jne    c0019b3a <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b4d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b52:	50                   	push   eax
c0019b53:	6a 0c                	push   0xc
c0019b55:	56                   	push   esi
c0019b56:	57                   	push   edi
c0019b57:	e8 ec f5 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019b5c:	83 c4 10             	add    esp,0x10
c0019b5f:	a8 01                	test   al,0x1
c0019b61:	75 17                	jne    c0019b7a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b63:	a8 20                	test   al,0x20
c0019b65:	75 0f                	jne    c0019b76 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b67:	4b                   	dec    ebx
c0019b68:	74 10                	je     c0019b7a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b6a:	84 c0                	test   al,al
c0019b6c:	78 e4                	js     c0019b52 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b6e:	a8 08                	test   al,0x8
c0019b70:	74 e0                	je     c0019b52 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b72:	31 c0                	xor    eax,eax
c0019b74:	eb 06                	jmp    c0019b7c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b76:	b0 01                	mov    al,0x1
c0019b78:	eb 02                	jmp    c0019b7c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b7a:	b0 02                	mov    al,0x2
c0019b7c:	83 c4 0c             	add    esp,0xc
c0019b7f:	5b                   	pop    ebx
c0019b80:	5e                   	pop    esi
c0019b81:	5f                   	pop    edi
c0019b82:	5d                   	pop    ebp
c0019b83:	c3                   	ret    

c0019b84 <SATABus::close(int, int, void*)>:
c0019b84:	31 c0                	xor    eax,eax
c0019b86:	c3                   	ret    
c0019b87:	90                   	nop

c0019b88 <SATABus::detect()>:
c0019b88:	c3                   	ret    
c0019b89:	90                   	nop

c0019b8a <SATABus::SATABus()>:
c0019b8a:	83 ec 0c             	sub    esp,0xc
c0019b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b91:	83 ec 08             	sub    esp,0x8
c0019b94:	68 c0 f2 01 c0       	push   0xc001f2c0
c0019b99:	50                   	push   eax
c0019b9a:	e8 cd 27 ff ff       	call   c000c36c <HardDiskController::HardDiskController(char const*)>
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	ba ec f2 01 c0       	mov    edx,0xc001f2ec
c0019ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bab:	89 10                	mov    DWORD PTR [eax],edx
c0019bad:	83 ec 0c             	sub    esp,0xc
c0019bb0:	6a 50                	push   0x50
c0019bb2:	e8 2d e7 fe ff       	call   c00082e4 <Phys::allocateContiguousPages(int)>
c0019bb7:	83 c4 10             	add    esp,0x10
c0019bba:	89 c2                	mov    edx,eax
c0019bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bc0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019bc6:	83 ec 0c             	sub    esp,0xc
c0019bc9:	6a 50                	push   0x50
c0019bcb:	e8 c5 fd fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c0019bd0:	83 c4 10             	add    esp,0x10
c0019bd3:	89 c2                	mov    edx,eax
c0019bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019bdf:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0019be4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019be8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bf2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019bf8:	83 ec 0c             	sub    esp,0xc
c0019bfb:	6a 03                	push   0x3
c0019bfd:	6a 50                	push   0x50
c0019bff:	51                   	push   ecx
c0019c00:	52                   	push   edx
c0019c01:	50                   	push   eax
c0019c02:	e8 1d 07 ff ff       	call   c000a324 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c07:	83 c4 20             	add    esp,0x20
c0019c0a:	90                   	nop
c0019c0b:	83 c4 0c             	add    esp,0xc
c0019c0e:	c3                   	ret    
c0019c0f:	90                   	nop

c0019c10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c14:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c1a:	09 c2                	or     edx,eax
c0019c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c26:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c28:	31 c0                	xor    eax,eax
c0019c2a:	c1 e9 08             	shr    ecx,0x8
c0019c2d:	83 e1 0f             	and    ecx,0xf
c0019c30:	39 c8                	cmp    eax,ecx
c0019c32:	74 0a                	je     c0019c3e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c34:	f6 c2 01             	test   dl,0x1
c0019c37:	74 08                	je     c0019c41 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c39:	d1 ea                	shr    edx,1
c0019c3b:	40                   	inc    eax
c0019c3c:	eb f2                	jmp    c0019c30 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c3e:	83 c8 ff             	or     eax,0xffffffff
c0019c41:	c3                   	ret    

c0019c42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c46:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c49:	89 c2                	mov    edx,eax
c0019c4b:	c1 ea 08             	shr    edx,0x8
c0019c4e:	83 e2 0f             	and    edx,0xf
c0019c51:	fe ca                	dec    dl
c0019c53:	75 31                	jne    c0019c86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c55:	83 e0 0f             	and    eax,0xf
c0019c58:	3c 03                	cmp    al,0x3
c0019c5a:	75 2a                	jne    c0019c86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c5c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c5f:	b8 02 00 00 00       	mov    eax,0x2
c0019c64:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c6a:	74 1c                	je     c0019c88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c6c:	b8 04 00 00 00       	mov    eax,0x4
c0019c71:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c77:	74 0f                	je     c0019c88 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c79:	31 c0                	xor    eax,eax
c0019c7b:	83 fa 03             	cmp    edx,0x3
c0019c7e:	0f 94 c0             	sete   al
c0019c81:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c85:	c3                   	ret    
c0019c86:	31 c0                	xor    eax,eax
c0019c88:	c3                   	ret    
c0019c89:	90                   	nop

c0019c8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c91:	0f ba e2 0f          	bt     edx,0xf
c0019c95:	72 f7                	jb     c0019c8e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019c97:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c9a:	83 ca 10             	or     edx,0x10
c0019c9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ca0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ca3:	83 ca 01             	or     edx,0x1
c0019ca6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ca9:	c3                   	ret    

c0019caa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019caa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cb1:	83 e2 fe             	and    edx,0xfffffffe
c0019cb4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cb7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cba:	83 e2 ef             	and    edx,0xffffffef
c0019cbd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cc3:	0f ba e2 0e          	bt     edx,0xe
c0019cc7:	72 f7                	jb     c0019cc0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cc9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ccc:	0f ba e2 0f          	bt     edx,0xf
c0019cd0:	72 ee                	jb     c0019cc0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cd2:	c3                   	ret    
c0019cd3:	90                   	nop

c0019cd4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019cd4:	55                   	push   ebp
c0019cd5:	57                   	push   edi
c0019cd6:	56                   	push   esi
c0019cd7:	53                   	push   ebx
c0019cd8:	83 ec 1c             	sub    esp,0x1c
c0019cdb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019cdf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019ce3:	53                   	push   ebx
c0019ce4:	56                   	push   esi
c0019ce5:	e8 c0 ff ff ff       	call   c0019caa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019cea:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019cee:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019cf4:	83 ec 0c             	sub    esp,0xc
c0019cf7:	c1 e5 0a             	shl    ebp,0xa
c0019cfa:	01 e8                	add    eax,ebp
c0019cfc:	89 03                	mov    DWORD PTR [ebx],eax
c0019cfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d00:	68 00 04 00 00       	push   0x400
c0019d05:	6a 00                	push   0x0
c0019d07:	50                   	push   eax
c0019d08:	e8 e3 67 fe ff       	call   c00004f0 <memset>
c0019d0d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d13:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d17:	01 e8                	add    eax,ebp
c0019d19:	83 c4 1c             	add    esp,0x1c
c0019d1c:	89 03                	mov    DWORD PTR [ebx],eax
c0019d1e:	c1 e2 08             	shl    edx,0x8
c0019d21:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d28:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d2e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d34:	01 f8                	add    eax,edi
c0019d36:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d39:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d3c:	68 00 01 00 00       	push   0x100
c0019d41:	6a 00                	push   0x0
c0019d43:	50                   	push   eax
c0019d44:	e8 a7 67 fe ff       	call   c00004f0 <memset>
c0019d49:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d4f:	01 fa                	add    edx,edi
c0019d51:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d55:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d58:	c1 e7 0d             	shl    edi,0xd
c0019d5b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d62:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d68:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d72:	31 ff                	xor    edi,edi
c0019d74:	83 c4 10             	add    esp,0x10
c0019d77:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d81:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d87:	83 c5 20             	add    ebp,0x20
c0019d8a:	01 f8                	add    eax,edi
c0019d8c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d8f:	52                   	push   edx
c0019d90:	68 00 01 00 00       	push   0x100
c0019d95:	6a 00                	push   0x0
c0019d97:	50                   	push   eax
c0019d98:	e8 53 67 fe ff       	call   c00004f0 <memset>
c0019d9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019daa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019db1:	01 f8                	add    eax,edi
c0019db3:	81 c7 00 01 00 00    	add    edi,0x100
c0019db9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dbc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019dc2:	75 b3                	jne    c0019d77 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019dc4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019dcb:	50                   	push   eax
c0019dcc:	50                   	push   eax
c0019dcd:	53                   	push   ebx
c0019dce:	56                   	push   esi
c0019dcf:	e8 b6 fe ff ff       	call   c0019c8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019dd4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019ddb:	83 c4 2c             	add    esp,0x2c
c0019dde:	5b                   	pop    ebx
c0019ddf:	5e                   	pop    esi
c0019de0:	5f                   	pop    edi
c0019de1:	5d                   	pop    ebp
c0019de2:	c3                   	ret    
c0019de3:	90                   	nop

c0019de4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019de4:	55                   	push   ebp
c0019de5:	57                   	push   edi
c0019de6:	56                   	push   esi
c0019de7:	53                   	push   ebx
c0019de8:	31 db                	xor    ebx,ebx
c0019dea:	83 ec 0c             	sub    esp,0xc
c0019ded:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019df1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019df5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019df8:	f7 c7 01 00 00 00    	test   edi,0x1
c0019dfe:	74 7a                	je     c0019e7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e00:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e04:	89 d8                	mov    eax,ebx
c0019e06:	c1 e0 07             	shl    eax,0x7
c0019e09:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e10:	55                   	push   ebp
c0019e11:	56                   	push   esi
c0019e12:	e8 2b fe ff ff       	call   c0019c42 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e17:	5a                   	pop    edx
c0019e18:	83 f8 01             	cmp    eax,0x1
c0019e1b:	59                   	pop    ecx
c0019e1c:	75 21                	jne    c0019e3f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e1e:	50                   	push   eax
c0019e1f:	53                   	push   ebx
c0019e20:	55                   	push   ebp
c0019e21:	56                   	push   esi
c0019e22:	e8 ad fe ff ff       	call   c0019cd4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e27:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e2e:	e8 26 e0 fe ff       	call   c0007e59 <malloc>
c0019e33:	89 c5                	mov    ebp,eax
c0019e35:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e38:	e8 43 0d 00 00       	call   c001ab80 <SATA::SATA()>
c0019e3d:	eb 24                	jmp    c0019e63 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e3f:	83 f8 04             	cmp    eax,0x4
c0019e42:	75 36                	jne    c0019e7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e44:	51                   	push   ecx
c0019e45:	53                   	push   ebx
c0019e46:	55                   	push   ebp
c0019e47:	56                   	push   esi
c0019e48:	e8 87 fe ff ff       	call   c0019cd4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e4d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e54:	e8 00 e0 fe ff       	call   c0007e59 <malloc>
c0019e59:	89 c5                	mov    ebp,eax
c0019e5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e5e:	e8 79 10 00 00       	call   c001aedc <SATAPI::SATAPI()>
c0019e63:	58                   	pop    eax
c0019e64:	5a                   	pop    edx
c0019e65:	55                   	push   ebp
c0019e66:	56                   	push   esi
c0019e67:	e8 bc 21 ff ff       	call   c000c028 <Device::addChild(Device*)>
c0019e6c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e6f:	56                   	push   esi
c0019e70:	6a 00                	push   0x0
c0019e72:	53                   	push   ebx
c0019e73:	55                   	push   ebp
c0019e74:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e77:	83 c4 20             	add    esp,0x20
c0019e7a:	d1 ef                	shr    edi,1
c0019e7c:	43                   	inc    ebx
c0019e7d:	83 fb 20             	cmp    ebx,0x20
c0019e80:	0f 85 72 ff ff ff    	jne    c0019df8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e86:	83 c4 0c             	add    esp,0xc
c0019e89:	5b                   	pop    ebx
c0019e8a:	5e                   	pop    esi
c0019e8b:	5f                   	pop    edi
c0019e8c:	5d                   	pop    ebp
c0019e8d:	c3                   	ret    

c0019e8e <SATABus::open(int, int, void*)>:
c0019e8e:	83 ec 14             	sub    esp,0x14
c0019e91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e95:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019e9b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ea1:	52                   	push   edx
c0019ea2:	50                   	push   eax
c0019ea3:	e8 3c ff ff ff       	call   c0019de4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019ea8:	31 c0                	xor    eax,eax
c0019eaa:	83 c4 1c             	add    esp,0x1c
c0019ead:	c3                   	ret    

c0019eae <ATA::close(int, int, void*)>:
c0019eae:	83 ec 0c             	sub    esp,0xc
c0019eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ebb:	85 c0                	test   eax,eax
c0019ebd:	74 0c                	je     c0019ecb <ATA::close(int, int, void*)+0x1d>
c0019ebf:	83 ec 0c             	sub    esp,0xc
c0019ec2:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ec4:	50                   	push   eax
c0019ec5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ec8:	83 c4 10             	add    esp,0x10
c0019ecb:	31 c0                	xor    eax,eax
c0019ecd:	83 c4 0c             	add    esp,0xc
c0019ed0:	c3                   	ret    
c0019ed1:	90                   	nop

c0019ed2 <ATA::powerSaving(PowerSavingLevel)>:
c0019ed2:	c3                   	ret    
c0019ed3:	90                   	nop

c0019ed4 <ATA::ATA()>:
c0019ed4:	83 ec 0c             	sub    esp,0xc
c0019ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019edb:	83 ec 04             	sub    esp,0x4
c0019ede:	68 00 02 00 00       	push   0x200
c0019ee3:	68 b9 f3 01 c0       	push   0xc001f3b9
c0019ee8:	50                   	push   eax
c0019ee9:	e8 08 25 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019eee:	83 c4 10             	add    esp,0x10
c0019ef1:	ba 2c f3 01 c0       	mov    edx,0xc001f32c
c0019ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019efa:	89 10                	mov    DWORD PTR [eax],edx
c0019efc:	90                   	nop
c0019efd:	83 c4 0c             	add    esp,0xc
c0019f00:	c3                   	ret    
c0019f01:	90                   	nop

c0019f02 <ATA::flush(bool)>:
c0019f02:	53                   	push   ebx
c0019f03:	83 ec 08             	sub    esp,0x8
c0019f06:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f0f:	19 c0                	sbb    eax,eax
c0019f11:	83 e0 fd             	and    eax,0xfffffffd
c0019f14:	05 ea 00 00 00       	add    eax,0xea
c0019f19:	50                   	push   eax
c0019f1a:	6a 07                	push   0x7
c0019f1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f23:	50                   	push   eax
c0019f24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f2a:	e8 59 f1 ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f2f:	83 c4 0c             	add    esp,0xc
c0019f32:	6a 00                	push   0x0
c0019f34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f3b:	50                   	push   eax
c0019f3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f42:	e8 df fb ff ff       	call   c0019b26 <IDE::polling(unsigned char, unsigned int)>
c0019f47:	83 c4 18             	add    esp,0x18
c0019f4a:	5b                   	pop    ebx
c0019f4b:	c3                   	ret    

c0019f4c <ATA::readyForCommand()>:
c0019f4c:	56                   	push   esi
c0019f4d:	53                   	push   ebx
c0019f4e:	53                   	push   ebx
c0019f4f:	31 db                	xor    ebx,ebx
c0019f51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f55:	51                   	push   ecx
c0019f56:	6a 0c                	push   0xc
c0019f58:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f5f:	50                   	push   eax
c0019f60:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f66:	e8 dd f1 ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c0019f6b:	83 c4 10             	add    esp,0x10
c0019f6e:	a8 88                	test   al,0x88
c0019f70:	74 1f                	je     c0019f91 <ATA::readyForCommand()+0x45>
c0019f72:	43                   	inc    ebx
c0019f73:	83 fb 63             	cmp    ebx,0x63
c0019f76:	7e dd                	jle    c0019f55 <ATA::readyForCommand()+0x9>
c0019f78:	83 ec 0c             	sub    esp,0xc
c0019f7b:	6a 0a                	push   0xa
c0019f7d:	e8 a6 9d ff ff       	call   c0013d28 <milliTenthSleep(unsigned int)>
c0019f82:	83 c4 10             	add    esp,0x10
c0019f85:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f8b:	75 c8                	jne    c0019f55 <ATA::readyForCommand()+0x9>
c0019f8d:	31 c0                	xor    eax,eax
c0019f8f:	eb 02                	jmp    c0019f93 <ATA::readyForCommand()+0x47>
c0019f91:	b0 01                	mov    al,0x1
c0019f93:	5a                   	pop    edx
c0019f94:	5b                   	pop    ebx
c0019f95:	5e                   	pop    esi
c0019f96:	c3                   	ret    
c0019f97:	90                   	nop

c0019f98 <ATA::access(unsigned long long, int, void*, bool)>:
c0019f98:	55                   	push   ebp
c0019f99:	57                   	push   edi
c0019f9a:	56                   	push   esi
c0019f9b:	53                   	push   ebx
c0019f9c:	83 ec 2c             	sub    esp,0x2c
c0019f9f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019fa3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fa7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019fab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019faf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fb3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019fb7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fbb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019fc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fc5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019fcb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019fcf:	c1 e0 06             	shl    eax,0x6
c0019fd2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019fda:	74 5d                	je     c001a039 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019fdc:	89 fa                	mov    edx,edi
c0019fde:	89 f0                	mov    eax,esi
c0019fe0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019fe4:	c1 ea 1c             	shr    edx,0x1c
c0019fe7:	89 d1                	mov    ecx,edx
c0019fe9:	09 c1                	or     ecx,eax
c0019feb:	74 25                	je     c001a012 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019fed:	31 ed                	xor    ebp,ebp
c0019fef:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019ff6:	89 fa                	mov    edx,edi
c0019ff8:	89 f0                	mov    eax,esi
c0019ffa:	0f ad d0             	shrd   eax,edx,cl
c0019ffd:	d3 ea                	shr    edx,cl
c0019fff:	f6 c1 20             	test   cl,0x20
c001a002:	74 02                	je     c001a006 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a004:	89 d0                	mov    eax,edx
c001a006:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a00a:	45                   	inc    ebp
c001a00b:	83 fd 06             	cmp    ebp,0x6
c001a00e:	75 df                	jne    c0019fef <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a010:	eb 76                	jmp    c001a088 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a012:	89 f0                	mov    eax,esi
c001a014:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a019:	89 fa                	mov    edx,edi
c001a01b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a022:	0f ac d0 10          	shrd   eax,edx,0x10
c001a026:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a02b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a02f:	c1 ee 18             	shr    esi,0x18
c001a032:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a037:	eb 56                	jmp    c001a08f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a039:	6a 00                	push   0x0
c001a03b:	6a 3f                	push   0x3f
c001a03d:	57                   	push   edi
c001a03e:	56                   	push   esi
c001a03f:	e8 5c 22 00 00       	call   c001c2a0 <__umoddi3>
c001a044:	83 c4 10             	add    esp,0x10
c001a047:	40                   	inc    eax
c001a048:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a04c:	6a 00                	push   0x0
c001a04e:	68 f0 03 00 00       	push   0x3f0
c001a053:	57                   	push   edi
c001a054:	56                   	push   esi
c001a055:	e8 46 21 00 00       	call   c001c1a0 <__udivdi3>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a062:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a069:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a06e:	6a 00                	push   0x0
c001a070:	6a 3f                	push   0x3f
c001a072:	57                   	push   edi
c001a073:	56                   	push   esi
c001a074:	e8 27 21 00 00       	call   c001c1a0 <__udivdi3>
c001a079:	83 c4 10             	add    esp,0x10
c001a07c:	89 c6                	mov    esi,eax
c001a07e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a083:	83 e6 0f             	and    esi,0xf
c001a086:	eb 07                	jmp    c001a08f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a088:	31 f6                	xor    esi,esi
c001a08a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a08f:	bf 01 00 00 00       	mov    edi,0x1
c001a094:	50                   	push   eax
c001a095:	6a 00                	push   0x0
c001a097:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a09e:	50                   	push   eax
c001a09f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0a3:	e8 ee f1 ff ff       	call   c0019296 <IDE::enableIRQs(unsigned char, bool)>
c001a0a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0ab:	e8 9c fe ff ff       	call   c0019f4c <ATA::readyForCommand()>
c001a0b0:	83 c4 10             	add    esp,0x10
c001a0b3:	84 c0                	test   al,al
c001a0b5:	0f 84 4e 02 00 00    	je     c001a309 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a0bb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0c1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0c7:	c1 e0 04             	shl    eax,0x4
c001a0ca:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a0d1:	09 c6                	or     esi,eax
c001a0d3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a0d8:	75 05                	jne    c001a0df <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a0da:	83 ce a0             	or     esi,0xffffffa0
c001a0dd:	eb 03                	jmp    c001a0e2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a0df:	83 ce e0             	or     esi,0xffffffe0
c001a0e2:	89 f0                	mov    eax,esi
c001a0e4:	0f b6 f0             	movzx  esi,al
c001a0e7:	56                   	push   esi
c001a0e8:	6a 06                	push   0x6
c001a0ea:	51                   	push   ecx
c001a0eb:	52                   	push   edx
c001a0ec:	e8 97 ef ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	6a 00                	push   0x0
c001a0f6:	6a 01                	push   0x1
c001a0f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0ff:	50                   	push   eax
c001a100:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a106:	e8 7d ef ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a113:	75 6e                	jne    c001a183 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a115:	6a 00                	push   0x0
c001a117:	6a 08                	push   0x8
c001a119:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a120:	50                   	push   eax
c001a121:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a127:	e8 5c ef ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a12c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a131:	50                   	push   eax
c001a132:	6a 09                	push   0x9
c001a134:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a13b:	50                   	push   eax
c001a13c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a142:	e8 41 ef ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a147:	83 c4 20             	add    esp,0x20
c001a14a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a14f:	50                   	push   eax
c001a150:	6a 0a                	push   0xa
c001a152:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a159:	50                   	push   eax
c001a15a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a160:	e8 23 ef ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a165:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a16a:	50                   	push   eax
c001a16b:	6a 0b                	push   0xb
c001a16d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a174:	50                   	push   eax
c001a175:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a17b:	e8 08 ef ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a180:	83 c4 20             	add    esp,0x20
c001a183:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a188:	50                   	push   eax
c001a189:	6a 02                	push   0x2
c001a18b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a192:	50                   	push   eax
c001a193:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a199:	e8 ea ee ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a19e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1a3:	50                   	push   eax
c001a1a4:	6a 03                	push   0x3
c001a1a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1ad:	50                   	push   eax
c001a1ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b4:	e8 cf ee ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b9:	83 c4 20             	add    esp,0x20
c001a1bc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a1c1:	50                   	push   eax
c001a1c2:	6a 04                	push   0x4
c001a1c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1cb:	50                   	push   eax
c001a1cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1d2:	e8 b1 ee ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1dc:	50                   	push   eax
c001a1dd:	6a 05                	push   0x5
c001a1df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e6:	50                   	push   eax
c001a1e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ed:	e8 96 ee ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1f2:	83 c4 20             	add    esp,0x20
c001a1f5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1fa:	0f 94 c0             	sete   al
c001a1fd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a202:	74 09                	je     c001a20d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a204:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a20b:	eb 07                	jmp    c001a214 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a20d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a214:	0f b6 c0             	movzx  eax,al
c001a217:	50                   	push   eax
c001a218:	6a 07                	push   0x7
c001a21a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a221:	50                   	push   eax
c001a222:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a228:	e8 5b ee ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a22d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a231:	83 c4 10             	add    esp,0x10
c001a234:	85 f6                	test   esi,esi
c001a236:	0f 84 ae 00 00 00    	je     c001a2ea <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a23c:	50                   	push   eax
c001a23d:	6a 01                	push   0x1
c001a23f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a246:	50                   	push   eax
c001a247:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a24d:	e8 d4 f8 ff ff       	call   c0019b26 <IDE::polling(unsigned char, unsigned int)>
c001a252:	83 c4 10             	add    esp,0x10
c001a255:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a25b:	84 c0                	test   al,al
c001a25d:	74 20                	je     c001a27f <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a25f:	0f b6 f8             	movzx  edi,al
c001a262:	0f b6 d2             	movzx  edx,dl
c001a265:	57                   	push   edi
c001a266:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a26d:	50                   	push   eax
c001a26e:	52                   	push   edx
c001a26f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a275:	e8 fc f7 ff ff       	call   c0019a76 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a27a:	e9 87 00 00 00       	jmp    c001a306 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a27f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a284:	74 33                	je     c001a2b9 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a286:	31 ed                	xor    ebp,ebp
c001a288:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a28c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a290:	50                   	push   eax
c001a291:	50                   	push   eax
c001a292:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a299:	50                   	push   eax
c001a29a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2a0:	e8 d1 ed ff ff       	call   c0019076 <IDE::getBase(unsigned char)>
c001a2a5:	89 c2                	mov    edx,eax
c001a2a7:	89 f8                	mov    eax,edi
c001a2a9:	66 ef                	out    dx,ax
c001a2ab:	45                   	inc    ebp
c001a2ac:	83 c4 10             	add    esp,0x10
c001a2af:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2b5:	75 d1                	jne    c001a288 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2b7:	eb 23                	jmp    c001a2dc <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a2b9:	0f b6 d2             	movzx  edx,dl
c001a2bc:	51                   	push   ecx
c001a2bd:	51                   	push   ecx
c001a2be:	52                   	push   edx
c001a2bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2c5:	e8 ac ed ff ff       	call   c0019076 <IDE::getBase(unsigned char)>
c001a2ca:	b9 00 01 00 00       	mov    ecx,0x100
c001a2cf:	89 c2                	mov    edx,eax
c001a2d1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a2d5:	fc                   	cld    
c001a2d6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a2d9:	83 c4 10             	add    esp,0x10
c001a2dc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a2e4:	4e                   	dec    esi
c001a2e5:	e9 4a ff ff ff       	jmp    c001a234 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a2ea:	31 ff                	xor    edi,edi
c001a2ec:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2f1:	74 16                	je     c001a309 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a2f3:	50                   	push   eax
c001a2f4:	50                   	push   eax
c001a2f5:	31 c0                	xor    eax,eax
c001a2f7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a2fc:	0f 94 c0             	sete   al
c001a2ff:	50                   	push   eax
c001a300:	53                   	push   ebx
c001a301:	e8 fc fb ff ff       	call   c0019f02 <ATA::flush(bool)>
c001a306:	83 c4 10             	add    esp,0x10
c001a309:	83 c4 2c             	add    esp,0x2c
c001a30c:	89 f8                	mov    eax,edi
c001a30e:	5b                   	pop    ebx
c001a30f:	5e                   	pop    esi
c001a310:	5f                   	pop    edi
c001a311:	5d                   	pop    ebp
c001a312:	c3                   	ret    
c001a313:	90                   	nop

c001a314 <ATA::read(unsigned long long, int, void*)>:
c001a314:	57                   	push   edi
c001a315:	b8 04 00 00 00       	mov    eax,0x4
c001a31a:	56                   	push   esi
c001a31b:	53                   	push   ebx
c001a31c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a320:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a324:	8d 7a ff             	lea    edi,[edx-0x1]
c001a327:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a32b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a32f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a335:	77 25                	ja     c001a35c <ATA::read(unsigned long long, int, void*)+0x48>
c001a337:	b8 06 00 00 00       	mov    eax,0x6
c001a33c:	85 f6                	test   esi,esi
c001a33e:	74 1c                	je     c001a35c <ATA::read(unsigned long long, int, void*)+0x48>
c001a340:	50                   	push   eax
c001a341:	50                   	push   eax
c001a342:	6a 00                	push   0x0
c001a344:	56                   	push   esi
c001a345:	52                   	push   edx
c001a346:	53                   	push   ebx
c001a347:	51                   	push   ecx
c001a348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a34c:	e8 47 fc ff ff       	call   c0019f98 <ATA::access(unsigned long long, int, void*, bool)>
c001a351:	83 c4 20             	add    esp,0x20
c001a354:	85 c0                	test   eax,eax
c001a356:	0f 95 c0             	setne  al
c001a359:	0f b6 c0             	movzx  eax,al
c001a35c:	5b                   	pop    ebx
c001a35d:	5e                   	pop    esi
c001a35e:	5f                   	pop    edi
c001a35f:	c3                   	ret    

c001a360 <ATA::write(unsigned long long, int, void*)>:
c001a360:	57                   	push   edi
c001a361:	b8 04 00 00 00       	mov    eax,0x4
c001a366:	56                   	push   esi
c001a367:	53                   	push   ebx
c001a368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a36c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a370:	8d 7a ff             	lea    edi,[edx-0x1]
c001a373:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a377:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a37b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a381:	77 25                	ja     c001a3a8 <ATA::write(unsigned long long, int, void*)+0x48>
c001a383:	b8 06 00 00 00       	mov    eax,0x6
c001a388:	85 f6                	test   esi,esi
c001a38a:	74 1c                	je     c001a3a8 <ATA::write(unsigned long long, int, void*)+0x48>
c001a38c:	50                   	push   eax
c001a38d:	50                   	push   eax
c001a38e:	6a 01                	push   0x1
c001a390:	56                   	push   esi
c001a391:	52                   	push   edx
c001a392:	53                   	push   ebx
c001a393:	51                   	push   ecx
c001a394:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a398:	e8 fb fb ff ff       	call   c0019f98 <ATA::access(unsigned long long, int, void*, bool)>
c001a39d:	83 c4 20             	add    esp,0x20
c001a3a0:	85 c0                	test   eax,eax
c001a3a2:	0f 95 c0             	setne  al
c001a3a5:	0f b6 c0             	movzx  eax,al
c001a3a8:	5b                   	pop    ebx
c001a3a9:	5e                   	pop    esi
c001a3aa:	5f                   	pop    edi
c001a3ab:	c3                   	ret    

c001a3ac <ATA::detectCHS()>:
c001a3ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3b0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a3b6:	c1 e0 06             	shl    eax,0x6
c001a3b9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a3bf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a3c9:	c7 44 24 04 10 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f310
c001a3d1:	e9 fd 62 ff ff       	jmp    c00106d3 <Krnl::panic(char const*)>

c001a3d6 <ATA::open(int, int, void*)>:
c001a3d6:	53                   	push   ebx
c001a3d7:	83 ec 08             	sub    esp,0x8
c001a3da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3e6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3ec:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a3f2:	c1 e0 06             	shl    eax,0x6
c001a3f5:	01 d0                	add    eax,edx
c001a3f7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a3fe:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a404:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a40b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a415:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a41b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a422:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a429:	75 0c                	jne    c001a437 <ATA::open(int, int, void*)+0x61>
c001a42b:	83 ec 0c             	sub    esp,0xc
c001a42e:	53                   	push   ebx
c001a42f:	e8 78 ff ff ff       	call   c001a3ac <ATA::detectCHS()>
c001a434:	83 c4 10             	add    esp,0x10
c001a437:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a43d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a443:	c1 e0 06             	shl    eax,0x6
c001a446:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a44d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a457:	d1 e8                	shr    eax,1
c001a459:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a45f:	6a 04                	push   0x4
c001a461:	6a 0c                	push   0xc
c001a463:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a46a:	50                   	push   eax
c001a46b:	52                   	push   edx
c001a46c:	e8 17 ec ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a471:	90                   	nop
c001a472:	90                   	nop
c001a473:	6a 00                	push   0x0
c001a475:	6a 0c                	push   0xc
c001a477:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a47e:	50                   	push   eax
c001a47f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a485:	e8 fe eb ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a48a:	83 c4 14             	add    esp,0x14
c001a48d:	53                   	push   ebx
c001a48e:	e8 cb 1f ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001a493:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a496:	e8 3b 30 ff ff       	call   c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>
c001a49b:	31 c0                	xor    eax,eax
c001a49d:	83 c4 18             	add    esp,0x18
c001a4a0:	5b                   	pop    ebx
c001a4a1:	c3                   	ret    

c001a4a2 <ATAPI::write(unsigned long long, int, void*)>:
c001a4a2:	b8 03 00 00 00       	mov    eax,0x3
c001a4a7:	c3                   	ret    

c001a4a8 <ATAPI::close(int, int, void*)>:
c001a4a8:	83 ec 0c             	sub    esp,0xc
c001a4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4b5:	85 c0                	test   eax,eax
c001a4b7:	74 0c                	je     c001a4c5 <ATAPI::close(int, int, void*)+0x1d>
c001a4b9:	83 ec 0c             	sub    esp,0xc
c001a4bc:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4be:	50                   	push   eax
c001a4bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a4c2:	83 c4 10             	add    esp,0x10
c001a4c5:	31 c0                	xor    eax,eax
c001a4c7:	83 c4 0c             	add    esp,0xc
c001a4ca:	c3                   	ret    
c001a4cb:	90                   	nop

c001a4cc <ATAPI::ATAPI()>:
c001a4cc:	83 ec 0c             	sub    esp,0xc
c001a4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4d3:	83 ec 04             	sub    esp,0x4
c001a4d6:	68 00 08 00 00       	push   0x800
c001a4db:	68 59 f4 01 c0       	push   0xc001f459
c001a4e0:	50                   	push   eax
c001a4e1:	e8 10 1f ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a4e6:	83 c4 10             	add    esp,0x10
c001a4e9:	ba 74 f3 01 c0       	mov    edx,0xc001f374
c001a4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4f2:	89 10                	mov    DWORD PTR [eax],edx
c001a4f4:	90                   	nop
c001a4f5:	83 c4 0c             	add    esp,0xc
c001a4f8:	c3                   	ret    
c001a4f9:	90                   	nop

c001a4fa <ATAPI::readyForCommand()>:
c001a4fa:	56                   	push   esi
c001a4fb:	53                   	push   ebx
c001a4fc:	53                   	push   ebx
c001a4fd:	31 db                	xor    ebx,ebx
c001a4ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a503:	51                   	push   ecx
c001a504:	6a 0c                	push   0xc
c001a506:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a50d:	50                   	push   eax
c001a50e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a514:	e8 2f ec ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	a8 88                	test   al,0x88
c001a51e:	74 25                	je     c001a545 <ATAPI::readyForCommand()+0x4b>
c001a520:	43                   	inc    ebx
c001a521:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a527:	7e da                	jle    c001a503 <ATAPI::readyForCommand()+0x9>
c001a529:	83 ec 0c             	sub    esp,0xc
c001a52c:	68 5e 01 00 00       	push   0x15e
c001a531:	e8 f2 97 ff ff       	call   c0013d28 <milliTenthSleep(unsigned int)>
c001a536:	83 c4 10             	add    esp,0x10
c001a539:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a53f:	75 c2                	jne    c001a503 <ATAPI::readyForCommand()+0x9>
c001a541:	31 c0                	xor    eax,eax
c001a543:	eb 02                	jmp    c001a547 <ATAPI::readyForCommand()+0x4d>
c001a545:	b0 01                	mov    al,0x1
c001a547:	5a                   	pop    edx
c001a548:	5b                   	pop    ebx
c001a549:	5e                   	pop    esi
c001a54a:	c3                   	ret    
c001a54b:	90                   	nop

c001a54c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a54c:	55                   	push   ebp
c001a54d:	57                   	push   edi
c001a54e:	56                   	push   esi
c001a54f:	53                   	push   ebx
c001a550:	83 ec 20             	sub    esp,0x20
c001a553:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a557:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a55b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a55f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a563:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a567:	6a 01                	push   0x1
c001a569:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a570:	50                   	push   eax
c001a571:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a577:	e8 1a ed ff ff       	call   c0019296 <IDE::enableIRQs(unsigned char, bool)>
c001a57c:	5e                   	pop    esi
c001a57d:	58                   	pop    eax
c001a57e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a585:	50                   	push   eax
c001a586:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a58c:	e8 d1 ea ff ff       	call   c0019062 <IDE::prepareInterrupt(unsigned char)>
c001a591:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a594:	e8 61 ff ff ff       	call   c001a4fa <ATAPI::readyForCommand()>
c001a599:	83 c4 10             	add    esp,0x10
c001a59c:	84 c0                	test   al,al
c001a59e:	75 0a                	jne    c001a5aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a5a0:	bb 01 00 00 00       	mov    ebx,0x1
c001a5a5:	e9 57 02 00 00       	jmp    c001a801 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5aa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a5b0:	c1 e0 04             	shl    eax,0x4
c001a5b3:	0f b6 c0             	movzx  eax,al
c001a5b6:	50                   	push   eax
c001a5b7:	6a 06                	push   0x6
c001a5b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5c0:	50                   	push   eax
c001a5c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5c7:	e8 bc ea ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5cc:	6a 00                	push   0x0
c001a5ce:	6a 01                	push   0x1
c001a5d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5d7:	50                   	push   eax
c001a5d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5de:	e8 a5 ea ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5e3:	83 c4 20             	add    esp,0x20
c001a5e6:	0f b6 c3             	movzx  eax,bl
c001a5e9:	0f b6 df             	movzx  ebx,bh
c001a5ec:	50                   	push   eax
c001a5ed:	6a 04                	push   0x4
c001a5ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5f6:	50                   	push   eax
c001a5f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5fd:	e8 86 ea ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a602:	53                   	push   ebx
c001a603:	6a 05                	push   0x5
c001a605:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a60c:	50                   	push   eax
c001a60d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a613:	e8 70 ea ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a618:	83 c4 20             	add    esp,0x20
c001a61b:	68 a0 00 00 00       	push   0xa0
c001a620:	6a 07                	push   0x7
c001a622:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a629:	50                   	push   eax
c001a62a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a630:	e8 53 ea ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a635:	83 c4 0c             	add    esp,0xc
c001a638:	6a 01                	push   0x1
c001a63a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a641:	50                   	push   eax
c001a642:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a648:	e8 d9 f4 ff ff       	call   c0019b26 <IDE::polling(unsigned char, unsigned int)>
c001a64d:	83 c4 10             	add    esp,0x10
c001a650:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a656:	84 c0                	test   al,al
c001a658:	74 23                	je     c001a67d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a65a:	0f b6 d8             	movzx  ebx,al
c001a65d:	0f b6 d2             	movzx  edx,dl
c001a660:	53                   	push   ebx
c001a661:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a668:	50                   	push   eax
c001a669:	52                   	push   edx
c001a66a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a670:	e8 01 f4 ff ff       	call   c0019a76 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a675:	83 c4 10             	add    esp,0x10
c001a678:	e9 84 01 00 00       	jmp    c001a801 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a67d:	0f b6 d2             	movzx  edx,dl
c001a680:	53                   	push   ebx
c001a681:	53                   	push   ebx
c001a682:	52                   	push   edx
c001a683:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a689:	e8 e8 e9 ff ff       	call   c0019076 <IDE::getBase(unsigned char)>
c001a68e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a692:	b9 06 00 00 00       	mov    ecx,0x6
c001a697:	89 c2                	mov    edx,eax
c001a699:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a69c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a6a0:	83 c4 10             	add    esp,0x10
c001a6a3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6a9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6b0:	85 db                	test   ebx,ebx
c001a6b2:	0f 84 ec 00 00 00    	je     c001a7a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a6b8:	51                   	push   ecx
c001a6b9:	51                   	push   ecx
c001a6ba:	52                   	push   edx
c001a6bb:	50                   	push   eax
c001a6bc:	e8 35 eb ff ff       	call   c00191f6 <IDE::waitInterrupt(unsigned char)>
c001a6c1:	83 c4 10             	add    esp,0x10
c001a6c4:	84 c0                	test   al,al
c001a6c6:	0f 84 d4 fe ff ff    	je     c001a5a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6cc:	56                   	push   esi
c001a6cd:	56                   	push   esi
c001a6ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6d5:	50                   	push   eax
c001a6d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6dc:	e8 81 e9 ff ff       	call   c0019062 <IDE::prepareInterrupt(unsigned char)>
c001a6e1:	83 c4 0c             	add    esp,0xc
c001a6e4:	6a 04                	push   0x4
c001a6e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6ed:	50                   	push   eax
c001a6ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f4:	e8 4f ea ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c001a6f9:	83 c4 0c             	add    esp,0xc
c001a6fc:	89 c6                	mov    esi,eax
c001a6fe:	6a 05                	push   0x5
c001a700:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a707:	50                   	push   eax
c001a708:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a70e:	e8 35 ea ff ff       	call   c0019148 <IDE::read(unsigned char, unsigned char)>
c001a713:	89 f1                	mov    ecx,esi
c001a715:	0f b6 c0             	movzx  eax,al
c001a718:	0f b6 f1             	movzx  esi,cl
c001a71b:	c1 e0 08             	shl    eax,0x8
c001a71e:	09 c6                	or     esi,eax
c001a720:	d1 fe                	sar    esi,1
c001a722:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a72e:	74 41                	je     c001a771 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a730:	31 c9                	xor    ecx,ecx
c001a732:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a738:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a73f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a743:	75 0a                	jne    c001a74f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a745:	01 c9                	add    ecx,ecx
c001a747:	01 cd                	add    ebp,ecx
c001a749:	4b                   	dec    ebx
c001a74a:	e9 54 ff ff ff       	jmp    c001a6a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a74f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a754:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a758:	51                   	push   ecx
c001a759:	51                   	push   ecx
c001a75a:	52                   	push   edx
c001a75b:	50                   	push   eax
c001a75c:	e8 15 e9 ff ff       	call   c0019076 <IDE::getBase(unsigned char)>
c001a761:	89 c2                	mov    edx,eax
c001a763:	89 f0                	mov    eax,esi
c001a765:	66 ef                	out    dx,ax
c001a767:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a76b:	83 c4 10             	add    esp,0x10
c001a76e:	41                   	inc    ecx
c001a76f:	eb c1                	jmp    c001a732 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a771:	31 f6                	xor    esi,esi
c001a773:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a779:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a780:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a784:	75 06                	jne    c001a78c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a786:	01 f6                	add    esi,esi
c001a788:	01 f5                	add    ebp,esi
c001a78a:	eb bd                	jmp    c001a749 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a78c:	51                   	push   ecx
c001a78d:	51                   	push   ecx
c001a78e:	52                   	push   edx
c001a78f:	50                   	push   eax
c001a790:	e8 e1 e8 ff ff       	call   c0019076 <IDE::getBase(unsigned char)>
c001a795:	89 c2                	mov    edx,eax
c001a797:	66 ed                	in     ax,dx
c001a799:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a79e:	83 c4 10             	add    esp,0x10
c001a7a1:	46                   	inc    esi
c001a7a2:	eb cf                	jmp    c001a773 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a7a4:	51                   	push   ecx
c001a7a5:	51                   	push   ecx
c001a7a6:	52                   	push   edx
c001a7a7:	50                   	push   eax
c001a7a8:	e8 49 ea ff ff       	call   c00191f6 <IDE::waitInterrupt(unsigned char)>
c001a7ad:	83 c4 10             	add    esp,0x10
c001a7b0:	84 c0                	test   al,al
c001a7b2:	0f 84 e8 fd ff ff    	je     c001a5a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a7b8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a7bd:	52                   	push   edx
c001a7be:	52                   	push   edx
c001a7bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7c6:	50                   	push   eax
c001a7c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7cd:	e8 90 e8 ff ff       	call   c0019062 <IDE::prepareInterrupt(unsigned char)>
c001a7d2:	83 c4 10             	add    esp,0x10
c001a7d5:	50                   	push   eax
c001a7d6:	50                   	push   eax
c001a7d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7de:	50                   	push   eax
c001a7df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7e5:	e8 8c e8 ff ff       	call   c0019076 <IDE::getBase(unsigned char)>
c001a7ea:	8d 50 07             	lea    edx,[eax+0x7]
c001a7ed:	ec                   	in     al,dx
c001a7ee:	83 c4 10             	add    esp,0x10
c001a7f1:	a8 88                	test   al,0x88
c001a7f3:	74 0a                	je     c001a7ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a7f5:	4b                   	dec    ebx
c001a7f6:	75 dd                	jne    c001a7d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a7f8:	bb 02 00 00 00       	mov    ebx,0x2
c001a7fd:	eb 02                	jmp    c001a801 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a7ff:	31 db                	xor    ebx,ebx
c001a801:	83 c4 1c             	add    esp,0x1c
c001a804:	89 d8                	mov    eax,ebx
c001a806:	5b                   	pop    ebx
c001a807:	5e                   	pop    esi
c001a808:	5f                   	pop    edi
c001a809:	5d                   	pop    ebp
c001a80a:	c3                   	ret    
c001a80b:	90                   	nop

c001a80c <ATAPI::diskRemoved()>:
c001a80c:	53                   	push   ebx
c001a80d:	83 ec 14             	sub    esp,0x14
c001a810:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a814:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a81b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a821:	e8 30 2a ff ff       	call   c000d256 <LogicalDisk::unmount()>
c001a826:	58                   	pop    eax
c001a827:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a82d:	e8 6a 33 ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c001a832:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a838:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a83c:	83 c4 18             	add    esp,0x18
c001a83f:	5b                   	pop    ebx
c001a840:	e9 47 33 ff ff       	jmp    c000db8c <VCache::invalidateReadBuffer()>
c001a845:	90                   	nop

c001a846 <ATAPI::eject()>:
c001a846:	57                   	push   edi
c001a847:	b9 03 00 00 00       	mov    ecx,0x3
c001a84c:	53                   	push   ebx
c001a84d:	83 ec 14             	sub    esp,0x14
c001a850:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a854:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a858:	fc                   	cld    
c001a859:	31 c0                	xor    eax,eax
c001a85b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a85d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a862:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a867:	50                   	push   eax
c001a868:	50                   	push   eax
c001a869:	6a 00                	push   0x0
c001a86b:	6a 00                	push   0x0
c001a86d:	6a 00                	push   0x0
c001a86f:	6a 02                	push   0x2
c001a871:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a875:	50                   	push   eax
c001a876:	53                   	push   ebx
c001a877:	e8 d0 fc ff ff       	call   c001a54c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a87c:	83 c4 14             	add    esp,0x14
c001a87f:	53                   	push   ebx
c001a880:	e8 87 ff ff ff       	call   c001a80c <ATAPI::diskRemoved()>
c001a885:	83 c4 24             	add    esp,0x24
c001a888:	31 c0                	xor    eax,eax
c001a88a:	5b                   	pop    ebx
c001a88b:	5f                   	pop    edi
c001a88c:	c3                   	ret    
c001a88d:	90                   	nop

c001a88e <ATAPI::diskInserted()>:
c001a88e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a892:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a899:	c3                   	ret    

c001a89a <ATAPI::detectMedia()>:
c001a89a:	56                   	push   esi
c001a89b:	53                   	push   ebx
c001a89c:	83 ec 28             	sub    esp,0x28
c001a89f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a8a3:	6a 0c                	push   0xc
c001a8a5:	6a 00                	push   0x0
c001a8a7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a8ab:	56                   	push   esi
c001a8ac:	e8 3f 5c fe ff       	call   c00004f0 <memset>
c001a8b1:	58                   	pop    eax
c001a8b2:	5a                   	pop    edx
c001a8b3:	6a 00                	push   0x0
c001a8b5:	6a 00                	push   0x0
c001a8b7:	6a 00                	push   0x0
c001a8b9:	6a 00                	push   0x0
c001a8bb:	56                   	push   esi
c001a8bc:	53                   	push   ebx
c001a8bd:	e8 8a fc ff ff       	call   c001a54c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8c2:	83 c4 1c             	add    esp,0x1c
c001a8c5:	6a 0c                	push   0xc
c001a8c7:	6a 00                	push   0x0
c001a8c9:	56                   	push   esi
c001a8ca:	e8 21 5c fe ff       	call   c00004f0 <memset>
c001a8cf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a8d4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a8d9:	59                   	pop    ecx
c001a8da:	58                   	pop    eax
c001a8db:	6a 01                	push   0x1
c001a8dd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a8e1:	50                   	push   eax
c001a8e2:	6a 00                	push   0x0
c001a8e4:	6a 12                	push   0x12
c001a8e6:	56                   	push   esi
c001a8e7:	53                   	push   ebx
c001a8e8:	e8 5f fc ff ff       	call   c001a54c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8ed:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a8f1:	83 c4 20             	add    esp,0x20
c001a8f4:	83 e0 7f             	and    eax,0x7f
c001a8f7:	3c 70                	cmp    al,0x70
c001a8f9:	74 15                	je     c001a910 <ATAPI::detectMedia()+0x76>
c001a8fb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a902:	75 0c                	jne    c001a910 <ATAPI::detectMedia()+0x76>
c001a904:	83 ec 0c             	sub    esp,0xc
c001a907:	53                   	push   ebx
c001a908:	e8 81 ff ff ff       	call   c001a88e <ATAPI::diskInserted()>
c001a90d:	83 c4 10             	add    esp,0x10
c001a910:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a914:	83 e0 0f             	and    eax,0xf
c001a917:	3c 02                	cmp    al,0x2
c001a919:	75 1b                	jne    c001a936 <ATAPI::detectMedia()+0x9c>
c001a91b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a920:	75 2d                	jne    c001a94f <ATAPI::detectMedia()+0xb5>
c001a922:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a929:	74 24                	je     c001a94f <ATAPI::detectMedia()+0xb5>
c001a92b:	83 ec 0c             	sub    esp,0xc
c001a92e:	53                   	push   ebx
c001a92f:	e8 d8 fe ff ff       	call   c001a80c <ATAPI::diskRemoved()>
c001a934:	eb 16                	jmp    c001a94c <ATAPI::detectMedia()+0xb2>
c001a936:	84 c0                	test   al,al
c001a938:	75 15                	jne    c001a94f <ATAPI::detectMedia()+0xb5>
c001a93a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a941:	75 0c                	jne    c001a94f <ATAPI::detectMedia()+0xb5>
c001a943:	83 ec 0c             	sub    esp,0xc
c001a946:	53                   	push   ebx
c001a947:	e8 42 ff ff ff       	call   c001a88e <ATAPI::diskInserted()>
c001a94c:	83 c4 10             	add    esp,0x10
c001a94f:	83 c4 24             	add    esp,0x24
c001a952:	5b                   	pop    ebx
c001a953:	5e                   	pop    esi
c001a954:	c3                   	ret    
c001a955:	90                   	nop

c001a956 <ATAPI::open(int, int, void*)>:
c001a956:	56                   	push   esi
c001a957:	53                   	push   ebx
c001a958:	50                   	push   eax
c001a959:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a95d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a961:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a965:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a96b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a971:	c1 e0 06             	shl    eax,0x6
c001a974:	01 d0                	add    eax,edx
c001a976:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a97d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a983:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a98a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a994:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a99a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a9a1:	6a 04                	push   0x4
c001a9a3:	6a 0c                	push   0xc
c001a9a5:	51                   	push   ecx
c001a9a6:	52                   	push   edx
c001a9a7:	e8 dc e6 ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9ac:	90                   	nop
c001a9ad:	90                   	nop
c001a9ae:	6a 00                	push   0x0
c001a9b0:	6a 0c                	push   0xc
c001a9b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a9b9:	50                   	push   eax
c001a9ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9c0:	e8 c3 e6 ff ff       	call   c0019088 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9c5:	83 c4 14             	add    esp,0x14
c001a9c8:	68 74 01 00 00       	push   0x174
c001a9cd:	e8 87 d4 fe ff       	call   c0007e59 <malloc>
c001a9d2:	83 c4 0c             	add    esp,0xc
c001a9d5:	89 c6                	mov    esi,eax
c001a9d7:	6a 00                	push   0x0
c001a9d9:	68 ff ff ff 7f       	push   0x7fffffff
c001a9de:	6a 00                	push   0x0
c001a9e0:	6a 00                	push   0x0
c001a9e2:	53                   	push   ebx
c001a9e3:	68 44 f5 01 c0       	push   0xc001f544
c001a9e8:	50                   	push   eax
c001a9e9:	e8 b4 26 ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a9ee:	83 c4 14             	add    esp,0x14
c001a9f1:	56                   	push   esi
c001a9f2:	e8 61 27 ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c001a9f7:	5a                   	pop    edx
c001a9f8:	0f be c0             	movsx  eax,al
c001a9fb:	59                   	pop    ecx
c001a9fc:	50                   	push   eax
c001a9fd:	68 5c f3 01 c0       	push   0xc001f35c
c001aa02:	e8 e1 01 ff ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001aa07:	58                   	pop    eax
c001aa08:	5a                   	pop    edx
c001aa09:	56                   	push   esi
c001aa0a:	53                   	push   ebx
c001aa0b:	e8 18 16 ff ff       	call   c000c028 <Device::addChild(Device*)>
c001aa10:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa19:	e8 40 1a ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001aa1e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa28:	e8 6d fe ff ff       	call   c001a89a <ATAPI::detectMedia()>
c001aa2d:	83 c4 14             	add    esp,0x14
c001aa30:	31 c0                	xor    eax,eax
c001aa32:	5b                   	pop    ebx
c001aa33:	5e                   	pop    esi
c001aa34:	c3                   	ret    
c001aa35:	90                   	nop

c001aa36 <ATAPI::read(unsigned long long, int, void*)>:
c001aa36:	55                   	push   ebp
c001aa37:	57                   	push   edi
c001aa38:	56                   	push   esi
c001aa39:	53                   	push   ebx
c001aa3a:	83 ec 1c             	sub    esp,0x1c
c001aa3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa41:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa45:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa49:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa50:	74 3c                	je     c001aa8e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa52:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa56:	b9 03 00 00 00       	mov    ecx,0x3
c001aa5b:	fc                   	cld    
c001aa5c:	31 c0                	xor    eax,eax
c001aa5e:	0f ce                	bswap  esi
c001aa60:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa62:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa67:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa6b:	89 e8                	mov    eax,ebp
c001aa6d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa71:	50                   	push   eax
c001aa72:	50                   	push   eax
c001aa73:	55                   	push   ebp
c001aa74:	c1 e5 0b             	shl    ebp,0xb
c001aa77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa7b:	6a 00                	push   0x0
c001aa7d:	55                   	push   ebp
c001aa7e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa82:	50                   	push   eax
c001aa83:	53                   	push   ebx
c001aa84:	e8 c3 fa ff ff       	call   c001a54c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa89:	83 c4 20             	add    esp,0x20
c001aa8c:	eb 1a                	jmp    c001aaa8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aa8e:	83 ec 0c             	sub    esp,0xc
c001aa91:	53                   	push   ebx
c001aa92:	e8 03 fe ff ff       	call   c001a89a <ATAPI::detectMedia()>
c001aa97:	83 c4 10             	add    esp,0x10
c001aa9a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aaa1:	75 af                	jne    c001aa52 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aaa3:	b8 02 00 00 00       	mov    eax,0x2
c001aaa8:	83 c4 1c             	add    esp,0x1c
c001aaab:	5b                   	pop    ebx
c001aaac:	5e                   	pop    esi
c001aaad:	5f                   	pop    edi
c001aaae:	5d                   	pop    ebp
c001aaaf:	c3                   	ret    

c001aab0 <SATA::close(int, int, void*)>:
c001aab0:	83 ec 0c             	sub    esp,0xc
c001aab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aab7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aabd:	85 c0                	test   eax,eax
c001aabf:	74 0c                	je     c001aacd <SATA::close(int, int, void*)+0x1d>
c001aac1:	83 ec 0c             	sub    esp,0xc
c001aac4:	8b 10                	mov    edx,DWORD PTR [eax]
c001aac6:	50                   	push   eax
c001aac7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aaca:	83 c4 10             	add    esp,0x10
c001aacd:	31 c0                	xor    eax,eax
c001aacf:	83 c4 0c             	add    esp,0xc
c001aad2:	c3                   	ret    
c001aad3:	90                   	nop

c001aad4 <SATA::powerSaving(PowerSavingLevel)>:
c001aad4:	c3                   	ret    
c001aad5:	90                   	nop

c001aad6 <SATA::open(int, int, void*)>:
c001aad6:	56                   	push   esi
c001aad7:	53                   	push   ebx
c001aad8:	50                   	push   eax
c001aad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aadd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aae1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aaeb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aaf1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aafb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aaff:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab09:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab0f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab16:	e8 0b d7 fe ff       	call   c0008226 <Phys::allocatePage()>
c001ab1b:	89 c6                	mov    esi,eax
c001ab1d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab23:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab29:	e8 f8 d6 fe ff       	call   c0008226 <Phys::allocatePage()>
c001ab2e:	39 c6                	cmp    esi,eax
c001ab30:	74 10                	je     c001ab42 <SATA::open(int, int, void*)+0x6c>
c001ab32:	83 ec 0c             	sub    esp,0xc
c001ab35:	68 a4 f3 01 c0       	push   0xc001f3a4
c001ab3a:	e8 94 5b ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001ab3f:	83 c4 10             	add    esp,0x10
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	6a 02                	push   0x2
c001ab47:	e8 49 ee fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c001ab4c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab52:	6a 03                	push   0x3
c001ab54:	50                   	push   eax
c001ab55:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ab5b:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c001ab61:	e8 c4 f4 fe ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab66:	83 c4 14             	add    esp,0x14
c001ab69:	53                   	push   ebx
c001ab6a:	e8 ef 18 ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001ab6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab72:	e8 5f 29 ff ff       	call   c000d4d6 <createPartitionsForDisk(PhysicalDisk*)>
c001ab77:	83 c4 14             	add    esp,0x14
c001ab7a:	31 c0                	xor    eax,eax
c001ab7c:	5b                   	pop    ebx
c001ab7d:	5e                   	pop    esi
c001ab7e:	c3                   	ret    
c001ab7f:	90                   	nop

c001ab80 <SATA::SATA()>:
c001ab80:	83 ec 0c             	sub    esp,0xc
c001ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab87:	83 ec 04             	sub    esp,0x4
c001ab8a:	68 00 02 00 00       	push   0x200
c001ab8f:	68 b8 f3 01 c0       	push   0xc001f3b8
c001ab94:	50                   	push   eax
c001ab95:	e8 5c 18 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ab9a:	83 c4 10             	add    esp,0x10
c001ab9d:	ba 28 f4 01 c0       	mov    edx,0xc001f428
c001aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba6:	89 10                	mov    DWORD PTR [eax],edx
c001aba8:	90                   	nop
c001aba9:	83 c4 0c             	add    esp,0xc
c001abac:	c3                   	ret    
c001abad:	90                   	nop

c001abae <SATA::access(unsigned long long, int, void*, bool)>:
c001abae:	55                   	push   ebp
c001abaf:	57                   	push   edi
c001abb0:	56                   	push   esi
c001abb1:	53                   	push   ebx
c001abb2:	83 ec 2c             	sub    esp,0x2c
c001abb5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001abb9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001abbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abc1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001abc5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001abc9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001abce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abd2:	7e 10                	jle    c001abe4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001abd4:	83 ec 0c             	sub    esp,0xc
c001abd7:	68 c8 f3 01 c0       	push   0xc001f3c8
c001abdc:	e8 f2 5a ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001abe1:	83 c4 10             	add    esp,0x10
c001abe4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001abea:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001abf0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001abf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001abfa:	89 d0                	mov    eax,edx
c001abfc:	c1 e0 07             	shl    eax,0x7
c001abff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac03:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac0d:	51                   	push   ecx
c001ac0e:	8d 42 02             	lea    eax,[edx+0x2]
c001ac11:	51                   	push   ecx
c001ac12:	c1 e0 07             	shl    eax,0x7
c001ac15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac19:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac1d:	50                   	push   eax
c001ac1e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac24:	e8 e7 ef ff ff       	call   c0019c10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac29:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac2d:	83 c4 10             	add    esp,0x10
c001ac30:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac39:	0f 84 4f 01 00 00    	je     c001ad8e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac3f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac43:	c1 e0 09             	shl    eax,0x9
c001ac46:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac4f:	74 0e                	je     c001ac5f <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac51:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac57:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ac5b:	89 c1                	mov    ecx,eax
c001ac5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac63:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac69:	8d 42 02             	lea    eax,[edx+0x2]
c001ac6c:	c1 e0 07             	shl    eax,0x7
c001ac6f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac75:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac7b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac85:	c1 e1 05             	shl    ecx,0x5
c001ac88:	01 c8                	add    eax,ecx
c001ac8a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac8e:	83 e1 01             	and    ecx,0x1
c001ac91:	89 ce                	mov    esi,ecx
c001ac93:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac95:	c1 e6 06             	shl    esi,0x6
c001ac98:	83 e1 bf             	and    ecx,0xffffffbf
c001ac9b:	09 f1                	or     ecx,esi
c001ac9d:	88 08                	mov    BYTE PTR [eax],cl
c001ac9f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aca1:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001aca7:	81 c9 05 00 01 00    	or     ecx,0x10005
c001acad:	89 08                	mov    DWORD PTR [eax],ecx
c001acaf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acb5:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001acbb:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001acc1:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001acc4:	50                   	push   eax
c001acc5:	68 90 00 00 00       	push   0x90
c001acca:	6a 00                	push   0x0
c001accc:	56                   	push   esi
c001accd:	e8 1e 58 fe ff       	call   c00004f0 <memset>
c001acd2:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001acd8:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001acdc:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ace2:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ace6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001acea:	83 c4 10             	add    esp,0x10
c001aced:	48                   	dec    eax
c001acee:	25 ff ff 3f 00       	and    eax,0x3fffff
c001acf3:	89 c1                	mov    ecx,eax
c001acf5:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001acfb:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad00:	09 c8                	or     eax,ecx
c001ad02:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad08:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad0b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad12:	66 25 00 7f          	and    ax,0x7f00
c001ad16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad1a:	66 0d 27 80          	or     ax,0x8027
c001ad1e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad23:	66 89 06             	mov    WORD PTR [esi],ax
c001ad26:	19 c0                	sbb    eax,eax
c001ad28:	83 e0 f0             	and    eax,0xfffffff0
c001ad2b:	83 c0 35             	add    eax,0x35
c001ad2e:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad31:	89 e8                	mov    eax,ebp
c001ad33:	c1 e8 10             	shr    eax,0x10
c001ad36:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad39:	89 e8                	mov    eax,ebp
c001ad3b:	c1 e8 18             	shr    eax,0x18
c001ad3e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad41:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad45:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad4c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad4f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad53:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad57:	89 d6                	mov    esi,edx
c001ad59:	31 c0                	xor    eax,eax
c001ad5b:	c1 e6 07             	shl    esi,0x7
c001ad5e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad62:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad68:	80 e1 88             	and    cl,0x88
c001ad6b:	74 0a                	je     c001ad77 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad6d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad72:	74 0a                	je     c001ad7e <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad74:	40                   	inc    eax
c001ad75:	eb eb                	jmp    c001ad62 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad77:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad7c:	75 17                	jne    c001ad95 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad7e:	83 ec 0c             	sub    esp,0xc
c001ad81:	68 01 f4 01 c0       	push   0xc001f401
c001ad86:	e8 5d fe fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	b8 01 00 00 00       	mov    eax,0x1
c001ad93:	eb 5d                	jmp    c001adf2 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad95:	b8 01 00 00 00       	mov    eax,0x1
c001ad9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ad9e:	c1 e2 07             	shl    edx,0x7
c001ada1:	d3 e0                	shl    eax,cl
c001ada3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ada7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001adad:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001adb3:	85 c8                	test   eax,ecx
c001adb5:	74 16                	je     c001adcd <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001adb7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001adbd:	0f ba e1 1e          	bt     ecx,0x1e
c001adc1:	73 ea                	jae    c001adad <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001adc3:	83 ec 0c             	sub    esp,0xc
c001adc6:	68 0f f4 01 c0       	push   0xc001f40f
c001adcb:	eb b9                	jmp    c001ad86 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001adcd:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001add3:	0f ba e0 1e          	bt     eax,0x1e
c001add7:	72 b5                	jb     c001ad8e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001add9:	31 c0                	xor    eax,eax
c001addb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ade0:	75 10                	jne    c001adf2 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ade2:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ade8:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001adec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adf0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adf2:	83 c4 2c             	add    esp,0x2c
c001adf5:	5b                   	pop    ebx
c001adf6:	5e                   	pop    esi
c001adf7:	5f                   	pop    edi
c001adf8:	5d                   	pop    ebp
c001adf9:	c3                   	ret    

c001adfa <SATA::read(unsigned long long, int, void*)>:
c001adfa:	57                   	push   edi
c001adfb:	b8 04 00 00 00       	mov    eax,0x4
c001ae00:	56                   	push   esi
c001ae01:	53                   	push   ebx
c001ae02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae0a:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae11:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae15:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae1b:	77 25                	ja     c001ae42 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae1d:	b8 06 00 00 00       	mov    eax,0x6
c001ae22:	85 f6                	test   esi,esi
c001ae24:	74 1c                	je     c001ae42 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae26:	50                   	push   eax
c001ae27:	50                   	push   eax
c001ae28:	6a 00                	push   0x0
c001ae2a:	56                   	push   esi
c001ae2b:	52                   	push   edx
c001ae2c:	53                   	push   ebx
c001ae2d:	51                   	push   ecx
c001ae2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae32:	e8 77 fd ff ff       	call   c001abae <SATA::access(unsigned long long, int, void*, bool)>
c001ae37:	83 c4 20             	add    esp,0x20
c001ae3a:	85 c0                	test   eax,eax
c001ae3c:	0f 95 c0             	setne  al
c001ae3f:	0f b6 c0             	movzx  eax,al
c001ae42:	5b                   	pop    ebx
c001ae43:	5e                   	pop    esi
c001ae44:	5f                   	pop    edi
c001ae45:	c3                   	ret    

c001ae46 <SATA::write(unsigned long long, int, void*)>:
c001ae46:	55                   	push   ebp
c001ae47:	b8 04 00 00 00       	mov    eax,0x4
c001ae4c:	57                   	push   edi
c001ae4d:	56                   	push   esi
c001ae4e:	53                   	push   ebx
c001ae4f:	83 ec 0c             	sub    esp,0xc
c001ae52:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae5a:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ae5d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae65:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae6b:	77 3d                	ja     c001aeaa <SATA::write(unsigned long long, int, void*)+0x64>
c001ae6d:	b8 06 00 00 00       	mov    eax,0x6
c001ae72:	85 ed                	test   ebp,ebp
c001ae74:	74 34                	je     c001aeaa <SATA::write(unsigned long long, int, void*)+0x64>
c001ae76:	c1 e3 09             	shl    ebx,0x9
c001ae79:	01 eb                	add    ebx,ebp
c001ae7b:	89 d6                	mov    esi,edx
c001ae7d:	89 cf                	mov    edi,ecx
c001ae7f:	83 c6 01             	add    esi,0x1
c001ae82:	83 d7 00             	adc    edi,0x0
c001ae85:	50                   	push   eax
c001ae86:	50                   	push   eax
c001ae87:	6a 01                	push   0x1
c001ae89:	55                   	push   ebp
c001ae8a:	81 c5 00 02 00 00    	add    ebp,0x200
c001ae90:	6a 01                	push   0x1
c001ae92:	51                   	push   ecx
c001ae93:	52                   	push   edx
c001ae94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae98:	e8 11 fd ff ff       	call   c001abae <SATA::access(unsigned long long, int, void*, bool)>
c001ae9d:	83 c4 20             	add    esp,0x20
c001aea0:	89 f2                	mov    edx,esi
c001aea2:	89 f9                	mov    ecx,edi
c001aea4:	39 dd                	cmp    ebp,ebx
c001aea6:	75 d3                	jne    c001ae7b <SATA::write(unsigned long long, int, void*)+0x35>
c001aea8:	31 c0                	xor    eax,eax
c001aeaa:	83 c4 0c             	add    esp,0xc
c001aead:	5b                   	pop    ebx
c001aeae:	5e                   	pop    esi
c001aeaf:	5f                   	pop    edi
c001aeb0:	5d                   	pop    ebp
c001aeb1:	c3                   	ret    

c001aeb2 <SATAPI::write(unsigned long long, int, void*)>:
c001aeb2:	b8 03 00 00 00       	mov    eax,0x3
c001aeb7:	c3                   	ret    

c001aeb8 <SATAPI::close(int, int, void*)>:
c001aeb8:	83 ec 0c             	sub    esp,0xc
c001aebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aec5:	85 c0                	test   eax,eax
c001aec7:	74 0c                	je     c001aed5 <SATAPI::close(int, int, void*)+0x1d>
c001aec9:	83 ec 0c             	sub    esp,0xc
c001aecc:	8b 10                	mov    edx,DWORD PTR [eax]
c001aece:	50                   	push   eax
c001aecf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aed2:	83 c4 10             	add    esp,0x10
c001aed5:	31 c0                	xor    eax,eax
c001aed7:	83 c4 0c             	add    esp,0xc
c001aeda:	c3                   	ret    
c001aedb:	90                   	nop

c001aedc <SATAPI::SATAPI()>:
c001aedc:	83 ec 0c             	sub    esp,0xc
c001aedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee3:	83 ec 04             	sub    esp,0x4
c001aee6:	68 00 08 00 00       	push   0x800
c001aeeb:	68 58 f4 01 c0       	push   0xc001f458
c001aef0:	50                   	push   eax
c001aef1:	e8 00 15 ff ff       	call   c000c3f6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aef6:	83 c4 10             	add    esp,0x10
c001aef9:	ba b8 f5 01 c0       	mov    edx,0xc001f5b8
c001aefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af02:	89 10                	mov    DWORD PTR [eax],edx
c001af04:	90                   	nop
c001af05:	83 c4 0c             	add    esp,0xc
c001af08:	c3                   	ret    
c001af09:	90                   	nop

c001af0a <SATAPI::diskRemoved()>:
c001af0a:	c3                   	ret    
c001af0b:	90                   	nop

c001af0c <SATAPI::diskInserted()>:
c001af0c:	83 ec 18             	sub    esp,0x18
c001af0f:	68 64 f4 01 c0       	push   0xc001f464
c001af14:	e8 cf fc fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001af19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af1d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001af24:	83 c4 1c             	add    esp,0x1c
c001af27:	c3                   	ret    

c001af28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001af28:	55                   	push   ebp
c001af29:	57                   	push   edi
c001af2a:	56                   	push   esi
c001af2b:	53                   	push   ebx
c001af2c:	83 ec 38             	sub    esp,0x38
c001af2f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af33:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af37:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af3b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af3f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af43:	68 7c f4 01 c0       	push   0xc001f47c
c001af48:	e8 9b fc fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001af4d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001af53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af5d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af67:	c1 e0 07             	shl    eax,0x7
c001af6a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af6e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af72:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af7c:	58                   	pop    eax
c001af7d:	5a                   	pop    edx
c001af7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af82:	8d 58 02             	lea    ebx,[eax+0x2]
c001af85:	c1 e3 07             	shl    ebx,0x7
c001af88:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001af8c:	53                   	push   ebx
c001af8d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001af93:	e8 78 ec ff ff       	call   c0019c10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af9c:	83 c4 10             	add    esp,0x10
c001af9f:	b8 01 00 00 00       	mov    eax,0x1
c001afa4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001afa9:	0f 84 4c 02 00 00    	je     c001b1fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001afaf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afb7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001afbd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001afc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afc7:	c1 e1 05             	shl    ecx,0x5
c001afca:	01 c8                	add    eax,ecx
c001afcc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001afce:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001afd4:	81 c9 25 00 01 00    	or     ecx,0x10025
c001afda:	89 08                	mov    DWORD PTR [eax],ecx
c001afdc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afe2:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001afe8:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001afee:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001aff1:	8d 7b 40             	lea    edi,[ebx+0x40]
c001aff4:	50                   	push   eax
c001aff5:	68 90 00 00 00       	push   0x90
c001affa:	6a 00                	push   0x0
c001affc:	53                   	push   ebx
c001affd:	e8 ee 54 fe ff       	call   c00004f0 <memset>
c001b002:	b9 0c 00 00 00       	mov    ecx,0xc
c001b007:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b00b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b00d:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b013:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b017:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b01d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b021:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b025:	48                   	dec    eax
c001b026:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b02b:	89 c1                	mov    ecx,eax
c001b02d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b033:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b038:	09 c8                	or     eax,ecx
c001b03a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b040:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b043:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b04a:	66 25 00 7f          	and    ax,0x7f00
c001b04e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b052:	66 0d 27 80          	or     ax,0x8027
c001b056:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b05a:	66 89 03             	mov    WORD PTR [ebx],ax
c001b05d:	89 d0                	mov    eax,edx
c001b05f:	c1 ea 18             	shr    edx,0x18
c001b062:	c1 e8 10             	shr    eax,0x10
c001b065:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b068:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b06b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b06f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b072:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b076:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b079:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b07d:	83 c4 10             	add    esp,0x10
c001b080:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b084:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b088:	31 c0                	xor    eax,eax
c001b08a:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b090:	80 e1 88             	and    cl,0x88
c001b093:	74 0a                	je     c001b09f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b095:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b09a:	74 0a                	je     c001b0a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b09c:	40                   	inc    eax
c001b09d:	eb eb                	jmp    c001b08a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b09f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0a4:	75 16                	jne    c001b0bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b0a6:	83 ec 0c             	sub    esp,0xc
c001b0a9:	68 96 f4 01 c0       	push   0xc001f496
c001b0ae:	e8 35 fb fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b0b3:	5f                   	pop    edi
c001b0b4:	5d                   	pop    ebp
c001b0b5:	68 ab f4 01 c0       	push   0xc001f4ab
c001b0ba:	eb 4f                	jmp    c001b10b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b0bc:	be 01 00 00 00       	mov    esi,0x1
c001b0c1:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b0c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b0c9:	d3 e6                	shl    esi,cl
c001b0cb:	c1 e7 07             	shl    edi,0x7
c001b0ce:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b0d4:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b0d9:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b0dd:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b0e3:	85 c6                	test   esi,eax
c001b0e5:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b0eb:	0f 84 cb 00 00 00    	je     c001b1bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b0f1:	0f ba e0 1e          	bt     eax,0x1e
c001b0f5:	73 2c                	jae    c001b123 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	68 bd f4 01 c0       	push   0xc001f4bd
c001b0ff:	e8 e4 fa fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b104:	5b                   	pop    ebx
c001b105:	5e                   	pop    esi
c001b106:	68 d0 f4 01 c0       	push   0xc001f4d0
c001b10b:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b111:	e8 b2 dd fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b116:	83 c4 10             	add    esp,0x10
c001b119:	b8 01 00 00 00       	mov    eax,0x1
c001b11e:	e9 d8 00 00 00       	jmp    c001b1fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b123:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b129:	83 f8 0d             	cmp    eax,0xd
c001b12c:	77 0a                	ja     c001b138 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b12e:	83 ec 0c             	sub    esp,0xc
c001b131:	68 c8 00 00 00       	push   0xc8
c001b136:	eb 28                	jmp    c001b160 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b138:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b13e:	83 f8 0d             	cmp    eax,0xd
c001b141:	77 0a                	ja     c001b14d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b143:	83 ec 0c             	sub    esp,0xc
c001b146:	68 58 02 00 00       	push   0x258
c001b14b:	eb 13                	jmp    c001b160 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b14d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b153:	83 f8 06             	cmp    eax,0x6
c001b156:	77 10                	ja     c001b168 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b158:	83 ec 0c             	sub    esp,0xc
c001b15b:	68 dc 05 00 00       	push   0x5dc
c001b160:	e8 c3 8b ff ff       	call   c0013d28 <milliTenthSleep(unsigned int)>
c001b165:	83 c4 10             	add    esp,0x10
c001b168:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b16c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b16f:	75 06                	jne    c001b177 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b171:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b175:	74 15                	je     c001b18c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b177:	83 fb 06             	cmp    ebx,0x6
c001b17a:	77 10                	ja     c001b18c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b17c:	83 ec 0c             	sub    esp,0xc
c001b17f:	68 c4 09 00 00       	push   0x9c4
c001b184:	e8 9f 8b ff ff       	call   c0013d28 <milliTenthSleep(unsigned int)>
c001b189:	83 c4 10             	add    esp,0x10
c001b18c:	43                   	inc    ebx
c001b18d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b193:	0f 85 44 ff ff ff    	jne    c001b0dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b199:	51                   	push   ecx
c001b19a:	51                   	push   ecx
c001b19b:	68 e1 f4 01 c0       	push   0xc001f4e1
c001b1a0:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b1a6:	e8 1d dd fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b1ab:	c7 04 24 f1 f4 01 c0 	mov    DWORD PTR [esp],0xc001f4f1
c001b1b2:	e8 31 fa fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b1b7:	e9 5a ff ff ff       	jmp    c001b116 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b1bc:	0f ba e0 1e          	bt     eax,0x1e
c001b1c0:	73 19                	jae    c001b1db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b1c2:	83 ec 0c             	sub    esp,0xc
c001b1c5:	68 05 f5 01 c0       	push   0xc001f505
c001b1ca:	e8 19 fa fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b1cf:	58                   	pop    eax
c001b1d0:	5a                   	pop    edx
c001b1d1:	68 1a f5 01 c0       	push   0xc001f51a
c001b1d6:	e9 30 ff ff ff       	jmp    c001b10b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b1db:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b1e0:	74 17                	je     c001b1f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b1e2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b1e7:	74 10                	je     c001b1f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b1e9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b1ef:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b1f3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b1f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1f9:	31 c0                	xor    eax,eax
c001b1fb:	83 c4 2c             	add    esp,0x2c
c001b1fe:	5b                   	pop    ebx
c001b1ff:	5e                   	pop    esi
c001b200:	5f                   	pop    edi
c001b201:	5d                   	pop    ebp
c001b202:	c3                   	ret    
c001b203:	90                   	nop

c001b204 <SATAPI::eject()>:
c001b204:	57                   	push   edi
c001b205:	b9 03 00 00 00       	mov    ecx,0x3
c001b20a:	83 ec 18             	sub    esp,0x18
c001b20d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b211:	fc                   	cld    
c001b212:	31 c0                	xor    eax,eax
c001b214:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b216:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b21b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b220:	50                   	push   eax
c001b221:	6a 00                	push   0x0
c001b223:	6a 00                	push   0x0
c001b225:	6a 00                	push   0x0
c001b227:	6a 00                	push   0x0
c001b229:	6a 02                	push   0x2
c001b22b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b22f:	50                   	push   eax
c001b230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b234:	e8 ef fc ff ff       	call   c001af28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b239:	31 c0                	xor    eax,eax
c001b23b:	83 c4 38             	add    esp,0x38
c001b23e:	5f                   	pop    edi
c001b23f:	c3                   	ret    

c001b240 <SATAPI::detectMedia()>:
c001b240:	53                   	push   ebx
c001b241:	83 ec 14             	sub    esp,0x14
c001b244:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b248:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b24e:	e8 49 29 ff ff       	call   c000db9c <VCache::writeWriteBuffer()>
c001b253:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b25d:	83 c4 18             	add    esp,0x18
c001b260:	5b                   	pop    ebx
c001b261:	e9 26 29 ff ff       	jmp    c000db8c <VCache::invalidateReadBuffer()>

c001b266 <SATAPI::open(int, int, void*)>:
c001b266:	56                   	push   esi
c001b267:	53                   	push   ebx
c001b268:	51                   	push   ecx
c001b269:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b26d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b271:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b27b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b281:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b28b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b28f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b299:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b29f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b2a6:	e8 7b cf fe ff       	call   c0008226 <Phys::allocatePage()>
c001b2ab:	89 c6                	mov    esi,eax
c001b2ad:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b2b3:	81 c6 00 10 00 00    	add    esi,0x1000
c001b2b9:	e8 68 cf fe ff       	call   c0008226 <Phys::allocatePage()>
c001b2be:	39 c6                	cmp    esi,eax
c001b2c0:	74 10                	je     c001b2d2 <SATAPI::open(int, int, void*)+0x6c>
c001b2c2:	83 ec 0c             	sub    esp,0xc
c001b2c5:	68 2d f5 01 c0       	push   0xc001f52d
c001b2ca:	e8 04 54 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001b2cf:	83 c4 10             	add    esp,0x10
c001b2d2:	83 ec 0c             	sub    esp,0xc
c001b2d5:	6a 02                	push   0x2
c001b2d7:	e8 b9 e6 fe ff       	call   c0009995 <Virt::allocateKernelVirtualPages(int)>
c001b2dc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b2e2:	6a 03                	push   0x3
c001b2e4:	50                   	push   eax
c001b2e5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b2eb:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c001b2f1:	e8 34 ed fe ff       	call   c000a02a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b2f6:	83 c4 14             	add    esp,0x14
c001b2f9:	68 74 01 00 00       	push   0x174
c001b2fe:	e8 56 cb fe ff       	call   c0007e59 <malloc>
c001b303:	83 c4 0c             	add    esp,0xc
c001b306:	89 c6                	mov    esi,eax
c001b308:	6a 00                	push   0x0
c001b30a:	68 ff ff ff 7f       	push   0x7fffffff
c001b30f:	6a 00                	push   0x0
c001b311:	6a 00                	push   0x0
c001b313:	53                   	push   ebx
c001b314:	68 43 f5 01 c0       	push   0xc001f543
c001b319:	50                   	push   eax
c001b31a:	e8 83 1d ff ff       	call   c000d0a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b31f:	83 c4 14             	add    esp,0x14
c001b322:	56                   	push   esi
c001b323:	e8 30 1e ff ff       	call   c000d158 <LogicalDisk::assignDriveLetter()>
c001b328:	5a                   	pop    edx
c001b329:	0f be c0             	movsx  eax,al
c001b32c:	59                   	pop    ecx
c001b32d:	50                   	push   eax
c001b32e:	68 5c f3 01 c0       	push   0xc001f35c
c001b333:	e8 b0 f8 fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b338:	58                   	pop    eax
c001b339:	5a                   	pop    edx
c001b33a:	56                   	push   esi
c001b33b:	53                   	push   ebx
c001b33c:	e8 e7 0c ff ff       	call   c000c028 <Device::addChild(Device*)>
c001b341:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b347:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b34a:	e8 0f 11 ff ff       	call   c000c45e <PhysicalDisk::startCache()>
c001b34f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b356:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b359:	e8 e2 fe ff ff       	call   c001b240 <SATAPI::detectMedia()>
c001b35e:	83 c4 14             	add    esp,0x14
c001b361:	31 c0                	xor    eax,eax
c001b363:	5b                   	pop    ebx
c001b364:	5e                   	pop    esi
c001b365:	c3                   	ret    

c001b366 <SATAPI::read(unsigned long long, int, void*)>:
c001b366:	57                   	push   edi
c001b367:	56                   	push   esi
c001b368:	53                   	push   ebx
c001b369:	83 ec 3c             	sub    esp,0x3c
c001b36c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b370:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b374:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b378:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b37c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b380:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b384:	68 51 f5 01 c0       	push   0xc001f551
c001b389:	e8 5a f8 fe ff       	call   c000abe8 <Dbg::kprintf(char const*, ...)>
c001b38e:	83 c4 10             	add    esp,0x10
c001b391:	83 fe 04             	cmp    esi,0x4
c001b394:	7e 10                	jle    c001b3a6 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b396:	83 ec 0c             	sub    esp,0xc
c001b399:	68 62 f5 01 c0       	push   0xc001f562
c001b39e:	e8 30 53 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001b3a3:	83 c4 10             	add    esp,0x10
c001b3a6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b3ac:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b3b2:	51                   	push   ecx
c001b3b3:	50                   	push   eax
c001b3b4:	83 c0 02             	add    eax,0x2
c001b3b7:	c1 e0 07             	shl    eax,0x7
c001b3ba:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b3c0:	50                   	push   eax
c001b3c1:	52                   	push   edx
c001b3c2:	e8 0d e9 ff ff       	call   c0019cd4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b3c7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b3cb:	b9 03 00 00 00       	mov    ecx,0x3
c001b3d0:	fc                   	cld    
c001b3d1:	31 c0                	xor    eax,eax
c001b3d3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3d5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b3da:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b3df:	83 c4 0c             	add    esp,0xc
c001b3e2:	6a 00                	push   0x0
c001b3e4:	6a 00                	push   0x0
c001b3e6:	6a 00                	push   0x0
c001b3e8:	6a 00                	push   0x0
c001b3ea:	6a 02                	push   0x2
c001b3ec:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b3f0:	50                   	push   eax
c001b3f1:	53                   	push   ebx
c001b3f2:	e8 31 fb ff ff       	call   c001af28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b3f7:	83 c4 20             	add    esp,0x20
c001b3fa:	85 c0                	test   eax,eax
c001b3fc:	74 27                	je     c001b425 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001b3fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b402:	50                   	push   eax
c001b403:	50                   	push   eax
c001b404:	68 8c f5 01 c0       	push   0xc001f58c
c001b409:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b40f:	e8 b4 da fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b417:	e8 24 fe ff ff       	call   c001b240 <SATAPI::detectMedia()>
c001b41c:	58                   	pop    eax
c001b41d:	5a                   	pop    edx
c001b41e:	68 94 f5 01 c0       	push   0xc001f594
c001b423:	eb 69                	jmp    c001b48e <SATAPI::read(unsigned long long, int, void*)+0x128>
c001b425:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b429:	b9 03 00 00 00       	mov    ecx,0x3
c001b42e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b430:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b434:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b439:	0f c8                	bswap  eax
c001b43b:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b43f:	89 f0                	mov    eax,esi
c001b441:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b445:	57                   	push   edi
c001b446:	56                   	push   esi
c001b447:	c1 e6 0b             	shl    esi,0xb
c001b44a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b44e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b452:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b456:	56                   	push   esi
c001b457:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b45b:	50                   	push   eax
c001b45c:	53                   	push   ebx
c001b45d:	e8 c6 fa ff ff       	call   c001af28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b462:	83 c4 20             	add    esp,0x20
c001b465:	85 c0                	test   eax,eax
c001b467:	74 37                	je     c001b4a0 <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001b469:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b46d:	50                   	push   eax
c001b46e:	50                   	push   eax
c001b46f:	68 9e f5 01 c0       	push   0xc001f59e
c001b474:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b47a:	e8 49 da fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b47f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b482:	e8 b9 fd ff ff       	call   c001b240 <SATAPI::detectMedia()>
c001b487:	5a                   	pop    edx
c001b488:	59                   	pop    ecx
c001b489:	68 a6 f5 01 c0       	push   0xc001f5a6
c001b48e:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b494:	e8 2f da fe ff       	call   c0008ec8 <VgaText::puts(char const*)>
c001b499:	83 c4 10             	add    esp,0x10
c001b49c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4a0:	83 c4 30             	add    esp,0x30
c001b4a3:	5b                   	pop    ebx
c001b4a4:	5e                   	pop    esi
c001b4a5:	5f                   	pop    edi
c001b4a6:	c3                   	ret    
c001b4a7:	90                   	nop

c001b4a8 <IOAPIC::close(int, int, void*)>:
c001b4a8:	b8 00 00 00 00       	mov    eax,0x0
c001b4ad:	c3                   	ret    

c001b4ae <apicGetBase()>:
c001b4ae:	55                   	push   ebp
c001b4af:	89 e5                	mov    ebp,esp
c001b4b1:	83 ec 18             	sub    esp,0x18
c001b4b4:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b4b9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b4bf:	83 e0 08             	and    eax,0x8
c001b4c2:	84 c0                	test   al,al
c001b4c4:	75 07                	jne    c001b4cd <apicGetBase()+0x1f>
c001b4c6:	b8 00 00 00 00       	mov    eax,0x0
c001b4cb:	eb 21                	jmp    c001b4ee <apicGetBase()+0x40>
c001b4cd:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b4d2:	83 ec 08             	sub    esp,0x8
c001b4d5:	6a 1b                	push   0x1b
c001b4d7:	50                   	push   eax
c001b4d8:	e8 b9 bf fe ff       	call   c0007496 <Computer::rdmsr(unsigned int)>
c001b4dd:	83 c4 10             	add    esp,0x10
c001b4e0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b4e3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b4e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4e9:	25 00 00 ff ff       	and    eax,0xffff0000
c001b4ee:	c9                   	leave  
c001b4ef:	c3                   	ret    

c001b4f0 <IOAPIC::IOAPIC()>:
c001b4f0:	83 ec 0c             	sub    esp,0xc
c001b4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f7:	83 ec 08             	sub    esp,0x8
c001b4fa:	68 e8 f5 01 c0       	push   0xc001f5e8
c001b4ff:	50                   	push   eax
c001b500:	e8 bb 0c ff ff       	call   c000c1c0 <Device::Device(char const*)>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	ba f8 f5 01 c0       	mov    edx,0xc001f5f8
c001b50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b511:	89 10                	mov    DWORD PTR [eax],edx
c001b513:	90                   	nop
c001b514:	83 c4 0c             	add    esp,0xc
c001b517:	c3                   	ret    

c001b518 <apicOpen()>:
c001b518:	55                   	push   ebp
c001b519:	89 e5                	mov    ebp,esp
c001b51b:	53                   	push   ebx
c001b51c:	83 ec 34             	sub    esp,0x34
c001b51f:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c001b524:	83 f0 01             	xor    eax,0x1
c001b527:	84 c0                	test   al,al
c001b529:	0f 84 9d 00 00 00    	je     c001b5cc <apicOpen()+0xb4>
c001b52f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b533:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c001b538:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b53b:	0f 83 84 00 00 00    	jae    c001b5c5 <apicOpen()+0xad>
c001b541:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b548:	83 ec 0c             	sub    esp,0xc
c001b54b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b54e:	e8 06 c9 fe ff       	call   c0007e59 <malloc>
c001b553:	83 c4 10             	add    esp,0x10
c001b556:	89 c3                	mov    ebx,eax
c001b558:	83 ec 0c             	sub    esp,0xc
c001b55b:	53                   	push   ebx
c001b55c:	e8 8f ff ff ff       	call   c001b4f0 <IOAPIC::IOAPIC()>
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b567:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b56a:	25 ff 00 00 00       	and    eax,0xff
c001b56f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b572:	89 14 85 20 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7e0],edx
c001b579:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c001b57e:	40                   	inc    eax
c001b57f:	a3 00 48 02 c0       	mov    ds:0xc0024800,eax
c001b584:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b589:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b58f:	83 ec 08             	sub    esp,0x8
c001b592:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b595:	50                   	push   eax
c001b596:	e8 8d 0a ff ff       	call   c000c028 <Device::addChild(Device*)>
c001b59b:	83 c4 10             	add    esp,0x10
c001b59e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b5a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5a3:	83 c0 08             	add    eax,0x8
c001b5a6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5a8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5ab:	25 ff 00 00 00       	and    eax,0xff
c001b5b0:	6a 00                	push   0x0
c001b5b2:	6a 00                	push   0x0
c001b5b4:	50                   	push   eax
c001b5b5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5b8:	ff d2                	call   edx
c001b5ba:	83 c4 10             	add    esp,0x10
c001b5bd:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b5c0:	e9 6e ff ff ff       	jmp    c001b533 <apicOpen()+0x1b>
c001b5c5:	c6 05 40 48 02 c0 01 	mov    BYTE PTR ds:0xc0024840,0x1
c001b5cc:	e8 dd fe ff ff       	call   c001b4ae <apicGetBase()>
c001b5d1:	05 f0 00 00 00       	add    eax,0xf0
c001b5d6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b5d9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5de:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b5e1:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b5e8:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b5ef:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5f2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b5f5:	89 10                	mov    DWORD PTR [eax],edx
c001b5f7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b5fe:	a1 50 31 02 c0       	mov    eax,ds:0xc0023150
c001b603:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b606:	7d 70                	jge    c001b678 <apicOpen()+0x160>
c001b608:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b60b:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b612:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b615:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b618:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b61f:	c1 e8 08             	shr    eax,0x8
c001b622:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b626:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b629:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b630:	c1 e8 18             	shr    eax,0x18
c001b633:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b636:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b63a:	75 37                	jne    c001b673 <apicOpen()+0x15b>
c001b63c:	e8 6d fe ff ff       	call   c001b4ae <apicGetBase()>
c001b641:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b645:	75 07                	jne    c001b64e <apicOpen()+0x136>
c001b647:	ba 60 03 00 00       	mov    edx,0x360
c001b64c:	eb 05                	jmp    c001b653 <apicOpen()+0x13b>
c001b64e:	ba 50 03 00 00       	mov    edx,0x350
c001b653:	01 d0                	add    eax,edx
c001b655:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b658:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b65b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b65d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b660:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b667:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b66b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b66e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b671:	89 10                	mov    DWORD PTR [eax],edx
c001b673:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b676:	eb 86                	jmp    c001b5fe <apicOpen()+0xe6>
c001b678:	90                   	nop
c001b679:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b67c:	c9                   	leave  
c001b67d:	c3                   	ret    

c001b67e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b67e:	55                   	push   ebp
c001b67f:	89 e5                	mov    ebp,esp
c001b681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b684:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b68a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b68d:	72 1d                	jb     c001b6ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b68f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b692:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b69b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b6a1:	01 d0                	add    eax,edx
c001b6a3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6a6:	73 04                	jae    c001b6ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6a8:	b0 01                	mov    al,0x1
c001b6aa:	eb 02                	jmp    c001b6ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b6ac:	b0 00                	mov    al,0x0
c001b6ae:	5d                   	pop    ebp
c001b6af:	c3                   	ret    

c001b6b0 <IOAPIC::read(int)>:
c001b6b0:	55                   	push   ebp
c001b6b1:	89 e5                	mov    ebp,esp
c001b6b3:	83 ec 10             	sub    esp,0x10
c001b6b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6bf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6c5:	31 d2                	xor    edx,edx
c001b6c7:	88 c2                	mov    dl,al
c001b6c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6cc:	89 10                	mov    DWORD PTR [eax],edx
c001b6ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6d1:	83 c0 10             	add    eax,0x10
c001b6d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6d6:	c9                   	leave  
c001b6d7:	c3                   	ret    

c001b6d8 <IOAPIC::open(int, int, void*)>:
c001b6d8:	55                   	push   ebp
c001b6d9:	89 e5                	mov    ebp,esp
c001b6db:	57                   	push   edi
c001b6dc:	56                   	push   esi
c001b6dd:	53                   	push   ebx
c001b6de:	83 ec 04             	sub    esp,0x4
c001b6e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b6e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6f6:	8b 14 85 40 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcdc0]
c001b6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b700:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b709:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b70f:	8b 14 85 c0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd40]
c001b716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b719:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b71f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b722:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b72b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b731:	89 c6                	mov    esi,eax
c001b733:	81 e6 ff 00 00 00    	and    esi,0xff
c001b739:	89 d0                	mov    eax,edx
c001b73b:	ba 00 00 00 00       	mov    edx,0x0
c001b740:	89 c7                	mov    edi,eax
c001b742:	83 e7 ff             	and    edi,0xffffffff
c001b745:	89 f9                	mov    ecx,edi
c001b747:	89 d0                	mov    eax,edx
c001b749:	25 ff 00 00 00       	and    eax,0xff
c001b74e:	89 c3                	mov    ebx,eax
c001b750:	89 c8                	mov    eax,ecx
c001b752:	89 da                	mov    edx,ebx
c001b754:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b757:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b75a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b75e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b762:	83 e0 00             	and    eax,0x0
c001b765:	09 d0                	or     eax,edx
c001b767:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b76b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b76e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b774:	8d 50 01             	lea    edx,[eax+0x1]
c001b777:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b77a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b780:	31 d2                	xor    edx,edx
c001b782:	88 c2                	mov    dl,al
c001b784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b787:	83 c2 08             	add    edx,0x8
c001b78a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b78e:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b794:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b79a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b79e:	6a 01                	push   0x1
c001b7a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7a3:	e8 08 ff ff ff       	call   c001b6b0 <IOAPIC::read(int)>
c001b7a8:	83 c4 08             	add    esp,0x8
c001b7ab:	c1 f8 10             	sar    eax,0x10
c001b7ae:	25 ff 00 00 00       	and    eax,0xff
c001b7b3:	8d 50 01             	lea    edx,[eax+0x1]
c001b7b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7b9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b7bf:	b8 00 00 00 00       	mov    eax,0x0
c001b7c4:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b7c7:	5b                   	pop    ebx
c001b7c8:	5e                   	pop    esi
c001b7c9:	5f                   	pop    edi
c001b7ca:	5d                   	pop    ebp
c001b7cb:	c3                   	ret    

c001b7cc <IOAPIC::write(int, int)>:
c001b7cc:	55                   	push   ebp
c001b7cd:	89 e5                	mov    ebp,esp
c001b7cf:	83 ec 10             	sub    esp,0x10
c001b7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7db:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b7de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7e1:	31 d2                	xor    edx,edx
c001b7e3:	88 c2                	mov    dl,al
c001b7e5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7e8:	89 10                	mov    DWORD PTR [eax],edx
c001b7ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7ed:	8d 50 10             	lea    edx,[eax+0x10]
c001b7f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7f3:	89 02                	mov    DWORD PTR [edx],eax
c001b7f5:	90                   	nop
c001b7f6:	c9                   	leave  
c001b7f7:	c3                   	ret    

c001b7f8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b7f8:	55                   	push   ebp
c001b7f9:	89 e5                	mov    ebp,esp
c001b7fb:	53                   	push   ebx
c001b7fc:	83 ec 2c             	sub    esp,0x2c
c001b7ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b802:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b805:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b808:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b80b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b80e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b811:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b814:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b817:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b81a:	88 d8                	mov    al,bl
c001b81c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b81f:	88 c8                	mov    al,cl
c001b821:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b824:	88 d0                	mov    al,dl
c001b826:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b829:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b82c:	25 ff 00 00 00       	and    eax,0xff
c001b831:	83 c0 08             	add    eax,0x8
c001b834:	01 c0                	add    eax,eax
c001b836:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b839:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b83c:	25 ff 00 00 00       	and    eax,0xff
c001b841:	83 c0 08             	add    eax,0x8
c001b844:	01 c0                	add    eax,eax
c001b846:	40                   	inc    eax
c001b847:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b84a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b84d:	50                   	push   eax
c001b84e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b851:	e8 5a fe ff ff       	call   c001b6b0 <IOAPIC::read(int)>
c001b856:	83 c4 08             	add    esp,0x8
c001b859:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b85c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b863:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b866:	c1 e0 18             	shl    eax,0x18
c001b869:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b86c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b86f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b872:	52                   	push   edx
c001b873:	50                   	push   eax
c001b874:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b877:	e8 50 ff ff ff       	call   c001b7cc <IOAPIC::write(int, int)>
c001b87c:	83 c4 0c             	add    esp,0xc
c001b87f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b882:	50                   	push   eax
c001b883:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b886:	e8 25 fe ff ff       	call   c001b6b0 <IOAPIC::read(int)>
c001b88b:	83 c4 08             	add    esp,0x8
c001b88e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b891:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b898:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b89f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b8a6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b8aa:	74 09                	je     c001b8b5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b8ac:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b8b3:	eb 07                	jmp    c001b8bc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b8b5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b8bc:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b8c0:	74 09                	je     c001b8cb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b8c2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b8c9:	eb 07                	jmp    c001b8d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b8cb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b8d2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b8d9:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b8dc:	25 ff 00 00 00       	and    eax,0xff
c001b8e1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b8e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b8e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8ea:	52                   	push   edx
c001b8eb:	50                   	push   eax
c001b8ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8ef:	e8 d8 fe ff ff       	call   c001b7cc <IOAPIC::write(int, int)>
c001b8f4:	83 c4 0c             	add    esp,0xc
c001b8f7:	90                   	nop
c001b8f8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b8fb:	c9                   	leave  
c001b8fc:	c3                   	ret    
c001b8fd:	66 90                	xchg   ax,ax
c001b8ff:	90                   	nop

c001b900 <APICTimer::close(int, int, void*)>:
c001b900:	b8 00 00 00 00       	mov    eax,0x0
c001b905:	c3                   	ret    
c001b906:	66 90                	xchg   ax,ax

c001b908 <apicTimerHandler(regs*, void*)>:
c001b908:	83 ec 0c             	sub    esp,0xc
c001b90b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b90f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b911:	b8 10 27 00 00       	mov    eax,0x2710
c001b916:	ba 00 00 00 00       	mov    edx,0x0
c001b91b:	f7 f1                	div    ecx
c001b91d:	83 ec 0c             	sub    esp,0xc
c001b920:	50                   	push   eax
c001b921:	e8 96 1f ff ff       	call   c000d8bc <timerHandler(unsigned int)>
c001b926:	83 c4 10             	add    esp,0x10
c001b929:	90                   	nop
c001b92a:	83 c4 0c             	add    esp,0xc
c001b92d:	c3                   	ret    
c001b92e:	66 90                	xchg   ax,ax

c001b930 <APICTimer::open(int, int, void*)>:
c001b930:	83 ec 0c             	sub    esp,0xc
c001b933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b937:	8b 00                	mov    eax,DWORD PTR [eax]
c001b939:	83 c0 24             	add    eax,0x24
c001b93c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b93e:	83 ec 08             	sub    esp,0x8
c001b941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b945:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b949:	ff d0                	call   eax
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b952:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b956:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b960:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b964:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b96a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b96e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	51                   	push   ecx
c001b978:	6a 01                	push   0x1
c001b97a:	68 08 b9 01 c0       	push   0xc001b908
c001b97f:	52                   	push   edx
c001b980:	50                   	push   eax
c001b981:	e8 4e 06 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b986:	83 c4 20             	add    esp,0x20
c001b989:	89 c2                	mov    edx,eax
c001b98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b995:	b8 00 00 00 00       	mov    eax,0x0
c001b99a:	83 c4 0c             	add    esp,0xc
c001b99d:	c3                   	ret    
c001b99e:	66 90                	xchg   ax,ax

c001b9a0 <APICTimer::write(int)>:
c001b9a0:	83 ec 0c             	sub    esp,0xc
c001b9a3:	83 ec 0c             	sub    esp,0xc
c001b9a6:	68 1c f6 01 c0       	push   0xc001f61c
c001b9ab:	e8 23 4d ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001b9b0:	83 c4 10             	add    esp,0x10
c001b9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9c1:	90                   	nop
c001b9c2:	83 c4 0c             	add    esp,0xc
c001b9c5:	c3                   	ret    
c001b9c6:	66 90                	xchg   ax,ax

c001b9c8 <APICTimer::APICTimer()>:
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cf:	83 ec 08             	sub    esp,0x8
c001b9d2:	68 2c f6 01 c0       	push   0xc001f62c
c001b9d7:	50                   	push   eax
c001b9d8:	e8 13 1e ff ff       	call   c000d7f0 <Timer::Timer(char const*)>
c001b9dd:	83 c4 10             	add    esp,0x10
c001b9e0:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001b9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e9:	89 10                	mov    DWORD PTR [eax],edx
c001b9eb:	90                   	nop
c001b9ec:	83 c4 0c             	add    esp,0xc
c001b9ef:	c3                   	ret    

c001b9f0 <PIT::write(int)>:
c001b9f0:	83 ec 10             	sub    esp,0x10
c001b9f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba05:	a3 44 48 02 c0       	mov    ds:0xc0024844,eax
c001ba0a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba0f:	99                   	cdq    
c001ba10:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba18:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba1f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba24:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba28:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba2d:	ee                   	out    dx,al
c001ba2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba32:	25 ff 00 00 00       	and    eax,0xff
c001ba37:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba3e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba42:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba46:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ba4b:	ee                   	out    dx,al
c001ba4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba50:	c1 f8 08             	sar    eax,0x8
c001ba53:	25 ff 00 00 00       	and    eax,0xff
c001ba58:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ba5f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ba63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba67:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba6c:	ee                   	out    dx,al
c001ba6d:	90                   	nop
c001ba6e:	83 c4 10             	add    esp,0x10
c001ba71:	c3                   	ret    
c001ba72:	66 90                	xchg   ax,ax

c001ba74 <pitHandler(regs*, void*)>:
c001ba74:	83 ec 0c             	sub    esp,0xc
c001ba77:	8b 0d 44 48 02 c0    	mov    ecx,DWORD PTR ds:0xc0024844
c001ba7d:	b8 10 27 00 00       	mov    eax,0x2710
c001ba82:	99                   	cdq    
c001ba83:	f7 f9                	idiv   ecx
c001ba85:	83 ec 0c             	sub    esp,0xc
c001ba88:	50                   	push   eax
c001ba89:	e8 2e 1e ff ff       	call   c000d8bc <timerHandler(unsigned int)>
c001ba8e:	83 c4 10             	add    esp,0x10
c001ba91:	90                   	nop
c001ba92:	83 c4 0c             	add    esp,0xc
c001ba95:	c3                   	ret    
c001ba96:	66 90                	xchg   ax,ax

c001ba98 <PIT::open(int, int, void*)>:
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001baa1:	83 c0 24             	add    eax,0x24
c001baa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001baa6:	83 ec 08             	sub    esp,0x8
c001baa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bab1:	ff d0                	call   eax
c001bab3:	83 c4 10             	add    esp,0x10
c001bab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baba:	83 ec 0c             	sub    esp,0xc
c001babd:	6a 00                	push   0x0
c001babf:	6a 01                	push   0x1
c001bac1:	68 74 ba 01 c0       	push   0xc001ba74
c001bac6:	6a 00                	push   0x0
c001bac8:	50                   	push   eax
c001bac9:	e8 06 05 ff ff       	call   c000bfd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bace:	83 c4 20             	add    esp,0x20
c001bad1:	89 c2                	mov    edx,eax
c001bad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bad7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001badd:	b8 00 00 00 00       	mov    eax,0x0
c001bae2:	83 c4 0c             	add    esp,0xc
c001bae5:	c3                   	ret    
c001bae6:	66 90                	xchg   ax,ax

c001bae8 <PIT::close(int, int, void*)>:
c001bae8:	83 ec 0c             	sub    esp,0xc
c001baeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001baf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafd:	6a 01                	push   0x1
c001baff:	68 74 ba 01 c0       	push   0xc001ba74
c001bb04:	6a 00                	push   0x0
c001bb06:	50                   	push   eax
c001bb07:	e8 fe 04 ff ff       	call   c000c00a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb0c:	83 c4 10             	add    esp,0x10
c001bb0f:	b8 00 00 00 00       	mov    eax,0x0
c001bb14:	83 c4 0c             	add    esp,0xc
c001bb17:	c3                   	ret    

c001bb18 <PIT::PIT()>:
c001bb18:	83 ec 0c             	sub    esp,0xc
c001bb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb1f:	83 ec 08             	sub    esp,0x8
c001bb22:	68 68 f6 01 c0       	push   0xc001f668
c001bb27:	50                   	push   eax
c001bb28:	e8 c3 1c ff ff       	call   c000d7f0 <Timer::Timer(char const*)>
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c001bb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb39:	89 10                	mov    DWORD PTR [eax],edx
c001bb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb45:	31 d2                	xor    edx,edx
c001bb47:	88 c2                	mov    dl,al
c001bb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb5e:	31 d2                	xor    edx,edx
c001bb60:	88 c2                	mov    dl,al
c001bb62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb66:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bb6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb6f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb75:	8d 50 01             	lea    edx,[eax+0x1]
c001bb78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb7c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb82:	31 d2                	xor    edx,edx
c001bb84:	88 c2                	mov    dl,al
c001bb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bb8e:	83 e1 3f             	and    ecx,0x3f
c001bb91:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bb95:	90                   	nop
c001bb96:	83 c4 0c             	add    esp,0xc
c001bb99:	c3                   	ret    
c001bb9a:	66 90                	xchg   ax,ax
c001bb9c:	66 90                	xchg   ax,ax
c001bb9e:	66 90                	xchg   ax,ax

c001bba0 <avxDetect>:
c001bba0:	b8 01 00 00 00       	mov    eax,0x1
c001bba5:	0f a2                	cpuid  
c001bba7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bbad:	74 15                	je     c001bbc4 <avxDetect.noAVX>
c001bbaf:	b8 01 00 00 00       	mov    eax,0x1
c001bbb4:	0f a2                	cpuid  
c001bbb6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bbbc:	74 06                	je     c001bbc4 <avxDetect.noAVX>
c001bbbe:	b8 01 00 00 00       	mov    eax,0x1
c001bbc3:	c3                   	ret    

c001bbc4 <avxDetect.noAVX>:
c001bbc4:	b8 00 00 00 00       	mov    eax,0x0
c001bbc9:	c3                   	ret    

c001bbca <avxSave>:
c001bbca:	53                   	push   ebx
c001bbcb:	52                   	push   edx
c001bbcc:	31 c0                	xor    eax,eax
c001bbce:	48                   	dec    eax
c001bbcf:	89 c2                	mov    edx,eax
c001bbd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbd5:	0f ae 23             	xsave  [ebx]
c001bbd8:	5a                   	pop    edx
c001bbd9:	5b                   	pop    ebx
c001bbda:	c3                   	ret    

c001bbdb <avxLoad>:
c001bbdb:	53                   	push   ebx
c001bbdc:	52                   	push   edx
c001bbdd:	31 c0                	xor    eax,eax
c001bbdf:	48                   	dec    eax
c001bbe0:	89 c2                	mov    edx,eax
c001bbe2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbe6:	0f ae 2b             	xrstor [ebx]
c001bbe9:	5a                   	pop    edx
c001bbea:	5b                   	pop    ebx
c001bbeb:	c3                   	ret    

c001bbec <avxInit>:
c001bbec:	e8 57 02 00 00       	call   c001be48 <sseInit>
c001bbf1:	50                   	push   eax
c001bbf2:	51                   	push   ecx
c001bbf3:	0f 20 e0             	mov    eax,cr4
c001bbf6:	0d 00 00 04 00       	or     eax,0x40000
c001bbfb:	0f 22 e0             	mov    cr4,eax
c001bbfe:	31 c9                	xor    ecx,ecx
c001bc00:	0f 01 d0             	xgetbv 
c001bc03:	0d 07 00 00 00       	or     eax,0x7
c001bc08:	0f 01 d1             	xsetbv 
c001bc0b:	59                   	pop    ecx
c001bc0c:	58                   	pop    eax
c001bc0d:	c3                   	ret    

c001bc0e <avxClose>:
c001bc0e:	c3                   	ret    

c001bc0f <wouldSheSayYes>:
c001bc0f:	c3                   	ret    
c001bc10:	49                   	dec    ecx
c001bc11:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc15:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc19:	75 20                	jne    c001bc3b <isr0+0xb>
c001bc1b:	4e                   	dec    esi
c001bc1c:	79 61                	jns    c001bc7f <isr7+0x3>
c001bc1e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc23:	66 90                	xchg   ax,ax
c001bc25:	66 90                	xchg   ax,ax
c001bc27:	66 90                	xchg   ax,ax
c001bc29:	66 90                	xchg   ax,ax
c001bc2b:	66 90                	xchg   ax,ax
c001bc2d:	66 90                	xchg   ax,ax
c001bc2f:	90                   	nop

c001bc30 <isr0>:
c001bc30:	fa                   	cli    
c001bc31:	68 00 00 00 00       	push   0x0
c001bc36:	68 00 00 00 00       	push   0x0
c001bc3b:	e9 44 01 00 00       	jmp    c001bd84 <int_common_stub>

c001bc40 <isr1>:
c001bc40:	fa                   	cli    
c001bc41:	6a 00                	push   0x0
c001bc43:	6a 01                	push   0x1
c001bc45:	e9 3a 01 00 00       	jmp    c001bd84 <int_common_stub>

c001bc4a <isr2>:
c001bc4a:	fa                   	cli    
c001bc4b:	6a 00                	push   0x0
c001bc4d:	6a 02                	push   0x2
c001bc4f:	e9 30 01 00 00       	jmp    c001bd84 <int_common_stub>

c001bc54 <isr3>:
c001bc54:	fa                   	cli    
c001bc55:	6a 00                	push   0x0
c001bc57:	6a 03                	push   0x3
c001bc59:	e9 26 01 00 00       	jmp    c001bd84 <int_common_stub>

c001bc5e <isr4>:
c001bc5e:	fa                   	cli    
c001bc5f:	6a 00                	push   0x0
c001bc61:	6a 04                	push   0x4
c001bc63:	e9 1c 01 00 00       	jmp    c001bd84 <int_common_stub>

c001bc68 <isr5>:
c001bc68:	fa                   	cli    
c001bc69:	6a 00                	push   0x0
c001bc6b:	6a 05                	push   0x5
c001bc6d:	e9 12 01 00 00       	jmp    c001bd84 <int_common_stub>

c001bc72 <isr6>:
c001bc72:	fa                   	cli    
c001bc73:	6a 00                	push   0x0
c001bc75:	6a 06                	push   0x6
c001bc77:	e9 08 01 00 00       	jmp    c001bd84 <int_common_stub>

c001bc7c <isr7>:
c001bc7c:	fa                   	cli    
c001bc7d:	6a 00                	push   0x0
c001bc7f:	6a 07                	push   0x7
c001bc81:	e9 fe 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bc86 <isr8>:
c001bc86:	fa                   	cli    
c001bc87:	6a 08                	push   0x8
c001bc89:	e9 f6 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bc8e <isr9>:
c001bc8e:	fa                   	cli    
c001bc8f:	6a 00                	push   0x0
c001bc91:	6a 09                	push   0x9
c001bc93:	e9 ec 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bc98 <isr10>:
c001bc98:	fa                   	cli    
c001bc99:	6a 0a                	push   0xa
c001bc9b:	e9 e4 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bca0 <isr11>:
c001bca0:	fa                   	cli    
c001bca1:	6a 0b                	push   0xb
c001bca3:	e9 dc 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bca8 <isr12>:
c001bca8:	fa                   	cli    
c001bca9:	6a 0c                	push   0xc
c001bcab:	e9 d4 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bcb0 <isr13>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 0d                	push   0xd
c001bcb3:	e9 cc 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bcb8 <isr14>:
c001bcb8:	fa                   	cli    
c001bcb9:	6a 0e                	push   0xe
c001bcbb:	e9 c4 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bcc0 <isr15>:
c001bcc0:	fa                   	cli    
c001bcc1:	6a 00                	push   0x0
c001bcc3:	6a 0f                	push   0xf
c001bcc5:	e9 ba 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bcca <isr16>:
c001bcca:	fa                   	cli    
c001bccb:	6a 00                	push   0x0
c001bccd:	6a 10                	push   0x10
c001bccf:	e9 b0 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bcd4 <isr17>:
c001bcd4:	fa                   	cli    
c001bcd5:	6a 00                	push   0x0
c001bcd7:	6a 11                	push   0x11
c001bcd9:	e9 a6 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bcde <isr18>:
c001bcde:	fa                   	cli    
c001bcdf:	6a 00                	push   0x0
c001bce1:	6a 12                	push   0x12
c001bce3:	e9 9c 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bce8 <irq3>:
c001bce8:	fa                   	cli    
c001bce9:	6a 00                	push   0x0
c001bceb:	6a 23                	push   0x23
c001bced:	e9 92 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bcf2 <irq4>:
c001bcf2:	fa                   	cli    
c001bcf3:	6a 00                	push   0x0
c001bcf5:	6a 24                	push   0x24
c001bcf7:	e9 88 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bcfc <irq5>:
c001bcfc:	fa                   	cli    
c001bcfd:	6a 00                	push   0x0
c001bcff:	6a 25                	push   0x25
c001bd01:	e9 7e 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd06 <irq6>:
c001bd06:	fa                   	cli    
c001bd07:	6a 00                	push   0x0
c001bd09:	6a 26                	push   0x26
c001bd0b:	e9 74 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd10 <irq7>:
c001bd10:	fa                   	cli    
c001bd11:	6a 00                	push   0x0
c001bd13:	6a 27                	push   0x27
c001bd15:	e9 6a 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd1a <irq8>:
c001bd1a:	fa                   	cli    
c001bd1b:	6a 00                	push   0x0
c001bd1d:	6a 28                	push   0x28
c001bd1f:	e9 60 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd24 <irq9>:
c001bd24:	fa                   	cli    
c001bd25:	6a 00                	push   0x0
c001bd27:	6a 29                	push   0x29
c001bd29:	e9 56 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd2e <irq10>:
c001bd2e:	fa                   	cli    
c001bd2f:	6a 00                	push   0x0
c001bd31:	6a 2a                	push   0x2a
c001bd33:	e9 4c 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd38 <irq11>:
c001bd38:	fa                   	cli    
c001bd39:	6a 00                	push   0x0
c001bd3b:	6a 2b                	push   0x2b
c001bd3d:	e9 42 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd42 <irq12>:
c001bd42:	fa                   	cli    
c001bd43:	6a 00                	push   0x0
c001bd45:	6a 2c                	push   0x2c
c001bd47:	e9 38 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd4c <irq13>:
c001bd4c:	fa                   	cli    
c001bd4d:	6a 00                	push   0x0
c001bd4f:	6a 2d                	push   0x2d
c001bd51:	e9 2e 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd56 <irq14>:
c001bd56:	fa                   	cli    
c001bd57:	6a 00                	push   0x0
c001bd59:	6a 2e                	push   0x2e
c001bd5b:	e9 24 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd60 <irq15>:
c001bd60:	fa                   	cli    
c001bd61:	6a 00                	push   0x0
c001bd63:	6a 2f                	push   0x2f
c001bd65:	e9 1a 00 00 00       	jmp    c001bd84 <int_common_stub>

c001bd6a <irq1>:
c001bd6a:	fa                   	cli    
c001bd6b:	6a 00                	push   0x0
c001bd6d:	6a 21                	push   0x21
c001bd6f:	eb 13                	jmp    c001bd84 <int_common_stub>

c001bd71 <irq2>:
c001bd71:	fa                   	cli    
c001bd72:	6a 00                	push   0x0
c001bd74:	6a 22                	push   0x22
c001bd76:	eb 0c                	jmp    c001bd84 <int_common_stub>

c001bd78 <isr96>:
c001bd78:	6a 00                	push   0x0
c001bd7a:	6a 60                	push   0x60
c001bd7c:	fb                   	sti    
c001bd7d:	eb 05                	jmp    c001bd84 <int_common_stub>

c001bd7f <irq0>:
c001bd7f:	fa                   	cli    
c001bd80:	6a 00                	push   0x0
c001bd82:	6a 20                	push   0x20

c001bd84 <int_common_stub>:
c001bd84:	60                   	pusha  
c001bd85:	1e                   	push   ds
c001bd86:	06                   	push   es
c001bd87:	0f a0                	push   fs
c001bd89:	0f a8                	push   gs
c001bd8b:	66 b8 10 00          	mov    ax,0x10
c001bd8f:	66 8e d8             	mov    ds,ax
c001bd92:	66 8e c0             	mov    es,ax
c001bd95:	66 8e e0             	mov    fs,ax
c001bd98:	66 8e e8             	mov    gs,ax
c001bd9b:	54                   	push   esp
c001bd9c:	fc                   	cld    
c001bd9d:	e8 32 07 ff ff       	call   c000c4d4 <int_handler>
c001bda2:	81 c4 04 00 00 00    	add    esp,0x4
c001bda8:	0f a9                	pop    gs
c001bdaa:	0f a1                	pop    fs
c001bdac:	07                   	pop    es
c001bdad:	1f                   	pop    ds
c001bdae:	61                   	popa   
c001bdaf:	81 c4 08 00 00 00    	add    esp,0x8
c001bdb5:	cf                   	iret   

c001bdb6 <irq16>:
c001bdb6:	fa                   	cli    
c001bdb7:	6a 00                	push   0x0
c001bdb9:	6a 30                	push   0x30
c001bdbb:	e9 c4 ff ff ff       	jmp    c001bd84 <int_common_stub>

c001bdc0 <irq17>:
c001bdc0:	fa                   	cli    
c001bdc1:	6a 00                	push   0x0
c001bdc3:	6a 31                	push   0x31
c001bdc5:	e9 ba ff ff ff       	jmp    c001bd84 <int_common_stub>

c001bdca <irq18>:
c001bdca:	fa                   	cli    
c001bdcb:	6a 00                	push   0x0
c001bdcd:	6a 32                	push   0x32
c001bdcf:	e9 b0 ff ff ff       	jmp    c001bd84 <int_common_stub>

c001bdd4 <irq19>:
c001bdd4:	fa                   	cli    
c001bdd5:	6a 00                	push   0x0
c001bdd7:	6a 33                	push   0x33
c001bdd9:	e9 a6 ff ff ff       	jmp    c001bd84 <int_common_stub>

c001bdde <irq20>:
c001bdde:	fa                   	cli    
c001bddf:	6a 00                	push   0x0
c001bde1:	6a 34                	push   0x34
c001bde3:	e9 9c ff ff ff       	jmp    c001bd84 <int_common_stub>

c001bde8 <irq21>:
c001bde8:	fa                   	cli    
c001bde9:	6a 00                	push   0x0
c001bdeb:	6a 35                	push   0x35
c001bded:	e9 92 ff ff ff       	jmp    c001bd84 <int_common_stub>

c001bdf2 <irq22>:
c001bdf2:	fa                   	cli    
c001bdf3:	6a 00                	push   0x0
c001bdf5:	6a 36                	push   0x36
c001bdf7:	e9 88 ff ff ff       	jmp    c001bd84 <int_common_stub>

c001bdfc <irq23>:
c001bdfc:	fa                   	cli    
c001bdfd:	6a 00                	push   0x0
c001bdff:	6a 37                	push   0x37
c001be01:	e9 7e ff ff ff       	jmp    c001bd84 <int_common_stub>
c001be06:	66 90                	xchg   ax,ax
c001be08:	66 90                	xchg   ax,ax
c001be0a:	66 90                	xchg   ax,ax
c001be0c:	66 90                	xchg   ax,ax
c001be0e:	66 90                	xchg   ax,ax

c001be10 <i386GetRDRAND>:
c001be10:	b9 64 00 00 00       	mov    ecx,0x64

c001be15 <retry>:
c001be15:	0f c7 f0             	rdrand eax
c001be18:	72 05                	jb     c001be1f <retry.done>
c001be1a:	e2 f9                	loop   c001be15 <retry>

c001be1c <retry.fail>:
c001be1c:	31 c0                	xor    eax,eax
c001be1e:	c3                   	ret    

c001be1f <retry.done>:
c001be1f:	c3                   	ret    

c001be20 <absolutelyNoChanceInHell>:
c001be20:	b8 01 00 00 00       	mov    eax,0x1
c001be25:	0f a2                	cpuid  
c001be27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be2d:	74 06                	je     c001be35 <sseDetect.noSSE>
c001be2f:	b8 01 00 00 00       	mov    eax,0x1
c001be34:	c3                   	ret    

c001be35 <sseDetect.noSSE>:
c001be35:	31 c0                	xor    eax,eax
c001be37:	c3                   	ret    

c001be38 <sseSave>:
c001be38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be3c:	0f ae 00             	fxsave [eax]
c001be3f:	c3                   	ret    

c001be40 <sseLoad>:
c001be40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be44:	0f ae 08             	fxrstor [eax]
c001be47:	c3                   	ret    

c001be48 <sseInit>:
c001be48:	e8 42 00 00 00       	call   c001be8f <x87Init>
c001be4d:	0f 20 e0             	mov    eax,cr4
c001be50:	66 0d 00 06          	or     ax,0x600
c001be54:	0f 22 e0             	mov    cr4,eax
c001be57:	c3                   	ret    

c001be58 <sseClose>:
c001be58:	c3                   	ret    
c001be59:	66 90                	xchg   ax,ax
c001be5b:	66 90                	xchg   ax,ax
c001be5d:	66 90                	xchg   ax,ax
c001be5f:	90                   	nop

c001be60 <value_37F>:
c001be60:	7f 03                	jg     c001be65 <value_37A+0x1>

c001be62 <value_37E>:
c001be62:	7e 03                	jle    c001be67 <x87Detect+0x1>

c001be64 <value_37A>:
c001be64:	7a 03                	jp     c001be69 <x87Detect+0x3>

c001be66 <x87Detect>:
c001be66:	b8 01 00 00 00       	mov    eax,0x1
c001be6b:	0f a2                	cpuid  
c001be6d:	f7 c2 01 00 00 00    	test   edx,0x1
c001be73:	74 06                	je     c001be7b <x87Detect.nox87>
c001be75:	b8 01 00 00 00       	mov    eax,0x1
c001be7a:	c3                   	ret    

c001be7b <x87Detect.nox87>:
c001be7b:	b8 00 00 00 00       	mov    eax,0x0
c001be80:	c3                   	ret    

c001be81 <x87Save>:
c001be81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be85:	dd 30                	fnsave [eax]
c001be87:	c3                   	ret    

c001be88 <x87Load>:
c001be88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be8c:	dd 20                	frstor [eax]
c001be8e:	c3                   	ret    

c001be8f <x87Init>:
c001be8f:	0f 20 c0             	mov    eax,cr0
c001be92:	66 25 fb ff          	and    ax,0xfffb
c001be96:	66 0d 22 00          	or     ax,0x22
c001be9a:	0f 22 c0             	mov    cr0,eax
c001be9d:	db e3                	fninit 
c001be9f:	0f 06                	clts   
c001bea1:	d9 2d 64 be 01 c0    	fldcw  WORD PTR ds:0xc001be64
c001bea7:	c3                   	ret    

c001bea8 <x87Close>:
c001bea8:	c3                   	ret    
c001bea9:	66 90                	xchg   ax,ax
c001beab:	90                   	nop

c001beac <__do_global_ctors_aux>:
c001beac:	a1 5c ce 01 c0       	mov    eax,ds:0xc001ce5c
c001beb1:	83 f8 ff             	cmp    eax,0xffffffff
c001beb4:	74 1a                	je     c001bed0 <__do_global_ctors_aux+0x24>
c001beb6:	55                   	push   ebp
c001beb7:	89 e5                	mov    ebp,esp
c001beb9:	53                   	push   ebx
c001beba:	52                   	push   edx
c001bebb:	bb 5c ce 01 c0       	mov    ebx,0xc001ce5c
c001bec0:	ff d0                	call   eax
c001bec2:	83 eb 04             	sub    ebx,0x4
c001bec5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bec7:	83 f8 ff             	cmp    eax,0xffffffff
c001beca:	75 f4                	jne    c001bec0 <__do_global_ctors_aux+0x14>
c001becc:	58                   	pop    eax
c001becd:	5b                   	pop    ebx
c001bece:	5d                   	pop    ebp
c001becf:	c3                   	ret    
c001bed0:	c3                   	ret    
c001bed1:	66 90                	xchg   ax,ax
c001bed3:	90                   	nop

c001bed4 <__divdi3>:
c001bed4:	55                   	push   ebp
c001bed5:	57                   	push   edi
c001bed6:	56                   	push   esi
c001bed7:	53                   	push   ebx
c001bed8:	83 ec 1c             	sub    esp,0x1c
c001bedb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bedf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bee3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bee6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001beea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001beee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bef2:	85 db                	test   ebx,ebx
c001bef4:	0f 88 8e 00 00 00    	js     c001bf88 <__divdi3+0xb4>
c001befa:	89 dd                	mov    ebp,ebx
c001befc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf04:	89 d3                	mov    ebx,edx
c001bf06:	85 d2                	test   edx,edx
c001bf08:	79 0d                	jns    c001bf17 <__divdi3+0x43>
c001bf0a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf0e:	f7 d8                	neg    eax
c001bf10:	83 d2 00             	adc    edx,0x0
c001bf13:	f7 da                	neg    edx
c001bf15:	89 d3                	mov    ebx,edx
c001bf17:	89 c7                	mov    edi,eax
c001bf19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf1c:	85 db                	test   ebx,ebx
c001bf1e:	75 48                	jne    c001bf68 <__divdi3+0x94>
c001bf20:	39 ef                	cmp    edi,ebp
c001bf22:	76 24                	jbe    c001bf48 <__divdi3+0x74>
c001bf24:	89 ea                	mov    edx,ebp
c001bf26:	f7 f7                	div    edi
c001bf28:	89 c1                	mov    ecx,eax
c001bf2a:	31 f6                	xor    esi,esi
c001bf2c:	89 c8                	mov    eax,ecx
c001bf2e:	89 f2                	mov    edx,esi
c001bf30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf34:	85 c9                	test   ecx,ecx
c001bf36:	74 07                	je     c001bf3f <__divdi3+0x6b>
c001bf38:	f7 d8                	neg    eax
c001bf3a:	83 d2 00             	adc    edx,0x0
c001bf3d:	f7 da                	neg    edx
c001bf3f:	83 c4 1c             	add    esp,0x1c
c001bf42:	5b                   	pop    ebx
c001bf43:	5e                   	pop    esi
c001bf44:	5f                   	pop    edi
c001bf45:	5d                   	pop    ebp
c001bf46:	c3                   	ret    
c001bf47:	90                   	nop
c001bf48:	85 ff                	test   edi,edi
c001bf4a:	75 0b                	jne    c001bf57 <__divdi3+0x83>
c001bf4c:	b8 01 00 00 00       	mov    eax,0x1
c001bf51:	31 d2                	xor    edx,edx
c001bf53:	f7 f3                	div    ebx
c001bf55:	89 c7                	mov    edi,eax
c001bf57:	31 d2                	xor    edx,edx
c001bf59:	89 e8                	mov    eax,ebp
c001bf5b:	f7 f7                	div    edi
c001bf5d:	89 c6                	mov    esi,eax
c001bf5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf62:	f7 f7                	div    edi
c001bf64:	89 c1                	mov    ecx,eax
c001bf66:	eb c4                	jmp    c001bf2c <__divdi3+0x58>
c001bf68:	39 eb                	cmp    ebx,ebp
c001bf6a:	77 3c                	ja     c001bfa8 <__divdi3+0xd4>
c001bf6c:	0f bd f3             	bsr    esi,ebx
c001bf6f:	83 f6 1f             	xor    esi,0x1f
c001bf72:	75 40                	jne    c001bfb4 <__divdi3+0xe0>
c001bf74:	39 eb                	cmp    ebx,ebp
c001bf76:	72 09                	jb     c001bf81 <__divdi3+0xad>
c001bf78:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bf7b:	0f 87 97 00 00 00    	ja     c001c018 <__divdi3+0x144>
c001bf81:	b9 01 00 00 00       	mov    ecx,0x1
c001bf86:	eb a4                	jmp    c001bf2c <__divdi3+0x58>
c001bf88:	f7 d9                	neg    ecx
c001bf8a:	83 d3 00             	adc    ebx,0x0
c001bf8d:	f7 db                	neg    ebx
c001bf8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf92:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf96:	89 dd                	mov    ebp,ebx
c001bf98:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bfa0:	e9 5f ff ff ff       	jmp    c001bf04 <__divdi3+0x30>
c001bfa5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa8:	31 f6                	xor    esi,esi
c001bfaa:	31 c9                	xor    ecx,ecx
c001bfac:	e9 7b ff ff ff       	jmp    c001bf2c <__divdi3+0x58>
c001bfb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb4:	b8 20 00 00 00       	mov    eax,0x20
c001bfb9:	29 f0                	sub    eax,esi
c001bfbb:	89 f1                	mov    ecx,esi
c001bfbd:	d3 e3                	shl    ebx,cl
c001bfbf:	89 fa                	mov    edx,edi
c001bfc1:	88 c1                	mov    cl,al
c001bfc3:	d3 ea                	shr    edx,cl
c001bfc5:	09 da                	or     edx,ebx
c001bfc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bfcb:	89 f1                	mov    ecx,esi
c001bfcd:	d3 e7                	shl    edi,cl
c001bfcf:	89 eb                	mov    ebx,ebp
c001bfd1:	88 c1                	mov    cl,al
c001bfd3:	d3 eb                	shr    ebx,cl
c001bfd5:	89 f1                	mov    ecx,esi
c001bfd7:	d3 e5                	shl    ebp,cl
c001bfd9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bfdc:	88 c1                	mov    cl,al
c001bfde:	d3 ea                	shr    edx,cl
c001bfe0:	09 d5                	or     ebp,edx
c001bfe2:	89 e8                	mov    eax,ebp
c001bfe4:	89 da                	mov    edx,ebx
c001bfe6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bfea:	89 d3                	mov    ebx,edx
c001bfec:	89 c5                	mov    ebp,eax
c001bfee:	f7 e7                	mul    edi
c001bff0:	39 d3                	cmp    ebx,edx
c001bff2:	72 18                	jb     c001c00c <__divdi3+0x138>
c001bff4:	74 0a                	je     c001c000 <__divdi3+0x12c>
c001bff6:	89 e9                	mov    ecx,ebp
c001bff8:	31 f6                	xor    esi,esi
c001bffa:	e9 2d ff ff ff       	jmp    c001bf2c <__divdi3+0x58>
c001bfff:	90                   	nop
c001c000:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c003:	89 f1                	mov    ecx,esi
c001c005:	d3 e7                	shl    edi,cl
c001c007:	39 c7                	cmp    edi,eax
c001c009:	73 eb                	jae    c001bff6 <__divdi3+0x122>
c001c00b:	90                   	nop
c001c00c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c00f:	31 f6                	xor    esi,esi
c001c011:	e9 16 ff ff ff       	jmp    c001bf2c <__divdi3+0x58>
c001c016:	66 90                	xchg   ax,ax
c001c018:	31 c9                	xor    ecx,ecx
c001c01a:	e9 0d ff ff ff       	jmp    c001bf2c <__divdi3+0x58>
c001c01f:	90                   	nop

c001c020 <__moddi3>:
c001c020:	55                   	push   ebp
c001c021:	57                   	push   edi
c001c022:	56                   	push   esi
c001c023:	53                   	push   ebx
c001c024:	83 ec 2c             	sub    esp,0x2c
c001c027:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c02b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c02f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c033:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c037:	85 db                	test   ebx,ebx
c001c039:	0f 88 85 00 00 00    	js     c001c0c4 <__moddi3+0xa4>
c001c03f:	89 de                	mov    esi,ebx
c001c041:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c049:	89 d7                	mov    edi,edx
c001c04b:	85 d2                	test   edx,edx
c001c04d:	79 09                	jns    c001c058 <__moddi3+0x38>
c001c04f:	f7 d8                	neg    eax
c001c051:	83 d2 00             	adc    edx,0x0
c001c054:	f7 da                	neg    edx
c001c056:	89 d7                	mov    edi,edx
c001c058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c05c:	89 cd                	mov    ebp,ecx
c001c05e:	85 ff                	test   edi,edi
c001c060:	75 52                	jne    c001c0b4 <__moddi3+0x94>
c001c062:	89 c3                	mov    ebx,eax
c001c064:	39 f0                	cmp    eax,esi
c001c066:	76 24                	jbe    c001c08c <__moddi3+0x6c>
c001c068:	89 c8                	mov    eax,ecx
c001c06a:	89 f2                	mov    edx,esi
c001c06c:	f7 f3                	div    ebx
c001c06e:	89 d6                	mov    esi,edx
c001c070:	89 f0                	mov    eax,esi
c001c072:	31 d2                	xor    edx,edx
c001c074:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c078:	85 c9                	test   ecx,ecx
c001c07a:	74 07                	je     c001c083 <__moddi3+0x63>
c001c07c:	f7 d8                	neg    eax
c001c07e:	83 d2 00             	adc    edx,0x0
c001c081:	f7 da                	neg    edx
c001c083:	83 c4 2c             	add    esp,0x2c
c001c086:	5b                   	pop    ebx
c001c087:	5e                   	pop    esi
c001c088:	5f                   	pop    edi
c001c089:	5d                   	pop    ebp
c001c08a:	c3                   	ret    
c001c08b:	90                   	nop
c001c08c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c090:	85 db                	test   ebx,ebx
c001c092:	75 0d                	jne    c001c0a1 <__moddi3+0x81>
c001c094:	b8 01 00 00 00       	mov    eax,0x1
c001c099:	31 d2                	xor    edx,edx
c001c09b:	f7 f7                	div    edi
c001c09d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0a1:	89 f0                	mov    eax,esi
c001c0a3:	31 d2                	xor    edx,edx
c001c0a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0a9:	f7 f7                	div    edi
c001c0ab:	89 e8                	mov    eax,ebp
c001c0ad:	f7 f7                	div    edi
c001c0af:	89 d6                	mov    esi,edx
c001c0b1:	eb bd                	jmp    c001c070 <__moddi3+0x50>
c001c0b3:	90                   	nop
c001c0b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0b8:	39 f7                	cmp    edi,esi
c001c0ba:	76 20                	jbe    c001c0dc <__moddi3+0xbc>
c001c0bc:	89 c8                	mov    eax,ecx
c001c0be:	89 f2                	mov    edx,esi
c001c0c0:	eb b2                	jmp    c001c074 <__moddi3+0x54>
c001c0c2:	66 90                	xchg   ax,ax
c001c0c4:	f7 d9                	neg    ecx
c001c0c6:	83 d3 00             	adc    ebx,0x0
c001c0c9:	f7 db                	neg    ebx
c001c0cb:	89 de                	mov    esi,ebx
c001c0cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c0d5:	e9 6f ff ff ff       	jmp    c001c049 <__moddi3+0x29>
c001c0da:	66 90                	xchg   ax,ax
c001c0dc:	0f bd c7             	bsr    eax,edi
c001c0df:	83 f0 1f             	xor    eax,0x1f
c001c0e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0e6:	75 24                	jne    c001c10c <__moddi3+0xec>
c001c0e8:	39 f7                	cmp    edi,esi
c001c0ea:	72 06                	jb     c001c0f2 <__moddi3+0xd2>
c001c0ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c0f0:	77 0c                	ja     c001c0fe <__moddi3+0xde>
c001c0f2:	89 e9                	mov    ecx,ebp
c001c0f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c0f8:	19 fe                	sbb    esi,edi
c001c0fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c102:	89 f2                	mov    edx,esi
c001c104:	e9 6b ff ff ff       	jmp    c001c074 <__moddi3+0x54>
c001c109:	8d 76 00             	lea    esi,[esi+0x0]
c001c10c:	b8 20 00 00 00       	mov    eax,0x20
c001c111:	89 c2                	mov    edx,eax
c001c113:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c117:	29 da                	sub    edx,ebx
c001c119:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c11d:	88 d9                	mov    cl,bl
c001c11f:	d3 e7                	shl    edi,cl
c001c121:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c125:	88 d1                	mov    cl,dl
c001c127:	d3 e8                	shr    eax,cl
c001c129:	09 c7                	or     edi,eax
c001c12b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c12f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c133:	89 d8                	mov    eax,ebx
c001c135:	88 d9                	mov    cl,bl
c001c137:	d3 e7                	shl    edi,cl
c001c139:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c13d:	89 f3                	mov    ebx,esi
c001c13f:	88 d1                	mov    cl,dl
c001c141:	d3 eb                	shr    ebx,cl
c001c143:	89 c7                	mov    edi,eax
c001c145:	88 c1                	mov    cl,al
c001c147:	d3 e6                	shl    esi,cl
c001c149:	89 e8                	mov    eax,ebp
c001c14b:	88 d1                	mov    cl,dl
c001c14d:	d3 e8                	shr    eax,cl
c001c14f:	09 f0                	or     eax,esi
c001c151:	89 f9                	mov    ecx,edi
c001c153:	d3 e5                	shl    ebp,cl
c001c155:	89 da                	mov    edx,ebx
c001c157:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c15b:	89 d3                	mov    ebx,edx
c001c15d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c161:	89 c6                	mov    esi,eax
c001c163:	89 d1                	mov    ecx,edx
c001c165:	39 d3                	cmp    ebx,edx
c001c167:	72 27                	jb     c001c190 <__moddi3+0x170>
c001c169:	74 21                	je     c001c18c <__moddi3+0x16c>
c001c16b:	29 f5                	sub    ebp,esi
c001c16d:	19 cb                	sbb    ebx,ecx
c001c16f:	89 de                	mov    esi,ebx
c001c171:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c175:	d3 e6                	shl    esi,cl
c001c177:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c17b:	89 f9                	mov    ecx,edi
c001c17d:	d3 ed                	shr    ebp,cl
c001c17f:	09 ee                	or     esi,ebp
c001c181:	89 f0                	mov    eax,esi
c001c183:	d3 eb                	shr    ebx,cl
c001c185:	89 da                	mov    edx,ebx
c001c187:	e9 e8 fe ff ff       	jmp    c001c074 <__moddi3+0x54>
c001c18c:	39 c5                	cmp    ebp,eax
c001c18e:	73 db                	jae    c001c16b <__moddi3+0x14b>
c001c190:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c194:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c198:	89 d1                	mov    ecx,edx
c001c19a:	89 c6                	mov    esi,eax
c001c19c:	eb cd                	jmp    c001c16b <__moddi3+0x14b>
c001c19e:	66 90                	xchg   ax,ax

c001c1a0 <__udivdi3>:
c001c1a0:	55                   	push   ebp
c001c1a1:	57                   	push   edi
c001c1a2:	56                   	push   esi
c001c1a3:	53                   	push   ebx
c001c1a4:	83 ec 1c             	sub    esp,0x1c
c001c1a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c1af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c1b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c1b7:	85 d2                	test   edx,edx
c001c1b9:	75 41                	jne    c001c1fc <__udivdi3+0x5c>
c001c1bb:	39 f7                	cmp    edi,esi
c001c1bd:	76 15                	jbe    c001c1d4 <__udivdi3+0x34>
c001c1bf:	89 e8                	mov    eax,ebp
c001c1c1:	89 f2                	mov    edx,esi
c001c1c3:	f7 f7                	div    edi
c001c1c5:	31 db                	xor    ebx,ebx
c001c1c7:	89 da                	mov    edx,ebx
c001c1c9:	83 c4 1c             	add    esp,0x1c
c001c1cc:	5b                   	pop    ebx
c001c1cd:	5e                   	pop    esi
c001c1ce:	5f                   	pop    edi
c001c1cf:	5d                   	pop    ebp
c001c1d0:	c3                   	ret    
c001c1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1d4:	89 f9                	mov    ecx,edi
c001c1d6:	85 ff                	test   edi,edi
c001c1d8:	75 0b                	jne    c001c1e5 <__udivdi3+0x45>
c001c1da:	b8 01 00 00 00       	mov    eax,0x1
c001c1df:	31 d2                	xor    edx,edx
c001c1e1:	f7 f7                	div    edi
c001c1e3:	89 c1                	mov    ecx,eax
c001c1e5:	31 d2                	xor    edx,edx
c001c1e7:	89 f0                	mov    eax,esi
c001c1e9:	f7 f1                	div    ecx
c001c1eb:	89 c3                	mov    ebx,eax
c001c1ed:	89 e8                	mov    eax,ebp
c001c1ef:	f7 f1                	div    ecx
c001c1f1:	89 da                	mov    edx,ebx
c001c1f3:	83 c4 1c             	add    esp,0x1c
c001c1f6:	5b                   	pop    ebx
c001c1f7:	5e                   	pop    esi
c001c1f8:	5f                   	pop    edi
c001c1f9:	5d                   	pop    ebp
c001c1fa:	c3                   	ret    
c001c1fb:	90                   	nop
c001c1fc:	39 f2                	cmp    edx,esi
c001c1fe:	77 1c                	ja     c001c21c <__udivdi3+0x7c>
c001c200:	0f bd da             	bsr    ebx,edx
c001c203:	83 f3 1f             	xor    ebx,0x1f
c001c206:	75 24                	jne    c001c22c <__udivdi3+0x8c>
c001c208:	39 f2                	cmp    edx,esi
c001c20a:	72 08                	jb     c001c214 <__udivdi3+0x74>
c001c20c:	39 ef                	cmp    edi,ebp
c001c20e:	0f 87 84 00 00 00    	ja     c001c298 <__udivdi3+0xf8>
c001c214:	b8 01 00 00 00       	mov    eax,0x1
c001c219:	eb ac                	jmp    c001c1c7 <__udivdi3+0x27>
c001c21b:	90                   	nop
c001c21c:	31 db                	xor    ebx,ebx
c001c21e:	31 c0                	xor    eax,eax
c001c220:	89 da                	mov    edx,ebx
c001c222:	83 c4 1c             	add    esp,0x1c
c001c225:	5b                   	pop    ebx
c001c226:	5e                   	pop    esi
c001c227:	5f                   	pop    edi
c001c228:	5d                   	pop    ebp
c001c229:	c3                   	ret    
c001c22a:	66 90                	xchg   ax,ax
c001c22c:	b8 20 00 00 00       	mov    eax,0x20
c001c231:	29 d8                	sub    eax,ebx
c001c233:	88 d9                	mov    cl,bl
c001c235:	d3 e2                	shl    edx,cl
c001c237:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c23b:	89 fa                	mov    edx,edi
c001c23d:	88 c1                	mov    cl,al
c001c23f:	d3 ea                	shr    edx,cl
c001c241:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c245:	09 d1                	or     ecx,edx
c001c247:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c24b:	88 d9                	mov    cl,bl
c001c24d:	d3 e7                	shl    edi,cl
c001c24f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c253:	89 f7                	mov    edi,esi
c001c255:	88 c1                	mov    cl,al
c001c257:	d3 ef                	shr    edi,cl
c001c259:	88 d9                	mov    cl,bl
c001c25b:	d3 e6                	shl    esi,cl
c001c25d:	89 ea                	mov    edx,ebp
c001c25f:	88 c1                	mov    cl,al
c001c261:	d3 ea                	shr    edx,cl
c001c263:	09 d6                	or     esi,edx
c001c265:	89 f0                	mov    eax,esi
c001c267:	89 fa                	mov    edx,edi
c001c269:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c26d:	89 d7                	mov    edi,edx
c001c26f:	89 c6                	mov    esi,eax
c001c271:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c275:	39 d7                	cmp    edi,edx
c001c277:	72 13                	jb     c001c28c <__udivdi3+0xec>
c001c279:	74 09                	je     c001c284 <__udivdi3+0xe4>
c001c27b:	89 f0                	mov    eax,esi
c001c27d:	31 db                	xor    ebx,ebx
c001c27f:	e9 43 ff ff ff       	jmp    c001c1c7 <__udivdi3+0x27>
c001c284:	88 d9                	mov    cl,bl
c001c286:	d3 e5                	shl    ebp,cl
c001c288:	39 c5                	cmp    ebp,eax
c001c28a:	73 ef                	jae    c001c27b <__udivdi3+0xdb>
c001c28c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c28f:	31 db                	xor    ebx,ebx
c001c291:	e9 31 ff ff ff       	jmp    c001c1c7 <__udivdi3+0x27>
c001c296:	66 90                	xchg   ax,ax
c001c298:	31 c0                	xor    eax,eax
c001c29a:	e9 28 ff ff ff       	jmp    c001c1c7 <__udivdi3+0x27>
c001c29f:	90                   	nop

c001c2a0 <__umoddi3>:
c001c2a0:	55                   	push   ebp
c001c2a1:	57                   	push   edi
c001c2a2:	56                   	push   esi
c001c2a3:	53                   	push   ebx
c001c2a4:	83 ec 1c             	sub    esp,0x1c
c001c2a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c2ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c2af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c2b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2b7:	89 da                	mov    edx,ebx
c001c2b9:	85 c0                	test   eax,eax
c001c2bb:	75 37                	jne    c001c2f4 <__umoddi3+0x54>
c001c2bd:	39 df                	cmp    edi,ebx
c001c2bf:	76 13                	jbe    c001c2d4 <__umoddi3+0x34>
c001c2c1:	89 f0                	mov    eax,esi
c001c2c3:	f7 f7                	div    edi
c001c2c5:	89 d0                	mov    eax,edx
c001c2c7:	31 d2                	xor    edx,edx
c001c2c9:	83 c4 1c             	add    esp,0x1c
c001c2cc:	5b                   	pop    ebx
c001c2cd:	5e                   	pop    esi
c001c2ce:	5f                   	pop    edi
c001c2cf:	5d                   	pop    ebp
c001c2d0:	c3                   	ret    
c001c2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2d4:	89 fd                	mov    ebp,edi
c001c2d6:	85 ff                	test   edi,edi
c001c2d8:	75 0b                	jne    c001c2e5 <__umoddi3+0x45>
c001c2da:	b8 01 00 00 00       	mov    eax,0x1
c001c2df:	31 d2                	xor    edx,edx
c001c2e1:	f7 f7                	div    edi
c001c2e3:	89 c5                	mov    ebp,eax
c001c2e5:	89 d8                	mov    eax,ebx
c001c2e7:	31 d2                	xor    edx,edx
c001c2e9:	f7 f5                	div    ebp
c001c2eb:	89 f0                	mov    eax,esi
c001c2ed:	f7 f5                	div    ebp
c001c2ef:	89 d0                	mov    eax,edx
c001c2f1:	eb d4                	jmp    c001c2c7 <__umoddi3+0x27>
c001c2f3:	90                   	nop
c001c2f4:	89 f1                	mov    ecx,esi
c001c2f6:	39 d8                	cmp    eax,ebx
c001c2f8:	76 0a                	jbe    c001c304 <__umoddi3+0x64>
c001c2fa:	89 f0                	mov    eax,esi
c001c2fc:	83 c4 1c             	add    esp,0x1c
c001c2ff:	5b                   	pop    ebx
c001c300:	5e                   	pop    esi
c001c301:	5f                   	pop    edi
c001c302:	5d                   	pop    ebp
c001c303:	c3                   	ret    
c001c304:	0f bd e8             	bsr    ebp,eax
c001c307:	83 f5 1f             	xor    ebp,0x1f
c001c30a:	75 1c                	jne    c001c328 <__umoddi3+0x88>
c001c30c:	39 d8                	cmp    eax,ebx
c001c30e:	72 04                	jb     c001c314 <__umoddi3+0x74>
c001c310:	39 f7                	cmp    edi,esi
c001c312:	77 08                	ja     c001c31c <__umoddi3+0x7c>
c001c314:	89 da                	mov    edx,ebx
c001c316:	29 fe                	sub    esi,edi
c001c318:	19 c2                	sbb    edx,eax
c001c31a:	89 f1                	mov    ecx,esi
c001c31c:	89 c8                	mov    eax,ecx
c001c31e:	83 c4 1c             	add    esp,0x1c
c001c321:	5b                   	pop    ebx
c001c322:	5e                   	pop    esi
c001c323:	5f                   	pop    edi
c001c324:	5d                   	pop    ebp
c001c325:	c3                   	ret    
c001c326:	66 90                	xchg   ax,ax
c001c328:	ba 20 00 00 00       	mov    edx,0x20
c001c32d:	29 ea                	sub    edx,ebp
c001c32f:	89 e9                	mov    ecx,ebp
c001c331:	d3 e0                	shl    eax,cl
c001c333:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c337:	89 f8                	mov    eax,edi
c001c339:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c33d:	88 d1                	mov    cl,dl
c001c33f:	d3 e8                	shr    eax,cl
c001c341:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c345:	09 c1                	or     ecx,eax
c001c347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c34b:	89 e9                	mov    ecx,ebp
c001c34d:	d3 e7                	shl    edi,cl
c001c34f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c353:	89 d8                	mov    eax,ebx
c001c355:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c359:	88 d1                	mov    cl,dl
c001c35b:	d3 e8                	shr    eax,cl
c001c35d:	89 c7                	mov    edi,eax
c001c35f:	89 e9                	mov    ecx,ebp
c001c361:	d3 e3                	shl    ebx,cl
c001c363:	89 f0                	mov    eax,esi
c001c365:	88 d1                	mov    cl,dl
c001c367:	d3 e8                	shr    eax,cl
c001c369:	09 d8                	or     eax,ebx
c001c36b:	89 e9                	mov    ecx,ebp
c001c36d:	d3 e6                	shl    esi,cl
c001c36f:	89 f3                	mov    ebx,esi
c001c371:	89 fa                	mov    edx,edi
c001c373:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c377:	89 d1                	mov    ecx,edx
c001c379:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c37d:	89 c6                	mov    esi,eax
c001c37f:	89 d7                	mov    edi,edx
c001c381:	39 d1                	cmp    ecx,edx
c001c383:	72 27                	jb     c001c3ac <__umoddi3+0x10c>
c001c385:	74 21                	je     c001c3a8 <__umoddi3+0x108>
c001c387:	89 ca                	mov    edx,ecx
c001c389:	29 f3                	sub    ebx,esi
c001c38b:	19 fa                	sbb    edx,edi
c001c38d:	89 d0                	mov    eax,edx
c001c38f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c393:	d3 e0                	shl    eax,cl
c001c395:	89 e9                	mov    ecx,ebp
c001c397:	d3 eb                	shr    ebx,cl
c001c399:	09 d8                	or     eax,ebx
c001c39b:	d3 ea                	shr    edx,cl
c001c39d:	83 c4 1c             	add    esp,0x1c
c001c3a0:	5b                   	pop    ebx
c001c3a1:	5e                   	pop    esi
c001c3a2:	5f                   	pop    edi
c001c3a3:	5d                   	pop    ebp
c001c3a4:	c3                   	ret    
c001c3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3a8:	39 c3                	cmp    ebx,eax
c001c3aa:	73 db                	jae    c001c387 <__umoddi3+0xe7>
c001c3ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c3b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c3b4:	89 d7                	mov    edi,edx
c001c3b6:	89 c6                	mov    esi,eax
c001c3b8:	eb cd                	jmp    c001c387 <__umoddi3+0xe7>

Disassembly of section .init:

c001c3ba <_init>:
c001c3ba:	55                   	push   ebp
c001c3bb:	89 e5                	mov    ebp,esp
c001c3bd:	e8 56 3d fe ff       	call   c0000118 <frame_dummy>
c001c3c2:	e8 e5 fa ff ff       	call   c001beac <__do_global_ctors_aux>
c001c3c7:	5d                   	pop    ebp
c001c3c8:	c3                   	ret    

Disassembly of section .fini:

c001c3c9 <_fini>:
c001c3c9:	55                   	push   ebp
c001c3ca:	89 e5                	mov    ebp,esp
c001c3cc:	e8 d7 3c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c3d1:	5d                   	pop    ebp
c001c3d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c3d4 <Computer::~Computer()>:
c001c3d4:	83 ec 0c             	sub    esp,0xc
c001c3d7:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c001c3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e0:	89 10                	mov    DWORD PTR [eax],edx
c001c3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e6:	83 ec 0c             	sub    esp,0xc
c001c3e9:	50                   	push   eax
c001c3ea:	e8 3b fb fe ff       	call   c000bf2a <Device::~Device()>
c001c3ef:	83 c4 10             	add    esp,0x10
c001c3f2:	90                   	nop
c001c3f3:	83 c4 0c             	add    esp,0xc
c001c3f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c3f8 <Computer::~Computer()>:
c001c3f8:	83 ec 0c             	sub    esp,0xc
c001c3fb:	83 ec 0c             	sub    esp,0xc
c001c3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c402:	e8 cd ff ff ff       	call   c001c3d4 <Computer::~Computer()>
c001c407:	83 c4 10             	add    esp,0x10
c001c40a:	83 ec 08             	sub    esp,0x8
c001c40d:	68 70 01 00 00       	push   0x170
c001c412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c416:	e8 d7 e6 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001c41b:	83 c4 10             	add    esp,0x10
c001c41e:	83 c4 0c             	add    esp,0xc
c001c421:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c422 <idleCommon()>:
c001c422:	83 ec 0c             	sub    esp,0xc
c001c425:	fa                   	cli    
c001c426:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001c42c:	e8 f7 75 ff ff       	call   c0013a28 <schedule()>
c001c431:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001c436:	48                   	dec    eax
c001c437:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001c43c:	75 01                	jne    c001c43f <idleCommon()+0x1d>
c001c43e:	fb                   	sti    
c001c43f:	83 c4 0c             	add    esp,0xc
c001c442:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c444 <LinkedList<UnixFile>::~LinkedList()>:
c001c444:	90                   	nop
c001c445:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c446 <LinkedList<UnixFile>::LinkedList()>:
c001c446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c44a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c45b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c45f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c46a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c474:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c47b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c47f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c486:	90                   	nop
c001c487:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c488 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c488:	83 ec 0c             	sub    esp,0xc
c001c48b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c490:	75 10                	jne    c001c4a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	68 34 d9 01 c0       	push   0xc001d934
c001c49a:	e8 34 42 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c49f:	83 c4 10             	add    esp,0x10
c001c4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4a8:	85 c0                	test   eax,eax
c001c4aa:	74 34                	je     c001c4e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4b3:	85 c0                	test   eax,eax
c001c4b5:	74 29                	je     c001c4e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4de:	eb 65                	jmp    c001c545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4e6:	85 c0                	test   eax,eax
c001c4e8:	75 4b                	jne    c001c535 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4f1:	85 c0                	test   eax,eax
c001c4f3:	75 40                	jne    c001c535 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4fd:	89 10                	mov    DWORD PTR [eax],edx
c001c4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c503:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c507:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c511:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c51f:	85 c0                	test   eax,eax
c001c521:	74 22                	je     c001c545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c523:	83 ec 0c             	sub    esp,0xc
c001c526:	68 56 d9 01 c0       	push   0xc001d956
c001c52b:	e8 a3 41 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c530:	83 c4 10             	add    esp,0x10
c001c533:	eb 10                	jmp    c001c545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c535:	83 ec 0c             	sub    esp,0xc
c001c538:	68 60 d9 01 c0       	push   0xc001d960
c001c53d:	e8 91 41 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c542:	83 c4 10             	add    esp,0x10
c001c545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c549:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c54c:	8d 50 01             	lea    edx,[eax+0x1]
c001c54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c553:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c556:	90                   	nop
c001c557:	83 c4 0c             	add    esp,0xc
c001c55a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c55c <LinkedList<UnixFile>::getFirstElement()>:
c001c55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c560:	8b 00                	mov    eax,DWORD PTR [eax]
c001c562:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c564 <LinkedList<UnixFile>::removeFirst()>:
c001c564:	83 ec 0c             	sub    esp,0xc
c001c567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c56d:	85 c0                	test   eax,eax
c001c56f:	75 12                	jne    c001c583 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c571:	83 ec 0c             	sub    esp,0xc
c001c574:	68 6c d9 01 c0       	push   0xc001d96c
c001c579:	e8 55 41 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c57e:	83 c4 10             	add    esp,0x10
c001c581:	eb 7e                	jmp    c001c601 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c587:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c58a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c58d:	85 c0                	test   eax,eax
c001c58f:	74 10                	je     c001c5a1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c591:	83 ec 0c             	sub    esp,0xc
c001c594:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c599:	e8 35 41 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c59e:	83 c4 10             	add    esp,0x10
c001c5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5aa:	85 c0                	test   eax,eax
c001c5ac:	75 33                	jne    c001c5e1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ca:	83 f8 01             	cmp    eax,0x1
c001c5cd:	74 21                	je     c001c5f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5cf:	83 ec 0c             	sub    esp,0xc
c001c5d2:	68 90 d9 01 c0       	push   0xc001d990
c001c5d7:	e8 f7 40 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c5dc:	83 c4 10             	add    esp,0x10
c001c5df:	eb 0f                	jmp    c001c5f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5e7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ee:	89 10                	mov    DWORD PTR [eax],edx
c001c5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c601:	83 c4 0c             	add    esp,0xc
c001c604:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c606 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c60a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c60d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c60e <DriverlessDevice::~DriverlessDevice()>:
c001c60e:	ba fc df 01 c0       	mov    edx,0xc001dffc
c001c613:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c617:	89 10                	mov    DWORD PTR [eax],edx
c001c619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c61d:	50                   	push   eax
c001c61e:	e8 07 f9 fe ff       	call   c000bf2a <Device::~Device()>
c001c623:	83 c4 04             	add    esp,0x4
c001c626:	90                   	nop
c001c627:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c628 <DriverlessDevice::~DriverlessDevice()>:
c001c628:	83 ec 0c             	sub    esp,0xc
c001c62b:	83 ec 0c             	sub    esp,0xc
c001c62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c632:	e8 d7 ff ff ff       	call   c001c60e <DriverlessDevice::~DriverlessDevice()>
c001c637:	83 c4 10             	add    esp,0x10
c001c63a:	83 ec 08             	sub    esp,0x8
c001c63d:	68 58 01 00 00       	push   0x158
c001c642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c646:	e8 a7 e4 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001c64b:	83 c4 10             	add    esp,0x10
c001c64e:	83 c4 0c             	add    esp,0xc
c001c651:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c652 <LinkedList<Device>::addElement(Device*)>:
c001c652:	83 ec 0c             	sub    esp,0xc
c001c655:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c65a:	75 10                	jne    c001c66c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c65c:	83 ec 0c             	sub    esp,0xc
c001c65f:	68 34 d9 01 c0       	push   0xc001d934
c001c664:	e8 6a 40 ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c669:	83 c4 10             	add    esp,0x10
c001c66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c670:	8b 00                	mov    eax,DWORD PTR [eax]
c001c672:	85 c0                	test   eax,eax
c001c674:	74 3a                	je     c001c6b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c67d:	85 c0                	test   eax,eax
c001c67f:	74 2f                	je     c001c6b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c685:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c68c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c69a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6a4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6ae:	eb 68                	jmp    c001c718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6b6:	85 c0                	test   eax,eax
c001c6b8:	75 4e                	jne    c001c708 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6c1:	85 c0                	test   eax,eax
c001c6c3:	75 43                	jne    c001c708 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6cd:	89 10                	mov    DWORD PTR [eax],edx
c001c6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6e1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6f2:	85 c0                	test   eax,eax
c001c6f4:	74 22                	je     c001c718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6f6:	83 ec 0c             	sub    esp,0xc
c001c6f9:	68 56 d9 01 c0       	push   0xc001d956
c001c6fe:	e8 d0 3f ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c703:	83 c4 10             	add    esp,0x10
c001c706:	eb 10                	jmp    c001c718 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c708:	83 ec 0c             	sub    esp,0xc
c001c70b:	68 60 d9 01 c0       	push   0xc001d960
c001c710:	e8 be 3f ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c715:	83 c4 10             	add    esp,0x10
c001c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c71f:	8d 50 01             	lea    edx,[eax+0x1]
c001c722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c726:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c729:	90                   	nop
c001c72a:	83 c4 0c             	add    esp,0xc
c001c72d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c72e <LinkedList<Device>::LinkedList()>:
c001c72e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c732:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c73c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c747:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c752:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c75c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c767:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c76e:	90                   	nop
c001c76f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c770 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c774:	8b 00                	mov    eax,DWORD PTR [eax]
c001c776:	85 c0                	test   eax,eax
c001c778:	75 0e                	jne    c001c788 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c77a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c77e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c781:	85 c0                	test   eax,eax
c001c783:	75 03                	jne    c001c788 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c785:	b0 01                	mov    al,0x1
c001c787:	c3                   	ret    
c001c788:	b0 00                	mov    al,0x0
c001c78a:	90                   	nop
c001c78b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c78c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c790:	8b 00                	mov    eax,DWORD PTR [eax]
c001c792:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c794:	83 ec 0c             	sub    esp,0xc
c001c797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c79d:	85 c0                	test   eax,eax
c001c79f:	75 17                	jne    c001c7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c7a1:	83 ec 0c             	sub    esp,0xc
c001c7a4:	68 6c d9 01 c0       	push   0xc001d96c
c001c7a9:	e8 25 3f ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	e9 92 00 00 00       	jmp    c001c848 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c7b6:	66 90                	xchg   ax,ax
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7c2:	85 c0                	test   eax,eax
c001c7c4:	0f 95 c0             	setne  al
c001c7c7:	84 c0                	test   al,al
c001c7c9:	74 11                	je     c001c7dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c7cb:	83 ec 0c             	sub    esp,0xc
c001c7ce:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c7d3:	e8 fb 3e ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c7d8:	83 c4 10             	add    esp,0x10
c001c7db:	90                   	nop
c001c7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7e5:	85 c0                	test   eax,eax
c001c7e7:	0f 94 c0             	sete   al
c001c7ea:	84 c0                	test   al,al
c001c7ec:	74 36                	je     c001c824 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c807:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c80a:	83 f8 01             	cmp    eax,0x1
c001c80d:	74 25                	je     c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c80f:	83 ec 0c             	sub    esp,0xc
c001c812:	68 90 d9 01 c0       	push   0xc001d990
c001c817:	e8 b7 3e ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c81c:	83 c4 10             	add    esp,0x10
c001c81f:	eb 13                	jmp    c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c821:	8d 76 00             	lea    esi,[esi+0x0]
c001c824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c828:	8b 00                	mov    eax,DWORD PTR [eax]
c001c82a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c831:	89 10                	mov    DWORD PTR [eax],edx
c001c833:	90                   	nop
c001c834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c838:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c83b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c842:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c845:	8d 76 00             	lea    esi,[esi+0x0]
c001c848:	83 c4 0c             	add    esp,0xc
c001c84b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c84c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c84c:	83 ec 0c             	sub    esp,0xc
c001c84f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c854:	75 12                	jne    c001c868 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c856:	83 ec 0c             	sub    esp,0xc
c001c859:	68 34 d9 01 c0       	push   0xc001d934
c001c85e:	e8 70 3e ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c863:	83 c4 10             	add    esp,0x10
c001c866:	66 90                	xchg   ax,ax
c001c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c86e:	85 c0                	test   eax,eax
c001c870:	74 36                	je     c001c8a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c879:	85 c0                	test   eax,eax
c001c87b:	74 2b                	je     c001c8a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c881:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c884:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c888:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c893:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c89d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8a4:	eb 6a                	jmp    c001c910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8a6:	66 90                	xchg   ax,ax
c001c8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ae:	85 c0                	test   eax,eax
c001c8b0:	75 4e                	jne    c001c900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8b9:	85 c0                	test   eax,eax
c001c8bb:	75 43                	jne    c001c900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8c5:	89 10                	mov    DWORD PTR [eax],edx
c001c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8e7:	85 c0                	test   eax,eax
c001c8e9:	74 25                	je     c001c910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8eb:	83 ec 0c             	sub    esp,0xc
c001c8ee:	68 56 d9 01 c0       	push   0xc001d956
c001c8f3:	e8 db 3d ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c8f8:	83 c4 10             	add    esp,0x10
c001c8fb:	eb 13                	jmp    c001c910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001c900:	83 ec 0c             	sub    esp,0xc
c001c903:	68 60 d9 01 c0       	push   0xc001d960
c001c908:	e8 c6 3d ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c90d:	83 c4 10             	add    esp,0x10
c001c910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c917:	8d 50 01             	lea    edx,[eax+0x1]
c001c91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c921:	90                   	nop
c001c922:	83 c4 0c             	add    esp,0xc
c001c925:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c928 <ACPI::~ACPI()>:
c001c928:	83 ec 0c             	sub    esp,0xc
c001c92b:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c001c930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c934:	89 10                	mov    DWORD PTR [eax],edx
c001c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93a:	83 ec 0c             	sub    esp,0xc
c001c93d:	50                   	push   eax
c001c93e:	e8 e7 f5 fe ff       	call   c000bf2a <Device::~Device()>
c001c943:	83 c4 10             	add    esp,0x10
c001c946:	90                   	nop
c001c947:	83 c4 0c             	add    esp,0xc
c001c94a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c94c <ACPI::~ACPI()>:
c001c94c:	83 ec 0c             	sub    esp,0xc
c001c94f:	83 ec 0c             	sub    esp,0xc
c001c952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c956:	e8 cd ff ff ff       	call   c001c928 <ACPI::~ACPI()>
c001c95b:	83 c4 10             	add    esp,0x10
c001c95e:	83 ec 08             	sub    esp,0x8
c001c961:	68 64 12 00 00       	push   0x1264
c001c966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c96a:	e8 83 e1 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001c96f:	83 c4 10             	add    esp,0x10
c001c972:	83 c4 0c             	add    esp,0xc
c001c975:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c978 <LinkedList<Device>::~LinkedList()>:
c001c978:	90                   	nop
c001c979:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c97c <LinkedList<Device>::isEmpty()>:
c001c97c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c980:	8b 00                	mov    eax,DWORD PTR [eax]
c001c982:	85 c0                	test   eax,eax
c001c984:	75 0e                	jne    c001c994 <LinkedList<Device>::isEmpty()+0x18>
c001c986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c98a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c98d:	85 c0                	test   eax,eax
c001c98f:	75 03                	jne    c001c994 <LinkedList<Device>::isEmpty()+0x18>
c001c991:	b0 01                	mov    al,0x1
c001c993:	c3                   	ret    
c001c994:	b0 00                	mov    al,0x0
c001c996:	90                   	nop
c001c997:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c998 <LinkedList<Device>::getFirstElement()>:
c001c998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c99c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c99e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c9a0 <LinkedList<Device>::removeFirst()>:
c001c9a0:	83 ec 0c             	sub    esp,0xc
c001c9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9a9:	85 c0                	test   eax,eax
c001c9ab:	75 17                	jne    c001c9c4 <LinkedList<Device>::removeFirst()+0x24>
c001c9ad:	83 ec 0c             	sub    esp,0xc
c001c9b0:	68 6c d9 01 c0       	push   0xc001d96c
c001c9b5:	e8 19 3d ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c9ba:	83 c4 10             	add    esp,0x10
c001c9bd:	e9 92 00 00 00       	jmp    c001ca54 <LinkedList<Device>::removeFirst()+0xb4>
c001c9c2:	66 90                	xchg   ax,ax
c001c9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9cb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9d1:	85 c0                	test   eax,eax
c001c9d3:	74 13                	je     c001c9e8 <LinkedList<Device>::removeFirst()+0x48>
c001c9d5:	83 ec 0c             	sub    esp,0xc
c001c9d8:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c9dd:	e8 f1 3c ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001c9e2:	83 c4 10             	add    esp,0x10
c001c9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9ee:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9f4:	85 c0                	test   eax,eax
c001c9f6:	75 34                	jne    c001ca2c <LinkedList<Device>::removeFirst()+0x8c>
c001c9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca14:	83 f8 01             	cmp    eax,0x1
c001ca17:	74 27                	je     c001ca40 <LinkedList<Device>::removeFirst()+0xa0>
c001ca19:	83 ec 0c             	sub    esp,0xc
c001ca1c:	68 90 d9 01 c0       	push   0xc001d990
c001ca21:	e8 ad 3c ff ff       	call   c00106d3 <Krnl::panic(char const*)>
c001ca26:	83 c4 10             	add    esp,0x10
c001ca29:	eb 15                	jmp    c001ca40 <LinkedList<Device>::removeFirst()+0xa0>
c001ca2b:	90                   	nop
c001ca2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca32:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3c:	89 10                	mov    DWORD PTR [eax],edx
c001ca3e:	66 90                	xchg   ax,ax
c001ca40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca47:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca51:	8d 76 00             	lea    esi,[esi+0x0]
c001ca54:	83 c4 0c             	add    esp,0xc
c001ca57:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca58 <CPU::~CPU()>:
c001ca58:	83 ec 0c             	sub    esp,0xc
c001ca5b:	ba 00 e7 01 c0       	mov    edx,0xc001e700
c001ca60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca64:	89 10                	mov    DWORD PTR [eax],edx
c001ca66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca6a:	83 ec 0c             	sub    esp,0xc
c001ca6d:	50                   	push   eax
c001ca6e:	e8 b7 f4 fe ff       	call   c000bf2a <Device::~Device()>
c001ca73:	83 c4 10             	add    esp,0x10
c001ca76:	90                   	nop
c001ca77:	83 c4 0c             	add    esp,0xc
c001ca7a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ca7c <CPU::~CPU()>:
c001ca7c:	83 ec 0c             	sub    esp,0xc
c001ca7f:	83 ec 0c             	sub    esp,0xc
c001ca82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca86:	e8 cd ff ff ff       	call   c001ca58 <CPU::~CPU()>
c001ca8b:	83 c4 10             	add    esp,0x10
c001ca8e:	83 ec 08             	sub    esp,0x8
c001ca91:	68 94 11 00 00       	push   0x1194
c001ca96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca9a:	e8 53 e0 fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ca9f:	83 c4 10             	add    esp,0x10
c001caa2:	83 c4 0c             	add    esp,0xc
c001caa5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001caa8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001caa8:	90                   	nop
c001caa9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001caac <ThreadControlBlock::ThreadControlBlock()>:
c001caac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cab0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cabb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cac6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cacd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cadc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001caeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caef:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001caf3:	90                   	nop
c001caf4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001caf8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001caf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cafc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb11:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb38:	90                   	nop
c001cb39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb43:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cb44 <PCI::~PCI()>:
c001cb44:	83 ec 0c             	sub    esp,0xc
c001cb47:	ba e8 f1 01 c0       	mov    edx,0xc001f1e8
c001cb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb50:	89 10                	mov    DWORD PTR [eax],edx
c001cb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb56:	83 ec 0c             	sub    esp,0xc
c001cb59:	50                   	push   eax
c001cb5a:	e8 55 ee fe ff       	call   c000b9b4 <Bus::~Bus()>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	90                   	nop
c001cb63:	83 c4 0c             	add    esp,0xc
c001cb66:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb68 <PCI::~PCI()>:
c001cb68:	83 ec 0c             	sub    esp,0xc
c001cb6b:	83 ec 0c             	sub    esp,0xc
c001cb6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb72:	e8 cd ff ff ff       	call   c001cb44 <PCI::~PCI()>
c001cb77:	83 c4 10             	add    esp,0x10
c001cb7a:	83 ec 08             	sub    esp,0x8
c001cb7d:	68 5c 01 00 00       	push   0x15c
c001cb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb86:	e8 67 df fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cb8b:	83 c4 10             	add    esp,0x10
c001cb8e:	83 c4 0c             	add    esp,0xc
c001cb91:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cb92 <IDE::~IDE()>:
c001cb92:	83 ec 0c             	sub    esp,0xc
c001cb95:	ba 9c f2 01 c0       	mov    edx,0xc001f29c
c001cb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9e:	89 10                	mov    DWORD PTR [eax],edx
c001cba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	50                   	push   eax
c001cba8:	e8 f7 f7 fe ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c001cbad:	83 c4 10             	add    esp,0x10
c001cbb0:	90                   	nop
c001cbb1:	83 c4 0c             	add    esp,0xc
c001cbb4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cbb6 <IDE::~IDE()>:
c001cbb6:	83 ec 0c             	sub    esp,0xc
c001cbb9:	83 ec 0c             	sub    esp,0xc
c001cbbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbc0:	e8 cd ff ff ff       	call   c001cb92 <IDE::~IDE()>
c001cbc5:	83 c4 10             	add    esp,0x10
c001cbc8:	83 ec 08             	sub    esp,0x8
c001cbcb:	68 70 02 00 00       	push   0x270
c001cbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd4:	e8 19 df fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cbd9:	83 c4 10             	add    esp,0x10
c001cbdc:	83 c4 0c             	add    esp,0xc
c001cbdf:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cbe0 <SATABus::~SATABus()>:
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	ba ec f2 01 c0       	mov    edx,0xc001f2ec
c001cbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbec:	89 10                	mov    DWORD PTR [eax],edx
c001cbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	50                   	push   eax
c001cbf6:	e8 a9 f7 fe ff       	call   c000c3a4 <HardDiskController::~HardDiskController()>
c001cbfb:	83 c4 10             	add    esp,0x10
c001cbfe:	90                   	nop
c001cbff:	83 c4 0c             	add    esp,0xc
c001cc02:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc04 <SATABus::~SATABus()>:
c001cc04:	83 ec 0c             	sub    esp,0xc
c001cc07:	83 ec 0c             	sub    esp,0xc
c001cc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc0e:	e8 cd ff ff ff       	call   c001cbe0 <SATABus::~SATABus()>
c001cc13:	83 c4 10             	add    esp,0x10
c001cc16:	83 ec 08             	sub    esp,0x8
c001cc19:	68 64 01 00 00       	push   0x164
c001cc1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc22:	e8 cb de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cc27:	83 c4 10             	add    esp,0x10
c001cc2a:	83 c4 0c             	add    esp,0xc
c001cc2d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc2e <ATA::~ATA()>:
c001cc2e:	83 ec 0c             	sub    esp,0xc
c001cc31:	ba 2c f3 01 c0       	mov    edx,0xc001f32c
c001cc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3a:	89 10                	mov    DWORD PTR [eax],edx
c001cc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	50                   	push   eax
c001cc44:	e8 3d f8 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cc49:	83 c4 10             	add    esp,0x10
c001cc4c:	90                   	nop
c001cc4d:	83 c4 0c             	add    esp,0xc
c001cc50:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc52 <ATA::~ATA()>:
c001cc52:	83 ec 0c             	sub    esp,0xc
c001cc55:	83 ec 0c             	sub    esp,0xc
c001cc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5c:	e8 cd ff ff ff       	call   c001cc2e <ATA::~ATA()>
c001cc61:	83 c4 10             	add    esp,0x10
c001cc64:	83 ec 08             	sub    esp,0x8
c001cc67:	68 7c 01 00 00       	push   0x17c
c001cc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc70:	e8 7d de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cc75:	83 c4 10             	add    esp,0x10
c001cc78:	83 c4 0c             	add    esp,0xc
c001cc7b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cc7c <ATAPI::~ATAPI()>:
c001cc7c:	83 ec 0c             	sub    esp,0xc
c001cc7f:	ba 74 f3 01 c0       	mov    edx,0xc001f374
c001cc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc88:	89 10                	mov    DWORD PTR [eax],edx
c001cc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8e:	83 ec 0c             	sub    esp,0xc
c001cc91:	50                   	push   eax
c001cc92:	e8 ef f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cc97:	83 c4 10             	add    esp,0x10
c001cc9a:	90                   	nop
c001cc9b:	83 c4 0c             	add    esp,0xc
c001cc9e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cca0 <ATAPI::~ATAPI()>:
c001cca0:	83 ec 0c             	sub    esp,0xc
c001cca3:	83 ec 0c             	sub    esp,0xc
c001cca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccaa:	e8 cd ff ff ff       	call   c001cc7c <ATAPI::~ATAPI()>
c001ccaf:	83 c4 10             	add    esp,0x10
c001ccb2:	83 ec 08             	sub    esp,0x8
c001ccb5:	68 84 01 00 00       	push   0x184
c001ccba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccbe:	e8 2f de fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ccc3:	83 c4 10             	add    esp,0x10
c001ccc6:	83 c4 0c             	add    esp,0xc
c001ccc9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ccca <SATA::~SATA()>:
c001ccca:	83 ec 0c             	sub    esp,0xc
c001cccd:	ba 28 f4 01 c0       	mov    edx,0xc001f428
c001ccd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd6:	89 10                	mov    DWORD PTR [eax],edx
c001ccd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccdc:	83 ec 0c             	sub    esp,0xc
c001ccdf:	50                   	push   eax
c001cce0:	e8 a1 f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cce5:	83 c4 10             	add    esp,0x10
c001cce8:	90                   	nop
c001cce9:	83 c4 0c             	add    esp,0xc
c001ccec:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ccee <SATA::~SATA()>:
c001ccee:	83 ec 0c             	sub    esp,0xc
c001ccf1:	83 ec 0c             	sub    esp,0xc
c001ccf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf8:	e8 cd ff ff ff       	call   c001ccca <SATA::~SATA()>
c001ccfd:	83 c4 10             	add    esp,0x10
c001cd00:	83 ec 08             	sub    esp,0x8
c001cd03:	68 7c 01 00 00       	push   0x17c
c001cd08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0c:	e8 e1 dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cd11:	83 c4 10             	add    esp,0x10
c001cd14:	83 c4 0c             	add    esp,0xc
c001cd17:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd18 <SATAPI::~SATAPI()>:
c001cd18:	83 ec 0c             	sub    esp,0xc
c001cd1b:	ba b8 f5 01 c0       	mov    edx,0xc001f5b8
c001cd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd24:	89 10                	mov    DWORD PTR [eax],edx
c001cd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2a:	83 ec 0c             	sub    esp,0xc
c001cd2d:	50                   	push   eax
c001cd2e:	e8 53 f7 fe ff       	call   c000c486 <PhysicalDisk::~PhysicalDisk()>
c001cd33:	83 c4 10             	add    esp,0x10
c001cd36:	90                   	nop
c001cd37:	83 c4 0c             	add    esp,0xc
c001cd3a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd3c <SATAPI::~SATAPI()>:
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	83 ec 0c             	sub    esp,0xc
c001cd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd46:	e8 cd ff ff ff       	call   c001cd18 <SATAPI::~SATAPI()>
c001cd4b:	83 c4 10             	add    esp,0x10
c001cd4e:	83 ec 08             	sub    esp,0x8
c001cd51:	68 84 01 00 00       	push   0x184
c001cd56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd5a:	e8 93 dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cd5f:	83 c4 10             	add    esp,0x10
c001cd62:	83 c4 0c             	add    esp,0xc
c001cd65:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd66 <IOAPIC::~IOAPIC()>:
c001cd66:	83 ec 0c             	sub    esp,0xc
c001cd69:	ba f8 f5 01 c0       	mov    edx,0xc001f5f8
c001cd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd72:	89 10                	mov    DWORD PTR [eax],edx
c001cd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	50                   	push   eax
c001cd7c:	e8 a9 f1 fe ff       	call   c000bf2a <Device::~Device()>
c001cd81:	83 c4 10             	add    esp,0x10
c001cd84:	90                   	nop
c001cd85:	83 c4 0c             	add    esp,0xc
c001cd88:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd8a <IOAPIC::~IOAPIC()>:
c001cd8a:	83 ec 0c             	sub    esp,0xc
c001cd8d:	83 ec 0c             	sub    esp,0xc
c001cd90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd94:	e8 cd ff ff ff       	call   c001cd66 <IOAPIC::~IOAPIC()>
c001cd99:	83 c4 10             	add    esp,0x10
c001cd9c:	83 ec 08             	sub    esp,0x8
c001cd9f:	68 68 01 00 00       	push   0x168
c001cda4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda8:	e8 45 dd fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cdad:	83 c4 10             	add    esp,0x10
c001cdb0:	83 c4 0c             	add    esp,0xc
c001cdb3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cdb4 <APICTimer::~APICTimer()>:
c001cdb4:	83 ec 0c             	sub    esp,0xc
c001cdb7:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001cdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc0:	89 10                	mov    DWORD PTR [eax],edx
c001cdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc6:	83 ec 0c             	sub    esp,0xc
c001cdc9:	50                   	push   eax
c001cdca:	e8 59 0a ff ff       	call   c000d828 <Timer::~Timer()>
c001cdcf:	83 c4 10             	add    esp,0x10
c001cdd2:	90                   	nop
c001cdd3:	83 c4 0c             	add    esp,0xc
c001cdd6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cdd8 <APICTimer::~APICTimer()>:
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	83 ec 0c             	sub    esp,0xc
c001cdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cde2:	e8 cd ff ff ff       	call   c001cdb4 <APICTimer::~APICTimer()>
c001cde7:	83 c4 10             	add    esp,0x10
c001cdea:	83 ec 08             	sub    esp,0x8
c001cded:	68 60 01 00 00       	push   0x160
c001cdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf6:	e8 f7 dc fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001cdfb:	83 c4 10             	add    esp,0x10
c001cdfe:	83 c4 0c             	add    esp,0xc
c001ce01:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce04 <PIT::~PIT()>:
c001ce04:	83 ec 0c             	sub    esp,0xc
c001ce07:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c001ce0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce10:	89 10                	mov    DWORD PTR [eax],edx
c001ce12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce16:	83 ec 0c             	sub    esp,0xc
c001ce19:	50                   	push   eax
c001ce1a:	e8 09 0a ff ff       	call   c000d828 <Timer::~Timer()>
c001ce1f:	83 c4 10             	add    esp,0x10
c001ce22:	90                   	nop
c001ce23:	83 c4 0c             	add    esp,0xc
c001ce26:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce28 <PIT::~PIT()>:
c001ce28:	83 ec 0c             	sub    esp,0xc
c001ce2b:	83 ec 0c             	sub    esp,0xc
c001ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce32:	e8 cd ff ff ff       	call   c001ce04 <PIT::~PIT()>
c001ce37:	83 c4 10             	add    esp,0x10
c001ce3a:	83 ec 08             	sub    esp,0x8
c001ce3d:	68 5c 01 00 00       	push   0x15c
c001ce42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce46:	e8 a7 dc fe ff       	call   c000aaf2 <operator delete(void*, unsigned long)>
c001ce4b:	83 c4 10             	add    esp,0x10
c001ce4e:	83 c4 0c             	add    esp,0xc
c001ce51:	c3                   	ret    
