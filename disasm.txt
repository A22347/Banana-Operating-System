
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 83 02 00       	call   c0028388 <_init>
c0000025:	c3                   	ret    
c0000026:	bb dc 8f 02 c0       	mov    ebx,0xc0028fdc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e8 8f 02 c0    	cmp    ebx,0xc0028fe8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 ce 02 c0       	mov    eax,0xc002ce78
c0000049:	3d 78 ce 02 c0       	cmp    eax,0xc002ce78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 ce 02 c0       	push   0xc002ce78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 ce 02 c0       	mov    eax,0xc002ce78
c0000075:	2d 78 ce 02 c0       	sub    eax,0xc002ce78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 ce 02 c0       	push   0xc002ce78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f0 8f 02 c0       	mov    ebx,0xc0028ff0
c00000bb:	81 eb ec 8f 02 c0    	sub    ebx,0xc0028fec
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be ec 8f 02 c0       	mov    esi,0xc0028fec
c00000ca:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac d4 02 c0       	mov    ds:0xc002d4ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 ce 02 c0       	push   0xc002ce78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 d4 02 c0       	push   0xc002d4b0
c000012c:	68 78 ce 02 c0       	push   0xc002ce78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 c9 ce 01 00       	call   c001d26c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 66 20 01 00       	call   c0012421 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 a7 ce 01 00       	call   c001d26c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 4f d3 01 00       	call   c001d733 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 65 d9 01 00       	call   c001dd52 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 f0 d8 02 c0 	lgdtd  ds:0xc002d8f0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 cf 3d 01 00       	call   c00143b1 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 c8 d4 02 c0       	mov    ds:0xc002d4c8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 c8 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d c8 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4c8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd7000],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd7000],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd7000],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7000],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd7000],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d e0 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4e0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d e0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4e0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 e4 d4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2b1c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 e4 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2b1c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d e0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4e0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 0c d5 02 c0    	cmp    DWORD PTR ds:0xc002d50c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 1c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d51c
c0000e38:	c7 42 0c 14 d5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d514
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 1c d5 02 c0    	mov    DWORD PTR ds:0xc002d51c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 0c d5 02 c0    	mov    DWORD PTR ds:0xc002d50c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 e0 d4 02 c0 02 	test   BYTE PTR ds:0xc002d4e0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d e0 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4e0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 e4 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b1c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 e4 d4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b1c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 14 d5 02 c0 	lea    edx,[eax*8-0x3ffd2aec]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 20 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d520
c00011ba:	81 fb 14 d5 02 c0    	cmp    ebx,0xc002d514
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 14 d5 02 c0       	cmp    eax,0xc002d514
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 10 d5 02 c0    	cmp    DWORD PTR ds:0xc002d510,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 1c d5 02 c0       	mov    ds:0xc002d51c,eax
c00011f6:	a3 20 d5 02 c0       	mov    ds:0xc002d520,eax
c00011fb:	a3 10 d5 02 c0       	mov    ds:0xc002d510,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 14 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d514
c0001209:	c7 40 0c 14 d5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d514
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 20 d5 02 c0       	mov    ds:0xc002d520,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 14 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d514
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 d8 d4 02 c0 	lea    ebp,[edx*4-0x3ffd2b28]
c000125a:	8b 14 95 e0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b20]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 e0 d4 02 c0 	lea    ecx,[edx*4-0x3ffd2b20]
c0001275:	8b 14 95 e0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b20]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 14 d8 02 c0 	or     DWORD PTR [edi*4-0x3ffd27ec],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 14 d5 02 c0 	lea    eax,[eax*8-0x3ffd2aec]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 1c d5 02 c0    	mov    DWORD PTR ds:0xc002d51c,ecx
c000132f:	89 0d 20 d5 02 c0    	mov    DWORD PTR ds:0xc002d520,ecx
c0001335:	c7 41 08 14 d5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d514
c000133c:	c7 41 0c 14 d5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d514
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 0c d5 02 c0 	lea    edx,[ecx*8-0x3ffd2af4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 14 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd27ec]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 14 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd27ec]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 0c d5 02 c0 	lea    edx,[eax*4-0x3ffd2af4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 14 d8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd27ec],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 1c d5 02 c0    	mov    DWORD PTR ds:0xc002d51c,edi
c0001402:	89 3d 20 d5 02 c0    	mov    DWORD PTR ds:0xc002d520,edi
c0001408:	c7 47 08 14 d5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d514
c000140f:	c7 47 0c 14 d5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d514
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 10 d5 02 c0    	mov    DWORD PTR ds:0xc002d510,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 0c d5 02 c0       	mov    eax,ds:0xc002d50c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 0c d5 02 c0    	mov    DWORD PTR ds:0xc002d50c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba e0 d4 02 c0       	mov    edx,0xc002d4e0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d e0 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d4e0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 34 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d834
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 34 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d834,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 34 d8 02 c0    	mov    DWORD PTR ds:0xc002d834,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 0c d5 02 c0    	cmp    DWORD PTR ds:0xc002d50c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 0c d5 02 c0    	mov    DWORD PTR ds:0xc002d50c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d e0 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d4e0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 3c d8 02 c0    	push   DWORD PTR ds:0xc002d83c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d e0 d4 02 c0 00 	cmp    DWORD PTR ds:0xc002d4e0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 3c d8 02 c0       	mov    eax,ds:0xc002d83c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 0c d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d50c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 0c d5 02 c0       	mov    eax,ds:0xc002d50c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 e4 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b1c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 14 d5 02 c0       	mov    eax,0xc002d514
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 0c d8 02 c0       	cmp    eax,0xc002d80c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 48 d8 02 c0       	mov    eax,ds:0xc002d848
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 30 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d830
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 44 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d844
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 54 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d854
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6efc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 e0 d4 02 c0       	mov    eax,ds:0xc002d4e0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 e0 d4 02 c0       	mov    ds:0xc002d4e0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 24 d8 02 c0    	mov    DWORD PTR ds:0xc002d824,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 28 d8 02 c0    	mov    DWORD PTR ds:0xc002d828,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 2c d8 02 c0    	mov    DWORD PTR ds:0xc002d82c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 34 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d834,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 a0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf060]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 90 eb 01 00       	jmp    c0020782 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 a0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf060]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 c1 eb 01 00       	jmp    c00207c9 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 a0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf060]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 e9 eb 01 00       	jmp    c0020810 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 da 47 02 00       	call   c00266e4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6de0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6de0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 91 02 c0       	mov    edx,0xc0029120
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 92 02 c0       	mov    edx,0xc0029240
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba b4 bd 02 c0       	mov    edx,0xc002bdb4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 92 02 c0       	mov    edx,0xc002924c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 92 02 c0       	mov    edx,0xc0029230
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 80 d8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2780]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 60 d8 02 c0    	mov    ax,ds:0xc002d860
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 60 d8 02 c0    	mov    ds:0xc002d860,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 d7 35 02 00       	call   c00266e4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 92 02 c0       	mov    eax,0xc0029252
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e60]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 92 02 c0       	mov    eax,0xc002925b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6de0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 a2 1f 02 00       	call   c00266e4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 92 02 c0       	mov    edx,0xc0029230
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 91 02 c0       	mov    edx,0xc0029120
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 91 02 c0       	mov    edx,0xc0029130
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 80 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2780]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 80 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2780],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 69 09 02 00       	call   c00266e4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 4f 09 02 00       	call   c00266e4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 91 02 c0       	mov    eax,0xc0029177
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 91 02 c0       	mov    eax,0xc0029170
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 80 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2780]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 60 91 02 c0       	mov    esi,0xc0029160
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 92 f0 01 00       	call   c00266e4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 40 92 02 c0       	mov    edx,0xc0029240
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 40 91 02 c0       	mov    edx,0xc0029140
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 50 91 02 c0       	mov    edx,0xc0029150
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 62 92 02 c0       	mov    edx,0xc0029262
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 6e 92 02 c0       	mov    edx,0xc002926e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 82 92 02 c0       	mov    edx,0xc0029282
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c a0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295a0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 a0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295a0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 a0 93 02 c0       	mov    eax,0xc00293a0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 e0 92 02 c0       	mov    eax,0xc00292e0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 a0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d60]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 e6 f9 01 00       	call   c00281b7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 a9 f9 01 00       	call   c0028199 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 7d f9 01 00       	call   c00281b7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 30 f0 01 00       	call   c00278bc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 b2 fa 01 00       	call   c0028350 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 f7 f8 01 00       	call   c00281b7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 39 f8 01 00       	call   c00281b7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 06 f8 01 00       	call   c0028199 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 f3 f6 01 00       	call   c00281b7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 bb f6 01 00       	call   c0028199 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 a0 96 02 c0       	mov    eax,0xc00296a0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 c7 f4 01 00       	call   c00281b7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 8c f4 01 00       	call   c0028199 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 00 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6500]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 9c f1 01 00       	call   c0027f4b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 1a eb 01 00       	call   c00278e8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 d6 f3 01 00       	call   c00281bb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 c4 f4 01 00       	call   c00282df <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ae ea 01 00       	call   c00278e8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 59 f3 01 00       	call   c00281b5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 3a f3 01 00       	call   c00281b9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 d0 f4 01 00       	call   c0028370 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 7a f0 01 00       	call   c0027f4b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 f8 e9 01 00       	call   c00278e8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 b4 f2 01 00       	call   c00281bb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 a2 f3 01 00       	call   c00282df <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 8c e9 01 00       	call   c00278e8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 37 f2 01 00       	call   c00281b5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 17 f2 01 00       	call   c00281b9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 ac f3 01 00       	call   c0028370 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 52 f1 01 00       	call   c00281b7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 10 f1 01 00       	call   c0028199 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 f8 f0 01 00       	call   c00281b7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 6a ee 01 00       	call   c0027f4b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 6c e1 01 00       	call   c002726b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 cf e7 01 00       	call   c00278e8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 21 ee 01 00       	call   c0027f4b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 27 e1 01 00       	call   c002726b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 f6 ed 01 00       	call   c0027f4b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 46 f0 01 00       	call   c00281b5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 23 e7 01 00       	call   c00278bc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 a5 f1 01 00       	call   c0028350 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 cc ef 01 00       	call   c0028199 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 c7 e6 01 00       	call   c00278bc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 45 ed 01 00       	call   c0027f4b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 c8 e6 01 00       	call   c00278e8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 1a ed 01 00       	call   c0027f4b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 81 e9 01 00       	call   c0027bcc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 00 e0 01 00       	call   c002726b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 60 d9 01 00       	call   c0026c00 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 37 f0 01 00       	call   c00282df <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 20 e6 01 00       	call   c00278e8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 07 f0 01 00       	call   c00282df <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 79 df 01 00       	call   c002726b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 b2 ee 01 00       	call   c00281bb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 9a e8 01 00       	call   c0027bcc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 20 df 01 00       	call   c002726b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 0e f0 01 00       	call   c0028370 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 e0 eb 01 00       	call   c0027f4b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 37 e5 01 00       	call   c00278bc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 16 ee 01 00       	call   c00281b7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 af de 01 00       	call   c002726b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 db e4 01 00       	call   c00278bc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 7d ef 01 00       	call   c0028370 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 2e eb 01 00       	call   c0027f4b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 ab e4 01 00       	call   c00278e8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 fe ea 01 00       	call   c0027f4b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 04 de 01 00       	call   c002726b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 d4 ea 01 00       	call   c0027f4b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 26 ed 01 00       	call   c00281b7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 fd e3 01 00       	call   c00278bc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 7f ee 01 00       	call   c0028350 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 a6 ec 01 00       	call   c0028199 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 a0 e3 01 00       	call   c00278bc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 1e ea 01 00       	call   c0027f4b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 a1 e3 01 00       	call   c00278e8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 f3 e9 01 00       	call   c0027f4b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 5a e6 01 00       	call   c0027bcc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 d9 dc 01 00       	call   c002726b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 29 d6 01 00       	call   c0026c00 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 00 ed 01 00       	call   c00282df <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 e9 e2 01 00       	call   c00278e8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 d0 ec 01 00       	call   c00282df <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 42 dc 01 00       	call   c002726b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 7b eb 01 00       	call   c00281bb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 62 e5 01 00       	call   c0027bcc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 e1 db 01 00       	call   c002726b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 cf ec 01 00       	call   c0028370 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 a1 e8 01 00       	call   c0027f4b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 f8 e1 01 00       	call   c00278bc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 d7 ea 01 00       	call   c00281b7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 70 db 01 00       	call   c002726b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 9c e1 01 00       	call   c00278bc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 11 e8 01 00       	call   c0027f4b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 17 db 01 00       	call   c002726b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 60 9b 02 c0       	mov    eax,0xc0029b60
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 74 9b 02 c0       	mov    eax,0xc0029b74
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 8c e6 01 00       	call   c0027f4b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 0a e0 01 00       	call   c00278e8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 9c d2 01 00       	call   c0026c00 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 73 e9 01 00       	call   c00282df <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 5c df 01 00       	call   c00278e8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 3f e9 01 00       	call   c00282df <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 b1 d8 01 00       	call   c002726b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 11 e9 01 00       	call   c00282df <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 00 df 01 00       	call   c00278e8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 69 d8 01 00       	call   c002726b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 8a d1 01 00       	call   c0026c00 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 61 e8 01 00       	call   c00282df <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 4a de 01 00       	call   c00278e8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 2d e8 01 00       	call   c00282df <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 9f d7 01 00       	call   c002726b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 ff e7 01 00       	call   c00282df <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 ee dd 01 00       	call   c00278e8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 57 d7 01 00       	call   c002726b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 35 d7 01 00       	call   c002726b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 11 d0 01 00       	call   c0026c00 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 e8 e6 01 00       	call   c00282df <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 d1 dc 01 00       	call   c00278e8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 b4 e6 01 00       	call   c00282df <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 26 d6 01 00       	call   c002726b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 86 e6 01 00       	call   c00282df <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 6f dc 01 00       	call   c00278e8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 d8 d5 01 00       	call   c002726b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 38 e6 01 00       	call   c00282df <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 21 dc 01 00       	call   c00278e8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 8a d5 01 00       	call   c002726b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 9f ce 01 00       	call   c0026c00 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 76 e5 01 00       	call   c00282df <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 5f db 01 00       	call   c00278e8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 46 e5 01 00       	call   c00282df <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 b8 d4 01 00       	call   c002726b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 18 e5 01 00       	call   c00282df <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 01 db 01 00       	call   c00278e8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 6a d4 01 00       	call   c002726b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ca e4 01 00       	call   c00282df <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 b3 da 01 00       	call   c00278e8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 1c d4 01 00       	call   c002726b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 f0 d3 01 00       	call   c002726b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 4d da 01 00       	call   c00278e8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 09 e3 01 00       	call   c00281bb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 98 d3 01 00       	call   c002726b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 f5 d9 01 00       	call   c00278e8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 b1 e2 01 00       	call   c00281bb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 2b cc 01 00       	call   c0026c00 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 02 e3 01 00       	call   c00282df <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 eb d8 01 00       	call   c00278e8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 ce e2 01 00       	call   c00282df <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 40 d2 01 00       	call   c002726b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 a0 e2 01 00       	call   c00282df <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 89 d8 01 00       	call   c00278e8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 f2 d1 01 00       	call   c002726b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 52 e2 01 00       	call   c00282df <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 3b d8 01 00       	call   c00278e8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 a4 d1 01 00       	call   c002726b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 04 e2 01 00       	call   c00282df <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 ed d7 01 00       	call   c00278e8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 56 d1 01 00       	call   c002726b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 b6 e1 01 00       	call   c00282df <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 9f d7 01 00       	call   c00278e8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 08 d1 01 00       	call   c002726b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 0a ca 01 00       	call   c0026c00 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 e1 e0 01 00       	call   c00282df <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ca d6 01 00       	call   c00278e8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 b1 e0 01 00       	call   c00282df <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 23 d0 01 00       	call   c002726b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 83 e0 01 00       	call   c00282df <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 6c d6 01 00       	call   c00278e8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 d5 cf 01 00       	call   c002726b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 35 e0 01 00       	call   c00282df <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 1e d6 01 00       	call   c00278e8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 87 cf 01 00       	call   c002726b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 e7 df 01 00       	call   c00282df <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 d0 d5 01 00       	call   c00278e8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 39 cf 01 00       	call   c002726b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 99 df 01 00       	call   c00282df <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 82 d5 01 00       	call   c00278e8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 eb ce 01 00       	call   c002726b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 bf ce 01 00       	call   c002726b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 1c d5 01 00       	call   c00278e8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 d8 dd 01 00       	call   c00281bb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 67 ce 01 00       	call   c002726b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 c4 d4 01 00       	call   c00278e8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 80 dd 01 00       	call   c00281bb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 0e ce 01 00       	call   c002726b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 6b d4 01 00       	call   c00278e8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 27 dd 01 00       	call   c00281bb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 b5 cd 01 00       	call   c002726b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 12 d4 01 00       	call   c00278e8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 ce dc 01 00       	call   c00281bb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 2c c6 01 00       	call   c0026c00 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 03 dd 01 00       	call   c00282df <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 ec d2 01 00       	call   c00278e8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 cf dc 01 00       	call   c00282df <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 41 cc 01 00       	call   c002726b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 a1 dc 01 00       	call   c00282df <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 8a d2 01 00       	call   c00278e8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 f3 cb 01 00       	call   c002726b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 53 dc 01 00       	call   c00282df <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 3c d2 01 00       	call   c00278e8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 a5 cb 01 00       	call   c002726b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 05 dc 01 00       	call   c00282df <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 ee d1 01 00       	call   c00278e8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 57 cb 01 00       	call   c002726b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 b7 db 01 00       	call   c00282df <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 a0 d1 01 00       	call   c00278e8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 09 cb 01 00       	call   c002726b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 69 db 01 00       	call   c00282df <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 52 d1 01 00       	call   c00278e8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 b8 ca 01 00       	call   c002726b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 18 db 01 00       	call   c00282df <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 01 d1 01 00       	call   c00278e8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 6a ca 01 00       	call   c002726b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 64 c3 01 00       	call   c0026c00 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 3b da 01 00       	call   c00282df <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 24 d0 01 00       	call   c00278e8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 04 da 01 00       	call   c00282df <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 76 c9 01 00       	call   c002726b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 d6 d9 01 00       	call   c00282df <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 bf cf 01 00       	call   c00278e8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 28 c9 01 00       	call   c002726b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 88 d9 01 00       	call   c00282df <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 71 cf 01 00       	call   c00278e8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 da c8 01 00       	call   c002726b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 3a d9 01 00       	call   c00282df <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 23 cf 01 00       	call   c00278e8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 8c c8 01 00       	call   c002726b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 ec d8 01 00       	call   c00282df <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 d5 ce 01 00       	call   c00278e8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 3e c8 01 00       	call   c002726b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 9e d8 01 00       	call   c00282df <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 87 ce 01 00       	call   c00278e8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 ed c7 01 00       	call   c002726b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 4d d8 01 00       	call   c00282df <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 36 ce 01 00       	call   c00278e8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 a5 c7 01 00       	call   c002726b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 7e c7 01 00       	call   c002726b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 dc cd 01 00       	call   c00278e8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 98 d6 01 00       	call   c00281bb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 27 c7 01 00       	call   c002726b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 85 cd 01 00       	call   c00278e8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 41 d6 01 00       	call   c00281bb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 cf c6 01 00       	call   c002726b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 2d cd 01 00       	call   c00278e8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 e9 d5 01 00       	call   c00281bb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 77 c6 01 00       	call   c002726b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 d5 cc 01 00       	call   c00278e8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 91 d5 01 00       	call   c00281bb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 1f c6 01 00       	call   c002726b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 7d cc 01 00       	call   c00278e8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 39 d5 01 00       	call   c00281bb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 cd c5 01 00       	call   c002726b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 2b cc 01 00       	call   c00278e8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 e7 d4 01 00       	call   c00281bb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 fb bd 01 00       	call   c0026c00 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 d2 d4 01 00       	call   c00282df <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 bb ca 01 00       	call   c00278e8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 a2 d4 01 00       	call   c00282df <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 14 c4 01 00       	call   c002726b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 a4 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd645c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 48 d4 01 00       	call   c00282df <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 31 ca 01 00       	call   c00278e8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 9c c3 01 00       	call   c002726b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 e9 d3 01 00       	call   c00282df <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 d2 c9 01 00       	call   c00278e8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 3d c3 01 00       	call   c002726b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 8a d3 01 00       	call   c00282df <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 73 c9 01 00       	call   c00278e8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 de c2 01 00       	call   c002726b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 2b d3 01 00       	call   c00282df <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 14 c9 01 00       	call   c00278e8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 7f c2 01 00       	call   c002726b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 cc d2 01 00       	call   c00282df <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 b5 c8 01 00       	call   c00278e8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 20 c2 01 00       	call   c002726b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 6d d2 01 00       	call   c00282df <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 56 c8 01 00       	call   c00278e8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 c1 c1 01 00       	call   c002726b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 0e d2 01 00       	call   c00282df <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 f7 c7 01 00       	call   c00278e8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 62 c1 01 00       	call   c002726b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 af d1 01 00       	call   c00282df <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 98 c7 01 00       	call   c00278e8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 03 c1 01 00       	call   c002726b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 0d ba 01 00       	call   c0026c00 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 e4 d0 01 00       	call   c00282df <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 cd c6 01 00       	call   c00278e8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 b4 d0 01 00       	call   c00282df <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 26 c0 01 00       	call   c002726b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 c0 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6440]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 59 d0 01 00       	call   c00282df <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 42 c6 01 00       	call   c00278e8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 ad bf 01 00       	call   c002726b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 f9 cf 01 00       	call   c00282df <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 e2 c5 01 00       	call   c00278e8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 4d bf 01 00       	call   c002726b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 99 cf 01 00       	call   c00282df <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 82 c5 01 00       	call   c00278e8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 ed be 01 00       	call   c002726b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 39 cf 01 00       	call   c00282df <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 22 c5 01 00       	call   c00278e8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 8d be 01 00       	call   c002726b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 d9 ce 01 00       	call   c00282df <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 c2 c4 01 00       	call   c00278e8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 2d be 01 00       	call   c002726b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 79 ce 01 00       	call   c00282df <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 62 c4 01 00       	call   c00278e8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 cd bd 01 00       	call   c002726b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 19 ce 01 00       	call   c00282df <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 02 c4 01 00       	call   c00278e8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 6d bd 01 00       	call   c002726b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 b9 cd 01 00       	call   c00282df <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 a2 c3 01 00       	call   c00278e8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 0d bd 01 00       	call   c002726b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 dc 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6424]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 b2 bc 01 00       	call   c002726b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 0f c3 01 00       	call   c00278e8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 cb cb 01 00       	call   c00281bb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 55 bc 01 00       	call   c002726b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 b2 c2 01 00       	call   c00278e8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 6e cb 01 00       	call   c00281bb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 f8 bb 01 00       	call   c002726b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 55 c2 01 00       	call   c00278e8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 11 cb 01 00       	call   c00281bb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 9b bb 01 00       	call   c002726b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 f8 c1 01 00       	call   c00278e8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 b4 ca 01 00       	call   c00281bb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 3e bb 01 00       	call   c002726b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 9b c1 01 00       	call   c00278e8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 57 ca 01 00       	call   c00281bb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 e1 ba 01 00       	call   c002726b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 3e c1 01 00       	call   c00278e8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 fa c9 01 00       	call   c00281bb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 84 ba 01 00       	call   c002726b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 e1 c0 01 00       	call   c00278e8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 9d c9 01 00       	call   c00281bb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 27 ba 01 00       	call   c002726b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 84 c0 01 00       	call   c00278e8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 40 c9 01 00       	call   c00281bb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 3c c0 01 00       	call   c00278e8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 b4 ca 01 00       	jmp    c0028370 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 1e c7 01 00       	call   c00281b7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 dc c6 01 00       	call   c0028199 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 73 c4 01 00       	call   c0027f4b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 74 b7 01 00       	call   c002726b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 43 c4 01 00       	call   c0027f4b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 aa c0 01 00       	call   c0027bcc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 49 c6 01 00       	call   c0028199 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 4c c6 01 00       	call   c00281b7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 1f c6 01 00       	call   c00281b7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 18 c0 01 00       	call   c0027bcc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 a2 c7 01 00       	call   c0028370 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 7d c7 01 00       	call   c0028370 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 4f c3 01 00       	call   c0027f4b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 a6 bc 01 00       	call   c00278bc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 85 c5 01 00       	call   c00281b7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 1e b6 01 00       	call   c002726b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 42 bc 01 00       	call   c00278bc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 e4 c6 01 00       	call   c0028370 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 1c bf 01 00       	call   c0027bcc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 99 b5 01 00       	call   c002726b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 c5 c1 01 00       	call   c0027f4b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 c5 b4 01 00       	call   c002726b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 a5 b4 01 00       	call   c002726b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 75 c1 01 00       	call   c0027f4b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 c5 c3 01 00       	call   c00281b5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 a4 ba 01 00       	call   c00278bc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 26 c5 01 00       	call   c0028350 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 4d c3 01 00       	call   c0028199 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 4b ba 01 00       	call   c00278bc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 c9 c0 01 00       	call   c0027f4b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 4c ba 01 00       	call   c00278e8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 9e c0 01 00       	call   c0027f4b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 05 bd 01 00       	call   c0027bcc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 84 b3 01 00       	call   c002726b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 4e c0 01 00       	call   c0027f4b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 9a c2 01 00       	call   c00281b7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 8f b9 01 00       	call   c00278e8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 61 b9 01 00       	call   c00278e8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 9a bf 01 00       	call   c0027f4b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 fe bb 01 00       	call   c0027bcc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 c6 bb 01 00       	call   c0027bcc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 45 b2 01 00       	call   c002726b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 32 c3 01 00       	call   c0028370 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 04 bf 01 00       	call   c0027f4b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 5b b8 01 00       	call   c00278bc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 3a c1 01 00       	call   c00281b7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 d2 b1 01 00       	call   c002726b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 f6 b7 01 00       	call   c00278bc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 98 c2 01 00       	call   c0028370 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 59 c0 01 00       	call   c00281b7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 17 c0 01 00       	call   c0028199 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ae bd 01 00       	call   c0027f4b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 af b0 01 00       	call   c002726b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 7e bd 01 00       	call   c0027f4b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 e5 b9 01 00       	call   c0027bcc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 84 bf 01 00       	call   c0028199 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 87 bf 01 00       	call   c00281b7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 5a bf 01 00       	call   c00281b7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 53 b9 01 00       	call   c0027bcc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 dd c0 01 00       	call   c0028370 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 b8 c0 01 00       	call   c0028370 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 8a bc 01 00       	call   c0027f4b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 e1 b5 01 00       	call   c00278bc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 c0 be 01 00       	call   c00281b7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 59 af 01 00       	call   c002726b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 7d b5 01 00       	call   c00278bc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 1f c0 01 00       	call   c0028370 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 57 b8 01 00       	call   c0027bcc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 d4 ae 01 00       	call   c002726b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 ff ba 01 00       	call   c0027f4b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 ff ad 01 00       	call   c002726b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 df ad 01 00       	call   c002726b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 af ba 01 00       	call   c0027f4b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 ff bc 01 00       	call   c00281b5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 dd b3 01 00       	call   c00278bc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 5f be 01 00       	call   c0028350 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 86 bc 01 00       	call   c0028199 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 83 b3 01 00       	call   c00278bc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 01 ba 01 00       	call   c0027f4b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 84 b3 01 00       	call   c00278e8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 d6 b9 01 00       	call   c0027f4b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 3d b6 01 00       	call   c0027bcc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 bc ac 01 00       	call   c002726b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 86 b9 01 00       	call   c0027f4b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 d2 bb 01 00       	call   c00281b7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 c7 b2 01 00       	call   c00278e8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 99 b2 01 00       	call   c00278e8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 d0 b8 01 00       	call   c0027f4b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 34 b5 01 00       	call   c0027bcc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 01 b5 01 00       	call   c0027bcc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 80 ab 01 00       	call   c002726b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 6d bc 01 00       	call   c0028370 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 3f b8 01 00       	call   c0027f4b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 96 b1 01 00       	call   c00278bc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 75 ba 01 00       	call   c00281b7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 0d ab 01 00       	call   c002726b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 31 b1 01 00       	call   c00278bc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 d3 bb 01 00       	call   c0028370 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 94 b9 01 00       	call   c00281b7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 52 b9 01 00       	call   c0028199 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 e9 b6 01 00       	call   c0027f4b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 ea a9 01 00       	call   c002726b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 b9 b6 01 00       	call   c0027f4b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 20 b3 01 00       	call   c0027bcc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 bf b8 01 00       	call   c0028199 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 c2 b8 01 00       	call   c00281b7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 95 b8 01 00       	call   c00281b7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 8e b2 01 00       	call   c0027bcc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 18 ba 01 00       	call   c0028370 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 f3 b9 01 00       	call   c0028370 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 c5 b5 01 00       	call   c0027f4b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 1c af 01 00       	call   c00278bc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 fb b7 01 00       	call   c00281b7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 94 a8 01 00       	call   c002726b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 b8 ae 01 00       	call   c00278bc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 5a b9 01 00       	call   c0028370 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 92 b1 01 00       	call   c0027bcc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 0f a8 01 00       	call   c002726b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 3a b4 01 00       	call   c0027f4b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 3a a7 01 00       	call   c002726b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 1a a7 01 00       	call   c002726b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 ea b3 01 00       	call   c0027f4b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 3a b6 01 00       	call   c00281b5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 18 ad 01 00       	call   c00278bc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 9a b7 01 00       	call   c0028350 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 c1 b5 01 00       	call   c0028199 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 be ac 01 00       	call   c00278bc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 3c b3 01 00       	call   c0027f4b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 bf ac 01 00       	call   c00278e8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 11 b3 01 00       	call   c0027f4b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 78 af 01 00       	call   c0027bcc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 f7 a5 01 00       	call   c002726b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 c1 b2 01 00       	call   c0027f4b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 0d b5 01 00       	call   c00281b7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 02 ac 01 00       	call   c00278e8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 d4 ab 01 00       	call   c00278e8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 0b b2 01 00       	call   c0027f4b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 6f ae 01 00       	call   c0027bcc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 3c ae 01 00       	call   c0027bcc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 bb a4 01 00       	call   c002726b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 a8 b5 01 00       	call   c0028370 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 7a b1 01 00       	call   c0027f4b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 d1 aa 01 00       	call   c00278bc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 b0 b3 01 00       	call   c00281b7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 48 a4 01 00       	call   c002726b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 6c aa 01 00       	call   c00278bc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 0e b5 01 00       	call   c0028370 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 cf b2 01 00       	call   c00281b7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 8d b2 01 00       	call   c0028199 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 24 b0 01 00       	call   c0027f4b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 25 a3 01 00       	call   c002726b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 f4 af 01 00       	call   c0027f4b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 5b ac 01 00       	call   c0027bcc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 fa b1 01 00       	call   c0028199 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 fd b1 01 00       	call   c00281b7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 d0 b1 01 00       	call   c00281b7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 c9 ab 01 00       	call   c0027bcc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 53 b3 01 00       	call   c0028370 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 2e b3 01 00       	call   c0028370 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 00 af 01 00       	call   c0027f4b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 57 a8 01 00       	call   c00278bc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 36 b1 01 00       	call   c00281b7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 cf a1 01 00       	call   c002726b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 f3 a7 01 00       	call   c00278bc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 95 b2 01 00       	call   c0028370 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 cd aa 01 00       	call   c0027bcc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 4a a1 01 00       	call   c002726b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 75 ad 01 00       	call   c0027f4b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 75 a0 01 00       	call   c002726b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 55 a0 01 00       	call   c002726b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 25 ad 01 00       	call   c0027f4b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 75 af 01 00       	call   c00281b5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 53 a6 01 00       	call   c00278bc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 d5 b0 01 00       	call   c0028350 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 fc ae 01 00       	call   c0028199 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 f9 a5 01 00       	call   c00278bc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 77 ac 01 00       	call   c0027f4b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 fa a5 01 00       	call   c00278e8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 4c ac 01 00       	call   c0027f4b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 b3 a8 01 00       	call   c0027bcc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 32 9f 01 00       	call   c002726b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 fc ab 01 00       	call   c0027f4b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 48 ae 01 00       	call   c00281b7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 3d a5 01 00       	call   c00278e8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 0f a5 01 00       	call   c00278e8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 46 ab 01 00       	call   c0027f4b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 aa a7 01 00       	call   c0027bcc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 77 a7 01 00       	call   c0027bcc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 f6 9d 01 00       	call   c002726b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 e3 ae 01 00       	call   c0028370 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 b5 aa 01 00       	call   c0027f4b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 0c a4 01 00       	call   c00278bc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 eb ac 01 00       	call   c00281b7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 83 9d 01 00       	call   c002726b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 a7 a3 01 00       	call   c00278bc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 49 ae 01 00       	call   c0028370 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 07 ac 01 00       	call   c00281b7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 c5 ab 01 00       	call   c0028199 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 5c a9 01 00       	call   c0027f4b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 5d 9c 01 00       	call   c002726b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 2c a9 01 00       	call   c0027f4b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 93 a5 01 00       	call   c0027bcc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 32 ab 01 00       	call   c0028199 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 35 ab 01 00       	call   c00281b7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 08 ab 01 00       	call   c00281b7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 01 a5 01 00       	call   c0027bcc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 8b ac 01 00       	call   c0028370 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 62 ac 01 00       	call   c0028370 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 34 a8 01 00       	call   c0027f4b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 8b a1 01 00       	call   c00278bc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 6a aa 01 00       	call   c00281b7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 03 9b 01 00       	call   c002726b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 2b a1 01 00       	call   c00278bc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 cd ab 01 00       	call   c0028370 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 06 a4 01 00       	call   c0027bcc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 83 9a 01 00       	call   c002726b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 af a6 01 00       	call   c0027f4b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 af 99 01 00       	call   c002726b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 8f 99 01 00       	call   c002726b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 5f a6 01 00       	call   c0027f4b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 93 a8 01 00       	call   c0028199 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 8a 9f 01 00       	call   c00278bc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 0c aa 01 00       	call   c0028350 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 33 a8 01 00       	call   c0028199 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 2d 9f 01 00       	call   c00278bc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 ab a5 01 00       	call   c0027f4b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 2e 9f 01 00       	call   c00278e8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 80 a5 01 00       	call   c0027f4b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 e7 a1 01 00       	call   c0027bcc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 66 98 01 00       	call   c002726b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 30 a5 01 00       	call   c0027f4b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 7c a7 01 00       	call   c00281b7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 71 9e 01 00       	call   c00278e8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 43 9e 01 00       	call   c00278e8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 87 a4 01 00       	call   c0027f4b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 ee a0 01 00       	call   c0027bcc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 d7 9d 01 00       	call   c00278e8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 93 a6 01 00       	call   c00281bb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 86 a0 01 00       	call   c0027bcc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 05 97 01 00       	call   c002726b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 f2 a7 01 00       	call   c0028370 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 c4 a3 01 00       	call   c0027f4b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 1b 9d 01 00       	call   c00278bc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 fa a5 01 00       	call   c00281b7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 92 96 01 00       	call   c002726b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ba 9c 01 00       	call   c00278bc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 5c a7 01 00       	call   c0028370 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 04 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63fc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 f8 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6408]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 0f a4 01 00       	call   c00281b7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 cd a3 01 00       	call   c0028199 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 b9 a3 01 00       	call   c00281b7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 2b a1 01 00       	call   c0027f4b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 a9 9a 01 00       	call   c00278e8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 fb a0 01 00       	call   c0027f4b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 01 94 01 00       	call   c002726b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 d0 a0 01 00       	call   c0027f4b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 20 a3 01 00       	call   c00281b5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 01 9a 01 00       	call   c00278bc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 83 a4 01 00       	call   c0028350 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 aa a2 01 00       	call   c0028199 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 a9 99 01 00       	call   c00278bc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 27 a0 01 00       	call   c0027f4b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 aa 99 01 00       	call   c00278e8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 fc 9f 01 00       	call   c0027f4b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 63 9c 01 00       	call   c0027bcc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 e2 92 01 00       	call   c002726b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 0a 9c 01 00       	call   c0027bcc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 90 92 01 00       	call   c002726b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 7e a3 01 00       	call   c0028370 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 50 9f 01 00       	call   c0027f4b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 a7 98 01 00       	call   c00278bc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 86 a1 01 00       	call   c00281b7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 1f 92 01 00       	call   c002726b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 4b 98 01 00       	call   c00278bc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 ed a2 01 00       	call   c0028370 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 9a 9e 01 00       	call   c0027f4b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 17 98 01 00       	call   c00278e8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 68 9e 01 00       	call   c0027f4b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 6e 91 01 00       	call   c002726b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 3e 9e 01 00       	call   c0027f4b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 92 a0 01 00       	call   c00281b9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 6b 97 01 00       	call   c00278bc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 ed a1 01 00       	call   c0028350 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 14 a0 01 00       	call   c0028199 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 12 97 01 00       	call   c00278bc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 90 9d 01 00       	call   c0027f4b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 13 97 01 00       	call   c00278e8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 65 9d 01 00       	call   c0027f4b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 cc 99 01 00       	call   c0027bcc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 4b 90 01 00       	call   c002726b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 67 99 01 00       	call   c0027bcc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 e6 8f 01 00       	call   c002726b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 d4 a0 01 00       	call   c0028370 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 a6 9c 01 00       	call   c0027f4b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 fd 95 01 00       	call   c00278bc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 dc 9e 01 00       	call   c00281b7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 75 8f 01 00       	call   c002726b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 a1 95 01 00       	call   c00278bc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 12 9c 01 00       	call   c0027f4b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 18 8f 01 00       	call   c002726b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 1e 9d 02 c0       	mov    eax,0xc0029d1e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 2f 9d 02 c0       	mov    eax,0xc0029d2f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c000e4e3:	ff 05 04 0e 03 c0    	inc    DWORD PTR ds:0xc0030e04
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 00 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e00,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c000e50d:	e8 8f f4 00 00       	call   c001d9a1 <schedule()>
c000e512:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c000e517:	48                   	dec    eax
c000e518:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 66 9d 02 c0       	push   0xc0029d66
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 e8 d8 02 c0       	mov    eax,0xc002d8e8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 6f 9d 02 c0       	push   0xc0029d6f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 e4 66 02 c0       	mov    eax,0xc00266e4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 79 9d 02 c0       	push   0xc0029d79
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 18 64 02 c0       	mov    eax,0xc0026418
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 82 9d 02 c0       	push   0xc0029d82
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 e4 67 02 c0       	mov    eax,0xc00267e4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 8c 9d 02 c0       	push   0xc0029d8c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 64 65 02 c0       	mov    eax,0xc0026564
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 95 9d 02 c0       	push   0xc0029d95
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ec d8 02 c0       	mov    eax,0xc002d8ec
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 a2 9d 02 c0       	push   0xc0029da2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ed d8 02 c0       	mov    eax,0xc002d8ed
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 01 56 00 00       	call   c0013c6e <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 af 9d 02 c0       	push   0xc0029daf
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c000e6be:	68 c8 9d 02 c0       	push   0xc0029dc8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 b9 ee 00 00       	call   c001d584 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 9c f0 00 00       	call   c001d77c <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 60 e1 01 c0       	push   0xc001e160
c000e6e9:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c000e6ef:	e8 88 f0 00 00       	call   c001d77c <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 e8 0d 03 c0       	mov    ds:0xc0030de8,eax
c000e6fc:	68 ac 9e 02 c0       	push   0xc0029eac
c000e701:	c6 05 ed d8 02 c0 01 	mov    BYTE PTR ds:0xc002d8ed,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 f9 fd 00 00       	call   c001e50b <Vm::initialise8086()>
c000e712:	e8 1f 43 00 00       	call   c0012a36 <Fs::initVFS()>
c000e717:	c7 04 24 d5 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dd5
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ac 9e 02 c0       	push   0xc0029eac
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 c5 d6 00 00       	call   c001be11 <Sys::loadSyscalls()>
c000e74c:	e8 bd b5 00 00       	call   c0019d0e <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 ef 9d 02 c0       	push   0xc0029def
c000e75b:	68 f8 9d 02 c0       	push   0xc0029df8
c000e760:	e8 6e c4 00 00       	call   c001abd3 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 b9 4d 00 00       	call   c0013526 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 d0 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ed0
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 a4 54 00 00       	call   c0013c2e <Device::loadDriversForAll()>
c000e78a:	c7 04 24 00 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e00
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 db b0 00 00       	call   c0019876 <Krnl::startCPUs()>
c000e79b:	c7 04 24 1a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e1a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 2b 9e 02 c0       	push   0xc0029e2b
c000e7b6:	e8 26 e8 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 48 ea 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 a6 f3 00 00       	call   c001db77 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 47 9e 02 c0       	push   0xc0029e47
c000e7e5:	50                   	push   eax
c000e7e6:	e8 fd 54 00 00       	call   c0013ce8 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 1c 9f 02 c0       	mov    edx,0xc0029f1c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 01 d9 02 c0 04 	test   BYTE PTR ds:0xc002d901,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 27 7a 01 00       	call   c00263a6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 4e 9e 00 00       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 27 9e 00 00       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 05 9e 00 00       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 e3 9d 00 00       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 00 d9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d900,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 f1 9c 00 00       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 cc 9c 00 00       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 91 78 01 00       	call   c0026360 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 4e 78 01 00       	call   c0026340 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 e8 9c 00 00       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 50 9e 02 c0       	push   0xc0029e50
c000eb62:	e8 b0 b2 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 56 9e 02 c0       	push   0xc0029e56
c000eb9a:	e8 78 b2 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 f0 9e 02 c0       	push   0xc0029ef0
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 00 d9 02 c0 04 	test   BYTE PTR ds:0xc002d900,0x4
c000ec03:	0f 94 05 20 c8 02 c0 	sete   BYTE PTR ds:0xc002c820
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 63 8e 00 00       	call   c0017a7c <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 bc 4e 00 00       	call   c0013ae4 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 00 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e00
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 64 9c 00 00       	call   c00188c0 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 79 4e 00 00       	call   c0013ae4 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 f5 53 00 00       	call   c001407c <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 49 4e 00 00       	call   c0013ae4 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 5c 9e 02 c0       	push   0xc0029e5c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 d5 eb 00 00       	call   c001d89e <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 77 9e 02 c0       	push   0xc0029e77
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 94 39 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 88 9e 02 c0       	push   0xc0029e88
c000ed34:	e8 de b0 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 95 9e 02 c0       	push   0xc0029e95
c000ed49:	e8 c9 b0 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 9f 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e9f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 b2 b0 00 00       	jmp    c0019e17 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 f2 d8 02 c0       	mov    ds:0xc002d8f2,eax
c000ee21:	66 89 15 f0 d8 02 c0 	mov    WORD PTR ds:0xc002d8f0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c000ef38:	48                   	dec    eax
c000ef39:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 e8 d8 02 c0    	push   DWORD PTR ds:0xc002d8e8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 61 94 01 00       	call   c00283f0 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 58 94 01 00       	call   c00283f0 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 f8 d8 02 c0 ff 07 	mov    WORD PTR ds:0xc002d8f8,0x7ff
c000f085:	a3 fa d8 02 c0       	mov    ds:0xc002d8fa,eax
c000f08a:	0f 01 1d f8 d8 02 c0 	lidtd  ds:0xc002d8f8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c000f37c:	e8 3d 27 00 00       	call   c0011abe <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 a7 17 00 00       	call   c0010b46 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 d8 17 00 00       	call   c0010b86 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 e8 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8e8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d bc c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6bc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 bc c6 02 c0       	mov    eax,ds:0xc002c6bc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 40 9f 02 c0       	push   0xc0029f40
c000f455:	e8 51 32 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 bc c6 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c6bc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 50 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da50
c000f481:	8b 2d bc c6 02 c0    	mov    ebp,DWORD PTR ds:0xc002c6bc
c000f487:	e8 e5 04 00 00       	call   c000f971 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 23 25 00 00       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d bc c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6bc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 70 9f 02 c0       	push   0xc0029f70
c000f50d:	e8 05 a9 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 75 9f 02 c0       	push   0xc0029f75
c000f523:	e8 ef a8 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c000f543:	48                   	dec    eax
c000f544:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c000f561:	e8 58 25 00 00       	call   c0011abe <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c000f577:	e8 ec 21 00 00       	call   c0011768 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 7c 9f 02 c0       	push   0xc0029f7c
c000f6a4:	e8 02 30 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 9a 09 00 00       	call   c0010048 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 c0 c6 02 c0 	movzx  eax,BYTE PTR ds:0xc002c6c0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 c0 c6 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3940]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 f6 c6 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd390a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 f5 c6 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd390b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 c0 c6 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3940]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 94 9f 02 c0       	push   0xc0029f94
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 00 d9 02 c0       	mov    ds:0xc002d900,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 86 03 00 00       	call   c000fadc <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 63 1c 00 00       	call   c00113be <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 2a 1e 00 00       	call   c0011590 <VAS::VAS()>
c000f766:	89 1d 50 da 02 c0    	mov    DWORD PTR ds:0xc002da50,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 e8 d8 02 c0    	mov    DWORD PTR ds:0xc002d8e8,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 9e 20 00 00       	call   c0011840 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	31 db                	xor    ebx,ebx
c000f7b5:	83 ec 0c             	sub    esp,0xc
c000f7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7bc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x26>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d3                	mov    ebx,edx
c000f7cf:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7d2:	39 c6                	cmp    esi,eax
c000f7d4:	74 23                	je     c000f7f9 <Phys::allocateDMA(unsigned long)+0x50>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 c1                	mov    ecx,eax
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x46>
c000f7de:	80 ba 40 d9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd26c0],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1e>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	31 c0                	xor    eax,eax
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	5f                   	pop    edi
c000f7f7:	5d                   	pop    ebp
c000f7f8:	c3                   	ret    
c000f7f9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f7fc:	89 d7                	mov    edi,edx
c000f7fe:	4f                   	dec    edi
c000f7ff:	79 03                	jns    c000f804 <Phys::allocateDMA(unsigned long)+0x5b>
c000f801:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f804:	c1 ff 04             	sar    edi,0x4
c000f807:	89 da                	mov    edx,ebx
c000f809:	c1 fa 04             	sar    edx,0x4
c000f80c:	39 fa                	cmp    edx,edi
c000f80e:	75 43                	jne    c000f853 <Phys::allocateDMA(unsigned long)+0xaa>
c000f810:	85 c0                	test   eax,eax
c000f812:	74 1a                	je     c000f82e <Phys::allocateDMA(unsigned long)+0x85>
c000f814:	be 40 d9 02 c0       	mov    esi,0xc002d940
c000f819:	8d 93 40 d9 02 c0    	lea    edx,[ebx-0x3ffd26c0]
c000f81f:	f7 d6                	not    esi
c000f821:	29 de                	sub    esi,ebx
c000f823:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f826:	42                   	inc    edx
c000f827:	8d 04 16             	lea    eax,[esi+edx*1]
c000f82a:	39 c1                	cmp    ecx,eax
c000f82c:	7f f5                	jg     c000f823 <Phys::allocateDMA(unsigned long)+0x7a>
c000f82e:	83 ec 0c             	sub    esp,0xc
c000f831:	68 b3 9f 02 c0       	push   0xc0029fb3
c000f836:	e8 70 2e 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	85 ff                	test   edi,edi
c000f840:	74 17                	je     c000f859 <Phys::allocateDMA(unsigned long)+0xb0>
c000f842:	83 c4 0c             	add    esp,0xc
c000f845:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f84b:	5b                   	pop    ebx
c000f84c:	c1 e0 0c             	shl    eax,0xc
c000f84f:	5e                   	pop    esi
c000f850:	5f                   	pop    edi
c000f851:	5d                   	pop    ebp
c000f852:	c3                   	ret    
c000f853:	89 ea                	mov    edx,ebp
c000f855:	31 c9                	xor    ecx,ecx
c000f857:	eb 90                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x40>
c000f859:	83 c4 0c             	add    esp,0xc
c000f85c:	c1 e3 0c             	shl    ebx,0xc
c000f85f:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f865:	5b                   	pop    ebx
c000f866:	5e                   	pop    esi
c000f867:	5f                   	pop    edi
c000f868:	5d                   	pop    ebp
c000f869:	c3                   	ret    

c000f86a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f872:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f878:	c1 e9 0c             	shr    ecx,0xc
c000f87b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f880:	76 25                	jbe    c000f8a7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f882:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f887:	c1 e8 0c             	shr    eax,0xc
c000f88a:	8d 50 10             	lea    edx,[eax+0x10]
c000f88d:	85 c9                	test   ecx,ecx
c000f88f:	74 15                	je     c000f8a6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f891:	8d 82 40 d9 02 c0    	lea    eax,[edx-0x3ffd26c0]
c000f897:	8d 94 11 40 d9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd26c0]
c000f89e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8a1:	40                   	inc    eax
c000f8a2:	39 d0                	cmp    eax,edx
c000f8a4:	75 f8                	jne    c000f89e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8a6:	c3                   	ret    
c000f8a7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8ad:	c1 ea 0c             	shr    edx,0xc
c000f8b0:	eb db                	jmp    c000f88d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8b2 <Phys::setPageState(unsigned long, bool)>:
c000f8b2:	56                   	push   esi
c000f8b3:	ba 01 00 00 00       	mov    edx,0x1
c000f8b8:	53                   	push   ebx
c000f8b9:	8b 35 04 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c804
c000f8bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8c7:	89 c8                	mov    eax,ecx
c000f8c9:	83 e1 07             	and    ecx,0x7
c000f8cc:	c1 e8 03             	shr    eax,0x3
c000f8cf:	d3 e3                	shl    ebx,cl
c000f8d1:	01 c6                	add    esi,eax
c000f8d3:	d3 e2                	shl    edx,cl
c000f8d5:	f7 d2                	not    edx
c000f8d7:	20 16                	and    BYTE PTR [esi],dl
c000f8d9:	03 05 04 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c804
c000f8df:	08 18                	or     BYTE PTR [eax],bl
c000f8e1:	5b                   	pop    ebx
c000f8e2:	5e                   	pop    esi
c000f8e3:	c3                   	ret    

c000f8e4 <Phys::getPageState(unsigned long)>:
c000f8e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8e8:	8b 15 04 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c804
c000f8ee:	89 c8                	mov    eax,ecx
c000f8f0:	83 e1 07             	and    ecx,0x7
c000f8f3:	c1 e8 03             	shr    eax,0x3
c000f8f6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8fa:	d3 f8                	sar    eax,cl
c000f8fc:	83 e0 01             	and    eax,0x1
c000f8ff:	c3                   	ret    

c000f900 <Phys::freePage(unsigned long)>:
c000f900:	53                   	push   ebx
c000f901:	83 ec 10             	sub    esp,0x10
c000f904:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f908:	53                   	push   ebx
c000f909:	68 ca 9f 02 c0       	push   0xc0029fca
c000f90e:	e8 98 2d 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f91c:	76 3d                	jbe    c000f95b <Phys::freePage(unsigned long)+0x5b>
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	c1 eb 0c             	shr    ebx,0xc
c000f924:	53                   	push   ebx
c000f925:	e8 ba ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f92a:	83 c4 10             	add    esp,0x10
c000f92d:	84 c0                	test   al,al
c000f92f:	74 19                	je     c000f94a <Phys::freePage(unsigned long)+0x4a>
c000f931:	83 ec 08             	sub    esp,0x8
c000f934:	ff 0d 30 d9 02 c0    	dec    DWORD PTR ds:0xc002d930
c000f93a:	6a 00                	push   0x0
c000f93c:	53                   	push   ebx
c000f93d:	e8 70 ff ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	83 c4 08             	add    esp,0x8
c000f948:	5b                   	pop    ebx
c000f949:	c3                   	ret    
c000f94a:	c7 44 24 10 dd 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029fdd
c000f952:	83 c4 08             	add    esp,0x8
c000f955:	5b                   	pop    ebx
c000f956:	e9 bc a4 00 00       	jmp    c0019e17 <Krnl::panic(char const*)>
c000f95b:	83 ec 08             	sub    esp,0x8
c000f95e:	68 00 10 00 00       	push   0x1000
c000f963:	53                   	push   ebx
c000f964:	e8 01 ff ff ff       	call   c000f86a <Phys::freeDMA(unsigned long, unsigned long)>
c000f969:	83 c4 10             	add    esp,0x10
c000f96c:	83 c4 08             	add    esp,0x8
c000f96f:	5b                   	pop    ebx
c000f970:	c3                   	ret    

c000f971 <Phys::allocatePage()>:
c000f971:	56                   	push   esi
c000f972:	53                   	push   ebx
c000f973:	51                   	push   ecx
c000f974:	8b 35 24 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d924
c000f97a:	89 f3                	mov    ebx,esi
c000f97c:	eb 0a                	jmp    c000f988 <Phys::allocatePage()+0x17>
c000f97e:	89 1d 24 d9 02 c0    	mov    DWORD PTR ds:0xc002d924,ebx
c000f984:	39 de                	cmp    esi,ebx
c000f986:	74 24                	je     c000f9ac <Phys::allocatePage()+0x3b>
c000f988:	53                   	push   ebx
c000f989:	e8 56 ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f98e:	5a                   	pop    edx
c000f98f:	84 c0                	test   al,al
c000f991:	74 76                	je     c000fa09 <Phys::allocatePage()+0x98>
c000f993:	43                   	inc    ebx
c000f994:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f99a:	75 e2                	jne    c000f97e <Phys::allocatePage()+0xd>
c000f99c:	31 db                	xor    ebx,ebx
c000f99e:	c7 05 24 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d924,0x0
c000f9a8:	39 de                	cmp    esi,ebx
c000f9aa:	75 dc                	jne    c000f988 <Phys::allocatePage()+0x17>
c000f9ac:	83 ec 0c             	sub    esp,0xc
c000f9af:	68 11 a0 02 c0       	push   0xc002a011
c000f9b4:	e8 f2 2c 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000f9b9:	59                   	pop    ecx
c000f9ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9c8:	e8 a3 29 00 00       	call   c0012370 <VAS::scanForEviction()>
c000f9cd:	83 c4 10             	add    esp,0x10
c000f9d0:	85 c0                	test   eax,eax
c000f9d2:	75 70                	jne    c000fa44 <Phys::allocatePage()+0xd3>
c000f9d4:	83 ec 0c             	sub    esp,0xc
c000f9d7:	68 00 10 00 00       	push   0x1000
c000f9dc:	e8 c8 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9e1:	83 c4 10             	add    esp,0x10
c000f9e4:	85 c0                	test   eax,eax
c000f9e6:	75 5c                	jne    c000fa44 <Phys::allocatePage()+0xd3>
c000f9e8:	83 ec 0c             	sub    esp,0xc
c000f9eb:	68 29 a0 02 c0       	push   0xc002a029
c000f9f0:	e8 22 a4 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	8b 1d 24 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d924
c000f9fe:	53                   	push   ebx
c000f9ff:	e8 e0 fe ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000fa04:	5a                   	pop    edx
c000fa05:	84 c0                	test   al,al
c000fa07:	75 8a                	jne    c000f993 <Phys::allocatePage()+0x22>
c000fa09:	6a 01                	push   0x1
c000fa0b:	53                   	push   ebx
c000fa0c:	e8 a1 fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa11:	5b                   	pop    ebx
c000fa12:	a1 30 d9 02 c0       	mov    eax,ds:0xc002d930
c000fa17:	5e                   	pop    esi
c000fa18:	40                   	inc    eax
c000fa19:	8b 15 24 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d924
c000fa1f:	a3 30 d9 02 c0       	mov    ds:0xc002d930,eax
c000fa24:	c1 e2 0c             	shl    edx,0xc
c000fa27:	52                   	push   edx
c000fa28:	ff 35 34 d9 02 c0    	push   DWORD PTR ds:0xc002d934
c000fa2e:	50                   	push   eax
c000fa2f:	68 f3 9f 02 c0       	push   0xc0029ff3
c000fa34:	e8 72 2c 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000fa39:	a1 24 d9 02 c0       	mov    eax,ds:0xc002d924
c000fa3e:	83 c4 10             	add    esp,0x10
c000fa41:	c1 e0 0c             	shl    eax,0xc
c000fa44:	5a                   	pop    edx
c000fa45:	5b                   	pop    ebx
c000fa46:	5e                   	pop    esi
c000fa47:	c3                   	ret    

c000fa48 <Phys::allocateContiguousPages(int)>:
c000fa48:	57                   	push   edi
c000fa49:	56                   	push   esi
c000fa4a:	53                   	push   ebx
c000fa4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa4f:	fa                   	cli    
c000fa50:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c000fa56:	31 db                	xor    ebx,ebx
c000fa58:	85 db                	test   ebx,ebx
c000fa5a:	75 11                	jne    c000fa6d <Phys::allocateContiguousPages(int)+0x25>
c000fa5c:	e8 10 ff ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa61:	83 fe 01             	cmp    esi,0x1
c000fa64:	89 c7                	mov    edi,eax
c000fa66:	74 21                	je     c000fa89 <Phys::allocateContiguousPages(int)+0x41>
c000fa68:	bb 01 00 00 00       	mov    ebx,0x1
c000fa6d:	e8 ff fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa72:	89 da                	mov    edx,ebx
c000fa74:	c1 e2 0c             	shl    edx,0xc
c000fa77:	01 fa                	add    edx,edi
c000fa79:	39 c2                	cmp    edx,eax
c000fa7b:	74 20                	je     c000fa9d <Phys::allocateContiguousPages(int)+0x55>
c000fa7d:	bb 01 00 00 00       	mov    ebx,0x1
c000fa82:	89 c7                	mov    edi,eax
c000fa84:	83 fe 01             	cmp    esi,0x1
c000fa87:	75 e4                	jne    c000fa6d <Phys::allocateContiguousPages(int)+0x25>
c000fa89:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c000fa8e:	48                   	dec    eax
c000fa8f:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c000fa94:	75 01                	jne    c000fa97 <Phys::allocateContiguousPages(int)+0x4f>
c000fa96:	fb                   	sti    
c000fa97:	89 f8                	mov    eax,edi
c000fa99:	5b                   	pop    ebx
c000fa9a:	5e                   	pop    esi
c000fa9b:	5f                   	pop    edi
c000fa9c:	c3                   	ret    
c000fa9d:	43                   	inc    ebx
c000fa9e:	39 f3                	cmp    ebx,esi
c000faa0:	75 b6                	jne    c000fa58 <Phys::allocateContiguousPages(int)+0x10>
c000faa2:	eb e5                	jmp    c000fa89 <Phys::allocateContiguousPages(int)+0x41>

c000faa4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000faa4:	56                   	push   esi
c000faa5:	53                   	push   ebx
c000faa6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faaa:	39 1d 28 d9 02 c0    	cmp    DWORD PTR ds:0xc002d928,ebx
c000fab0:	73 06                	jae    c000fab8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fab2:	89 1d 28 d9 02 c0    	mov    DWORD PTR ds:0xc002d928,ebx
c000fab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fabc:	c1 eb 0c             	shr    ebx,0xc
c000fabf:	c1 e8 0c             	shr    eax,0xc
c000fac2:	39 d8                	cmp    eax,ebx
c000fac4:	73 13                	jae    c000fad9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fac6:	6a 00                	push   0x0
c000fac8:	8d 70 01             	lea    esi,[eax+0x1]
c000facb:	50                   	push   eax
c000facc:	e8 e1 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fad1:	5a                   	pop    edx
c000fad2:	89 f0                	mov    eax,esi
c000fad4:	59                   	pop    ecx
c000fad5:	39 f3                	cmp    ebx,esi
c000fad7:	75 ed                	jne    c000fac6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fad9:	5b                   	pop    ebx
c000fada:	5e                   	pop    esi
c000fadb:	c3                   	ret    

c000fadc <Phys::physicalMemorySetup(unsigned int)>:
c000fadc:	55                   	push   ebp
c000fadd:	57                   	push   edi
c000fade:	56                   	push   esi
c000fadf:	53                   	push   ebx
c000fae0:	31 db                	xor    ebx,ebx
c000fae2:	83 ec 40             	sub    esp,0x40
c000fae5:	6a 30                	push   0x30
c000fae7:	6a 00                	push   0x0
c000fae9:	68 40 d9 02 c0       	push   0xc002d940
c000faee:	e8 5d 0c ff ff       	call   c0000750 <memset>
c000faf3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000faf7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fafc:	05 00 10 00 00       	add    eax,0x1000
c000fb01:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb05:	5a                   	pop    edx
c000fb06:	59                   	pop    ecx
c000fb07:	50                   	push   eax
c000fb08:	68 37 a0 02 c0       	push   0xc002a037
c000fb0d:	e8 99 2b 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	83 ec 08             	sub    esp,0x8
c000fb18:	6a 01                	push   0x1
c000fb1a:	53                   	push   ebx
c000fb1b:	43                   	inc    ebx
c000fb1c:	e8 91 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fb21:	83 c4 10             	add    esp,0x10
c000fb24:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb2a:	75 e9                	jne    c000fb15 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb2c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb33:	66 85 c0             	test   ax,ax
c000fb36:	0f 84 b5 01 00 00    	je     c000fcf1 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fb3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb40:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fb46:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fb4b:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000fb51:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000fb57:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fb5b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb5f:	01 c1                	add    ecx,eax
c000fb61:	11 d3                	adc    ebx,edx
c000fb63:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb67:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb6b:	31 ff                	xor    edi,edi
c000fb6d:	89 d3                	mov    ebx,edx
c000fb6f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb73:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb79:	09 cb                	or     ebx,ecx
c000fb7b:	0f 85 80 01 00 00    	jne    c000fd01 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb81:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb8d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb92:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb96:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb9e:	eb 49                	jmp    c000fbe9 <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fba0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fba4:	83 c3 18             	add    ebx,0x18
c000fba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbaf:	39 d0                	cmp    eax,edx
c000fbb1:	0f 84 4a 01 00 00    	je     c000fd01 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbb7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fbba:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fbbd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fbc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbc2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbc6:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbca:	01 c6                	add    esi,eax
c000fbcc:	89 d5                	mov    ebp,edx
c000fbce:	11 d7                	adc    edi,edx
c000fbd0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fbd4:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fbd8:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fbdb:	31 ff                	xor    edi,edi
c000fbdd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fbe1:	09 cd                	or     ebp,ecx
c000fbe3:	0f 85 18 01 00 00    	jne    c000fd01 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbe9:	89 f1                	mov    ecx,esi
c000fbeb:	83 f1 01             	xor    ecx,0x1
c000fbee:	09 f9                	or     ecx,edi
c000fbf0:	75 ae                	jne    c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbf2:	be 00 00 08 00       	mov    esi,0x80000
c000fbf7:	89 cf                	mov    edi,ecx
c000fbf9:	39 c6                	cmp    esi,eax
c000fbfb:	19 d7                	sbb    edi,edx
c000fbfd:	0f 82 98 00 00 00    	jb     c000fc9b <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fc03:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fc07:	89 cd                	mov    ebp,ecx
c000fc09:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc11:	19 fd                	sbb    ebp,edi
c000fc13:	0f 83 82 00 00 00    	jae    c000fc9b <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fc19:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fc1e:	39 f0                	cmp    eax,esi
c000fc20:	19 f9                	sbb    ecx,edi
c000fc22:	0f 82 03 01 00 00    	jb     c000fd2b <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fc28:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc31:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc35:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fc3b:	83 d7 ff             	adc    edi,0xffffffff
c000fc3e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc42:	31 c0                	xor    eax,eax
c000fc44:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fc48:	39 f2                	cmp    edx,esi
c000fc4a:	89 c2                	mov    edx,eax
c000fc4c:	19 fa                	sbb    edx,edi
c000fc4e:	0f 83 4c ff ff ff    	jae    c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc54:	b8 00 00 08 00       	mov    eax,0x80000
c000fc59:	83 ec 08             	sub    esp,0x8
c000fc5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc60:	50                   	push   eax
c000fc61:	e8 3e fe ff ff       	call   c000faa4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc66:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc6e:	83 c4 0c             	add    esp,0xc
c000fc71:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc75:	03 05 34 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d934
c000fc7b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc82:	a3 34 d9 02 c0       	mov    ds:0xc002d934,eax
c000fc87:	52                   	push   edx
c000fc88:	50                   	push   eax
c000fc89:	68 5d a0 02 c0       	push   0xc002a05d
c000fc8e:	e8 18 2a 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c000fc93:	83 c4 10             	add    esp,0x10
c000fc96:	e9 05 ff ff ff       	jmp    c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc9b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fca3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fca7:	39 ee                	cmp    esi,ebp
c000fca9:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fcad:	0f 82 ed fe ff ff    	jb     c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fcb3:	be ff 1f 00 00       	mov    esi,0x1fff
c000fcb8:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fcbc:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fcc0:	0f 83 da fe ff ff    	jae    c000fba0 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fcc6:	39 e8                	cmp    eax,ebp
c000fcc8:	89 d1                	mov    ecx,edx
c000fcca:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcce:	73 89                	jae    c000fc59 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fcd8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcdc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fce0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fce4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fce8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcec:	e9 68 ff ff ff       	jmp    c000fc59 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcf1:	83 ec 0c             	sub    esp,0xc
c000fcf4:	68 4f a0 02 c0       	push   0xc002a04f
c000fcf9:	e8 19 a1 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000fcfe:	83 c4 10             	add    esp,0x10
c000fd01:	bb 40 01 00 00       	mov    ebx,0x140
c000fd06:	83 ec 08             	sub    esp,0x8
c000fd09:	6a 00                	push   0x0
c000fd0b:	53                   	push   ebx
c000fd0c:	43                   	inc    ebx
c000fd0d:	e8 a0 fb ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fd12:	ff 05 34 d9 02 c0    	inc    DWORD PTR ds:0xc002d934
c000fd18:	83 c4 10             	add    esp,0x10
c000fd1b:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd21:	75 e3                	jne    c000fd06 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fd23:	83 c4 3c             	add    esp,0x3c
c000fd26:	5b                   	pop    ebx
c000fd27:	5e                   	pop    esi
c000fd28:	5f                   	pop    edi
c000fd29:	5d                   	pop    ebp
c000fd2a:	c3                   	ret    
c000fd2b:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fd33:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd3b:	e9 e8 fe ff ff       	jmp    c000fc28 <Phys::physicalMemorySetup(unsigned int)+0x14c>

c000fd40 <Pipe::isAtty()>:
c000fd40:	31 c0                	xor    eax,eax
c000fd42:	c3                   	ret    
c000fd43:	90                   	nop

c000fd44 <Pipe::~Pipe()>:
c000fd44:	83 ec 0c             	sub    esp,0xc
c000fd47:	ba bc a0 02 c0       	mov    edx,0xc002a0bc
c000fd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd50:	89 10                	mov    DWORD PTR [eax],edx
c000fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd56:	83 ec 0c             	sub    esp,0xc
c000fd59:	50                   	push   eax
c000fd5a:	e8 3f 12 00 00       	call   c0010f9e <UnixFile::~UnixFile()>
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	90                   	nop
c000fd63:	83 c4 0c             	add    esp,0xc
c000fd66:	c3                   	ret    
c000fd67:	90                   	nop

c000fd68 <Pipe::~Pipe()>:
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	83 ec 0c             	sub    esp,0xc
c000fd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd72:	e8 cd ff ff ff       	call   c000fd44 <Pipe::~Pipe()>
c000fd77:	83 c4 10             	add    esp,0x10
c000fd7a:	83 ec 08             	sub    esp,0x8
c000fd7d:	6a 20                	push   0x20
c000fd7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd83:	e8 4b 28 00 00       	call   c00125d3 <operator delete(void*, unsigned long)>
c000fd88:	83 c4 10             	add    esp,0x10
c000fd8b:	83 c4 0c             	add    esp,0xc
c000fd8e:	c3                   	ret    
c000fd8f:	90                   	nop

c000fd90 <Pipe::read(unsigned long long, void*, int*)>:
c000fd90:	55                   	push   ebp
c000fd91:	57                   	push   edi
c000fd92:	56                   	push   esi
c000fd93:	53                   	push   ebx
c000fd94:	83 ec 1c             	sub    esp,0x1c
c000fd97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd9b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd9f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fda3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fda6:	89 c8                	mov    eax,ecx
c000fda8:	99                   	cdq    
c000fda9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdad:	74 24                	je     c000fdd3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdaf:	39 f9                	cmp    ecx,edi
c000fdb1:	89 d1                	mov    ecx,edx
c000fdb3:	19 f1                	sbb    ecx,esi
c000fdb5:	73 1c                	jae    c000fdd3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdb7:	fa                   	cli    
c000fdb8:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c000fdbe:	e8 de db 00 00       	call   c001d9a1 <schedule()>
c000fdc3:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c000fdc8:	48                   	dec    eax
c000fdc9:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c000fdce:	75 d3                	jne    c000fda3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdd0:	fb                   	sti    
c000fdd1:	eb d0                	jmp    c000fda3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdd3:	39 f8                	cmp    eax,edi
c000fdd5:	89 d1                	mov    ecx,edx
c000fdd7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdda:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdde:	19 f1                	sbb    ecx,esi
c000fde0:	73 07                	jae    c000fde9 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fde2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fde5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fde9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fdec:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fdef:	29 f7                	sub    edi,esi
c000fdf1:	89 f8                	mov    eax,edi
c000fdf3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fdf7:	99                   	cdq    
c000fdf8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fdfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdff:	19 d0                	sbb    eax,edx
c000fe01:	73 07                	jae    c000fe0a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe0a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe0d:	89 ea                	mov    edx,ebp
c000fe0f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe13:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe18:	74 0d                	je     c000fe27 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe1a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe1d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe27:	85 d2                	test   edx,edx
c000fe29:	74 11                	je     c000fe3c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe2f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe32:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe36:	89 d1                	mov    ecx,edx
c000fe38:	89 c7                	mov    edi,eax
c000fe3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe3c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe3f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe42:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe45:	99                   	cdq    
c000fe46:	89 f7                	mov    edi,esi
c000fe48:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe4b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe4f:	c1 ff 1f             	sar    edi,0x1f
c000fe52:	57                   	push   edi
c000fe53:	56                   	push   esi
c000fe54:	52                   	push   edx
c000fe55:	50                   	push   eax
c000fe56:	e8 89 69 01 00       	call   c00267e4 <__umoddi3>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe61:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe66:	75 10                	jne    c000fe78 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe68:	83 ec 0c             	sub    esp,0xc
c000fe6b:	68 79 a0 02 c0       	push   0xc002a079
c000fe70:	e8 a2 9f 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe7c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe7f:	89 10                	mov    DWORD PTR [eax],edx
c000fe81:	83 c4 1c             	add    esp,0x1c
c000fe84:	31 c0                	xor    eax,eax
c000fe86:	5b                   	pop    ebx
c000fe87:	5e                   	pop    esi
c000fe88:	5f                   	pop    edi
c000fe89:	5d                   	pop    ebp
c000fe8a:	c3                   	ret    
c000fe8b:	90                   	nop

c000fe8c <Pipe::write(unsigned long long, void*, int*)>:
c000fe8c:	55                   	push   ebp
c000fe8d:	57                   	push   edi
c000fe8e:	56                   	push   esi
c000fe8f:	53                   	push   ebx
c000fe90:	83 ec 1c             	sub    esp,0x1c
c000fe93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe9b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe9e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fea2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fea5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fea9:	89 d8                	mov    eax,ebx
c000feab:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000feae:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000feb2:	89 d6                	mov    esi,edx
c000feb4:	89 d7                	mov    edi,edx
c000feb6:	c1 ff 1f             	sar    edi,0x1f
c000feb9:	03 34 24             	add    esi,DWORD PTR [esp]
c000febc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fec0:	c1 f8 1f             	sar    eax,0x1f
c000fec3:	39 f3                	cmp    ebx,esi
c000fec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fec9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fecd:	19 f8                	sbb    eax,edi
c000fecf:	b8 01 00 00 00       	mov    eax,0x1
c000fed4:	72 6e                	jb     c000ff44 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fed6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fed9:	01 d0                	add    eax,edx
c000fedb:	99                   	cdq    
c000fedc:	f7 fb                	idiv   ebx
c000fede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fee2:	29 d3                	sub    ebx,edx
c000fee4:	89 d7                	mov    edi,edx
c000fee6:	89 de                	mov    esi,ebx
c000fee8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000feeb:	c1 fb 1f             	sar    ebx,0x1f
c000feee:	39 f2                	cmp    edx,esi
c000fef0:	19 d8                	sbb    eax,ebx
c000fef2:	b8 00 00 00 00       	mov    eax,0x0
c000fef7:	72 04                	jb     c000fefd <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fef9:	89 d0                	mov    eax,edx
c000fefb:	29 f0                	sub    eax,esi
c000fefd:	89 d3                	mov    ebx,edx
c000feff:	29 c3                	sub    ebx,eax
c000ff01:	74 0b                	je     c000ff0e <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff03:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff06:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff0a:	89 d9                	mov    ecx,ebx
c000ff0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff0e:	85 c0                	test   eax,eax
c000ff10:	74 0d                	je     c000ff1f <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff12:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff16:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff19:	89 de                	mov    esi,ebx
c000ff1b:	89 c1                	mov    ecx,eax
c000ff1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff1f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff22:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff27:	75 10                	jne    c000ff39 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff29:	83 ec 0c             	sub    esp,0xc
c000ff2c:	68 95 a0 02 c0       	push   0xc002a095
c000ff31:	e8 e1 9e 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff3d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff40:	89 08                	mov    DWORD PTR [eax],ecx
c000ff42:	31 c0                	xor    eax,eax
c000ff44:	83 c4 1c             	add    esp,0x1c
c000ff47:	5b                   	pop    ebx
c000ff48:	5e                   	pop    esi
c000ff49:	5f                   	pop    edi
c000ff4a:	5d                   	pop    ebp
c000ff4b:	c3                   	ret    

c000ff4c <Pipe::Pipe(int)>:
c000ff4c:	83 ec 0c             	sub    esp,0xc
c000ff4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff53:	83 ec 08             	sub    esp,0x8
c000ff56:	6a 00                	push   0x0
c000ff58:	50                   	push   eax
c000ff59:	e8 5e 0e 00 00       	call   c0010dbc <UnixFile::UnixFile(int)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	ba bc a0 02 c0       	mov    edx,0xc002a0bc
c000ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6a:	89 10                	mov    DWORD PTR [eax],edx
c000ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff86:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff91:	83 ec 0c             	sub    esp,0xc
c000ff94:	50                   	push   eax
c000ff95:	e8 ff f5 ff ff       	call   c000f599 <malloc>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	89 c2                	mov    edx,eax
c000ff9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffaa:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffae:	90                   	nop
c000ffaf:	83 c4 0c             	add    esp,0xc
c000ffb2:	c3                   	ret    
c000ffb3:	90                   	nop

c000ffb4 <VgaText::isAtty()>:
c000ffb4:	b0 01                	mov    al,0x1
c000ffb6:	c3                   	ret    
c000ffb7:	90                   	nop

c000ffb8 <VgaText::~VgaText()>:
c000ffb8:	83 ec 0c             	sub    esp,0xc
c000ffbb:	ba 44 a1 02 c0       	mov    edx,0xc002a144
c000ffc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc4:	89 10                	mov    DWORD PTR [eax],edx
c000ffc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	50                   	push   eax
c000ffce:	e8 cb 0f 00 00       	call   c0010f9e <UnixFile::~UnixFile()>
c000ffd3:	83 c4 10             	add    esp,0x10
c000ffd6:	90                   	nop
c000ffd7:	83 c4 0c             	add    esp,0xc
c000ffda:	c3                   	ret    
c000ffdb:	90                   	nop

c000ffdc <VgaText::~VgaText()>:
c000ffdc:	83 ec 0c             	sub    esp,0xc
c000ffdf:	83 ec 0c             	sub    esp,0xc
c000ffe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe6:	e8 cd ff ff ff       	call   c000ffb8 <VgaText::~VgaText()>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	83 ec 08             	sub    esp,0x8
c000fff1:	68 c4 02 00 00       	push   0x2c4
c000fff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fffa:	e8 d4 25 00 00       	call   c00125d3 <operator delete(void*, unsigned long)>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	83 c4 0c             	add    esp,0xc
c0010005:	c3                   	ret    

c0010006 <VgaText::read(unsigned long long, void*, int*)>:
c0010006:	83 ec 10             	sub    esp,0x10
c0010009:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001000d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010015:	e8 58 5b 00 00       	call   c0015b72 <readKeyboard(VgaText*, char*, unsigned long)>
c001001a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001001e:	89 02                	mov    DWORD PTR [edx],eax
c0010020:	31 c0                	xor    eax,eax
c0010022:	83 c4 1c             	add    esp,0x1c
c0010025:	c3                   	ret    

c0010026 <setTerminalScrollLock(bool)>:
c0010026:	c3                   	ret    

c0010027 <addToTerminalCycle(VgaText*)>:
c0010027:	8b 15 a0 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9a0
c001002d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010031:	85 d2                	test   edx,edx
c0010033:	75 09                	jne    c001003e <addToTerminalCycle(VgaText*)+0x17>
c0010035:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010038:	a3 a0 d9 02 c0       	mov    ds:0xc002d9a0,eax
c001003d:	c3                   	ret    
c001003e:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010041:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010044:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010047:	c3                   	ret    

c0010048 <installVgaTextImplementation()>:
c0010048:	83 ec 10             	sub    esp,0x10
c001004b:	6a 20                	push   0x20
c001004d:	6a 00                	push   0x0
c001004f:	68 80 d9 02 c0       	push   0xc002d980
c0010054:	e8 f7 06 ff ff       	call   c0000750 <memset>
c0010059:	83 c4 1c             	add    esp,0x1c
c001005c:	c3                   	ret    

c001005d <scrollTerminalScrollLock(int)>:
c001005d:	c3                   	ret    

c001005e <VgaText::updateTitle()>:
c001005e:	53                   	push   ebx
c001005f:	31 c0                	xor    eax,eax
c0010061:	83 ec 58             	sub    esp,0x58
c0010064:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010068:	89 e1                	mov    ecx,esp
c001006a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001006e:	40                   	inc    eax
c001006f:	83 f8 50             	cmp    eax,0x50
c0010072:	75 f6                	jne    c001006a <VgaText::updateTitle()+0xc>
c0010074:	31 c0                	xor    eax,eax
c0010076:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001007d:	84 db                	test   bl,bl
c001007f:	74 06                	je     c0010087 <VgaText::updateTitle()+0x29>
c0010081:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010084:	40                   	inc    eax
c0010085:	eb ef                	jmp    c0010076 <VgaText::updateTitle()+0x18>
c0010087:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001008a:	85 c0                	test   eax,eax
c001008c:	74 09                	je     c0010097 <VgaText::updateTitle()+0x39>
c001008e:	53                   	push   ebx
c001008f:	53                   	push   ebx
c0010090:	51                   	push   ecx
c0010091:	52                   	push   edx
c0010092:	ff d0                	call   eax
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	83 c4 58             	add    esp,0x58
c001009a:	5b                   	pop    ebx
c001009b:	c3                   	ret    

c001009c <VgaText::load()>:
c001009c:	53                   	push   ebx
c001009d:	31 c0                	xor    eax,eax
c001009f:	83 ec 58             	sub    esp,0x58
c00100a2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100a6:	89 e2                	mov    edx,esp
c00100a8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ac:	40                   	inc    eax
c00100ad:	83 f8 50             	cmp    eax,0x50
c00100b0:	75 f6                	jne    c00100a8 <VgaText::load()+0xc>
c00100b2:	31 c0                	xor    eax,eax
c00100b4:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100bb:	84 c9                	test   cl,cl
c00100bd:	74 06                	je     c00100c5 <VgaText::load()+0x29>
c00100bf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100c2:	40                   	inc    eax
c00100c3:	eb ef                	jmp    c00100b4 <VgaText::load()+0x18>
c00100c5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100c8:	85 c0                	test   eax,eax
c00100ca:	74 09                	je     c00100d5 <VgaText::load()+0x39>
c00100cc:	51                   	push   ecx
c00100cd:	51                   	push   ecx
c00100ce:	52                   	push   edx
c00100cf:	53                   	push   ebx
c00100d0:	ff d0                	call   eax
c00100d2:	83 c4 10             	add    esp,0x10
c00100d5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100d8:	85 c0                	test   eax,eax
c00100da:	74 09                	je     c00100e5 <VgaText::load()+0x49>
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	53                   	push   ebx
c00100e0:	ff d0                	call   eax
c00100e2:	83 c4 10             	add    esp,0x10
c00100e5:	83 c4 58             	add    esp,0x58
c00100e8:	5b                   	pop    ebx
c00100e9:	c3                   	ret    

c00100ea <VgaText::updateCursor()>:
c00100ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ee:	39 05 a4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9a4,eax
c00100f4:	75 09                	jne    c00100ff <VgaText::updateCursor()+0x15>
c00100f6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00100f9:	85 c0                	test   eax,eax
c00100fb:	74 02                	je     c00100ff <VgaText::updateCursor()+0x15>
c00100fd:	ff e0                	jmp    eax
c00100ff:	c3                   	ret    

c0010100 <VgaText::doANSI_SGR(int)>:
c0010100:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010108:	85 d2                	test   edx,edx
c001010a:	75 0b                	jne    c0010117 <VgaText::doANSI_SGR(int)+0x17>
c001010c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001010f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010112:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010115:	eb 59                	jmp    c0010170 <VgaText::doANSI_SGR(int)+0x70>
c0010117:	83 fa 07             	cmp    edx,0x7
c001011a:	75 0b                	jne    c0010127 <VgaText::doANSI_SGR(int)+0x27>
c001011c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001011f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010122:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010125:	eb 49                	jmp    c0010170 <VgaText::doANSI_SGR(int)+0x70>
c0010127:	83 fa 1b             	cmp    edx,0x1b
c001012a:	74 e0                	je     c001010c <VgaText::doANSI_SGR(int)+0xc>
c001012c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001012f:	83 f9 07             	cmp    ecx,0x7
c0010132:	77 09                	ja     c001013d <VgaText::doANSI_SGR(int)+0x3d>
c0010134:	8b 14 8d 40 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd37c0]
c001013b:	eb 20                	jmp    c001015d <VgaText::doANSI_SGR(int)+0x5d>
c001013d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010140:	83 f9 07             	cmp    ecx,0x7
c0010143:	77 09                	ja     c001014e <VgaText::doANSI_SGR(int)+0x4e>
c0010145:	8b 14 8d 40 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd37c0]
c001014c:	eb 22                	jmp    c0010170 <VgaText::doANSI_SGR(int)+0x70>
c001014e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010151:	83 f9 07             	cmp    ecx,0x7
c0010154:	77 0b                	ja     c0010161 <VgaText::doANSI_SGR(int)+0x61>
c0010156:	8b 14 95 f8 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3908]
c001015d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010160:	c3                   	ret    
c0010161:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010164:	83 f9 07             	cmp    ecx,0x7
c0010167:	77 0a                	ja     c0010173 <VgaText::doANSI_SGR(int)+0x73>
c0010169:	8b 14 95 d0 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3930]
c0010170:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010173:	c3                   	ret    

c0010174 <VgaText::setDefaultBgColour(VgaColour)>:
c0010174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001017c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001017f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010182:	c3                   	ret    
c0010183:	90                   	nop

c0010184 <VgaText::setDefaultFgColour(VgaColour)>:
c0010184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010188:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001018c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001018f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010192:	c3                   	ret    
c0010193:	90                   	nop

c0010194 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010194:	53                   	push   ebx
c0010195:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010199:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001019d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101a1:	51                   	push   ecx
c00101a2:	e8 cd ff ff ff       	call   c0010174 <VgaText::setDefaultBgColour(VgaColour)>
c00101a7:	58                   	pop    eax
c00101a8:	5a                   	pop    edx
c00101a9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101b1:	5b                   	pop    ebx
c00101b2:	eb d0                	jmp    c0010184 <VgaText::setDefaultFgColour(VgaColour)>

c00101b4 <VgaText::setTitleTextColour(VgaColour)>:
c00101b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101bc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101bf:	e9 9a fe ff ff       	jmp    c001005e <VgaText::updateTitle()>

c00101c4 <VgaText::setTitleColour(VgaColour)>:
c00101c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101cc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101cf:	e9 8a fe ff ff       	jmp    c001005e <VgaText::updateTitle()>

c00101d4 <VgaText::setTitle(char*)>:
c00101d4:	53                   	push   ebx
c00101d5:	83 ec 10             	sub    esp,0x10
c00101d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e0:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00101e6:	50                   	push   eax
c00101e7:	e8 20 06 ff ff       	call   c000080c <strcpy>
c00101ec:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101f0:	83 c4 18             	add    esp,0x18
c00101f3:	5b                   	pop    ebx
c00101f4:	e9 65 fe ff ff       	jmp    c001005e <VgaText::updateTitle()>
c00101f9:	90                   	nop

c00101fa <VgaText::combineColours(unsigned char, unsigned char)>:
c00101fa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101fe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010203:	83 e0 0f             	and    eax,0xf
c0010206:	c1 e2 04             	shl    edx,0x4
c0010209:	09 d0                	or     eax,edx
c001020b:	c3                   	ret    

c001020c <VgaText::scrollScreen()>:
c001020c:	55                   	push   ebp
c001020d:	b9 01 00 00 00       	mov    ecx,0x1
c0010212:	57                   	push   edi
c0010213:	56                   	push   esi
c0010214:	53                   	push   ebx
c0010215:	83 ec 0c             	sub    esp,0xc
c0010218:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001021c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010222:	31 ff                	xor    edi,edi
c0010224:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010227:	83 f9 17             	cmp    ecx,0x17
c001022a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001022d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010234:	75 27                	jne    c001025d <VgaText::scrollScreen()+0x51>
c0010236:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010239:	01 f5                	add    ebp,esi
c001023b:	f7 c7 01 00 00 00    	test   edi,0x1
c0010241:	74 16                	je     c0010259 <VgaText::scrollScreen()+0x4d>
c0010243:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010247:	50                   	push   eax
c0010248:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001024c:	50                   	push   eax
c001024d:	e8 a8 ff ff ff       	call   c00101fa <VgaText::combineColours(unsigned char, unsigned char)>
c0010252:	5a                   	pop    edx
c0010253:	5a                   	pop    edx
c0010254:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010257:	eb 04                	jmp    c001025d <VgaText::scrollScreen()+0x51>
c0010259:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001025d:	47                   	inc    edi
c001025e:	46                   	inc    esi
c001025f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010265:	75 bd                	jne    c0010224 <VgaText::scrollScreen()+0x18>
c0010267:	41                   	inc    ecx
c0010268:	83 f9 18             	cmp    ecx,0x18
c001026b:	75 af                	jne    c001021c <VgaText::scrollScreen()+0x10>
c001026d:	39 1d a4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9a4,ebx
c0010273:	75 1b                	jne    c0010290 <VgaText::scrollScreen()+0x84>
c0010275:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010279:	74 05                	je     c0010280 <VgaText::scrollScreen()+0x74>
c001027b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001027e:	eb 10                	jmp    c0010290 <VgaText::scrollScreen()+0x84>
c0010280:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010283:	85 c0                	test   eax,eax
c0010285:	74 09                	je     c0010290 <VgaText::scrollScreen()+0x84>
c0010287:	83 ec 0c             	sub    esp,0xc
c001028a:	53                   	push   ebx
c001028b:	ff d0                	call   eax
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010294:	83 c4 0c             	add    esp,0xc
c0010297:	5b                   	pop    ebx
c0010298:	5e                   	pop    esi
c0010299:	5f                   	pop    edi
c001029a:	5d                   	pop    ebp
c001029b:	e9 4a fe ff ff       	jmp    c00100ea <VgaText::updateCursor()>

c00102a0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00102a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102a5:	c1 e0 08             	shl    eax,0x8
c00102a8:	89 c2                	mov    edx,eax
c00102aa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102af:	09 d0                	or     eax,edx
c00102b1:	c3                   	ret    

c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102b2:	56                   	push   esi
c00102b3:	53                   	push   ebx
c00102b4:	51                   	push   ecx
c00102b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102b9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102be:	50                   	push   eax
c00102bf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102c4:	50                   	push   eax
c00102c5:	e8 30 ff ff ff       	call   c00101fa <VgaText::combineColours(unsigned char, unsigned char)>
c00102ca:	5b                   	pop    ebx
c00102cb:	0f b6 c0             	movzx  eax,al
c00102ce:	5e                   	pop    esi
c00102cf:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102d4:	50                   	push   eax
c00102d5:	53                   	push   ebx
c00102d6:	e8 c5 ff ff ff       	call   c00102a0 <VgaText::combineCharAndColour(char, unsigned char)>
c00102db:	5a                   	pop    edx
c00102dc:	5e                   	pop    esi
c00102dd:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102e0:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102e6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102ea:	0f b7 d2             	movzx  edx,dx
c00102ed:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00102f1:	39 0d a4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9a4,ecx
c00102f7:	75 10                	jne    c0010309 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102f9:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00102fc:	85 c0                	test   eax,eax
c00102fe:	74 09                	je     c0010309 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010300:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010304:	5a                   	pop    edx
c0010305:	5b                   	pop    ebx
c0010306:	5e                   	pop    esi
c0010307:	ff e0                	jmp    eax
c0010309:	58                   	pop    eax
c001030a:	5b                   	pop    ebx
c001030b:	5e                   	pop    esi
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <VgaText::getCursorX()>:
c001030e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010312:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010315:	c3                   	ret    

c0010316 <VgaText::getCursorY()>:
c0010316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001031a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001031d:	c3                   	ret    

c001031e <VgaText::setCursor(int, int)>:
c001031e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010322:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010326:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010329:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001032d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010330:	e9 b5 fd ff ff       	jmp    c00100ea <VgaText::updateCursor()>

c0010335 <setActiveTerminal(VgaText*)>:
c0010335:	53                   	push   ebx
c0010336:	83 ec 08             	sub    esp,0x8
c0010339:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001033d:	85 db                	test   ebx,ebx
c001033f:	75 11                	jne    c0010352 <setActiveTerminal(VgaText*)+0x1d>
c0010341:	c7 44 24 10 d0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0d0
c0010349:	83 c4 08             	add    esp,0x8
c001034c:	5b                   	pop    ebx
c001034d:	e9 c5 9a 00 00       	jmp    c0019e17 <Krnl::panic(char const*)>
c0010352:	a1 a4 d9 02 c0       	mov    eax,ds:0xc002d9a4
c0010357:	85 c0                	test   eax,eax
c0010359:	74 0c                	je     c0010367 <setActiveTerminal(VgaText*)+0x32>
c001035b:	83 ec 0c             	sub    esp,0xc
c001035e:	50                   	push   eax
c001035f:	e8 86 fd ff ff       	call   c00100ea <VgaText::updateCursor()>
c0010364:	83 c4 10             	add    esp,0x10
c0010367:	89 1d a4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a4,ebx
c001036d:	51                   	push   ecx
c001036e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010371:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010374:	53                   	push   ebx
c0010375:	e8 a4 ff ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010381:	75 07                	jne    c001038a <setActiveTerminal(VgaText*)+0x55>
c0010383:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001038a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001038e:	83 c4 08             	add    esp,0x8
c0010391:	5b                   	pop    ebx
c0010392:	e9 05 fd ff ff       	jmp    c001009c <VgaText::load()>

c0010397 <doTerminalCycle()>:
c0010397:	83 ec 18             	sub    esp,0x18
c001039a:	a1 a0 d9 02 c0       	mov    eax,ds:0xc002d9a0
c001039f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103a2:	50                   	push   eax
c00103a3:	a3 a0 d9 02 c0       	mov    ds:0xc002d9a0,eax
c00103a8:	e8 88 ff ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c00103ad:	83 c4 1c             	add    esp,0x1c
c00103b0:	c3                   	ret    
c00103b1:	90                   	nop

c00103b2 <VgaText::setCursorX(int)>:
c00103b2:	83 ec 10             	sub    esp,0x10
c00103b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103b9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c0:	50                   	push   eax
c00103c1:	e8 58 ff ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c00103c6:	83 c4 1c             	add    esp,0x1c
c00103c9:	c3                   	ret    

c00103ca <VgaText::setCursorY(int)>:
c00103ca:	83 ec 10             	sub    esp,0x10
c00103cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103d5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103d8:	50                   	push   eax
c00103d9:	e8 40 ff ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c00103de:	83 c4 1c             	add    esp,0x1c
c00103e1:	c3                   	ret    

c00103e2 <VgaText::incrementCursor(bool)>:
c00103e2:	56                   	push   esi
c00103e3:	53                   	push   ebx
c00103e4:	51                   	push   ecx
c00103e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00103f0:	40                   	inc    eax
c00103f1:	83 f8 50             	cmp    eax,0x50
c00103f4:	74 05                	je     c00103fb <VgaText::incrementCursor(bool)+0x19>
c00103f6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00103f9:	eb 24                	jmp    c001041f <VgaText::incrementCursor(bool)+0x3d>
c00103fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103fe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010405:	8d 50 01             	lea    edx,[eax+0x1]
c0010408:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001040b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001040e:	75 0f                	jne    c001041f <VgaText::incrementCursor(bool)+0x3d>
c0010410:	83 ec 0c             	sub    esp,0xc
c0010413:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010416:	53                   	push   ebx
c0010417:	e8 f0 fd ff ff       	call   c001020c <VgaText::scrollScreen()>
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	89 f0                	mov    eax,esi
c0010421:	84 c0                	test   al,al
c0010423:	74 0c                	je     c0010431 <VgaText::incrementCursor(bool)+0x4f>
c0010425:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010429:	5a                   	pop    edx
c001042a:	5b                   	pop    ebx
c001042b:	5e                   	pop    esi
c001042c:	e9 b9 fc ff ff       	jmp    c00100ea <VgaText::updateCursor()>
c0010431:	58                   	pop    eax
c0010432:	5b                   	pop    ebx
c0010433:	5e                   	pop    esi
c0010434:	c3                   	ret    
c0010435:	90                   	nop

c0010436 <VgaText::decrementCursor(bool)>:
c0010436:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001043a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001043e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010441:	85 c0                	test   eax,eax
c0010443:	74 04                	je     c0010449 <VgaText::decrementCursor(bool)+0x13>
c0010445:	48                   	dec    eax
c0010446:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010449:	84 c9                	test   cl,cl
c001044b:	74 09                	je     c0010456 <VgaText::decrementCursor(bool)+0x20>
c001044d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010451:	e9 94 fc ff ff       	jmp    c00100ea <VgaText::updateCursor()>
c0010456:	c3                   	ret    
c0010457:	90                   	nop

c0010458 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010458:	53                   	push   ebx
c0010459:	83 ec 08             	sub    esp,0x8
c001045c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010460:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010464:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010468:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001046c:	3c 07                	cmp    al,0x7
c001046e:	75 2a                	jne    c001049a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010470:	a1 58 da 02 c0       	mov    eax,ds:0xc002da58
c0010475:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001047d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010485:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001048d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010491:	83 c4 08             	add    esp,0x8
c0010494:	5b                   	pop    ebx
c0010495:	e9 1e 30 00 00       	jmp    c00134b8 <Buzzer::beep(int, int, bool)>
c001049a:	3c 0d                	cmp    al,0xd
c001049c:	75 09                	jne    c00104a7 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001049e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104a5:	eb 2c                	jmp    c00104d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104a7:	3c 0a                	cmp    al,0xa
c00104a9:	75 31                	jne    c00104dc <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104b5:	8d 50 01             	lea    edx,[eax+0x1]
c00104b8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104bb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104be:	75 0f                	jne    c00104cf <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104c0:	83 ec 0c             	sub    esp,0xc
c00104c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104c6:	53                   	push   ebx
c00104c7:	e8 40 fd ff ff       	call   c001020c <VgaText::scrollScreen()>
c00104cc:	83 c4 10             	add    esp,0x10
c00104cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104d3:	83 c4 08             	add    esp,0x8
c00104d6:	5b                   	pop    ebx
c00104d7:	e9 0e fc ff ff       	jmp    c00100ea <VgaText::updateCursor()>
c00104dc:	3c 08                	cmp    al,0x8
c00104de:	75 25                	jne    c0010505 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104e0:	50                   	push   eax
c00104e1:	50                   	push   eax
c00104e2:	6a 01                	push   0x1
c00104e4:	53                   	push   ebx
c00104e5:	e8 4c ff ff ff       	call   c0010436 <VgaText::decrementCursor(bool)>
c00104ea:	5a                   	pop    edx
c00104eb:	59                   	pop    ecx
c00104ec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104f2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00104f5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00104f8:	6a 20                	push   0x20
c00104fa:	53                   	push   ebx
c00104fb:	e8 b2 fd ff ff       	call   c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010500:	83 c4 28             	add    esp,0x28
c0010503:	5b                   	pop    ebx
c0010504:	c3                   	ret    
c0010505:	83 ec 08             	sub    esp,0x8
c0010508:	0f be c0             	movsx  eax,al
c001050b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010511:	51                   	push   ecx
c0010512:	52                   	push   edx
c0010513:	50                   	push   eax
c0010514:	53                   	push   ebx
c0010515:	e8 98 fd ff ff       	call   c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001051e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010526:	83 c4 28             	add    esp,0x28
c0010529:	5b                   	pop    ebx
c001052a:	e9 b3 fe ff ff       	jmp    c00103e2 <VgaText::incrementCursor(bool)>
c001052f:	90                   	nop

c0010530 <VgaText::doUpdate()>:
c0010530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010534:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010537:	85 c0                	test   eax,eax
c0010539:	74 02                	je     c001053d <VgaText::doUpdate()+0xd>
c001053b:	ff e0                	jmp    eax
c001053d:	c3                   	ret    

c001053e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001053e:	55                   	push   ebp
c001053f:	31 ed                	xor    ebp,ebp
c0010541:	57                   	push   edi
c0010542:	56                   	push   esi
c0010543:	53                   	push   ebx
c0010544:	83 ec 1c             	sub    esp,0x1c
c0010547:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001054b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010550:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010557:	50                   	push   eax
c0010558:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001055d:	50                   	push   eax
c001055e:	e8 97 fc ff ff       	call   c00101fa <VgaText::combineColours(unsigned char, unsigned char)>
c0010563:	59                   	pop    ecx
c0010564:	0f b6 c0             	movzx  eax,al
c0010567:	5e                   	pop    esi
c0010568:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001056d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010571:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010574:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010578:	0f b7 f6             	movzx  esi,si
c001057b:	01 f6                	add    esi,esi
c001057d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010580:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010583:	84 c0                	test   al,al
c0010585:	0f 84 fd 00 00 00    	je     c0010688 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001058b:	3c 0d                	cmp    al,0xd
c001058d:	75 0c                	jne    c001059b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001058f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010596:	e9 e7 00 00 00       	jmp    c0010682 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001059b:	3c 0a                	cmp    al,0xa
c001059d:	75 47                	jne    c00105e6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001059f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105a2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105a9:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ac:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105af:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105b2:	75 0f                	jne    c00105c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105b4:	83 ec 0c             	sub    esp,0xc
c00105b7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105ba:	53                   	push   ebx
c00105bb:	e8 4c fc ff ff       	call   c001020c <VgaText::scrollScreen()>
c00105c0:	83 c4 10             	add    esp,0x10
c00105c3:	83 ec 0c             	sub    esp,0xc
c00105c6:	31 ed                	xor    ebp,ebp
c00105c8:	53                   	push   ebx
c00105c9:	e8 1c fb ff ff       	call   c00100ea <VgaText::updateCursor()>
c00105ce:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105d3:	83 c4 10             	add    esp,0x10
c00105d6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105d9:	0f b7 f6             	movzx  esi,si
c00105dc:	01 f6                	add    esi,esi
c00105de:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105e1:	e9 9c 00 00 00       	jmp    c0010682 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105e6:	3c 08                	cmp    al,0x8
c00105e8:	75 35                	jne    c001061f <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00105ea:	56                   	push   esi
c00105eb:	56                   	push   esi
c00105ec:	6a 01                	push   0x1
c00105ee:	53                   	push   ebx
c00105ef:	e8 42 fe ff ff       	call   c0010436 <VgaText::decrementCursor(bool)>
c00105f4:	58                   	pop    eax
c00105f5:	5a                   	pop    edx
c00105f6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105f9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105fc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105ff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010602:	6a 20                	push   0x20
c0010604:	53                   	push   ebx
c0010605:	e8 a8 fc ff ff       	call   c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001060a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001060f:	83 c4 20             	add    esp,0x20
c0010612:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010615:	0f b7 f6             	movzx  esi,si
c0010618:	01 f6                	add    esi,esi
c001061a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001061d:	eb 63                	jmp    c0010682 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001061f:	51                   	push   ecx
c0010620:	51                   	push   ecx
c0010621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010625:	50                   	push   eax
c0010626:	e8 75 fc ff ff       	call   c00102a0 <VgaText::combineCharAndColour(char, unsigned char)>
c001062b:	83 c4 10             	add    esp,0x10
c001062e:	66 89 06             	mov    WORD PTR [esi],ax
c0010631:	39 1d a4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9a4,ebx
c0010637:	75 21                	jne    c001065a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010639:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001063c:	85 c0                	test   eax,eax
c001063e:	74 1a                	je     c001065a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010640:	52                   	push   edx
c0010641:	52                   	push   edx
c0010642:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010645:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010648:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001064c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010650:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010653:	51                   	push   ecx
c0010654:	53                   	push   ebx
c0010655:	ff d0                	call   eax
c0010657:	83 c4 20             	add    esp,0x20
c001065a:	83 c6 02             	add    esi,0x2
c001065d:	50                   	push   eax
c001065e:	50                   	push   eax
c001065f:	6a 00                	push   0x0
c0010661:	53                   	push   ebx
c0010662:	e8 7b fd ff ff       	call   c00103e2 <VgaText::incrementCursor(bool)>
c0010667:	83 c4 10             	add    esp,0x10
c001066a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001066e:	75 0d                	jne    c001067d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010670:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010675:	0f b7 f6             	movzx  esi,si
c0010678:	01 f6                	add    esi,esi
c001067a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001067d:	bd 01 00 00 00       	mov    ebp,0x1
c0010682:	47                   	inc    edi
c0010683:	e9 f8 fe ff ff       	jmp    c0010580 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010688:	83 ec 0c             	sub    esp,0xc
c001068b:	53                   	push   ebx
c001068c:	e8 59 fa ff ff       	call   c00100ea <VgaText::updateCursor()>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	89 e8                	mov    eax,ebp
c0010696:	84 c0                	test   al,al
c0010698:	74 0c                	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	53                   	push   ebx
c001069e:	e8 8d fe ff ff       	call   c0010530 <VgaText::doUpdate()>
c00106a3:	83 c4 10             	add    esp,0x10
c00106a6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106ad:	83 c4 1c             	add    esp,0x1c
c00106b0:	5b                   	pop    ebx
c00106b1:	5e                   	pop    esi
c00106b2:	5f                   	pop    edi
c00106b3:	5d                   	pop    ebp
c00106b4:	c3                   	ret    
c00106b5:	90                   	nop

c00106b6 <VgaText::clearScreen()>:
c00106b6:	57                   	push   edi
c00106b7:	56                   	push   esi
c00106b8:	31 f6                	xor    esi,esi
c00106ba:	53                   	push   ebx
c00106bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106bf:	52                   	push   edx
c00106c0:	6a 00                	push   0x0
c00106c2:	6a 00                	push   0x0
c00106c4:	53                   	push   ebx
c00106c5:	e8 54 fc ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c00106ca:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106d1:	83 c4 10             	add    esp,0x10
c00106d4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106d7:	7e 20                	jle    c00106f9 <VgaText::clearScreen()+0x43>
c00106d9:	31 ff                	xor    edi,edi
c00106db:	50                   	push   eax
c00106dc:	50                   	push   eax
c00106dd:	56                   	push   esi
c00106de:	57                   	push   edi
c00106df:	47                   	inc    edi
c00106e0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106e3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106e6:	6a 20                	push   0x20
c00106e8:	53                   	push   ebx
c00106e9:	e8 c4 fb ff ff       	call   c00102b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106ee:	83 c4 20             	add    esp,0x20
c00106f1:	83 ff 50             	cmp    edi,0x50
c00106f4:	75 e5                	jne    c00106db <VgaText::clearScreen()+0x25>
c00106f6:	46                   	inc    esi
c00106f7:	eb db                	jmp    c00106d4 <VgaText::clearScreen()+0x1e>
c00106f9:	83 ec 0c             	sub    esp,0xc
c00106fc:	53                   	push   ebx
c00106fd:	e8 2e fe ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010702:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010709:	83 c4 10             	add    esp,0x10
c001070c:	5b                   	pop    ebx
c001070d:	5e                   	pop    esi
c001070e:	5f                   	pop    edi
c001070f:	c3                   	ret    

c0010710 <VgaText::putchar(char)>:
c0010710:	56                   	push   esi
c0010711:	53                   	push   ebx
c0010712:	83 ec 14             	sub    esp,0x14
c0010715:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010719:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001071d:	3c 5b                	cmp    al,0x5b
c001071f:	75 18                	jne    c0010739 <VgaText::putchar(char)+0x29>
c0010721:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010725:	74 1f                	je     c0010746 <VgaText::putchar(char)+0x36>
c0010727:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001072d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010734:	e9 bd 00 00 00       	jmp    c00107f6 <VgaText::putchar(char)+0xe6>
c0010739:	3c 1b                	cmp    al,0x1b
c001073b:	75 09                	jne    c0010746 <VgaText::putchar(char)+0x36>
c001073d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010741:	e9 b0 00 00 00       	jmp    c00107f6 <VgaText::putchar(char)+0xe6>
c0010746:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010749:	84 c9                	test   cl,cl
c001074b:	0f 84 92 00 00 00    	je     c00107e3 <VgaText::putchar(char)+0xd3>
c0010751:	8d 50 c0             	lea    edx,[eax-0x40]
c0010754:	80 fa 3e             	cmp    dl,0x3e
c0010757:	77 76                	ja     c00107cf <VgaText::putchar(char)+0xbf>
c0010759:	3c 6d                	cmp    al,0x6d
c001075b:	75 47                	jne    c00107a4 <VgaText::putchar(char)+0x94>
c001075d:	31 f6                	xor    esi,esi
c001075f:	31 d2                	xor    edx,edx
c0010761:	31 c0                	xor    eax,eax
c0010763:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010766:	7e 2d                	jle    c0010795 <VgaText::putchar(char)+0x85>
c0010768:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001076d:	80 fa 3b             	cmp    dl,0x3b
c0010770:	75 17                	jne    c0010789 <VgaText::putchar(char)+0x79>
c0010772:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010776:	50                   	push   eax
c0010777:	53                   	push   ebx
c0010778:	e8 83 f9 ff ff       	call   c0010100 <VgaText::doANSI_SGR(int)>
c001077d:	59                   	pop    ecx
c001077e:	31 d2                	xor    edx,edx
c0010780:	58                   	pop    eax
c0010781:	31 c0                	xor    eax,eax
c0010783:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010787:	eb 09                	jmp    c0010792 <VgaText::putchar(char)+0x82>
c0010789:	6b c0 0a             	imul   eax,eax,0xa
c001078c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010790:	88 ca                	mov    dl,cl
c0010792:	46                   	inc    esi
c0010793:	eb ce                	jmp    c0010763 <VgaText::putchar(char)+0x53>
c0010795:	84 d2                	test   dl,dl
c0010797:	74 2e                	je     c00107c7 <VgaText::putchar(char)+0xb7>
c0010799:	50                   	push   eax
c001079a:	53                   	push   ebx
c001079b:	e8 60 f9 ff ff       	call   c0010100 <VgaText::doANSI_SGR(int)>
c00107a0:	58                   	pop    eax
c00107a1:	5a                   	pop    edx
c00107a2:	eb 23                	jmp    c00107c7 <VgaText::putchar(char)+0xb7>
c00107a4:	3c 4a                	cmp    al,0x4a
c00107a6:	75 1f                	jne    c00107c7 <VgaText::putchar(char)+0xb7>
c00107a8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ac:	75 19                	jne    c00107c7 <VgaText::putchar(char)+0xb7>
c00107ae:	83 ec 0c             	sub    esp,0xc
c00107b1:	53                   	push   ebx
c00107b2:	e8 ff fe ff ff       	call   c00106b6 <VgaText::clearScreen()>
c00107b7:	83 c4 0c             	add    esp,0xc
c00107ba:	6a 00                	push   0x0
c00107bc:	6a 00                	push   0x0
c00107be:	53                   	push   ebx
c00107bf:	e8 5a fb ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c00107c4:	83 c4 10             	add    esp,0x10
c00107c7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107cd:	eb 27                	jmp    c00107f6 <VgaText::putchar(char)+0xe6>
c00107cf:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107d2:	83 fa 0e             	cmp    edx,0xe
c00107d5:	7f 1f                	jg     c00107f6 <VgaText::putchar(char)+0xe6>
c00107d7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107da:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107dd:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107e1:	eb 13                	jmp    c00107f6 <VgaText::putchar(char)+0xe6>
c00107e3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107e6:	0f be c0             	movsx  eax,al
c00107e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107ec:	50                   	push   eax
c00107ed:	53                   	push   ebx
c00107ee:	e8 65 fc ff ff       	call   c0010458 <VgaText::putchar(char, VgaColour, VgaColour)>
c00107f3:	83 c4 10             	add    esp,0x10
c00107f6:	83 c4 14             	add    esp,0x14
c00107f9:	5b                   	pop    ebx
c00107fa:	5e                   	pop    esi
c00107fb:	c3                   	ret    

c00107fc <VgaText::putx(unsigned int)>:
c00107fc:	57                   	push   edi
c00107fd:	b9 11 00 00 00       	mov    ecx,0x11
c0010802:	56                   	push   esi
c0010803:	be de a0 02 c0       	mov    esi,0xc002a0de
c0010808:	53                   	push   ebx
c0010809:	83 ec 20             	sub    esp,0x20
c001080c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010810:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010814:	fc                   	cld    
c0010815:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010817:	be 08 00 00 00       	mov    esi,0x8
c001081c:	50                   	push   eax
c001081d:	50                   	push   eax
c001081e:	89 d8                	mov    eax,ebx
c0010820:	c1 e3 04             	shl    ebx,0x4
c0010823:	c1 e8 1c             	shr    eax,0x1c
c0010826:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001082b:	50                   	push   eax
c001082c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010830:	e8 db fe ff ff       	call   c0010710 <VgaText::putchar(char)>
c0010835:	83 c4 10             	add    esp,0x10
c0010838:	4e                   	dec    esi
c0010839:	75 e1                	jne    c001081c <VgaText::putx(unsigned int)+0x20>
c001083b:	83 c4 20             	add    esp,0x20
c001083e:	5b                   	pop    ebx
c001083f:	5e                   	pop    esi
c0010840:	5f                   	pop    edi
c0010841:	c3                   	ret    

c0010842 <VgaText::puts(char const*)>:
c0010842:	53                   	push   ebx
c0010843:	83 ec 08             	sub    esp,0x8
c0010846:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001084a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001084d:	84 c0                	test   al,al
c001084f:	74 12                	je     c0010863 <VgaText::puts(char const*)+0x21>
c0010851:	43                   	inc    ebx
c0010852:	51                   	push   ecx
c0010853:	51                   	push   ecx
c0010854:	50                   	push   eax
c0010855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010859:	e8 b2 fe ff ff       	call   c0010710 <VgaText::putchar(char)>
c001085e:	83 c4 10             	add    esp,0x10
c0010861:	eb e7                	jmp    c001084a <VgaText::puts(char const*)+0x8>
c0010863:	83 c4 08             	add    esp,0x8
c0010866:	5b                   	pop    ebx
c0010867:	c3                   	ret    

c0010868 <VgaText::VgaText(char const*)>:
c0010868:	57                   	push   edi
c0010869:	56                   	push   esi
c001086a:	53                   	push   ebx
c001086b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086f:	83 ec 08             	sub    esp,0x8
c0010872:	6a 00                	push   0x0
c0010874:	50                   	push   eax
c0010875:	e8 42 05 00 00       	call   c0010dbc <UnixFile::UnixFile(int)>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	ba 44 a1 02 c0       	mov    edx,0xc002a144
c0010882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010886:	89 10                	mov    DWORD PTR [eax],edx
c0010888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010897:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108de:	8d 50 60             	lea    edx,[eax+0x60]
c00108e1:	bb 80 d9 02 c0       	mov    ebx,0xc002d980
c00108e6:	b8 08 00 00 00       	mov    eax,0x8
c00108eb:	fc                   	cld    
c00108ec:	89 d7                	mov    edi,edx
c00108ee:	89 de                	mov    esi,ebx
c00108f0:	89 c1                	mov    ecx,eax
c00108f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	05 82 00 00 00       	add    eax,0x82
c00108fd:	83 ec 08             	sub    esp,0x8
c0010900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010904:	50                   	push   eax
c0010905:	e8 02 ff fe ff       	call   c000080c <strcpy>
c001090a:	83 c4 10             	add    esp,0x10
c001090d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010911:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010918:	83 ec 0c             	sub    esp,0xc
c001091b:	6a 01                	push   0x1
c001091d:	e8 dd 08 00 00       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0010922:	83 c4 10             	add    esp,0x10
c0010925:	89 c2                	mov    edx,eax
c0010927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001092e:	8b 1d 50 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da50
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001093b:	89 c6                	mov    esi,eax
c001093d:	e8 2f f0 ff ff       	call   c000f971 <Phys::allocatePage()>
c0010942:	6a 05                	push   0x5
c0010944:	56                   	push   esi
c0010945:	50                   	push   eax
c0010946:	53                   	push   ebx
c0010947:	e8 70 10 00 00       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001094c:	83 c4 10             	add    esp,0x10
c001094f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010953:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010956:	83 ec 04             	sub    esp,0x4
c0010959:	68 00 0f 00 00       	push   0xf00
c001095e:	6a 00                	push   0x0
c0010960:	50                   	push   eax
c0010961:	e8 ea fd fe ff       	call   c0000750 <memset>
c0010966:	83 c4 10             	add    esp,0x10
c0010969:	83 ec 04             	sub    esp,0x4
c001096c:	6a 00                	push   0x0
c001096e:	6a 07                	push   0x7
c0010970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010974:	e8 1b f8 ff ff       	call   c0010194 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	83 ec 04             	sub    esp,0x4
c001097f:	6a 00                	push   0x0
c0010981:	6a 00                	push   0x0
c0010983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010987:	e8 92 f9 ff ff       	call   c001031e <VgaText::setCursor(int, int)>
c001098c:	83 c4 10             	add    esp,0x10
c001098f:	83 ec 0c             	sub    esp,0xc
c0010992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010996:	e8 1b fd ff ff       	call   c00106b6 <VgaText::clearScreen()>
c001099b:	83 c4 10             	add    esp,0x10
c001099e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109aa:	05 02 01 00 00       	add    eax,0x102
c00109af:	83 ec 04             	sub    esp,0x4
c00109b2:	68 96 00 00 00       	push   0x96
c00109b7:	6a 00                	push   0x0
c00109b9:	50                   	push   eax
c00109ba:	e8 91 fd fe ff       	call   c0000750 <memset>
c00109bf:	83 c4 10             	add    esp,0x10
c00109c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c6:	05 98 01 00 00       	add    eax,0x198
c00109cb:	83 ec 04             	sub    esp,0x4
c00109ce:	68 2c 01 00 00       	push   0x12c
c00109d3:	6a 00                	push   0x0
c00109d5:	50                   	push   eax
c00109d6:	e8 75 fd fe ff       	call   c0000750 <memset>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	90                   	nop
c00109df:	5b                   	pop    ebx
c00109e0:	5e                   	pop    esi
c00109e1:	5f                   	pop    edi
c00109e2:	c3                   	ret    
c00109e3:	90                   	nop

c00109e4 <VgaText::receiveKey(unsigned char)>:
c00109e4:	55                   	push   ebp
c00109e5:	57                   	push   edi
c00109e6:	56                   	push   esi
c00109e7:	53                   	push   ebx
c00109e8:	83 ec 1c             	sub    esp,0x1c
c00109eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109f3:	84 db                	test   bl,bl
c00109f5:	0f 84 c9 00 00 00    	je     c0010ac4 <VgaText::receiveKey(unsigned char)+0xe0>
c00109fb:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a01:	80 fb 08             	cmp    bl,0x8
c0010a04:	75 2c                	jne    c0010a32 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a06:	83 ec 0c             	sub    esp,0xc
c0010a09:	57                   	push   edi
c0010a0a:	e8 5d fd fe ff       	call   c000076c <strlen>
c0010a0f:	83 c4 10             	add    esp,0x10
c0010a12:	85 c0                	test   eax,eax
c0010a14:	74 41                	je     c0010a57 <VgaText::receiveKey(unsigned char)+0x73>
c0010a16:	50                   	push   eax
c0010a17:	50                   	push   eax
c0010a18:	6a 08                	push   0x8
c0010a1a:	56                   	push   esi
c0010a1b:	e8 f0 fc ff ff       	call   c0010710 <VgaText::putchar(char)>
c0010a20:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a23:	e8 44 fd fe ff       	call   c000076c <strlen>
c0010a28:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a30:	eb 22                	jmp    c0010a54 <VgaText::receiveKey(unsigned char)+0x70>
c0010a32:	0f be c3             	movsx  eax,bl
c0010a35:	52                   	push   edx
c0010a36:	52                   	push   edx
c0010a37:	50                   	push   eax
c0010a38:	56                   	push   esi
c0010a39:	e8 d2 fc ff ff       	call   c0010710 <VgaText::putchar(char)>
c0010a3e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a42:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a47:	59                   	pop    ecx
c0010a48:	5d                   	pop    ebp
c0010a49:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a4d:	50                   	push   eax
c0010a4e:	57                   	push   edi
c0010a4f:	e8 f8 fe fe ff       	call   c000094c <strcat>
c0010a54:	83 c4 10             	add    esp,0x10
c0010a57:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a5e:	75 05                	jne    c0010a65 <VgaText::receiveKey(unsigned char)+0x81>
c0010a60:	80 fb 0a             	cmp    bl,0xa
c0010a63:	75 53                	jne    c0010ab8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a65:	83 ec 0c             	sub    esp,0xc
c0010a68:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a6e:	53                   	push   ebx
c0010a6f:	e8 f8 fc fe ff       	call   c000076c <strlen>
c0010a74:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a77:	89 c5                	mov    ebp,eax
c0010a79:	e8 ee fc fe ff       	call   c000076c <strlen>
c0010a7e:	83 c4 10             	add    esp,0x10
c0010a81:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a85:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a8a:	76 10                	jbe    c0010a9c <VgaText::receiveKey(unsigned char)+0xb8>
c0010a8c:	83 ec 0c             	sub    esp,0xc
c0010a8f:	68 ef a0 02 c0       	push   0xc002a0ef
c0010a94:	e8 7e 93 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	50                   	push   eax
c0010a9d:	50                   	push   eax
c0010a9e:	57                   	push   edi
c0010a9f:	53                   	push   ebx
c0010aa0:	e8 a7 fe fe ff       	call   c000094c <strcat>
c0010aa5:	83 c4 0c             	add    esp,0xc
c0010aa8:	68 96 00 00 00       	push   0x96
c0010aad:	6a 00                	push   0x0
c0010aaf:	57                   	push   edi
c0010ab0:	e8 9b fc fe ff       	call   c0000750 <memset>
c0010ab5:	83 c4 10             	add    esp,0x10
c0010ab8:	83 ec 0c             	sub    esp,0xc
c0010abb:	56                   	push   esi
c0010abc:	e8 6f fa ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010ac1:	83 c4 10             	add    esp,0x10
c0010ac4:	83 c4 1c             	add    esp,0x1c
c0010ac7:	5b                   	pop    ebx
c0010ac8:	5e                   	pop    esi
c0010ac9:	5f                   	pop    edi
c0010aca:	5d                   	pop    ebp
c0010acb:	c3                   	ret    

c0010acc <VgaText::write(unsigned long long, void*, int*)>:
c0010acc:	55                   	push   ebp
c0010acd:	57                   	push   edi
c0010ace:	56                   	push   esi
c0010acf:	53                   	push   ebx
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010ae9:	39 eb                	cmp    ebx,ebp
c0010aeb:	74 13                	je     c0010b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010aed:	43                   	inc    ebx
c0010aee:	50                   	push   eax
c0010aef:	50                   	push   eax
c0010af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010af4:	50                   	push   eax
c0010af5:	56                   	push   esi
c0010af6:	e8 15 fc ff ff       	call   c0010710 <VgaText::putchar(char)>
c0010afb:	83 c4 10             	add    esp,0x10
c0010afe:	eb e9                	jmp    c0010ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b00:	83 ec 0c             	sub    esp,0xc
c0010b03:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b0a:	56                   	push   esi
c0010b0b:	e8 20 fa ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010b10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b14:	89 38                	mov    DWORD PTR [eax],edi
c0010b16:	83 c4 1c             	add    esp,0x1c
c0010b19:	31 c0                	xor    eax,eax
c0010b1b:	5b                   	pop    ebx
c0010b1c:	5e                   	pop    esi
c0010b1d:	5f                   	pop    edi
c0010b1e:	5d                   	pop    ebp
c0010b1f:	c3                   	ret    

c0010b20 <newTerminal(char*)>:
c0010b20:	83 ec 28             	sub    esp,0x28
c0010b23:	68 c4 02 00 00       	push   0x2c4
c0010b28:	e8 6c ea ff ff       	call   c000f599 <malloc>
c0010b2d:	5a                   	pop    edx
c0010b2e:	59                   	pop    ecx
c0010b2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b33:	50                   	push   eax
c0010b34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b38:	e8 2b fd ff ff       	call   c0010868 <VgaText::VgaText(char const*)>
c0010b3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b41:	83 c4 2c             	add    esp,0x2c
c0010b44:	c3                   	ret    
c0010b45:	90                   	nop

c0010b46 <TSS::TSS()>:
c0010b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b51:	90                   	nop
c0010b52:	c3                   	ret    
c0010b53:	90                   	nop

c0010b54 <TSS::setESP(unsigned long)>:
c0010b54:	55                   	push   ebp
c0010b55:	89 e5                	mov    ebp,esp
c0010b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b63:	90                   	nop
c0010b64:	5d                   	pop    ebp
c0010b65:	c3                   	ret    

c0010b66 <TSS::flush()>:
c0010b66:	55                   	push   ebp
c0010b67:	89 e5                	mov    ebp,esp
c0010b69:	83 ec 10             	sub    esp,0x10
c0010b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b71:	83 c8 03             	or     eax,0x3
c0010b74:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b78:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b7c:	66 89 d0             	mov    ax,dx
c0010b7f:	0f 00 d8             	ltr    ax
c0010b82:	90                   	nop
c0010b83:	c9                   	leave  
c0010b84:	c3                   	ret    
c0010b85:	90                   	nop

c0010b86 <TSS::setup(unsigned long, unsigned long)>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 18             	sub    esp,0x18
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	6a 68                	push   0x68
c0010b91:	e8 03 ea ff ff       	call   c000f599 <malloc>
c0010b96:	83 c4 10             	add    esp,0x10
c0010b99:	89 c2                	mov    edx,eax
c0010b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b9e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba7:	83 ec 04             	sub    esp,0x4
c0010baa:	6a 68                	push   0x68
c0010bac:	6a 00                	push   0x0
c0010bae:	50                   	push   eax
c0010baf:	e8 9c fb fe ff       	call   c0000750 <memset>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bed:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c05:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c11:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c1d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c29:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c35:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c38:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c41:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c4e:	0f 20 da             	mov    edx,cr3
c0010c51:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c54:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c57:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c60:	83 ec 08             	sub    esp,0x8
c0010c63:	50                   	push   eax
c0010c64:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c67:	50                   	push   eax
c0010c68:	e8 25 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	83 ec 08             	sub    esp,0x8
c0010c73:	6a 68                	push   0x68
c0010c75:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c78:	50                   	push   eax
c0010c79:	e8 30 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c7e:	83 c4 10             	add    esp,0x10
c0010c81:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c85:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c88:	83 e0 0f             	and    eax,0xf
c0010c8b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c8e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c91:	83 c8 40             	or     eax,0x40
c0010c94:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c97:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0010c9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ca2:	05 78 01 00 00       	add    eax,0x178
c0010ca7:	83 ec 04             	sub    esp,0x4
c0010caa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010cad:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cb0:	50                   	push   eax
c0010cb1:	e8 2c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cb6:	83 c4 10             	add    esp,0x10
c0010cb9:	89 c2                	mov    edx,eax
c0010cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbe:	89 10                	mov    DWORD PTR [eax],edx
c0010cc0:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0010cc5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ccb:	05 78 01 00 00       	add    eax,0x178
c0010cd0:	83 ec 0c             	sub    esp,0xc
c0010cd3:	50                   	push   eax
c0010cd4:	e8 33 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cd9:	83 c4 10             	add    esp,0x10
c0010cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ce1:	c9                   	leave  
c0010ce2:	c3                   	ret    
c0010ce3:	90                   	nop

c0010ce4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010cec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cef:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010cf4:	75 08                	jne    c0010cfe <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010cf6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010cfc:	eb 38                	jmp    c0010d36 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010cfe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d03:	75 17                	jne    c0010d1c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d0a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d0d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d13:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d19:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d1c:	89 c1                	mov    ecx,eax
c0010d1e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d21:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d27:	74 cd                	je     c0010cf6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d29:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d2e:	83 e0 ef             	and    eax,0xffffffef
c0010d31:	83 f8 08             	cmp    eax,0x8
c0010d34:	76 c0                	jbe    c0010cf6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d36:	31 c0                	xor    eax,eax
c0010d38:	c3                   	ret    
c0010d39:	90                   	nop

c0010d3a <ReservedFilename::isAtty()>:
c0010d3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d3e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d41:	31 c0                	xor    eax,eax
c0010d43:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d49:	74 09                	je     c0010d54 <ReservedFilename::isAtty()+0x1a>
c0010d4b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d51:	0f 94 c0             	sete   al
c0010d54:	c3                   	ret    
c0010d55:	90                   	nop

c0010d56 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d65:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d6a:	75 08                	jne    c0010d74 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d6c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d72:	eb 3d                	jmp    c0010db1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d74:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d79:	75 17                	jne    c0010d92 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d83:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d89:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d8f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d92:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d97:	75 04                	jne    c0010d9d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d99:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d9b:	eb 14                	jmp    c0010db1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d9d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010da2:	74 c8                	je     c0010d6c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010da4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010da9:	83 e0 ef             	and    eax,0xffffffef
c0010dac:	83 f8 08             	cmp    eax,0x8
c0010daf:	76 bb                	jbe    c0010d6c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010db1:	31 c0                	xor    eax,eax
c0010db3:	c3                   	ret    

c0010db4 <UnixFile::getFileDescriptor()>:
c0010db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010db8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dbb:	c3                   	ret    

c0010dbc <UnixFile::UnixFile(int)>:
c0010dbc:	53                   	push   ebx
c0010dbd:	83 ec 28             	sub    esp,0x28
c0010dc0:	ba 0c a2 02 c0       	mov    edx,0xc002a20c
c0010dc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dc9:	89 10                	mov    DWORD PTR [eax],edx
c0010dcb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010dd3:	0f 8f 8c 01 00 00    	jg     c0010f65 <UnixFile::UnixFile(int)+0x1a9>
c0010dd9:	a1 80 c8 02 c0       	mov    eax,ds:0xc002c880
c0010dde:	8d 50 01             	lea    edx,[eax+0x1]
c0010de1:	89 15 80 c8 02 c0    	mov    DWORD PTR ds:0xc002c880,edx
c0010de7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010deb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dee:	83 ec 08             	sub    esp,0x8
c0010df1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010df5:	68 38 da 02 c0       	push   0xc002da38
c0010dfa:	e8 57 76 01 00       	call   c0028456 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	a0 34 da 02 c0       	mov    al,ds:0xc002da34
c0010e07:	83 f0 01             	xor    eax,0x1
c0010e0a:	84 c0                	test   al,al
c0010e0c:	0f 84 54 01 00 00    	je     c0010f66 <UnixFile::UnixFile(int)+0x1aa>
c0010e12:	c6 05 34 da 02 c0 01 	mov    BYTE PTR ds:0xc002da34,0x1
c0010e19:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e21:	83 ec 0c             	sub    esp,0xc
c0010e24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e28:	e8 6c e7 ff ff       	call   c000f599 <malloc>
c0010e2d:	83 c4 10             	add    esp,0x10
c0010e30:	89 c3                	mov    ebx,eax
c0010e32:	83 ec 08             	sub    esp,0x8
c0010e35:	68 03 ff ff 0f       	push   0xfffff03
c0010e3a:	53                   	push   ebx
c0010e3b:	e8 2c 01 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010e40:	83 c4 10             	add    esp,0x10
c0010e43:	89 1d 2c da 02 c0    	mov    DWORD PTR ds:0xc002da2c,ebx
c0010e49:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e51:	83 ec 0c             	sub    esp,0xc
c0010e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e58:	e8 3c e7 ff ff       	call   c000f599 <malloc>
c0010e5d:	83 c4 10             	add    esp,0x10
c0010e60:	89 c3                	mov    ebx,eax
c0010e62:	83 ec 08             	sub    esp,0x8
c0010e65:	68 01 ff ff 0f       	push   0xfffff01
c0010e6a:	53                   	push   ebx
c0010e6b:	e8 fc 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010e70:	83 c4 10             	add    esp,0x10
c0010e73:	89 1d 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,ebx
c0010e79:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e81:	83 ec 0c             	sub    esp,0xc
c0010e84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e88:	e8 0c e7 ff ff       	call   c000f599 <malloc>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	89 c3                	mov    ebx,eax
c0010e92:	83 ec 08             	sub    esp,0x8
c0010e95:	68 00 ff ff 0f       	push   0xfffff00
c0010e9a:	53                   	push   ebx
c0010e9b:	e8 cc 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010ea0:	83 c4 10             	add    esp,0x10
c0010ea3:	89 1d 24 da 02 c0    	mov    DWORD PTR ds:0xc002da24,ebx
c0010ea9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010eb1:	83 ec 0c             	sub    esp,0xc
c0010eb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010eb8:	e8 dc e6 ff ff       	call   c000f599 <malloc>
c0010ebd:	83 c4 10             	add    esp,0x10
c0010ec0:	89 c3                	mov    ebx,eax
c0010ec2:	83 ec 08             	sub    esp,0x8
c0010ec5:	68 02 ff ff 0f       	push   0xfffff02
c0010eca:	53                   	push   ebx
c0010ecb:	e8 9c 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010ed0:	83 c4 10             	add    esp,0x10
c0010ed3:	89 1d 28 da 02 c0    	mov    DWORD PTR ds:0xc002da28,ebx
c0010ed9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010ee1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010ee6:	7f 7e                	jg     c0010f66 <UnixFile::UnixFile(int)+0x1aa>
c0010ee8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ef7:	e8 9d e6 ff ff       	call   c000f599 <malloc>
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	89 c3                	mov    ebx,eax
c0010f01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f05:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f0a:	83 ec 08             	sub    esp,0x8
c0010f0d:	50                   	push   eax
c0010f0e:	53                   	push   ebx
c0010f0f:	e8 58 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010f14:	83 c4 10             	add    esp,0x10
c0010f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1b:	89 1c 85 00 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2600],ebx
c0010f22:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f2a:	83 ec 0c             	sub    esp,0xc
c0010f2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f31:	e8 63 e6 ff ff       	call   c000f599 <malloc>
c0010f36:	83 c4 10             	add    esp,0x10
c0010f39:	89 c3                	mov    ebx,eax
c0010f3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f44:	83 ec 08             	sub    esp,0x8
c0010f47:	50                   	push   eax
c0010f48:	53                   	push   ebx
c0010f49:	e8 1e 00 00 00       	call   c0010f6c <ReservedFilename::ReservedFilename(int)>
c0010f4e:	83 c4 10             	add    esp,0x10
c0010f51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f55:	89 1c 85 c0 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2640],ebx
c0010f5c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f60:	e9 7c ff ff ff       	jmp    c0010ee1 <UnixFile::UnixFile(int)+0x125>
c0010f65:	90                   	nop
c0010f66:	83 c4 28             	add    esp,0x28
c0010f69:	5b                   	pop    ebx
c0010f6a:	c3                   	ret    
c0010f6b:	90                   	nop

c0010f6c <ReservedFilename::ReservedFilename(int)>:
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f73:	83 ec 08             	sub    esp,0x8
c0010f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7a:	50                   	push   eax
c0010f7b:	e8 3c fe ff ff       	call   c0010dbc <UnixFile::UnixFile(int)>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	ba 28 a2 02 c0       	mov    edx,0xc002a228
c0010f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8c:	89 10                	mov    DWORD PTR [eax],edx
c0010f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f96:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f99:	90                   	nop
c0010f9a:	83 c4 0c             	add    esp,0xc
c0010f9d:	c3                   	ret    

c0010f9e <UnixFile::~UnixFile()>:
c0010f9e:	83 ec 1c             	sub    esp,0x1c
c0010fa1:	ba 0c a2 02 c0       	mov    edx,0xc002a20c
c0010fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010faa:	89 10                	mov    DWORD PTR [eax],edx
c0010fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fb8:	7f 73                	jg     c001102d <UnixFile::~UnixFile()+0x8f>
c0010fba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fc2:	83 ec 0c             	sub    esp,0xc
c0010fc5:	68 38 da 02 c0       	push   0xc002da38
c0010fca:	e8 5b 75 01 00       	call   c002852a <LinkedList<UnixFile>::getFirstElement()>
c0010fcf:	83 c4 10             	add    esp,0x10
c0010fd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	68 38 da 02 c0       	push   0xc002da38
c0010fde:	e8 4f 75 01 00       	call   c0028532 <LinkedList<UnixFile>::removeFirst()>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fea:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010fee:	74 40                	je     c0011030 <UnixFile::~UnixFile()+0x92>
c0010ff0:	83 ec 08             	sub    esp,0x8
c0010ff3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ff7:	68 38 da 02 c0       	push   0xc002da38
c0010ffc:	e8 55 74 01 00       	call   c0028456 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011008:	8d 50 01             	lea    edx,[eax+0x1]
c001100b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001100f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011014:	0f 94 c0             	sete   al
c0011017:	84 c0                	test   al,al
c0011019:	74 a7                	je     c0010fc2 <UnixFile::~UnixFile()+0x24>
c001101b:	83 ec 0c             	sub    esp,0xc
c001101e:	68 e4 a1 02 c0       	push   0xc002a1e4
c0011023:	e8 ef 8d 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0011028:	83 c4 10             	add    esp,0x10
c001102b:	eb 95                	jmp    c0010fc2 <UnixFile::~UnixFile()+0x24>
c001102d:	90                   	nop
c001102e:	eb 01                	jmp    c0011031 <UnixFile::~UnixFile()+0x93>
c0011030:	90                   	nop
c0011031:	90                   	nop
c0011032:	83 c4 1c             	add    esp,0x1c
c0011035:	c3                   	ret    

c0011036 <UnixFile::~UnixFile()>:
c0011036:	83 ec 0c             	sub    esp,0xc
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011040:	e8 59 ff ff ff       	call   c0010f9e <UnixFile::~UnixFile()>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	83 ec 08             	sub    esp,0x8
c001104b:	6a 0c                	push   0xc
c001104d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011051:	e8 7d 15 00 00       	call   c00125d3 <operator delete(void*, unsigned long)>
c0011056:	83 c4 10             	add    esp,0x10
c0011059:	83 c4 0c             	add    esp,0xc
c001105c:	c3                   	ret    
c001105d:	90                   	nop

c001105e <ReservedFilename::~ReservedFilename()>:
c001105e:	83 ec 0c             	sub    esp,0xc
c0011061:	ba 28 a2 02 c0       	mov    edx,0xc002a228
c0011066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106a:	89 10                	mov    DWORD PTR [eax],edx
c001106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	50                   	push   eax
c0011074:	e8 25 ff ff ff       	call   c0010f9e <UnixFile::~UnixFile()>
c0011079:	83 c4 10             	add    esp,0x10
c001107c:	90                   	nop
c001107d:	83 c4 0c             	add    esp,0xc
c0011080:	c3                   	ret    
c0011081:	90                   	nop

c0011082 <ReservedFilename::~ReservedFilename()>:
c0011082:	83 ec 0c             	sub    esp,0xc
c0011085:	83 ec 0c             	sub    esp,0xc
c0011088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001108c:	e8 cd ff ff ff       	call   c001105e <ReservedFilename::~ReservedFilename()>
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	83 ec 08             	sub    esp,0x8
c0011097:	6a 0c                	push   0xc
c0011099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001109d:	e8 31 15 00 00       	call   c00125d3 <operator delete(void*, unsigned long)>
c00110a2:	83 c4 10             	add    esp,0x10
c00110a5:	83 c4 0c             	add    esp,0xc
c00110a8:	c3                   	ret    

c00110a9 <getFromFileDescriptor(int)>:
c00110a9:	53                   	push   ebx
c00110aa:	83 ec 08             	sub    esp,0x8
c00110ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110b1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110b7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110bd:	7f 2c                	jg     c00110eb <getFromFileDescriptor(int)+0x42>
c00110bf:	83 ec 0c             	sub    esp,0xc
c00110c2:	68 38 da 02 c0       	push   0xc002da38
c00110c7:	e8 5e 74 01 00       	call   c002852a <LinkedList<UnixFile>::getFirstElement()>
c00110cc:	83 c4 10             	add    esp,0x10
c00110cf:	85 c0                	test   eax,eax
c00110d1:	75 04                	jne    c00110d7 <getFromFileDescriptor(int)+0x2e>
c00110d3:	31 c0                	xor    eax,eax
c00110d5:	eb 6e                	jmp    c0011145 <getFromFileDescriptor(int)+0x9c>
c00110d7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110da:	74 69                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c00110dc:	52                   	push   edx
c00110dd:	52                   	push   edx
c00110de:	50                   	push   eax
c00110df:	68 38 da 02 c0       	push   0xc002da38
c00110e4:	e8 eb 74 01 00       	call   c00285d4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00110e9:	eb e1                	jmp    c00110cc <getFromFileDescriptor(int)+0x23>
c00110eb:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00110f0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110f6:	74 4d                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c00110f8:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00110fd:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011103:	74 40                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c0011105:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c001110a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011110:	74 33                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c0011112:	a1 24 da 02 c0       	mov    eax,ds:0xc002da24
c0011117:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001111d:	74 26                	je     c0011145 <getFromFileDescriptor(int)+0x9c>
c001111f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011125:	83 f8 08             	cmp    eax,0x8
c0011128:	77 09                	ja     c0011133 <getFromFileDescriptor(int)+0x8a>
c001112a:	8b 04 85 00 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2600]
c0011131:	eb 12                	jmp    c0011145 <getFromFileDescriptor(int)+0x9c>
c0011133:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011139:	83 fb 08             	cmp    ebx,0x8
c001113c:	77 95                	ja     c00110d3 <getFromFileDescriptor(int)+0x2a>
c001113e:	8b 04 9d c0 d9 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2640]
c0011145:	83 c4 08             	add    esp,0x8
c0011148:	5b                   	pop    ebx
c0011149:	c3                   	ret    

c001114a <__static_initialization_and_destruction_0(int, int)>:
c001114a:	83 ec 0c             	sub    esp,0xc
c001114d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011152:	75 34                	jne    c0011188 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011154:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001115c:	75 2a                	jne    c0011188 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001115e:	83 ec 0c             	sub    esp,0xc
c0011161:	68 38 da 02 c0       	push   0xc002da38
c0011166:	e8 a9 72 01 00       	call   c0028414 <LinkedList<UnixFile>::LinkedList()>
c001116b:	83 c4 10             	add    esp,0x10
c001116e:	83 ec 04             	sub    esp,0x4
c0011171:	68 b8 c6 02 c0       	push   0xc002c6b8
c0011176:	68 38 da 02 c0       	push   0xc002da38
c001117b:	68 12 84 02 c0       	push   0xc0028412
c0011180:	e8 c8 13 00 00       	call   c001254d <__cxa_atexit>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	90                   	nop
c0011189:	83 c4 0c             	add    esp,0xc
c001118c:	c3                   	ret    

c001118d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001118d:	83 ec 0c             	sub    esp,0xc
c0011190:	83 ec 08             	sub    esp,0x8
c0011193:	68 ff ff 00 00       	push   0xffff
c0011198:	6a 01                	push   0x1
c001119a:	e8 ab ff ff ff       	call   c001114a <__static_initialization_and_destruction_0(int, int)>
c001119f:	83 c4 10             	add    esp,0x10
c00111a2:	83 c4 0c             	add    esp,0xc
c00111a5:	c3                   	ret    

c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111a6:	53                   	push   ebx
c00111a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111af:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111b5:	89 c8                	mov    eax,ecx
c00111b7:	d1 e8                	shr    eax,1
c00111b9:	03 05 88 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c888
c00111bf:	83 e1 01             	and    ecx,0x1
c00111c2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111c4:	75 09                	jne    c00111cf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111c6:	83 e2 f0             	and    edx,0xfffffff0
c00111c9:	09 da                	or     edx,ebx
c00111cb:	88 10                	mov    BYTE PTR [eax],dl
c00111cd:	5b                   	pop    ebx
c00111ce:	c3                   	ret    
c00111cf:	c1 e3 04             	shl    ebx,0x4
c00111d2:	83 e2 0f             	and    edx,0xf
c00111d5:	09 da                	or     edx,ebx
c00111d7:	88 10                	mov    BYTE PTR [eax],dl
c00111d9:	5b                   	pop    ebx
c00111da:	c3                   	ret    

c00111db <Virt::getPageState(unsigned long)>:
c00111db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111df:	8b 0d 88 c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c888
c00111e5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111eb:	89 d0                	mov    eax,edx
c00111ed:	d1 e8                	shr    eax,1
c00111ef:	83 e2 01             	and    edx,0x1
c00111f2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111f5:	75 04                	jne    c00111fb <Virt::getPageState(unsigned long)+0x20>
c00111f7:	83 e0 0f             	and    eax,0xf
c00111fa:	c3                   	ret    
c00111fb:	c0 e8 04             	shr    al,0x4
c00111fe:	c3                   	ret    

c00111ff <Virt::allocateKernelVirtualPages(int)>:
c00111ff:	55                   	push   ebp
c0011200:	31 ed                	xor    ebp,ebp
c0011202:	57                   	push   edi
c0011203:	56                   	push   esi
c0011204:	53                   	push   ebx
c0011205:	31 db                	xor    ebx,ebx
c0011207:	83 ec 1c             	sub    esp,0x1c
c001120a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001120e:	8b 3d 84 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c884
c0011214:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011219:	57                   	push   edi
c001121a:	e8 bc ff ff ff       	call   c00111db <Virt::getPageState(unsigned long)>
c001121f:	5a                   	pop    edx
c0011220:	84 c0                	test   al,al
c0011222:	75 3a                	jne    c001125e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011224:	85 db                	test   ebx,ebx
c0011226:	75 02                	jne    c001122a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011228:	89 fd                	mov    ebp,edi
c001122a:	43                   	inc    ebx
c001122b:	39 f3                	cmp    ebx,esi
c001122d:	74 5a                	je     c0011289 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001122f:	47                   	inc    edi
c0011230:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011236:	76 31                	jbe    c0011269 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011238:	c7 05 84 c8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c884,0xc8000
c0011242:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011247:	75 28                	jne    c0011271 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011249:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001124e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011253:	57                   	push   edi
c0011254:	e8 82 ff ff ff       	call   c00111db <Virt::getPageState(unsigned long)>
c0011259:	5a                   	pop    edx
c001125a:	84 c0                	test   al,al
c001125c:	74 c6                	je     c0011224 <Virt::allocateKernelVirtualPages(int)+0x25>
c001125e:	31 db                	xor    ebx,ebx
c0011260:	47                   	inc    edi
c0011261:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011267:	77 cf                	ja     c0011238 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011269:	89 3d 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,edi
c001126f:	eb a8                	jmp    c0011219 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	68 3c a2 02 c0       	push   0xc002a23c
c0011279:	e8 99 8b 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c001127e:	8b 3d 84 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c884
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	eb 90                	jmp    c0011219 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011289:	89 2d 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,ebp
c001128f:	4b                   	dec    ebx
c0011290:	74 5f                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011292:	85 f6                	test   esi,esi
c0011294:	74 3d                	je     c00112d3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011296:	89 e8                	mov    eax,ebp
c0011298:	31 db                	xor    ebx,ebx
c001129a:	8d 7e ff             	lea    edi,[esi-0x1]
c001129d:	eb 14                	jmp    c00112b3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001129f:	6a 01                	push   0x1
c00112a1:	43                   	inc    ebx
c00112a2:	50                   	push   eax
c00112a3:	e8 fe fe ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112a8:	58                   	pop    eax
c00112a9:	39 f3                	cmp    ebx,esi
c00112ab:	5a                   	pop    edx
c00112ac:	74 25                	je     c00112d3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ae:	a1 84 c8 02 c0       	mov    eax,ds:0xc002c884
c00112b3:	8d 50 01             	lea    edx,[eax+0x1]
c00112b6:	85 db                	test   ebx,ebx
c00112b8:	89 15 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,edx
c00112be:	74 20                	je     c00112e0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112c0:	39 df                	cmp    edi,ebx
c00112c2:	75 db                	jne    c001129f <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112c4:	6a 03                	push   0x3
c00112c6:	43                   	inc    ebx
c00112c7:	50                   	push   eax
c00112c8:	e8 d9 fe ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112cd:	59                   	pop    ecx
c00112ce:	39 f3                	cmp    ebx,esi
c00112d0:	58                   	pop    eax
c00112d1:	75 db                	jne    c00112ae <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112d3:	83 c4 1c             	add    esp,0x1c
c00112d6:	89 e8                	mov    eax,ebp
c00112d8:	5b                   	pop    ebx
c00112d9:	c1 e0 0c             	shl    eax,0xc
c00112dc:	5e                   	pop    esi
c00112dd:	5f                   	pop    edi
c00112de:	5d                   	pop    ebp
c00112df:	c3                   	ret    
c00112e0:	6a 02                	push   0x2
c00112e2:	bb 01 00 00 00       	mov    ebx,0x1
c00112e7:	50                   	push   eax
c00112e8:	e8 b9 fe ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	58                   	pop    eax
c00112ee:	5a                   	pop    edx
c00112ef:	eb bd                	jmp    c00112ae <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f1:	6a 04                	push   0x4
c00112f3:	8d 45 01             	lea    eax,[ebp+0x1]
c00112f6:	55                   	push   ebp
c00112f7:	a3 84 c8 02 c0       	mov    ds:0xc002c884,eax
c00112fc:	e8 a5 fe ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011301:	59                   	pop    ecx
c0011302:	89 e8                	mov    eax,ebp
c0011304:	5b                   	pop    ebx
c0011305:	c1 e0 0c             	shl    eax,0xc
c0011308:	83 c4 1c             	add    esp,0x1c
c001130b:	5b                   	pop    ebx
c001130c:	5e                   	pop    esi
c001130d:	5f                   	pop    edi
c001130e:	5d                   	pop    ebp
c001130f:	c3                   	ret    

c0011310 <Virt::freeSwapfilePage(unsigned long)>:
c0011310:	53                   	push   ebx
c0011311:	8b 15 4c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da4c
c0011317:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001131b:	b8 01 00 00 00       	mov    eax,0x1
c0011320:	89 cb                	mov    ebx,ecx
c0011322:	d3 e0                	shl    eax,cl
c0011324:	c1 eb 05             	shr    ebx,0x5
c0011327:	f7 d0                	not    eax
c0011329:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001132c:	5b                   	pop    ebx
c001132d:	c3                   	ret    

c001132e <Virt::swapIDToSector(unsigned long)>:
c001132e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011332:	0f af 05 8c c8 02 c0 	imul   eax,DWORD PTR ds:0xc002c88c
c0011339:	03 05 94 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c894
c001133f:	c3                   	ret    

c0011340 <Virt::allocateSwapfilePage()>:
c0011340:	55                   	push   ebp
c0011341:	31 d2                	xor    edx,edx
c0011343:	57                   	push   edi
c0011344:	56                   	push   esi
c0011345:	53                   	push   ebx
c0011346:	83 ec 0c             	sub    esp,0xc
c0011349:	8b 0d 8c c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c88c
c001134f:	a1 90 c8 02 c0       	mov    eax,ds:0xc002c890
c0011354:	f7 f1                	div    ecx
c0011356:	39 0d 90 c8 02 c0    	cmp    DWORD PTR ds:0xc002c890,ecx
c001135c:	72 2d                	jb     c001138b <Virt::allocateSwapfilePage()+0x4b>
c001135e:	8b 35 4c da 02 c0    	mov    esi,DWORD PTR ds:0xc002da4c
c0011364:	8b 16                	mov    edx,DWORD PTR [esi]
c0011366:	f6 c2 01             	test   dl,0x1
c0011369:	74 3c                	je     c00113a7 <Virt::allocateSwapfilePage()+0x67>
c001136b:	31 c9                	xor    ecx,ecx
c001136d:	bf 01 00 00 00       	mov    edi,0x1
c0011372:	eb 12                	jmp    c0011386 <Virt::allocateSwapfilePage()+0x46>
c0011374:	89 fd                	mov    ebp,edi
c0011376:	89 ca                	mov    edx,ecx
c0011378:	d3 e5                	shl    ebp,cl
c001137a:	c1 ea 05             	shr    edx,0x5
c001137d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011380:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011382:	85 ea                	test   edx,ebp
c0011384:	74 2a                	je     c00113b0 <Virt::allocateSwapfilePage()+0x70>
c0011386:	41                   	inc    ecx
c0011387:	39 c8                	cmp    eax,ecx
c0011389:	77 e9                	ja     c0011374 <Virt::allocateSwapfilePage()+0x34>
c001138b:	83 ec 0c             	sub    esp,0xc
c001138e:	68 f4 a3 02 c0       	push   0xc002a3f4
c0011393:	e8 7f 8a 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	31 c9                	xor    ecx,ecx
c001139d:	83 c4 0c             	add    esp,0xc
c00113a0:	89 c8                	mov    eax,ecx
c00113a2:	5b                   	pop    ebx
c00113a3:	5e                   	pop    esi
c00113a4:	5f                   	pop    edi
c00113a5:	5d                   	pop    ebp
c00113a6:	c3                   	ret    
c00113a7:	89 f3                	mov    ebx,esi
c00113a9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ae:	31 c9                	xor    ecx,ecx
c00113b0:	09 ea                	or     edx,ebp
c00113b2:	89 c8                	mov    eax,ecx
c00113b4:	89 13                	mov    DWORD PTR [ebx],edx
c00113b6:	83 c4 0c             	add    esp,0xc
c00113b9:	5b                   	pop    ebx
c00113ba:	5e                   	pop    esi
c00113bb:	5f                   	pop    edi
c00113bc:	5d                   	pop    ebp
c00113bd:	c3                   	ret    

c00113be <Virt::virtualMemorySetup()>:
c00113be:	53                   	push   ebx
c00113bf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113c4:	6a 0f                	push   0xf
c00113c6:	53                   	push   ebx
c00113c7:	43                   	inc    ebx
c00113c8:	e8 d9 fd ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113cd:	58                   	pop    eax
c00113ce:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113d4:	5a                   	pop    edx
c00113d5:	75 ed                	jne    c00113c4 <Virt::virtualMemorySetup()+0x6>
c00113d7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113dc:	6a 00                	push   0x0
c00113de:	53                   	push   ebx
c00113df:	43                   	inc    ebx
c00113e0:	e8 c1 fd ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e5:	59                   	pop    ecx
c00113e6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ec:	58                   	pop    eax
c00113ed:	75 ed                	jne    c00113dc <Virt::virtualMemorySetup()+0x1e>
c00113ef:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f4:	6a 0f                	push   0xf
c00113f6:	53                   	push   ebx
c00113f7:	43                   	inc    ebx
c00113f8:	e8 a9 fd ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113fd:	58                   	pop    eax
c00113fe:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011404:	5a                   	pop    edx
c0011405:	75 ed                	jne    c00113f4 <Virt::virtualMemorySetup()+0x36>
c0011407:	5b                   	pop    ebx
c0011408:	c3                   	ret    

c0011409 <Virt::setupPageSwapping(int)>:
c0011409:	57                   	push   edi
c001140a:	56                   	push   esi
c001140b:	53                   	push   ebx
c001140c:	83 ec 1c             	sub    esp,0x1c
c001140f:	68 14 01 00 00       	push   0x114
c0011414:	e8 80 e1 ff ff       	call   c000f599 <malloc>
c0011419:	83 c4 0c             	add    esp,0xc
c001141c:	89 c6                	mov    esi,eax
c001141e:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c0011424:	68 0b a4 02 c0       	push   0xc002a40b
c0011429:	50                   	push   eax
c001142a:	e8 db 17 00 00       	call   c0012c0a <File::File(char const*, Process*)>
c001142f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011432:	e8 af 19 00 00       	call   c0012de6 <File::unlink()>
c0011437:	58                   	pop    eax
c0011438:	5a                   	pop    edx
c0011439:	6a 12                	push   0x12
c001143b:	56                   	push   esi
c001143c:	e8 2d 18 00 00       	call   c0012c6e <File::open(FileOpenMode)>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	85 c0                	test   eax,eax
c0011446:	0f 85 2f 01 00 00    	jne    c001157b <Virt::setupPageSwapping(int)+0x172>
c001144c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011450:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011458:	c1 e3 08             	shl    ebx,0x8
c001145b:	83 ec 0c             	sub    esp,0xc
c001145e:	68 00 00 01 00       	push   0x10000
c0011463:	e8 31 e1 ff ff       	call   c000f599 <malloc>
c0011468:	83 c4 0c             	add    esp,0xc
c001146b:	89 c7                	mov    edi,eax
c001146d:	68 00 00 01 00       	push   0x10000
c0011472:	68 ee 00 00 00       	push   0xee
c0011477:	50                   	push   eax
c0011478:	e8 d3 f2 fe ff       	call   c0000750 <memset>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	85 db                	test   ebx,ebx
c0011482:	79 03                	jns    c0011487 <Virt::setupPageSwapping(int)+0x7e>
c0011484:	83 c3 0f             	add    ebx,0xf
c0011487:	c1 fb 04             	sar    ebx,0x4
c001148a:	4b                   	dec    ebx
c001148b:	83 fb ff             	cmp    ebx,0xffffffff
c001148e:	74 41                	je     c00114d1 <Virt::setupPageSwapping(int)+0xc8>
c0011490:	83 ec 0c             	sub    esp,0xc
c0011493:	8b 06                	mov    eax,DWORD PTR [esi]
c0011495:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011499:	52                   	push   edx
c001149a:	57                   	push   edi
c001149b:	6a 00                	push   0x0
c001149d:	68 00 00 01 00       	push   0x10000
c00114a2:	56                   	push   esi
c00114a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114a6:	83 c4 20             	add    esp,0x20
c00114a9:	85 c0                	test   eax,eax
c00114ab:	0f 85 b5 00 00 00    	jne    c0011566 <Virt::setupPageSwapping(int)+0x15d>
c00114b1:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114b9:	74 cf                	je     c001148a <Virt::setupPageSwapping(int)+0x81>
c00114bb:	83 ec 0c             	sub    esp,0xc
c00114be:	4b                   	dec    ebx
c00114bf:	68 3d a4 02 c0       	push   0xc002a43d
c00114c4:	e8 4e 89 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	83 fb ff             	cmp    ebx,0xffffffff
c00114cf:	75 bf                	jne    c0011490 <Virt::setupPageSwapping(int)+0x87>
c00114d1:	83 ec 0c             	sub    esp,0xc
c00114d4:	56                   	push   esi
c00114d5:	e8 f2 17 00 00       	call   c0012ccc <File::close()>
c00114da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114dd:	e8 d7 e0 ff ff       	call   c000f5b9 <rfree>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	85 f6                	test   esi,esi
c00114e7:	74 0c                	je     c00114f5 <Virt::setupPageSwapping(int)+0xec>
c00114e9:	83 ec 0c             	sub    esp,0xc
c00114ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00114ee:	56                   	push   esi
c00114ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114f2:	83 c4 10             	add    esp,0x10
c00114f5:	83 ec 08             	sub    esp,0x8
c00114f8:	a1 e8 de 02 c0       	mov    eax,ds:0xc002dee8
c00114fd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011503:	8b 10                	mov    edx,DWORD PTR [eax]
c0011505:	68 0b a4 02 c0       	push   0xc002a40b
c001150a:	50                   	push   eax
c001150b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001150e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011512:	c6 05 98 c8 02 c0 43 	mov    BYTE PTR ds:0xc002c898,0x43
c0011519:	c1 e2 0b             	shl    edx,0xb
c001151c:	a3 94 c8 02 c0       	mov    ds:0xc002c894,eax
c0011521:	89 15 90 c8 02 c0    	mov    DWORD PTR ds:0xc002c890,edx
c0011527:	c7 05 8c c8 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c88c,0x8
c0011531:	c1 ea 08             	shr    edx,0x8
c0011534:	89 14 24             	mov    DWORD PTR [esp],edx
c0011537:	e8 5d e0 ff ff       	call   c000f599 <malloc>
c001153c:	83 c4 0c             	add    esp,0xc
c001153f:	89 c1                	mov    ecx,eax
c0011541:	a3 4c da 02 c0       	mov    ds:0xc002da4c,eax
c0011546:	31 d2                	xor    edx,edx
c0011548:	a1 90 c8 02 c0       	mov    eax,ds:0xc002c890
c001154d:	f7 35 8c c8 02 c0    	div    DWORD PTR ds:0xc002c88c
c0011553:	c1 e8 05             	shr    eax,0x5
c0011556:	50                   	push   eax
c0011557:	6a 00                	push   0x0
c0011559:	51                   	push   ecx
c001155a:	e8 f1 f1 fe ff       	call   c0000750 <memset>
c001155f:	83 c4 20             	add    esp,0x20
c0011562:	5b                   	pop    ebx
c0011563:	5e                   	pop    esi
c0011564:	5f                   	pop    edi
c0011565:	c3                   	ret    
c0011566:	83 ec 0c             	sub    esp,0xc
c0011569:	68 3d a4 02 c0       	push   0xc002a43d
c001156e:	e8 a4 88 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	e9 36 ff ff ff       	jmp    c00114b1 <Virt::setupPageSwapping(int)+0xa8>
c001157b:	83 ec 0c             	sub    esp,0xc
c001157e:	68 22 a4 02 c0       	push   0xc002a422
c0011583:	e8 8f 88 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0011588:	83 c4 10             	add    esp,0x10
c001158b:	e9 bc fe ff ff       	jmp    c001144c <Virt::setupPageSwapping(int)+0x43>

c0011590 <VAS::VAS()>:
c0011590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011594:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001159b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001159f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115aa:	a3 50 da 02 c0       	mov    ds:0xc002da50,eax
c00115af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bb:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115c9:	90                   	nop
c00115ca:	c3                   	ret    
c00115cb:	90                   	nop

c00115cc <VAS::VAS(VAS*)>:
c00115cc:	83 ec 0c             	sub    esp,0xc
c00115cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115e5:	83 ec 0c             	sub    esp,0xc
c00115e8:	68 5c a2 02 c0       	push   0xc002a25c
c00115ed:	e8 25 88 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c00115f2:	83 c4 10             	add    esp,0x10
c00115f5:	90                   	nop
c00115f6:	83 c4 0c             	add    esp,0xc
c00115f9:	c3                   	ret    

c00115fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115fe:	89 c2                	mov    edx,eax
c0011600:	c1 e8 0a             	shr    eax,0xa
c0011603:	c1 ea 16             	shr    edx,0x16
c0011606:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001160b:	19 c9                	sbb    ecx,ecx
c001160d:	c1 e2 0c             	shl    edx,0xc
c0011610:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011616:	25 fc 0f 00 00       	and    eax,0xffc
c001161b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011622:	01 d0                	add    eax,edx
c0011624:	c3                   	ret    
c0011625:	90                   	nop

c0011626 <VAS::getPageTableEntry(unsigned long)>:
c0011626:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001162a:	89 ca                	mov    edx,ecx
c001162c:	c1 e9 0a             	shr    ecx,0xa
c001162f:	c1 ea 16             	shr    edx,0x16
c0011632:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011638:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001163e:	c1 e0 0c             	shl    eax,0xc
c0011641:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011644:	c3                   	ret    

c0011645 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011645:	57                   	push   edi
c0011646:	56                   	push   esi
c0011647:	be 01 00 00 00       	mov    esi,0x1
c001164c:	53                   	push   ebx
c001164d:	83 ec 10             	sub    esp,0x10
c0011650:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011654:	c1 eb 0c             	shr    ebx,0xc
c0011657:	eb 3f                	jmp    c0011698 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011659:	83 ec 08             	sub    esp,0x8
c001165c:	57                   	push   edi
c001165d:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c0011663:	e8 be ff ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0011668:	83 c4 10             	add    esp,0x10
c001166b:	8b 00                	mov    eax,DWORD PTR [eax]
c001166d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011671:	f6 c4 04             	test   ah,0x4
c0011674:	75 5f                	jne    c00116d5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011676:	80 fa 04             	cmp    dl,0x4
c0011679:	74 78                	je     c00116f3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001167b:	80 fa 02             	cmp    dl,0x2
c001167e:	0f 84 88 00 00 00    	je     c001170c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011684:	80 fa 03             	cmp    dl,0x3
c0011687:	0f 84 ad 00 00 00    	je     c001173a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001168d:	fe ca                	dec    dl
c001168f:	0f 84 92 00 00 00    	je     c0011727 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011695:	43                   	inc    ebx
c0011696:	31 f6                	xor    esi,esi
c0011698:	53                   	push   ebx
c0011699:	89 df                	mov    edi,ebx
c001169b:	e8 3b fb ff ff       	call   c00111db <Virt::getPageState(unsigned long)>
c00116a0:	c1 e7 0c             	shl    edi,0xc
c00116a3:	59                   	pop    ecx
c00116a4:	84 c0                	test   al,al
c00116a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116aa:	75 ad                	jne    c0011659 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	68 43 a4 02 c0       	push   0xc002a443
c00116b4:	e8 5e 87 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c00116b9:	58                   	pop    eax
c00116ba:	5a                   	pop    edx
c00116bb:	57                   	push   edi
c00116bc:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c00116c2:	e8 5f ff ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00116cc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116d0:	f6 c4 04             	test   ah,0x4
c00116d3:	74 c0                	je     c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116d5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	50                   	push   eax
c00116e2:	e8 19 e2 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116ee:	80 fa 04             	cmp    dl,0x4
c00116f1:	75 88                	jne    c001167b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116f3:	89 f0                	mov    eax,esi
c00116f5:	84 c0                	test   al,al
c00116f7:	75 47                	jne    c0011740 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116f9:	c7 44 24 20 80 a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a280
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	5b                   	pop    ebx
c0011705:	5e                   	pop    esi
c0011706:	5f                   	pop    edi
c0011707:	e9 0b 87 00 00       	jmp    c0019e17 <Krnl::panic(char const*)>
c001170c:	89 f0                	mov    eax,esi
c001170e:	84 c0                	test   al,al
c0011710:	75 15                	jne    c0011727 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011712:	83 ec 0c             	sub    esp,0xc
c0011715:	68 5f a4 02 c0       	push   0xc002a45f
c001171a:	e8 f8 86 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	e9 6e ff ff ff       	jmp    c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011727:	83 ec 08             	sub    esp,0x8
c001172a:	6a 00                	push   0x0
c001172c:	53                   	push   ebx
c001172d:	e8 74 fa ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011732:	83 c4 10             	add    esp,0x10
c0011735:	e9 5b ff ff ff       	jmp    c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001173a:	89 f0                	mov    eax,esi
c001173c:	84 c0                	test   al,al
c001173e:	75 15                	jne    c0011755 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011740:	83 ec 08             	sub    esp,0x8
c0011743:	6a 00                	push   0x0
c0011745:	53                   	push   ebx
c0011746:	e8 5b fa ff ff       	call   c00111a6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	83 c4 10             	add    esp,0x10
c0011751:	5b                   	pop    ebx
c0011752:	5e                   	pop    esi
c0011753:	5f                   	pop    edi
c0011754:	c3                   	ret    
c0011755:	c7 44 24 20 7b a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a47b
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	5b                   	pop    ebx
c0011761:	5e                   	pop    esi
c0011762:	5f                   	pop    edi
c0011763:	e9 af 86 00 00       	jmp    c0019e17 <Krnl::panic(char const*)>

c0011768 <VAS::freeAllocatedPages(unsigned long)>:
c0011768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001176c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011770:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011774:	74 09                	je     c001177f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011776:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001177a:	e9 c6 fe ff ff       	jmp    c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c001177f:	c7 44 24 04 a4 a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a2a4
c0011787:	e9 1f 0f 00 00       	jmp    c00126ab <Dbg::kprintf(char const*, ...)>

c001178c <VAS::virtualToPhysical(unsigned long)>:
c001178c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011790:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011794:	e8 8d fe ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0011799:	5a                   	pop    edx
c001179a:	8b 00                	mov    eax,DWORD PTR [eax]
c001179c:	59                   	pop    ecx
c001179d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117a2:	c3                   	ret    
c00117a3:	90                   	nop

c00117a4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117a4:	55                   	push   ebp
c00117a5:	57                   	push   edi
c00117a6:	56                   	push   esi
c00117a7:	53                   	push   ebx
c00117a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117ac:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117b4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117b8:	85 db                	test   ebx,ebx
c00117ba:	7e 22                	jle    c00117de <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117bc:	c1 e3 0c             	shl    ebx,0xc
c00117bf:	01 f3                	add    ebx,esi
c00117c1:	56                   	push   esi
c00117c2:	81 c6 00 10 00 00    	add    esi,0x1000
c00117c8:	55                   	push   ebp
c00117c9:	e8 58 fe ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c00117ce:	5a                   	pop    edx
c00117cf:	59                   	pop    ecx
c00117d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117d2:	21 f9                	and    ecx,edi
c00117d4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117d8:	39 f3                	cmp    ebx,esi
c00117da:	89 08                	mov    DWORD PTR [eax],ecx
c00117dc:	75 e3                	jne    c00117c1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117de:	5b                   	pop    ebx
c00117df:	5e                   	pop    esi
c00117e0:	5f                   	pop    edi
c00117e1:	5d                   	pop    ebp
c00117e2:	c3                   	ret    
c00117e3:	90                   	nop

c00117e4 <VAS::setToWriteCombining(unsigned long, int)>:
c00117e4:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00117e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00117ef:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117f6:	75 01                	jne    c00117f9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117f8:	c3                   	ret    
c00117f9:	68 80 00 00 00       	push   0x80
c00117fe:	6a ff                	push   0xffffffff
c0011800:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001180c:	e8 93 ff ff ff       	call   c00117a4 <VAS::reflagRange(unsigned long, int, int, int)>
c0011811:	83 c4 14             	add    esp,0x14
c0011814:	c3                   	ret    
c0011815:	90                   	nop

c0011816 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011816:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001181b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001181f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011826:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011829:	19 c0                	sbb    eax,eax
c001182b:	83 ca 03             	or     edx,0x3
c001182e:	83 e0 fc             	and    eax,0xfffffffc
c0011831:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011838:	0f 20 d8             	mov    eax,cr3
c001183b:	0f 22 d8             	mov    cr3,eax
c001183e:	c3                   	ret    
c001183f:	90                   	nop

c0011840 <VAS::~VAS()>:
c0011840:	83 ec 2c             	sub    esp,0x2c
c0011843:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001184b:	fa                   	cli    
c001184c:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0011851:	40                   	inc    eax
c0011852:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0011857:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001185c:	8b 00                	mov    eax,DWORD PTR [eax]
c001185e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011861:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011867:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001186b:	6a 01                	push   0x1
c001186d:	50                   	push   eax
c001186e:	e8 a3 ff ff ff       	call   c0011816 <VAS::mapOtherVASIn(bool, VAS*)>
c0011873:	83 c4 0c             	add    esp,0xc
c0011876:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001187e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011886:	0f 8f d4 00 00 00    	jg     c0011960 <VAS::~VAS()+0x120>
c001188c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011890:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011893:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011897:	c1 e2 02             	shl    edx,0x2
c001189a:	01 d0                	add    eax,edx
c001189c:	8b 00                	mov    eax,DWORD PTR [eax]
c001189e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a6:	83 e0 01             	and    eax,0x1
c00118a9:	0f 84 a8 00 00 00    	je     c0011957 <VAS::~VAS()+0x117>
c00118af:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118b7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118bf:	7f 72                	jg     c0011933 <VAS::~VAS()+0xf3>
c00118c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118c5:	c1 e0 0a             	shl    eax,0xa
c00118c8:	89 c2                	mov    edx,eax
c00118ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ce:	01 d0                	add    eax,edx
c00118d0:	c1 e0 0c             	shl    eax,0xc
c00118d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118d7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00118de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118e1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00118eb:	6a 01                	push   0x1
c00118ed:	50                   	push   eax
c00118ee:	e8 07 fd ff ff       	call   c00115fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118f3:	83 c4 0c             	add    esp,0xc
c00118f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011900:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011908:	25 01 04 00 00       	and    eax,0x401
c001190d:	3d 01 04 00 00       	cmp    eax,0x401
c0011912:	75 19                	jne    c001192d <VAS::~VAS()+0xed>
c0011914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011918:	25 00 f0 ff ff       	and    eax,0xfffff000
c001191d:	83 ec 0c             	sub    esp,0xc
c0011920:	50                   	push   eax
c0011921:	e8 da df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011931:	eb 84                	jmp    c00118b7 <VAS::~VAS()+0x77>
c0011933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011937:	25 00 04 00 00       	and    eax,0x400
c001193c:	74 19                	je     c0011957 <VAS::~VAS()+0x117>
c001193e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011942:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011947:	83 ec 0c             	sub    esp,0xc
c001194a:	50                   	push   eax
c001194b:	e8 b0 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011950:	83 c4 10             	add    esp,0x10
c0011953:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011957:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001195b:	e9 1e ff ff ff       	jmp    c001187e <VAS::~VAS()+0x3e>
c0011960:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011964:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	50                   	push   eax
c001196b:	e8 d5 fc ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c0011970:	83 c4 10             	add    esp,0x10
c0011973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011977:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	50                   	push   eax
c001197e:	e8 7d df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001198a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001198e:	c1 e0 02             	shl    eax,0x2
c0011991:	83 ec 08             	sub    esp,0x8
c0011994:	50                   	push   eax
c0011995:	68 c8 a2 02 c0       	push   0xc002a2c8
c001199a:	e8 0c 0d 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001199f:	83 c4 10             	add    esp,0x10
c00119a2:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00119a7:	48                   	dec    eax
c00119a8:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c00119ad:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00119b2:	85 c0                	test   eax,eax
c00119b4:	75 01                	jne    c00119b7 <VAS::~VAS()+0x177>
c00119b6:	fb                   	sti    
c00119b7:	90                   	nop
c00119b8:	83 c4 2c             	add    esp,0x2c
c00119bb:	c3                   	ret    

c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119bc:	55                   	push   ebp
c00119bd:	57                   	push   edi
c00119be:	56                   	push   esi
c00119bf:	53                   	push   ebx
c00119c0:	83 ec 1c             	sub    esp,0x1c
c00119c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119cb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119d1:	77 08                	ja     c00119db <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119d3:	0f 20 d8             	mov    eax,cr3
c00119d6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119d9:	75 47                	jne    c0011a22 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119df:	09 d8                	or     eax,ebx
c00119e1:	a9 ff 0f 00 00       	test   eax,0xfff
c00119e6:	75 57                	jne    c0011a3f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119e8:	89 de                	mov    esi,ebx
c00119ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00119ed:	c1 ee 16             	shr    esi,0x16
c00119f0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119f7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119fb:	74 54                	je     c0011a51 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00119fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a01:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a07:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a0b:	c1 e6 0c             	shl    esi,0xc
c0011a0e:	c1 eb 0a             	shr    ebx,0xa
c0011a11:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a17:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a1a:	83 c4 1c             	add    esp,0x1c
c0011a1d:	5b                   	pop    ebx
c0011a1e:	5e                   	pop    esi
c0011a1f:	5f                   	pop    edi
c0011a20:	5d                   	pop    ebp
c0011a21:	c3                   	ret    
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	68 e8 a2 02 c0       	push   0xc002a2e8
c0011a2a:	e8 7c 0c 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0011a2f:	83 c4 10             	add    esp,0x10
c0011a32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a36:	09 d8                	or     eax,ebx
c0011a38:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a3d:	74 a9                	je     c00119e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a3f:	83 ec 0c             	sub    esp,0xc
c0011a42:	68 50 a3 02 c0       	push   0xc002a350
c0011a47:	e8 cb 83 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	eb 97                	jmp    c00119e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a55:	e8 17 df ff ff       	call   c000f971 <Phys::allocatePage()>
c0011a5a:	83 ec 0c             	sub    esp,0xc
c0011a5d:	89 c5                	mov    ebp,eax
c0011a5f:	8b 0d 50 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da50
c0011a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a69:	6a 01                	push   0x1
c0011a6b:	e8 8f f7 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0011a70:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a77:	6a 01                	push   0x1
c0011a79:	50                   	push   eax
c0011a7a:	55                   	push   ebp
c0011a7b:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a81:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a85:	51                   	push   ecx
c0011a86:	e8 27 02 00 00       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a8b:	83 c4 1c             	add    esp,0x1c
c0011a8e:	68 00 10 00 00       	push   0x1000
c0011a93:	6a 00                	push   0x0
c0011a95:	50                   	push   eax
c0011a96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a9a:	e8 b1 ec fe ff       	call   c0000750 <memset>
c0011a9f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011aa3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011aa6:	e8 9a fb ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c0011aab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011aaf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ab8:	e9 40 ff ff ff       	jmp    c00119fd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011abd:	90                   	nop

c0011abe <VAS::allocatePages(int, int)>:
c0011abe:	55                   	push   ebp
c0011abf:	57                   	push   edi
c0011ac0:	56                   	push   esi
c0011ac1:	53                   	push   ebx
c0011ac2:	83 ec 1c             	sub    esp,0x1c
c0011ac5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ac9:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0011ace:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ad4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ada:	83 e0 01             	and    eax,0x1
c0011add:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ae1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ae5:	0f 85 cc 00 00 00    	jne    c0011bb7 <VAS::allocatePages(int, int)+0xf9>
c0011aeb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011aee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011af2:	85 c0                	test   eax,eax
c0011af4:	0f 84 a1 00 00 00    	je     c0011b9b <VAS::allocatePages(int, int)+0xdd>
c0011afa:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011afe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b02:	c1 e6 0c             	shl    esi,0xc
c0011b05:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b09:	85 c0                	test   eax,eax
c0011b0b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b0e:	7e 33                	jle    c0011b43 <VAS::allocatePages(int, int)+0x85>
c0011b10:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b14:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b18:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b1e:	e8 4e de ff ff       	call   c000f971 <Phys::allocatePage()>
c0011b23:	55                   	push   ebp
c0011b24:	53                   	push   ebx
c0011b25:	50                   	push   eax
c0011b26:	57                   	push   edi
c0011b27:	e8 90 fe ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b2c:	83 c4 10             	add    esp,0x10
c0011b2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b34:	74 03                	je     c0011b39 <VAS::allocatePages(int, int)+0x7b>
c0011b36:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b39:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b3f:	39 de                	cmp    esi,ebx
c0011b41:	75 db                	jne    c0011b1e <VAS::allocatePages(int, int)+0x60>
c0011b43:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b48:	75 12                	jne    c0011b5c <VAS::allocatePages(int, int)+0x9e>
c0011b4a:	0f 20 d8             	mov    eax,cr3
c0011b4d:	0f 22 d8             	mov    cr3,eax
c0011b50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b54:	83 c4 1c             	add    esp,0x1c
c0011b57:	5b                   	pop    ebx
c0011b58:	5e                   	pop    esi
c0011b59:	5f                   	pop    edi
c0011b5a:	5d                   	pop    ebp
c0011b5b:	c3                   	ret    
c0011b5c:	c1 ee 0a             	shr    esi,0xa
c0011b5f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b63:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b69:	c1 eb 0a             	shr    ebx,0xa
c0011b6c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b72:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b78:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b7e:	39 c3                	cmp    ebx,eax
c0011b80:	77 ce                	ja     c0011b50 <VAS::allocatePages(int, int)+0x92>
c0011b82:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b85:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b8b:	39 d8                	cmp    eax,ebx
c0011b8d:	73 f3                	jae    c0011b82 <VAS::allocatePages(int, int)+0xc4>
c0011b8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b93:	83 c4 1c             	add    esp,0x1c
c0011b96:	5b                   	pop    ebx
c0011b97:	5e                   	pop    esi
c0011b98:	5f                   	pop    edi
c0011b99:	5d                   	pop    ebp
c0011b9a:	c3                   	ret    
c0011b9b:	83 ec 0c             	sub    esp,0xc
c0011b9e:	68 74 a3 02 c0       	push   0xc002a374
c0011ba3:	e8 6f 82 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0011ba8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	e9 43 ff ff ff       	jmp    c0011afa <VAS::allocatePages(int, int)+0x3c>
c0011bb7:	83 ec 0c             	sub    esp,0xc
c0011bba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bbe:	e8 3c f6 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0011bc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bcf:	0f 87 9b 00 00 00    	ja     c0011c70 <VAS::allocatePages(int, int)+0x1b2>
c0011bd5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bd9:	85 d2                	test   edx,edx
c0011bdb:	7e 3c                	jle    c0011c19 <VAS::allocatePages(int, int)+0x15b>
c0011bdd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011be1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011be5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011be9:	c1 e5 0c             	shl    ebp,0xc
c0011bec:	81 ce 00 04 00 00    	or     esi,0x400
c0011bf2:	01 dd                	add    ebp,ebx
c0011bf4:	e8 78 dd ff ff       	call   c000f971 <Phys::allocatePage()>
c0011bf9:	56                   	push   esi
c0011bfa:	53                   	push   ebx
c0011bfb:	50                   	push   eax
c0011bfc:	57                   	push   edi
c0011bfd:	e8 ba fd ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c02:	83 c4 10             	add    esp,0x10
c0011c05:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c0a:	74 03                	je     c0011c0f <VAS::allocatePages(int, int)+0x151>
c0011c0c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c0f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c15:	39 dd                	cmp    ebp,ebx
c0011c17:	75 db                	jne    c0011bf4 <VAS::allocatePages(int, int)+0x136>
c0011c19:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c1e:	0f 84 26 ff ff ff    	je     c0011b4a <VAS::allocatePages(int, int)+0x8c>
c0011c24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c2c:	89 d3                	mov    ebx,edx
c0011c2e:	c1 e0 0c             	shl    eax,0xc
c0011c31:	c1 eb 0a             	shr    ebx,0xa
c0011c34:	01 d0                	add    eax,edx
c0011c36:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c3c:	c1 e8 0a             	shr    eax,0xa
c0011c3f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c4a:	2d 00 00 40 00       	sub    eax,0x400000
c0011c4f:	39 c3                	cmp    ebx,eax
c0011c51:	0f 87 f9 fe ff ff    	ja     c0011b50 <VAS::allocatePages(int, int)+0x92>
c0011c57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c60:	39 d8                	cmp    eax,ebx
c0011c62:	73 f3                	jae    c0011c57 <VAS::allocatePages(int, int)+0x199>
c0011c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c68:	83 c4 1c             	add    esp,0x1c
c0011c6b:	5b                   	pop    ebx
c0011c6c:	5e                   	pop    esi
c0011c6d:	5f                   	pop    edi
c0011c6e:	5d                   	pop    ebp
c0011c6f:	c3                   	ret    
c0011c70:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0011c75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c7b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c82:	0f 84 4d ff ff ff    	je     c0011bd5 <VAS::allocatePages(int, int)+0x117>
c0011c88:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c90:	e9 40 ff ff ff       	jmp    c0011bd5 <VAS::allocatePages(int, int)+0x117>
c0011c95:	90                   	nop

c0011c96 <VAS::setCPUSpecific(unsigned long)>:
c0011c96:	83 ec 0c             	sub    esp,0xc
c0011c99:	6a 05                	push   0x5
c0011c9b:	68 00 00 40 c2       	push   0xc2400000
c0011ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ca8:	e8 0f fd ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cad:	83 c4 1c             	add    esp,0x1c
c0011cb0:	c3                   	ret    
c0011cb1:	90                   	nop

c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cb2:	55                   	push   ebp
c0011cb3:	57                   	push   edi
c0011cb4:	56                   	push   esi
c0011cb5:	53                   	push   ebx
c0011cb6:	83 ec 1c             	sub    esp,0x1c
c0011cb9:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0011cbe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011cc2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cc8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ccc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cd2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cd6:	83 e0 01             	and    eax,0x1
c0011cd9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cdd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ce1:	85 c0                	test   eax,eax
c0011ce3:	7e 39                	jle    c0011d1e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011ce5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ce9:	89 f3                	mov    ebx,esi
c0011ceb:	c1 e0 0c             	shl    eax,0xc
c0011cee:	01 f0                	add    eax,esi
c0011cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf4:	55                   	push   ebp
c0011cf5:	53                   	push   ebx
c0011cf6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cfa:	29 f0                	sub    eax,esi
c0011cfc:	01 d8                	add    eax,ebx
c0011cfe:	50                   	push   eax
c0011cff:	57                   	push   edi
c0011d00:	e8 b7 fc ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d05:	83 c4 10             	add    esp,0x10
c0011d08:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d0d:	74 03                	je     c0011d12 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d0f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d12:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d18:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d1c:	75 d6                	jne    c0011cf4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d1e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d23:	75 10                	jne    c0011d35 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d25:	0f 20 d8             	mov    eax,cr3
c0011d28:	0f 22 d8             	mov    cr3,eax
c0011d2b:	83 c4 1c             	add    esp,0x1c
c0011d2e:	89 f0                	mov    eax,esi
c0011d30:	5b                   	pop    ebx
c0011d31:	5e                   	pop    esi
c0011d32:	5f                   	pop    edi
c0011d33:	5d                   	pop    ebp
c0011d34:	c3                   	ret    
c0011d35:	89 f3                	mov    ebx,esi
c0011d37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d3b:	c1 eb 0a             	shr    ebx,0xa
c0011d3e:	c1 e0 0c             	shl    eax,0xc
c0011d41:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d47:	01 f0                	add    eax,esi
c0011d49:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d4f:	c1 e8 0a             	shr    eax,0xa
c0011d52:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d57:	2d 00 00 40 00       	sub    eax,0x400000
c0011d5c:	39 c3                	cmp    ebx,eax
c0011d5e:	77 cb                	ja     c0011d2b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d60:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d63:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d69:	39 d8                	cmp    eax,ebx
c0011d6b:	73 f3                	jae    c0011d60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d6d:	83 c4 1c             	add    esp,0x1c
c0011d70:	89 f0                	mov    eax,esi
c0011d72:	5b                   	pop    ebx
c0011d73:	5e                   	pop    esi
c0011d74:	5f                   	pop    edi
c0011d75:	5d                   	pop    ebp
c0011d76:	c3                   	ret    
c0011d77:	90                   	nop

c0011d78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d78:	55                   	push   ebp
c0011d79:	57                   	push   edi
c0011d7a:	56                   	push   esi
c0011d7b:	53                   	push   ebx
c0011d7c:	83 ec 1c             	sub    esp,0x1c
c0011d7f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d83:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d87:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d8f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d94:	75 4a                	jne    c0011de0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d96:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d9a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d9d:	c1 eb 16             	shr    ebx,0x16
c0011da0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011da7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dab:	74 4d                	je     c0011dfa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011db1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011db5:	c1 e8 0a             	shr    eax,0xa
c0011db8:	80 fa 01             	cmp    dl,0x1
c0011dbb:	19 d2                	sbb    edx,edx
c0011dbd:	c1 e3 0c             	shl    ebx,0xc
c0011dc0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011dc4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011dca:	25 fc 0f 00 00       	and    eax,0xffc
c0011dcf:	01 d8                	add    eax,ebx
c0011dd1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011dd8:	83 c4 1c             	add    esp,0x1c
c0011ddb:	5b                   	pop    ebx
c0011ddc:	5e                   	pop    esi
c0011ddd:	5f                   	pop    edi
c0011dde:	5d                   	pop    ebp
c0011ddf:	c3                   	ret    
c0011de0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011de4:	83 ec 0c             	sub    esp,0xc
c0011de7:	68 a0 a3 02 c0       	push   0xc002a3a0
c0011dec:	e8 26 80 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0011df1:	83 c4 10             	add    esp,0x10
c0011df4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011df8:	eb 9c                	jmp    c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011dfa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dfe:	e8 6e db ff ff       	call   c000f971 <Phys::allocatePage()>
c0011e03:	83 ec 0c             	sub    esp,0xc
c0011e06:	89 c5                	mov    ebp,eax
c0011e08:	8b 0d 50 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da50
c0011e0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e12:	6a 01                	push   0x1
c0011e14:	e8 e6 f3 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0011e19:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e20:	6a 01                	push   0x1
c0011e22:	50                   	push   eax
c0011e23:	55                   	push   ebp
c0011e24:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e2a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e2e:	51                   	push   ecx
c0011e2f:	e8 7e fe ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e34:	83 c4 1c             	add    esp,0x1c
c0011e37:	68 00 10 00 00       	push   0x1000
c0011e3c:	6a 00                	push   0x0
c0011e3e:	50                   	push   eax
c0011e3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e43:	e8 08 e9 fe ff       	call   c0000750 <memset>
c0011e48:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e4c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e4f:	e8 f1 f7 ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e54:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e61:	e9 47 ff ff ff       	jmp    c0011dad <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e66 <VAS::VAS(bool)>:
c0011e66:	53                   	push   ebx
c0011e67:	83 ec 28             	sub    esp,0x28
c0011e6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e6e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e8c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e90:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e93:	e8 d9 da ff ff       	call   c000f971 <Phys::allocatePage()>
c0011e98:	89 c2                	mov    edx,eax
c0011e9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ea1:	8b 1d 50 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da50
c0011ea7:	83 ec 0c             	sub    esp,0xc
c0011eaa:	6a 01                	push   0x1
c0011eac:	e8 4e f3 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	89 c2                	mov    edx,eax
c0011eb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ebd:	83 ec 0c             	sub    esp,0xc
c0011ec0:	6a 03                	push   0x3
c0011ec2:	6a 01                	push   0x1
c0011ec4:	52                   	push   edx
c0011ec5:	50                   	push   eax
c0011ec6:	53                   	push   ebx
c0011ec7:	e8 e6 fd ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ecc:	83 c4 20             	add    esp,0x20
c0011ecf:	89 c2                	mov    edx,eax
c0011ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ed8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ee0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011ee8:	7f 1c                	jg     c0011f06 <VAS::VAS(bool)+0xa0>
c0011eea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ef1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ef5:	c1 e2 02             	shl    edx,0x2
c0011ef8:	01 d0                	add    eax,edx
c0011efa:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f00:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f04:	eb da                	jmp    c0011ee0 <VAS::VAS(bool)+0x7a>
c0011f06:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f0e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f16:	7f 7a                	jg     c0011f92 <VAS::VAS(bool)+0x12c>
c0011f18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f1c:	2d 00 02 00 00       	sub    eax,0x200
c0011f21:	c1 e0 0c             	shl    eax,0xc
c0011f24:	83 c8 03             	or     eax,0x3
c0011f27:	89 c2                	mov    edx,eax
c0011f29:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0011f2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f34:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f3a:	83 e0 10             	and    eax,0x10
c0011f3d:	84 c0                	test   al,al
c0011f3f:	74 07                	je     c0011f48 <VAS::VAS(bool)+0xe2>
c0011f41:	b8 00 01 00 00       	mov    eax,0x100
c0011f46:	eb 05                	jmp    c0011f4d <VAS::VAS(bool)+0xe7>
c0011f48:	b8 00 00 00 00       	mov    eax,0x0
c0011f4d:	09 d0                	or     eax,edx
c0011f4f:	89 c1                	mov    ecx,eax
c0011f51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f5c:	c1 e2 02             	shl    edx,0x2
c0011f5f:	01 d0                	add    eax,edx
c0011f61:	89 ca                	mov    edx,ecx
c0011f63:	89 10                	mov    DWORD PTR [eax],edx
c0011f65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f69:	2d 40 03 00 00       	sub    eax,0x340
c0011f6e:	83 f8 7f             	cmp    eax,0x7f
c0011f71:	77 16                	ja     c0011f89 <VAS::VAS(bool)+0x123>
c0011f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f7e:	c1 e2 02             	shl    edx,0x2
c0011f81:	01 d0                	add    eax,edx
c0011f83:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f89:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f8d:	e9 7c ff ff ff       	jmp    c0011f0e <VAS::VAS(bool)+0xa8>
c0011f92:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0011f97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f9d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fa3:	83 e0 10             	and    eax,0x10
c0011fa6:	84 c0                	test   al,al
c0011fa8:	74 07                	je     c0011fb1 <VAS::VAS(bool)+0x14b>
c0011faa:	b8 03 41 00 00       	mov    eax,0x4103
c0011faf:	eb 05                	jmp    c0011fb6 <VAS::VAS(bool)+0x150>
c0011fb1:	b8 03 40 00 00       	mov    eax,0x4003
c0011fb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fba:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fbd:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fc3:	89 02                	mov    DWORD PTR [edx],eax
c0011fc5:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0011fca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fd0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011fd6:	83 ec 08             	sub    esp,0x8
c0011fd9:	50                   	push   eax
c0011fda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fde:	e8 b3 fc ff ff       	call   c0011c96 <VAS::setCPUSpecific(unsigned long)>
c0011fe3:	83 c4 10             	add    esp,0x10
c0011fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011fed:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0011ff2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ffe:	83 e0 10             	and    eax,0x10
c0012001:	84 c0                	test   al,al
c0012003:	74 07                	je     c001200c <VAS::VAS(bool)+0x1a6>
c0012005:	b8 00 01 00 00       	mov    eax,0x100
c001200a:	eb 05                	jmp    c0012011 <VAS::VAS(bool)+0x1ab>
c001200c:	b8 00 00 00 00       	mov    eax,0x0
c0012011:	09 c2                	or     edx,eax
c0012013:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012017:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001201a:	05 fc 0f 00 00       	add    eax,0xffc
c001201f:	83 ca 03             	or     edx,0x3
c0012022:	89 10                	mov    DWORD PTR [eax],edx
c0012024:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0012029:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001202f:	83 ec 0c             	sub    esp,0xc
c0012032:	50                   	push   eax
c0012033:	e8 ac 1d 00 00       	call   c0013de4 <Device::getName()>
c0012038:	83 c4 10             	add    esp,0x10
c001203b:	83 ec 08             	sub    esp,0x8
c001203e:	68 95 a4 02 c0       	push   0xc002a495
c0012043:	50                   	push   eax
c0012044:	e8 4f e8 fe ff       	call   c0000898 <strcmp>
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	85 c0                	test   eax,eax
c001204e:	0f 94 c0             	sete   al
c0012051:	84 c0                	test   al,al
c0012053:	0f 84 87 00 00 00    	je     c00120e0 <VAS::VAS(bool)+0x27a>
c0012059:	fa                   	cli    
c001205a:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001205f:	40                   	inc    eax
c0012060:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0012065:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001206a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012070:	05 7c 09 00 00       	add    eax,0x97c
c0012075:	83 ec 0c             	sub    esp,0xc
c0012078:	50                   	push   eax
c0012079:	e8 a0 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001207e:	83 c4 10             	add    esp,0x10
c0012081:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012086:	89 c3                	mov    ebx,eax
c0012088:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001208d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012093:	05 7c 09 00 00       	add    eax,0x97c
c0012098:	83 ec 0c             	sub    esp,0xc
c001209b:	50                   	push   eax
c001209c:	e8 7d cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120a1:	83 c4 10             	add    esp,0x10
c00120a4:	83 ec 08             	sub    esp,0x8
c00120a7:	50                   	push   eax
c00120a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120ac:	e8 75 f5 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00120b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120bb:	6a 11                	push   0x11
c00120bd:	53                   	push   ebx
c00120be:	50                   	push   eax
c00120bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120c3:	e8 f4 f8 ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00120d0:	48                   	dec    eax
c00120d1:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c00120d6:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00120db:	85 c0                	test   eax,eax
c00120dd:	75 01                	jne    c00120e0 <VAS::VAS(bool)+0x27a>
c00120df:	fb                   	sti    
c00120e0:	90                   	nop
c00120e1:	83 c4 28             	add    esp,0x28
c00120e4:	5b                   	pop    ebx
c00120e5:	c3                   	ret    

c00120e6 <VAS::evict(unsigned long)>:
c00120e6:	55                   	push   ebp
c00120e7:	57                   	push   edi
c00120e8:	56                   	push   esi
c00120e9:	53                   	push   ebx
c00120ea:	83 ec 1c             	sub    esp,0x1c
c00120ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120f1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120f9:	e8 42 f2 ff ff       	call   c0011340 <Virt::allocateSwapfilePage()>
c00120fe:	89 c7                	mov    edi,eax
c0012100:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c0012105:	85 c0                	test   eax,eax
c0012107:	7e 3d                	jle    c0012146 <VAS::evict(unsigned long)+0x60>
c0012109:	89 ee                	mov    esi,ebp
c001210b:	31 db                	xor    ebx,ebx
c001210d:	83 ec 0c             	sub    esp,0xc
c0012110:	57                   	push   edi
c0012111:	e8 18 f2 ff ff       	call   c001132e <Virt::swapIDToSector(unsigned long)>
c0012116:	89 34 24             	mov    DWORD PTR [esp],esi
c0012119:	01 d8                	add    eax,ebx
c001211b:	6a 01                	push   0x1
c001211d:	31 d2                	xor    edx,edx
c001211f:	43                   	inc    ebx
c0012120:	52                   	push   edx
c0012121:	81 c6 00 02 00 00    	add    esi,0x200
c0012127:	50                   	push   eax
c0012128:	0f be 05 98 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c898
c001212f:	ff 34 85 dc dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2224]
c0012136:	e8 31 3f 00 00       	call   c001606c <LogicalDisk::write(unsigned long long, int, void*)>
c001213b:	83 c4 20             	add    esp,0x20
c001213e:	39 1d 8c c8 02 c0    	cmp    DWORD PTR ds:0xc002c88c,ebx
c0012144:	7f c7                	jg     c001210d <VAS::evict(unsigned long)+0x27>
c0012146:	83 ec 08             	sub    esp,0x8
c0012149:	c1 e7 0b             	shl    edi,0xb
c001214c:	55                   	push   ebp
c001214d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012151:	e8 d0 f4 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0012156:	5a                   	pop    edx
c0012157:	89 c6                	mov    esi,eax
c0012159:	59                   	pop    ecx
c001215a:	ff 30                	push   DWORD PTR [eax]
c001215c:	68 a3 a4 02 c0       	push   0xc002a4a3
c0012161:	e8 45 05 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012166:	8b 16                	mov    edx,DWORD PTR [esi]
c0012168:	89 d3                	mov    ebx,edx
c001216a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012170:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012176:	09 d7                	or     edi,edx
c0012178:	89 3e                	mov    DWORD PTR [esi],edi
c001217a:	5e                   	pop    esi
c001217b:	58                   	pop    eax
c001217c:	57                   	push   edi
c001217d:	68 bc a4 02 c0       	push   0xc002a4bc
c0012182:	e8 24 05 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001218a:	ff 05 48 da 02 c0    	inc    DWORD PTR ds:0xc002da48
c0012190:	e8 6b d7 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0012195:	0f 20 d8             	mov    eax,cr3
c0012198:	0f 22 d8             	mov    cr3,eax
c001219b:	ff 35 48 da 02 c0    	push   DWORD PTR ds:0xc002da48
c00121a1:	55                   	push   ebp
c00121a2:	53                   	push   ebx
c00121a3:	68 c4 a3 02 c0       	push   0xc002a3c4
c00121a8:	e8 fe 04 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00121ad:	a1 44 da 02 c0       	mov    eax,ds:0xc002da44
c00121b2:	c7 44 24 50 d5 a4 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a4d5
c00121ba:	8d 50 01             	lea    edx,[eax+0x1]
c00121bd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121c1:	89 15 44 da 02 c0    	mov    DWORD PTR ds:0xc002da44,edx
c00121c7:	83 c4 3c             	add    esp,0x3c
c00121ca:	5b                   	pop    ebx
c00121cb:	5e                   	pop    esi
c00121cc:	5f                   	pop    edi
c00121cd:	5d                   	pop    ebp
c00121ce:	e9 d8 04 00 00       	jmp    c00126ab <Dbg::kprintf(char const*, ...)>
c00121d3:	90                   	nop

c00121d4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121d4:	55                   	push   ebp
c00121d5:	57                   	push   edi
c00121d6:	56                   	push   esi
c00121d7:	53                   	push   ebx
c00121d8:	83 ec 24             	sub    esp,0x24
c00121db:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121e3:	68 e6 a4 02 c0       	push   0xc002a4e6
c00121e8:	e8 be 04 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00121ed:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00121f1:	58                   	pop    eax
c00121f2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121f8:	5a                   	pop    edx
c00121f9:	53                   	push   ebx
c00121fa:	56                   	push   esi
c00121fb:	e8 26 f4 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0012200:	59                   	pop    ecx
c0012201:	89 c5                	mov    ebp,eax
c0012203:	5f                   	pop    edi
c0012204:	ff 30                	push   DWORD PTR [eax]
c0012206:	68 f9 a4 02 c0       	push   0xc002a4f9
c001220b:	e8 9b 04 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012210:	83 c4 10             	add    esp,0x10
c0012213:	85 db                	test   ebx,ebx
c0012215:	74 1d                	je     c0012234 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012217:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c001221a:	31 c0                	xor    eax,eax
c001221c:	89 fa                	mov    edx,edi
c001221e:	81 e2 01 04 00 00    	and    edx,0x401
c0012224:	81 fa 00 04 00 00    	cmp    edx,0x400
c001222a:	74 12                	je     c001223e <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c001222c:	83 c4 1c             	add    esp,0x1c
c001222f:	5b                   	pop    ebx
c0012230:	5e                   	pop    esi
c0012231:	5f                   	pop    edi
c0012232:	5d                   	pop    ebp
c0012233:	c3                   	ret    
c0012234:	83 c4 1c             	add    esp,0x1c
c0012237:	31 c0                	xor    eax,eax
c0012239:	5b                   	pop    ebx
c001223a:	5e                   	pop    esi
c001223b:	5f                   	pop    edi
c001223c:	5d                   	pop    ebp
c001223d:	c3                   	ret    
c001223e:	83 ec 08             	sub    esp,0x8
c0012241:	c1 ef 0b             	shr    edi,0xb
c0012244:	57                   	push   edi
c0012245:	68 07 a5 02 c0       	push   0xc002a507
c001224a:	e8 5c 04 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001224f:	e8 1d d7 ff ff       	call   c000f971 <Phys::allocatePage()>
c0012254:	59                   	pop    ecx
c0012255:	5a                   	pop    edx
c0012256:	50                   	push   eax
c0012257:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001225b:	68 12 a5 02 c0       	push   0xc002a512
c0012260:	e8 46 04 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012269:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001226c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012272:	09 d0                	or     eax,edx
c0012274:	0d 01 08 00 00       	or     eax,0x801
c0012279:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001227c:	59                   	pop    ecx
c001227d:	5d                   	pop    ebp
c001227e:	50                   	push   eax
c001227f:	68 27 a5 02 c0       	push   0xc002a527
c0012284:	e8 22 04 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012289:	0f 20 d8             	mov    eax,cr3
c001228c:	83 c4 0c             	add    esp,0xc
c001228f:	56                   	push   esi
c0012290:	50                   	push   eax
c0012291:	68 3f a5 02 c0       	push   0xc002a53f
c0012296:	e8 10 04 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001229b:	c7 04 24 57 a5 02 c0 	mov    DWORD PTR [esp],0xc002a557
c00122a2:	e8 04 04 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00122a7:	83 c4 10             	add    esp,0x10
c00122aa:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c00122af:	85 c0                	test   eax,eax
c00122b1:	7e 3d                	jle    c00122f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00122b3:	89 dd                	mov    ebp,ebx
c00122b5:	31 f6                	xor    esi,esi
c00122b7:	83 ec 0c             	sub    esp,0xc
c00122ba:	57                   	push   edi
c00122bb:	e8 6e f0 ff ff       	call   c001132e <Virt::swapIDToSector(unsigned long)>
c00122c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122c3:	01 f0                	add    eax,esi
c00122c5:	6a 01                	push   0x1
c00122c7:	31 d2                	xor    edx,edx
c00122c9:	46                   	inc    esi
c00122ca:	52                   	push   edx
c00122cb:	81 c5 00 02 00 00    	add    ebp,0x200
c00122d1:	50                   	push   eax
c00122d2:	0f be 05 98 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c898
c00122d9:	ff 34 85 dc dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2224]
c00122e0:	e8 1b 3d 00 00       	call   c0016000 <LogicalDisk::read(unsigned long long, int, void*)>
c00122e5:	83 c4 20             	add    esp,0x20
c00122e8:	39 35 8c c8 02 c0    	cmp    DWORD PTR ds:0xc002c88c,esi
c00122ee:	7f c7                	jg     c00122b7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c00122f0:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00122f5:	48                   	dec    eax
c00122f6:	52                   	push   edx
c00122f7:	a3 48 da 02 c0       	mov    ds:0xc002da48,eax
c00122fc:	50                   	push   eax
c00122fd:	53                   	push   ebx
c00122fe:	68 67 a5 02 c0       	push   0xc002a567
c0012303:	e8 a3 03 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012308:	89 3c 24             	mov    DWORD PTR [esp],edi
c001230b:	e8 00 f0 ff ff       	call   c0011310 <Virt::freeSwapfilePage(unsigned long)>
c0012310:	c7 04 24 7c a5 02 c0 	mov    DWORD PTR [esp],0xc002a57c
c0012317:	e8 8f 03 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001231c:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	48                   	dec    eax
c0012325:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001232a:	85 c0                	test   eax,eax
c001232c:	74 2d                	je     c001235b <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c001232e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012332:	25 ff 0f 00 00       	and    eax,0xfff
c0012337:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001233c:	77 20                	ja     c001235e <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c001233e:	0f 20 d8             	mov    eax,cr3
c0012341:	0f 22 d8             	mov    cr3,eax
c0012344:	83 ec 0c             	sub    esp,0xc
c0012347:	68 a2 a5 02 c0       	push   0xc002a5a2
c001234c:	e8 5a 03 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012351:	83 c4 10             	add    esp,0x10
c0012354:	b0 01                	mov    al,0x1
c0012356:	e9 d1 fe ff ff       	jmp    c001222c <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c001235b:	fb                   	sti    
c001235c:	eb d0                	jmp    c001232e <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c001235e:	83 ec 0c             	sub    esp,0xc
c0012361:	68 92 a5 02 c0       	push   0xc002a592
c0012366:	e8 40 03 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	eb ce                	jmp    c001233e <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c0012370 <VAS::scanForEviction()>:
c0012370:	57                   	push   edi
c0012371:	56                   	push   esi
c0012372:	53                   	push   ebx
c0012373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012377:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001237a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012380:	75 0e                	jne    c0012390 <VAS::scanForEviction()+0x20>
c0012382:	89 da                	mov    edx,ebx
c0012384:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012387:	c1 ea 16             	shr    edx,0x16
c001238a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001238e:	74 48                	je     c00123d8 <VAS::scanForEviction()+0x68>
c0012390:	53                   	push   ebx
c0012391:	56                   	push   esi
c0012392:	e8 8f f2 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c0012397:	5a                   	pop    edx
c0012398:	8b 38                	mov    edi,DWORD PTR [eax]
c001239a:	59                   	pop    ecx
c001239b:	89 fa                	mov    edx,edi
c001239d:	81 e2 00 0c 00 00    	and    edx,0xc00
c00123a3:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c00123a9:	74 3d                	je     c00123e8 <VAS::scanForEviction()+0x78>
c00123ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123b1:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00123b7:	76 2a                	jbe    c00123e3 <VAS::scanForEviction()+0x73>
c00123b9:	31 db                	xor    ebx,ebx
c00123bb:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123c2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123c8:	75 c6                	jne    c0012390 <VAS::scanForEviction()+0x20>
c00123ca:	89 da                	mov    edx,ebx
c00123cc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123cf:	c1 ea 16             	shr    edx,0x16
c00123d2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123d6:	75 b8                	jne    c0012390 <VAS::scanForEviction()+0x20>
c00123d8:	81 c3 00 00 40 00    	add    ebx,0x400000
c00123de:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123e1:	eb 97                	jmp    c001237a <VAS::scanForEviction()+0xa>
c00123e3:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123e6:	eb 92                	jmp    c001237a <VAS::scanForEviction()+0xa>
c00123e8:	f7 c7 01 00 00 00    	test   edi,0x1
c00123ee:	74 bb                	je     c00123ab <VAS::scanForEviction()+0x3b>
c00123f0:	f7 c7 20 00 00 00    	test   edi,0x20
c00123f6:	74 0a                	je     c0012402 <VAS::scanForEviction()+0x92>
c00123f8:	83 e7 df             	and    edi,0xffffffdf
c00123fb:	89 38                	mov    DWORD PTR [eax],edi
c00123fd:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012400:	eb a9                	jmp    c00123ab <VAS::scanForEviction()+0x3b>
c0012402:	83 ec 08             	sub    esp,0x8
c0012405:	53                   	push   ebx
c0012406:	56                   	push   esi
c0012407:	e8 da fc ff ff       	call   c00120e6 <VAS::evict(unsigned long)>
c001240c:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	89 f8                	mov    eax,edi
c0012418:	5b                   	pop    ebx
c0012419:	25 00 f0 ff ff       	and    eax,0xfffff000
c001241e:	5e                   	pop    esi
c001241f:	5f                   	pop    edi
c0012420:	c3                   	ret    

c0012421 <mapVASFirstTime>:
c0012421:	55                   	push   ebp
c0012422:	57                   	push   edi
c0012423:	56                   	push   esi
c0012424:	53                   	push   ebx
c0012425:	83 ec 0c             	sub    esp,0xc
c0012428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001242d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012430:	4a                   	dec    edx
c0012431:	0f 84 fe 00 00 00    	je     c0012535 <mapVASFirstTime+0x114>
c0012437:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001243a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001243d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012442:	c1 e5 15             	shl    ebp,0x15
c0012445:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001244a:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012450:	29 eb                	sub    ebx,ebp
c0012452:	29 ef                	sub    edi,ebp
c0012454:	83 ec 08             	sub    esp,0x8
c0012457:	53                   	push   ebx
c0012458:	68 c9 a5 02 c0       	push   0xc002a5c9
c001245d:	e8 49 02 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012462:	e8 0a d5 ff ff       	call   c000f971 <Phys::allocatePage()>
c0012467:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c001246e:	6a 01                	push   0x1
c0012470:	53                   	push   ebx
c0012471:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012477:	50                   	push   eax
c0012478:	56                   	push   esi
c0012479:	e8 34 f8 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001247e:	83 c4 20             	add    esp,0x20
c0012481:	39 fb                	cmp    ebx,edi
c0012483:	75 cf                	jne    c0012454 <mapVASFirstTime+0x33>
c0012485:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001248a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001248f:	29 eb                	sub    ebx,ebp
c0012491:	29 ef                	sub    edi,ebp
c0012493:	83 ec 08             	sub    esp,0x8
c0012496:	53                   	push   ebx
c0012497:	68 e5 a5 02 c0       	push   0xc002a5e5
c001249c:	e8 0a 02 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00124a1:	58                   	pop    eax
c00124a2:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124a6:	5a                   	pop    edx
c00124a7:	19 c0                	sbb    eax,eax
c00124a9:	83 e0 04             	and    eax,0x4
c00124ac:	05 03 04 00 00       	add    eax,0x403
c00124b1:	50                   	push   eax
c00124b2:	68 31 a5 02 c0       	push   0xc002a531
c00124b7:	e8 ef 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00124bc:	e8 b0 d4 ff ff       	call   c000f971 <Phys::allocatePage()>
c00124c1:	59                   	pop    ecx
c00124c2:	89 c5                	mov    ebp,eax
c00124c4:	58                   	pop    eax
c00124c5:	55                   	push   ebp
c00124c6:	68 f9 a5 02 c0       	push   0xc002a5f9
c00124cb:	e8 db 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00124d0:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124d4:	19 d2                	sbb    edx,edx
c00124d6:	83 e2 04             	and    edx,0x4
c00124d9:	81 c2 03 0c 00 00    	add    edx,0xc03
c00124df:	89 14 24             	mov    DWORD PTR [esp],edx
c00124e2:	6a 01                	push   0x1
c00124e4:	53                   	push   ebx
c00124e5:	55                   	push   ebp
c00124e6:	56                   	push   esi
c00124e7:	e8 c6 f7 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124ec:	83 c4 18             	add    esp,0x18
c00124ef:	53                   	push   ebx
c00124f0:	56                   	push   esi
c00124f1:	e8 30 f1 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c00124f6:	5a                   	pop    edx
c00124f7:	59                   	pop    ecx
c00124f8:	ff 30                	push   DWORD PTR [eax]
c00124fa:	68 15 a6 02 c0       	push   0xc002a615
c00124ff:	e8 a7 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012504:	0f 20 d8             	mov    eax,cr3
c0012507:	83 c4 0c             	add    esp,0xc
c001250a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012510:	56                   	push   esi
c0012511:	50                   	push   eax
c0012512:	68 3f a5 02 c0       	push   0xc002a53f
c0012517:	e8 8f 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	39 df                	cmp    edi,ebx
c0012521:	0f 85 6c ff ff ff    	jne    c0012493 <mapVASFirstTime+0x72>
c0012527:	0f 20 d8             	mov    eax,cr3
c001252a:	0f 22 d8             	mov    cr3,eax
c001252d:	83 c4 0c             	add    esp,0xc
c0012530:	5b                   	pop    ebx
c0012531:	5e                   	pop    esi
c0012532:	5f                   	pop    edi
c0012533:	5d                   	pop    ebp
c0012534:	c3                   	ret    
c0012535:	83 ec 0c             	sub    esp,0xc
c0012538:	68 b0 a5 02 c0       	push   0xc002a5b0
c001253d:	e8 69 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012542:	83 c4 10             	add    esp,0x10
c0012545:	83 c4 0c             	add    esp,0xc
c0012548:	5b                   	pop    ebx
c0012549:	5e                   	pop    esi
c001254a:	5f                   	pop    edi
c001254b:	5d                   	pop    ebp
c001254c:	c3                   	ret    

c001254d <__cxa_atexit>:
c001254d:	31 c0                	xor    eax,eax
c001254f:	c3                   	ret    

c0012550 <__cxa_finalize>:
c0012550:	c3                   	ret    

c0012551 <__stack_chk_fail>:
c0012551:	55                   	push   ebp
c0012552:	89 e5                	mov    ebp,esp
c0012554:	83 ec 14             	sub    esp,0x14
c0012557:	68 20 a6 02 c0       	push   0xc002a620
c001255c:	e8 4a 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012561:	58                   	pop    eax
c0012562:	5a                   	pop    edx
c0012563:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012566:	68 70 a6 02 c0       	push   0xc002a670
c001256b:	e8 3b 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012570:	59                   	pop    ecx
c0012571:	58                   	pop    eax
c0012572:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012575:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012578:	68 70 a6 02 c0       	push   0xc002a670
c001257d:	e8 29 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012582:	5a                   	pop    edx
c0012583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012586:	59                   	pop    ecx
c0012587:	8b 00                	mov    eax,DWORD PTR [eax]
c0012589:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001258c:	68 70 a6 02 c0       	push   0xc002a670
c0012591:	e8 15 01 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0012596:	5a                   	pop    edx
c0012597:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001259a:	59                   	pop    ecx
c001259b:	8b 00                	mov    eax,DWORD PTR [eax]
c001259d:	8b 00                	mov    eax,DWORD PTR [eax]
c001259f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125a2:	68 70 a6 02 c0       	push   0xc002a670
c00125a7:	e8 ff 00 00 00       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00125ac:	c7 04 24 78 a6 02 c0 	mov    DWORD PTR [esp],0xc002a678
c00125b3:	e8 5f 78 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c00125b8:	83 c4 10             	add    esp,0x10
c00125bb:	c9                   	leave  
c00125bc:	c3                   	ret    

c00125bd <__cxa_pure_virtual>:
c00125bd:	83 ec 18             	sub    esp,0x18
c00125c0:	68 90 a6 02 c0       	push   0xc002a690
c00125c5:	e8 4d 78 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c00125ca:	83 c4 1c             	add    esp,0x1c
c00125cd:	c3                   	ret    

c00125ce <operator new[](unsigned long)>:
c00125ce:	e9 c6 cf ff ff       	jmp    c000f599 <malloc>

c00125d3 <operator delete(void*, unsigned long)>:
c00125d3:	e9 e1 cf ff ff       	jmp    c000f5b9 <rfree>

c00125d8 <operator delete[](void*)>:
c00125d8:	e9 dc cf ff ff       	jmp    c000f5b9 <rfree>

c00125dd <operator delete[](void*, unsigned long)>:
c00125dd:	e9 d7 cf ff ff       	jmp    c000f5b9 <rfree>

c00125e2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125e2:	55                   	push   ebp
c00125e3:	b9 11 00 00 00       	mov    ecx,0x11
c00125e8:	57                   	push   edi
c00125e9:	56                   	push   esi
c00125ea:	be de a0 02 c0       	mov    esi,0xc002a0de
c00125ef:	53                   	push   ebx
c00125f0:	83 ec 20             	sub    esp,0x20
c00125f3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125f7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00125fb:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00125ff:	fc                   	cld    
c0012600:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012602:	89 ee                	mov    esi,ebp
c0012604:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012608:	eb 02                	jmp    c001260c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001260a:	89 c6                	mov    esi,eax
c001260c:	31 d2                	xor    edx,edx
c001260e:	41                   	inc    ecx
c001260f:	89 f0                	mov    eax,esi
c0012611:	f7 f3                	div    ebx
c0012613:	39 de                	cmp    esi,ebx
c0012615:	73 f3                	jae    c001260a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012617:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001261a:	eb 02                	jmp    c001261e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001261c:	89 c5                	mov    ebp,eax
c001261e:	31 d2                	xor    edx,edx
c0012620:	49                   	dec    ecx
c0012621:	89 e8                	mov    eax,ebp
c0012623:	f7 f3                	div    ebx
c0012625:	39 dd                	cmp    ebp,ebx
c0012627:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001262b:	88 11                	mov    BYTE PTR [ecx],dl
c001262d:	73 ed                	jae    c001261c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c001262f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012633:	83 c4 20             	add    esp,0x20
c0012636:	5b                   	pop    ebx
c0012637:	5e                   	pop    esi
c0012638:	5f                   	pop    edi
c0012639:	5d                   	pop    ebp
c001263a:	c3                   	ret    

c001263b <Dbg::logc(char)>:
c001263b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001263f:	ba fd 03 00 00       	mov    edx,0x3fd
c0012644:	ec                   	in     al,dx
c0012645:	a8 20                	test   al,0x20
c0012647:	74 fb                	je     c0012644 <Dbg::logc(char)+0x9>
c0012649:	ba f8 03 00 00       	mov    edx,0x3f8
c001264e:	88 c8                	mov    al,cl
c0012650:	ee                   	out    dx,al
c0012651:	c3                   	ret    

c0012652 <Dbg::logs(char*)>:
c0012652:	53                   	push   ebx
c0012653:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012657:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001265a:	84 c0                	test   al,al
c001265c:	74 0f                	je     c001266d <Dbg::logs(char*)+0x1b>
c001265e:	50                   	push   eax
c001265f:	43                   	inc    ebx
c0012660:	e8 d6 ff ff ff       	call   c001263b <Dbg::logc(char)>
c0012665:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012668:	5a                   	pop    edx
c0012669:	84 c0                	test   al,al
c001266b:	75 f1                	jne    c001265e <Dbg::logs(char*)+0xc>
c001266d:	5b                   	pop    ebx
c001266e:	c3                   	ret    

c001266f <Dbg::logWriteInt(unsigned int)>:
c001266f:	83 ec 10             	sub    esp,0x10
c0012672:	6a 0a                	push   0xa
c0012674:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012678:	50                   	push   eax
c0012679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001267d:	e8 60 ff ff ff       	call   c00125e2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012682:	50                   	push   eax
c0012683:	e8 ca ff ff ff       	call   c0012652 <Dbg::logs(char*)>
c0012688:	83 c4 20             	add    esp,0x20
c001268b:	c3                   	ret    

c001268c <Dbg::logWriteIntBase(unsigned int, int)>:
c001268c:	83 ec 10             	sub    esp,0x10
c001268f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012693:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012697:	50                   	push   eax
c0012698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001269c:	e8 41 ff ff ff       	call   c00125e2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126a1:	50                   	push   eax
c00126a2:	e8 ab ff ff ff       	call   c0012652 <Dbg::logs(char*)>
c00126a7:	83 c4 20             	add    esp,0x20
c00126aa:	c3                   	ret    

c00126ab <Dbg::kprintf(char const*, ...)>:
c00126ab:	55                   	push   ebp
c00126ac:	57                   	push   edi
c00126ad:	56                   	push   esi
c00126ae:	53                   	push   ebx
c00126af:	83 ec 0c             	sub    esp,0xc
c00126b2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126b6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126be:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126c1:	84 c0                	test   al,al
c00126c3:	74 4a                	je     c001270f <Dbg::kprintf(char const*, ...)+0x64>
c00126c5:	31 db                	xor    ebx,ebx
c00126c7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126ca:	3c 25                	cmp    al,0x25
c00126cc:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126cf:	0f 85 e4 00 00 00    	jne    c00127b9 <Dbg::kprintf(char const*, ...)+0x10e>
c00126d5:	83 c3 02             	add    ebx,0x2
c00126d8:	8a 07                	mov    al,BYTE PTR [edi]
c00126da:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126dd:	83 e8 25             	sub    eax,0x25
c00126e0:	3c 53                	cmp    al,0x53
c00126e2:	0f 87 ba 00 00 00    	ja     c00127a2 <Dbg::kprintf(char const*, ...)+0xf7>
c00126e8:	0f b6 c0             	movzx  eax,al
c00126eb:	ff 24 85 a4 a6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd595c]
c00126f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126f6:	89 c8                	mov    eax,ecx
c00126f8:	83 c1 04             	add    ecx,0x4
c00126fb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126ff:	ff 30                	push   DWORD PTR [eax]
c0012701:	e8 69 ff ff ff       	call   c001266f <Dbg::logWriteInt(unsigned int)>
c0012706:	5f                   	pop    edi
c0012707:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001270b:	84 c0                	test   al,al
c001270d:	75 b8                	jne    c00126c7 <Dbg::kprintf(char const*, ...)+0x1c>
c001270f:	83 c4 0c             	add    esp,0xc
c0012712:	5b                   	pop    ebx
c0012713:	5e                   	pop    esi
c0012714:	5f                   	pop    edi
c0012715:	5d                   	pop    ebp
c0012716:	c3                   	ret    
c0012717:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001271b:	89 c8                	mov    eax,ecx
c001271d:	83 c1 04             	add    ecx,0x4
c0012720:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012724:	ff 30                	push   DWORD PTR [eax]
c0012726:	e8 27 ff ff ff       	call   c0012652 <Dbg::logs(char*)>
c001272b:	58                   	pop    eax
c001272c:	eb d9                	jmp    c0012707 <Dbg::kprintf(char const*, ...)+0x5c>
c001272e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012732:	89 d0                	mov    eax,edx
c0012734:	83 c2 04             	add    edx,0x4
c0012737:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001273b:	ff 30                	push   DWORD PTR [eax]
c001273d:	e8 2d ff ff ff       	call   c001266f <Dbg::logWriteInt(unsigned int)>
c0012742:	58                   	pop    eax
c0012743:	eb c2                	jmp    c0012707 <Dbg::kprintf(char const*, ...)+0x5c>
c0012745:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012749:	89 d0                	mov    eax,edx
c001274b:	83 c2 04             	add    edx,0x4
c001274e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012751:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012755:	50                   	push   eax
c0012756:	e8 e0 fe ff ff       	call   c001263b <Dbg::logc(char)>
c001275b:	58                   	pop    eax
c001275c:	eb a9                	jmp    c0012707 <Dbg::kprintf(char const*, ...)+0x5c>
c001275e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012762:	89 c8                	mov    eax,ecx
c0012764:	83 c1 04             	add    ecx,0x4
c0012767:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001276b:	6a 10                	push   0x10
c001276d:	ff 30                	push   DWORD PTR [eax]
c001276f:	e8 18 ff ff ff       	call   c001268c <Dbg::logWriteIntBase(unsigned int, int)>
c0012774:	59                   	pop    ecx
c0012775:	5f                   	pop    edi
c0012776:	eb 8f                	jmp    c0012707 <Dbg::kprintf(char const*, ...)+0x5c>
c0012778:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001277c:	89 d0                	mov    eax,edx
c001277e:	83 c2 08             	add    edx,0x8
c0012781:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012785:	6a 10                	push   0x10
c0012787:	ff 30                	push   DWORD PTR [eax]
c0012789:	e8 fe fe ff ff       	call   c001268c <Dbg::logWriteIntBase(unsigned int, int)>
c001278e:	58                   	pop    eax
c001278f:	5a                   	pop    edx
c0012790:	e9 72 ff ff ff       	jmp    c0012707 <Dbg::kprintf(char const*, ...)+0x5c>
c0012795:	6a 25                	push   0x25
c0012797:	e8 9f fe ff ff       	call   c001263b <Dbg::logc(char)>
c001279c:	58                   	pop    eax
c001279d:	e9 65 ff ff ff       	jmp    c0012707 <Dbg::kprintf(char const*, ...)+0x5c>
c00127a2:	6a 25                	push   0x25
c00127a4:	e8 92 fe ff ff       	call   c001263b <Dbg::logc(char)>
c00127a9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127ac:	50                   	push   eax
c00127ad:	e8 89 fe ff ff       	call   c001263b <Dbg::logc(char)>
c00127b2:	5a                   	pop    edx
c00127b3:	59                   	pop    ecx
c00127b4:	e9 4e ff ff ff       	jmp    c0012707 <Dbg::kprintf(char const*, ...)+0x5c>
c00127b9:	50                   	push   eax
c00127ba:	89 eb                	mov    ebx,ebp
c00127bc:	e8 7a fe ff ff       	call   c001263b <Dbg::logc(char)>
c00127c1:	89 fd                	mov    ebp,edi
c00127c3:	58                   	pop    eax
c00127c4:	e9 3e ff ff ff       	jmp    c0012707 <Dbg::kprintf(char const*, ...)+0x5c>
c00127c9:	90                   	nop

c00127ca <File::read(unsigned long long, void*, int*)>:
c00127ca:	53                   	push   ebx
c00127cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127d3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127da:	3c 19                	cmp    al,0x19
c00127dc:	77 35                	ja     c0012813 <File::read(unsigned long long, void*, int*)+0x49>
c00127de:	8b 04 85 e0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2120]
c00127e5:	85 c0                	test   eax,eax
c00127e7:	74 2a                	je     c0012813 <File::read(unsigned long long, void*, int*)+0x49>
c00127e9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127ef:	85 c0                	test   eax,eax
c00127f1:	74 20                	je     c0012813 <File::read(unsigned long long, void*, int*)+0x49>
c00127f3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127f7:	74 21                	je     c001281a <File::read(unsigned long long, void*, int*)+0x50>
c00127f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127ff:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012805:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012809:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001280d:	5b                   	pop    ebx
c001280e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012811:	ff e0                	jmp    eax
c0012813:	b8 0b 00 00 00       	mov    eax,0xb
c0012818:	eb 05                	jmp    c001281f <File::read(unsigned long long, void*, int*)+0x55>
c001281a:	b8 05 00 00 00       	mov    eax,0x5
c001281f:	5b                   	pop    ebx
c0012820:	c3                   	ret    
c0012821:	90                   	nop

c0012822 <File::write(unsigned long long, void*, int*)>:
c0012822:	53                   	push   ebx
c0012823:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012827:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001282b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012832:	3c 19                	cmp    al,0x19
c0012834:	77 35                	ja     c001286b <File::write(unsigned long long, void*, int*)+0x49>
c0012836:	8b 04 85 e0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2120]
c001283d:	85 c0                	test   eax,eax
c001283f:	74 2a                	je     c001286b <File::write(unsigned long long, void*, int*)+0x49>
c0012841:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012847:	85 c0                	test   eax,eax
c0012849:	74 20                	je     c001286b <File::write(unsigned long long, void*, int*)+0x49>
c001284b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001284f:	74 21                	je     c0012872 <File::write(unsigned long long, void*, int*)+0x50>
c0012851:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012853:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012857:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001285d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012861:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012865:	5b                   	pop    ebx
c0012866:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012869:	ff e0                	jmp    eax
c001286b:	b8 0b 00 00 00       	mov    eax,0xb
c0012870:	eb 05                	jmp    c0012877 <File::write(unsigned long long, void*, int*)+0x55>
c0012872:	b8 05 00 00 00       	mov    eax,0x5
c0012877:	5b                   	pop    ebx
c0012878:	c3                   	ret    
c0012879:	90                   	nop

c001287a <Directory::read(unsigned long long, void*, int*)>:
c001287a:	53                   	push   ebx
c001287b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001287f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012883:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001288a:	3c 19                	cmp    al,0x19
c001288c:	77 35                	ja     c00128c3 <Directory::read(unsigned long long, void*, int*)+0x49>
c001288e:	8b 04 85 e0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2120]
c0012895:	85 c0                	test   eax,eax
c0012897:	74 2a                	je     c00128c3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012899:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001289f:	85 c0                	test   eax,eax
c00128a1:	74 20                	je     c00128c3 <Directory::read(unsigned long long, void*, int*)+0x49>
c00128a3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128a7:	74 21                	je     c00128ca <Directory::read(unsigned long long, void*, int*)+0x50>
c00128a9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128ab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128af:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128bd:	5b                   	pop    ebx
c00128be:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128c1:	ff e0                	jmp    eax
c00128c3:	b8 0b 00 00 00       	mov    eax,0xb
c00128c8:	eb 05                	jmp    c00128cf <Directory::read(unsigned long long, void*, int*)+0x55>
c00128ca:	b8 05 00 00 00       	mov    eax,0x5
c00128cf:	5b                   	pop    ebx
c00128d0:	c3                   	ret    
c00128d1:	90                   	nop

c00128d2 <Directory::write(unsigned long long, void*, int*)>:
c00128d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128d6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128dd:	b8 0b 00 00 00       	mov    eax,0xb
c00128e2:	80 fa 19             	cmp    dl,0x19
c00128e5:	77 18                	ja     c00128ff <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128e7:	8b 14 95 e0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2120]
c00128ee:	85 d2                	test   edx,edx
c00128f0:	74 0d                	je     c00128ff <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128f2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128f9:	19 c0                	sbb    eax,eax
c00128fb:	83 e0 0a             	and    eax,0xa
c00128fe:	40                   	inc    eax
c00128ff:	c3                   	ret    

c0012900 <File::isAtty()>:
c0012900:	31 c0                	xor    eax,eax
c0012902:	c3                   	ret    
c0012903:	90                   	nop

c0012904 <Directory::isAtty()>:
c0012904:	31 c0                	xor    eax,eax
c0012906:	c3                   	ret    
c0012907:	90                   	nop

c0012908 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012908:	b8 0a 00 00 00       	mov    eax,0xa
c001290d:	c3                   	ret    

c001290e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001290e:	b8 0a 00 00 00       	mov    eax,0xa
c0012913:	c3                   	ret    

c0012914 <Filesystem::getFileFirstSector(char const*)>:
c0012914:	31 c0                	xor    eax,eax
c0012916:	31 d2                	xor    edx,edx
c0012918:	c3                   	ret    
c0012919:	90                   	nop

c001291a <File::~File()>:
c001291a:	83 ec 0c             	sub    esp,0xc
c001291d:	ba 64 a8 02 c0       	mov    edx,0xc002a864
c0012922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012926:	89 10                	mov    DWORD PTR [eax],edx
c0012928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001292c:	83 ec 0c             	sub    esp,0xc
c001292f:	50                   	push   eax
c0012930:	e8 69 e6 ff ff       	call   c0010f9e <UnixFile::~UnixFile()>
c0012935:	83 c4 10             	add    esp,0x10
c0012938:	90                   	nop
c0012939:	83 c4 0c             	add    esp,0xc
c001293c:	c3                   	ret    
c001293d:	90                   	nop

c001293e <File::~File()>:
c001293e:	83 ec 0c             	sub    esp,0xc
c0012941:	83 ec 0c             	sub    esp,0xc
c0012944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012948:	e8 cd ff ff ff       	call   c001291a <File::~File()>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	83 ec 08             	sub    esp,0x8
c0012953:	68 14 01 00 00       	push   0x114
c0012958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001295c:	e8 72 fc ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0012961:	83 c4 10             	add    esp,0x10
c0012964:	83 c4 0c             	add    esp,0xc
c0012967:	c3                   	ret    

c0012968 <Directory::~Directory()>:
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	ba 80 a8 02 c0       	mov    edx,0xc002a880
c0012970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012974:	89 10                	mov    DWORD PTR [eax],edx
c0012976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001297a:	83 ec 0c             	sub    esp,0xc
c001297d:	50                   	push   eax
c001297e:	e8 1b e6 ff ff       	call   c0010f9e <UnixFile::~UnixFile()>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	90                   	nop
c0012987:	83 c4 0c             	add    esp,0xc
c001298a:	c3                   	ret    
c001298b:	90                   	nop

c001298c <Directory::~Directory()>:
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	83 ec 0c             	sub    esp,0xc
c0012992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012996:	e8 cd ff ff ff       	call   c0012968 <Directory::~Directory()>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	83 ec 08             	sub    esp,0x8
c00129a1:	68 14 01 00 00       	push   0x114
c00129a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129aa:	e8 24 fc ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c00129af:	83 c4 10             	add    esp,0x10
c00129b2:	83 c4 0c             	add    esp,0xc
c00129b5:	c3                   	ret    

c00129b6 <Filesystem::Filesystem()>:
c00129b6:	ba fc a7 02 c0       	mov    edx,0xc002a7fc
c00129bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129bf:	89 10                	mov    DWORD PTR [eax],edx
c00129c1:	8b 15 54 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da54
c00129c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129d2:	a3 54 da 02 c0       	mov    ds:0xc002da54,eax
c00129d7:	90                   	nop
c00129d8:	c3                   	ret    
c00129d9:	90                   	nop

c00129da <Filesystem::~Filesystem()>:
c00129da:	ba fc a7 02 c0       	mov    edx,0xc002a7fc
c00129df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129e3:	89 10                	mov    DWORD PTR [eax],edx
c00129e5:	90                   	nop
c00129e6:	c3                   	ret    
c00129e7:	90                   	nop

c00129e8 <Filesystem::~Filesystem()>:
c00129e8:	83 ec 0c             	sub    esp,0xc
c00129eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129ef:	e8 e6 ff ff ff       	call   c00129da <Filesystem::~Filesystem()>
c00129f4:	83 c4 04             	add    esp,0x4
c00129f7:	83 ec 08             	sub    esp,0x8
c00129fa:	6a 08                	push   0x8
c00129fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a00:	e8 ce fb ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0012a05:	83 c4 10             	add    esp,0x10
c0012a08:	83 c4 0c             	add    esp,0xc
c0012a0b:	c3                   	ret    

c0012a0c <Fs::getcwd(Process*, char*, int)>:
c0012a0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a10:	31 c0                	xor    eax,eax
c0012a12:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a15:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a19:	7d 15                	jge    c0012a30 <Fs::getcwd(Process*, char*, int)+0x24>
c0012a1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a1f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a26:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a29:	84 c9                	test   cl,cl
c0012a2b:	74 06                	je     c0012a33 <Fs::getcwd(Process*, char*, int)+0x27>
c0012a2d:	40                   	inc    eax
c0012a2e:	eb e2                	jmp    c0012a12 <Fs::getcwd(Process*, char*, int)+0x6>
c0012a30:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a33:	31 c0                	xor    eax,eax
c0012a35:	c3                   	ret    

c0012a36 <Fs::initVFS()>:
c0012a36:	83 ec 18             	sub    esp,0x18
c0012a39:	6a 08                	push   0x8
c0012a3b:	e8 59 cb ff ff       	call   c000f599 <malloc>
c0012a40:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a43:	e8 cc de 00 00       	call   c0020914 <FAT::FAT()>
c0012a48:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a4f:	e8 45 cb ff ff       	call   c000f599 <malloc>
c0012a54:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a57:	e8 c4 f0 00 00       	call   c0021b20 <ISO9660::ISO9660()>
c0012a5c:	83 c4 1c             	add    esp,0x1c
c0012a5f:	c3                   	ret    

c0012a60 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a60:	55                   	push   ebp
c0012a61:	57                   	push   edi
c0012a62:	56                   	push   esi
c0012a63:	53                   	push   ebx
c0012a64:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a6a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a71:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a78:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a7f:	68 00 04 00 00       	push   0x400
c0012a84:	6a 00                	push   0x0
c0012a86:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a8a:	56                   	push   esi
c0012a8b:	e8 c0 dc fe ff       	call   c0000750 <memset>
c0012a90:	83 c4 10             	add    esp,0x10
c0012a93:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a97:	75 0b                	jne    c0012aa4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012a99:	50                   	push   eax
c0012a9a:	50                   	push   eax
c0012a9b:	57                   	push   edi
c0012a9c:	56                   	push   esi
c0012a9d:	e8 6a dd fe ff       	call   c000080c <strcpy>
c0012aa2:	eb 41                	jmp    c0012ae5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012aa4:	8a 07                	mov    al,BYTE PTR [edi]
c0012aa6:	3c 5c                	cmp    al,0x5c
c0012aa8:	74 04                	je     c0012aae <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012aaa:	3c 2f                	cmp    al,0x2f
c0012aac:	75 18                	jne    c0012ac6 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012aae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ab1:	3c 60                	cmp    al,0x60
c0012ab3:	7e 03                	jle    c0012ab8 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ab5:	83 e8 20             	sub    eax,0x20
c0012ab8:	88 04 24             	mov    BYTE PTR [esp],al
c0012abb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ac2:	50                   	push   eax
c0012ac3:	50                   	push   eax
c0012ac4:	eb 18                	jmp    c0012ade <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ac6:	50                   	push   eax
c0012ac7:	50                   	push   eax
c0012ac8:	55                   	push   ebp
c0012ac9:	56                   	push   esi
c0012aca:	e8 3d dd fe ff       	call   c000080c <strcpy>
c0012acf:	5a                   	pop    edx
c0012ad0:	59                   	pop    ecx
c0012ad1:	68 ea ba 02 c0       	push   0xc002baea
c0012ad6:	56                   	push   esi
c0012ad7:	e8 70 de fe ff       	call   c000094c <strcat>
c0012adc:	5d                   	pop    ebp
c0012add:	58                   	pop    eax
c0012ade:	57                   	push   edi
c0012adf:	56                   	push   esi
c0012ae0:	e8 67 de fe ff       	call   c000094c <strcat>
c0012ae5:	83 c4 10             	add    esp,0x10
c0012ae8:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012aeb:	3c 60                	cmp    al,0x60
c0012aed:	7e 03                	jle    c0012af2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012aef:	83 e8 20             	sub    eax,0x20
c0012af2:	88 04 24             	mov    BYTE PTR [esp],al
c0012af5:	88 03                	mov    BYTE PTR [ebx],al
c0012af7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012afe:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b04:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b08:	bf 03 00 00 00       	mov    edi,0x3
c0012b0d:	b8 03 00 00 00       	mov    eax,0x3
c0012b12:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b15:	84 d2                	test   dl,dl
c0012b17:	0f 84 91 00 00 00    	je     c0012bae <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b1d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b20:	80 fa 5c             	cmp    dl,0x5c
c0012b23:	74 05                	je     c0012b2a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b25:	80 fa 2f             	cmp    dl,0x2f
c0012b28:	75 12                	jne    c0012b3c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b2a:	89 c5                	mov    ebp,eax
c0012b2c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b31:	74 09                	je     c0012b3c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b33:	40                   	inc    eax
c0012b34:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b38:	89 cf                	mov    edi,ecx
c0012b3a:	eb d6                	jmp    c0012b12 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b3c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b41:	75 5b                	jne    c0012b9e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b43:	80 fa 2e             	cmp    dl,0x2e
c0012b46:	75 56                	jne    c0012b9e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b48:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b4c:	74 19                	je     c0012b67 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b4e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b53:	74 53                	je     c0012ba8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b55:	89 f9                	mov    ecx,edi
c0012b57:	41                   	inc    ecx
c0012b58:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b5b:	80 fa 2f             	cmp    dl,0x2f
c0012b5e:	74 f7                	je     c0012b57 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b60:	80 fa 5c             	cmp    dl,0x5c
c0012b63:	74 f2                	je     c0012b57 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b65:	eb d1                	jmp    c0012b38 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b67:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b6c:	74 3a                	je     c0012ba8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b6e:	83 f8 03             	cmp    eax,0x3
c0012b71:	74 c5                	je     c0012b38 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b73:	41                   	inc    ecx
c0012b74:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b77:	80 fa 2f             	cmp    dl,0x2f
c0012b7a:	74 f7                	je     c0012b73 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b7c:	80 fa 5c             	cmp    dl,0x5c
c0012b7f:	74 f2                	je     c0012b73 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b81:	48                   	dec    eax
c0012b82:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b86:	75 06                	jne    c0012b8e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b88:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b8c:	eb f3                	jmp    c0012b81 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012b8e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b92:	74 07                	je     c0012b9b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b94:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b98:	48                   	dec    eax
c0012b99:	eb f3                	jmp    c0012b8e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b9b:	40                   	inc    eax
c0012b9c:	eb 9a                	jmp    c0012b38 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b9e:	80 fa 2f             	cmp    dl,0x2f
c0012ba1:	74 95                	je     c0012b38 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ba3:	80 fa 5c             	cmp    dl,0x5c
c0012ba6:	74 90                	je     c0012b38 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ba8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012bab:	40                   	inc    eax
c0012bac:	eb 8a                	jmp    c0012b38 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bb2:	83 ec 0c             	sub    esp,0xc
c0012bb5:	53                   	push   ebx
c0012bb6:	e8 b1 db fe ff       	call   c000076c <strlen>
c0012bbb:	83 c4 10             	add    esp,0x10
c0012bbe:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012bc3:	75 26                	jne    c0012beb <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012bc5:	83 ec 0c             	sub    esp,0xc
c0012bc8:	53                   	push   ebx
c0012bc9:	e8 9e db fe ff       	call   c000076c <strlen>
c0012bce:	83 c4 10             	add    esp,0x10
c0012bd1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012bd6:	74 26                	je     c0012bfe <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012bd8:	83 ec 0c             	sub    esp,0xc
c0012bdb:	53                   	push   ebx
c0012bdc:	e8 8b db fe ff       	call   c000076c <strlen>
c0012be1:	83 c4 10             	add    esp,0x10
c0012be4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012be9:	eb c7                	jmp    c0012bb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	53                   	push   ebx
c0012bef:	e8 78 db fe ff       	call   c000076c <strlen>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bfc:	74 c7                	je     c0012bc5 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012bfe:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c04:	5b                   	pop    ebx
c0012c05:	5e                   	pop    esi
c0012c06:	5f                   	pop    edi
c0012c07:	5d                   	pop    ebp
c0012c08:	c3                   	ret    
c0012c09:	90                   	nop

c0012c0a <File::File(char const*, Process*)>:
c0012c0a:	83 ec 0c             	sub    esp,0xc
c0012c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c11:	83 ec 08             	sub    esp,0x8
c0012c14:	6a 00                	push   0x0
c0012c16:	50                   	push   eax
c0012c17:	e8 a0 e1 ff ff       	call   c0010dbc <UnixFile::UnixFile(int)>
c0012c1c:	83 c4 10             	add    esp,0x10
c0012c1f:	ba 64 a8 02 c0       	mov    edx,0xc002a864
c0012c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c28:	89 10                	mov    DWORD PTR [eax],edx
c0012c2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c38:	83 c0 0d             	add    eax,0xd
c0012c3b:	83 ec 04             	sub    esp,0x4
c0012c3e:	52                   	push   edx
c0012c3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c43:	50                   	push   eax
c0012c44:	e8 17 fe ff ff       	call   c0012a60 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c50:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c53:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c64:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c68:	90                   	nop
c0012c69:	83 c4 0c             	add    esp,0xc
c0012c6c:	c3                   	ret    
c0012c6d:	90                   	nop

c0012c6e <File::open(FileOpenMode)>:
c0012c6e:	53                   	push   ebx
c0012c6f:	b8 0b 00 00 00       	mov    eax,0xb
c0012c74:	83 ec 08             	sub    esp,0x8
c0012c77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c7b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c82:	80 fa 19             	cmp    dl,0x19
c0012c85:	77 40                	ja     c0012cc7 <File::open(FileOpenMode)+0x59>
c0012c87:	8b 14 95 e0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2120]
c0012c8e:	85 d2                	test   edx,edx
c0012c90:	74 35                	je     c0012cc7 <File::open(FileOpenMode)+0x59>
c0012c92:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c98:	85 d2                	test   edx,edx
c0012c9a:	74 2b                	je     c0012cc7 <File::open(FileOpenMode)+0x59>
c0012c9c:	b8 06 00 00 00       	mov    eax,0x6
c0012ca1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ca5:	75 20                	jne    c0012cc7 <File::open(FileOpenMode)+0x59>
c0012ca7:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ca9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012caf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cb3:	51                   	push   ecx
c0012cb4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cb7:	51                   	push   ecx
c0012cb8:	52                   	push   edx
c0012cb9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	85 c0                	test   eax,eax
c0012cc1:	75 04                	jne    c0012cc7 <File::open(FileOpenMode)+0x59>
c0012cc3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cc7:	83 c4 08             	add    esp,0x8
c0012cca:	5b                   	pop    ebx
c0012ccb:	c3                   	ret    

c0012ccc <File::close()>:
c0012ccc:	53                   	push   ebx
c0012ccd:	b8 0b 00 00 00       	mov    eax,0xb
c0012cd2:	83 ec 08             	sub    esp,0x8
c0012cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cd9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ce0:	80 fa 19             	cmp    dl,0x19
c0012ce3:	77 41                	ja     c0012d26 <File::close()+0x5a>
c0012ce5:	8b 1c 95 e0 de 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2120]
c0012cec:	85 db                	test   ebx,ebx
c0012cee:	74 36                	je     c0012d26 <File::close()+0x5a>
c0012cf0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012cf7:	74 2d                	je     c0012d26 <File::close()+0x5a>
c0012cf9:	b8 05 00 00 00       	mov    eax,0x5
c0012cfe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d02:	74 22                	je     c0012d26 <File::close()+0x5a>
c0012d04:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d08:	8b 04 95 e0 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2120]
c0012d0f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d15:	53                   	push   ebx
c0012d16:	53                   	push   ebx
c0012d17:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d19:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d1f:	50                   	push   eax
c0012d20:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d23:	83 c4 10             	add    esp,0x10
c0012d26:	83 c4 08             	add    esp,0x8
c0012d29:	5b                   	pop    ebx
c0012d2a:	c3                   	ret    
c0012d2b:	90                   	nop

c0012d2c <File::seek(unsigned long long)>:
c0012d2c:	56                   	push   esi
c0012d2d:	53                   	push   ebx
c0012d2e:	b8 0b 00 00 00       	mov    eax,0xb
c0012d33:	51                   	push   ecx
c0012d34:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d38:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d3c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d47:	80 fa 19             	cmp    dl,0x19
c0012d4a:	77 31                	ja     c0012d7d <File::seek(unsigned long long)+0x51>
c0012d4c:	8b 14 95 e0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2120]
c0012d53:	85 d2                	test   edx,edx
c0012d55:	74 26                	je     c0012d7d <File::seek(unsigned long long)+0x51>
c0012d57:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d5d:	85 d2                	test   edx,edx
c0012d5f:	74 1c                	je     c0012d7d <File::seek(unsigned long long)+0x51>
c0012d61:	b8 05 00 00 00       	mov    eax,0x5
c0012d66:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d6a:	74 11                	je     c0012d7d <File::seek(unsigned long long)+0x51>
c0012d6c:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d6e:	53                   	push   ebx
c0012d6f:	51                   	push   ecx
c0012d70:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d76:	52                   	push   edx
c0012d77:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d7a:	83 c4 10             	add    esp,0x10
c0012d7d:	5a                   	pop    edx
c0012d7e:	5b                   	pop    ebx
c0012d7f:	5e                   	pop    esi
c0012d80:	c3                   	ret    
c0012d81:	90                   	nop

c0012d82 <File::tell(unsigned long long*)>:
c0012d82:	83 ec 0c             	sub    esp,0xc
c0012d85:	b8 0b 00 00 00       	mov    eax,0xb
c0012d8a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d8e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d95:	80 fa 19             	cmp    dl,0x19
c0012d98:	77 34                	ja     c0012dce <File::tell(unsigned long long*)+0x4c>
c0012d9a:	8b 14 95 e0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2120]
c0012da1:	85 d2                	test   edx,edx
c0012da3:	74 29                	je     c0012dce <File::tell(unsigned long long*)+0x4c>
c0012da5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dab:	85 d2                	test   edx,edx
c0012dad:	74 1f                	je     c0012dce <File::tell(unsigned long long*)+0x4c>
c0012daf:	b8 05 00 00 00       	mov    eax,0x5
c0012db4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012db8:	74 14                	je     c0012dce <File::tell(unsigned long long*)+0x4c>
c0012dba:	50                   	push   eax
c0012dbb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012dbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dc1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dc7:	52                   	push   edx
c0012dc8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012dcb:	83 c4 10             	add    esp,0x10
c0012dce:	83 c4 0c             	add    esp,0xc
c0012dd1:	c3                   	ret    

c0012dd2 <File::rewind()>:
c0012dd2:	83 ec 10             	sub    esp,0x10
c0012dd5:	6a 00                	push   0x0
c0012dd7:	6a 00                	push   0x0
c0012dd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ddd:	e8 4a ff ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c0012de2:	83 c4 1c             	add    esp,0x1c
c0012de5:	c3                   	ret    

c0012de6 <File::unlink()>:
c0012de6:	83 ec 0c             	sub    esp,0xc
c0012de9:	b8 0b 00 00 00       	mov    eax,0xb
c0012dee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012df2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012df9:	80 f9 19             	cmp    cl,0x19
c0012dfc:	77 2f                	ja     c0012e2d <File::unlink()+0x47>
c0012dfe:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c0012e05:	85 c9                	test   ecx,ecx
c0012e07:	74 24                	je     c0012e2d <File::unlink()+0x47>
c0012e09:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e0f:	85 c9                	test   ecx,ecx
c0012e11:	74 1a                	je     c0012e2d <File::unlink()+0x47>
c0012e13:	b8 06 00 00 00       	mov    eax,0x6
c0012e18:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e1c:	75 0f                	jne    c0012e2d <File::unlink()+0x47>
c0012e1e:	83 c2 0d             	add    edx,0xd
c0012e21:	50                   	push   eax
c0012e22:	50                   	push   eax
c0012e23:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e25:	52                   	push   edx
c0012e26:	51                   	push   ecx
c0012e27:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e2a:	83 c4 10             	add    esp,0x10
c0012e2d:	83 c4 0c             	add    esp,0xc
c0012e30:	c3                   	ret    
c0012e31:	90                   	nop

c0012e32 <File::rename(char const*)>:
c0012e32:	83 ec 0c             	sub    esp,0xc
c0012e35:	b8 0b 00 00 00       	mov    eax,0xb
c0012e3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e3e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e45:	80 f9 19             	cmp    cl,0x19
c0012e48:	77 32                	ja     c0012e7c <File::rename(char const*)+0x4a>
c0012e4a:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c0012e51:	85 c9                	test   ecx,ecx
c0012e53:	74 27                	je     c0012e7c <File::rename(char const*)+0x4a>
c0012e55:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e5b:	85 c9                	test   ecx,ecx
c0012e5d:	74 1d                	je     c0012e7c <File::rename(char const*)+0x4a>
c0012e5f:	b8 06 00 00 00       	mov    eax,0x6
c0012e64:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e68:	75 12                	jne    c0012e7c <File::rename(char const*)+0x4a>
c0012e6a:	83 c2 0d             	add    edx,0xd
c0012e6d:	50                   	push   eax
c0012e6e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e74:	52                   	push   edx
c0012e75:	51                   	push   ecx
c0012e76:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e79:	83 c4 10             	add    esp,0x10
c0012e7c:	83 c4 0c             	add    esp,0xc
c0012e7f:	c3                   	ret    

c0012e80 <File::chfatattr(unsigned char, unsigned char)>:
c0012e80:	57                   	push   edi
c0012e81:	b8 0b 00 00 00       	mov    eax,0xb
c0012e86:	56                   	push   esi
c0012e87:	53                   	push   ebx
c0012e88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e8c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e97:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e9b:	80 f9 19             	cmp    cl,0x19
c0012e9e:	77 37                	ja     c0012ed7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ea0:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c0012ea7:	85 c9                	test   ecx,ecx
c0012ea9:	74 2c                	je     c0012ed7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb1:	85 c9                	test   ecx,ecx
c0012eb3:	74 22                	je     c0012ed7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eb5:	b8 06 00 00 00       	mov    eax,0x6
c0012eba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ebe:	75 17                	jne    c0012ed7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ec0:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012ec2:	89 f0                	mov    eax,esi
c0012ec4:	83 c2 0d             	add    edx,0xd
c0012ec7:	0f b6 f0             	movzx  esi,al
c0012eca:	0f b6 db             	movzx  ebx,bl
c0012ecd:	56                   	push   esi
c0012ece:	53                   	push   ebx
c0012ecf:	52                   	push   edx
c0012ed0:	51                   	push   ecx
c0012ed1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012ed4:	83 c4 10             	add    esp,0x10
c0012ed7:	5b                   	pop    ebx
c0012ed8:	5e                   	pop    esi
c0012ed9:	5f                   	pop    edi
c0012eda:	c3                   	ret    
c0012edb:	90                   	nop

c0012edc <File::exists()>:
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	31 c0                	xor    eax,eax
c0012ee1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ee5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eec:	80 f9 19             	cmp    cl,0x19
c0012eef:	77 24                	ja     c0012f15 <File::exists()+0x39>
c0012ef1:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c0012ef8:	85 c9                	test   ecx,ecx
c0012efa:	74 19                	je     c0012f15 <File::exists()+0x39>
c0012efc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f02:	85 c9                	test   ecx,ecx
c0012f04:	74 0f                	je     c0012f15 <File::exists()+0x39>
c0012f06:	83 c2 0d             	add    edx,0xd
c0012f09:	50                   	push   eax
c0012f0a:	50                   	push   eax
c0012f0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f0d:	52                   	push   edx
c0012f0e:	51                   	push   ecx
c0012f0f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	83 c4 0c             	add    esp,0xc
c0012f18:	c3                   	ret    
c0012f19:	90                   	nop

c0012f1a <File::stat(unsigned long long*, bool*)>:
c0012f1a:	56                   	push   esi
c0012f1b:	53                   	push   ebx
c0012f1c:	50                   	push   eax
c0012f1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012f22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f26:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f2a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f35:	80 f9 19             	cmp    cl,0x19
c0012f38:	77 3d                	ja     c0012f77 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f3a:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c0012f41:	85 c9                	test   ecx,ecx
c0012f43:	74 32                	je     c0012f77 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f45:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f4b:	85 c9                	test   ecx,ecx
c0012f4d:	74 28                	je     c0012f77 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f51:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f55:	74 13                	je     c0012f6a <File::stat(unsigned long long*, bool*)+0x50>
c0012f57:	83 ec 04             	sub    esp,0x4
c0012f5a:	56                   	push   esi
c0012f5b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f61:	51                   	push   ecx
c0012f62:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f65:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f68:	eb 0a                	jmp    c0012f74 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f6a:	53                   	push   ebx
c0012f6b:	83 c2 0d             	add    edx,0xd
c0012f6e:	56                   	push   esi
c0012f6f:	52                   	push   edx
c0012f70:	51                   	push   ecx
c0012f71:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f74:	83 c4 10             	add    esp,0x10
c0012f77:	5a                   	pop    edx
c0012f78:	5b                   	pop    ebx
c0012f79:	5e                   	pop    esi
c0012f7a:	c3                   	ret    

c0012f7b <Fs::setcwd(Process*, char*)>:
c0012f7b:	55                   	push   ebp
c0012f7c:	57                   	push   edi
c0012f7d:	56                   	push   esi
c0012f7e:	53                   	push   ebx
c0012f7f:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f85:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f8c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f92:	57                   	push   edi
c0012f93:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f9a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f9e:	56                   	push   esi
c0012f9f:	e8 bc fa ff ff       	call   c0012a60 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fa4:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fa7:	e8 c0 d7 fe ff       	call   c000076c <strlen>
c0012fac:	83 c4 10             	add    esp,0x10
c0012faf:	83 f8 02             	cmp    eax,0x2
c0012fb2:	77 17                	ja     c0012fcb <Fs::setcwd(Process*, char*)+0x50>
c0012fb4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fb9:	83 e8 41             	sub    eax,0x41
c0012fbc:	83 f8 19             	cmp    eax,0x19
c0012fbf:	76 24                	jbe    c0012fe5 <Fs::setcwd(Process*, char*)+0x6a>
c0012fc1:	b8 03 00 00 00       	mov    eax,0x3
c0012fc6:	e9 e0 00 00 00       	jmp    c00130ab <Fs::setcwd(Process*, char*)+0x130>
c0012fcb:	83 ec 0c             	sub    esp,0xc
c0012fce:	56                   	push   esi
c0012fcf:	e8 98 d7 fe ff       	call   c000076c <strlen>
c0012fd4:	83 c4 10             	add    esp,0x10
c0012fd7:	83 f8 03             	cmp    eax,0x3
c0012fda:	75 34                	jne    c0013010 <Fs::setcwd(Process*, char*)+0x95>
c0012fdc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fe1:	75 2d                	jne    c0013010 <Fs::setcwd(Process*, char*)+0x95>
c0012fe3:	eb cf                	jmp    c0012fb4 <Fs::setcwd(Process*, char*)+0x39>
c0012fe5:	8b 14 85 e0 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2120]
c0012fec:	b8 05 00 00 00       	mov    eax,0x5
c0012ff1:	85 d2                	test   edx,edx
c0012ff3:	0f 84 b2 00 00 00    	je     c00130ab <Fs::setcwd(Process*, char*)+0x130>
c0012ff9:	b8 06 00 00 00       	mov    eax,0x6
c0012ffe:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013005:	0f 85 92 00 00 00    	jne    c001309d <Fs::setcwd(Process*, char*)+0x122>
c001300b:	e9 9b 00 00 00       	jmp    c00130ab <Fs::setcwd(Process*, char*)+0x130>
c0013010:	83 ec 0c             	sub    esp,0xc
c0013013:	68 14 01 00 00       	push   0x114
c0013018:	e8 7c c5 ff ff       	call   c000f599 <malloc>
c001301d:	83 c4 0c             	add    esp,0xc
c0013020:	89 c3                	mov    ebx,eax
c0013022:	55                   	push   ebp
c0013023:	56                   	push   esi
c0013024:	50                   	push   eax
c0013025:	e8 e0 fb ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001302a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001302f:	83 c4 0c             	add    esp,0xc
c0013032:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013036:	50                   	push   eax
c0013037:	8d 44 24 10          	lea    eax,[esp+0x10]
c001303b:	50                   	push   eax
c001303c:	53                   	push   ebx
c001303d:	e8 d8 fe ff ff       	call   c0012f1a <File::stat(unsigned long long*, bool*)>
c0013042:	83 c4 10             	add    esp,0x10
c0013045:	83 f8 02             	cmp    eax,0x2
c0013048:	74 04                	je     c001304e <Fs::setcwd(Process*, char*)+0xd3>
c001304a:	85 c0                	test   eax,eax
c001304c:	74 1c                	je     c001306a <Fs::setcwd(Process*, char*)+0xef>
c001304e:	b8 01 00 00 00       	mov    eax,0x1
c0013053:	85 db                	test   ebx,ebx
c0013055:	74 54                	je     c00130ab <Fs::setcwd(Process*, char*)+0x130>
c0013057:	83 ec 0c             	sub    esp,0xc
c001305a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001305c:	53                   	push   ebx
c001305d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	b8 01 00 00 00       	mov    eax,0x1
c0013068:	eb 41                	jmp    c00130ab <Fs::setcwd(Process*, char*)+0x130>
c001306a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001306f:	75 1c                	jne    c001308d <Fs::setcwd(Process*, char*)+0x112>
c0013071:	b8 02 00 00 00       	mov    eax,0x2
c0013076:	85 db                	test   ebx,ebx
c0013078:	74 31                	je     c00130ab <Fs::setcwd(Process*, char*)+0x130>
c001307a:	83 ec 0c             	sub    esp,0xc
c001307d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001307f:	53                   	push   ebx
c0013080:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	b8 02 00 00 00       	mov    eax,0x2
c001308b:	eb 1e                	jmp    c00130ab <Fs::setcwd(Process*, char*)+0x130>
c001308d:	85 db                	test   ebx,ebx
c001308f:	74 0c                	je     c001309d <Fs::setcwd(Process*, char*)+0x122>
c0013091:	83 ec 0c             	sub    esp,0xc
c0013094:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013096:	53                   	push   ebx
c0013097:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	50                   	push   eax
c001309e:	50                   	push   eax
c001309f:	56                   	push   esi
c00130a0:	57                   	push   edi
c00130a1:	e8 66 d7 fe ff       	call   c000080c <strcpy>
c00130a6:	83 c4 10             	add    esp,0x10
c00130a9:	31 c0                	xor    eax,eax
c00130ab:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130b1:	5b                   	pop    ebx
c00130b2:	5e                   	pop    esi
c00130b3:	5f                   	pop    edi
c00130b4:	5d                   	pop    ebp
c00130b5:	c3                   	ret    

c00130b6 <Directory::Directory(char const*, Process*)>:
c00130b6:	83 ec 0c             	sub    esp,0xc
c00130b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130bd:	83 ec 08             	sub    esp,0x8
c00130c0:	6a 00                	push   0x0
c00130c2:	50                   	push   eax
c00130c3:	e8 f4 dc ff ff       	call   c0010dbc <UnixFile::UnixFile(int)>
c00130c8:	83 c4 10             	add    esp,0x10
c00130cb:	ba 80 a8 02 c0       	mov    edx,0xc002a880
c00130d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d4:	89 10                	mov    DWORD PTR [eax],edx
c00130d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130da:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e4:	83 c0 0d             	add    eax,0xd
c00130e7:	83 ec 04             	sub    esp,0x4
c00130ea:	52                   	push   edx
c00130eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ef:	50                   	push   eax
c00130f0:	e8 6b f9 ff ff       	call   c0012a60 <Fs::standardiseFiles(char*, char const*, char const*)>
c00130f5:	83 c4 10             	add    esp,0x10
c00130f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130fc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130ff:	8d 50 bf             	lea    edx,[eax-0x41]
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013114:	90                   	nop
c0013115:	83 c4 0c             	add    esp,0xc
c0013118:	c3                   	ret    
c0013119:	90                   	nop

c001311a <Directory::open()>:
c001311a:	53                   	push   ebx
c001311b:	b8 0b 00 00 00       	mov    eax,0xb
c0013120:	83 ec 08             	sub    esp,0x8
c0013123:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013127:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001312e:	80 fa 19             	cmp    dl,0x19
c0013131:	77 3d                	ja     c0013170 <Directory::open()+0x56>
c0013133:	8b 14 95 e0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2120]
c001313a:	85 d2                	test   edx,edx
c001313c:	74 32                	je     c0013170 <Directory::open()+0x56>
c001313e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013144:	85 d2                	test   edx,edx
c0013146:	74 28                	je     c0013170 <Directory::open()+0x56>
c0013148:	b8 06 00 00 00       	mov    eax,0x6
c001314d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013151:	75 1d                	jne    c0013170 <Directory::open()+0x56>
c0013153:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013159:	50                   	push   eax
c001315a:	8b 02                	mov    eax,DWORD PTR [edx]
c001315c:	51                   	push   ecx
c001315d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013160:	51                   	push   ecx
c0013161:	52                   	push   edx
c0013162:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	85 c0                	test   eax,eax
c001316a:	75 04                	jne    c0013170 <Directory::open()+0x56>
c001316c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013170:	83 c4 08             	add    esp,0x8
c0013173:	5b                   	pop    ebx
c0013174:	c3                   	ret    
c0013175:	90                   	nop

c0013176 <Directory::close()>:
c0013176:	53                   	push   ebx
c0013177:	b8 0b 00 00 00       	mov    eax,0xb
c001317c:	83 ec 08             	sub    esp,0x8
c001317f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013183:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001318a:	80 fa 19             	cmp    dl,0x19
c001318d:	77 41                	ja     c00131d0 <Directory::close()+0x5a>
c001318f:	8b 1c 95 e0 de 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2120]
c0013196:	85 db                	test   ebx,ebx
c0013198:	74 36                	je     c00131d0 <Directory::close()+0x5a>
c001319a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131a1:	74 2d                	je     c00131d0 <Directory::close()+0x5a>
c00131a3:	b8 05 00 00 00       	mov    eax,0x5
c00131a8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131ac:	74 22                	je     c00131d0 <Directory::close()+0x5a>
c00131ae:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131b2:	8b 04 95 e0 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2120]
c00131b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131bf:	53                   	push   ebx
c00131c0:	53                   	push   ebx
c00131c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00131c3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131c9:	50                   	push   eax
c00131ca:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	83 c4 08             	add    esp,0x8
c00131d3:	5b                   	pop    ebx
c00131d4:	c3                   	ret    
c00131d5:	90                   	nop

c00131d6 <Directory::unlink()>:
c00131d6:	83 ec 0c             	sub    esp,0xc
c00131d9:	b8 0b 00 00 00       	mov    eax,0xb
c00131de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131e9:	80 f9 19             	cmp    cl,0x19
c00131ec:	77 2f                	ja     c001321d <Directory::unlink()+0x47>
c00131ee:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c00131f5:	85 c9                	test   ecx,ecx
c00131f7:	74 24                	je     c001321d <Directory::unlink()+0x47>
c00131f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131ff:	85 c9                	test   ecx,ecx
c0013201:	74 1a                	je     c001321d <Directory::unlink()+0x47>
c0013203:	b8 06 00 00 00       	mov    eax,0x6
c0013208:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001320c:	75 0f                	jne    c001321d <Directory::unlink()+0x47>
c001320e:	83 c2 0d             	add    edx,0xd
c0013211:	50                   	push   eax
c0013212:	50                   	push   eax
c0013213:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013215:	52                   	push   edx
c0013216:	51                   	push   ecx
c0013217:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001321a:	83 c4 10             	add    esp,0x10
c001321d:	83 c4 0c             	add    esp,0xc
c0013220:	c3                   	ret    
c0013221:	90                   	nop

c0013222 <Directory::rename(char const*)>:
c0013222:	83 ec 0c             	sub    esp,0xc
c0013225:	b8 0b 00 00 00       	mov    eax,0xb
c001322a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001322e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013235:	80 f9 19             	cmp    cl,0x19
c0013238:	77 32                	ja     c001326c <Directory::rename(char const*)+0x4a>
c001323a:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c0013241:	85 c9                	test   ecx,ecx
c0013243:	74 27                	je     c001326c <Directory::rename(char const*)+0x4a>
c0013245:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001324b:	85 c9                	test   ecx,ecx
c001324d:	74 1d                	je     c001326c <Directory::rename(char const*)+0x4a>
c001324f:	b8 06 00 00 00       	mov    eax,0x6
c0013254:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013258:	75 12                	jne    c001326c <Directory::rename(char const*)+0x4a>
c001325a:	83 c2 0d             	add    edx,0xd
c001325d:	50                   	push   eax
c001325e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013260:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013264:	52                   	push   edx
c0013265:	51                   	push   ecx
c0013266:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013269:	83 c4 10             	add    esp,0x10
c001326c:	83 c4 0c             	add    esp,0xc
c001326f:	c3                   	ret    

c0013270 <Directory::exists()>:
c0013270:	83 ec 0c             	sub    esp,0xc
c0013273:	31 c0                	xor    eax,eax
c0013275:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013279:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013280:	80 f9 19             	cmp    cl,0x19
c0013283:	77 24                	ja     c00132a9 <Directory::exists()+0x39>
c0013285:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c001328c:	85 c9                	test   ecx,ecx
c001328e:	74 19                	je     c00132a9 <Directory::exists()+0x39>
c0013290:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013296:	85 c9                	test   ecx,ecx
c0013298:	74 0f                	je     c00132a9 <Directory::exists()+0x39>
c001329a:	83 c2 0d             	add    edx,0xd
c001329d:	50                   	push   eax
c001329e:	50                   	push   eax
c001329f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132a1:	52                   	push   edx
c00132a2:	51                   	push   ecx
c00132a3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132a6:	83 c4 10             	add    esp,0x10
c00132a9:	83 c4 0c             	add    esp,0xc
c00132ac:	c3                   	ret    
c00132ad:	90                   	nop

c00132ae <Directory::read(dirent*)>:
c00132ae:	83 ec 1c             	sub    esp,0x1c
c00132b1:	b8 0b 00 00 00       	mov    eax,0xb
c00132b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132ba:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132c1:	80 fa 19             	cmp    dl,0x19
c00132c4:	77 30                	ja     c00132f6 <Directory::read(dirent*)+0x48>
c00132c6:	8b 14 95 e0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2120]
c00132cd:	85 d2                	test   edx,edx
c00132cf:	74 25                	je     c00132f6 <Directory::read(dirent*)+0x48>
c00132d1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132d8:	74 1c                	je     c00132f6 <Directory::read(dirent*)+0x48>
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132df:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132e3:	52                   	push   edx
c00132e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132e8:	6a 00                	push   0x0
c00132ea:	68 10 01 00 00       	push   0x110
c00132ef:	51                   	push   ecx
c00132f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132f3:	83 c4 20             	add    esp,0x20
c00132f6:	83 c4 1c             	add    esp,0x1c
c00132f9:	c3                   	ret    

c00132fa <Directory::create()>:
c00132fa:	83 ec 0c             	sub    esp,0xc
c00132fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013302:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013306:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001330d:	80 f9 19             	cmp    cl,0x19
c0013310:	77 2f                	ja     c0013341 <Directory::create()+0x47>
c0013312:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c0013319:	85 c9                	test   ecx,ecx
c001331b:	74 24                	je     c0013341 <Directory::create()+0x47>
c001331d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013323:	85 c9                	test   ecx,ecx
c0013325:	74 1a                	je     c0013341 <Directory::create()+0x47>
c0013327:	b8 06 00 00 00       	mov    eax,0x6
c001332c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013330:	75 0f                	jne    c0013341 <Directory::create()+0x47>
c0013332:	83 c2 0d             	add    edx,0xd
c0013335:	50                   	push   eax
c0013336:	50                   	push   eax
c0013337:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013339:	52                   	push   edx
c001333a:	51                   	push   ecx
c001333b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	83 c4 0c             	add    esp,0xc
c0013344:	c3                   	ret    
c0013345:	90                   	nop

c0013346 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013346:	b8 0a 00 00 00       	mov    eax,0xa
c001334b:	c3                   	ret    

c001334c <Bus::Bus(char const*)>:
c001334c:	83 ec 0c             	sub    esp,0xc
c001334f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013353:	83 ec 08             	sub    esp,0x8
c0013356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001335a:	50                   	push   eax
c001335b:	e8 88 09 00 00       	call   c0013ce8 <Device::Device(char const*)>
c0013360:	83 c4 10             	add    esp,0x10
c0013363:	ba 9c a8 02 c0       	mov    edx,0xc002a89c
c0013368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001336c:	89 10                	mov    DWORD PTR [eax],edx
c001336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013372:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001337c:	90                   	nop
c001337d:	83 c4 0c             	add    esp,0xc
c0013380:	c3                   	ret    
c0013381:	90                   	nop

c0013382 <Bus::~Bus()>:
c0013382:	83 ec 0c             	sub    esp,0xc
c0013385:	ba 9c a8 02 c0       	mov    edx,0xc002a89c
c001338a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338e:	89 10                	mov    DWORD PTR [eax],edx
c0013390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013394:	83 ec 0c             	sub    esp,0xc
c0013397:	50                   	push   eax
c0013398:	e8 15 06 00 00       	call   c00139b2 <Device::~Device()>
c001339d:	83 c4 10             	add    esp,0x10
c00133a0:	90                   	nop
c00133a1:	83 c4 0c             	add    esp,0xc
c00133a4:	c3                   	ret    
c00133a5:	90                   	nop

c00133a6 <Bus::~Bus()>:
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	83 ec 0c             	sub    esp,0xc
c00133ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b0:	e8 cd ff ff ff       	call   c0013382 <Bus::~Bus()>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	83 ec 08             	sub    esp,0x8
c00133bb:	68 58 01 00 00       	push   0x158
c00133c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133c4:	e8 0a f2 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c00133c9:	83 c4 10             	add    esp,0x10
c00133cc:	83 c4 0c             	add    esp,0xc
c00133cf:	c3                   	ret    

c00133d0 <Buzzer::Buzzer(char const*)>:
c00133d0:	83 ec 0c             	sub    esp,0xc
c00133d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d7:	83 ec 08             	sub    esp,0x8
c00133da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133de:	50                   	push   eax
c00133df:	e8 04 09 00 00       	call   c0013ce8 <Device::Device(char const*)>
c00133e4:	83 c4 10             	add    esp,0x10
c00133e7:	ba c8 a8 02 c0       	mov    edx,0xc002a8c8
c00133ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f0:	89 10                	mov    DWORD PTR [eax],edx
c00133f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013404:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001340e:	90                   	nop
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	c3                   	ret    
c0013413:	90                   	nop

c0013414 <Buzzer::~Buzzer()>:
c0013414:	83 ec 0c             	sub    esp,0xc
c0013417:	ba c8 a8 02 c0       	mov    edx,0xc002a8c8
c001341c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013420:	89 10                	mov    DWORD PTR [eax],edx
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	83 ec 0c             	sub    esp,0xc
c0013429:	50                   	push   eax
c001342a:	e8 83 05 00 00       	call   c00139b2 <Device::~Device()>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	90                   	nop
c0013433:	83 c4 0c             	add    esp,0xc
c0013436:	c3                   	ret    
c0013437:	90                   	nop

c0013438 <Buzzer::~Buzzer()>:
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	83 ec 0c             	sub    esp,0xc
c001343e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013442:	e8 cd ff ff ff       	call   c0013414 <Buzzer::~Buzzer()>
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	83 ec 08             	sub    esp,0x8
c001344d:	68 5c 01 00 00       	push   0x15c
c0013452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013456:	e8 78 f1 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c001345b:	83 c4 10             	add    esp,0x10
c001345e:	83 c4 0c             	add    esp,0xc
c0013461:	c3                   	ret    

c0013462 <Buzzer::stop()>:
c0013462:	83 ec 14             	sub    esp,0x14
c0013465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013469:	8b 10                	mov    edx,DWORD PTR [eax]
c001346b:	6a 00                	push   0x0
c001346d:	50                   	push   eax
c001346e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013471:	83 c4 1c             	add    esp,0x1c
c0013474:	c3                   	ret    

c0013475 <beepThread(void*)>:
c0013475:	53                   	push   ebx
c0013476:	83 ec 08             	sub    esp,0x8
c0013479:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001347e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013482:	48                   	dec    eax
c0013483:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0013488:	75 01                	jne    c001348b <beepThread(void*)+0x16>
c001348a:	fb                   	sti    
c001348b:	50                   	push   eax
c001348c:	50                   	push   eax
c001348d:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013492:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013498:	52                   	push   edx
c0013499:	50                   	push   eax
c001349a:	e8 dc a7 00 00       	call   c001dc7b <nanoSleep(unsigned long long)>
c001349f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134a2:	e8 bb ff ff ff       	call   c0013462 <Buzzer::stop()>
c00134a7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134af:	83 c4 18             	add    esp,0x18
c00134b2:	5b                   	pop    ebx
c00134b3:	e9 bf a6 00 00       	jmp    c001db77 <blockTask(TaskState)>

c00134b8 <Buzzer::beep(int, int, bool)>:
c00134b8:	57                   	push   edi
c00134b9:	56                   	push   esi
c00134ba:	53                   	push   ebx
c00134bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134c7:	52                   	push   edx
c00134c8:	52                   	push   edx
c00134c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00134cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134cf:	56                   	push   esi
c00134d0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134d3:	83 c4 10             	add    esp,0x10
c00134d6:	89 f8                	mov    eax,edi
c00134d8:	84 c0                	test   al,al
c00134da:	74 1f                	je     c00134fb <Buzzer::beep(int, int, bool)+0x43>
c00134dc:	50                   	push   eax
c00134dd:	50                   	push   eax
c00134de:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134e4:	99                   	cdq    
c00134e5:	52                   	push   edx
c00134e6:	50                   	push   eax
c00134e7:	e8 8f a7 00 00       	call   c001dc7b <nanoSleep(unsigned long long)>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134f3:	5b                   	pop    ebx
c00134f4:	5e                   	pop    esi
c00134f5:	5f                   	pop    edi
c00134f6:	e9 67 ff ff ff       	jmp    c0013462 <Buzzer::stop()>
c00134fb:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013501:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0013506:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001350e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013512:	c7 44 24 14 75 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013475
c001351a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001351e:	5b                   	pop    ebx
c001351f:	5e                   	pop    esi
c0013520:	5f                   	pop    edi
c0013521:	e9 56 a2 00 00       	jmp    c001d77c <Process::createThread(void (*)(void*), void*, int)>

c0013526 <User::loadClockSettings(int)>:
c0013526:	53                   	push   ebx
c0013527:	83 ec 14             	sub    esp,0x14
c001352a:	68 14 01 00 00       	push   0x114
c001352f:	e8 65 c0 ff ff       	call   c000f599 <malloc>
c0013534:	83 c4 0c             	add    esp,0xc
c0013537:	89 c3                	mov    ebx,eax
c0013539:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c001353f:	68 f0 a8 02 c0       	push   0xc002a8f0
c0013544:	50                   	push   eax
c0013545:	e8 c0 f6 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001354a:	58                   	pop    eax
c001354b:	5a                   	pop    edx
c001354c:	6a 01                	push   0x1
c001354e:	53                   	push   ebx
c001354f:	e8 1a f7 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c0013554:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013557:	e8 70 f7 ff ff       	call   c0012ccc <File::close()>
c001355c:	83 c4 10             	add    esp,0x10
c001355f:	85 db                	test   ebx,ebx
c0013561:	74 0f                	je     c0013572 <User::loadClockSettings(int)+0x4c>
c0013563:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013565:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013569:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001356c:	83 c4 08             	add    esp,0x8
c001356f:	5b                   	pop    ebx
c0013570:	ff e0                	jmp    eax
c0013572:	83 c4 08             	add    esp,0x8
c0013575:	5b                   	pop    ebx
c0013576:	c3                   	ret    
c0013577:	90                   	nop

c0013578 <Clock::Clock(char const*)>:
c0013578:	83 ec 0c             	sub    esp,0xc
c001357b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357f:	83 ec 08             	sub    esp,0x8
c0013582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013586:	50                   	push   eax
c0013587:	e8 5c 07 00 00       	call   c0013ce8 <Device::Device(char const*)>
c001358c:	83 c4 10             	add    esp,0x10
c001358f:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0013594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013598:	89 10                	mov    DWORD PTR [eax],edx
c001359a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00135a8:	90                   	nop
c00135a9:	83 c4 0c             	add    esp,0xc
c00135ac:	c3                   	ret    
c00135ad:	90                   	nop

c00135ae <Clock::~Clock()>:
c00135ae:	83 ec 0c             	sub    esp,0xc
c00135b1:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c00135b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ba:	89 10                	mov    DWORD PTR [eax],edx
c00135bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c0:	83 ec 0c             	sub    esp,0xc
c00135c3:	50                   	push   eax
c00135c4:	e8 e9 03 00 00       	call   c00139b2 <Device::~Device()>
c00135c9:	83 c4 10             	add    esp,0x10
c00135cc:	90                   	nop
c00135cd:	83 c4 0c             	add    esp,0xc
c00135d0:	c3                   	ret    
c00135d1:	90                   	nop

c00135d2 <Clock::~Clock()>:
c00135d2:	83 ec 0c             	sub    esp,0xc
c00135d5:	83 ec 0c             	sub    esp,0xc
c00135d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135dc:	e8 cd ff ff ff       	call   c00135ae <Clock::~Clock()>
c00135e1:	83 c4 10             	add    esp,0x10
c00135e4:	83 ec 08             	sub    esp,0x8
c00135e7:	68 58 01 00 00       	push   0x158
c00135ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f0:	e8 de ef ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c00135f5:	83 c4 10             	add    esp,0x10
c00135f8:	83 c4 0c             	add    esp,0xc
c00135fb:	c3                   	ret    

c00135fc <Clock::timeInSecondsLocal()>:
c00135fc:	53                   	push   ebx
c00135fd:	83 ec 14             	sub    esp,0x14
c0013600:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013604:	8b 10                	mov    edx,DWORD PTR [eax]
c0013606:	50                   	push   eax
c0013607:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001360a:	0f b6 0d 5c da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da5c
c0013611:	03 0d 60 da 02 c0    	add    ecx,DWORD PTR ds:0xc002da60
c0013617:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001361d:	89 cb                	mov    ebx,ecx
c001361f:	c1 fb 1f             	sar    ebx,0x1f
c0013622:	01 c8                	add    eax,ecx
c0013624:	11 da                	adc    edx,ebx
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	31 c9                	xor    ecx,ecx
c001362b:	80 3d 5d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da5d,0x0
c0013632:	74 05                	je     c0013639 <Clock::timeInSecondsLocal()+0x3d>
c0013634:	b9 08 07 00 00       	mov    ecx,0x708
c0013639:	31 db                	xor    ebx,ebx
c001363b:	01 c8                	add    eax,ecx
c001363d:	11 da                	adc    edx,ebx
c001363f:	83 c4 08             	add    esp,0x8
c0013642:	5b                   	pop    ebx
c0013643:	c3                   	ret    

c0013644 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013644:	57                   	push   edi
c0013645:	56                   	push   esi
c0013646:	53                   	push   ebx
c0013647:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001364b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001364f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013651:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013655:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013658:	0f b6 05 5c da 02 c0 	movzx  eax,BYTE PTR ds:0xc002da5c
c001365f:	03 05 60 da 02 c0    	add    eax,DWORD PTR ds:0xc002da60
c0013665:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001366b:	99                   	cdq    
c001366c:	29 c6                	sub    esi,eax
c001366e:	19 d7                	sbb    edi,edx
c0013670:	89 f0                	mov    eax,esi
c0013672:	89 fa                	mov    edx,edi
c0013674:	31 f6                	xor    esi,esi
c0013676:	80 3d 5d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da5d,0x0
c001367d:	74 05                	je     c0013684 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001367f:	be 08 07 00 00       	mov    esi,0x708
c0013684:	31 ff                	xor    edi,edi
c0013686:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001368a:	29 f0                	sub    eax,esi
c001368c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013690:	19 fa                	sbb    edx,edi
c0013692:	89 d8                	mov    eax,ebx
c0013694:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013698:	5b                   	pop    ebx
c0013699:	5e                   	pop    esi
c001369a:	5f                   	pop    edi
c001369b:	ff e0                	jmp    eax

c001369d <datetimeToSeconds(datetime_t)>:
c001369d:	55                   	push   ebp
c001369e:	57                   	push   edi
c001369f:	56                   	push   esi
c00136a0:	53                   	push   ebx
c00136a1:	83 ec 14             	sub    esp,0x14
c00136a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00136a8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136ac:	89 d3                	mov    ebx,edx
c00136ae:	0f b6 c6             	movzx  eax,dh
c00136b1:	c1 eb 10             	shr    ebx,0x10
c00136b4:	48                   	dec    eax
c00136b5:	66 81 eb 6c 07       	sub    bx,0x76c
c00136ba:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00136be:	0f b6 f5             	movzx  esi,ch
c00136c1:	89 cf                	mov    edi,ecx
c00136c3:	6b f6 3c             	imul   esi,esi,0x3c
c00136c6:	c1 ef 10             	shr    edi,0x10
c00136c9:	0f b6 c9             	movzx  ecx,cl
c00136cc:	89 f8                	mov    eax,edi
c00136ce:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136d4:	0f b6 f8             	movzx  edi,al
c00136d7:	0f b6 d2             	movzx  edx,dl
c00136da:	01 fe                	add    esi,edi
c00136dc:	01 f1                	add    ecx,esi
c00136de:	0f b7 f3             	movzx  esi,bx
c00136e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00136e5:	c1 f9 1f             	sar    ecx,0x1f
c00136e8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00136ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00136f1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00136f6:	8b 0c 8d 60 a9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd56a0]
c00136fd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013701:	76 29                	jbe    c001372c <datetimeToSeconds(datetime_t)+0x8f>
c0013703:	f6 c3 03             	test   bl,0x3
c0013706:	75 24                	jne    c001372c <datetimeToSeconds(datetime_t)+0x8f>
c0013708:	31 d2                	xor    edx,edx
c001370a:	bf 64 00 00 00       	mov    edi,0x64
c001370f:	89 d8                	mov    eax,ebx
c0013711:	66 f7 f7             	div    di
c0013714:	66 85 d2             	test   dx,dx
c0013717:	75 12                	jne    c001372b <datetimeToSeconds(datetime_t)+0x8e>
c0013719:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001371f:	bf 90 01 00 00       	mov    edi,0x190
c0013724:	99                   	cdq    
c0013725:	f7 ff                	idiv   edi
c0013727:	85 d2                	test   edx,edx
c0013729:	75 01                	jne    c001372c <datetimeToSeconds(datetime_t)+0x8f>
c001372b:	41                   	inc    ecx
c001372c:	66 83 fb 46          	cmp    bx,0x46
c0013730:	76 45                	jbe    c0013777 <datetimeToSeconds(datetime_t)+0xda>
c0013732:	bb 46 00 00 00       	mov    ebx,0x46
c0013737:	bf 64 00 00 00       	mov    edi,0x64
c001373c:	bd 90 01 00 00       	mov    ebp,0x190
c0013741:	b8 6d 01 00 00       	mov    eax,0x16d
c0013746:	f6 c3 03             	test   bl,0x3
c0013749:	75 23                	jne    c001376e <datetimeToSeconds(datetime_t)+0xd1>
c001374b:	89 d8                	mov    eax,ebx
c001374d:	99                   	cdq    
c001374e:	f7 ff                	idiv   edi
c0013750:	b8 6e 01 00 00       	mov    eax,0x16e
c0013755:	85 d2                	test   edx,edx
c0013757:	75 15                	jne    c001376e <datetimeToSeconds(datetime_t)+0xd1>
c0013759:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001375f:	99                   	cdq    
c0013760:	f7 fd                	idiv   ebp
c0013762:	83 fa 01             	cmp    edx,0x1
c0013765:	19 c0                	sbb    eax,eax
c0013767:	f7 d0                	not    eax
c0013769:	05 6e 01 00 00       	add    eax,0x16e
c001376e:	01 c1                	add    ecx,eax
c0013770:	43                   	inc    ebx
c0013771:	39 f3                	cmp    ebx,esi
c0013773:	7c cc                	jl     c0013741 <datetimeToSeconds(datetime_t)+0xa4>
c0013775:	eb 35                	jmp    c00137ac <datetimeToSeconds(datetime_t)+0x10f>
c0013777:	74 33                	je     c00137ac <datetimeToSeconds(datetime_t)+0x10f>
c0013779:	b8 45 00 00 00       	mov    eax,0x45
c001377e:	89 c2                	mov    edx,eax
c0013780:	83 e2 03             	and    edx,0x3
c0013783:	39 f0                	cmp    eax,esi
c0013785:	7e 0f                	jle    c0013796 <datetimeToSeconds(datetime_t)+0xf9>
c0013787:	83 fa 01             	cmp    edx,0x1
c001378a:	19 d2                	sbb    edx,edx
c001378c:	48                   	dec    eax
c001378d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013794:	eb e8                	jmp    c001377e <datetimeToSeconds(datetime_t)+0xe1>
c0013796:	b8 6d 01 00 00       	mov    eax,0x16d
c001379b:	85 d2                	test   edx,edx
c001379d:	75 0b                	jne    c00137aa <datetimeToSeconds(datetime_t)+0x10d>
c001379f:	66 83 fb 01          	cmp    bx,0x1
c00137a3:	19 c0                	sbb    eax,eax
c00137a5:	05 6e 01 00 00       	add    eax,0x16e
c00137aa:	29 c1                	sub    ecx,eax
c00137ac:	b8 80 51 01 00       	mov    eax,0x15180
c00137b1:	f7 e9                	imul   ecx
c00137b3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00137b7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00137bb:	83 c4 14             	add    esp,0x14
c00137be:	5b                   	pop    ebx
c00137bf:	5e                   	pop    esi
c00137c0:	5f                   	pop    edi
c00137c1:	5d                   	pop    ebp
c00137c2:	c3                   	ret    
c00137c3:	90                   	nop

c00137c4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137c4:	57                   	push   edi
c00137c5:	56                   	push   esi
c00137c6:	53                   	push   ebx
c00137c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00137cd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00137d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137d8:	e8 c0 fe ff ff       	call   c001369d <datetimeToSeconds(datetime_t)>
c00137dd:	59                   	pop    ecx
c00137de:	0f b6 0d 5c da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da5c
c00137e5:	5b                   	pop    ebx
c00137e6:	03 0d 60 da 02 c0    	add    ecx,DWORD PTR ds:0xc002da60
c00137ec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137f2:	89 cb                	mov    ebx,ecx
c00137f4:	c1 fb 1f             	sar    ebx,0x1f
c00137f7:	29 c8                	sub    eax,ecx
c00137f9:	19 da                	sbb    edx,ebx
c00137fb:	31 c9                	xor    ecx,ecx
c00137fd:	80 3d 5d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da5d,0x0
c0013804:	74 05                	je     c001380b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013806:	b9 08 07 00 00       	mov    ecx,0x708
c001380b:	31 db                	xor    ebx,ebx
c001380d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013811:	29 c8                	sub    eax,ecx
c0013813:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013817:	19 da                	sbb    edx,ebx
c0013819:	89 f8                	mov    eax,edi
c001381b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001381f:	5b                   	pop    ebx
c0013820:	5e                   	pop    esi
c0013821:	5f                   	pop    edi
c0013822:	ff e0                	jmp    eax

c0013824 <secondsToDatetime(unsigned long long)>:
c0013824:	55                   	push   ebp
c0013825:	57                   	push   edi
c0013826:	56                   	push   esi
c0013827:	53                   	push   ebx
c0013828:	83 ec 1c             	sub    esp,0x1c
c001382b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001382f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013833:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013837:	6a 00                	push   0x0
c0013839:	68 80 51 01 00       	push   0x15180
c001383e:	55                   	push   ebp
c001383f:	57                   	push   edi
c0013840:	e8 9f 2e 01 00       	call   c00266e4 <__udivdi3>
c0013845:	83 c4 10             	add    esp,0x10
c0013848:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001384e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013852:	6a 00                	push   0x0
c0013854:	68 80 51 01 00       	push   0x15180
c0013859:	55                   	push   ebp
c001385a:	57                   	push   edi
c001385b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013860:	e8 7f 2f 01 00       	call   c00267e4 <__umoddi3>
c0013865:	83 c4 10             	add    esp,0x10
c0013868:	99                   	cdq    
c0013869:	f7 ff                	idiv   edi
c001386b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013870:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013873:	89 d0                	mov    eax,edx
c0013875:	99                   	cdq    
c0013876:	f7 ff                	idiv   edi
c0013878:	85 db                	test   ebx,ebx
c001387a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001387d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013880:	79 11                	jns    c0013893 <secondsToDatetime(unsigned long long)+0x6f>
c0013882:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013886:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001388c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013891:	eb 07                	jmp    c001389a <secondsToDatetime(unsigned long long)+0x76>
c0013893:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013898:	89 d8                	mov    eax,ebx
c001389a:	bf b4 05 00 00       	mov    edi,0x5b4
c001389f:	99                   	cdq    
c00138a0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138a5:	f7 f9                	idiv   ecx
c00138a7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138b0:	31 d2                	xor    edx,edx
c00138b2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00138ba:	01 c3                	add    ebx,eax
c00138bc:	89 d8                	mov    eax,ebx
c00138be:	f7 f1                	div    ecx
c00138c0:	31 d2                	xor    edx,edx
c00138c2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138c5:	89 d8                	mov    eax,ebx
c00138c7:	f7 f7                	div    edi
c00138c9:	31 d2                	xor    edx,edx
c00138cb:	29 c1                	sub    ecx,eax
c00138cd:	89 d8                	mov    eax,ebx
c00138cf:	f7 f5                	div    ebp
c00138d1:	bd 6d 01 00 00       	mov    ebp,0x16d
c00138d6:	29 c1                	sub    ecx,eax
c00138d8:	31 d2                	xor    edx,edx
c00138da:	89 c8                	mov    eax,ecx
c00138dc:	f7 f5                	div    ebp
c00138de:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00138e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138e7:	31 d2                	xor    edx,edx
c00138e9:	89 c8                	mov    eax,ecx
c00138eb:	f7 f5                	div    ebp
c00138ed:	31 d2                	xor    edx,edx
c00138ef:	01 c3                	add    ebx,eax
c00138f1:	89 c8                	mov    eax,ecx
c00138f3:	f7 f7                	div    edi
c00138f5:	bf 99 00 00 00       	mov    edi,0x99
c00138fa:	29 c3                	sub    ebx,eax
c00138fc:	31 d2                	xor    edx,edx
c00138fe:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013906:	29 c3                	sub    ebx,eax
c0013908:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001390b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001390e:	bb 05 00 00 00       	mov    ebx,0x5
c0013913:	83 c1 02             	add    ecx,0x2
c0013916:	89 c8                	mov    eax,ecx
c0013918:	f7 f7                	div    edi
c001391a:	31 d2                	xor    edx,edx
c001391c:	89 c7                	mov    edi,eax
c001391e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013924:	83 c0 02             	add    eax,0x2
c0013927:	f7 f3                	div    ebx
c0013929:	89 eb                	mov    ebx,ebp
c001392b:	29 c3                	sub    ebx,eax
c001392d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013933:	88 1e                	mov    BYTE PTR [esi],bl
c0013935:	19 c0                	sbb    eax,eax
c0013937:	31 d2                	xor    edx,edx
c0013939:	83 e0 0c             	and    eax,0xc
c001393c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013940:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013948:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001394c:	83 f9 01             	cmp    ecx,0x1
c001394f:	0f 96 c2             	setbe  dl
c0013952:	41                   	inc    ecx
c0013953:	01 d0                	add    eax,edx
c0013955:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013958:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001395c:	83 c4 1c             	add    esp,0x1c
c001395f:	89 f0                	mov    eax,esi
c0013961:	5b                   	pop    ebx
c0013962:	5e                   	pop    esi
c0013963:	5f                   	pop    edi
c0013964:	5d                   	pop    ebp
c0013965:	c2 04 00             	ret    0x4

c0013968 <Clock::timeInDatetimeLocal()>:
c0013968:	53                   	push   ebx
c0013969:	83 ec 14             	sub    esp,0x14
c001396c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013970:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013974:	e8 83 fc ff ff       	call   c00135fc <Clock::timeInSecondsLocal()>
c0013979:	83 c4 0c             	add    esp,0xc
c001397c:	52                   	push   edx
c001397d:	50                   	push   eax
c001397e:	53                   	push   ebx
c001397f:	e8 a0 fe ff ff       	call   c0013824 <secondsToDatetime(unsigned long long)>
c0013984:	89 d8                	mov    eax,ebx
c0013986:	83 c4 14             	add    esp,0x14
c0013989:	5b                   	pop    ebx
c001398a:	c2 04 00             	ret    0x4
c001398d:	90                   	nop

c001398e <Device::hibernate()>:
c001398e:	c3                   	ret    
c001398f:	90                   	nop

c0013990 <Device::wake()>:
c0013990:	c3                   	ret    
c0013991:	90                   	nop

c0013992 <Device::detect()>:
c0013992:	c3                   	ret    
c0013993:	90                   	nop

c0013994 <Device::disableLegacy()>:
c0013994:	c3                   	ret    
c0013995:	90                   	nop

c0013996 <Device::powerSaving(PowerSavingLevel)>:
c0013996:	c3                   	ret    
c0013997:	90                   	nop

c0013998 <DriverlessDevice::close(int, int, void*)>:
c0013998:	31 c0                	xor    eax,eax
c001399a:	c3                   	ret    
c001399b:	90                   	nop

c001399c <DriverlessDevice::detect()>:
c001399c:	c3                   	ret    
c001399d:	90                   	nop

c001399e <DriverlessDevice::open(int, int, void*)>:
c001399e:	83 ec 18             	sub    esp,0x18
c00139a1:	68 90 a9 02 c0       	push   0xc002a990
c00139a6:	e8 6c 64 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c00139ab:	83 c8 ff             	or     eax,0xffffffff
c00139ae:	83 c4 1c             	add    esp,0x1c
c00139b1:	c3                   	ret    

c00139b2 <Device::~Device()>:
c00139b2:	ba f0 a9 02 c0       	mov    edx,0xc002a9f0
c00139b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139bb:	89 10                	mov    DWORD PTR [eax],edx
c00139bd:	90                   	nop
c00139be:	c3                   	ret    
c00139bf:	90                   	nop

c00139c0 <Device::~Device()>:
c00139c0:	83 ec 0c             	sub    esp,0xc
c00139c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139c7:	e8 e6 ff ff ff       	call   c00139b2 <Device::~Device()>
c00139cc:	83 c4 04             	add    esp,0x4
c00139cf:	83 ec 08             	sub    esp,0x8
c00139d2:	68 58 01 00 00       	push   0x158
c00139d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139db:	e8 f3 eb ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c00139e0:	83 c4 10             	add    esp,0x10
c00139e3:	83 c4 0c             	add    esp,0xc
c00139e6:	c3                   	ret    
c00139e7:	90                   	nop

c00139e8 <Device::findAndLoadDriver()>:
c00139e8:	c7 44 24 04 ae a9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a9ae
c00139f0:	e9 b6 ec ff ff       	jmp    c00126ab <Dbg::kprintf(char const*, ...)>
c00139f5:	90                   	nop

c00139f6 <Device::preOpenPCI(PCIDeviceInfo)>:
c00139f6:	57                   	push   edi
c00139f7:	b9 09 00 00 00       	mov    ecx,0x9
c00139fc:	56                   	push   esi
c00139fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a01:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a05:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a0f:	81 c7 18 01 00 00    	add    edi,0x118
c0013a15:	fc                   	cld    
c0013a16:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a18:	5e                   	pop    esi
c0013a19:	5f                   	pop    edi
c0013a1a:	c3                   	ret    
c0013a1b:	90                   	nop

c0013a1c <Device::preOpenACPI(void*, char*, char*)>:
c0013a1c:	57                   	push   edi
c0013a1d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a22:	56                   	push   esi
c0013a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a2b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a35:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a3b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a41:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a47:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a4c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a52:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a58:	5e                   	pop    esi
c0013a59:	5f                   	pop    edi
c0013a5a:	c3                   	ret    
c0013a5b:	90                   	nop

c0013a5c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a60:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a65:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a6c:	75 0b                	jne    c0013a79 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a74:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a77:	eb 1e                	jmp    c0013a97 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a79:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0013a7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a84:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a8a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a8c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a94:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a97:	ff e0                	jmp    eax
c0013a99:	90                   	nop

c0013a9a <Device::getParent()>:
c0013a9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a9e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013aa4:	c3                   	ret    
c0013aa5:	90                   	nop

c0013aa6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aaa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013aaf:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ab6:	75 0b                	jne    c0013ac3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ab8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013aba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013abe:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ac1:	eb 1e                	jmp    c0013ae1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ac3:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0013ac8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ace:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ad4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ad6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ada:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ade:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013ae1:	ff e0                	jmp    eax
c0013ae3:	90                   	nop

c0013ae4 <Device::addChild(Device*)>:
c0013ae4:	53                   	push   ebx
c0013ae5:	83 ec 08             	sub    esp,0x8
c0013ae8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013af0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013af6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013afc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013afe:	85 d2                	test   edx,edx
c0013b00:	74 04                	je     c0013b06 <Device::addChild(Device*)+0x22>
c0013b02:	89 d3                	mov    ebx,edx
c0013b04:	eb f6                	jmp    c0013afc <Device::addChild(Device*)+0x18>
c0013b06:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b09:	83 ec 0c             	sub    esp,0xc
c0013b0c:	6a 08                	push   0x8
c0013b0e:	e8 86 ba ff ff       	call   c000f599 <malloc>
c0013b13:	89 03                	mov    DWORD PTR [ebx],eax
c0013b15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b22:	83 c4 18             	add    esp,0x18
c0013b25:	5b                   	pop    ebx
c0013b26:	c3                   	ret    
c0013b27:	90                   	nop

c0013b28 <Device::removeAllChildren()>:
c0013b28:	56                   	push   esi
c0013b29:	53                   	push   ebx
c0013b2a:	52                   	push   edx
c0013b2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b2f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b38:	74 17                	je     c0013b51 <Device::removeAllChildren()+0x29>
c0013b3a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b3d:	85 c0                	test   eax,eax
c0013b3f:	74 0c                	je     c0013b4d <Device::removeAllChildren()+0x25>
c0013b41:	83 ec 0c             	sub    esp,0xc
c0013b44:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b46:	50                   	push   eax
c0013b47:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b4a:	83 c4 10             	add    esp,0x10
c0013b4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b4f:	eb e4                	jmp    c0013b35 <Device::removeAllChildren()+0xd>
c0013b51:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b5d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b6a:	58                   	pop    eax
c0013b6b:	5b                   	pop    ebx
c0013b6c:	5e                   	pop    esi
c0013b6d:	c3                   	ret    

c0013b6e <Device::hibernateAll()>:
c0013b6e:	53                   	push   ebx
c0013b6f:	83 ec 14             	sub    esp,0x14
c0013b72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b78:	53                   	push   ebx
c0013b79:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b7c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b82:	83 c4 10             	add    esp,0x10
c0013b85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b88:	74 0f                	je     c0013b99 <Device::hibernateAll()+0x2b>
c0013b8a:	83 ec 0c             	sub    esp,0xc
c0013b8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b90:	e8 d9 ff ff ff       	call   c0013b6e <Device::hibernateAll()>
c0013b95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b97:	eb e9                	jmp    c0013b82 <Device::hibernateAll()+0x14>
c0013b99:	83 c4 08             	add    esp,0x8
c0013b9c:	5b                   	pop    ebx
c0013b9d:	c3                   	ret    

c0013b9e <Device::wakeAll()>:
c0013b9e:	53                   	push   ebx
c0013b9f:	83 ec 14             	sub    esp,0x14
c0013ba2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ba6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba8:	53                   	push   ebx
c0013ba9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013bac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bb2:	83 c4 10             	add    esp,0x10
c0013bb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bb8:	74 0f                	je     c0013bc9 <Device::wakeAll()+0x2b>
c0013bba:	83 ec 0c             	sub    esp,0xc
c0013bbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bc0:	e8 d9 ff ff ff       	call   c0013b9e <Device::wakeAll()>
c0013bc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bc7:	eb e9                	jmp    c0013bb2 <Device::wakeAll()+0x14>
c0013bc9:	83 c4 08             	add    esp,0x8
c0013bcc:	5b                   	pop    ebx
c0013bcd:	c3                   	ret    

c0013bce <Device::detectAll()>:
c0013bce:	53                   	push   ebx
c0013bcf:	83 ec 14             	sub    esp,0x14
c0013bd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bd8:	53                   	push   ebx
c0013bd9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013bdc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013be2:	83 c4 10             	add    esp,0x10
c0013be5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013be8:	74 0f                	je     c0013bf9 <Device::detectAll()+0x2b>
c0013bea:	83 ec 0c             	sub    esp,0xc
c0013bed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bf0:	e8 d9 ff ff ff       	call   c0013bce <Device::detectAll()>
c0013bf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bf7:	eb e9                	jmp    c0013be2 <Device::detectAll()+0x14>
c0013bf9:	83 c4 08             	add    esp,0x8
c0013bfc:	5b                   	pop    ebx
c0013bfd:	c3                   	ret    

c0013bfe <Device::disableLegacyAll()>:
c0013bfe:	53                   	push   ebx
c0013bff:	83 ec 14             	sub    esp,0x14
c0013c02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c08:	53                   	push   ebx
c0013c09:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c12:	83 c4 10             	add    esp,0x10
c0013c15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c18:	74 0f                	je     c0013c29 <Device::disableLegacyAll()+0x2b>
c0013c1a:	83 ec 0c             	sub    esp,0xc
c0013c1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c20:	e8 d9 ff ff ff       	call   c0013bfe <Device::disableLegacyAll()>
c0013c25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c27:	eb e9                	jmp    c0013c12 <Device::disableLegacyAll()+0x14>
c0013c29:	83 c4 08             	add    esp,0x8
c0013c2c:	5b                   	pop    ebx
c0013c2d:	c3                   	ret    

c0013c2e <Device::loadDriversForAll()>:
c0013c2e:	53                   	push   ebx
c0013c2f:	83 ec 08             	sub    esp,0x8
c0013c32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c36:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c3d:	75 0c                	jne    c0013c4b <Device::loadDriversForAll()+0x1d>
c0013c3f:	83 ec 0c             	sub    esp,0xc
c0013c42:	53                   	push   ebx
c0013c43:	e8 a0 fd ff ff       	call   c00139e8 <Device::findAndLoadDriver()>
c0013c48:	83 c4 10             	add    esp,0x10
c0013c4b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c54:	74 12                	je     c0013c68 <Device::loadDriversForAll()+0x3a>
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c5c:	e8 cd ff ff ff       	call   c0013c2e <Device::loadDriversForAll()>
c0013c61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c63:	83 c4 10             	add    esp,0x10
c0013c66:	eb e9                	jmp    c0013c51 <Device::loadDriversForAll()+0x23>
c0013c68:	83 c4 08             	add    esp,0x8
c0013c6b:	5b                   	pop    ebx
c0013c6c:	c3                   	ret    
c0013c6d:	90                   	nop

c0013c6e <Device::closeAll()>:
c0013c6e:	53                   	push   ebx
c0013c6f:	83 ec 08             	sub    esp,0x8
c0013c72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c78:	6a 00                	push   0x0
c0013c7a:	6a 00                	push   0x0
c0013c7c:	6a 00                	push   0x0
c0013c7e:	53                   	push   ebx
c0013c7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c82:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c88:	83 c4 10             	add    esp,0x10
c0013c8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c8e:	74 0f                	je     c0013c9f <Device::closeAll()+0x31>
c0013c90:	83 ec 0c             	sub    esp,0xc
c0013c93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c96:	e8 d3 ff ff ff       	call   c0013c6e <Device::closeAll()>
c0013c9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c9d:	eb e9                	jmp    c0013c88 <Device::closeAll()+0x1a>
c0013c9f:	83 c4 08             	add    esp,0x8
c0013ca2:	5b                   	pop    ebx
c0013ca3:	c3                   	ret    

c0013ca4 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ca4:	56                   	push   esi
c0013ca5:	53                   	push   ebx
c0013ca6:	83 ec 0c             	sub    esp,0xc
c0013ca9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cad:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013cb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cb3:	56                   	push   esi
c0013cb4:	53                   	push   ebx
c0013cb5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013cb8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cc4:	74 0f                	je     c0013cd5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013cc6:	52                   	push   edx
c0013cc7:	52                   	push   edx
c0013cc8:	56                   	push   esi
c0013cc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ccc:	e8 d3 ff ff ff       	call   c0013ca4 <Device::powerSavingAll(PowerSavingLevel)>
c0013cd1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cd3:	eb e9                	jmp    c0013cbe <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013cd5:	58                   	pop    eax
c0013cd6:	5b                   	pop    ebx
c0013cd7:	5e                   	pop    esi
c0013cd8:	c3                   	ret    
c0013cd9:	90                   	nop

c0013cda <Device::setName(char const*)>:
c0013cda:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ce2:	e9 25 cb fe ff       	jmp    c000080c <strcpy>
c0013ce7:	90                   	nop

c0013ce8 <Device::Device(char const*)>:
c0013ce8:	83 ec 1c             	sub    esp,0x1c
c0013ceb:	ba f0 a9 02 c0       	mov    edx,0xc002a9f0
c0013cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf4:	89 10                	mov    DWORD PTR [eax],edx
c0013cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cfa:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d08:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d16:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d24:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d2e:	83 ec 08             	sub    esp,0x8
c0013d31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d39:	e8 9c ff ff ff       	call   c0013cda <Device::setName(char const*)>
c0013d3e:	83 c4 10             	add    esp,0x10
c0013d41:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d49:	83 ec 0c             	sub    esp,0xc
c0013d4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d50:	e8 44 b8 ff ff       	call   c000f599 <malloc>
c0013d55:	83 c4 10             	add    esp,0x10
c0013d58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d69:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d73:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d83:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d94:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d9f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013da6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013daa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013dc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013dde:	90                   	nop
c0013ddf:	83 c4 1c             	add    esp,0x1c
c0013de2:	c3                   	ret    
c0013de3:	90                   	nop

c0013de4 <Device::getName()>:
c0013de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013de8:	05 d0 00 00 00       	add    eax,0xd0
c0013ded:	c3                   	ret    

c0013dee <DriverlessDevice::DriverlessDevice(char const*)>:
c0013dee:	83 ec 0c             	sub    esp,0xc
c0013df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df5:	83 ec 08             	sub    esp,0x8
c0013df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dfc:	50                   	push   eax
c0013dfd:	e8 e6 fe ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	ba 1c aa 02 c0       	mov    edx,0xc002aa1c
c0013e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0e:	89 10                	mov    DWORD PTR [eax],edx
c0013e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e14:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e1e:	90                   	nop
c0013e1f:	83 c4 0c             	add    esp,0xc
c0013e22:	c3                   	ret    
c0013e23:	90                   	nop

c0013e24 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e24:	57                   	push   edi
c0013e25:	56                   	push   esi
c0013e26:	53                   	push   ebx
c0013e27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e33:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e39:	75 0c                	jne    c0013e47 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e3b:	52                   	push   edx
c0013e3c:	52                   	push   edx
c0013e3d:	53                   	push   ebx
c0013e3e:	56                   	push   esi
c0013e3f:	e8 dc 47 01 00       	call   c0028620 <LinkedList<Device>::addElement(Device*)>
c0013e44:	83 c4 10             	add    esp,0x10
c0013e47:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e50:	74 12                	je     c0013e64 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e52:	50                   	push   eax
c0013e53:	57                   	push   edi
c0013e54:	56                   	push   esi
c0013e55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e58:	e8 c7 ff ff ff       	call   c0013e24 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e5f:	83 c4 10             	add    esp,0x10
c0013e62:	eb e9                	jmp    c0013e4d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e64:	5b                   	pop    ebx
c0013e65:	5e                   	pop    esi
c0013e66:	5f                   	pop    edi
c0013e67:	c3                   	ret    

c0013e68 <getDevicesOfType(DeviceType)>:
c0013e68:	53                   	push   ebx
c0013e69:	83 ec 14             	sub    esp,0x14
c0013e6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e70:	53                   	push   ebx
c0013e71:	e8 86 48 01 00       	call   c00286fc <LinkedList<Device>::LinkedList()>
c0013e76:	83 c4 0c             	add    esp,0xc
c0013e79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e7d:	53                   	push   ebx
c0013e7e:	ff 35 e8 d8 02 c0    	push   DWORD PTR ds:0xc002d8e8
c0013e84:	e8 9b ff ff ff       	call   c0013e24 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e89:	89 d8                	mov    eax,ebx
c0013e8b:	83 c4 18             	add    esp,0x18
c0013e8e:	5b                   	pop    ebx
c0013e8f:	c2 04 00             	ret    0x4

c0013e92 <HardDiskController::HardDiskController(char const*)>:
c0013e92:	83 ec 0c             	sub    esp,0xc
c0013e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e99:	83 ec 08             	sub    esp,0x8
c0013e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea0:	50                   	push   eax
c0013ea1:	e8 42 fe ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0013ea6:	83 c4 10             	add    esp,0x10
c0013ea9:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c0013eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb2:	89 10                	mov    DWORD PTR [eax],edx
c0013eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013ec2:	90                   	nop
c0013ec3:	83 c4 0c             	add    esp,0xc
c0013ec6:	c3                   	ret    
c0013ec7:	90                   	nop

c0013ec8 <HardDiskController::~HardDiskController()>:
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c0013ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed4:	89 10                	mov    DWORD PTR [eax],edx
c0013ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eda:	83 ec 0c             	sub    esp,0xc
c0013edd:	50                   	push   eax
c0013ede:	e8 cf fa ff ff       	call   c00139b2 <Device::~Device()>
c0013ee3:	83 c4 10             	add    esp,0x10
c0013ee6:	90                   	nop
c0013ee7:	83 c4 0c             	add    esp,0xc
c0013eea:	c3                   	ret    
c0013eeb:	90                   	nop

c0013eec <HardDiskController::~HardDiskController()>:
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef6:	e8 cd ff ff ff       	call   c0013ec8 <HardDiskController::~HardDiskController()>
c0013efb:	83 c4 10             	add    esp,0x10
c0013efe:	83 ec 08             	sub    esp,0x8
c0013f01:	68 58 01 00 00       	push   0x158
c0013f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f0a:	e8 c4 e6 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0013f0f:	83 c4 10             	add    esp,0x10
c0013f12:	83 c4 0c             	add    esp,0xc
c0013f15:	c3                   	ret    

c0013f16 <PhysicalDisk::eject()>:
c0013f16:	83 c8 ff             	or     eax,0xffffffff
c0013f19:	c3                   	ret    

c0013f1a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f1a:	83 ec 0c             	sub    esp,0xc
c0013f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f21:	83 ec 08             	sub    esp,0x8
c0013f24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f28:	50                   	push   eax
c0013f29:	e8 ba fd ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0013f2e:	83 c4 10             	add    esp,0x10
c0013f31:	ba 74 aa 02 c0       	mov    edx,0xc002aa74
c0013f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3a:	89 10                	mov    DWORD PTR [eax],edx
c0013f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f4b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f56:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f68:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f7c:	90                   	nop
c0013f7d:	83 c4 0c             	add    esp,0xc
c0013f80:	c3                   	ret    
c0013f81:	90                   	nop

c0013f82 <PhysicalDisk::startCache()>:
c0013f82:	56                   	push   esi
c0013f83:	53                   	push   ebx
c0013f84:	83 ec 10             	sub    esp,0x10
c0013f87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f8b:	6a 44                	push   0x44
c0013f8d:	e8 07 b6 ff ff       	call   c000f599 <malloc>
c0013f92:	89 c6                	mov    esi,eax
c0013f94:	58                   	pop    eax
c0013f95:	5a                   	pop    edx
c0013f96:	53                   	push   ebx
c0013f97:	56                   	push   esi
c0013f98:	e8 71 28 00 00       	call   c001680e <VCache::VCache(PhysicalDisk*)>
c0013f9d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fa3:	83 c4 14             	add    esp,0x14
c0013fa6:	5b                   	pop    ebx
c0013fa7:	5e                   	pop    esi
c0013fa8:	c3                   	ret    
c0013fa9:	90                   	nop

c0013faa <PhysicalDisk::~PhysicalDisk()>:
c0013faa:	83 ec 0c             	sub    esp,0xc
c0013fad:	ba 74 aa 02 c0       	mov    edx,0xc002aa74
c0013fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb6:	89 10                	mov    DWORD PTR [eax],edx
c0013fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	50                   	push   eax
c0013fc0:	e8 ed f9 ff ff       	call   c00139b2 <Device::~Device()>
c0013fc5:	83 c4 10             	add    esp,0x10
c0013fc8:	90                   	nop
c0013fc9:	83 c4 0c             	add    esp,0xc
c0013fcc:	c3                   	ret    
c0013fcd:	90                   	nop

c0013fce <PhysicalDisk::~PhysicalDisk()>:
c0013fce:	83 ec 0c             	sub    esp,0xc
c0013fd1:	83 ec 0c             	sub    esp,0xc
c0013fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fd8:	e8 cd ff ff ff       	call   c0013faa <PhysicalDisk::~PhysicalDisk()>
c0013fdd:	83 c4 10             	add    esp,0x10
c0013fe0:	83 ec 08             	sub    esp,0x8
c0013fe3:	68 6c 01 00 00       	push   0x16c
c0013fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fec:	e8 e2 e5 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0013ff1:	83 c4 10             	add    esp,0x10
c0013ff4:	83 c4 0c             	add    esp,0xc
c0013ff7:	c3                   	ret    

c0013ff8 <FPU::FPU(char const*)>:
c0013ff8:	83 ec 0c             	sub    esp,0xc
c0013ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fff:	83 ec 08             	sub    esp,0x8
c0014002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014006:	50                   	push   eax
c0014007:	e8 dc fc ff ff       	call   c0013ce8 <Device::Device(char const*)>
c001400c:	83 c4 10             	add    esp,0x10
c001400f:	ba b8 aa 02 c0       	mov    edx,0xc002aab8
c0014014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014018:	89 10                	mov    DWORD PTR [eax],edx
c001401a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014028:	90                   	nop
c0014029:	83 c4 0c             	add    esp,0xc
c001402c:	c3                   	ret    
c001402d:	90                   	nop

c001402e <FPU::~FPU()>:
c001402e:	83 ec 0c             	sub    esp,0xc
c0014031:	ba b8 aa 02 c0       	mov    edx,0xc002aab8
c0014036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403a:	89 10                	mov    DWORD PTR [eax],edx
c001403c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014040:	83 ec 0c             	sub    esp,0xc
c0014043:	50                   	push   eax
c0014044:	e8 69 f9 ff ff       	call   c00139b2 <Device::~Device()>
c0014049:	83 c4 10             	add    esp,0x10
c001404c:	90                   	nop
c001404d:	83 c4 0c             	add    esp,0xc
c0014050:	c3                   	ret    
c0014051:	90                   	nop

c0014052 <FPU::~FPU()>:
c0014052:	83 ec 0c             	sub    esp,0xc
c0014055:	83 ec 0c             	sub    esp,0xc
c0014058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001405c:	e8 cd ff ff ff       	call   c001402e <FPU::~FPU()>
c0014061:	83 c4 10             	add    esp,0x10
c0014064:	83 ec 08             	sub    esp,0x8
c0014067:	68 58 01 00 00       	push   0x158
c001406c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014070:	e8 5e e5 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0014075:	83 c4 10             	add    esp,0x10
c0014078:	83 c4 0c             	add    esp,0xc
c001407b:	c3                   	ret    

c001407c <setupFPU()>:
c001407c:	53                   	push   ebx
c001407d:	83 ec 08             	sub    esp,0x8
c0014080:	8b 15 e8 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8e8
c0014086:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001408d:	74 19                	je     c00140a8 <setupFPU()+0x2c>
c001408f:	83 ec 0c             	sub    esp,0xc
c0014092:	68 58 01 00 00       	push   0x158
c0014097:	e8 fd b4 ff ff       	call   c000f599 <malloc>
c001409c:	89 c3                	mov    ebx,eax
c001409e:	89 04 24             	mov    DWORD PTR [esp],eax
c00140a1:	e8 c6 11 01 00       	call   c002526c <AVX::AVX()>
c00140a6:	eb 5b                	jmp    c0014103 <setupFPU()+0x87>
c00140a8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140ae:	84 c0                	test   al,al
c00140b0:	79 19                	jns    c00140cb <setupFPU()+0x4f>
c00140b2:	83 ec 0c             	sub    esp,0xc
c00140b5:	68 58 01 00 00       	push   0x158
c00140ba:	e8 da b4 ff ff       	call   c000f599 <malloc>
c00140bf:	89 c3                	mov    ebx,eax
c00140c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00140c4:	e8 c9 12 01 00       	call   c0025392 <SSE::SSE()>
c00140c9:	eb 38                	jmp    c0014103 <setupFPU()+0x87>
c00140cb:	a8 20                	test   al,0x20
c00140cd:	74 19                	je     c00140e8 <setupFPU()+0x6c>
c00140cf:	83 ec 0c             	sub    esp,0xc
c00140d2:	68 58 01 00 00       	push   0x158
c00140d7:	e8 bd b4 ff ff       	call   c000f599 <malloc>
c00140dc:	89 c3                	mov    ebx,eax
c00140de:	89 04 24             	mov    DWORD PTR [esp],eax
c00140e1:	e8 16 12 01 00       	call   c00252fc <MMX::MMX()>
c00140e6:	eb 1b                	jmp    c0014103 <setupFPU()+0x87>
c00140e8:	a8 10                	test   al,0x10
c00140ea:	74 1c                	je     c0014108 <setupFPU()+0x8c>
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	68 58 01 00 00       	push   0x158
c00140f4:	e8 a0 b4 ff ff       	call   c000f599 <malloc>
c00140f9:	89 c3                	mov    ebx,eax
c00140fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00140fe:	e8 1d 13 01 00       	call   c0025420 <x87::x87()>
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	eb 24                	jmp    c001412c <setupFPU()+0xb0>
c0014108:	83 e0 ef             	and    eax,0xffffffef
c001410b:	83 ec 0c             	sub    esp,0xc
c001410e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014114:	68 a4 aa 02 c0       	push   0xc002aaa4
c0014119:	e8 8d e5 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001411e:	0f 20 c0             	mov    eax,cr0
c0014121:	83 c8 04             	or     eax,0x4
c0014124:	0f 22 c0             	mov    cr0,eax
c0014127:	31 db                	xor    ebx,ebx
c0014129:	83 c4 10             	add    esp,0x10
c001412c:	89 d8                	mov    eax,ebx
c001412e:	83 c4 08             	add    esp,0x8
c0014131:	5b                   	pop    ebx
c0014132:	c3                   	ret    
c0014133:	90                   	nop

c0014134 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014138:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001413c:	c1 e0 04             	shl    eax,0x4
c001413f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014143:	8d 50 10             	lea    edx,[eax+0x10]
c0014146:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001414c:	74 08                	je     c0014156 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001414e:	83 c0 04             	add    eax,0x4
c0014151:	39 d0                	cmp    eax,edx
c0014153:	75 f1                	jne    c0014146 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014155:	c3                   	ret    
c0014156:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014160:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001416a:	eb e2                	jmp    c001414e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001416c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001416c:	57                   	push   edi
c001416d:	31 c0                	xor    eax,eax
c001416f:	56                   	push   esi
c0014170:	53                   	push   ebx
c0014171:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014175:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014179:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001417d:	89 da                	mov    edx,ebx
c001417f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014183:	c1 e2 04             	shl    edx,0x4
c0014186:	01 ca                	add    edx,ecx
c0014188:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014190:	74 16                	je     c00141a8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014192:	40                   	inc    eax
c0014193:	83 f8 04             	cmp    eax,0x4
c0014196:	75 f0                	jne    c0014188 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014198:	c7 44 24 10 e8 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aae8
c00141a0:	5b                   	pop    ebx
c00141a1:	5e                   	pop    esi
c00141a2:	5f                   	pop    edi
c00141a3:	e9 6f 5c 00 00       	jmp    c0019e17 <Krnl::panic(char const*)>
c00141a8:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141ab:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141ae:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141b4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141ba:	5b                   	pop    ebx
c00141bb:	5e                   	pop    esi
c00141bc:	5f                   	pop    edi
c00141bd:	c3                   	ret    

c00141be <doubleFault(regs*, void*)>:
c00141be:	55                   	push   ebp
c00141bf:	89 e5                	mov    ebp,esp
c00141c1:	83 ec 08             	sub    esp,0x8
c00141c4:	83 ec 0c             	sub    esp,0xc
c00141c7:	68 f5 aa 02 c0       	push   0xc002aaf5
c00141cc:	e8 46 5c 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c00141d1:	83 c4 10             	add    esp,0x10
c00141d4:	90                   	nop
c00141d5:	c9                   	leave  
c00141d6:	c3                   	ret    
c00141d7:	90                   	nop

c00141d8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141d8:	56                   	push   esi
c00141d9:	53                   	push   ebx
c00141da:	50                   	push   eax
c00141db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141e3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00141e8:	75 35                	jne    c001421f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00141ea:	8d 43 20             	lea    eax,[ebx+0x20]
c00141ed:	31 d2                	xor    edx,edx
c00141ef:	89 c1                	mov    ecx,eax
c00141f1:	c1 e1 04             	shl    ecx,0x4
c00141f4:	01 f1                	add    ecx,esi
c00141f6:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00141fe:	74 3e                	je     c001423e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014200:	42                   	inc    edx
c0014201:	83 fa 04             	cmp    edx,0x4
c0014204:	75 f0                	jne    c00141f6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014206:	83 ec 0c             	sub    esp,0xc
c0014209:	68 0f ab 02 c0       	push   0xc002ab0f
c001420e:	e8 04 5c 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001421b:	5a                   	pop    edx
c001421c:	5b                   	pop    ebx
c001421d:	5e                   	pop    esi
c001421e:	c3                   	ret    
c001421f:	83 ec 0c             	sub    esp,0xc
c0014222:	56                   	push   esi
c0014223:	e8 bc fb ff ff       	call   c0013de4 <Device::getName()>
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001422e:	75 ba                	jne    c00141ea <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014230:	83 fb 0f             	cmp    ebx,0xf
c0014233:	7f 29                	jg     c001425e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014235:	0f b6 9b 40 cb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd34c0]
c001423c:	eb ac                	jmp    c00141ea <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001423e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014241:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014245:	8d 04 86             	lea    eax,[esi+eax*4]
c0014248:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001424e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014252:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014258:	89 d8                	mov    eax,ebx
c001425a:	5a                   	pop    edx
c001425b:	5b                   	pop    ebx
c001425c:	5e                   	pop    esi
c001425d:	c3                   	ret    
c001425e:	83 ec 0c             	sub    esp,0xc
c0014261:	68 02 ab 02 c0       	push   0xc002ab02
c0014266:	e8 ac 5b 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	e9 77 ff ff ff       	jmp    c00141ea <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014273:	90                   	nop

c0014274 <InterruptController::clearAllHandlers(int, bool)>:
c0014274:	56                   	push   esi
c0014275:	53                   	push   ebx
c0014276:	52                   	push   edx
c0014277:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001427b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001427f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014284:	75 61                	jne    c00142e7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014286:	8d 46 20             	lea    eax,[esi+0x20]
c0014289:	c1 e6 04             	shl    esi,0x4
c001428c:	c1 e0 04             	shl    eax,0x4
c001428f:	01 de                	add    esi,ebx
c0014291:	01 d8                	add    eax,ebx
c0014293:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001429d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142a7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142b1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142bb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142c5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00142cf:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00142d9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00142e3:	58                   	pop    eax
c00142e4:	5b                   	pop    ebx
c00142e5:	5e                   	pop    esi
c00142e6:	c3                   	ret    
c00142e7:	83 ec 0c             	sub    esp,0xc
c00142ea:	53                   	push   ebx
c00142eb:	e8 f4 fa ff ff       	call   c0013de4 <Device::getName()>
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142f6:	75 8e                	jne    c0014286 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00142f8:	83 fe 0f             	cmp    esi,0xf
c00142fb:	7f 09                	jg     c0014306 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00142fd:	0f b6 b6 40 cb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd34c0]
c0014304:	eb 80                	jmp    c0014286 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014306:	83 ec 0c             	sub    esp,0xc
c0014309:	68 1c ab 02 c0       	push   0xc002ab1c
c001430e:	e8 04 5b 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	e9 6b ff ff ff       	jmp    c0014286 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001431b:	90                   	nop

c001431c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001431c:	56                   	push   esi
c001431d:	53                   	push   ebx
c001431e:	52                   	push   edx
c001431f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014323:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014327:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001432c:	75 3a                	jne    c0014368 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001432e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014332:	8d 50 20             	lea    edx,[eax+0x20]
c0014335:	c1 e2 04             	shl    edx,0x4
c0014338:	8d 04 16             	lea    eax,[esi+edx*1]
c001433b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001433f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014345:	74 0b                	je     c0014352 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014347:	83 c0 04             	add    eax,0x4
c001434a:	39 d0                	cmp    eax,edx
c001434c:	75 f1                	jne    c001433f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001434e:	58                   	pop    eax
c001434f:	5b                   	pop    ebx
c0014350:	5e                   	pop    esi
c0014351:	c3                   	ret    
c0014352:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001435c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014366:	eb df                	jmp    c0014347 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014368:	83 ec 0c             	sub    esp,0xc
c001436b:	56                   	push   esi
c001436c:	e8 73 fa ff ff       	call   c0013de4 <Device::getName()>
c0014371:	83 c4 10             	add    esp,0x10
c0014374:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014377:	75 b5                	jne    c001432e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014379:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001437e:	7f 11                	jg     c0014391 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014380:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014384:	0f b6 80 40 cb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd34c0]
c001438b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001438f:	eb 9d                	jmp    c001432e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014391:	83 ec 0c             	sub    esp,0xc
c0014394:	68 29 ab 02 c0       	push   0xc002ab29
c0014399:	e8 79 5a 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	eb 8b                	jmp    c001432e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143a3 <nmiHandler(regs*, void*)>:
c00143a3:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00143a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143ac:	e9 4f a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143b1 <int_handler>:
c00143b1:	55                   	push   ebp
c00143b2:	57                   	push   edi
c00143b3:	56                   	push   esi
c00143b4:	53                   	push   ebx
c00143b5:	83 ec 0c             	sub    esp,0xc
c00143b8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143bc:	80 3d 24 04 03 c0 00 	cmp    BYTE PTR ds:0xc0030424,0x0
c00143c3:	74 0b                	je     c00143d0 <int_handler+0x1f>
c00143c5:	fa                   	cli    
c00143c6:	f4                   	hlt    
c00143c7:	80 3d 24 04 03 c0 00 	cmp    BYTE PTR ds:0xc0030424,0x0
c00143ce:	75 f5                	jne    c00143c5 <int_handler+0x14>
c00143d0:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00143d5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00143d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143de:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00143e4:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143e7:	83 f8 17             	cmp    eax,0x17
c00143ea:	77 13                	ja     c00143ff <int_handler+0x4e>
c00143ec:	83 ec 08             	sub    esp,0x8
c00143ef:	8b 17                	mov    edx,DWORD PTR [edi]
c00143f1:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143f4:	0f b6 c0             	movzx  eax,al
c00143f7:	50                   	push   eax
c00143f8:	57                   	push   edi
c00143f9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00143fc:	83 c4 10             	add    esp,0x10
c00143ff:	83 c3 15             	add    ebx,0x15
c0014402:	c1 e3 04             	shl    ebx,0x4
c0014405:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014409:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014410:	31 db                	xor    ebx,ebx
c0014412:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014416:	85 c0                	test   eax,eax
c0014418:	74 13                	je     c001442d <int_handler+0x7c>
c001441a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001441d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014421:	74 1c                	je     c001443f <int_handler+0x8e>
c0014423:	83 ec 08             	sub    esp,0x8
c0014426:	52                   	push   edx
c0014427:	56                   	push   esi
c0014428:	ff d0                	call   eax
c001442a:	83 c4 10             	add    esp,0x10
c001442d:	43                   	inc    ebx
c001442e:	83 fb 04             	cmp    ebx,0x4
c0014431:	75 df                	jne    c0014412 <int_handler+0x61>
c0014433:	83 c4 0c             	add    esp,0xc
c0014436:	31 c0                	xor    eax,eax
c0014438:	5b                   	pop    ebx
c0014439:	31 d2                	xor    edx,edx
c001443b:	5e                   	pop    esi
c001443c:	5f                   	pop    edi
c001443d:	5d                   	pop    ebp
c001443e:	c3                   	ret    
c001443f:	83 ec 08             	sub    esp,0x8
c0014442:	52                   	push   edx
c0014443:	56                   	push   esi
c0014444:	ff d0                	call   eax
c0014446:	83 c4 10             	add    esp,0x10
c0014449:	83 c4 0c             	add    esp,0xc
c001444c:	5b                   	pop    ebx
c001444d:	5e                   	pop    esi
c001444e:	5f                   	pop    edi
c001444f:	5d                   	pop    ebp
c0014450:	c3                   	ret    
c0014451:	90                   	nop

c0014452 <InterruptController::InterruptController(char const*)>:
c0014452:	83 ec 1c             	sub    esp,0x1c
c0014455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014459:	83 ec 08             	sub    esp,0x8
c001445c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014460:	50                   	push   eax
c0014461:	e8 82 f8 ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0014466:	83 c4 10             	add    esp,0x10
c0014469:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c001446e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014472:	89 10                	mov    DWORD PTR [eax],edx
c0014474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014478:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014482:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001448a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014492:	7f 5e                	jg     c00144f2 <InterruptController::InterruptController(char const*)+0xa0>
c0014494:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001449c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144a1:	7f 49                	jg     c00144ec <InterruptController::InterruptController(char const*)+0x9a>
c00144a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144ab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144b6:	01 ca                	add    edx,ecx
c00144b8:	83 c2 54             	add    edx,0x54
c00144bb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144cb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144d6:	01 ca                	add    edx,ecx
c00144d8:	81 c2 54 04 00 00    	add    edx,0x454
c00144de:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144e6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00144ea:	eb b0                	jmp    c001449c <InterruptController::InterruptController(char const*)+0x4a>
c00144ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00144f0:	eb 98                	jmp    c001448a <InterruptController::InterruptController(char const*)+0x38>
c00144f2:	90                   	nop
c00144f3:	83 c4 1c             	add    esp,0x1c
c00144f6:	c3                   	ret    
c00144f7:	90                   	nop

c00144f8 <InterruptController::~InterruptController()>:
c00144f8:	83 ec 0c             	sub    esp,0xc
c00144fb:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c0014500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014504:	89 10                	mov    DWORD PTR [eax],edx
c0014506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001450a:	83 ec 0c             	sub    esp,0xc
c001450d:	50                   	push   eax
c001450e:	e8 9f f4 ff ff       	call   c00139b2 <Device::~Device()>
c0014513:	83 c4 10             	add    esp,0x10
c0014516:	90                   	nop
c0014517:	83 c4 0c             	add    esp,0xc
c001451a:	c3                   	ret    
c001451b:	90                   	nop

c001451c <InterruptController::~InterruptController()>:
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	83 ec 0c             	sub    esp,0xc
c0014522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014526:	e8 cd ff ff ff       	call   c00144f8 <InterruptController::~InterruptController()>
c001452b:	83 c4 10             	add    esp,0x10
c001452e:	83 ec 08             	sub    esp,0x8
c0014531:	68 58 21 00 00       	push   0x2158
c0014536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001453a:	e8 94 e0 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c001453f:	83 c4 10             	add    esp,0x10
c0014542:	83 c4 0c             	add    esp,0xc
c0014545:	c3                   	ret    

c0014546 <displayDebugInfo(regs*)>:
c0014546:	55                   	push   ebp
c0014547:	57                   	push   edi
c0014548:	56                   	push   esi
c0014549:	53                   	push   ebx
c001454a:	83 ec 24             	sub    esp,0x24
c001454d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014551:	0f 20 c2             	mov    edx,cr0
c0014554:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014558:	0f 20 d7             	mov    edi,cr2
c001455b:	0f 20 de             	mov    esi,cr3
c001455e:	0f 20 e5             	mov    ebp,cr4
c0014561:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014564:	68 36 ab 02 c0       	push   0xc002ab36
c0014569:	e8 3d e1 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001456e:	59                   	pop    ecx
c001456f:	58                   	pop    eax
c0014570:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014573:	68 41 ab 02 c0       	push   0xc002ab41
c0014578:	e8 2e e1 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001457d:	58                   	pop    eax
c001457e:	5a                   	pop    edx
c001457f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014582:	68 4c ab 02 c0       	push   0xc002ab4c
c0014587:	e8 1f e1 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001458c:	59                   	pop    ecx
c001458d:	58                   	pop    eax
c001458e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014591:	68 57 ab 02 c0       	push   0xc002ab57
c0014596:	e8 10 e1 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001459b:	58                   	pop    eax
c001459c:	5a                   	pop    edx
c001459d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145a0:	68 62 ab 02 c0       	push   0xc002ab62
c00145a5:	e8 01 e1 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00145aa:	59                   	pop    ecx
c00145ab:	58                   	pop    eax
c00145ac:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145af:	68 6d ab 02 c0       	push   0xc002ab6d
c00145b4:	e8 f2 e0 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00145b9:	58                   	pop    eax
c00145ba:	5a                   	pop    edx
c00145bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145be:	68 78 ab 02 c0       	push   0xc002ab78
c00145c3:	e8 e3 e0 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00145c8:	59                   	pop    ecx
c00145c9:	58                   	pop    eax
c00145ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00145cd:	68 83 ab 02 c0       	push   0xc002ab83
c00145d2:	e8 d4 e0 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00145d7:	58                   	pop    eax
c00145d8:	5a                   	pop    edx
c00145d9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00145dc:	68 8e ab 02 c0       	push   0xc002ab8e
c00145e1:	e8 c5 e0 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00145e6:	59                   	pop    ecx
c00145e7:	58                   	pop    eax
c00145e8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145eb:	68 9d ab 02 c0       	push   0xc002ab9d
c00145f0:	e8 b6 e0 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00145f5:	58                   	pop    eax
c00145f6:	5a                   	pop    edx
c00145f7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00145fa:	68 a8 ab 02 c0       	push   0xc002aba8
c00145ff:	e8 a7 e0 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014604:	59                   	pop    ecx
c0014605:	58                   	pop    eax
c0014606:	57                   	push   edi
c0014607:	68 b3 ab 02 c0       	push   0xc002abb3
c001460c:	e8 9a e0 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014611:	58                   	pop    eax
c0014612:	5a                   	pop    edx
c0014613:	56                   	push   esi
c0014614:	68 be ab 02 c0       	push   0xc002abbe
c0014619:	e8 8d e0 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001461e:	59                   	pop    ecx
c001461f:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014624:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462a:	e8 06 bd ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c001462f:	58                   	pop    eax
c0014630:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014633:	5a                   	pop    edx
c0014634:	c1 e0 05             	shl    eax,0x5
c0014637:	05 a0 c8 02 c0       	add    eax,0xc002c8a0
c001463c:	50                   	push   eax
c001463d:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014642:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014648:	e8 f5 c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001464d:	59                   	pop    ecx
c001464e:	58                   	pop    eax
c001464f:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014654:	68 c9 ab 02 c0       	push   0xc002abc9
c0014659:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465f:	e8 de c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014664:	58                   	pop    eax
c0014665:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001466a:	5a                   	pop    edx
c001466b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001466e:	83 c0 0c             	add    eax,0xc
c0014671:	50                   	push   eax
c0014672:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014677:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467d:	e8 c0 c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014682:	59                   	pop    ecx
c0014683:	58                   	pop    eax
c0014684:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014689:	68 d2 ab 02 c0       	push   0xc002abd2
c001468e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014694:	e8 a9 c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014699:	58                   	pop    eax
c001469a:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001469f:	5a                   	pop    edx
c00146a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a9:	e8 4e c1 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00146ae:	59                   	pop    ecx
c00146af:	58                   	pop    eax
c00146b0:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00146b5:	68 da ab 02 c0       	push   0xc002abda
c00146ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c0:	e8 7d c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00146c5:	58                   	pop    eax
c00146c6:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00146cb:	5a                   	pop    edx
c00146cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d5:	e8 22 c1 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00146da:	59                   	pop    ecx
c00146db:	58                   	pop    eax
c00146dc:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00146e1:	68 e2 ab 02 c0       	push   0xc002abe2
c00146e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ec:	e8 51 c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00146f1:	58                   	pop    eax
c00146f2:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00146f7:	5a                   	pop    edx
c00146f8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014701:	e8 f6 c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014706:	59                   	pop    ecx
c0014707:	58                   	pop    eax
c0014708:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001470d:	68 ea ab 02 c0       	push   0xc002abea
c0014712:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014718:	e8 25 c1 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001471d:	58                   	pop    eax
c001471e:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014723:	5a                   	pop    edx
c0014724:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014727:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472d:	e8 ca c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014732:	59                   	pop    ecx
c0014733:	58                   	pop    eax
c0014734:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014739:	68 f2 ab 02 c0       	push   0xc002abf2
c001473e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014744:	e8 f9 c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014749:	58                   	pop    eax
c001474a:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001474f:	5a                   	pop    edx
c0014750:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014753:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014759:	e8 9e c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001475e:	59                   	pop    ecx
c001475f:	58                   	pop    eax
c0014760:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014765:	68 fa ab 02 c0       	push   0xc002abfa
c001476a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014770:	e8 cd c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014775:	58                   	pop    eax
c0014776:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001477b:	5a                   	pop    edx
c001477c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001477f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014785:	e8 72 c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001478a:	59                   	pop    ecx
c001478b:	58                   	pop    eax
c001478c:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014791:	68 02 ac 02 c0       	push   0xc002ac02
c0014796:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479c:	e8 a1 c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00147a1:	58                   	pop    eax
c00147a2:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00147a7:	5a                   	pop    edx
c00147a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147ac:	52                   	push   edx
c00147ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b3:	e8 44 c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00147b8:	59                   	pop    ecx
c00147b9:	58                   	pop    eax
c00147ba:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00147bf:	68 0b ac 02 c0       	push   0xc002ac0b
c00147c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ca:	e8 73 c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00147cf:	58                   	pop    eax
c00147d0:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00147d5:	5a                   	pop    edx
c00147d6:	57                   	push   edi
c00147d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147dd:	e8 1a c0 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00147e2:	59                   	pop    ecx
c00147e3:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00147e8:	5f                   	pop    edi
c00147e9:	68 13 ac 02 c0       	push   0xc002ac13
c00147ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f4:	e8 49 c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00147f9:	58                   	pop    eax
c00147fa:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00147ff:	5a                   	pop    edx
c0014800:	56                   	push   esi
c0014801:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014807:	e8 f0 bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001480c:	59                   	pop    ecx
c001480d:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014812:	5e                   	pop    esi
c0014813:	68 1b ac 02 c0       	push   0xc002ac1b
c0014818:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481e:	e8 1f c0 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014823:	5f                   	pop    edi
c0014824:	58                   	pop    eax
c0014825:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001482a:	55                   	push   ebp
c001482b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014831:	e8 c6 bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014836:	58                   	pop    eax
c0014837:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001483c:	5a                   	pop    edx
c001483d:	68 23 ac 02 c0       	push   0xc002ac23
c0014842:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014848:	e8 f5 bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001484d:	0f 21 c0             	mov    eax,db0
c0014850:	59                   	pop    ecx
c0014851:	5e                   	pop    esi
c0014852:	50                   	push   eax
c0014853:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014858:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001485e:	e8 99 bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014863:	5f                   	pop    edi
c0014864:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014869:	5d                   	pop    ebp
c001486a:	68 2c ac 02 c0       	push   0xc002ac2c
c001486f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014875:	e8 c8 bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001487a:	0f 21 c8             	mov    eax,db1
c001487d:	5a                   	pop    edx
c001487e:	59                   	pop    ecx
c001487f:	50                   	push   eax
c0014880:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014885:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488b:	e8 6c bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014890:	5e                   	pop    esi
c0014891:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014896:	5f                   	pop    edi
c0014897:	68 34 ac 02 c0       	push   0xc002ac34
c001489c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a2:	e8 9b bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00148a7:	0f 21 d0             	mov    eax,db2
c00148aa:	5d                   	pop    ebp
c00148ab:	5a                   	pop    edx
c00148ac:	50                   	push   eax
c00148ad:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00148b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b8:	e8 3f bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00148bd:	59                   	pop    ecx
c00148be:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00148c3:	5e                   	pop    esi
c00148c4:	68 3c ac 02 c0       	push   0xc002ac3c
c00148c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cf:	e8 6e bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00148d4:	0f 21 d8             	mov    eax,db3
c00148d7:	5f                   	pop    edi
c00148d8:	5d                   	pop    ebp
c00148d9:	50                   	push   eax
c00148da:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00148df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e5:	e8 12 bf ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00148ea:	58                   	pop    eax
c00148eb:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00148f0:	5a                   	pop    edx
c00148f1:	68 44 ac 02 c0       	push   0xc002ac44
c00148f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148fc:	e8 41 bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0014901:	0f 21 f0             	mov    eax,db6
c0014904:	59                   	pop    ecx
c0014905:	5e                   	pop    esi
c0014906:	50                   	push   eax
c0014907:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001490c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014912:	e8 e5 be ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014917:	5f                   	pop    edi
c0014918:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001491d:	5d                   	pop    ebp
c001491e:	68 4c ac 02 c0       	push   0xc002ac4c
c0014923:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014929:	e8 14 bf ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001492e:	0f 21 f8             	mov    eax,db7
c0014931:	5a                   	pop    edx
c0014932:	59                   	pop    ecx
c0014933:	50                   	push   eax
c0014934:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014939:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493f:	e8 b8 be ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c0014944:	5e                   	pop    esi
c0014945:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014948:	e8 43 86 00 00       	call   c001cf90 <Thr::getDriverNameFromAddress(unsigned long)>
c001494d:	83 c4 10             	add    esp,0x10
c0014950:	85 c0                	test   eax,eax
c0014952:	74 7d                	je     c00149d1 <displayDebugInfo(regs*)+0x48b>
c0014954:	89 c6                	mov    esi,eax
c0014956:	50                   	push   eax
c0014957:	50                   	push   eax
c0014958:	56                   	push   esi
c0014959:	68 54 ac 02 c0       	push   0xc002ac54
c001495e:	e8 48 dd ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014963:	5a                   	pop    edx
c0014964:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014969:	59                   	pop    ecx
c001496a:	68 62 ac 02 c0       	push   0xc002ac62
c001496f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014975:	e8 c8 be ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001497a:	5f                   	pop    edi
c001497b:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014980:	5d                   	pop    ebp
c0014981:	56                   	push   esi
c0014982:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014988:	e8 b5 be ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001498d:	58                   	pop    eax
c001498e:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0014993:	5a                   	pop    edx
c0014994:	68 6e ac 02 c0       	push   0xc002ac6e
c0014999:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499f:	e8 9e be ff ff       	call   c0010842 <VgaText::puts(char const*)>
c00149a4:	59                   	pop    ecx
c00149a5:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00149aa:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149b0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149b3:	e8 0f 86 00 00       	call   c001cfc7 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00149b8:	5b                   	pop    ebx
c00149b9:	5d                   	pop    ebp
c00149ba:	50                   	push   eax
c00149bb:	57                   	push   edi
c00149bc:	e8 3b be ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c00149c1:	58                   	pop    eax
c00149c2:	5a                   	pop    edx
c00149c3:	56                   	push   esi
c00149c4:	68 7a ac 02 c0       	push   0xc002ac7a
c00149c9:	e8 dd dc ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00149ce:	83 c4 10             	add    esp,0x10
c00149d1:	fa                   	cli    
c00149d2:	f4                   	hlt    
c00149d3:	eb fe                	jmp    c00149d3 <displayDebugInfo(regs*)+0x48d>

c00149d5 <x87EmulHandler(regs*, void*)>:
c00149d5:	83 ec 0c             	sub    esp,0xc
c00149d8:	0f 20 c2             	mov    edx,cr0
c00149db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e0:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00149e4:	75 4b                	jne    c0014a31 <x87EmulHandler(regs*, void*)+0x5c>
c00149e6:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00149eb:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00149f1:	85 c0                	test   eax,eax
c00149f3:	74 05                	je     c00149fa <x87EmulHandler(regs*, void*)+0x25>
c00149f5:	83 e2 08             	and    edx,0x8
c00149f8:	75 17                	jne    c0014a11 <x87EmulHandler(regs*, void*)+0x3c>
c00149fa:	83 ec 0c             	sub    esp,0xc
c00149fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a01:	e8 5b a9 00 00       	call   c001f361 <Vm::x87Handler(regs*)>
c0014a06:	83 c4 10             	add    esp,0x10
c0014a09:	84 c0                	test   al,al
c0014a0b:	74 24                	je     c0014a31 <x87EmulHandler(regs*, void*)+0x5c>
c0014a0d:	83 c4 0c             	add    esp,0xc
c0014a10:	c3                   	ret    
c0014a11:	83 ec 0c             	sub    esp,0xc
c0014a14:	68 a0 ac 02 c0       	push   0xc002aca0
c0014a19:	e8 8d dc ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014a1e:	0f 06                	clts   
c0014a20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a25:	83 c4 10             	add    esp,0x10
c0014a28:	a3 68 da 02 c0       	mov    ds:0xc002da68,eax
c0014a2d:	83 c4 0c             	add    esp,0xc
c0014a30:	c3                   	ret    
c0014a31:	83 ec 0c             	sub    esp,0xc
c0014a34:	68 8a ac 02 c0       	push   0xc002ac8a
c0014a39:	e8 6d dc ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014a3e:	5a                   	pop    edx
c0014a3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a43:	e8 fe fa ff ff       	call   c0014546 <displayDebugInfo(regs*)>

c0014a48 <gpFault(regs*, void*)>:
c0014a48:	53                   	push   ebx
c0014a49:	83 ec 14             	sub    esp,0x14
c0014a4c:	c7 05 64 da 02 c0 3a e8 01 c0 	mov    DWORD PTR ds:0xc002da64,0xc001e83a
c0014a56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a5a:	53                   	push   ebx
c0014a5b:	e8 da 9d 00 00       	call   c001e83a <Vm::faultHandler(regs*)>
c0014a60:	83 c4 10             	add    esp,0x10
c0014a63:	84 c0                	test   al,al
c0014a65:	74 05                	je     c0014a6c <gpFault(regs*, void*)+0x24>
c0014a67:	83 c4 08             	add    esp,0x8
c0014a6a:	5b                   	pop    ebx
c0014a6b:	c3                   	ret    
c0014a6c:	83 ec 0c             	sub    esp,0xc
c0014a6f:	68 ad ac 02 c0       	push   0xc002acad
c0014a74:	e8 32 dc ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014a79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a7c:	e8 c5 fa ff ff       	call   c0014546 <displayDebugInfo(regs*)>

c0014a81 <pgFault(regs*, void*)>:
c0014a81:	83 ec 18             	sub    esp,0x18
c0014a84:	68 c8 ac 02 c0       	push   0xc002acc8
c0014a89:	e8 1d dc ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014a8e:	0f 20 d0             	mov    eax,cr2
c0014a91:	5a                   	pop    edx
c0014a92:	59                   	pop    ecx
c0014a93:	50                   	push   eax
c0014a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a99:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a9c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014aa2:	e8 2d d7 ff ff       	call   c00121d4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014aa7:	83 c4 10             	add    esp,0x10
c0014aaa:	84 c0                	test   al,al
c0014aac:	74 04                	je     c0014ab2 <pgFault(regs*, void*)+0x31>
c0014aae:	83 c4 0c             	add    esp,0xc
c0014ab1:	c3                   	ret    
c0014ab2:	83 ec 0c             	sub    esp,0xc
c0014ab5:	68 d2 ac 02 c0       	push   0xc002acd2
c0014aba:	e8 ec db ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014abf:	58                   	pop    eax
c0014ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ac4:	e8 7d fa ff ff       	call   c0014546 <displayDebugInfo(regs*)>

c0014ac9 <otherISRHandler(regs*, void*)>:
c0014ac9:	53                   	push   ebx
c0014aca:	83 ec 0c             	sub    esp,0xc
c0014acd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ad1:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ad4:	50                   	push   eax
c0014ad5:	50                   	push   eax
c0014ad6:	68 df ac 02 c0       	push   0xc002acdf
c0014adb:	e8 cb db ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014ae0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ae3:	e8 5e fa ff ff       	call   c0014546 <displayDebugInfo(regs*)>

c0014ae8 <opcodeFault(regs*, void*)>:
c0014ae8:	55                   	push   ebp
c0014ae9:	89 e5                	mov    ebp,esp
c0014aeb:	56                   	push   esi
c0014aec:	53                   	push   ebx
c0014aed:	83 ec 40             	sub    esp,0x40
c0014af0:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0014af5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014afb:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b01:	84 c0                	test   al,al
c0014b03:	74 24                	je     c0014b29 <opcodeFault(regs*, void*)+0x41>
c0014b05:	83 ec 0c             	sub    esp,0xc
c0014b08:	68 fc ac 02 c0       	push   0xc002acfc
c0014b0d:	e8 99 db ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b18:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b1b:	8d 50 19             	lea    edx,[eax+0x19]
c0014b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b21:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b24:	e9 d5 05 00 00       	jmp    c00150fe <opcodeFault(regs*, void*)+0x616>
c0014b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b2f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b32:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b36:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b40:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b46:	8a 00                	mov    al,BYTE PTR [eax]
c0014b48:	3c f0                	cmp    al,0xf0
c0014b4a:	75 17                	jne    c0014b63 <opcodeFault(regs*, void*)+0x7b>
c0014b4c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b52:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b55:	8d 50 01             	lea    edx,[eax+0x1]
c0014b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b5e:	e9 da 00 00 00       	jmp    c0014c3d <opcodeFault(regs*, void*)+0x155>
c0014b63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b66:	8a 00                	mov    al,BYTE PTR [eax]
c0014b68:	3c f2                	cmp    al,0xf2
c0014b6a:	74 09                	je     c0014b75 <opcodeFault(regs*, void*)+0x8d>
c0014b6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b71:	3c f3                	cmp    al,0xf3
c0014b73:	75 1b                	jne    c0014b90 <opcodeFault(regs*, void*)+0xa8>
c0014b75:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b79:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b7f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b82:	8d 50 01             	lea    edx,[eax+0x1]
c0014b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b88:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b8b:	e9 ad 00 00 00       	jmp    c0014c3d <opcodeFault(regs*, void*)+0x155>
c0014b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b93:	8a 00                	mov    al,BYTE PTR [eax]
c0014b95:	3c 66                	cmp    al,0x66
c0014b97:	75 1f                	jne    c0014bb8 <opcodeFault(regs*, void*)+0xd0>
c0014b99:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b9d:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014ba1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014baa:	8d 50 01             	lea    edx,[eax+0x1]
c0014bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bb3:	e9 85 00 00 00       	jmp    c0014c3d <opcodeFault(regs*, void*)+0x155>
c0014bb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bbd:	3c 67                	cmp    al,0x67
c0014bbf:	75 18                	jne    c0014bd9 <opcodeFault(regs*, void*)+0xf1>
c0014bc1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bc5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bcb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bce:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd7:	eb 64                	jmp    c0014c3d <opcodeFault(regs*, void*)+0x155>
c0014bd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdc:	8a 00                	mov    al,BYTE PTR [eax]
c0014bde:	3c 2e                	cmp    al,0x2e
c0014be0:	74 09                	je     c0014beb <opcodeFault(regs*, void*)+0x103>
c0014be2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014be5:	8a 00                	mov    al,BYTE PTR [eax]
c0014be7:	3c 3e                	cmp    al,0x3e
c0014be9:	75 18                	jne    c0014c03 <opcodeFault(regs*, void*)+0x11b>
c0014beb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bf8:	8d 50 01             	lea    edx,[eax+0x1]
c0014bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c01:	eb 3a                	jmp    c0014c3d <opcodeFault(regs*, void*)+0x155>
c0014c03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c06:	8a 00                	mov    al,BYTE PTR [eax]
c0014c08:	3c 36                	cmp    al,0x36
c0014c0a:	74 1b                	je     c0014c27 <opcodeFault(regs*, void*)+0x13f>
c0014c0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c0f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c11:	3c 26                	cmp    al,0x26
c0014c13:	74 12                	je     c0014c27 <opcodeFault(regs*, void*)+0x13f>
c0014c15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c18:	8a 00                	mov    al,BYTE PTR [eax]
c0014c1a:	3c 64                	cmp    al,0x64
c0014c1c:	74 09                	je     c0014c27 <opcodeFault(regs*, void*)+0x13f>
c0014c1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c21:	8a 00                	mov    al,BYTE PTR [eax]
c0014c23:	3c 65                	cmp    al,0x65
c0014c25:	75 16                	jne    c0014c3d <opcodeFault(regs*, void*)+0x155>
c0014c27:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c2b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c31:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c34:	8d 50 01             	lea    edx,[eax+0x1]
c0014c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c40:	8a 00                	mov    al,BYTE PTR [eax]
c0014c42:	3c 0f                	cmp    al,0xf
c0014c44:	0f 85 ad 00 00 00    	jne    c0014cf7 <opcodeFault(regs*, void*)+0x20f>
c0014c4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4d:	40                   	inc    eax
c0014c4e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c50:	3c c2                	cmp    al,0xc2
c0014c52:	74 0e                	je     c0014c62 <opcodeFault(regs*, void*)+0x17a>
c0014c54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c57:	40                   	inc    eax
c0014c58:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5a:	3c c3                	cmp    al,0xc3
c0014c5c:	0f 85 95 00 00 00    	jne    c0014cf7 <opcodeFault(regs*, void*)+0x20f>
c0014c62:	83 ec 0c             	sub    esp,0xc
c0014c65:	68 1f ad 02 c0       	push   0xc002ad1f
c0014c6a:	e8 3c da ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0014c6f:	83 c4 10             	add    esp,0x10
c0014c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c78:	8d 50 01             	lea    edx,[eax+0x1]
c0014c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c81:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c87:	8a 00                	mov    al,BYTE PTR [eax]
c0014c89:	8d 50 fe             	lea    edx,[eax-0x2]
c0014c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8f:	88 10                	mov    BYTE PTR [eax],dl
c0014c91:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014c94:	50                   	push   eax
c0014c95:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014c98:	50                   	push   eax
c0014c99:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014c9c:	50                   	push   eax
c0014c9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ca0:	e8 8b 48 00 00       	call   c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ca5:	83 c4 10             	add    esp,0x10
c0014ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cae:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cb1:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cb4:	01 d0                	add    eax,edx
c0014cb6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cbf:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cc2:	48                   	dec    eax
c0014cc3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc9:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ccc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd2:	83 ec 04             	sub    esp,0x4
c0014cd5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014cd8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014cdb:	50                   	push   eax
c0014cdc:	e8 d3 b4 fe ff       	call   c00001b4 <voodooXADD>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014ce7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014cea:	01 c2                	add    edx,eax
c0014cec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf2:	e9 07 04 00 00       	jmp    c00150fe <opcodeFault(regs*, void*)+0x616>
c0014cf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cfa:	8a 00                	mov    al,BYTE PTR [eax]
c0014cfc:	3c 0f                	cmp    al,0xf
c0014cfe:	0f 85 8b 01 00 00    	jne    c0014e8f <opcodeFault(regs*, void*)+0x3a7>
c0014d04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d07:	40                   	inc    eax
c0014d08:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0a:	3c c7                	cmp    al,0xc7
c0014d0c:	0f 86 7d 01 00 00    	jbe    c0014e8f <opcodeFault(regs*, void*)+0x3a7>
c0014d12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d15:	40                   	inc    eax
c0014d16:	8a 00                	mov    al,BYTE PTR [eax]
c0014d18:	3c cf                	cmp    al,0xcf
c0014d1a:	0f 87 6f 01 00 00    	ja     c0014e8f <opcodeFault(regs*, void*)+0x3a7>
c0014d20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d23:	40                   	inc    eax
c0014d24:	8a 00                	mov    al,BYTE PTR [eax]
c0014d26:	83 c0 38             	add    eax,0x38
c0014d29:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d2c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d30:	75 0b                	jne    c0014d3d <opcodeFault(regs*, void*)+0x255>
c0014d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d35:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d38:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d3b:	eb 75                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x2ca>
c0014d3d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d41:	75 0b                	jne    c0014d4e <opcodeFault(regs*, void*)+0x266>
c0014d43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d46:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d4c:	eb 64                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x2ca>
c0014d4e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d52:	75 0b                	jne    c0014d5f <opcodeFault(regs*, void*)+0x277>
c0014d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d57:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d5a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d5d:	eb 53                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x2ca>
c0014d5f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d63:	75 0b                	jne    c0014d70 <opcodeFault(regs*, void*)+0x288>
c0014d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d6e:	eb 42                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x2ca>
c0014d70:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d74:	75 0b                	jne    c0014d81 <opcodeFault(regs*, void*)+0x299>
c0014d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d79:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d7c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d7f:	eb 31                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x2ca>
c0014d81:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d85:	75 0b                	jne    c0014d92 <opcodeFault(regs*, void*)+0x2aa>
c0014d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d90:	eb 20                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x2ca>
c0014d92:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d96:	75 0b                	jne    c0014da3 <opcodeFault(regs*, void*)+0x2bb>
c0014d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014d9e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da1:	eb 0f                	jmp    c0014db2 <opcodeFault(regs*, void*)+0x2ca>
c0014da3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014da7:	75 09                	jne    c0014db2 <opcodeFault(regs*, void*)+0x2ca>
c0014da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014daf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db2:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014db6:	74 10                	je     c0014dc8 <opcodeFault(regs*, void*)+0x2e0>
c0014db8:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014dbf:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014dc6:	eb 2d                	jmp    c0014df5 <opcodeFault(regs*, void*)+0x30d>
c0014dc8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dcb:	c1 e0 18             	shl    eax,0x18
c0014dce:	89 c2                	mov    edx,eax
c0014dd0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dd3:	c1 e0 08             	shl    eax,0x8
c0014dd6:	25 00 00 ff 00       	and    eax,0xff0000
c0014ddb:	09 c2                	or     edx,eax
c0014ddd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014de0:	c1 e8 08             	shr    eax,0x8
c0014de3:	25 00 ff 00 00       	and    eax,0xff00
c0014de8:	09 c2                	or     edx,eax
c0014dea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ded:	c1 e8 18             	shr    eax,0x18
c0014df0:	09 d0                	or     eax,edx
c0014df2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014df5:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014df9:	75 0b                	jne    c0014e06 <opcodeFault(regs*, void*)+0x31e>
c0014dfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e01:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e04:	eb 75                	jmp    c0014e7b <opcodeFault(regs*, void*)+0x393>
c0014e06:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e0a:	75 0b                	jne    c0014e17 <opcodeFault(regs*, void*)+0x32f>
c0014e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e12:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e15:	eb 64                	jmp    c0014e7b <opcodeFault(regs*, void*)+0x393>
c0014e17:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e1b:	75 0b                	jne    c0014e28 <opcodeFault(regs*, void*)+0x340>
c0014e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e20:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e23:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e26:	eb 53                	jmp    c0014e7b <opcodeFault(regs*, void*)+0x393>
c0014e28:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e2c:	75 0b                	jne    c0014e39 <opcodeFault(regs*, void*)+0x351>
c0014e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e31:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e34:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e37:	eb 42                	jmp    c0014e7b <opcodeFault(regs*, void*)+0x393>
c0014e39:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e3d:	75 0b                	jne    c0014e4a <opcodeFault(regs*, void*)+0x362>
c0014e3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e42:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e45:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e48:	eb 31                	jmp    c0014e7b <opcodeFault(regs*, void*)+0x393>
c0014e4a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e4e:	75 0b                	jne    c0014e5b <opcodeFault(regs*, void*)+0x373>
c0014e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e53:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e59:	eb 20                	jmp    c0014e7b <opcodeFault(regs*, void*)+0x393>
c0014e5b:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e5f:	75 0b                	jne    c0014e6c <opcodeFault(regs*, void*)+0x384>
c0014e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e64:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e67:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e6a:	eb 0f                	jmp    c0014e7b <opcodeFault(regs*, void*)+0x393>
c0014e6c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e70:	75 09                	jne    c0014e7b <opcodeFault(regs*, void*)+0x393>
c0014e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e75:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e78:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e81:	8d 50 02             	lea    edx,[eax+0x2]
c0014e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e87:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e8a:	e9 6f 02 00 00       	jmp    c00150fe <opcodeFault(regs*, void*)+0x616>
c0014e8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e92:	8a 00                	mov    al,BYTE PTR [eax]
c0014e94:	3c 0f                	cmp    al,0xf
c0014e96:	0f 85 8d 01 00 00    	jne    c0015029 <opcodeFault(regs*, void*)+0x541>
c0014e9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9f:	40                   	inc    eax
c0014ea0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea2:	3c c7                	cmp    al,0xc7
c0014ea4:	0f 85 7f 01 00 00    	jne    c0015029 <opcodeFault(regs*, void*)+0x541>
c0014eaa:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eb3:	8d 50 01             	lea    edx,[eax+0x1]
c0014eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ebc:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ebf:	50                   	push   eax
c0014ec0:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014ec3:	50                   	push   eax
c0014ec4:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ec7:	50                   	push   eax
c0014ec8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ecb:	e8 60 46 00 00       	call   c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014ed6:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014ed9:	83 f0 01             	xor    eax,0x1
c0014edc:	84 c0                	test   al,al
c0014ede:	0f 84 45 01 00 00    	je     c0015029 <opcodeFault(regs*, void*)+0x541>
c0014ee4:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014ee7:	3c 01                	cmp    al,0x1
c0014ee9:	0f 85 3a 01 00 00    	jne    c0015029 <opcodeFault(regs*, void*)+0x541>
c0014eef:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014ef2:	83 f0 01             	xor    eax,0x1
c0014ef5:	84 c0                	test   al,al
c0014ef7:	0f 84 2c 01 00 00    	je     c0015029 <opcodeFault(regs*, void*)+0x541>
c0014efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f00:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f03:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f06:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f0d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f10:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f13:	89 c2                	mov    edx,eax
c0014f15:	b8 00 00 00 00       	mov    eax,0x0
c0014f1a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f1d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f23:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f26:	ba 00 00 00 00       	mov    edx,0x0
c0014f2b:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f2e:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f34:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f37:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f3a:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f41:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f44:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f47:	89 c2                	mov    edx,eax
c0014f49:	b8 00 00 00 00       	mov    eax,0x0
c0014f4e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f51:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f5a:	ba 00 00 00 00       	mov    edx,0x0
c0014f5f:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f62:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f65:	fa                   	cli    
c0014f66:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0014f6b:	40                   	inc    eax
c0014f6c:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0014f71:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f74:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f77:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f79:	89 c1                	mov    ecx,eax
c0014f7b:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f7e:	89 cb                	mov    ebx,ecx
c0014f80:	89 d0                	mov    eax,edx
c0014f82:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014f85:	89 c6                	mov    esi,eax
c0014f87:	89 f0                	mov    eax,esi
c0014f89:	09 d8                	or     eax,ebx
c0014f8b:	85 c0                	test   eax,eax
c0014f8d:	75 21                	jne    c0014fb0 <opcodeFault(regs*, void*)+0x4c8>
c0014f8f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014f92:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f95:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f98:	89 01                	mov    DWORD PTR [ecx],eax
c0014f9a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fa3:	83 c8 40             	or     eax,0x40
c0014fa6:	89 c2                	mov    edx,eax
c0014fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fab:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fae:	eb 3e                	jmp    c0014fee <opcodeFault(regs*, void*)+0x506>
c0014fb0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fb3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fb8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fbb:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fbe:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fc7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014fcd:	89 d0                	mov    eax,edx
c0014fcf:	31 d2                	xor    edx,edx
c0014fd1:	89 c3                	mov    ebx,eax
c0014fd3:	89 d6                	mov    esi,edx
c0014fd5:	89 da                	mov    edx,ebx
c0014fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fda:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fe3:	83 e0 bf             	and    eax,0xffffffbf
c0014fe6:	89 c2                	mov    edx,eax
c0014fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014feb:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fee:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0014ff3:	48                   	dec    eax
c0014ff4:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0014ff9:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0014ffe:	85 c0                	test   eax,eax
c0015000:	75 01                	jne    c0015003 <opcodeFault(regs*, void*)+0x51b>
c0015002:	fb                   	sti    
c0015003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015006:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015009:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001500c:	01 c2                	add    edx,eax
c001500e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015011:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015014:	83 ec 0c             	sub    esp,0xc
c0015017:	68 2e ad 02 c0       	push   0xc002ad2e
c001501c:	e8 8a d6 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0015021:	83 c4 10             	add    esp,0x10
c0015024:	e9 d5 00 00 00       	jmp    c00150fe <opcodeFault(regs*, void*)+0x616>
c0015029:	83 ec 0c             	sub    esp,0xc
c001502c:	68 41 ad 02 c0       	push   0xc002ad41
c0015031:	e8 75 d6 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001503f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015042:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015045:	c1 e0 04             	shl    eax,0x4
c0015048:	01 d0                	add    eax,edx
c001504a:	83 c0 03             	add    eax,0x3
c001504d:	8a 00                	mov    al,BYTE PTR [eax]
c001504f:	0f b6 d8             	movzx  ebx,al
c0015052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015055:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001505e:	c1 e0 04             	shl    eax,0x4
c0015061:	01 d0                	add    eax,edx
c0015063:	83 c0 02             	add    eax,0x2
c0015066:	8a 00                	mov    al,BYTE PTR [eax]
c0015068:	0f b6 c8             	movzx  ecx,al
c001506b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015074:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015077:	c1 e0 04             	shl    eax,0x4
c001507a:	01 d0                	add    eax,edx
c001507c:	40                   	inc    eax
c001507d:	8a 00                	mov    al,BYTE PTR [eax]
c001507f:	0f b6 d0             	movzx  edx,al
c0015082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015085:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001508e:	c1 e0 04             	shl    eax,0x4
c0015091:	01 f0                	add    eax,esi
c0015093:	8a 00                	mov    al,BYTE PTR [eax]
c0015095:	0f b6 c0             	movzx  eax,al
c0015098:	83 ec 0c             	sub    esp,0xc
c001509b:	53                   	push   ebx
c001509c:	51                   	push   ecx
c001509d:	52                   	push   edx
c001509e:	50                   	push   eax
c001509f:	68 54 ad 02 c0       	push   0xc002ad54
c00150a4:	e8 02 d6 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00150a9:	83 c4 20             	add    esp,0x20
c00150ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150b2:	83 c0 03             	add    eax,0x3
c00150b5:	8a 00                	mov    al,BYTE PTR [eax]
c00150b7:	0f b6 d8             	movzx  ebx,al
c00150ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150c0:	83 c0 02             	add    eax,0x2
c00150c3:	8a 00                	mov    al,BYTE PTR [eax]
c00150c5:	0f b6 c8             	movzx  ecx,al
c00150c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ce:	40                   	inc    eax
c00150cf:	8a 00                	mov    al,BYTE PTR [eax]
c00150d1:	0f b6 d0             	movzx  edx,al
c00150d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150da:	8a 00                	mov    al,BYTE PTR [eax]
c00150dc:	0f b6 c0             	movzx  eax,al
c00150df:	83 ec 0c             	sub    esp,0xc
c00150e2:	53                   	push   ebx
c00150e3:	51                   	push   ecx
c00150e4:	52                   	push   edx
c00150e5:	50                   	push   eax
c00150e6:	68 7c ad 02 c0       	push   0xc002ad7c
c00150eb:	e8 bb d5 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00150f0:	83 c4 20             	add    esp,0x20
c00150f3:	83 ec 0c             	sub    esp,0xc
c00150f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150f9:	e8 48 f4 ff ff       	call   c0014546 <displayDebugInfo(regs*)>
c00150fe:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015101:	5b                   	pop    ebx
c0015102:	5e                   	pop    esi
c0015103:	5d                   	pop    ebp
c0015104:	c3                   	ret    

c0015105 <displayProgramFault(char const*)>:
c0015105:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001510a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001510d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015113:	85 c0                	test   eax,eax
c0015115:	74 15                	je     c001512c <displayProgramFault(char const*)+0x27>
c0015117:	83 ec 0c             	sub    esp,0xc
c001511a:	6a 04                	push   0x4
c001511c:	6a 0f                	push   0xf
c001511e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015122:	50                   	push   eax
c0015123:	e8 16 b4 ff ff       	call   c001053e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015128:	83 c4 1c             	add    esp,0x1c
c001512b:	c3                   	ret    
c001512c:	c3                   	ret    

c001512d <setupInterruptController()>:
c001512d:	55                   	push   ebp
c001512e:	89 e5                	mov    ebp,esp
c0015130:	53                   	push   ebx
c0015131:	83 ec 24             	sub    esp,0x24
c0015134:	b8 00 00 00 00       	mov    eax,0x0
c0015139:	85 c0                	test   eax,eax
c001513b:	0f 95 c0             	setne  al
c001513e:	84 c0                	test   al,al
c0015140:	74 5b                	je     c001519d <setupInterruptController()+0x70>
c0015142:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015149:	83 ec 0c             	sub    esp,0xc
c001514c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001514f:	e8 45 a4 ff ff       	call   c000f599 <malloc>
c0015154:	83 c4 10             	add    esp,0x10
c0015157:	89 c3                	mov    ebx,eax
c0015159:	83 ec 0c             	sub    esp,0xc
c001515c:	53                   	push   ebx
c001515d:	e8 fc 04 01 00       	call   c002565e <APIC::APIC()>
c0015162:	83 c4 10             	add    esp,0x10
c0015165:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015168:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001516b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001516e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015170:	83 c0 08             	add    eax,0x8
c0015173:	8b 00                	mov    eax,DWORD PTR [eax]
c0015175:	6a 00                	push   0x0
c0015177:	6a 00                	push   0x0
c0015179:	6a 00                	push   0x0
c001517b:	52                   	push   edx
c001517c:	ff d0                	call   eax
c001517e:	83 c4 10             	add    esp,0x10
c0015181:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0015186:	83 ec 08             	sub    esp,0x8
c0015189:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001518c:	50                   	push   eax
c001518d:	e8 52 e9 ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c0015192:	83 c4 10             	add    esp,0x10
c0015195:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015198:	e9 79 03 00 00       	jmp    c0015516 <setupInterruptController()+0x3e9>
c001519d:	a0 60 02 03 c0       	mov    al,ds:0xc0030260
c00151a2:	84 c0                	test   al,al
c00151a4:	75 14                	jne    c00151ba <setupInterruptController()+0x8d>
c00151a6:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00151ab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151b1:	83 e2 fe             	and    edx,0xfffffffe
c00151b4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00151ba:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00151bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151c5:	83 e0 01             	and    eax,0x1
c00151c8:	84 c0                	test   al,al
c00151ca:	0f 95 c0             	setne  al
c00151cd:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00151d0:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00151d7:	83 ec 0c             	sub    esp,0xc
c00151da:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00151dd:	e8 b7 a3 ff ff       	call   c000f599 <malloc>
c00151e2:	83 c4 10             	add    esp,0x10
c00151e5:	89 c3                	mov    ebx,eax
c00151e7:	83 ec 0c             	sub    esp,0xc
c00151ea:	53                   	push   ebx
c00151eb:	e8 c6 09 01 00       	call   c0025bb6 <PIC::PIC()>
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00151f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00151f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fe:	83 c0 08             	add    eax,0x8
c0015201:	8b 00                	mov    eax,DWORD PTR [eax]
c0015203:	6a 00                	push   0x0
c0015205:	6a 00                	push   0x0
c0015207:	6a 00                	push   0x0
c0015209:	52                   	push   edx
c001520a:	ff d0                	call   eax
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015213:	74 73                	je     c0015288 <setupInterruptController()+0x15b>
c0015215:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015218:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521b:	8b 00                	mov    eax,DWORD PTR [eax]
c001521d:	83 c0 0c             	add    eax,0xc
c0015220:	8b 00                	mov    eax,DWORD PTR [eax]
c0015222:	6a 00                	push   0x0
c0015224:	6a 00                	push   0x0
c0015226:	6a 00                	push   0x0
c0015228:	52                   	push   edx
c0015229:	ff d0                	call   eax
c001522b:	83 c4 10             	add    esp,0x10
c001522e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015232:	74 15                	je     c0015249 <setupInterruptController()+0x11c>
c0015234:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015237:	8b 00                	mov    eax,DWORD PTR [eax]
c0015239:	83 c0 04             	add    eax,0x4
c001523c:	8b 00                	mov    eax,DWORD PTR [eax]
c001523e:	83 ec 0c             	sub    esp,0xc
c0015241:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015244:	ff d0                	call   eax
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015250:	83 ec 0c             	sub    esp,0xc
c0015253:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015256:	e8 3e a3 ff ff       	call   c000f599 <malloc>
c001525b:	83 c4 10             	add    esp,0x10
c001525e:	89 c3                	mov    ebx,eax
c0015260:	83 ec 0c             	sub    esp,0xc
c0015263:	53                   	push   ebx
c0015264:	e8 f5 03 01 00       	call   c002565e <APIC::APIC()>
c0015269:	83 c4 10             	add    esp,0x10
c001526c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001526f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015272:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015275:	8b 00                	mov    eax,DWORD PTR [eax]
c0015277:	83 c0 08             	add    eax,0x8
c001527a:	8b 00                	mov    eax,DWORD PTR [eax]
c001527c:	6a 00                	push   0x0
c001527e:	6a 00                	push   0x0
c0015280:	6a 00                	push   0x0
c0015282:	52                   	push   edx
c0015283:	ff d0                	call   eax
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001528d:	83 ec 08             	sub    esp,0x8
c0015290:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015293:	50                   	push   eax
c0015294:	e8 4b e8 ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	c7 05 68 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da68,0x0
c00152a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ab:	83 c0 24             	add    eax,0x24
c00152ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b0:	6a 00                	push   0x0
c00152b2:	68 c9 4a 01 c0       	push   0xc0014ac9
c00152b7:	6a 00                	push   0x0
c00152b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152bc:	ff d0                	call   eax
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c6:	83 c0 24             	add    eax,0x24
c00152c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cb:	6a 00                	push   0x0
c00152cd:	68 c9 4a 01 c0       	push   0xc0014ac9
c00152d2:	6a 01                	push   0x1
c00152d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d7:	ff d0                	call   eax
c00152d9:	83 c4 10             	add    esp,0x10
c00152dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152df:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e1:	83 c0 24             	add    eax,0x24
c00152e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e6:	6a 00                	push   0x0
c00152e8:	68 a3 43 01 c0       	push   0xc00143a3
c00152ed:	6a 02                	push   0x2
c00152ef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f2:	ff d0                	call   eax
c00152f4:	83 c4 10             	add    esp,0x10
c00152f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fc:	83 c0 24             	add    eax,0x24
c00152ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015301:	6a 00                	push   0x0
c0015303:	68 c9 4a 01 c0       	push   0xc0014ac9
c0015308:	6a 03                	push   0x3
c001530a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530d:	ff d0                	call   eax
c001530f:	83 c4 10             	add    esp,0x10
c0015312:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015315:	8b 00                	mov    eax,DWORD PTR [eax]
c0015317:	83 c0 24             	add    eax,0x24
c001531a:	8b 00                	mov    eax,DWORD PTR [eax]
c001531c:	6a 00                	push   0x0
c001531e:	68 c9 4a 01 c0       	push   0xc0014ac9
c0015323:	6a 04                	push   0x4
c0015325:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015328:	ff d0                	call   eax
c001532a:	83 c4 10             	add    esp,0x10
c001532d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015330:	8b 00                	mov    eax,DWORD PTR [eax]
c0015332:	83 c0 24             	add    eax,0x24
c0015335:	8b 00                	mov    eax,DWORD PTR [eax]
c0015337:	6a 00                	push   0x0
c0015339:	68 c9 4a 01 c0       	push   0xc0014ac9
c001533e:	6a 05                	push   0x5
c0015340:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015343:	ff d0                	call   eax
c0015345:	83 c4 10             	add    esp,0x10
c0015348:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534b:	8b 00                	mov    eax,DWORD PTR [eax]
c001534d:	83 c0 24             	add    eax,0x24
c0015350:	8b 00                	mov    eax,DWORD PTR [eax]
c0015352:	6a 00                	push   0x0
c0015354:	68 e8 4a 01 c0       	push   0xc0014ae8
c0015359:	6a 06                	push   0x6
c001535b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001535e:	ff d0                	call   eax
c0015360:	83 c4 10             	add    esp,0x10
c0015363:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015366:	8b 00                	mov    eax,DWORD PTR [eax]
c0015368:	83 c0 24             	add    eax,0x24
c001536b:	8b 00                	mov    eax,DWORD PTR [eax]
c001536d:	6a 00                	push   0x0
c001536f:	68 d5 49 01 c0       	push   0xc00149d5
c0015374:	6a 07                	push   0x7
c0015376:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015379:	ff d0                	call   eax
c001537b:	83 c4 10             	add    esp,0x10
c001537e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015381:	8b 00                	mov    eax,DWORD PTR [eax]
c0015383:	83 c0 24             	add    eax,0x24
c0015386:	8b 00                	mov    eax,DWORD PTR [eax]
c0015388:	6a 00                	push   0x0
c001538a:	68 be 41 01 c0       	push   0xc00141be
c001538f:	6a 08                	push   0x8
c0015391:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015394:	ff d0                	call   eax
c0015396:	83 c4 10             	add    esp,0x10
c0015399:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539c:	8b 00                	mov    eax,DWORD PTR [eax]
c001539e:	83 c0 24             	add    eax,0x24
c00153a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a3:	6a 00                	push   0x0
c00153a5:	68 c9 4a 01 c0       	push   0xc0014ac9
c00153aa:	6a 09                	push   0x9
c00153ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153af:	ff d0                	call   eax
c00153b1:	83 c4 10             	add    esp,0x10
c00153b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b9:	83 c0 24             	add    eax,0x24
c00153bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153be:	6a 00                	push   0x0
c00153c0:	68 c9 4a 01 c0       	push   0xc0014ac9
c00153c5:	6a 0a                	push   0xa
c00153c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ca:	ff d0                	call   eax
c00153cc:	83 c4 10             	add    esp,0x10
c00153cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d4:	83 c0 24             	add    eax,0x24
c00153d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d9:	6a 00                	push   0x0
c00153db:	68 c9 4a 01 c0       	push   0xc0014ac9
c00153e0:	6a 0b                	push   0xb
c00153e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e5:	ff d0                	call   eax
c00153e7:	83 c4 10             	add    esp,0x10
c00153ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ef:	83 c0 24             	add    eax,0x24
c00153f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f4:	6a 00                	push   0x0
c00153f6:	68 c9 4a 01 c0       	push   0xc0014ac9
c00153fb:	6a 0c                	push   0xc
c00153fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015400:	ff d0                	call   eax
c0015402:	83 c4 10             	add    esp,0x10
c0015405:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015408:	8b 00                	mov    eax,DWORD PTR [eax]
c001540a:	83 c0 24             	add    eax,0x24
c001540d:	8b 00                	mov    eax,DWORD PTR [eax]
c001540f:	6a 00                	push   0x0
c0015411:	68 48 4a 01 c0       	push   0xc0014a48
c0015416:	6a 0d                	push   0xd
c0015418:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001541b:	ff d0                	call   eax
c001541d:	83 c4 10             	add    esp,0x10
c0015420:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015423:	8b 00                	mov    eax,DWORD PTR [eax]
c0015425:	83 c0 24             	add    eax,0x24
c0015428:	8b 00                	mov    eax,DWORD PTR [eax]
c001542a:	6a 00                	push   0x0
c001542c:	68 81 4a 01 c0       	push   0xc0014a81
c0015431:	6a 0e                	push   0xe
c0015433:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015436:	ff d0                	call   eax
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015440:	83 c0 24             	add    eax,0x24
c0015443:	8b 00                	mov    eax,DWORD PTR [eax]
c0015445:	6a 00                	push   0x0
c0015447:	68 c9 4a 01 c0       	push   0xc0014ac9
c001544c:	6a 0f                	push   0xf
c001544e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015451:	ff d0                	call   eax
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015459:	8b 00                	mov    eax,DWORD PTR [eax]
c001545b:	83 c0 24             	add    eax,0x24
c001545e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015460:	6a 00                	push   0x0
c0015462:	68 c9 4a 01 c0       	push   0xc0014ac9
c0015467:	6a 10                	push   0x10
c0015469:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001546c:	ff d0                	call   eax
c001546e:	83 c4 10             	add    esp,0x10
c0015471:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015474:	8b 00                	mov    eax,DWORD PTR [eax]
c0015476:	83 c0 24             	add    eax,0x24
c0015479:	8b 00                	mov    eax,DWORD PTR [eax]
c001547b:	6a 00                	push   0x0
c001547d:	68 c9 4a 01 c0       	push   0xc0014ac9
c0015482:	6a 11                	push   0x11
c0015484:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015487:	ff d0                	call   eax
c0015489:	83 c4 10             	add    esp,0x10
c001548c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015491:	83 c0 24             	add    eax,0x24
c0015494:	8b 00                	mov    eax,DWORD PTR [eax]
c0015496:	6a 00                	push   0x0
c0015498:	68 c9 4a 01 c0       	push   0xc0014ac9
c001549d:	6a 12                	push   0x12
c001549f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a2:	ff d0                	call   eax
c00154a4:	83 c4 10             	add    esp,0x10
c00154a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ac:	83 c0 24             	add    eax,0x24
c00154af:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b1:	6a 00                	push   0x0
c00154b3:	68 c9 4a 01 c0       	push   0xc0014ac9
c00154b8:	6a 13                	push   0x13
c00154ba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154bd:	ff d0                	call   eax
c00154bf:	83 c4 10             	add    esp,0x10
c00154c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c7:	83 c0 24             	add    eax,0x24
c00154ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cc:	6a 00                	push   0x0
c00154ce:	68 c9 4a 01 c0       	push   0xc0014ac9
c00154d3:	6a 14                	push   0x14
c00154d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154d8:	ff d0                	call   eax
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e2:	83 c0 24             	add    eax,0x24
c00154e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e7:	6a 00                	push   0x0
c00154e9:	68 c9 4a 01 c0       	push   0xc0014ac9
c00154ee:	6a 1e                	push   0x1e
c00154f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f3:	ff d0                	call   eax
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154fd:	83 c0 24             	add    eax,0x24
c0015500:	8b 00                	mov    eax,DWORD PTR [eax]
c0015502:	6a 00                	push   0x0
c0015504:	68 06 c0 01 c0       	push   0xc001c006
c0015509:	6a 60                	push   0x60
c001550b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001550e:	ff d0                	call   eax
c0015510:	83 c4 10             	add    esp,0x10
c0015513:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015516:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015519:	c9                   	leave  
c001551a:	c3                   	ret    
c001551b:	90                   	nop

c001551c <InterruptController::convertLegacyIRQNumber(int)>:
c001551c:	55                   	push   ebp
c001551d:	89 e5                	mov    ebp,esp
c001551f:	83 ec 08             	sub    esp,0x8
c0015522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015525:	83 ec 0c             	sub    esp,0xc
c0015528:	50                   	push   eax
c0015529:	e8 b6 e8 ff ff       	call   c0013de4 <Device::getName()>
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	8a 00                	mov    al,BYTE PTR [eax]
c0015533:	3c 41                	cmp    al,0x41
c0015535:	0f 94 c0             	sete   al
c0015538:	84 c0                	test   al,al
c001553a:	74 28                	je     c0015564 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001553c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015540:	7f 12                	jg     c0015554 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015542:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015545:	05 40 cb 02 c0       	add    eax,0xc002cb40
c001554a:	8a 00                	mov    al,BYTE PTR [eax]
c001554c:	0f b6 c0             	movzx  eax,al
c001554f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015552:	eb 10                	jmp    c0015564 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015554:	83 ec 0c             	sub    esp,0xc
c0015557:	68 a4 ad 02 c0       	push   0xc002ada4
c001555c:	e8 b6 48 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015567:	c9                   	leave  
c0015568:	c3                   	ret    
c0015569:	90                   	nop

c001556a <startGUI(void*)>:
c001556a:	55                   	push   ebp
c001556b:	89 e5                	mov    ebp,esp
c001556d:	53                   	push   ebx
c001556e:	83 ec 04             	sub    esp,0x4
c0015571:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0015576:	48                   	dec    eax
c0015577:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001557c:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0015581:	85 c0                	test   eax,eax
c0015583:	75 01                	jne    c0015586 <startGUI(void*)+0x1c>
c0015585:	fb                   	sti    
c0015586:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c001558c:	83 ec 08             	sub    esp,0x8
c001558f:	6a 01                	push   0x1
c0015591:	68 24 ae 02 c0       	push   0xc002ae24
c0015596:	e8 46 7a 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c001559b:	83 c4 10             	add    esp,0x10
c001559e:	83 ec 08             	sub    esp,0x8
c00155a1:	53                   	push   ebx
c00155a2:	50                   	push   eax
c00155a3:	e8 64 7c 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c00155a8:	83 c4 10             	add    esp,0x10
c00155ab:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c00155b1:	83 ec 08             	sub    esp,0x8
c00155b4:	6a 01                	push   0x1
c00155b6:	68 3e ae 02 c0       	push   0xc002ae3e
c00155bb:	e8 21 7a 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c00155c0:	83 c4 10             	add    esp,0x10
c00155c3:	83 ec 08             	sub    esp,0x8
c00155c6:	53                   	push   ebx
c00155c7:	50                   	push   eax
c00155c8:	e8 3f 7c 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c00155cd:	83 c4 10             	add    esp,0x10
c00155d0:	90                   	nop
c00155d1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155d4:	c9                   	leave  
c00155d5:	c3                   	ret    

c00155d6 <startGUIVESA(void*)>:
c00155d6:	55                   	push   ebp
c00155d7:	89 e5                	mov    ebp,esp
c00155d9:	53                   	push   ebx
c00155da:	83 ec 04             	sub    esp,0x4
c00155dd:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00155e2:	48                   	dec    eax
c00155e3:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c00155e8:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00155ed:	85 c0                	test   eax,eax
c00155ef:	75 01                	jne    c00155f2 <startGUIVESA(void*)+0x1c>
c00155f1:	fb                   	sti    
c00155f2:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c00155f8:	83 ec 08             	sub    esp,0x8
c00155fb:	6a 01                	push   0x1
c00155fd:	68 58 ae 02 c0       	push   0xc002ae58
c0015602:	e8 da 79 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	83 ec 08             	sub    esp,0x8
c001560d:	53                   	push   ebx
c001560e:	50                   	push   eax
c001560f:	e8 f8 7b 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c0015614:	83 c4 10             	add    esp,0x10
c0015617:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c001561d:	83 ec 08             	sub    esp,0x8
c0015620:	6a 01                	push   0x1
c0015622:	68 3e ae 02 c0       	push   0xc002ae3e
c0015627:	e8 b5 79 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c001562c:	83 c4 10             	add    esp,0x10
c001562f:	83 ec 08             	sub    esp,0x8
c0015632:	53                   	push   ebx
c0015633:	50                   	push   eax
c0015634:	e8 d3 7b 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c0015639:	83 c4 10             	add    esp,0x10
c001563c:	90                   	nop
c001563d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015640:	c9                   	leave  
c0015641:	c3                   	ret    

c0015642 <sendKeyToTerminal(unsigned char)>:
c0015642:	55                   	push   ebp
c0015643:	89 e5                	mov    ebp,esp
c0015645:	83 ec 28             	sub    esp,0x28
c0015648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001564e:	a1 a4 d9 02 c0       	mov    eax,ds:0xc002d9a4
c0015653:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015657:	83 ec 08             	sub    esp,0x8
c001565a:	52                   	push   edx
c001565b:	50                   	push   eax
c001565c:	e8 83 b3 ff ff       	call   c00109e4 <VgaText::receiveKey(unsigned char)>
c0015661:	83 c4 10             	add    esp,0x10
c0015664:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015668:	0f 85 8f 00 00 00    	jne    c00156fd <sendKeyToTerminal(unsigned char)+0xbb>
c001566e:	fa                   	cli    
c001566f:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0015674:	40                   	inc    eax
c0015675:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001567a:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001567f:	40                   	inc    eax
c0015680:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c0015685:	a1 80 da 02 c0       	mov    eax,ds:0xc002da80
c001568a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001568d:	c7 05 80 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da80,0x0
c0015697:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001569b:	74 1f                	je     c00156bc <sendKeyToTerminal(unsigned char)+0x7a>
c001569d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156ac:	83 ec 0c             	sub    esp,0xc
c00156af:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156b2:	e8 6d 87 00 00       	call   c001de24 <unblockTask(ThreadControlBlock*)>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	eb db                	jmp    c0015697 <sendKeyToTerminal(unsigned char)+0x55>
c00156bc:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c00156c1:	48                   	dec    eax
c00156c2:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c00156c7:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c00156cc:	85 c0                	test   eax,eax
c00156ce:	75 18                	jne    c00156e8 <sendKeyToTerminal(unsigned char)+0xa6>
c00156d0:	a1 00 0e 03 c0       	mov    eax,ds:0xc0030e00
c00156d5:	85 c0                	test   eax,eax
c00156d7:	74 0f                	je     c00156e8 <sendKeyToTerminal(unsigned char)+0xa6>
c00156d9:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c00156e3:	e8 b9 82 00 00       	call   c001d9a1 <schedule()>
c00156e8:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00156ed:	48                   	dec    eax
c00156ee:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c00156f3:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00156f8:	85 c0                	test   eax,eax
c00156fa:	75 01                	jne    c00156fd <sendKeyToTerminal(unsigned char)+0xbb>
c00156fc:	fb                   	sti    
c00156fd:	90                   	nop
c00156fe:	c9                   	leave  
c00156ff:	c3                   	ret    

c0015700 <sendKeyboardToken(KeyboardToken)>:
c0015700:	55                   	push   ebp
c0015701:	89 e5                	mov    ebp,esp
c0015703:	83 ec 18             	sub    esp,0x18
c0015706:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570c:	0f b7 c0             	movzx  eax,ax
c001570f:	83 f2 01             	xor    edx,0x1
c0015712:	88 90 a0 da 02 c0    	mov    BYTE PTR [eax-0x3ffd2560],dl
c0015718:	a1 88 da 02 c0       	mov    eax,ds:0xc002da88
c001571d:	85 c0                	test   eax,eax
c001571f:	74 24                	je     c0015745 <sendKeyboardToken(KeyboardToken)+0x45>
c0015721:	8b 0d 88 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da88
c0015727:	83 ec 04             	sub    esp,0x4
c001572a:	68 a0 da 02 c0       	push   0xc002daa0
c001572f:	83 ec 08             	sub    esp,0x8
c0015732:	89 e2                	mov    edx,esp
c0015734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015737:	89 02                	mov    DWORD PTR [edx],eax
c0015739:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001573c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015740:	ff d1                	call   ecx
c0015742:	83 c4 10             	add    esp,0x10
c0015745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015748:	66 3d 03 02          	cmp    ax,0x203
c001574c:	75 07                	jne    c0015755 <sendKeyboardToken(KeyboardToken)+0x55>
c001574e:	a0 a0 db 02 c0       	mov    al,ds:0xc002dba0
c0015753:	84 c0                	test   al,al
c0015755:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015759:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001575c:	a0 a8 de 02 c0       	mov    al,ds:0xc002dea8
c0015761:	38 c2                	cmp    dl,al
c0015763:	74 1c                	je     c0015781 <sendKeyboardToken(KeyboardToken)+0x81>
c0015765:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015768:	a2 a8 de 02 c0       	mov    ds:0xc002dea8,al
c001576d:	a0 a8 de 02 c0       	mov    al,ds:0xc002dea8
c0015772:	0f b6 c0             	movzx  eax,al
c0015775:	83 ec 0c             	sub    esp,0xc
c0015778:	50                   	push   eax
c0015779:	e8 a8 a8 ff ff       	call   c0010026 <setTerminalScrollLock(bool)>
c001577e:	83 c4 10             	add    esp,0x10
c0015781:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015784:	84 c0                	test   al,al
c0015786:	0f 84 ae 00 00 00    	je     c001583a <sendKeyboardToken(KeyboardToken)+0x13a>
c001578c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578f:	66 3d 10 03          	cmp    ax,0x310
c0015793:	75 06                	jne    c001579b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015795:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001579b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579e:	66 3d 11 03          	cmp    ax,0x311
c00157a2:	75 06                	jne    c00157aa <sendKeyboardToken(KeyboardToken)+0xaa>
c00157a4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ad:	66 3d 12 03          	cmp    ax,0x312
c00157b1:	75 06                	jne    c00157b9 <sendKeyboardToken(KeyboardToken)+0xb9>
c00157b3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bc:	66 3d 13 03          	cmp    ax,0x313
c00157c0:	75 06                	jne    c00157c8 <sendKeyboardToken(KeyboardToken)+0xc8>
c00157c2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00157c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cb:	66 3d 14 03          	cmp    ax,0x314
c00157cf:	75 06                	jne    c00157d7 <sendKeyboardToken(KeyboardToken)+0xd7>
c00157d1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	66 3d 15 03          	cmp    ax,0x315
c00157de:	75 06                	jne    c00157e6 <sendKeyboardToken(KeyboardToken)+0xe6>
c00157e0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e9:	66 3d 16 03          	cmp    ax,0x316
c00157ed:	75 06                	jne    c00157f5 <sendKeyboardToken(KeyboardToken)+0xf5>
c00157ef:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00157f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f8:	66 3d 17 03          	cmp    ax,0x317
c00157fc:	75 06                	jne    c0015804 <sendKeyboardToken(KeyboardToken)+0x104>
c00157fe:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	66 3d 18 03          	cmp    ax,0x318
c001580b:	75 06                	jne    c0015813 <sendKeyboardToken(KeyboardToken)+0x113>
c001580d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015816:	66 3d 19 03          	cmp    ax,0x319
c001581a:	75 06                	jne    c0015822 <sendKeyboardToken(KeyboardToken)+0x122>
c001581c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015825:	66 3d 1a 03          	cmp    ax,0x31a
c0015829:	0f 85 c9 00 00 00    	jne    c00158f8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001582f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015835:	e9 be 00 00 00       	jmp    c00158f8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001583a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583d:	66 3d 10 03          	cmp    ax,0x310
c0015841:	75 0a                	jne    c001584d <sendKeyboardToken(KeyboardToken)+0x14d>
c0015843:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015849:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001584d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015850:	66 3d 11 03          	cmp    ax,0x311
c0015854:	75 0a                	jne    c0015860 <sendKeyboardToken(KeyboardToken)+0x160>
c0015856:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001585c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015863:	66 3d 12 03          	cmp    ax,0x312
c0015867:	75 0a                	jne    c0015873 <sendKeyboardToken(KeyboardToken)+0x173>
c0015869:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001586f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015876:	66 3d 13 03          	cmp    ax,0x313
c001587a:	75 0a                	jne    c0015886 <sendKeyboardToken(KeyboardToken)+0x186>
c001587c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015882:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015889:	66 3d 14 03          	cmp    ax,0x314
c001588d:	75 0a                	jne    c0015899 <sendKeyboardToken(KeyboardToken)+0x199>
c001588f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015895:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589c:	66 3d 15 03          	cmp    ax,0x315
c00158a0:	75 0a                	jne    c00158ac <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158a2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158af:	66 3d 16 03          	cmp    ax,0x316
c00158b3:	75 0a                	jne    c00158bf <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158b5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c2:	66 3d 17 03          	cmp    ax,0x317
c00158c6:	75 0a                	jne    c00158d2 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00158c8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158ce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d5:	66 3d 18 03          	cmp    ax,0x318
c00158d9:	75 0a                	jne    c00158e5 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00158db:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00158e1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e8:	66 3d 19 03          	cmp    ax,0x319
c00158ec:	75 0a                	jne    c00158f8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00158ee:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00158f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fb:	66 3d 00 02          	cmp    ax,0x200
c00158ff:	75 2c                	jne    c001592d <sendKeyboardToken(KeyboardToken)+0x22d>
c0015901:	a0 a0 de 02 c0       	mov    al,ds:0xc002dea0
c0015906:	83 f0 01             	xor    eax,0x1
c0015909:	84 c0                	test   al,al
c001590b:	74 20                	je     c001592d <sendKeyboardToken(KeyboardToken)+0x22d>
c001590d:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0015912:	6a 01                	push   0x1
c0015914:	6a 00                	push   0x0
c0015916:	68 6a 55 01 c0       	push   0xc001556a
c001591b:	50                   	push   eax
c001591c:	e8 5b 7e 00 00       	call   c001d77c <Process::createThread(void (*)(void*), void*, int)>
c0015921:	83 c4 10             	add    esp,0x10
c0015924:	c6 05 a0 de 02 c0 01 	mov    BYTE PTR ds:0xc002dea0,0x1
c001592b:	eb 33                	jmp    c0015960 <sendKeyboardToken(KeyboardToken)+0x260>
c001592d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015930:	66 3d 01 02          	cmp    ax,0x201
c0015934:	75 2a                	jne    c0015960 <sendKeyboardToken(KeyboardToken)+0x260>
c0015936:	a0 a0 de 02 c0       	mov    al,ds:0xc002dea0
c001593b:	83 f0 01             	xor    eax,0x1
c001593e:	84 c0                	test   al,al
c0015940:	74 1e                	je     c0015960 <sendKeyboardToken(KeyboardToken)+0x260>
c0015942:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0015947:	6a 01                	push   0x1
c0015949:	6a 00                	push   0x0
c001594b:	68 d6 55 01 c0       	push   0xc00155d6
c0015950:	50                   	push   eax
c0015951:	e8 26 7e 00 00       	call   c001d77c <Process::createThread(void (*)(void*), void*, int)>
c0015956:	83 c4 10             	add    esp,0x10
c0015959:	c6 05 a0 de 02 c0 01 	mov    BYTE PTR ds:0xc002dea0,0x1
c0015960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015963:	66 3d 1d 03          	cmp    ax,0x31d
c0015967:	75 06                	jne    c001596f <sendKeyboardToken(KeyboardToken)+0x26f>
c0015969:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001596f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015972:	66 3d 1c 03          	cmp    ax,0x31c
c0015976:	75 06                	jne    c001597e <sendKeyboardToken(KeyboardToken)+0x27e>
c0015978:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001597e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015981:	66 3d 1b 03          	cmp    ax,0x31b
c0015985:	75 06                	jne    c001598d <sendKeyboardToken(KeyboardToken)+0x28d>
c0015987:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001598d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015990:	66 3d 1e 03          	cmp    ax,0x31e
c0015994:	75 06                	jne    c001599c <sendKeyboardToken(KeyboardToken)+0x29c>
c0015996:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001599c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599f:	66 3d 1f 03          	cmp    ax,0x31f
c00159a3:	75 06                	jne    c00159ab <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159a5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ae:	66 3d 1a 03          	cmp    ax,0x31a
c00159b2:	75 06                	jne    c00159ba <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159b4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159ba:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159be:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159c1:	83 f0 01             	xor    eax,0x1
c00159c4:	84 c0                	test   al,al
c00159c6:	74 77                	je     c0015a3f <sendKeyboardToken(KeyboardToken)+0x33f>
c00159c8:	a0 a1 db 02 c0       	mov    al,ds:0xc002dba1
c00159cd:	84 c0                	test   al,al
c00159cf:	74 41                	je     c0015a12 <sendKeyboardToken(KeyboardToken)+0x312>
c00159d1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159d5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159d9:	74 2b                	je     c0015a06 <sendKeyboardToken(KeyboardToken)+0x306>
c00159db:	8b 15 a4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dea4
c00159e1:	89 d0                	mov    eax,edx
c00159e3:	c1 e0 02             	shl    eax,0x2
c00159e6:	01 d0                	add    eax,edx
c00159e8:	01 c0                	add    eax,eax
c00159ea:	a3 a4 de 02 c0       	mov    ds:0xc002dea4,eax
c00159ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f2:	0f b7 c0             	movzx  eax,ax
c00159f5:	8d 50 d0             	lea    edx,[eax-0x30]
c00159f8:	a1 a4 de 02 c0       	mov    eax,ds:0xc002dea4
c00159fd:	01 d0                	add    eax,edx
c00159ff:	a3 a4 de 02 c0       	mov    ds:0xc002dea4,eax
c0015a04:	eb 6d                	jmp    c0015a73 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a06:	c7 05 a4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dea4,0x0
c0015a10:	eb 61                	jmp    c0015a73 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a12:	a1 a4 de 02 c0       	mov    eax,ds:0xc002dea4
c0015a17:	85 c0                	test   eax,eax
c0015a19:	74 18                	je     c0015a33 <sendKeyboardToken(KeyboardToken)+0x333>
c0015a1b:	a1 a4 de 02 c0       	mov    eax,ds:0xc002dea4
c0015a20:	0f b6 c0             	movzx  eax,al
c0015a23:	83 ec 0c             	sub    esp,0xc
c0015a26:	50                   	push   eax
c0015a27:	e8 16 fc ff ff       	call   c0015642 <sendKeyToTerminal(unsigned char)>
c0015a2c:	83 c4 10             	add    esp,0x10
c0015a2f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a33:	c7 05 a4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dea4,0x0
c0015a3d:	eb 34                	jmp    c0015a73 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a42:	66 3d 01 01          	cmp    ax,0x101
c0015a46:	75 2b                	jne    c0015a73 <sendKeyboardToken(KeyboardToken)+0x373>
c0015a48:	a1 a4 de 02 c0       	mov    eax,ds:0xc002dea4
c0015a4d:	85 c0                	test   eax,eax
c0015a4f:	74 18                	je     c0015a69 <sendKeyboardToken(KeyboardToken)+0x369>
c0015a51:	a1 a4 de 02 c0       	mov    eax,ds:0xc002dea4
c0015a56:	0f b6 c0             	movzx  eax,al
c0015a59:	83 ec 0c             	sub    esp,0xc
c0015a5c:	50                   	push   eax
c0015a5d:	e8 e0 fb ff ff       	call   c0015642 <sendKeyToTerminal(unsigned char)>
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a69:	c7 05 a4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dea4,0x0
c0015a73:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a76:	83 f0 01             	xor    eax,0x1
c0015a79:	84 c0                	test   al,al
c0015a7b:	74 4c                	je     c0015ac9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a7d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a80:	83 f0 01             	xor    eax,0x1
c0015a83:	84 c0                	test   al,al
c0015a85:	74 42                	je     c0015ac9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a87:	a0 a0 db 02 c0       	mov    al,ds:0xc002dba0
c0015a8c:	83 f0 01             	xor    eax,0x1
c0015a8f:	84 c0                	test   al,al
c0015a91:	74 36                	je     c0015ac9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a96:	66 83 f8 1f          	cmp    ax,0x1f
c0015a9a:	76 09                	jbe    c0015aa5 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015a9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9f:	66 83 f8 7e          	cmp    ax,0x7e
c0015aa3:	76 12                	jbe    c0015ab7 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa8:	66 83 f8 0a          	cmp    ax,0xa
c0015aac:	74 09                	je     c0015ab7 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab1:	66 83 f8 08          	cmp    ax,0x8
c0015ab5:	75 12                	jne    c0015ac9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aba:	0f b6 c0             	movzx  eax,al
c0015abd:	83 ec 0c             	sub    esp,0xc
c0015ac0:	50                   	push   eax
c0015ac1:	e8 7c fb ff ff       	call   c0015642 <sendKeyToTerminal(unsigned char)>
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015acc:	83 f0 01             	xor    eax,0x1
c0015acf:	84 c0                	test   al,al
c0015ad1:	74 4f                	je     c0015b22 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ad3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ad6:	83 f0 01             	xor    eax,0x1
c0015ad9:	84 c0                	test   al,al
c0015adb:	74 45                	je     c0015b22 <sendKeyboardToken(KeyboardToken)+0x422>
c0015add:	a0 a0 db 02 c0       	mov    al,ds:0xc002dba0
c0015ae2:	84 c0                	test   al,al
c0015ae4:	74 3c                	je     c0015b22 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae9:	66 83 f8 3f          	cmp    ax,0x3f
c0015aed:	76 33                	jbe    c0015b22 <sendKeyboardToken(KeyboardToken)+0x422>
c0015aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af2:	66 83 f8 7f          	cmp    ax,0x7f
c0015af6:	77 2a                	ja     c0015b22 <sendKeyboardToken(KeyboardToken)+0x422>
c0015af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afb:	88 c2                	mov    dl,al
c0015afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b00:	66 83 f8 5f          	cmp    ax,0x5f
c0015b04:	76 04                	jbe    c0015b0a <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b06:	b0 20                	mov    al,0x20
c0015b08:	eb 02                	jmp    c0015b0c <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b0a:	b0 00                	mov    al,0x0
c0015b0c:	29 c2                	sub    edx,eax
c0015b0e:	88 d0                	mov    al,dl
c0015b10:	83 e8 40             	sub    eax,0x40
c0015b13:	0f b6 c0             	movzx  eax,al
c0015b16:	83 ec 0c             	sub    esp,0xc
c0015b19:	50                   	push   eax
c0015b1a:	e8 23 fb ff ff       	call   c0015642 <sendKeyToTerminal(unsigned char)>
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b25:	66 3d 00 03          	cmp    ax,0x300
c0015b29:	75 0f                	jne    c0015b3a <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b2b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b2e:	83 f0 01             	xor    eax,0x1
c0015b31:	84 c0                	test   al,al
c0015b33:	74 05                	je     c0015b3a <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b35:	e8 5d a8 ff ff       	call   c0010397 <doTerminalCycle()>
c0015b3a:	90                   	nop
c0015b3b:	c9                   	leave  
c0015b3c:	c3                   	ret    

c0015b3d <clearInternalKeybuffer(VgaText*)>:
c0015b3d:	55                   	push   ebp
c0015b3e:	89 e5                	mov    ebp,esp
c0015b40:	83 ec 08             	sub    esp,0x8
c0015b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b46:	05 98 01 00 00       	add    eax,0x198
c0015b4b:	83 ec 0c             	sub    esp,0xc
c0015b4e:	50                   	push   eax
c0015b4f:	e8 18 ac fe ff       	call   c000076c <strlen>
c0015b54:	83 c4 10             	add    esp,0x10
c0015b57:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b5a:	81 c2 98 01 00 00    	add    edx,0x198
c0015b60:	83 ec 04             	sub    esp,0x4
c0015b63:	50                   	push   eax
c0015b64:	6a 00                	push   0x0
c0015b66:	52                   	push   edx
c0015b67:	e8 e4 ab fe ff       	call   c0000750 <memset>
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	90                   	nop
c0015b70:	c9                   	leave  
c0015b71:	c3                   	ret    

c0015b72 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b72:	55                   	push   ebp
c0015b73:	89 e5                	mov    ebp,esp
c0015b75:	83 ec 18             	sub    esp,0x18
c0015b78:	a1 88 da 02 c0       	mov    eax,ds:0xc002da88
c0015b7d:	85 c0                	test   eax,eax
c0015b7f:	74 2a                	je     c0015bab <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015b81:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015b87:	8b 0d 88 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da88
c0015b8d:	83 ec 04             	sub    esp,0x4
c0015b90:	68 a0 da 02 c0       	push   0xc002daa0
c0015b95:	83 ec 08             	sub    esp,0x8
c0015b98:	89 e2                	mov    edx,esp
c0015b9a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015b9d:	89 02                	mov    DWORD PTR [edx],eax
c0015b9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ba2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ba6:	ff d1                	call   ecx
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	fb                   	sti    
c0015bac:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015bb3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015bb7:	0f 84 a1 00 00 00    	je     c0015c5e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc0:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015bc6:	84 c0                	test   al,al
c0015bc8:	75 28                	jne    c0015bf2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015bca:	fa                   	cli    
c0015bcb:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0015bd0:	40                   	inc    eax
c0015bd1:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0015bd6:	e8 c6 7d 00 00       	call   c001d9a1 <schedule()>
c0015bdb:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0015be0:	48                   	dec    eax
c0015be1:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0015be6:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0015beb:	85 c0                	test   eax,eax
c0015bed:	75 ce                	jne    c0015bbd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015bef:	fb                   	sti    
c0015bf0:	eb cb                	jmp    c0015bbd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015bf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bf5:	8d 50 01             	lea    edx,[eax+0x1]
c0015bf8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015bfb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bfe:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c04:	88 10                	mov    BYTE PTR [eax],dl
c0015c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c09:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c0f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c15:	05 98 01 00 00       	add    eax,0x198
c0015c1a:	83 ec 0c             	sub    esp,0xc
c0015c1d:	50                   	push   eax
c0015c1e:	e8 49 ab fe ff       	call   c000076c <strlen>
c0015c23:	83 c4 10             	add    esp,0x10
c0015c26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c29:	81 c2 98 01 00 00    	add    edx,0x198
c0015c2f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c32:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c35:	81 c2 98 01 00 00    	add    edx,0x198
c0015c3b:	83 ec 04             	sub    esp,0x4
c0015c3e:	50                   	push   eax
c0015c3f:	51                   	push   ecx
c0015c40:	52                   	push   edx
c0015c41:	e8 42 aa fe ff       	call   c0000688 <memmove>
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c4c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c4f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c53:	0f 85 5a ff ff ff    	jne    c0015bb3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5c:	eb 03                	jmp    c0015c61 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c61:	c9                   	leave  
c0015c62:	c3                   	ret    
c0015c63:	90                   	nop

c0015c64 <Keyboard::Keyboard(char const*)>:
c0015c64:	83 ec 0c             	sub    esp,0xc
c0015c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c6b:	83 ec 08             	sub    esp,0x8
c0015c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c72:	50                   	push   eax
c0015c73:	e8 70 e0 ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0015c78:	83 c4 10             	add    esp,0x10
c0015c7b:	ba 7c ae 02 c0       	mov    edx,0xc002ae7c
c0015c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c84:	89 10                	mov    DWORD PTR [eax],edx
c0015c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015c94:	c6 05 84 da 02 c0 01 	mov    BYTE PTR ds:0xc002da84,0x1
c0015c9b:	90                   	nop
c0015c9c:	83 c4 0c             	add    esp,0xc
c0015c9f:	c3                   	ret    

c0015ca0 <Keyboard::~Keyboard()>:
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	ba 7c ae 02 c0       	mov    edx,0xc002ae7c
c0015ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cac:	89 10                	mov    DWORD PTR [eax],edx
c0015cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cb2:	83 ec 0c             	sub    esp,0xc
c0015cb5:	50                   	push   eax
c0015cb6:	e8 f7 dc ff ff       	call   c00139b2 <Device::~Device()>
c0015cbb:	83 c4 10             	add    esp,0x10
c0015cbe:	90                   	nop
c0015cbf:	83 c4 0c             	add    esp,0xc
c0015cc2:	c3                   	ret    
c0015cc3:	90                   	nop

c0015cc4 <Keyboard::~Keyboard()>:
c0015cc4:	83 ec 0c             	sub    esp,0xc
c0015cc7:	83 ec 0c             	sub    esp,0xc
c0015cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cce:	e8 cd ff ff ff       	call   c0015ca0 <Keyboard::~Keyboard()>
c0015cd3:	83 c4 10             	add    esp,0x10
c0015cd6:	83 ec 08             	sub    esp,0x8
c0015cd9:	68 5c 01 00 00       	push   0x15c
c0015cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ce2:	e8 ec c8 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	83 c4 0c             	add    esp,0xc
c0015ced:	c3                   	ret    

c0015cee <LogicalDisk::close(int, int, void*)>:
c0015cee:	83 c8 ff             	or     eax,0xffffffff
c0015cf1:	c3                   	ret    

c0015cf2 <LogicalDisk::~LogicalDisk()>:
c0015cf2:	83 ec 0c             	sub    esp,0xc
c0015cf5:	ba f4 ae 02 c0       	mov    edx,0xc002aef4
c0015cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cfe:	89 10                	mov    DWORD PTR [eax],edx
c0015d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d04:	83 ec 0c             	sub    esp,0xc
c0015d07:	50                   	push   eax
c0015d08:	e8 a5 dc ff ff       	call   c00139b2 <Device::~Device()>
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	90                   	nop
c0015d11:	83 c4 0c             	add    esp,0xc
c0015d14:	c3                   	ret    
c0015d15:	90                   	nop

c0015d16 <LogicalDisk::~LogicalDisk()>:
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	83 ec 0c             	sub    esp,0xc
c0015d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d20:	e8 cd ff ff ff       	call   c0015cf2 <LogicalDisk::~LogicalDisk()>
c0015d25:	83 c4 10             	add    esp,0x10
c0015d28:	83 ec 08             	sub    esp,0x8
c0015d2b:	68 74 01 00 00       	push   0x174
c0015d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d34:	e8 9a c8 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0015d39:	83 c4 10             	add    esp,0x10
c0015d3c:	83 c4 0c             	add    esp,0xc
c0015d3f:	c3                   	ret    

c0015d40 <LogicalDisk::open(int, int, void*)>:
c0015d40:	83 ec 18             	sub    esp,0x18
c0015d43:	68 a8 ae 02 c0       	push   0xc002aea8
c0015d48:	e8 ca 40 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0015d4d:	83 c8 ff             	or     eax,0xffffffff
c0015d50:	83 c4 1c             	add    esp,0x1c
c0015d53:	c3                   	ret    

c0015d54 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d54:	53                   	push   ebx
c0015d55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d61:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d67:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d6d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d73:	77 10                	ja     c0015d85 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d75:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d7b:	89 d3                	mov    ebx,edx
c0015d7d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d83:	72 05                	jb     c0015d8a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015d85:	83 c8 ff             	or     eax,0xffffffff
c0015d88:	89 c2                	mov    edx,eax
c0015d8a:	5b                   	pop    ebx
c0015d8b:	c3                   	ret    

c0015d8c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015d8c:	56                   	push   esi
c0015d8d:	83 c8 ff             	or     eax,0xffffffff
c0015d90:	53                   	push   ebx
c0015d91:	89 c2                	mov    edx,eax
c0015d93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015d97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015d9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d9f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015da5:	77 27                	ja     c0015dce <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015da7:	89 d8                	mov    eax,ebx
c0015da9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015daf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015db5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dba:	89 c2                	mov    edx,eax
c0015dbc:	73 10                	jae    c0015dce <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dbe:	89 c8                	mov    eax,ecx
c0015dc0:	89 da                	mov    edx,ebx
c0015dc2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015dc8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015dce:	5b                   	pop    ebx
c0015dcf:	5e                   	pop    esi
c0015dd0:	c3                   	ret    
c0015dd1:	90                   	nop

c0015dd2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015dd2:	83 ec 1c             	sub    esp,0x1c
c0015dd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ddd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015de1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015de5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015de9:	89 04 24             	mov    DWORD PTR [esp],eax
c0015dec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015df0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015df8:	83 ec 08             	sub    esp,0x8
c0015dfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dff:	50                   	push   eax
c0015e00:	e8 e3 de ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	ba f4 ae 02 c0       	mov    edx,0xc002aef4
c0015e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e11:	89 10                	mov    DWORD PTR [eax],edx
c0015e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e17:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e22:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e2d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e37:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e43:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e49:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e5a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e60:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e6e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e78:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e82:	90                   	nop
c0015e83:	83 c4 1c             	add    esp,0x1c
c0015e86:	c3                   	ret    
c0015e87:	90                   	nop

c0015e88 <LogicalDisk::assignDriveLetter()>:
c0015e88:	55                   	push   ebp
c0015e89:	57                   	push   edi
c0015e8a:	56                   	push   esi
c0015e8b:	53                   	push   ebx
c0015e8c:	83 ec 14             	sub    esp,0x14
c0015e8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e93:	8b 3d c0 de 02 c0    	mov    edi,DWORD PTR ds:0xc002dec0
c0015e99:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015e9f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ea3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ea9:	8b 3d c4 de 02 c0    	mov    edi,DWORD PTR ds:0xc002dec4
c0015eaf:	3c 01                	cmp    al,0x1
c0015eb1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015eb5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015eb9:	19 c0                	sbb    eax,eax
c0015ebb:	83 e0 02             	and    eax,0x2
c0015ebe:	83 c0 41             	add    eax,0x41
c0015ec1:	0f be e8             	movsx  ebp,al
c0015ec4:	3c 43                	cmp    al,0x43
c0015ec6:	75 10                	jne    c0015ed8 <LogicalDisk::assignDriveLetter()+0x50>
c0015ec8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015ecf:	75 5d                	jne    c0015f2e <LogicalDisk::assignDriveLetter()+0xa6>
c0015ed1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ed6:	75 56                	jne    c0015f2e <LogicalDisk::assignDriveLetter()+0xa6>
c0015ed8:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015edb:	ba 01 00 00 00       	mov    edx,0x1
c0015ee0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015ee4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015ee8:	d3 e2                	shl    edx,cl
c0015eea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015eee:	89 d7                	mov    edi,edx
c0015ef0:	89 d6                	mov    esi,edx
c0015ef2:	c1 ff 1f             	sar    edi,0x1f
c0015ef5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015ef9:	21 f9                	and    ecx,edi
c0015efb:	09 d1                	or     ecx,edx
c0015efd:	75 2f                	jne    c0015f2e <LogicalDisk::assignDriveLetter()+0xa6>
c0015eff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f07:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f0d:	09 f2                	or     edx,esi
c0015f0f:	89 15 c0 de 02 c0    	mov    DWORD PTR ds:0xc002dec0,edx
c0015f15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f19:	09 fa                	or     edx,edi
c0015f1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f1f:	89 15 c4 de 02 c0    	mov    DWORD PTR ds:0xc002dec4,edx
c0015f25:	89 1c bd e0 de 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2120],ebx
c0015f2c:	eb 08                	jmp    c0015f36 <LogicalDisk::assignDriveLetter()+0xae>
c0015f2e:	45                   	inc    ebp
c0015f2f:	40                   	inc    eax
c0015f30:	3c 5b                	cmp    al,0x5b
c0015f32:	75 90                	jne    c0015ec4 <LogicalDisk::assignDriveLetter()+0x3c>
c0015f34:	31 c0                	xor    eax,eax
c0015f36:	83 c4 14             	add    esp,0x14
c0015f39:	5b                   	pop    ebx
c0015f3a:	5e                   	pop    esi
c0015f3b:	5f                   	pop    edi
c0015f3c:	5d                   	pop    ebp
c0015f3d:	c3                   	ret    

c0015f3e <LogicalDisk::mount()>:
c0015f3e:	56                   	push   esi
c0015f3f:	53                   	push   ebx
c0015f40:	53                   	push   ebx
c0015f41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f45:	8b 1d 54 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da54
c0015f4b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f55:	85 db                	test   ebx,ebx
c0015f57:	74 27                	je     c0015f80 <LogicalDisk::mount()+0x42>
c0015f59:	51                   	push   ecx
c0015f5a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f61:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f63:	83 e8 41             	sub    eax,0x41
c0015f66:	50                   	push   eax
c0015f67:	56                   	push   esi
c0015f68:	53                   	push   ebx
c0015f69:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f6c:	83 c4 10             	add    esp,0x10
c0015f6f:	84 c0                	test   al,al
c0015f71:	74 08                	je     c0015f7b <LogicalDisk::mount()+0x3d>
c0015f73:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f79:	eb 07                	jmp    c0015f82 <LogicalDisk::mount()+0x44>
c0015f7b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f7e:	eb d5                	jmp    c0015f55 <LogicalDisk::mount()+0x17>
c0015f80:	31 c0                	xor    eax,eax
c0015f82:	5a                   	pop    edx
c0015f83:	5b                   	pop    ebx
c0015f84:	5e                   	pop    esi
c0015f85:	c3                   	ret    

c0015f86 <LogicalDisk::unmount()>:
c0015f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f8a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f94:	c3                   	ret    
c0015f95:	90                   	nop

c0015f96 <LogicalDisk::eject()>:
c0015f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fa0:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fa6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015fa9:	90                   	nop

c0015faa <LogicalDisk::unassignDriveLetter()>:
c0015faa:	57                   	push   edi
c0015fab:	56                   	push   esi
c0015fac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fb0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fb7:	84 c9                	test   cl,cl
c0015fb9:	75 0f                	jne    c0015fca <LogicalDisk::unassignDriveLetter()+0x20>
c0015fbb:	c7 44 24 0c cc ae 02 c0 	mov    DWORD PTR [esp+0xc],0xc002aecc
c0015fc3:	5e                   	pop    esi
c0015fc4:	5f                   	pop    edi
c0015fc5:	e9 4d 3e 00 00       	jmp    c0019e17 <Krnl::panic(char const*)>
c0015fca:	83 e9 41             	sub    ecx,0x41
c0015fcd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015fd4:	b8 01 00 00 00       	mov    eax,0x1
c0015fd9:	c7 04 8d e0 de 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2120],0x0
c0015fe4:	d3 e0                	shl    eax,cl
c0015fe6:	89 c7                	mov    edi,eax
c0015fe8:	f7 d0                	not    eax
c0015fea:	c1 ff 1f             	sar    edi,0x1f
c0015fed:	21 05 c0 de 02 c0    	and    DWORD PTR ds:0xc002dec0,eax
c0015ff3:	89 fe                	mov    esi,edi
c0015ff5:	f7 d6                	not    esi
c0015ff7:	21 35 c4 de 02 c0    	and    DWORD PTR ds:0xc002dec4,esi
c0015ffd:	5e                   	pop    esi
c0015ffe:	5f                   	pop    edi
c0015fff:	c3                   	ret    

c0016000 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016000:	57                   	push   edi
c0016001:	56                   	push   esi
c0016002:	53                   	push   ebx
c0016003:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016007:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001600b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001600f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016013:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016019:	77 41                	ja     c001605c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001601b:	99                   	cdq    
c001601c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016022:	01 c8                	add    eax,ecx
c0016024:	11 da                	adc    edx,ebx
c0016026:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001602c:	19 d7                	sbb    edi,edx
c001602e:	72 33                	jb     c0016063 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016030:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016036:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001603c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016040:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016044:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001604a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016050:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016054:	5b                   	pop    ebx
c0016055:	5e                   	pop    esi
c0016056:	5f                   	pop    edi
c0016057:	e9 cc 0a 00 00       	jmp    c0016b28 <VCache::read(unsigned long long, int, void*)>
c001605c:	b8 05 00 00 00       	mov    eax,0x5
c0016061:	eb 05                	jmp    c0016068 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016063:	b8 07 00 00 00       	mov    eax,0x7
c0016068:	5b                   	pop    ebx
c0016069:	5e                   	pop    esi
c001606a:	5f                   	pop    edi
c001606b:	c3                   	ret    

c001606c <LogicalDisk::write(unsigned long long, int, void*)>:
c001606c:	57                   	push   edi
c001606d:	56                   	push   esi
c001606e:	53                   	push   ebx
c001606f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016073:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016077:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001607b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001607f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016085:	77 41                	ja     c00160c8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016087:	99                   	cdq    
c0016088:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001608e:	01 c8                	add    eax,ecx
c0016090:	11 da                	adc    edx,ebx
c0016092:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016098:	19 d7                	sbb    edi,edx
c001609a:	72 33                	jb     c00160cf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001609c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160a2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160ac:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160b0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160c0:	5b                   	pop    ebx
c00160c1:	5e                   	pop    esi
c00160c2:	5f                   	pop    edi
c00160c3:	e9 76 09 00 00       	jmp    c0016a3e <VCache::write(unsigned long long, int, void*)>
c00160c8:	b8 05 00 00 00       	mov    eax,0x5
c00160cd:	eb 05                	jmp    c00160d4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00160cf:	b8 07 00 00 00       	mov    eax,0x7
c00160d4:	5b                   	pop    ebx
c00160d5:	5e                   	pop    esi
c00160d6:	5f                   	pop    edi
c00160d7:	c3                   	ret    

c00160d8 <Mouse::Mouse(char const*)>:
c00160d8:	83 ec 0c             	sub    esp,0xc
c00160db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160df:	83 ec 08             	sub    esp,0x8
c00160e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160e6:	50                   	push   eax
c00160e7:	e8 fc db ff ff       	call   c0013ce8 <Device::Device(char const*)>
c00160ec:	83 c4 10             	add    esp,0x10
c00160ef:	ba 20 af 02 c0       	mov    edx,0xc002af20
c00160f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160f8:	89 10                	mov    DWORD PTR [eax],edx
c00160fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160fe:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016108:	90                   	nop
c0016109:	83 c4 0c             	add    esp,0xc
c001610c:	c3                   	ret    
c001610d:	90                   	nop

c001610e <Mouse::~Mouse()>:
c001610e:	83 ec 0c             	sub    esp,0xc
c0016111:	ba 20 af 02 c0       	mov    edx,0xc002af20
c0016116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611a:	89 10                	mov    DWORD PTR [eax],edx
c001611c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016120:	83 ec 0c             	sub    esp,0xc
c0016123:	50                   	push   eax
c0016124:	e8 89 d8 ff ff       	call   c00139b2 <Device::~Device()>
c0016129:	83 c4 10             	add    esp,0x10
c001612c:	90                   	nop
c001612d:	83 c4 0c             	add    esp,0xc
c0016130:	c3                   	ret    
c0016131:	90                   	nop

c0016132 <Mouse::~Mouse()>:
c0016132:	83 ec 0c             	sub    esp,0xc
c0016135:	83 ec 0c             	sub    esp,0xc
c0016138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001613c:	e8 cd ff ff ff       	call   c001610e <Mouse::~Mouse()>
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	83 ec 08             	sub    esp,0x8
c0016147:	68 58 01 00 00       	push   0x158
c001614c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016150:	e8 7e c4 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0016155:	83 c4 10             	add    esp,0x10
c0016158:	83 c4 0c             	add    esp,0xc
c001615b:	c3                   	ret    

c001615c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001615c:	55                   	push   ebp
c001615d:	57                   	push   edi
c001615e:	56                   	push   esi
c001615f:	53                   	push   ebx
c0016160:	81 ec 28 01 00 00    	sub    esp,0x128
c0016166:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001616d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016174:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001617b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016182:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016186:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001618a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016191:	e8 4e dc ff ff       	call   c0013de4 <Device::getName()>
c0016196:	5a                   	pop    edx
c0016197:	59                   	pop    ecx
c0016198:	50                   	push   eax
c0016199:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001619d:	55                   	push   ebp
c001619e:	e8 69 a6 fe ff       	call   c000080c <strcpy>
c00161a3:	5b                   	pop    ebx
c00161a4:	58                   	pop    eax
c00161a5:	68 44 af 02 c0       	push   0xc002af44
c00161aa:	55                   	push   ebp
c00161ab:	e8 9c a7 fe ff       	call   c000094c <strcat>
c00161b0:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161b7:	e8 dd 93 ff ff       	call   c000f599 <malloc>
c00161bc:	83 c4 0c             	add    esp,0xc
c00161bf:	89 c3                	mov    ebx,eax
c00161c1:	57                   	push   edi
c00161c2:	56                   	push   esi
c00161c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161cb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00161d2:	55                   	push   ebp
c00161d3:	50                   	push   eax
c00161d4:	e8 f9 fb ff ff       	call   c0015dd2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00161d9:	83 c4 14             	add    esp,0x14
c00161dc:	53                   	push   ebx
c00161dd:	e8 a6 fc ff ff       	call   c0015e88 <LogicalDisk::assignDriveLetter()>
c00161e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161e5:	e8 54 fd ff ff       	call   c0015f3e <LogicalDisk::mount()>
c00161ea:	58                   	pop    eax
c00161eb:	5a                   	pop    edx
c00161ec:	53                   	push   ebx
c00161ed:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161f4:	e8 eb d8 ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c00161f9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00161ff:	5b                   	pop    ebx
c0016200:	5e                   	pop    esi
c0016201:	5f                   	pop    edi
c0016202:	5d                   	pop    ebp
c0016203:	c3                   	ret    

c0016204 <createPartitionsForDisk(PhysicalDisk*)>:
c0016204:	55                   	push   ebp
c0016205:	57                   	push   edi
c0016206:	56                   	push   esi
c0016207:	53                   	push   ebx
c0016208:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001620e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016215:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001621b:	3d 00 02 00 00       	cmp    eax,0x200
c0016220:	74 27                	je     c0016249 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016222:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016228:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001622e:	83 ec 10             	sub    esp,0x10
c0016231:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016235:	99                   	cdq    
c0016236:	c1 e6 0a             	shl    esi,0xa
c0016239:	52                   	push   edx
c001623a:	89 fd                	mov    ebp,edi
c001623c:	50                   	push   eax
c001623d:	55                   	push   ebp
c001623e:	56                   	push   esi
c001623f:	e8 a0 04 01 00       	call   c00266e4 <__udivdi3>
c0016244:	e9 b1 00 00 00       	jmp    c00162fa <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016249:	83 ec 0c             	sub    esp,0xc
c001624c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001624e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016252:	56                   	push   esi
c0016253:	6a 01                	push   0x1
c0016255:	6a 00                	push   0x0
c0016257:	6a 00                	push   0x0
c0016259:	53                   	push   ebx
c001625a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001625d:	83 c4 20             	add    esp,0x20
c0016260:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016268:	75 0a                	jne    c0016274 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001626a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016272:	74 2c                	je     c00162a0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016274:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001627a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016280:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016286:	83 ec 10             	sub    esp,0x10
c0016289:	0f a4 c2 0a          	shld   edx,eax,0xa
c001628d:	89 f7                	mov    edi,esi
c001628f:	c1 e0 0a             	shl    eax,0xa
c0016292:	c1 ff 1f             	sar    edi,0x1f
c0016295:	57                   	push   edi
c0016296:	56                   	push   esi
c0016297:	52                   	push   edx
c0016298:	50                   	push   eax
c0016299:	e8 46 04 01 00       	call   c00266e4 <__udivdi3>
c001629e:	eb 5a                	jmp    c00162fa <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162a0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162a7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162ae:	83 e1 7f             	and    ecx,0x7f
c00162b1:	83 e0 7f             	and    eax,0x7f
c00162b4:	01 c1                	add    ecx,eax
c00162b6:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162bd:	83 e0 7f             	and    eax,0x7f
c00162c0:	01 c1                	add    ecx,eax
c00162c2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00162c9:	83 e0 7f             	and    eax,0x7f
c00162cc:	00 c1                	add    cl,al
c00162ce:	74 41                	je     c0016311 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00162d0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162d6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162dc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162e2:	83 ec 10             	sub    esp,0x10
c00162e5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162e9:	89 f7                	mov    edi,esi
c00162eb:	c1 e0 0a             	shl    eax,0xa
c00162ee:	c1 ff 1f             	sar    edi,0x1f
c00162f1:	57                   	push   edi
c00162f2:	56                   	push   esi
c00162f3:	52                   	push   edx
c00162f4:	50                   	push   eax
c00162f5:	e8 ea 03 01 00       	call   c00266e4 <__udivdi3>
c00162fa:	83 c4 14             	add    esp,0x14
c00162fd:	52                   	push   edx
c00162fe:	50                   	push   eax
c00162ff:	6a 00                	push   0x0
c0016301:	6a 00                	push   0x0
c0016303:	53                   	push   ebx
c0016304:	e8 53 fe ff ff       	call   c001615c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016309:	83 c4 20             	add    esp,0x20
c001630c:	e9 79 01 00 00       	jmp    c001648a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016311:	89 f0                	mov    eax,esi
c0016313:	31 f6                	xor    esi,esi
c0016315:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001631c:	75 02                	jne    c0016320 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001631e:	89 f1                	mov    ecx,esi
c0016320:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016327:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001632e:	c1 e2 08             	shl    edx,0x8
c0016331:	c1 e7 10             	shl    edi,0x10
c0016334:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001633c:	09 fa                	or     edx,edi
c001633e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016346:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001634d:	83 c0 10             	add    eax,0x10
c0016350:	09 fa                	or     edx,edi
c0016352:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016359:	c1 e7 18             	shl    edi,0x18
c001635c:	09 fa                	or     edx,edi
c001635e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016365:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016369:	c1 e7 10             	shl    edi,0x10
c001636c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016373:	c1 e2 08             	shl    edx,0x8
c0016376:	09 fa                	or     edx,edi
c0016378:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001637f:	09 fa                	or     edx,edi
c0016381:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016388:	c1 e7 18             	shl    edi,0x18
c001638b:	09 fa                	or     edx,edi
c001638d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016391:	46                   	inc    esi
c0016392:	83 fe 04             	cmp    esi,0x4
c0016395:	0f 85 7a ff ff ff    	jne    c0016315 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001639b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001639f:	83 f0 01             	xor    eax,0x1
c00163a2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163a6:	75 57                	jne    c00163ff <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163ac:	83 f0 01             	xor    eax,0x1
c00163af:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163b3:	75 4a                	jne    c00163ff <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163b5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163b9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163c9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163cf:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163d5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163db:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163df:	89 f7                	mov    edi,esi
c00163e1:	c1 e0 0a             	shl    eax,0xa
c00163e4:	c1 ff 1f             	sar    edi,0x1f
c00163e7:	57                   	push   edi
c00163e8:	56                   	push   esi
c00163e9:	52                   	push   edx
c00163ea:	50                   	push   eax
c00163eb:	e8 f4 02 01 00       	call   c00266e4 <__udivdi3>
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00163f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163fb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00163ff:	84 c9                	test   cl,cl
c0016401:	74 53                	je     c0016456 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016403:	0f b6 c9             	movzx  ecx,cl
c0016406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001640e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016412:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001641a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001641e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016422:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001642a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001642e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016436:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001643a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001643e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016442:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016446:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001644a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001644e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016452:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016456:	31 ed                	xor    ebp,ebp
c0016458:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001645c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016460:	89 f8                	mov    eax,edi
c0016462:	09 f0                	or     eax,esi
c0016464:	74 1e                	je     c0016484 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016466:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001646a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001646e:	89 d1                	mov    ecx,edx
c0016470:	09 c1                	or     ecx,eax
c0016472:	74 10                	je     c0016484 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	57                   	push   edi
c0016478:	56                   	push   esi
c0016479:	52                   	push   edx
c001647a:	50                   	push   eax
c001647b:	53                   	push   ebx
c001647c:	e8 db fc ff ff       	call   c001615c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016481:	83 c4 20             	add    esp,0x20
c0016484:	45                   	inc    ebp
c0016485:	83 fd 04             	cmp    ebp,0x4
c0016488:	75 ce                	jne    c0016458 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001648a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016490:	5b                   	pop    ebx
c0016491:	5e                   	pop    esi
c0016492:	5f                   	pop    edi
c0016493:	5d                   	pop    ebp
c0016494:	c3                   	ret    
c0016495:	90                   	nop

c0016496 <Serial::Serial(char const*)>:
c0016496:	83 ec 0c             	sub    esp,0xc
c0016499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649d:	83 ec 08             	sub    esp,0x8
c00164a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a4:	50                   	push   eax
c00164a5:	e8 3e d8 ff ff       	call   c0013ce8 <Device::Device(char const*)>
c00164aa:	83 c4 10             	add    esp,0x10
c00164ad:	ba 58 af 02 c0       	mov    edx,0xc002af58
c00164b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b6:	89 10                	mov    DWORD PTR [eax],edx
c00164b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bc:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164c6:	90                   	nop
c00164c7:	83 c4 0c             	add    esp,0xc
c00164ca:	c3                   	ret    
c00164cb:	90                   	nop

c00164cc <Serial::~Serial()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	ba 58 af 02 c0       	mov    edx,0xc002af58
c00164d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d8:	89 10                	mov    DWORD PTR [eax],edx
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	83 ec 0c             	sub    esp,0xc
c00164e1:	50                   	push   eax
c00164e2:	e8 cb d4 ff ff       	call   c00139b2 <Device::~Device()>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	90                   	nop
c00164eb:	83 c4 0c             	add    esp,0xc
c00164ee:	c3                   	ret    
c00164ef:	90                   	nop

c00164f0 <Serial::~Serial()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	83 ec 0c             	sub    esp,0xc
c00164f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fa:	e8 cd ff ff ff       	call   c00164cc <Serial::~Serial()>
c00164ff:	83 c4 10             	add    esp,0x10
c0016502:	83 ec 08             	sub    esp,0x8
c0016505:	68 58 01 00 00       	push   0x158
c001650a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650e:	e8 c0 c0 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	83 c4 0c             	add    esp,0xc
c0016519:	c3                   	ret    

c001651a <Timer::Timer(char const*)>:
c001651a:	83 ec 0c             	sub    esp,0xc
c001651d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016521:	83 ec 08             	sub    esp,0x8
c0016524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016528:	50                   	push   eax
c0016529:	e8 ba d7 ff ff       	call   c0013ce8 <Device::Device(char const*)>
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	ba 9c af 02 c0       	mov    edx,0xc002af9c
c0016536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001653a:	89 10                	mov    DWORD PTR [eax],edx
c001653c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016540:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001654a:	90                   	nop
c001654b:	83 c4 0c             	add    esp,0xc
c001654e:	c3                   	ret    
c001654f:	90                   	nop

c0016550 <Timer::~Timer()>:
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	ba 9c af 02 c0       	mov    edx,0xc002af9c
c0016558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655c:	89 10                	mov    DWORD PTR [eax],edx
c001655e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016562:	83 ec 0c             	sub    esp,0xc
c0016565:	50                   	push   eax
c0016566:	e8 47 d4 ff ff       	call   c00139b2 <Device::~Device()>
c001656b:	83 c4 10             	add    esp,0x10
c001656e:	90                   	nop
c001656f:	83 c4 0c             	add    esp,0xc
c0016572:	c3                   	ret    
c0016573:	90                   	nop

c0016574 <Timer::~Timer()>:
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	83 ec 0c             	sub    esp,0xc
c001657a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001657e:	e8 cd ff ff ff       	call   c0016550 <Timer::~Timer()>
c0016583:	83 c4 10             	add    esp,0x10
c0016586:	83 ec 08             	sub    esp,0x8
c0016589:	68 5c 01 00 00       	push   0x15c
c001658e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016592:	e8 3c c0 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	83 c4 0c             	add    esp,0xc
c001659d:	c3                   	ret    

c001659e <Timer::read()>:
c001659e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165a8:	c3                   	ret    

c00165a9 <timerHandler(unsigned long long)>:
c00165a9:	55                   	push   ebp
c00165aa:	57                   	push   edi
c00165ab:	56                   	push   esi
c00165ac:	53                   	push   ebx
c00165ad:	83 ec 0c             	sub    esp,0xc
c00165b0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165b4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165b8:	01 35 50 df 02 c0    	add    DWORD PTR ds:0xc002df50,esi
c00165be:	11 3d 54 df 02 c0    	adc    DWORD PTR ds:0xc002df54,edi
c00165c4:	80 3d ed d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8ed,0x0
c00165cb:	0f 84 42 01 00 00    	je     c0016713 <timerHandler(unsigned long long)+0x16a>
c00165d1:	fa                   	cli    
c00165d2:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c00165d8:	83 ec 0c             	sub    esp,0xc
c00165db:	ff 05 04 0e 03 c0    	inc    DWORD PTR ds:0xc0030e04
c00165e1:	68 18 0e 03 c0       	push   0xc0030e18
c00165e6:	e8 53 21 01 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	84 c0                	test   al,al
c00165f0:	0f 85 a2 00 00 00    	jne    c0016698 <timerHandler(unsigned long long)+0xef>
c00165f6:	83 ec 0c             	sub    esp,0xc
c00165f9:	68 18 0e 03 c0       	push   0xc0030e18
c00165fe:	e8 57 21 01 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016603:	83 c4 10             	add    esp,0x10
c0016606:	89 c3                	mov    ebx,eax
c0016608:	83 ec 0c             	sub    esp,0xc
c001660b:	68 18 0e 03 c0       	push   0xc0030e18
c0016610:	e8 45 21 01 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016615:	c7 04 24 18 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e18
c001661c:	89 c5                	mov    ebp,eax
c001661e:	e8 3f 21 01 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016623:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016626:	83 c4 10             	add    esp,0x10
c0016629:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001662c:	39 15 50 df 02 c0    	cmp    DWORD PTR ds:0xc002df50,edx
c0016632:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0016637:	19 c8                	sbb    eax,ecx
c0016639:	72 21                	jb     c001665c <timerHandler(unsigned long long)+0xb3>
c001663b:	83 ec 0c             	sub    esp,0xc
c001663e:	55                   	push   ebp
c001663f:	e8 e0 77 00 00       	call   c001de24 <unblockTask(ThreadControlBlock*)>
c0016644:	83 c4 10             	add    esp,0x10
c0016647:	39 eb                	cmp    ebx,ebp
c0016649:	75 21                	jne    c001666c <timerHandler(unsigned long long)+0xc3>
c001664b:	83 ec 0c             	sub    esp,0xc
c001664e:	68 18 0e 03 c0       	push   0xc0030e18
c0016653:	e8 02 21 01 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016658:	89 c3                	mov    ebx,eax
c001665a:	eb 0d                	jmp    c0016669 <timerHandler(unsigned long long)+0xc0>
c001665c:	50                   	push   eax
c001665d:	50                   	push   eax
c001665e:	55                   	push   ebp
c001665f:	68 18 0e 03 c0       	push   0xc0030e18
c0016664:	e8 a7 21 01 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016669:	83 c4 10             	add    esp,0x10
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	68 18 0e 03 c0       	push   0xc0030e18
c0016674:	e8 c5 20 01 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016679:	83 c4 10             	add    esp,0x10
c001667c:	84 c0                	test   al,al
c001667e:	75 18                	jne    c0016698 <timerHandler(unsigned long long)+0xef>
c0016680:	83 ec 0c             	sub    esp,0xc
c0016683:	68 18 0e 03 c0       	push   0xc0030e18
c0016688:	e8 cd 20 01 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001668d:	83 c4 10             	add    esp,0x10
c0016690:	39 d8                	cmp    eax,ebx
c0016692:	0f 85 70 ff ff ff    	jne    c0016608 <timerHandler(unsigned long long)+0x5f>
c0016698:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001669d:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166a1:	74 3d                	je     c00166e0 <timerHandler(unsigned long long)+0x137>
c00166a3:	80 3d ec d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8ec,0x0
c00166aa:	74 34                	je     c00166e0 <timerHandler(unsigned long long)+0x137>
c00166ac:	fa                   	cli    
c00166ad:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c00166b3:	31 d2                	xor    edx,edx
c00166b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ba:	89 f9                	mov    ecx,edi
c00166bc:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166c7:	39 c6                	cmp    esi,eax
c00166c9:	19 d1                	sbb    ecx,edx
c00166cb:	72 05                	jb     c00166d2 <timerHandler(unsigned long long)+0x129>
c00166cd:	e8 cf 72 00 00       	call   c001d9a1 <schedule()>
c00166d2:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00166d7:	48                   	dec    eax
c00166d8:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c00166dd:	75 01                	jne    c00166e0 <timerHandler(unsigned long long)+0x137>
c00166df:	fb                   	sti    
c00166e0:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c00166e5:	48                   	dec    eax
c00166e6:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c00166eb:	75 18                	jne    c0016705 <timerHandler(unsigned long long)+0x15c>
c00166ed:	83 3d 00 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e00,0x0
c00166f4:	74 0f                	je     c0016705 <timerHandler(unsigned long long)+0x15c>
c00166f6:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c0016700:	e8 9c 72 00 00       	call   c001d9a1 <schedule()>
c0016705:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001670a:	48                   	dec    eax
c001670b:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0016710:	75 01                	jne    c0016713 <timerHandler(unsigned long long)+0x16a>
c0016712:	fb                   	sti    
c0016713:	83 c4 0c             	add    esp,0xc
c0016716:	5b                   	pop    ebx
c0016717:	5e                   	pop    esi
c0016718:	5f                   	pop    edi
c0016719:	5d                   	pop    ebp
c001671a:	c3                   	ret    

c001671b <setupTimer(int)>:
c001671b:	57                   	push   edi
c001671c:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0016721:	56                   	push   esi
c0016722:	53                   	push   ebx
c0016723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016727:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001672d:	83 ec 0c             	sub    esp,0xc
c0016730:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016736:	e8 a9 d6 ff ff       	call   c0013de4 <Device::getName()>
c001673b:	83 c4 10             	add    esp,0x10
c001673e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016741:	0f 85 8d 00 00 00    	jne    c00167d4 <setupTimer(int)+0xb9>
c0016747:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001674c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016753:	74 7f                	je     c00167d4 <setupTimer(int)+0xb9>
c0016755:	83 ec 0c             	sub    esp,0xc
c0016758:	68 5c 01 00 00       	push   0x15c
c001675d:	e8 37 8e ff ff       	call   c000f599 <malloc>
c0016762:	89 04 24             	mov    DWORD PTR [esp],eax
c0016765:	89 c3                	mov    ebx,eax
c0016767:	e8 54 fb 00 00       	call   c00262c0 <PIT::PIT()>
c001676c:	59                   	pop    ecx
c001676d:	5f                   	pop    edi
c001676e:	53                   	push   ebx
c001676f:	ff 35 e8 d8 02 c0    	push   DWORD PTR ds:0xc002d8e8
c0016775:	e8 6a d3 ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c001677a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001677c:	6a 00                	push   0x0
c001677e:	6a 00                	push   0x0
c0016780:	56                   	push   esi
c0016781:	53                   	push   ebx
c0016782:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016785:	83 c4 14             	add    esp,0x14
c0016788:	68 60 01 00 00       	push   0x160
c001678d:	e8 07 8e ff ff       	call   c000f599 <malloc>
c0016792:	89 04 24             	mov    DWORD PTR [esp],eax
c0016795:	89 c7                	mov    edi,eax
c0016797:	e8 d4 f9 00 00       	call   c0026170 <APICTimer::APICTimer()>
c001679c:	6a 00                	push   0x0
c001679e:	6a 00                	push   0x0
c00167a0:	56                   	push   esi
c00167a1:	57                   	push   edi
c00167a2:	e8 cb f8 00 00       	call   c0026072 <APICTimer::open(int, int, void*)>
c00167a7:	83 c4 20             	add    esp,0x20
c00167aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167ac:	6a 00                	push   0x0
c00167ae:	6a 00                	push   0x0
c00167b0:	6a 00                	push   0x0
c00167b2:	53                   	push   ebx
c00167b3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167b6:	58                   	pop    eax
c00167b7:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00167bc:	5a                   	pop    edx
c00167bd:	57                   	push   edi
c00167be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167c4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167ca:	e8 15 d3 ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	eb 33                	jmp    c0016807 <setupTimer(int)+0xec>
c00167d4:	83 ec 0c             	sub    esp,0xc
c00167d7:	68 5c 01 00 00       	push   0x15c
c00167dc:	e8 b8 8d ff ff       	call   c000f599 <malloc>
c00167e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00167e4:	89 c3                	mov    ebx,eax
c00167e6:	e8 d5 fa 00 00       	call   c00262c0 <PIT::PIT()>
c00167eb:	58                   	pop    eax
c00167ec:	5a                   	pop    edx
c00167ed:	53                   	push   ebx
c00167ee:	ff 35 e8 d8 02 c0    	push   DWORD PTR ds:0xc002d8e8
c00167f4:	e8 eb d2 ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c00167f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167fb:	6a 00                	push   0x0
c00167fd:	6a 00                	push   0x0
c00167ff:	56                   	push   esi
c0016800:	53                   	push   ebx
c0016801:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016804:	83 c4 20             	add    esp,0x20
c0016807:	89 d8                	mov    eax,ebx
c0016809:	5b                   	pop    ebx
c001680a:	5e                   	pop    esi
c001680b:	5f                   	pop    edi
c001680c:	c3                   	ret    
c001680d:	90                   	nop

c001680e <VCache::VCache(PhysicalDisk*)>:
c001680e:	53                   	push   ebx
c001680f:	83 ec 18             	sub    esp,0x18
c0016812:	ba cc af 02 c0       	mov    edx,0xc002afcc
c0016817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681b:	89 10                	mov    DWORD PTR [eax],edx
c001681d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016821:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001682c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016837:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001683e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016849:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016850:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001685b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016866:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001686a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016875:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001687c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016880:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016888:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001688c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016890:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016898:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001689f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168a7:	83 ec 0c             	sub    esp,0xc
c00168aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168ae:	e8 e6 8c ff ff       	call   c000f599 <malloc>
c00168b3:	83 c4 10             	add    esp,0x10
c00168b6:	89 c3                	mov    ebx,eax
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	53                   	push   ebx
c00168bc:	e8 a9 6e 00 00       	call   c001d76a <Mutex::Mutex()>
c00168c1:	83 c4 10             	add    esp,0x10
c00168c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c8:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168da:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00168e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168e5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00168eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00168f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168f6:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00168fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016902:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016906:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016909:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001690c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016910:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016914:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016918:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001691e:	05 00 01 00 00       	add    eax,0x100
c0016923:	c1 e0 04             	shl    eax,0x4
c0016926:	83 ec 0c             	sub    esp,0xc
c0016929:	50                   	push   eax
c001692a:	e8 6a 8c ff ff       	call   c000f599 <malloc>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	89 c2                	mov    edx,eax
c0016934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016938:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001693b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001693f:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001694e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016952:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016958:	c1 e0 07             	shl    eax,0x7
c001695b:	83 ec 0c             	sub    esp,0xc
c001695e:	50                   	push   eax
c001695f:	e8 35 8c ff ff       	call   c000f599 <malloc>
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	89 c2                	mov    edx,eax
c0016969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016970:	90                   	nop
c0016971:	83 c4 18             	add    esp,0x18
c0016974:	5b                   	pop    ebx
c0016975:	c3                   	ret    

c0016976 <VCache::invalidateReadBuffer()>:
c0016976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001697a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016980:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016984:	c3                   	ret    
c0016985:	90                   	nop

c0016986 <VCache::writeWriteBuffer()>:
c0016986:	53                   	push   ebx
c0016987:	83 ec 14             	sub    esp,0x14
c001698a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001698e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016991:	8b 10                	mov    edx,DWORD PTR [eax]
c0016993:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016996:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016999:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001699c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001699f:	50                   	push   eax
c00169a0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169a3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169aa:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169b1:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169b5:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00169bc:	83 c4 28             	add    esp,0x28
c00169bf:	5b                   	pop    ebx
c00169c0:	c3                   	ret    
c00169c1:	90                   	nop

c00169c2 <VCache::~VCache()>:
c00169c2:	83 ec 0c             	sub    esp,0xc
c00169c5:	ba cc af 02 c0       	mov    edx,0xc002afcc
c00169ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169ce:	89 10                	mov    DWORD PTR [eax],edx
c00169d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169d4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00169d7:	84 c0                	test   al,al
c00169d9:	74 0f                	je     c00169ea <VCache::~VCache()+0x28>
c00169db:	83 ec 0c             	sub    esp,0xc
c00169de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169e2:	e8 9f ff ff ff       	call   c0016986 <VCache::writeWriteBuffer()>
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169ee:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00169f1:	83 ec 0c             	sub    esp,0xc
c00169f4:	50                   	push   eax
c00169f5:	e8 af 8b ff ff       	call   c000f5a9 <free>
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a04:	83 ec 0c             	sub    esp,0xc
c0016a07:	50                   	push   eax
c0016a08:	e8 9c 8b ff ff       	call   c000f5a9 <free>
c0016a0d:	83 c4 10             	add    esp,0x10
c0016a10:	90                   	nop
c0016a11:	83 c4 0c             	add    esp,0xc
c0016a14:	c3                   	ret    
c0016a15:	90                   	nop

c0016a16 <VCache::~VCache()>:
c0016a16:	83 ec 0c             	sub    esp,0xc
c0016a19:	83 ec 0c             	sub    esp,0xc
c0016a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a20:	e8 9d ff ff ff       	call   c00169c2 <VCache::~VCache()>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	83 ec 08             	sub    esp,0x8
c0016a2b:	6a 44                	push   0x44
c0016a2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a31:	e8 9d bb ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0016a36:	83 c4 10             	add    esp,0x10
c0016a39:	83 c4 0c             	add    esp,0xc
c0016a3c:	c3                   	ret    
c0016a3d:	90                   	nop

c0016a3e <VCache::write(unsigned long long, int, void*)>:
c0016a3e:	55                   	push   ebp
c0016a3f:	57                   	push   edi
c0016a40:	56                   	push   esi
c0016a41:	53                   	push   ebx
c0016a42:	83 ec 18             	sub    esp,0x18
c0016a45:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a4d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a54:	e8 57 72 00 00       	call   c001dcb0 <Semaphore::acquire()>
c0016a59:	83 c4 10             	add    esp,0x10
c0016a5c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a60:	74 0c                	je     c0016a6e <VCache::write(unsigned long long, int, void*)+0x30>
c0016a62:	83 ec 0c             	sub    esp,0xc
c0016a65:	53                   	push   ebx
c0016a66:	e8 0b ff ff ff       	call   c0016976 <VCache::invalidateReadBuffer()>
c0016a6b:	83 c4 10             	add    esp,0x10
c0016a6e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a72:	74 5c                	je     c0016ad0 <VCache::write(unsigned long long, int, void*)+0x92>
c0016a74:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016a77:	89 e8                	mov    eax,ebp
c0016a79:	99                   	cdq    
c0016a7a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016a7d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016a80:	89 c1                	mov    ecx,eax
c0016a82:	89 d0                	mov    eax,edx
c0016a84:	31 f1                	xor    ecx,esi
c0016a86:	31 f8                	xor    eax,edi
c0016a88:	09 c1                	or     ecx,eax
c0016a8a:	75 38                	jne    c0016ac4 <VCache::write(unsigned long long, int, void*)+0x86>
c0016a8c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016a91:	75 31                	jne    c0016ac4 <VCache::write(unsigned long long, int, void*)+0x86>
c0016a93:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a96:	89 ef                	mov    edi,ebp
c0016a98:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a9e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016aa2:	0f af f9             	imul   edi,ecx
c0016aa5:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016aa8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016aaa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016aad:	40                   	inc    eax
c0016aae:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016ab1:	83 c0 80             	add    eax,0xffffff80
c0016ab4:	75 5c                	jne    c0016b12 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ab6:	83 ec 0c             	sub    esp,0xc
c0016ab9:	53                   	push   ebx
c0016aba:	e8 c7 fe ff ff       	call   c0016986 <VCache::writeWriteBuffer()>
c0016abf:	83 c4 10             	add    esp,0x10
c0016ac2:	eb 4e                	jmp    c0016b12 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	53                   	push   ebx
c0016ac8:	e8 b9 fe ff ff       	call   c0016986 <VCache::writeWriteBuffer()>
c0016acd:	83 c4 10             	add    esp,0x10
c0016ad0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ad3:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016ad8:	7f 22                	jg     c0016afc <VCache::write(unsigned long long, int, void*)+0xbe>
c0016ada:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016add:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016ae0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016ae4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016ae8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016aeb:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016aee:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016af4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016af8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016afa:	eb 16                	jmp    c0016b12 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016afc:	83 ec 0c             	sub    esp,0xc
c0016aff:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b09:	57                   	push   edi
c0016b0a:	56                   	push   esi
c0016b0b:	50                   	push   eax
c0016b0c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b0f:	83 c4 20             	add    esp,0x20
c0016b12:	83 ec 0c             	sub    esp,0xc
c0016b15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b18:	e8 ef 77 00 00       	call   c001e30c <Semaphore::release()>
c0016b1d:	83 c4 1c             	add    esp,0x1c
c0016b20:	31 c0                	xor    eax,eax
c0016b22:	5b                   	pop    ebx
c0016b23:	5e                   	pop    esi
c0016b24:	5f                   	pop    edi
c0016b25:	5d                   	pop    ebp
c0016b26:	c3                   	ret    
c0016b27:	90                   	nop

c0016b28 <VCache::read(unsigned long long, int, void*)>:
c0016b28:	55                   	push   ebp
c0016b29:	57                   	push   edi
c0016b2a:	56                   	push   esi
c0016b2b:	53                   	push   ebx
c0016b2c:	83 ec 28             	sub    esp,0x28
c0016b2f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b33:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b37:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b3b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b42:	e8 69 71 00 00       	call   c001dcb0 <Semaphore::acquire()>
c0016b47:	83 c4 10             	add    esp,0x10
c0016b4a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b4e:	74 0c                	je     c0016b5c <VCache::read(unsigned long long, int, void*)+0x34>
c0016b50:	83 ec 0c             	sub    esp,0xc
c0016b53:	53                   	push   ebx
c0016b54:	e8 2d fe ff ff       	call   c0016986 <VCache::writeWriteBuffer()>
c0016b59:	83 c4 10             	add    esp,0x10
c0016b5c:	83 fd 01             	cmp    ebp,0x1
c0016b5f:	0f 85 80 00 00 00    	jne    c0016be5 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b65:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b6c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016b73:	75 70                	jne    c0016be5 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b75:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016b78:	89 e9                	mov    ecx,ebp
c0016b7a:	f7 d9                	neg    ecx
c0016b7c:	89 c8                	mov    eax,ecx
c0016b7e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016b82:	c1 f8 1f             	sar    eax,0x1f
c0016b85:	21 f1                	and    ecx,esi
c0016b87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b8b:	89 c8                	mov    eax,ecx
c0016b8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b91:	21 f9                	and    ecx,edi
c0016b93:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b97:	89 ca                	mov    edx,ecx
c0016b99:	74 0a                	je     c0016ba5 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016b9b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016b9e:	75 05                	jne    c0016ba5 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ba0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016ba3:	74 23                	je     c0016bc8 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016ba5:	83 ec 0c             	sub    esp,0xc
c0016ba8:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016bac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bb0:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016bb3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016bb6:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016bb8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016bbb:	55                   	push   ebp
c0016bbc:	52                   	push   edx
c0016bbd:	50                   	push   eax
c0016bbe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bc2:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016bc5:	83 c4 20             	add    esp,0x20
c0016bc8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bcb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016bcf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bd5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bd8:	48                   	dec    eax
c0016bd9:	21 c6                	and    esi,eax
c0016bdb:	0f af f1             	imul   esi,ecx
c0016bde:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016be1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016be3:	eb 1d                	jmp    c0016c02 <VCache::read(unsigned long long, int, void*)+0xda>
c0016be5:	83 ec 0c             	sub    esp,0xc
c0016be8:	53                   	push   ebx
c0016be9:	e8 88 fd ff ff       	call   c0016976 <VCache::invalidateReadBuffer()>
c0016bee:	5a                   	pop    edx
c0016bef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bf2:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016bf8:	55                   	push   ebp
c0016bf9:	57                   	push   edi
c0016bfa:	56                   	push   esi
c0016bfb:	50                   	push   eax
c0016bfc:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016bff:	83 c4 20             	add    esp,0x20
c0016c02:	83 ec 0c             	sub    esp,0xc
c0016c05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c08:	e8 ff 76 00 00       	call   c001e30c <Semaphore::release()>
c0016c0d:	83 c4 2c             	add    esp,0x2c
c0016c10:	31 c0                	xor    eax,eax
c0016c12:	5b                   	pop    ebx
c0016c13:	5e                   	pop    esi
c0016c14:	5f                   	pop    edi
c0016c15:	5d                   	pop    ebp
c0016c16:	c3                   	ret    
c0016c17:	90                   	nop

c0016c18 <Video::putrect(int, int, int, int, unsigned int)>:
c0016c18:	55                   	push   ebp
c0016c19:	57                   	push   edi
c0016c1a:	56                   	push   esi
c0016c1b:	53                   	push   ebx
c0016c1c:	83 ec 1c             	sub    esp,0x1c
c0016c1f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c27:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c2b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c37:	01 df                	add    edi,ebx
c0016c39:	39 fb                	cmp    ebx,edi
c0016c3b:	7d 1f                	jge    c0016c5c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c3d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c41:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c45:	7d 12                	jge    c0016c59 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c47:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c4d:	53                   	push   ebx
c0016c4e:	55                   	push   ebp
c0016c4f:	45                   	inc    ebp
c0016c50:	56                   	push   esi
c0016c51:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c54:	83 c4 10             	add    esp,0x10
c0016c57:	eb e8                	jmp    c0016c41 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c59:	43                   	inc    ebx
c0016c5a:	eb dd                	jmp    c0016c39 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c5c:	83 c4 1c             	add    esp,0x1c
c0016c5f:	5b                   	pop    ebx
c0016c60:	5e                   	pop    esi
c0016c61:	5f                   	pop    edi
c0016c62:	5d                   	pop    ebp
c0016c63:	c3                   	ret    

c0016c64 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c64:	55                   	push   ebp
c0016c65:	57                   	push   edi
c0016c66:	31 ff                	xor    edi,edi
c0016c68:	56                   	push   esi
c0016c69:	53                   	push   ebx
c0016c6a:	83 ec 1c             	sub    esp,0x1c
c0016c6d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c71:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c75:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016c7c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016c81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c85:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016c89:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c8d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016c90:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c94:	01 f9                	add    ecx,edi
c0016c96:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016c9a:	7d 2f                	jge    c0016ccb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016c9c:	31 f6                	xor    esi,esi
c0016c9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ca2:	01 f2                	add    edx,esi
c0016ca4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ca8:	7d 1a                	jge    c0016cc4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016caa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016cad:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016cb0:	46                   	inc    esi
c0016cb1:	51                   	push   ecx
c0016cb2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016cb6:	52                   	push   edx
c0016cb7:	55                   	push   ebp
c0016cb8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cbb:	83 c4 10             	add    esp,0x10
c0016cbe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cc2:	eb da                	jmp    c0016c9e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016cc4:	47                   	inc    edi
c0016cc5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016cc9:	eb c5                	jmp    c0016c90 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016ccb:	83 c4 1c             	add    esp,0x1c
c0016cce:	5b                   	pop    ebx
c0016ccf:	5e                   	pop    esi
c0016cd0:	5f                   	pop    edi
c0016cd1:	5d                   	pop    ebp
c0016cd2:	c3                   	ret    
c0016cd3:	90                   	nop

c0016cd4 <Video::blit(unsigned int*, int, int, int, int)>:
c0016cd4:	55                   	push   ebp
c0016cd5:	57                   	push   edi
c0016cd6:	56                   	push   esi
c0016cd7:	53                   	push   ebx
c0016cd8:	83 ec 1c             	sub    esp,0x1c
c0016cdb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016cdf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ce3:	85 c0                	test   eax,eax
c0016ce5:	79 02                	jns    c0016ce9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016ce7:	31 c0                	xor    eax,eax
c0016ce9:	c1 e0 02             	shl    eax,0x2
c0016cec:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cf4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016cf8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016cfc:	39 d8                	cmp    eax,ebx
c0016cfe:	7e 49                	jle    c0016d49 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d00:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d06:	7c 41                	jl     c0016d49 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d08:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d0c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d10:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d14:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d18:	39 f9                	cmp    ecx,edi
c0016d1a:	7e 22                	jle    c0016d3e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d1c:	83 c5 04             	add    ebp,0x4
c0016d1f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d25:	7c 14                	jl     c0016d3b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d27:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d29:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d30:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d34:	56                   	push   esi
c0016d35:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d38:	83 c4 10             	add    esp,0x10
c0016d3b:	47                   	inc    edi
c0016d3c:	eb d2                	jmp    c0016d10 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d42:	43                   	inc    ebx
c0016d43:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d47:	eb ab                	jmp    c0016cf4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d49:	83 c4 1c             	add    esp,0x1c
c0016d4c:	5b                   	pop    ebx
c0016d4d:	5e                   	pop    esi
c0016d4e:	5f                   	pop    edi
c0016d4f:	5d                   	pop    ebp
c0016d50:	c3                   	ret    
c0016d51:	90                   	nop

c0016d52 <Video::clearScreen(unsigned int)>:
c0016d52:	57                   	push   edi
c0016d53:	56                   	push   esi
c0016d54:	53                   	push   ebx
c0016d55:	31 db                	xor    ebx,ebx
c0016d57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d5b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d61:	7e 1f                	jle    c0016d82 <Video::clearScreen(unsigned int)+0x30>
c0016d63:	31 ff                	xor    edi,edi
c0016d65:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d6b:	7e 12                	jle    c0016d7f <Video::clearScreen(unsigned int)+0x2d>
c0016d6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d73:	53                   	push   ebx
c0016d74:	57                   	push   edi
c0016d75:	47                   	inc    edi
c0016d76:	56                   	push   esi
c0016d77:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d7a:	83 c4 10             	add    esp,0x10
c0016d7d:	eb e6                	jmp    c0016d65 <Video::clearScreen(unsigned int)+0x13>
c0016d7f:	43                   	inc    ebx
c0016d80:	eb d9                	jmp    c0016d5b <Video::clearScreen(unsigned int)+0x9>
c0016d82:	5b                   	pop    ebx
c0016d83:	5e                   	pop    esi
c0016d84:	5f                   	pop    edi
c0016d85:	c3                   	ret    

c0016d86 <Video::putpixel(int, int, unsigned int)>:
c0016d86:	c7 44 24 04 d4 af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002afd4
c0016d8e:	e9 84 30 00 00       	jmp    c0019e17 <Krnl::panic(char const*)>
c0016d93:	90                   	nop

c0016d94 <Video::Video(char const*)>:
c0016d94:	83 ec 0c             	sub    esp,0xc
c0016d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d9b:	83 ec 08             	sub    esp,0x8
c0016d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da2:	50                   	push   eax
c0016da3:	e8 40 cf ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0016da8:	83 c4 10             	add    esp,0x10
c0016dab:	ba 44 b0 02 c0       	mov    edx,0xc002b044
c0016db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db4:	89 10                	mov    DWORD PTR [eax],edx
c0016db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dba:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016dc4:	90                   	nop
c0016dc5:	83 c4 0c             	add    esp,0xc
c0016dc8:	c3                   	ret    
c0016dc9:	90                   	nop

c0016dca <Video::~Video()>:
c0016dca:	83 ec 0c             	sub    esp,0xc
c0016dcd:	ba 44 b0 02 c0       	mov    edx,0xc002b044
c0016dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd6:	89 10                	mov    DWORD PTR [eax],edx
c0016dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	50                   	push   eax
c0016de0:	e8 cd cb ff ff       	call   c00139b2 <Device::~Device()>
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	90                   	nop
c0016de9:	83 c4 0c             	add    esp,0xc
c0016dec:	c3                   	ret    
c0016ded:	90                   	nop

c0016dee <Video::~Video()>:
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	83 ec 0c             	sub    esp,0xc
c0016df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016df8:	e8 cd ff ff ff       	call   c0016dca <Video::~Video()>
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	83 ec 08             	sub    esp,0x8
c0016e03:	68 64 01 00 00       	push   0x164
c0016e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e0c:	e8 c2 b7 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0016e11:	83 c4 10             	add    esp,0x10
c0016e14:	83 c4 0c             	add    esp,0xc
c0016e17:	c3                   	ret    

c0016e18 <Video::isMonochrome()>:
c0016e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e1c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e22:	c3                   	ret    
c0016e23:	90                   	nop

c0016e24 <Video::getWidth()>:
c0016e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e2e:	c3                   	ret    
c0016e2f:	90                   	nop

c0016e30 <Video::getHeight()>:
c0016e30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e3a:	c3                   	ret    
c0016e3b:	90                   	nop

c0016e3c <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e3c:	55                   	push   ebp
c0016e3d:	57                   	push   edi
c0016e3e:	56                   	push   esi
c0016e3f:	53                   	push   ebx
c0016e40:	83 ec 2c             	sub    esp,0x2c
c0016e43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e47:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e4b:	83 f8 01             	cmp    eax,0x1
c0016e4e:	19 c9                	sbb    ecx,ecx
c0016e50:	31 db                	xor    ebx,ebx
c0016e52:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e56:	89 cd                	mov    ebp,ecx
c0016e58:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e60:	f7 d5                	not    ebp
c0016e62:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016e68:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e6c:	01 d8                	add    eax,ebx
c0016e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e72:	56                   	push   esi
c0016e73:	e8 b8 ff ff ff       	call   c0016e30 <Video::getHeight()>
c0016e78:	59                   	pop    ecx
c0016e79:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e7d:	7e 70                	jle    c0016eef <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016e7f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e83:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016e87:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016e8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e8e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e92:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016e99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e9d:	89 f8                	mov    eax,edi
c0016e9f:	83 c0 20             	add    eax,0x20
c0016ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ea6:	56                   	push   esi
c0016ea7:	e8 78 ff ff ff       	call   c0016e24 <Video::getWidth()>
c0016eac:	5a                   	pop    edx
c0016ead:	39 c7                	cmp    edi,eax
c0016eaf:	7d 34                	jge    c0016ee5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016eb1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016eb6:	74 05                	je     c0016ebd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016eb8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016eba:	55                   	push   ebp
c0016ebb:	eb 0d                	jmp    c0016eca <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ebd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ec2:	74 12                	je     c0016ed6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ec4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ec6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ece:	57                   	push   edi
c0016ecf:	56                   	push   esi
c0016ed0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016eda:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016ede:	47                   	inc    edi
c0016edf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016ee3:	75 c1                	jne    c0016ea6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016ee5:	43                   	inc    ebx
c0016ee6:	83 fb 20             	cmp    ebx,0x20
c0016ee9:	0f 85 79 ff ff ff    	jne    c0016e68 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016eef:	83 c4 2c             	add    esp,0x2c
c0016ef2:	5b                   	pop    ebx
c0016ef3:	5e                   	pop    esi
c0016ef4:	5f                   	pop    edi
c0016ef5:	5d                   	pop    ebp
c0016ef6:	c3                   	ret    
c0016ef7:	90                   	nop

c0016ef8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016ef8:	55                   	push   ebp
c0016ef9:	57                   	push   edi
c0016efa:	56                   	push   esi
c0016efb:	53                   	push   ebx
c0016efc:	83 ec 28             	sub    esp,0x28
c0016eff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f03:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f07:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f0b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f0f:	c1 e6 08             	shl    esi,0x8
c0016f12:	01 c6                	add    esi,eax
c0016f14:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f18:	c1 e0 08             	shl    eax,0x8
c0016f1b:	01 d0                	add    eax,edx
c0016f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f25:	0f af c6             	imul   eax,esi
c0016f28:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f2f:	50                   	push   eax
c0016f30:	e8 64 86 ff ff       	call   c000f599 <malloc>
c0016f35:	83 c4 10             	add    esp,0x10
c0016f38:	89 c7                	mov    edi,eax
c0016f3a:	85 c0                	test   eax,eax
c0016f3c:	75 10                	jne    c0016f4e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f3e:	83 ec 0c             	sub    esp,0xc
c0016f41:	68 f5 af 02 c0       	push   0xc002aff5
c0016f46:	e8 cc 2e 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f51:	ba 12 00 00 00       	mov    edx,0x12
c0016f56:	84 c0                	test   al,al
c0016f58:	74 11                	je     c0016f6b <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f5a:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f5e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f62:	c1 fa 03             	sar    edx,0x3
c0016f65:	0f af d1             	imul   edx,ecx
c0016f68:	83 c2 12             	add    edx,0x12
c0016f6b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016f6f:	74 04                	je     c0016f75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016f71:	85 f6                	test   esi,esi
c0016f73:	75 12                	jne    c0016f87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016f75:	83 ec 0c             	sub    esp,0xc
c0016f78:	68 05 b0 02 c0       	push   0xc002b005
c0016f7d:	e8 29 b7 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0016f82:	e9 b8 00 00 00       	jmp    c001703f <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016f87:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016f8b:	80 f9 02             	cmp    cl,0x2
c0016f8e:	0f 85 96 00 00 00    	jne    c001702a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016f94:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016f99:	75 0e                	jne    c0016fa9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016f9b:	84 c0                	test   al,al
c0016f9d:	75 0a                	jne    c0016fa9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016f9f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016fa2:	83 e8 18             	sub    eax,0x18
c0016fa5:	a8 f7                	test   al,0xf7
c0016fa7:	74 0a                	je     c0016fb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016fa9:	83 ec 0c             	sub    esp,0xc
c0016fac:	68 1a b0 02 c0       	push   0xc002b01a
c0016fb1:	eb 7f                	jmp    c0017032 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016fb3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016fbb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fc3:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016fc7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016fcf:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016fd3:	75 0c                	jne    c0016fe1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016fd5:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016fda:	c1 e0 18             	shl    eax,0x18
c0016fdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fe1:	45                   	inc    ebp
c0016fe2:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016fe7:	c1 e1 10             	shl    ecx,0x10
c0016fea:	89 c8                	mov    eax,ecx
c0016fec:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016ff1:	c1 e1 08             	shl    ecx,0x8
c0016ff4:	09 c1                	or     ecx,eax
c0016ff6:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016ffa:	09 c1                	or     ecx,eax
c0016ffc:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017000:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017004:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017008:	c1 f8 03             	sar    eax,0x3
c001700b:	01 c2                	add    edx,eax
c001700d:	89 e8                	mov    eax,ebp
c001700f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017013:	39 c6                	cmp    esi,eax
c0017015:	7f b0                	jg     c0016fc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017017:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001701b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001701f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017022:	7e 22                	jle    c0017046 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017024:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017028:	eb 99                	jmp    c0016fc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001702a:	50                   	push   eax
c001702b:	50                   	push   eax
c001702c:	51                   	push   ecx
c001702d:	68 28 b0 02 c0       	push   0xc002b028
c0017032:	e8 74 b6 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0017037:	89 3c 24             	mov    DWORD PTR [esp],edi
c001703a:	e8 6a 85 ff ff       	call   c000f5a9 <free>
c001703f:	83 c4 10             	add    esp,0x10
c0017042:	31 ff                	xor    edi,edi
c0017044:	eb 0f                	jmp    c0017055 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017046:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001704a:	89 30                	mov    DWORD PTR [eax],esi
c001704c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017050:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017053:	89 30                	mov    DWORD PTR [eax],esi
c0017055:	83 c4 1c             	add    esp,0x1c
c0017058:	89 f8                	mov    eax,edi
c001705a:	5b                   	pop    ebx
c001705b:	5e                   	pop    esi
c001705c:	5f                   	pop    edi
c001705d:	5d                   	pop    ebp
c001705e:	c3                   	ret    
c001705f:	90                   	nop

c0017060 <Video::putTGA(int, int, unsigned char*, int)>:
c0017060:	55                   	push   ebp
c0017061:	57                   	push   edi
c0017062:	56                   	push   esi
c0017063:	53                   	push   ebx
c0017064:	83 ec 28             	sub    esp,0x28
c0017067:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001706b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001706f:	50                   	push   eax
c0017070:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017074:	50                   	push   eax
c0017075:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017079:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001707d:	56                   	push   esi
c001707e:	e8 75 fe ff ff       	call   c0016ef8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017083:	83 c4 20             	add    esp,0x20
c0017086:	85 c0                	test   eax,eax
c0017088:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001708c:	74 35                	je     c00170c3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001708e:	89 c7                	mov    edi,eax
c0017090:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017094:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017098:	39 d8                	cmp    eax,ebx
c001709a:	7e 27                	jle    c00170c3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001709c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170a4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00170a8:	39 e8                	cmp    eax,ebp
c00170aa:	7e 14                	jle    c00170c0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00170ae:	83 c7 04             	add    edi,0x4
c00170b1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170b4:	53                   	push   ebx
c00170b5:	55                   	push   ebp
c00170b6:	45                   	inc    ebp
c00170b7:	56                   	push   esi
c00170b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170bb:	83 c4 10             	add    esp,0x10
c00170be:	eb e0                	jmp    c00170a0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00170c0:	43                   	inc    ebx
c00170c1:	eb cd                	jmp    c0017090 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00170c3:	83 c4 1c             	add    esp,0x1c
c00170c6:	5b                   	pop    ebx
c00170c7:	5e                   	pop    esi
c00170c8:	5f                   	pop    edi
c00170c9:	5d                   	pop    ebp
c00170ca:	c3                   	ret    
c00170cb:	90                   	nop

c00170cc <ACPI::close(int, int, void*)>:
c00170cc:	83 ec 1c             	sub    esp,0x1c
c00170cf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00170d7:	74 0a                	je     c00170e3 <ACPI::close(int, int, void*)+0x17>
c00170d9:	b8 00 00 00 00       	mov    eax,0x0
c00170de:	e9 8a 00 00 00       	jmp    c001716d <ACPI::close(int, int, void*)+0xa1>
c00170e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00170e8:	75 27                	jne    c0017111 <ACPI::close(int, int, void*)+0x45>
c00170ea:	a1 88 ff 02 c0       	mov    eax,ds:0xc002ff88
c00170ef:	85 c0                	test   eax,eax
c00170f1:	74 07                	je     c00170fa <ACPI::close(int, int, void*)+0x2e>
c00170f3:	a1 88 ff 02 c0       	mov    eax,ds:0xc002ff88
c00170f8:	ff d0                	call   eax
c00170fa:	83 ec 0c             	sub    esp,0xc
c00170fd:	68 84 b0 02 c0       	push   0xc002b084
c0017102:	e8 10 2d 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0017107:	83 c4 10             	add    esp,0x10
c001710a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001710f:	eb 5c                	jmp    c001716d <ACPI::close(int, int, void*)+0xa1>
c0017111:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017116:	75 50                	jne    c0017168 <ACPI::close(int, int, void*)+0x9c>
c0017118:	a1 84 ff 02 c0       	mov    eax,ds:0xc002ff84
c001711d:	85 c0                	test   eax,eax
c001711f:	74 07                	je     c0017128 <ACPI::close(int, int, void*)+0x5c>
c0017121:	a1 84 ff 02 c0       	mov    eax,ds:0xc002ff84
c0017126:	ff d0                	call   eax
c0017128:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001712d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017132:	83 e0 02             	and    eax,0x2
c0017135:	74 1c                	je     c0017153 <ACPI::close(int, int, void*)+0x87>
c0017137:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001713e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017142:	89 c2                	mov    edx,eax
c0017144:	ec                   	in     al,dx
c0017145:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017149:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001714d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017151:	eb da                	jmp    c001712d <ACPI::close(int, int, void*)+0x61>
c0017153:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001715a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001715f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017163:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017167:	ee                   	out    dx,al
c0017168:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001716d:	83 c4 1c             	add    esp,0x1c
c0017170:	c3                   	ret    

c0017171 <findRSDP()>:
c0017171:	83 ec 1c             	sub    esp,0x1c
c0017174:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0017179:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001717f:	83 e0 04             	and    eax,0x4
c0017182:	84 c0                	test   al,al
c0017184:	75 07                	jne    c001718d <findRSDP()+0x1c>
c0017186:	b8 00 00 00 00       	mov    eax,0x0
c001718b:	eb 6a                	jmp    c00171f7 <findRSDP()+0x86>
c001718d:	a1 34 d9 02 c0       	mov    eax,ds:0xc002d934
c0017192:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017197:	7f 1b                	jg     c00171b4 <findRSDP()+0x43>
c0017199:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001719e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171a4:	83 e2 fb             	and    edx,0xfffffffb
c00171a7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171ad:	b8 00 00 00 00       	mov    eax,0x0
c00171b2:	eb 43                	jmp    c00171f7 <findRSDP()+0x86>
c00171b4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00171bc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00171c4:	77 2c                	ja     c00171f2 <findRSDP()+0x81>
c00171c6:	83 ec 04             	sub    esp,0x4
c00171c9:	6a 08                	push   0x8
c00171cb:	68 1f b1 02 c0       	push   0xc002b11f
c00171d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171d4:	e8 73 94 fe ff       	call   c000064c <memcmp>
c00171d9:	83 c4 10             	add    esp,0x10
c00171dc:	85 c0                	test   eax,eax
c00171de:	0f 94 c0             	sete   al
c00171e1:	84 c0                	test   al,al
c00171e3:	74 06                	je     c00171eb <findRSDP()+0x7a>
c00171e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171e9:	eb 0c                	jmp    c00171f7 <findRSDP()+0x86>
c00171eb:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00171f0:	eb ca                	jmp    c00171bc <findRSDP()+0x4b>
c00171f2:	b8 00 00 00 00       	mov    eax,0x0
c00171f7:	83 c4 1c             	add    esp,0x1c
c00171fa:	c3                   	ret    

c00171fb <loadACPITables(unsigned char*)>:
c00171fb:	57                   	push   edi
c00171fc:	56                   	push   esi
c00171fd:	53                   	push   ebx
c00171fe:	83 ec 60             	sub    esp,0x60
c0017201:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0017206:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001720c:	83 e0 04             	and    eax,0x4
c001720f:	84 c0                	test   al,al
c0017211:	0f 84 33 02 00 00    	je     c001744a <loadACPITables(unsigned char*)+0x24f>
c0017217:	a0 a0 01 03 c0       	mov    al,ds:0xc00301a0
c001721c:	84 c0                	test   al,al
c001721e:	74 75                	je     c0017295 <loadACPITables(unsigned char*)+0x9a>
c0017220:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017224:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017228:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001722c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001722f:	83 e8 24             	sub    eax,0x24
c0017232:	c1 e8 03             	shr    eax,0x3
c0017235:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017239:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017241:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017245:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017249:	0f 8d b2 00 00 00    	jge    c0017301 <loadACPITables(unsigned char*)+0x106>
c001724f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017253:	83 c0 24             	add    eax,0x24
c0017256:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001725a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001725e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017262:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017266:	c1 e0 03             	shl    eax,0x3
c0017269:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001726d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017271:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017274:	8b 00                	mov    eax,DWORD PTR [eax]
c0017276:	89 c1                	mov    ecx,eax
c0017278:	a1 8c ff 02 c0       	mov    eax,ds:0xc002ff8c
c001727d:	8d 50 01             	lea    edx,[eax+0x1]
c0017280:	89 15 8c ff 02 c0    	mov    DWORD PTR ds:0xc002ff8c,edx
c0017286:	89 ca                	mov    edx,ecx
c0017288:	89 14 c5 a4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd005c],edx
c001728f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017293:	eb ac                	jmp    c0017241 <loadACPITables(unsigned char*)+0x46>
c0017295:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017299:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001729d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172a4:	83 e8 24             	sub    eax,0x24
c00172a7:	c1 e8 02             	shr    eax,0x2
c00172aa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172ae:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00172b6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172ba:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00172be:	7d 41                	jge    c0017301 <loadACPITables(unsigned char*)+0x106>
c00172c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172c4:	83 c0 24             	add    eax,0x24
c00172c7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172cf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172d3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172d7:	c1 e0 02             	shl    eax,0x2
c00172da:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00172de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172e4:	a1 8c ff 02 c0       	mov    eax,ds:0xc002ff8c
c00172e9:	8d 50 01             	lea    edx,[eax+0x1]
c00172ec:	89 15 8c ff 02 c0    	mov    DWORD PTR ds:0xc002ff8c,edx
c00172f2:	89 ca                	mov    edx,ecx
c00172f4:	89 14 c5 a4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd005c],edx
c00172fb:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00172ff:	eb b5                	jmp    c00172b6 <loadACPITables(unsigned char*)+0xbb>
c0017301:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017309:	a1 8c ff 02 c0       	mov    eax,ds:0xc002ff8c
c001730e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017312:	0f 8d 33 01 00 00    	jge    c001744b <loadACPITables(unsigned char*)+0x250>
c0017318:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001731c:	8b 04 c5 a4 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd005c]
c0017323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001732b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001732f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017333:	25 ff 0f 00 00       	and    eax,0xfff
c0017338:	89 c6                	mov    esi,eax
c001733a:	8b 1d 50 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da50
c0017340:	83 ec 0c             	sub    esp,0xc
c0017343:	6a 01                	push   0x1
c0017345:	e8 b5 9e ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c001734a:	83 c4 10             	add    esp,0x10
c001734d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017351:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017357:	83 ec 0c             	sub    esp,0xc
c001735a:	6a 01                	push   0x1
c001735c:	6a 01                	push   0x1
c001735e:	50                   	push   eax
c001735f:	52                   	push   edx
c0017360:	53                   	push   ebx
c0017361:	e8 4c a9 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017366:	83 c4 20             	add    esp,0x20
c0017369:	09 f0                	or     eax,esi
c001736b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001736f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017373:	c1 e0 03             	shl    eax,0x3
c0017376:	05 a0 ff 02 c0       	add    eax,0xc002ffa0
c001737b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001737f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017387:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001738f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017393:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017397:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001739b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001739f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173a3:	89 c6                	mov    esi,eax
c00173a5:	89 d7                	mov    edi,edx
c00173a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173a9:	89 c8                	mov    eax,ecx
c00173ab:	89 fa                	mov    edx,edi
c00173ad:	89 f3                	mov    ebx,esi
c00173af:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00173b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173ca:	05 00 10 00 00       	add    eax,0x1000
c00173cf:	c1 e8 0c             	shr    eax,0xc
c00173d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173e2:	25 ff 0f 00 00       	and    eax,0xfff
c00173e7:	89 c6                	mov    esi,eax
c00173e9:	8b 1d 50 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da50
c00173ef:	83 ec 0c             	sub    esp,0xc
c00173f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00173f6:	e8 04 9e ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c00173fb:	83 c4 10             	add    esp,0x10
c00173fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017402:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017408:	83 ec 0c             	sub    esp,0xc
c001740b:	6a 01                	push   0x1
c001740d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017411:	50                   	push   eax
c0017412:	52                   	push   edx
c0017413:	53                   	push   ebx
c0017414:	e8 99 a8 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017419:	83 c4 20             	add    esp,0x20
c001741c:	09 f0                	or     eax,esi
c001741e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017426:	83 ec 0c             	sub    esp,0xc
c0017429:	50                   	push   eax
c001742a:	e8 16 a2 ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c001742f:	83 c4 10             	add    esp,0x10
c0017432:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017436:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001743a:	89 14 c5 a4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd005c],edx
c0017441:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017445:	e9 bf fe ff ff       	jmp    c0017309 <loadACPITables(unsigned char*)+0x10e>
c001744a:	90                   	nop
c001744b:	83 c4 60             	add    esp,0x60
c001744e:	5b                   	pop    ebx
c001744f:	5e                   	pop    esi
c0017450:	5f                   	pop    edi
c0017451:	c3                   	ret    

c0017452 <findRSDT(unsigned char*)>:
c0017452:	57                   	push   edi
c0017453:	56                   	push   esi
c0017454:	53                   	push   ebx
c0017455:	83 ec 50             	sub    esp,0x50
c0017458:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001745d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017463:	83 e0 04             	and    eax,0x4
c0017466:	84 c0                	test   al,al
c0017468:	75 0a                	jne    c0017474 <findRSDT(unsigned char*)+0x22>
c001746a:	b8 00 00 00 00       	mov    eax,0x0
c001746f:	e9 21 01 00 00       	jmp    c0017595 <findRSDT(unsigned char*)+0x143>
c0017474:	89 e0                	mov    eax,esp
c0017476:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001747a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001747e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017482:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001748a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001748e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017492:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017496:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001749a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001749e:	89 c6                	mov    esi,eax
c00174a0:	89 d7                	mov    edi,edx
c00174a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174a4:	89 c8                	mov    eax,ecx
c00174a6:	89 fa                	mov    edx,edi
c00174a8:	89 f3                	mov    ebx,esi
c00174aa:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174ae:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174b2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174b6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00174ba:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00174be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00174c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00174ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174ce:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174da:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174de:	25 ff 0f 00 00       	and    eax,0xfff
c00174e3:	89 c6                	mov    esi,eax
c00174e5:	8b 1d 50 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da50
c00174eb:	83 ec 0c             	sub    esp,0xc
c00174ee:	6a 02                	push   0x2
c00174f0:	e8 0a 9d ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c00174f5:	83 c4 10             	add    esp,0x10
c00174f8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174fc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017502:	83 ec 0c             	sub    esp,0xc
c0017505:	6a 01                	push   0x1
c0017507:	6a 02                	push   0x2
c0017509:	50                   	push   eax
c001750a:	52                   	push   edx
c001750b:	53                   	push   ebx
c001750c:	e8 a1 a7 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017511:	83 c4 20             	add    esp,0x20
c0017514:	09 f0                	or     eax,esi
c0017516:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001751a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001751e:	25 ff 0f 00 00       	and    eax,0xfff
c0017523:	89 c6                	mov    esi,eax
c0017525:	8b 1d 50 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da50
c001752b:	83 ec 0c             	sub    esp,0xc
c001752e:	6a 02                	push   0x2
c0017530:	e8 ca 9c ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0017535:	83 c4 10             	add    esp,0x10
c0017538:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001753c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017542:	83 ec 0c             	sub    esp,0xc
c0017545:	6a 01                	push   0x1
c0017547:	6a 02                	push   0x2
c0017549:	50                   	push   eax
c001754a:	52                   	push   edx
c001754b:	53                   	push   ebx
c001754c:	e8 61 a7 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017551:	83 c4 20             	add    esp,0x20
c0017554:	09 f0                	or     eax,esi
c0017556:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001755a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001755f:	75 11                	jne    c0017572 <findRSDT(unsigned char*)+0x120>
c0017561:	c6 05 a0 01 03 c0 00 	mov    BYTE PTR ds:0xc00301a0,0x0
c0017568:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001756c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017570:	eb 1f                	jmp    c0017591 <findRSDT(unsigned char*)+0x13f>
c0017572:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017577:	75 11                	jne    c001758a <findRSDT(unsigned char*)+0x138>
c0017579:	c6 05 a0 01 03 c0 01 	mov    BYTE PTR ds:0xc00301a0,0x1
c0017580:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017584:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017588:	eb 07                	jmp    c0017591 <findRSDT(unsigned char*)+0x13f>
c001758a:	b8 00 00 00 00       	mov    eax,0x0
c001758f:	eb 04                	jmp    c0017595 <findRSDT(unsigned char*)+0x143>
c0017591:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017595:	83 c4 50             	add    esp,0x50
c0017598:	5b                   	pop    ebx
c0017599:	5e                   	pop    esi
c001759a:	5f                   	pop    edi
c001759b:	c3                   	ret    

c001759c <findDataTable(unsigned char*, char*)>:
c001759c:	83 ec 1c             	sub    esp,0x1c
c001759f:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00175a4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175aa:	83 e0 04             	and    eax,0x4
c00175ad:	84 c0                	test   al,al
c00175af:	75 07                	jne    c00175b8 <findDataTable(unsigned char*, char*)+0x1c>
c00175b1:	b8 00 00 00 00       	mov    eax,0x0
c00175b6:	eb 52                	jmp    c001760a <findDataTable(unsigned char*, char*)+0x6e>
c00175b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175c0:	a1 8c ff 02 c0       	mov    eax,ds:0xc002ff8c
c00175c5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00175c9:	7d 3a                	jge    c0017605 <findDataTable(unsigned char*, char*)+0x69>
c00175cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175cf:	c1 e0 03             	shl    eax,0x3
c00175d2:	05 a0 ff 02 c0       	add    eax,0xc002ffa0
c00175d7:	83 ec 04             	sub    esp,0x4
c00175da:	6a 04                	push   0x4
c00175dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175e0:	50                   	push   eax
c00175e1:	e8 66 90 fe ff       	call   c000064c <memcmp>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	85 c0                	test   eax,eax
c00175eb:	0f 94 c0             	sete   al
c00175ee:	84 c0                	test   al,al
c00175f0:	74 0d                	je     c00175ff <findDataTable(unsigned char*, char*)+0x63>
c00175f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175f6:	8b 04 c5 a4 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd005c]
c00175fd:	eb 0b                	jmp    c001760a <findDataTable(unsigned char*, char*)+0x6e>
c00175ff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017603:	eb bb                	jmp    c00175c0 <findDataTable(unsigned char*, char*)+0x24>
c0017605:	b8 00 00 00 00       	mov    eax,0x0
c001760a:	83 c4 1c             	add    esp,0x1c
c001760d:	c3                   	ret    

c001760e <scanMADT()>:
c001760e:	53                   	push   ebx
c001760f:	83 ec 38             	sub    esp,0x38
c0017612:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0017617:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001761d:	83 e0 04             	and    eax,0x4
c0017620:	84 c0                	test   al,al
c0017622:	0f 84 4a 04 00 00    	je     c0017a72 <scanMADT()+0x464>
c0017628:	e8 44 fb ff ff       	call   c0017171 <findRSDP()>
c001762d:	a3 ac 01 03 c0       	mov    ds:0xc00301ac,eax
c0017632:	a1 ac 01 03 c0       	mov    eax,ds:0xc00301ac
c0017637:	85 c0                	test   eax,eax
c0017639:	75 19                	jne    c0017654 <scanMADT()+0x46>
c001763b:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0017640:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017646:	83 e2 fb             	and    edx,0xfffffffb
c0017649:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001764f:	e9 22 04 00 00       	jmp    c0017a76 <scanMADT()+0x468>
c0017654:	a1 ac 01 03 c0       	mov    eax,ds:0xc00301ac
c0017659:	83 ec 0c             	sub    esp,0xc
c001765c:	50                   	push   eax
c001765d:	e8 f0 fd ff ff       	call   c0017452 <findRSDT(unsigned char*)>
c0017662:	83 c4 10             	add    esp,0x10
c0017665:	a3 a8 01 03 c0       	mov    ds:0xc00301a8,eax
c001766a:	a1 a8 01 03 c0       	mov    eax,ds:0xc00301a8
c001766f:	85 c0                	test   eax,eax
c0017671:	75 19                	jne    c001768c <scanMADT()+0x7e>
c0017673:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0017678:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001767e:	83 e2 fb             	and    edx,0xfffffffb
c0017681:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017687:	e9 ea 03 00 00       	jmp    c0017a76 <scanMADT()+0x468>
c001768c:	a1 a8 01 03 c0       	mov    eax,ds:0xc00301a8
c0017691:	83 ec 0c             	sub    esp,0xc
c0017694:	50                   	push   eax
c0017695:	e8 61 fb ff ff       	call   c00171fb <loadACPITables(unsigned char*)>
c001769a:	83 c4 10             	add    esp,0x10
c001769d:	a1 a8 01 03 c0       	mov    eax,ds:0xc00301a8
c00176a2:	83 ec 08             	sub    esp,0x8
c00176a5:	68 28 b1 02 c0       	push   0xc002b128
c00176aa:	50                   	push   eax
c00176ab:	e8 ec fe ff ff       	call   c001759c <findDataTable(unsigned char*, char*)>
c00176b0:	83 c4 10             	add    esp,0x10
c00176b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176b7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00176bc:	75 19                	jne    c00176d7 <scanMADT()+0xc9>
c00176be:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00176c3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176c9:	83 e2 fe             	and    edx,0xfffffffe
c00176cc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176d2:	e9 9f 03 00 00       	jmp    c0017a76 <scanMADT()+0x468>
c00176d7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00176df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176e6:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00176ea:	0f 87 86 03 00 00    	ja     c0017a76 <scanMADT()+0x468>
c00176f0:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00176f8:	0f 87 78 03 00 00    	ja     c0017a76 <scanMADT()+0x468>
c00176fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017702:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017706:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001770a:	8d 50 01             	lea    edx,[eax+0x1]
c001770d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017711:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017715:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017719:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001771d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017721:	8d 50 01             	lea    edx,[eax+0x1]
c0017724:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017728:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001772c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017730:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017734:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017739:	0f 86 36 03 00 00    	jbe    c0017a75 <scanMADT()+0x467>
c001773f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017744:	75 57                	jne    c001779d <scanMADT()+0x18f>
c0017746:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001774a:	8d 50 01             	lea    edx,[eax+0x1]
c001774d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017751:	8a 15 a0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303a0
c0017757:	0f b6 d2             	movzx  edx,dl
c001775a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001775e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017762:	88 82 e0 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfc20],al
c0017768:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001776c:	8d 50 01             	lea    edx,[eax+0x1]
c001776f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017773:	8a 15 a0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303a0
c0017779:	8d 4a 01             	lea    ecx,[edx+0x1]
c001777c:	88 0d a0 03 03 c0    	mov    BYTE PTR ds:0xc00303a0,cl
c0017782:	0f b6 d2             	movzx  edx,dl
c0017785:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017789:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001778d:	88 82 c0 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfc40],al
c0017793:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017798:	e9 c1 02 00 00       	jmp    c0017a5e <scanMADT()+0x450>
c001779d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177a2:	0f 85 14 01 00 00    	jne    c00178bc <scanMADT()+0x2ae>
c00177a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ac:	8d 50 01             	lea    edx,[eax+0x1]
c00177af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177b3:	8a 15 60 02 03 c0    	mov    dl,BYTE PTR ds:0xc0030260
c00177b9:	0f b6 d2             	movzx  edx,dl
c00177bc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177c0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177c4:	88 82 80 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfd80],al
c00177ca:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00177ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177d6:	01 d0                	add    eax,edx
c00177d8:	83 c0 2c             	add    eax,0x2c
c00177db:	8a 00                	mov    al,BYTE PTR [eax]
c00177dd:	0f b6 d0             	movzx  edx,al
c00177e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e4:	8d 48 01             	lea    ecx,[eax+0x1]
c00177e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177eb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00177ef:	0f b6 c0             	movzx  eax,al
c00177f2:	c1 e0 08             	shl    eax,0x8
c00177f5:	89 d1                	mov    ecx,edx
c00177f7:	09 c1                	or     ecx,eax
c00177f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177fd:	8d 50 02             	lea    edx,[eax+0x2]
c0017800:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017804:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017808:	0f b6 c0             	movzx  eax,al
c001780b:	c1 e0 10             	shl    eax,0x10
c001780e:	09 c1                	or     ecx,eax
c0017810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017814:	8d 50 03             	lea    edx,[eax+0x3]
c0017817:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001781b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001781f:	0f b6 c0             	movzx  eax,al
c0017822:	c1 e0 18             	shl    eax,0x18
c0017825:	09 c1                	or     ecx,eax
c0017827:	89 ca                	mov    edx,ecx
c0017829:	a0 60 02 03 c0       	mov    al,ds:0xc0030260
c001782e:	0f b6 c0             	movzx  eax,al
c0017831:	89 14 85 a0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd60],edx
c0017838:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001783d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017841:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017845:	01 d0                	add    eax,edx
c0017847:	83 c0 2c             	add    eax,0x2c
c001784a:	8a 00                	mov    al,BYTE PTR [eax]
c001784c:	0f b6 d0             	movzx  edx,al
c001784f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017853:	8d 48 01             	lea    ecx,[eax+0x1]
c0017856:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001785a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001785e:	0f b6 c0             	movzx  eax,al
c0017861:	c1 e0 08             	shl    eax,0x8
c0017864:	89 d1                	mov    ecx,edx
c0017866:	09 c1                	or     ecx,eax
c0017868:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001786c:	8d 50 02             	lea    edx,[eax+0x2]
c001786f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017873:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017877:	0f b6 c0             	movzx  eax,al
c001787a:	c1 e0 10             	shl    eax,0x10
c001787d:	09 c1                	or     ecx,eax
c001787f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017883:	8d 50 03             	lea    edx,[eax+0x3]
c0017886:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001788a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001788e:	0f b6 c0             	movzx  eax,al
c0017891:	c1 e0 18             	shl    eax,0x18
c0017894:	09 c1                	or     ecx,eax
c0017896:	89 ca                	mov    edx,ecx
c0017898:	a0 60 02 03 c0       	mov    al,ds:0xc0030260
c001789d:	0f b6 c0             	movzx  eax,al
c00178a0:	89 14 85 20 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfce0],edx
c00178a7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178ac:	a0 60 02 03 c0       	mov    al,ds:0xc0030260
c00178b1:	40                   	inc    eax
c00178b2:	a2 60 02 03 c0       	mov    ds:0xc0030260,al
c00178b7:	e9 a2 01 00 00       	jmp    c0017a5e <scanMADT()+0x450>
c00178bc:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00178c1:	0f 85 e9 00 00 00    	jne    c00179b0 <scanMADT()+0x3a2>
c00178c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178cb:	8d 50 01             	lea    edx,[eax+0x1]
c00178ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178da:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00178de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178e2:	8d 50 01             	lea    edx,[eax+0x1]
c00178e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178f1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00178f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178fd:	01 d0                	add    eax,edx
c00178ff:	83 c0 2c             	add    eax,0x2c
c0017902:	8a 00                	mov    al,BYTE PTR [eax]
c0017904:	0f b6 d0             	movzx  edx,al
c0017907:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001790b:	8d 48 01             	lea    ecx,[eax+0x1]
c001790e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017912:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017916:	0f b6 c0             	movzx  eax,al
c0017919:	c1 e0 08             	shl    eax,0x8
c001791c:	89 d1                	mov    ecx,edx
c001791e:	09 c1                	or     ecx,eax
c0017920:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017924:	8d 50 02             	lea    edx,[eax+0x2]
c0017927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001792b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001792f:	0f b6 c0             	movzx  eax,al
c0017932:	c1 e0 10             	shl    eax,0x10
c0017935:	09 c1                	or     ecx,eax
c0017937:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001793b:	8d 50 03             	lea    edx,[eax+0x3]
c001793e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017942:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017946:	0f b6 c0             	movzx  eax,al
c0017949:	c1 e0 18             	shl    eax,0x18
c001794c:	09 c8                	or     eax,ecx
c001794e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017952:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017957:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001795b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795f:	01 d0                	add    eax,edx
c0017961:	83 c0 2c             	add    eax,0x2c
c0017964:	8a 00                	mov    al,BYTE PTR [eax]
c0017966:	0f b6 c0             	movzx  eax,al
c0017969:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001796d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017970:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017974:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017978:	0f b6 d2             	movzx  edx,dl
c001797b:	c1 e2 08             	shl    edx,0x8
c001797e:	09 d0                	or     eax,edx
c0017980:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017985:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001798a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001798f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017993:	88 90 40 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd34c0],dl
c0017999:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001799e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179a3:	66 89 84 12 40 02 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfdc0],ax
c00179ab:	e9 ae 00 00 00       	jmp    c0017a5e <scanMADT()+0x450>
c00179b0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179b5:	0f 85 97 00 00 00    	jne    c0017a52 <scanMADT()+0x444>
c00179bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179bf:	8d 50 01             	lea    edx,[eax+0x1]
c00179c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179ce:	0f b6 c0             	movzx  eax,al
c00179d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179dd:	01 d0                	add    eax,edx
c00179df:	83 c0 2c             	add    eax,0x2c
c00179e2:	8a 00                	mov    al,BYTE PTR [eax]
c00179e4:	0f b6 d0             	movzx  edx,al
c00179e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179eb:	8d 48 01             	lea    ecx,[eax+0x1]
c00179ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179f2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179f6:	0f b6 c0             	movzx  eax,al
c00179f9:	c1 e0 08             	shl    eax,0x8
c00179fc:	09 d0                	or     eax,edx
c00179fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a02:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a0b:	8d 50 01             	lea    edx,[eax+0x1]
c0017a0e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a16:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a1a:	0f b6 c0             	movzx  eax,al
c0017a1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a25:	c1 e0 08             	shl    eax,0x8
c0017a28:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a2c:	89 c1                	mov    ecx,eax
c0017a2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a32:	c1 e0 18             	shl    eax,0x18
c0017a35:	89 c3                	mov    ebx,eax
c0017a37:	a1 b0 01 03 c0       	mov    eax,ds:0xc00301b0
c0017a3c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a3f:	89 15 b0 01 03 c0    	mov    DWORD PTR ds:0xc00301b0,edx
c0017a45:	09 d9                	or     ecx,ebx
c0017a47:	89 ca                	mov    edx,ecx
c0017a49:	89 14 85 c0 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe40],edx
c0017a50:	eb 0c                	jmp    c0017a5e <scanMADT()+0x450>
c0017a52:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a57:	75 05                	jne    c0017a5e <scanMADT()+0x450>
c0017a59:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a5e:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a67:	01 d0                	add    eax,edx
c0017a69:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a6d:	e9 6d fc ff ff       	jmp    c00176df <scanMADT()+0xd1>
c0017a72:	90                   	nop
c0017a73:	eb 01                	jmp    c0017a76 <scanMADT()+0x468>
c0017a75:	90                   	nop
c0017a76:	83 c4 38             	add    esp,0x38
c0017a79:	5b                   	pop    ebx
c0017a7a:	c3                   	ret    
c0017a7b:	90                   	nop

c0017a7c <ACPI::ACPI()>:
c0017a7c:	83 ec 0c             	sub    esp,0xc
c0017a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a83:	83 ec 08             	sub    esp,0x8
c0017a86:	68 2d b1 02 c0       	push   0xc002b12d
c0017a8b:	50                   	push   eax
c0017a8c:	e8 57 c2 ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0017a91:	83 c4 10             	add    esp,0x10
c0017a94:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c0017a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a9d:	89 10                	mov    DWORD PTR [eax],edx
c0017a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aae:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017ac6:	e8 43 fb ff ff       	call   c001760e <scanMADT()>
c0017acb:	90                   	nop
c0017acc:	83 c4 0c             	add    esp,0xc
c0017acf:	c3                   	ret    

c0017ad0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017ad0:	83 ec 2c             	sub    esp,0x2c
c0017ad3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017ad7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017adb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017adf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017ae3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017ae8:	88 d0                	mov    al,dl
c0017aea:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017aee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017af3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017afb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aff:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b05:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b09:	0f 8d 97 00 00 00    	jge    c0017ba6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b17:	83 c2 2a             	add    edx,0x2a
c0017b1a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b1e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b23:	75 78                	jne    c0017b9d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b2d:	83 c2 2a             	add    edx,0x2a
c0017b30:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b34:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b38:	75 63                	jne    c0017b9d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b3a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b3f:	74 3a                	je     c0017b7b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b49:	83 c2 2a             	add    edx,0x2a
c0017b4c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b57:	39 c2                	cmp    edx,eax
c0017b59:	74 10                	je     c0017b6b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b5b:	83 ec 0c             	sub    esp,0xc
c0017b5e:	68 a8 b0 02 c0       	push   0xc002b0a8
c0017b63:	e8 af 22 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0017b68:	83 c4 10             	add    esp,0x10
c0017b6b:	83 ec 0c             	sub    esp,0xc
c0017b6e:	68 32 b1 02 c0       	push   0xc002b132
c0017b73:	e8 9f 22 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0017b78:	83 c4 10             	add    esp,0x10
c0017b7b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017b7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b87:	83 c2 2a             	add    edx,0x2a
c0017b8a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017b8e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017b90:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017b93:	89 01                	mov    DWORD PTR [ecx],eax
c0017b95:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017b98:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b9d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017ba1:	e9 55 ff ff ff       	jmp    c0017afb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017ba6:	90                   	nop
c0017ba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bab:	83 c4 2c             	add    esp,0x2c
c0017bae:	c2 04 00             	ret    0x4
c0017bb1:	90                   	nop

c0017bb2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017bb2:	83 ec 1c             	sub    esp,0x1c
c0017bb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bb9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017bbd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bc1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017bc6:	88 c8                	mov    al,cl
c0017bc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017bcc:	88 d0                	mov    al,dl
c0017bce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bd6:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017bdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017be3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017be7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017beb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bef:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bf9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017bfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c00:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c09:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c0f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c13:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c1a:	83 c2 2a             	add    edx,0x2a
c0017c1d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c25:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c36:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c3e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c44:	8d 50 01             	lea    edx,[eax+0x1]
c0017c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c55:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c5b:	3d 00 02 00 00       	cmp    eax,0x200
c0017c60:	75 10                	jne    c0017c72 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c62:	83 ec 0c             	sub    esp,0xc
c0017c65:	68 41 b1 02 c0       	push   0xc002b141
c0017c6a:	e8 a8 21 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	90                   	nop
c0017c73:	83 c4 1c             	add    esp,0x1c
c0017c76:	c3                   	ret    
c0017c77:	90                   	nop

c0017c78 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c78:	b8 00 00 00 00       	mov    eax,0x0
c0017c7d:	c3                   	ret    

c0017c7e <ACPI::detectPCI()>:
c0017c7e:	53                   	push   ebx
c0017c7f:	83 ec 28             	sub    esp,0x28
c0017c82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c87:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017c8c:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0017c91:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c97:	83 e0 04             	and    eax,0x4
c0017c9a:	84 c0                	test   al,al
c0017c9c:	74 2b                	je     c0017cc9 <ACPI::detectPCI()+0x4b>
c0017c9e:	a1 a8 01 03 c0       	mov    eax,ds:0xc00301a8
c0017ca3:	83 ec 08             	sub    esp,0x8
c0017ca6:	68 5e b1 02 c0       	push   0xc002b15e
c0017cab:	50                   	push   eax
c0017cac:	e8 eb f8 ff ff       	call   c001759c <findDataTable(unsigned char*, char*)>
c0017cb1:	83 c4 10             	add    esp,0x10
c0017cb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cb8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017cbd:	74 0a                	je     c0017cc9 <ACPI::detectPCI()+0x4b>
c0017cbf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cc4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017cc9:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017cd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cd5:	8a 00                	mov    al,BYTE PTR [eax]
c0017cd7:	3c 01                	cmp    al,0x1
c0017cd9:	75 0c                	jne    c0017ce7 <ACPI::detectPCI()+0x69>
c0017cdb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ce0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ce5:	eb 26                	jmp    c0017d0d <ACPI::detectPCI()+0x8f>
c0017ce7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ceb:	8a 00                	mov    al,BYTE PTR [eax]
c0017ced:	3c 02                	cmp    al,0x2
c0017cef:	75 1c                	jne    c0017d0d <ACPI::detectPCI()+0x8f>
c0017cf1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cf6:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017cfb:	74 10                	je     c0017d0d <ACPI::detectPCI()+0x8f>
c0017cfd:	83 ec 0c             	sub    esp,0xc
c0017d00:	68 d8 b0 02 c0       	push   0xc002b0d8
c0017d05:	e8 0d 21 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0017d0a:	83 c4 10             	add    esp,0x10
c0017d0d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d11:	83 f0 01             	xor    eax,0x1
c0017d14:	84 c0                	test   al,al
c0017d16:	74 3f                	je     c0017d57 <ACPI::detectPCI()+0xd9>
c0017d18:	e8 33 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017d1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d21:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d26:	75 0c                	jne    c0017d34 <ACPI::detectPCI()+0xb6>
c0017d28:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d2d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d32:	eb 23                	jmp    c0017d57 <ACPI::detectPCI()+0xd9>
c0017d34:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d39:	75 1c                	jne    c0017d57 <ACPI::detectPCI()+0xd9>
c0017d3b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d40:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d45:	74 10                	je     c0017d57 <ACPI::detectPCI()+0xd9>
c0017d47:	83 ec 0c             	sub    esp,0xc
c0017d4a:	68 d8 b0 02 c0       	push   0xc002b0d8
c0017d4f:	e8 c3 20 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0017d54:	83 c4 10             	add    esp,0x10
c0017d57:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d5c:	74 7e                	je     c0017ddc <ACPI::detectPCI()+0x15e>
c0017d5e:	83 ec 0c             	sub    esp,0xc
c0017d61:	68 63 b1 02 c0       	push   0xc002b163
c0017d66:	e8 88 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d6b:	83 c4 10             	add    esp,0x10
c0017d6e:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d76:	83 ec 0c             	sub    esp,0xc
c0017d79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d7d:	e8 17 78 ff ff       	call   c000f599 <malloc>
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	89 c3                	mov    ebx,eax
c0017d87:	83 ec 0c             	sub    esp,0xc
c0017d8a:	53                   	push   ebx
c0017d8b:	e8 aa a5 00 00       	call   c002233a <PCI::PCI()>
c0017d90:	83 c4 10             	add    esp,0x10
c0017d93:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017d97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d9b:	83 ec 08             	sub    esp,0x8
c0017d9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017da2:	50                   	push   eax
c0017da3:	e8 3c bd ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c0017da8:	83 c4 10             	add    esp,0x10
c0017dab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db1:	83 c0 08             	add    eax,0x8
c0017db4:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db6:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017dbb:	74 07                	je     c0017dc4 <ACPI::detectPCI()+0x146>
c0017dbd:	ba 01 00 00 00       	mov    edx,0x1
c0017dc2:	eb 05                	jmp    c0017dc9 <ACPI::detectPCI()+0x14b>
c0017dc4:	ba 02 00 00 00       	mov    edx,0x2
c0017dc9:	6a 00                	push   0x0
c0017dcb:	6a 00                	push   0x0
c0017dcd:	52                   	push   edx
c0017dce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dd2:	ff d0                	call   eax
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	e9 9e 00 00 00       	jmp    c0017e7a <ACPI::detectPCI()+0x1fc>
c0017ddc:	83 ec 0c             	sub    esp,0xc
c0017ddf:	68 7b b1 02 c0       	push   0xc002b17b
c0017de4:	e8 c2 a8 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0017de9:	83 c4 10             	add    esp,0x10
c0017dec:	83 ec 0c             	sub    esp,0xc
c0017def:	68 86 b1 02 c0       	push   0xc002b186
c0017df4:	e8 fa 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017df9:	83 c4 10             	add    esp,0x10
c0017dfc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e03:	83 ec 0c             	sub    esp,0xc
c0017e06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e0a:	e8 8a 77 ff ff       	call   c000f599 <malloc>
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	89 c3                	mov    ebx,eax
c0017e14:	83 ec 0c             	sub    esp,0xc
c0017e17:	53                   	push   ebx
c0017e18:	e8 87 b0 00 00       	call   c0022ea4 <IDE::IDE()>
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e28:	83 ec 08             	sub    esp,0x8
c0017e2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e2f:	50                   	push   eax
c0017e30:	e8 af bc ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c0017e35:	83 c4 10             	add    esp,0x10
c0017e38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e3c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e4a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e57:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e64:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e66:	83 c0 08             	add    eax,0x8
c0017e69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e6b:	6a 00                	push   0x0
c0017e6d:	6a 00                	push   0x0
c0017e6f:	6a 00                	push   0x0
c0017e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e75:	ff d0                	call   eax
c0017e77:	83 c4 10             	add    esp,0x10
c0017e7a:	90                   	nop
c0017e7b:	83 c4 28             	add    esp,0x28
c0017e7e:	5b                   	pop    ebx
c0017e7f:	c3                   	ret    

c0017e80 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017e80:	83 ec 1c             	sub    esp,0x1c
c0017e83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e87:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017e8a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e8e:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0017e93:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e98:	83 ec 08             	sub    esp,0x8
c0017e9b:	52                   	push   edx
c0017e9c:	50                   	push   eax
c0017e9d:	e8 0e 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017ea2:	83 c4 10             	add    esp,0x10
c0017ea5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017ea9:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0017eae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017eb3:	83 ec 04             	sub    esp,0x4
c0017eb6:	6a 01                	push   0x1
c0017eb8:	52                   	push   edx
c0017eb9:	50                   	push   eax
c0017eba:	e8 23 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ebf:	83 c4 10             	add    esp,0x10
c0017ec2:	90                   	nop
c0017ec3:	83 c4 1c             	add    esp,0x1c
c0017ec6:	c3                   	ret    
c0017ec7:	90                   	nop

c0017ec8 <ACPI::sleep()>:
c0017ec8:	83 ec 0c             	sub    esp,0xc
c0017ecb:	a1 80 ff 02 c0       	mov    eax,ds:0xc002ff80
c0017ed0:	85 c0                	test   eax,eax
c0017ed2:	74 07                	je     c0017edb <ACPI::sleep()+0x13>
c0017ed4:	a1 80 ff 02 c0       	mov    eax,ds:0xc002ff80
c0017ed9:	ff d0                	call   eax
c0017edb:	90                   	nop
c0017edc:	83 c4 0c             	add    esp,0xc
c0017edf:	c3                   	ret    

c0017ee0 <ACPI::open(int, int, void*)>:
c0017ee0:	57                   	push   edi
c0017ee1:	56                   	push   esi
c0017ee2:	53                   	push   ebx
c0017ee3:	81 ec 60 01 00 00    	sub    esp,0x160
c0017ee9:	83 ec 0c             	sub    esp,0xc
c0017eec:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017ef3:	e8 86 fd ff ff       	call   c0017c7e <ACPI::detectPCI()>
c0017ef8:	83 c4 10             	add    esp,0x10
c0017efb:	83 ec 0c             	sub    esp,0xc
c0017efe:	68 00 b1 02 c0       	push   0xc002b100
c0017f03:	e8 eb 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	68 9b b1 02 c0       	push   0xc002b19b
c0017f13:	e8 52 46 00 00       	call   c001c56a <Thr::loadKernelSymbolTable(char const*)>
c0017f18:	83 c4 10             	add    esp,0x10
c0017f1b:	83 ec 0c             	sub    esp,0xc
c0017f1e:	68 b9 b1 02 c0       	push   0xc002b1b9
c0017f23:	e8 cb 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f28:	83 c4 10             	add    esp,0x10
c0017f2b:	83 ec 04             	sub    esp,0x4
c0017f2e:	6a 0c                	push   0xc
c0017f30:	68 d4 b1 02 c0       	push   0xc002b1d4
c0017f35:	68 e5 b1 02 c0       	push   0xc002b1e5
c0017f3a:	e8 94 2c 00 00       	call   c001abd3 <Reg::readIntWithDefault(char*, char*, int)>
c0017f3f:	83 c4 10             	add    esp,0x10
c0017f42:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f49:	83 ec 0c             	sub    esp,0xc
c0017f4c:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f53:	e8 b1 94 ff ff       	call   c0011409 <Virt::setupPageSwapping(int)>
c0017f58:	83 c4 10             	add    esp,0x10
c0017f5b:	83 ec 0c             	sub    esp,0xc
c0017f5e:	68 d5 9d 02 c0       	push   0xc0029dd5
c0017f63:	e8 8b 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f68:	83 c4 10             	add    esp,0x10
c0017f6b:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c0017f71:	83 ec 08             	sub    esp,0x8
c0017f74:	6a 01                	push   0x1
c0017f76:	68 ec b1 02 c0       	push   0xc002b1ec
c0017f7b:	e8 61 50 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c0017f80:	83 c4 10             	add    esp,0x10
c0017f83:	83 ec 08             	sub    esp,0x8
c0017f86:	53                   	push   ebx
c0017f87:	50                   	push   eax
c0017f88:	e8 7f 52 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c0017f8d:	83 c4 10             	add    esp,0x10
c0017f90:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017f97:	83 ec 08             	sub    esp,0x8
c0017f9a:	6a 12                	push   0x12
c0017f9c:	50                   	push   eax
c0017f9d:	e8 c6 be ff ff       	call   c0013e68 <getDevicesOfType(DeviceType)>
c0017fa2:	83 c4 0c             	add    esp,0xc
c0017fa5:	83 ec 0c             	sub    esp,0xc
c0017fa8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017faf:	50                   	push   eax
c0017fb0:	e8 7f 09 01 00       	call   c0028934 <LinkedList<Device>::isEmpty()>
c0017fb5:	83 c4 10             	add    esp,0x10
c0017fb8:	83 f0 01             	xor    eax,0x1
c0017fbb:	84 c0                	test   al,al
c0017fbd:	0f 84 43 01 00 00    	je     c0018106 <ACPI::open(int, int, void*)+0x226>
c0017fc3:	83 ec 0c             	sub    esp,0xc
c0017fc6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fcd:	50                   	push   eax
c0017fce:	e8 7d 09 01 00       	call   c0028950 <LinkedList<Device>::getFirstElement()>
c0017fd3:	83 c4 10             	add    esp,0x10
c0017fd6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017fdd:	83 ec 0c             	sub    esp,0xc
c0017fe0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fe7:	50                   	push   eax
c0017fe8:	e8 6b 09 01 00       	call   c0028958 <LinkedList<Device>::removeFirst()>
c0017fed:	83 c4 10             	add    esp,0x10
c0017ff0:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017ff7:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017ffe:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018005:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018009:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001800f:	ba 09 00 00 00       	mov    edx,0x9
c0018014:	fc                   	cld    
c0018015:	89 c7                	mov    edi,eax
c0018017:	89 de                	mov    esi,ebx
c0018019:	89 d1                	mov    ecx,edx
c001801b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001801d:	83 ec 08             	sub    esp,0x8
c0018020:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018024:	50                   	push   eax
c0018025:	83 ec 24             	sub    esp,0x24
c0018028:	89 e0                	mov    eax,esp
c001802a:	89 c3                	mov    ebx,eax
c001802c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018030:	ba 09 00 00 00       	mov    edx,0x9
c0018035:	89 df                	mov    edi,ebx
c0018037:	89 c6                	mov    esi,eax
c0018039:	89 d1                	mov    ecx,edx
c001803b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001803d:	e8 d6 a7 00 00       	call   c0022818 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018042:	83 c4 30             	add    esp,0x30
c0018045:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001804c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018054:	0f 84 4b ff ff ff    	je     c0017fa5 <ACPI::open(int, int, void*)+0xc5>
c001805a:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018065:	83 ec 0c             	sub    esp,0xc
c0018068:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001806f:	e8 25 75 ff ff       	call   c000f599 <malloc>
c0018074:	83 c4 10             	add    esp,0x10
c0018077:	89 c3                	mov    ebx,eax
c0018079:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001807e:	83 ec 04             	sub    esp,0x4
c0018081:	50                   	push   eax
c0018082:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018089:	53                   	push   ebx
c001808a:	e8 7b ab ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001808f:	83 c4 10             	add    esp,0x10
c0018092:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018099:	83 ec 0c             	sub    esp,0xc
c001809c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180a3:	e8 34 ae ff ff       	call   c0012edc <File::exists()>
c00180a8:	83 c4 10             	add    esp,0x10
c00180ab:	84 c0                	test   al,al
c00180ad:	74 27                	je     c00180d6 <ACPI::open(int, int, void*)+0x1f6>
c00180af:	83 ec 08             	sub    esp,0x8
c00180b2:	6a 01                	push   0x1
c00180b4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180bb:	e8 21 4f 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c00180c0:	83 c4 10             	add    esp,0x10
c00180c3:	83 ec 08             	sub    esp,0x8
c00180c6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180cd:	50                   	push   eax
c00180ce:	e8 39 51 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c00180d3:	83 c4 10             	add    esp,0x10
c00180d6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00180de:	0f 84 c1 fe ff ff    	je     c0017fa5 <ACPI::open(int, int, void*)+0xc5>
c00180e4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00180eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00180ed:	83 c0 08             	add    eax,0x8
c00180f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f2:	83 ec 0c             	sub    esp,0xc
c00180f5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180fc:	ff d0                	call   eax
c00180fe:	83 c4 10             	add    esp,0x10
c0018101:	e9 9f fe ff ff       	jmp    c0017fa5 <ACPI::open(int, int, void*)+0xc5>
c0018106:	83 ec 0c             	sub    esp,0xc
c0018109:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018110:	50                   	push   eax
c0018111:	e8 1c 08 01 00       	call   c0028932 <LinkedList<Device>::~LinkedList()>
c0018116:	83 c4 10             	add    esp,0x10
c0018119:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c001811f:	83 ec 08             	sub    esp,0x8
c0018122:	6a 01                	push   0x1
c0018124:	68 07 b2 02 c0       	push   0xc002b207
c0018129:	e8 b3 4e 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c001812e:	83 c4 10             	add    esp,0x10
c0018131:	83 ec 08             	sub    esp,0x8
c0018134:	53                   	push   ebx
c0018135:	50                   	push   eax
c0018136:	e8 d1 50 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c001813b:	83 c4 10             	add    esp,0x10
c001813e:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c0018144:	83 ec 08             	sub    esp,0x8
c0018147:	6a 01                	push   0x1
c0018149:	68 24 b2 02 c0       	push   0xc002b224
c001814e:	e8 8e 4e 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c0018153:	83 c4 10             	add    esp,0x10
c0018156:	83 ec 08             	sub    esp,0x8
c0018159:	53                   	push   ebx
c001815a:	50                   	push   eax
c001815b:	e8 ac 50 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c0018160:	83 c4 10             	add    esp,0x10
c0018163:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0018168:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001816e:	83 e0 04             	and    eax,0x4
c0018171:	84 c0                	test   al,al
c0018173:	0f 84 0d 01 00 00    	je     c0018286 <ACPI::open(int, int, void*)+0x3a6>
c0018179:	83 ec 0c             	sub    esp,0xc
c001817c:	68 41 b2 02 c0       	push   0xc002b241
c0018181:	e8 6d 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0018186:	83 c4 10             	add    esp,0x10
c0018189:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018194:	83 ec 0c             	sub    esp,0xc
c0018197:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001819e:	e8 f6 73 ff ff       	call   c000f599 <malloc>
c00181a3:	83 c4 10             	add    esp,0x10
c00181a6:	89 c3                	mov    ebx,eax
c00181a8:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c00181ad:	83 ec 04             	sub    esp,0x4
c00181b0:	50                   	push   eax
c00181b1:	68 5e b2 02 c0       	push   0xc002b25e
c00181b6:	53                   	push   ebx
c00181b7:	e8 4e aa ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c00181bc:	83 c4 10             	add    esp,0x10
c00181bf:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00181c6:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181ce:	74 1a                	je     c00181ea <ACPI::open(int, int, void*)+0x30a>
c00181d0:	83 ec 0c             	sub    esp,0xc
c00181d3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181da:	e8 fd ac ff ff       	call   c0012edc <File::exists()>
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	84 c0                	test   al,al
c00181e4:	74 04                	je     c00181ea <ACPI::open(int, int, void*)+0x30a>
c00181e6:	b0 01                	mov    al,0x1
c00181e8:	eb 02                	jmp    c00181ec <ACPI::open(int, int, void*)+0x30c>
c00181ea:	b0 00                	mov    al,0x0
c00181ec:	84 c0                	test   al,al
c00181ee:	74 25                	je     c0018215 <ACPI::open(int, int, void*)+0x335>
c00181f0:	83 ec 08             	sub    esp,0x8
c00181f3:	6a 01                	push   0x1
c00181f5:	68 5e b2 02 c0       	push   0xc002b25e
c00181fa:	e8 e2 4d 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c00181ff:	83 c4 10             	add    esp,0x10
c0018202:	83 ec 08             	sub    esp,0x8
c0018205:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001820c:	50                   	push   eax
c001820d:	e8 fa 4f 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001821d:	74 27                	je     c0018246 <ACPI::open(int, int, void*)+0x366>
c001821f:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018227:	74 1d                	je     c0018246 <ACPI::open(int, int, void*)+0x366>
c0018229:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018230:	8b 00                	mov    eax,DWORD PTR [eax]
c0018232:	83 c0 08             	add    eax,0x8
c0018235:	8b 00                	mov    eax,DWORD PTR [eax]
c0018237:	83 ec 0c             	sub    esp,0xc
c001823a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018241:	ff d0                	call   eax
c0018243:	83 c4 10             	add    esp,0x10
c0018246:	a1 a8 01 03 c0       	mov    eax,ds:0xc00301a8
c001824b:	83 ec 08             	sub    esp,0x8
c001824e:	68 7b b2 02 c0       	push   0xc002b27b
c0018253:	50                   	push   eax
c0018254:	e8 43 f3 ff ff       	call   c001759c <findDataTable(unsigned char*, char*)>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018263:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001826b:	74 19                	je     c0018286 <ACPI::open(int, int, void*)+0x3a6>
c001826d:	83 ec 08             	sub    esp,0x8
c0018270:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018277:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001827e:	e8 fd fb ff ff       	call   c0017e80 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018283:	83 c4 10             	add    esp,0x10
c0018286:	b8 00 00 00 00       	mov    eax,0x0
c001828b:	81 c4 60 01 00 00    	add    esp,0x160
c0018291:	5b                   	pop    ebx
c0018292:	5e                   	pop    esi
c0018293:	5f                   	pop    edi
c0018294:	c3                   	ret    
c0018295:	90                   	nop

c0018296 <CPU::close(int, int, void*)>:
c0018296:	31 c0                	xor    eax,eax
c0018298:	c3                   	ret    
c0018299:	90                   	nop

c001829a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001829a:	55                   	push   ebp
c001829b:	57                   	push   edi
c001829c:	56                   	push   esi
c001829d:	53                   	push   ebx
c001829e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182a6:	89 ce                	mov    esi,ecx
c00182a8:	89 d5                	mov    ebp,edx
c00182aa:	80 f9 04             	cmp    cl,0x4
c00182ad:	75 28                	jne    c00182d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182af:	8d 42 f9             	lea    eax,[edx-0x7]
c00182b2:	3c 03                	cmp    al,0x3
c00182b4:	0f 86 63 01 00 00    	jbe    c001841d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182ba:	80 fa 03             	cmp    dl,0x3
c00182bd:	0f 84 5a 01 00 00    	je     c001841d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182c3:	8d 7a f2             	lea    edi,[edx-0xe]
c00182c6:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c00182cb:	89 fb                	mov    ebx,edi
c00182cd:	80 fb 01             	cmp    bl,0x1
c00182d0:	77 4e                	ja     c0018320 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00182d2:	e9 52 01 00 00       	jmp    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d7:	80 f9 05             	cmp    cl,0x5
c00182da:	75 4d                	jne    c0018329 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00182dc:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c00182e1:	80 fa 03             	cmp    dl,0x3
c00182e4:	0f 86 3f 01 00 00    	jbe    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ea:	8d 7a fa             	lea    edi,[edx-0x6]
c00182ed:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00182f2:	89 fb                	mov    ebx,edi
c00182f4:	80 fb 01             	cmp    bl,0x1
c00182f7:	0f 86 2c 01 00 00    	jbe    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182fd:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018302:	80 fa 08             	cmp    dl,0x8
c0018305:	0f 84 1e 01 00 00    	je     c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830b:	89 d7                	mov    edi,edx
c001830d:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018312:	83 e7 fb             	and    edi,0xfffffffb
c0018315:	89 fb                	mov    ebx,edi
c0018317:	80 fb 09             	cmp    bl,0x9
c001831a:	0f 84 09 01 00 00    	je     c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018320:	31 c0                	xor    eax,eax
c0018322:	89 eb                	mov    ebx,ebp
c0018324:	0f b6 fb             	movzx  edi,bl
c0018327:	eb 30                	jmp    c0018359 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018329:	31 c0                	xor    eax,eax
c001832b:	80 f9 06             	cmp    cl,0x6
c001832e:	75 f2                	jne    c0018322 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018330:	80 fa 0a             	cmp    dl,0xa
c0018333:	77 ed                	ja     c0018322 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018335:	bf de 05 00 00       	mov    edi,0x5de
c001833a:	0f a3 d7             	bt     edi,edx
c001833d:	73 e3                	jae    c0018322 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001833f:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018344:	e9 e0 00 00 00       	jmp    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018349:	39 c7                	cmp    edi,eax
c001834b:	0f 84 d3 00 00 00    	je     c0018424 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018351:	40                   	inc    eax
c0018352:	3d d0 00 00 00       	cmp    eax,0xd0
c0018357:	74 09                	je     c0018362 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018359:	89 f3                	mov    ebx,esi
c001835b:	80 fb 0f             	cmp    bl,0xf
c001835e:	75 f1                	jne    c0018351 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018360:	eb e7                	jmp    c0018349 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018362:	80 f9 10             	cmp    cl,0x10
c0018365:	75 14                	jne    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018367:	8d 42 fc             	lea    eax,[edx-0x4]
c001836a:	83 e0 fb             	and    eax,0xfffffffb
c001836d:	3c 02                	cmp    al,0x2
c001836f:	76 34                	jbe    c00183a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018371:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c0018376:	80 fa 02             	cmp    dl,0x2
c0018379:	eb 24                	jmp    c001839f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001837b:	80 f9 11             	cmp    cl,0x11
c001837e:	75 13                	jne    c0018393 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018380:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c0018385:	80 fa 03             	cmp    dl,0x3
c0018388:	0f 85 9b 00 00 00    	jne    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001838e:	e9 91 00 00 00       	jmp    c0018424 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018393:	80 f9 12             	cmp    cl,0x12
c0018396:	75 14                	jne    c00183ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018398:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c001839d:	fe ca                	dec    dl
c001839f:	0f 85 84 00 00 00    	jne    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183a5:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c00183aa:	eb 7d                	jmp    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ac:	80 f9 14             	cmp    cl,0x14
c00183af:	75 12                	jne    c00183c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183b1:	4a                   	dec    edx
c00183b2:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c00183b7:	80 fa 01             	cmp    dl,0x1
c00183ba:	77 6d                	ja     c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183bc:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00183c1:	eb 66                	jmp    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c3:	80 f9 15             	cmp    cl,0x15
c00183c6:	75 31                	jne    c00183f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00183c8:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c00183cd:	80 fa 01             	cmp    dl,0x1
c00183d0:	74 57                	je     c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183d2:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c00183d7:	80 fa 13             	cmp    dl,0x13
c00183da:	76 0c                	jbe    c00183e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00183dc:	80 fa 30             	cmp    dl,0x30
c00183df:	75 48                	jne    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e1:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00183e6:	eb 41                	jmp    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e8:	b9 04 00 09 00       	mov    ecx,0x90004
c00183ed:	0f a3 d1             	bt     ecx,edx
c00183f0:	73 37                	jae    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f2:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00183f7:	eb 30                	jmp    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f9:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c00183fe:	80 f9 16             	cmp    cl,0x16
c0018401:	75 26                	jne    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018403:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018408:	84 d2                	test   dl,dl
c001840a:	74 1d                	je     c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840c:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c0018411:	80 fa 30             	cmp    dl,0x30
c0018414:	75 13                	jne    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018416:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c001841b:	eb 0c                	jmp    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841d:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018422:	eb 05                	jmp    c0018429 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018424:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018429:	5b                   	pop    ebx
c001842a:	5e                   	pop    esi
c001842b:	5f                   	pop    edi
c001842c:	5d                   	pop    ebp
c001842d:	c3                   	ret    

c001842e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001842e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018432:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018436:	80 f9 04             	cmp    cl,0x4
c0018439:	75 6b                	jne    c00184a6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001843b:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c0018440:	80 fa 01             	cmp    dl,0x1
c0018443:	0f 86 92 02 00 00    	jbe    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018449:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c001844e:	80 fa 02             	cmp    dl,0x2
c0018451:	0f 84 84 02 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018457:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c001845c:	80 fa 03             	cmp    dl,0x3
c001845f:	0f 84 76 02 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018465:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c001846a:	80 fa 04             	cmp    dl,0x4
c001846d:	0f 84 68 02 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018473:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c0018478:	80 fa 05             	cmp    dl,0x5
c001847b:	0f 84 5a 02 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018481:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c0018486:	80 fa 07             	cmp    dl,0x7
c0018489:	0f 84 4c 02 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848f:	83 ea 08             	sub    edx,0x8
c0018492:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c0018497:	80 fa 01             	cmp    dl,0x1
c001849a:	0f 87 3b 02 00 00    	ja     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a0:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c00184a5:	c3                   	ret    
c00184a6:	80 f9 05             	cmp    cl,0x5
c00184a9:	75 45                	jne    c00184f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184ab:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184ae:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c00184b3:	80 f9 02             	cmp    cl,0x2
c00184b6:	0f 86 1f 02 00 00    	jbe    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bc:	80 fa 04             	cmp    dl,0x4
c00184bf:	0f 84 f3 01 00 00    	je     c00186b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00184c5:	80 fa 07             	cmp    dl,0x7
c00184c8:	0f 84 0d 02 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ce:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c00184d3:	80 fa 08             	cmp    dl,0x8
c00184d6:	0f 84 ff 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184dc:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c00184e1:	80 fa 09             	cmp    dl,0x9
c00184e4:	0f 85 f1 01 00 00    	jne    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ea:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c00184ef:	c3                   	ret    
c00184f0:	80 f9 06             	cmp    cl,0x6
c00184f3:	0f 85 85 01 00 00    	jne    c001867e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00184f9:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c00184fe:	80 fa 01             	cmp    dl,0x1
c0018501:	0f 84 d4 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018507:	8d 42 fb             	lea    eax,[edx-0x5]
c001850a:	3c 01                	cmp    al,0x1
c001850c:	0f 86 ac 01 00 00    	jbe    c00186be <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018512:	80 fa 03             	cmp    dl,0x3
c0018515:	0f 84 a3 01 00 00    	je     c00186be <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001851b:	8d 4a f9             	lea    ecx,[edx-0x7]
c001851e:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c0018523:	80 f9 01             	cmp    cl,0x1
c0018526:	0f 86 af 01 00 00    	jbe    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001852c:	80 fa 09             	cmp    dl,0x9
c001852f:	0f 84 8f 01 00 00    	je     c00186c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018535:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018538:	80 f9 01             	cmp    cl,0x1
c001853b:	0f 86 9a 01 00 00    	jbe    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018541:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c0018546:	80 fa 0d             	cmp    dl,0xd
c0018549:	0f 84 8c 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854f:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c0018554:	80 fa 0e             	cmp    dl,0xe
c0018557:	0f 84 7e 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855d:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c0018562:	80 fa 0f             	cmp    dl,0xf
c0018565:	0f 84 70 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856b:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c0018570:	80 fa 15             	cmp    dl,0x15
c0018573:	0f 84 62 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018579:	8d 4a ea             	lea    ecx,[edx-0x16]
c001857c:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c0018581:	80 f9 01             	cmp    cl,0x1
c0018584:	0f 86 51 01 00 00    	jbe    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001858a:	80 fa 1a             	cmp    dl,0x1a
c001858d:	0f 84 37 01 00 00    	je     c00186ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018593:	80 fa 1c             	cmp    dl,0x1c
c0018596:	0f 84 34 01 00 00    	je     c00186d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001859c:	80 fa 1d             	cmp    dl,0x1d
c001859f:	0f 84 36 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a5:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c00185aa:	80 fa 25             	cmp    dl,0x25
c00185ad:	0f 84 28 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b3:	8d 4a da             	lea    ecx,[edx-0x26]
c00185b6:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c00185bb:	80 f9 01             	cmp    cl,0x1
c00185be:	0f 86 17 01 00 00    	jbe    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c4:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00185c9:	80 fa 2a             	cmp    dl,0x2a
c00185cc:	0f 84 09 01 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d2:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c00185d7:	80 fa 2c             	cmp    dl,0x2c
c00185da:	0f 84 fb 00 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e0:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00185e5:	80 fa 2d             	cmp    dl,0x2d
c00185e8:	0f 84 ed 00 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ee:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c00185f3:	80 fa 2e             	cmp    dl,0x2e
c00185f6:	0f 84 df 00 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185fc:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c0018601:	80 fa 2f             	cmp    dl,0x2f
c0018604:	0f 84 d1 00 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860a:	8d 4a cb             	lea    ecx,[edx-0x35]
c001860d:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018612:	80 f9 01             	cmp    cl,0x1
c0018615:	0f 86 c0 00 00 00    	jbe    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861b:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c0018620:	80 fa 37             	cmp    dl,0x37
c0018623:	0f 84 b2 00 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018629:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c001862e:	80 fa 3a             	cmp    dl,0x3a
c0018631:	0f 84 a4 00 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018637:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c001863c:	80 fa 3c             	cmp    dl,0x3c
c001863f:	0f 84 96 00 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018645:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c001864a:	80 fa 3d             	cmp    dl,0x3d
c001864d:	0f 84 88 00 00 00    	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018653:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c0018658:	80 fa 3e             	cmp    dl,0x3e
c001865b:	74 7e                	je     c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865d:	8d 42 bb             	lea    eax,[edx-0x45]
c0018660:	3c 01                	cmp    al,0x1
c0018662:	76 72                	jbe    c00186d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018664:	80 fa 3f             	cmp    dl,0x3f
c0018667:	74 6d                	je     c00186d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018669:	80 fa 4a             	cmp    dl,0x4a
c001866c:	74 0a                	je     c0018678 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001866e:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c0018673:	80 fa 4d             	cmp    dl,0x4d
c0018676:	75 63                	jne    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018678:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c001867d:	c3                   	ret    
c001867e:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c0018683:	80 f9 0b             	cmp    cl,0xb
c0018686:	75 0a                	jne    c0018692 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018688:	fe ca                	dec    dl
c001868a:	75 4f                	jne    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868c:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018691:	c3                   	ret    
c0018692:	80 f9 0f             	cmp    cl,0xf
c0018695:	75 44                	jne    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018697:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c001869c:	80 fa 02             	cmp    dl,0x2
c001869f:	76 3a                	jbe    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a1:	8d 42 fd             	lea    eax,[edx-0x3]
c00186a4:	3c 01                	cmp    al,0x1
c00186a6:	76 0a                	jbe    c00186b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00186a8:	b8 01 b4 02 c0       	mov    eax,0xc002b401
c00186ad:	80 fa 06             	cmp    dl,0x6
c00186b0:	75 29                	jne    c00186db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b2:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c00186b7:	c3                   	ret    
c00186b8:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c00186bd:	c3                   	ret    
c00186be:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c00186c3:	c3                   	ret    
c00186c4:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c00186c9:	c3                   	ret    
c00186ca:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c00186cf:	c3                   	ret    
c00186d0:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c00186d5:	c3                   	ret    
c00186d6:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c00186db:	c3                   	ret    

c00186dc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00186dc:	60                   	pusha  
c00186dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186e9:	9c                   	pushf  
c00186ea:	fa                   	cli    
c00186eb:	0f 09                	wbinvd 
c00186ed:	0f 30                	wrmsr  
c00186ef:	9d                   	popf   
c00186f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00186f4:	89 02                	mov    DWORD PTR [edx],eax
c00186f6:	61                   	popa   
c00186f7:	c3                   	ret    

c00186f8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00186f8:	60                   	pusha  
c00186f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186fd:	9c                   	pushf  
c00186fe:	fa                   	cli    
c00186ff:	0f 09                	wbinvd 
c0018701:	31 c0                	xor    eax,eax
c0018703:	31 d2                	xor    edx,edx
c0018705:	0f 32                	rdmsr  
c0018707:	9d                   	popf   
c0018708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001870c:	89 02                	mov    DWORD PTR [edx],eax
c001870e:	61                   	popa   
c001870f:	c3                   	ret    

c0018710 <CPU::AMD_K6_writeback(int, int, int)>:
c0018710:	56                   	push   esi
c0018711:	53                   	push   ebx
c0018712:	83 ec 10             	sub    esp,0x10
c0018715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018719:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001871e:	75 5d                	jne    c001877d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018720:	83 f8 08             	cmp    eax,0x8
c0018723:	75 09                	jne    c001872e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018725:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001872a:	7e 13                	jle    c001873f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001872c:	eb 30                	jmp    c001875e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001872e:	83 f8 06             	cmp    eax,0x6
c0018731:	7c 4a                	jl     c001877d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018733:	83 f8 07             	cmp    eax,0x7
c0018736:	7e 07                	jle    c001873f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018738:	83 f8 09             	cmp    eax,0x9
c001873b:	74 21                	je     c001875e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001873d:	eb 3e                	jmp    c001877d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001873f:	89 e6                	mov    esi,esp
c0018741:	8b 1d 28 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d928
c0018747:	56                   	push   esi
c0018748:	c1 eb 15             	shr    ebx,0x15
c001874b:	68 82 00 00 c0       	push   0xc0000082
c0018750:	83 e3 7e             	and    ebx,0x7e
c0018753:	e8 a0 ff ff ff       	call   c00186f8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018758:	56                   	push   esi
c0018759:	6a 00                	push   0x0
c001875b:	53                   	push   ebx
c001875c:	eb 12                	jmp    c0018770 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001875e:	89 e3                	mov    ebx,esp
c0018760:	53                   	push   ebx
c0018761:	68 82 00 00 c0       	push   0xc0000082
c0018766:	e8 8d ff ff ff       	call   c00186f8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001876b:	53                   	push   ebx
c001876c:	6a 00                	push   0x0
c001876e:	6a 00                	push   0x0
c0018770:	68 82 00 00 c0       	push   0xc0000082
c0018775:	e8 62 ff ff ff       	call   c00186dc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001877a:	83 c4 18             	add    esp,0x18
c001877d:	83 c4 10             	add    esp,0x10
c0018780:	5b                   	pop    ebx
c0018781:	5e                   	pop    esi
c0018782:	c3                   	ret    
c0018783:	90                   	nop

c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018784:	55                   	push   ebp
c0018785:	57                   	push   edi
c0018786:	56                   	push   esi
c0018787:	53                   	push   ebx
c0018788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001878c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018790:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018794:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018798:	39 05 00 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce00,eax
c001879e:	75 23                	jne    c00187c3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187a0:	a1 0c 04 03 c0       	mov    eax,ds:0xc003040c
c00187a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00187a9:	89 06                	mov    DWORD PTR [esi],eax
c00187ab:	a1 08 04 03 c0       	mov    eax,ds:0xc0030408
c00187b0:	89 07                	mov    DWORD PTR [edi],eax
c00187b2:	a1 04 04 03 c0       	mov    eax,ds:0xc0030404
c00187b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00187ba:	a1 00 04 03 c0       	mov    eax,ds:0xc0030400
c00187bf:	89 02                	mov    DWORD PTR [edx],eax
c00187c1:	eb 3f                	jmp    c0018802 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00187c3:	31 c9                	xor    ecx,ecx
c00187c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187c9:	0f a2                	cpuid  
c00187cb:	89 06                	mov    DWORD PTR [esi],eax
c00187cd:	89 1f                	mov    DWORD PTR [edi],ebx
c00187cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187d3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00187d6:	89 10                	mov    DWORD PTR [eax],edx
c00187d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187dc:	a3 00 ce 02 c0       	mov    ds:0xc002ce00,eax
c00187e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00187e3:	a3 0c 04 03 c0       	mov    ds:0xc003040c,eax
c00187e8:	8b 07                	mov    eax,DWORD PTR [edi]
c00187ea:	a3 08 04 03 c0       	mov    ds:0xc0030408,eax
c00187ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00187f2:	a3 04 04 03 c0       	mov    ds:0xc0030404,eax
c00187f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00187fd:	a3 00 04 03 c0       	mov    ds:0xc0030400,eax
c0018802:	5b                   	pop    ebx
c0018803:	5e                   	pop    esi
c0018804:	5f                   	pop    edi
c0018805:	5d                   	pop    ebp
c0018806:	c3                   	ret    
c0018807:	90                   	nop

c0018808 <CPU::cpuidCheckEDX(unsigned int)>:
c0018808:	83 ec 10             	sub    esp,0x10
c001880b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001880f:	50                   	push   eax
c0018810:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018814:	50                   	push   eax
c0018815:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018819:	50                   	push   eax
c001881a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001881e:	50                   	push   eax
c001881f:	6a 01                	push   0x1
c0018821:	e8 5e ff ff ff       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018826:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001882a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001882e:	0f 95 c0             	setne  al
c0018831:	83 c4 24             	add    esp,0x24
c0018834:	c3                   	ret    
c0018835:	90                   	nop

c0018836 <CPU::cpuidCheckECX(unsigned int)>:
c0018836:	83 ec 10             	sub    esp,0x10
c0018839:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001883d:	50                   	push   eax
c001883e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018842:	50                   	push   eax
c0018843:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018847:	50                   	push   eax
c0018848:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001884c:	50                   	push   eax
c001884d:	6a 01                	push   0x1
c001884f:	e8 30 ff ff ff       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018854:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018858:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001885c:	0f 95 c0             	setne  al
c001885f:	83 c4 24             	add    esp,0x24
c0018862:	c3                   	ret    
c0018863:	90                   	nop

c0018864 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018864:	83 ec 10             	sub    esp,0x10
c0018867:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001886b:	50                   	push   eax
c001886c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018870:	50                   	push   eax
c0018871:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018875:	50                   	push   eax
c0018876:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001887a:	50                   	push   eax
c001887b:	6a 07                	push   0x7
c001887d:	e8 02 ff ff ff       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018882:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018886:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001888a:	0f 95 c0             	setne  al
c001888d:	83 c4 24             	add    esp,0x24
c0018890:	c3                   	ret    
c0018891:	90                   	nop

c0018892 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018892:	83 ec 10             	sub    esp,0x10
c0018895:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018899:	50                   	push   eax
c001889a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001889e:	50                   	push   eax
c001889f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188a3:	50                   	push   eax
c00188a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188a8:	50                   	push   eax
c00188a9:	6a 07                	push   0x7
c00188ab:	e8 d4 fe ff ff       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188b8:	0f 95 c0             	setne  al
c00188bb:	83 c4 24             	add    esp,0x24
c00188be:	c3                   	ret    
c00188bf:	90                   	nop

c00188c0 <CPU::CPU()>:
c00188c0:	83 ec 0c             	sub    esp,0xc
c00188c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188c7:	83 ec 08             	sub    esp,0x8
c00188ca:	68 01 b4 02 c0       	push   0xc002b401
c00188cf:	50                   	push   eax
c00188d0:	e8 13 b4 ff ff       	call   c0013ce8 <Device::Device(char const*)>
c00188d5:	83 c4 10             	add    esp,0x10
c00188d8:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c00188dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e1:	89 10                	mov    DWORD PTR [eax],edx
c00188e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00188f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188f5:	05 78 01 00 00       	add    eax,0x178
c00188fa:	83 ec 0c             	sub    esp,0xc
c00188fd:	50                   	push   eax
c00188fe:	e8 c9 64 ff ff       	call   c000edcc <GDT::GDT()>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001890a:	05 7c 09 00 00       	add    eax,0x97c
c001890f:	83 ec 0c             	sub    esp,0xc
c0018912:	50                   	push   eax
c0018913:	e8 04 67 ff ff       	call   c000f01c <IDT::IDT()>
c0018918:	83 c4 10             	add    esp,0x10
c001891b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001891f:	05 7c 11 00 00       	add    eax,0x117c
c0018924:	83 ec 0c             	sub    esp,0xc
c0018927:	50                   	push   eax
c0018928:	e8 19 82 ff ff       	call   c0010b46 <TSS::TSS()>
c001892d:	83 c4 10             	add    esp,0x10
c0018930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018934:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001893b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001893f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018949:	90                   	nop
c001894a:	83 c4 0c             	add    esp,0xc
c001894d:	c3                   	ret    

c001894e <CPU::displayFeatures()>:
c001894e:	c3                   	ret    
c001894f:	90                   	nop

c0018950 <CPU::detectFeatures()>:
c0018950:	55                   	push   ebp
c0018951:	57                   	push   edi
c0018952:	56                   	push   esi
c0018953:	53                   	push   ebx
c0018954:	83 ec 50             	sub    esp,0x50
c0018957:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001895b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018965:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001896c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018972:	6a 0d                	push   0xd
c0018974:	6a 00                	push   0x0
c0018976:	55                   	push   ebp
c0018977:	e8 d4 7d fe ff       	call   c0000750 <memset>
c001897c:	83 c4 10             	add    esp,0x10
c001897f:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0018984:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001898b:	0f 84 22 09 00 00    	je     c00192b3 <CPU::detectFeatures()+0x963>
c0018991:	83 ec 0c             	sub    esp,0xc
c0018994:	89 ef                	mov    edi,ebp
c0018996:	6a 10                	push   0x10
c0018998:	e8 6b fe ff ff       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c001899d:	83 e0 01             	and    eax,0x1
c00189a0:	8d 14 00             	lea    edx,[eax+eax*1]
c00189a3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189a9:	83 e0 fd             	and    eax,0xfffffffd
c00189ac:	09 d0                	or     eax,edx
c00189ae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189b4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00189bb:	e8 48 fe ff ff       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c00189c0:	83 e0 01             	and    eax,0x1
c00189c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189ca:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189d0:	83 e0 fb             	and    eax,0xfffffffb
c00189d3:	09 d0                	or     eax,edx
c00189d5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189db:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00189e2:	e8 21 fe ff ff       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c00189e7:	83 e0 01             	and    eax,0x1
c00189ea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00189f1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189f7:	83 e0 f7             	and    eax,0xfffffff7
c00189fa:	09 d0                	or     eax,edx
c00189fc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a02:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a09:	e8 fa fd ff ff       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c0018a0e:	83 e0 01             	and    eax,0x1
c0018a11:	c1 e0 04             	shl    eax,0x4
c0018a14:	88 c2                	mov    dl,al
c0018a16:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a1c:	83 e0 ef             	and    eax,0xffffffef
c0018a1f:	09 d0                	or     eax,edx
c0018a21:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a27:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a2e:	e8 d5 fd ff ff       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c0018a33:	83 e0 01             	and    eax,0x1
c0018a36:	c1 e0 05             	shl    eax,0x5
c0018a39:	88 c2                	mov    dl,al
c0018a3b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a41:	83 e0 df             	and    eax,0xffffffdf
c0018a44:	09 d0                	or     eax,edx
c0018a46:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a4c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a53:	e8 b0 fd ff ff       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c0018a58:	83 e0 01             	and    eax,0x1
c0018a5b:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a5e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a64:	83 e0 fd             	and    eax,0xfffffffd
c0018a67:	09 d0                	or     eax,edx
c0018a69:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a6f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018a76:	e8 8d fd ff ff       	call   c0018808 <CPU::cpuidCheckEDX(unsigned int)>
c0018a7b:	83 e0 01             	and    eax,0x1
c0018a7e:	c1 e0 06             	shl    eax,0x6
c0018a81:	88 c2                	mov    dl,al
c0018a83:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018a89:	83 e0 bf             	and    eax,0xffffffbf
c0018a8c:	09 d0                	or     eax,edx
c0018a8e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018a94:	58                   	pop    eax
c0018a95:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a99:	50                   	push   eax
c0018a9a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a9e:	50                   	push   eax
c0018a9f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018aa3:	56                   	push   esi
c0018aa4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018aa8:	50                   	push   eax
c0018aa9:	6a 00                	push   0x0
c0018aab:	e8 d4 fc ff ff       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ab0:	b8 04 00 00 00       	mov    eax,0x4
c0018ab5:	89 c1                	mov    ecx,eax
c0018ab7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ab9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018abf:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018ac3:	89 c1                	mov    ecx,eax
c0018ac5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ac7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018acd:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018ad1:	89 c1                	mov    ecx,eax
c0018ad3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ad5:	83 c4 18             	add    esp,0x18
c0018ad8:	68 ac b2 02 c0       	push   0xc002b2ac
c0018add:	55                   	push   ebp
c0018ade:	e8 b5 7d fe ff       	call   c0000898 <strcmp>
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	85 c0                	test   eax,eax
c0018ae8:	75 0f                	jne    c0018af9 <CPU::detectFeatures()+0x1a9>
c0018aea:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018af4:	e9 22 02 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018af9:	50                   	push   eax
c0018afa:	50                   	push   eax
c0018afb:	68 b9 b2 02 c0       	push   0xc002b2b9
c0018b00:	55                   	push   ebp
c0018b01:	e8 92 7d fe ff       	call   c0000898 <strcmp>
c0018b06:	83 c4 10             	add    esp,0x10
c0018b09:	85 c0                	test   eax,eax
c0018b0b:	74 dd                	je     c0018aea <CPU::detectFeatures()+0x19a>
c0018b0d:	50                   	push   eax
c0018b0e:	50                   	push   eax
c0018b0f:	68 c6 b2 02 c0       	push   0xc002b2c6
c0018b14:	55                   	push   ebp
c0018b15:	e8 7e 7d fe ff       	call   c0000898 <strcmp>
c0018b1a:	83 c4 10             	add    esp,0x10
c0018b1d:	85 c0                	test   eax,eax
c0018b1f:	74 2a                	je     c0018b4b <CPU::detectFeatures()+0x1fb>
c0018b21:	50                   	push   eax
c0018b22:	50                   	push   eax
c0018b23:	68 d3 b2 02 c0       	push   0xc002b2d3
c0018b28:	55                   	push   ebp
c0018b29:	e8 6a 7d fe ff       	call   c0000898 <strcmp>
c0018b2e:	83 c4 10             	add    esp,0x10
c0018b31:	85 c0                	test   eax,eax
c0018b33:	74 16                	je     c0018b4b <CPU::detectFeatures()+0x1fb>
c0018b35:	50                   	push   eax
c0018b36:	50                   	push   eax
c0018b37:	68 e0 b2 02 c0       	push   0xc002b2e0
c0018b3c:	55                   	push   ebp
c0018b3d:	e8 56 7d fe ff       	call   c0000898 <strcmp>
c0018b42:	83 c4 10             	add    esp,0x10
c0018b45:	85 c0                	test   eax,eax
c0018b47:	74 48                	je     c0018b91 <CPU::detectFeatures()+0x241>
c0018b49:	eb 0f                	jmp    c0018b5a <CPU::detectFeatures()+0x20a>
c0018b4b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b55:	e9 c1 01 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018b5a:	50                   	push   eax
c0018b5b:	50                   	push   eax
c0018b5c:	68 ed b2 02 c0       	push   0xc002b2ed
c0018b61:	55                   	push   ebp
c0018b62:	e8 31 7d fe ff       	call   c0000898 <strcmp>
c0018b67:	83 c4 10             	add    esp,0x10
c0018b6a:	85 c0                	test   eax,eax
c0018b6c:	74 23                	je     c0018b91 <CPU::detectFeatures()+0x241>
c0018b6e:	57                   	push   edi
c0018b6f:	57                   	push   edi
c0018b70:	68 fa b2 02 c0       	push   0xc002b2fa
c0018b75:	55                   	push   ebp
c0018b76:	e8 1d 7d fe ff       	call   c0000898 <strcmp>
c0018b7b:	83 c4 10             	add    esp,0x10
c0018b7e:	85 c0                	test   eax,eax
c0018b80:	75 1e                	jne    c0018ba0 <CPU::detectFeatures()+0x250>
c0018b82:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018b8c:	e9 8a 01 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018b91:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018b9b:	e9 7b 01 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018ba0:	56                   	push   esi
c0018ba1:	56                   	push   esi
c0018ba2:	68 07 b3 02 c0       	push   0xc002b307
c0018ba7:	55                   	push   ebp
c0018ba8:	e8 eb 7c fe ff       	call   c0000898 <strcmp>
c0018bad:	83 c4 10             	add    esp,0x10
c0018bb0:	85 c0                	test   eax,eax
c0018bb2:	75 0f                	jne    c0018bc3 <CPU::detectFeatures()+0x273>
c0018bb4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018bbe:	e9 58 01 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018bc3:	51                   	push   ecx
c0018bc4:	51                   	push   ecx
c0018bc5:	68 c6 b2 02 c0       	push   0xc002b2c6
c0018bca:	55                   	push   ebp
c0018bcb:	e8 c8 7c fe ff       	call   c0000898 <strcmp>
c0018bd0:	83 c4 10             	add    esp,0x10
c0018bd3:	85 c0                	test   eax,eax
c0018bd5:	75 0f                	jne    c0018be6 <CPU::detectFeatures()+0x296>
c0018bd7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018be1:	e9 35 01 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018be6:	52                   	push   edx
c0018be7:	52                   	push   edx
c0018be8:	68 14 b3 02 c0       	push   0xc002b314
c0018bed:	55                   	push   ebp
c0018bee:	e8 a5 7c fe ff       	call   c0000898 <strcmp>
c0018bf3:	83 c4 10             	add    esp,0x10
c0018bf6:	85 c0                	test   eax,eax
c0018bf8:	75 0f                	jne    c0018c09 <CPU::detectFeatures()+0x2b9>
c0018bfa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c04:	e9 12 01 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018c09:	50                   	push   eax
c0018c0a:	50                   	push   eax
c0018c0b:	68 21 b3 02 c0       	push   0xc002b321
c0018c10:	55                   	push   ebp
c0018c11:	e8 82 7c fe ff       	call   c0000898 <strcmp>
c0018c16:	83 c4 10             	add    esp,0x10
c0018c19:	85 c0                	test   eax,eax
c0018c1b:	75 0f                	jne    c0018c2c <CPU::detectFeatures()+0x2dc>
c0018c1d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c27:	e9 ef 00 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018c2c:	50                   	push   eax
c0018c2d:	50                   	push   eax
c0018c2e:	68 2e b3 02 c0       	push   0xc002b32e
c0018c33:	55                   	push   ebp
c0018c34:	e8 5f 7c fe ff       	call   c0000898 <strcmp>
c0018c39:	83 c4 10             	add    esp,0x10
c0018c3c:	85 c0                	test   eax,eax
c0018c3e:	75 0f                	jne    c0018c4f <CPU::detectFeatures()+0x2ff>
c0018c40:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c4a:	e9 cc 00 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018c4f:	50                   	push   eax
c0018c50:	50                   	push   eax
c0018c51:	68 3b b3 02 c0       	push   0xc002b33b
c0018c56:	55                   	push   ebp
c0018c57:	e8 3c 7c fe ff       	call   c0000898 <strcmp>
c0018c5c:	83 c4 10             	add    esp,0x10
c0018c5f:	85 c0                	test   eax,eax
c0018c61:	75 0f                	jne    c0018c72 <CPU::detectFeatures()+0x322>
c0018c63:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018c6d:	e9 a9 00 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018c72:	50                   	push   eax
c0018c73:	50                   	push   eax
c0018c74:	68 48 b3 02 c0       	push   0xc002b348
c0018c79:	55                   	push   ebp
c0018c7a:	e8 19 7c fe ff       	call   c0000898 <strcmp>
c0018c7f:	83 c4 10             	add    esp,0x10
c0018c82:	85 c0                	test   eax,eax
c0018c84:	75 0f                	jne    c0018c95 <CPU::detectFeatures()+0x345>
c0018c86:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018c90:	e9 86 00 00 00       	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018c95:	50                   	push   eax
c0018c96:	50                   	push   eax
c0018c97:	68 55 b3 02 c0       	push   0xc002b355
c0018c9c:	55                   	push   ebp
c0018c9d:	e8 f6 7b fe ff       	call   c0000898 <strcmp>
c0018ca2:	83 c4 10             	add    esp,0x10
c0018ca5:	85 c0                	test   eax,eax
c0018ca7:	75 0c                	jne    c0018cb5 <CPU::detectFeatures()+0x365>
c0018ca9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018cb3:	eb 66                	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018cb5:	50                   	push   eax
c0018cb6:	50                   	push   eax
c0018cb7:	68 62 b3 02 c0       	push   0xc002b362
c0018cbc:	55                   	push   ebp
c0018cbd:	e8 d6 7b fe ff       	call   c0000898 <strcmp>
c0018cc2:	83 c4 10             	add    esp,0x10
c0018cc5:	85 c0                	test   eax,eax
c0018cc7:	75 0c                	jne    c0018cd5 <CPU::detectFeatures()+0x385>
c0018cc9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018cd3:	eb 46                	jmp    c0018d1b <CPU::detectFeatures()+0x3cb>
c0018cd5:	57                   	push   edi
c0018cd6:	57                   	push   edi
c0018cd7:	68 6f b3 02 c0       	push   0xc002b36f
c0018cdc:	55                   	push   ebp
c0018cdd:	e8 b6 7b fe ff       	call   c0000898 <strcmp>
c0018ce2:	83 c4 10             	add    esp,0x10
c0018ce5:	85 c0                	test   eax,eax
c0018ce7:	74 e0                	je     c0018cc9 <CPU::detectFeatures()+0x379>
c0018ce9:	56                   	push   esi
c0018cea:	56                   	push   esi
c0018ceb:	68 7c b3 02 c0       	push   0xc002b37c
c0018cf0:	55                   	push   ebp
c0018cf1:	e8 a2 7b fe ff       	call   c0000898 <strcmp>
c0018cf6:	83 c4 10             	add    esp,0x10
c0018cf9:	85 c0                	test   eax,eax
c0018cfb:	74 cc                	je     c0018cc9 <CPU::detectFeatures()+0x379>
c0018cfd:	51                   	push   ecx
c0018cfe:	51                   	push   ecx
c0018cff:	68 89 b3 02 c0       	push   0xc002b389
c0018d04:	55                   	push   ebp
c0018d05:	e8 8e 7b fe ff       	call   c0000898 <strcmp>
c0018d0a:	83 c4 10             	add    esp,0x10
c0018d0d:	85 c0                	test   eax,eax
c0018d0f:	74 b8                	je     c0018cc9 <CPU::detectFeatures()+0x379>
c0018d11:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d1b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d20:	0f 86 be 00 00 00    	jbe    c0018de4 <CPU::detectFeatures()+0x494>
c0018d26:	83 ec 0c             	sub    esp,0xc
c0018d29:	68 80 00 00 00       	push   0x80
c0018d2e:	e8 31 fb ff ff       	call   c0018864 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d33:	83 e0 01             	and    eax,0x1
c0018d36:	c1 e0 06             	shl    eax,0x6
c0018d39:	88 c2                	mov    dl,al
c0018d3b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d41:	83 e0 bf             	and    eax,0xffffffbf
c0018d44:	09 d0                	or     eax,edx
c0018d46:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d4c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d53:	e8 0c fb ff ff       	call   c0018864 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d58:	83 e0 01             	and    eax,0x1
c0018d5b:	c1 e0 04             	shl    eax,0x4
c0018d5e:	88 c2                	mov    dl,al
c0018d60:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d66:	83 e0 ef             	and    eax,0xffffffef
c0018d69:	09 d0                	or     eax,edx
c0018d6b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d71:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018d78:	e8 e7 fa ff ff       	call   c0018864 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d7d:	c1 e0 07             	shl    eax,0x7
c0018d80:	88 c2                	mov    dl,al
c0018d82:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d88:	83 e0 7f             	and    eax,0x7f
c0018d8b:	09 d0                	or     eax,edx
c0018d8d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018d9a:	e8 f3 fa ff ff       	call   c0018892 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018d9f:	83 e0 01             	and    eax,0x1
c0018da2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018da9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018daf:	83 e0 f7             	and    eax,0xfffffff7
c0018db2:	09 d0                	or     eax,edx
c0018db4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018dba:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018dc1:	e8 cc fa ff ff       	call   c0018892 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	83 e0 01             	and    eax,0x1
c0018dcc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018dd3:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018dd9:	83 e0 fb             	and    eax,0xfffffffb
c0018ddc:	09 d0                	or     eax,edx
c0018dde:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018de4:	83 ec 0c             	sub    esp,0xc
c0018de7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018deb:	50                   	push   eax
c0018dec:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018df0:	50                   	push   eax
c0018df1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018df5:	56                   	push   esi
c0018df6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018dfa:	50                   	push   eax
c0018dfb:	6a 01                	push   0x1
c0018dfd:	e8 82 f9 ff ff       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e02:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e06:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e0c:	88 ca                	mov    dl,cl
c0018e0e:	83 e0 f0             	and    eax,0xfffffff0
c0018e11:	83 e2 0f             	and    edx,0xf
c0018e14:	09 d0                	or     eax,edx
c0018e16:	88 ca                	mov    dl,cl
c0018e18:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e1e:	c0 ea 04             	shr    dl,0x4
c0018e21:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e25:	0f b6 c2             	movzx  eax,dl
c0018e28:	83 c4 20             	add    esp,0x20
c0018e2b:	c1 e0 06             	shl    eax,0x6
c0018e2e:	89 c7                	mov    edi,eax
c0018e30:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e36:	66 25 3f c0          	and    ax,0xc03f
c0018e3a:	09 f8                	or     eax,edi
c0018e3c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e43:	89 c8                	mov    eax,ecx
c0018e45:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e4c:	c1 e8 08             	shr    eax,0x8
c0018e4f:	83 e5 3f             	and    ebp,0x3f
c0018e52:	83 e0 0f             	and    eax,0xf
c0018e55:	89 c7                	mov    edi,eax
c0018e57:	c1 e7 06             	shl    edi,0x6
c0018e5a:	09 ef                	or     edi,ebp
c0018e5c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e63:	89 fa                	mov    edx,edi
c0018e65:	83 e5 c0             	and    ebp,0xffffffc0
c0018e68:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018e6e:	88 c2                	mov    dl,al
c0018e70:	c0 ea 02             	shr    dl,0x2
c0018e73:	89 d7                	mov    edi,edx
c0018e75:	09 ef                	or     edi,ebp
c0018e77:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e7d:	89 fa                	mov    edx,edi
c0018e7f:	83 e5 cf             	and    ebp,0xffffffcf
c0018e82:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018e88:	89 cf                	mov    edi,ecx
c0018e8a:	c1 ef 0c             	shr    edi,0xc
c0018e8d:	83 e7 03             	and    edi,0x3
c0018e90:	c1 e7 04             	shl    edi,0x4
c0018e93:	09 ef                	or     edi,ebp
c0018e95:	3c 06                	cmp    al,0x6
c0018e97:	89 fa                	mov    edx,edi
c0018e99:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018e9f:	74 04                	je     c0018ea5 <CPU::detectFeatures()+0x555>
c0018ea1:	3c 0f                	cmp    al,0xf
c0018ea3:	75 5c                	jne    c0018f01 <CPU::detectFeatures()+0x5b1>
c0018ea5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ea9:	89 cf                	mov    edi,ecx
c0018eab:	c1 ef 10             	shr    edi,0x10
c0018eae:	c1 e7 04             	shl    edi,0x4
c0018eb1:	09 fa                	or     edx,edi
c0018eb3:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018eb9:	0f b6 d2             	movzx  edx,dl
c0018ebc:	66 81 e7 3f c0       	and    di,0xc03f
c0018ec1:	c1 e2 06             	shl    edx,0x6
c0018ec4:	09 fa                	or     edx,edi
c0018ec6:	3c 0f                	cmp    al,0xf
c0018ec8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018ecf:	75 30                	jne    c0018f01 <CPU::detectFeatures()+0x5b1>
c0018ed1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018ed7:	c1 e9 14             	shr    ecx,0x14
c0018eda:	83 e0 3f             	and    eax,0x3f
c0018edd:	83 c1 0f             	add    ecx,0xf
c0018ee0:	88 ca                	mov    dl,cl
c0018ee2:	c0 e9 02             	shr    cl,0x2
c0018ee5:	c1 e2 06             	shl    edx,0x6
c0018ee8:	09 d0                	or     eax,edx
c0018eea:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018ef0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018ef6:	83 e0 c0             	and    eax,0xffffffc0
c0018ef9:	09 c1                	or     ecx,eax
c0018efb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f01:	83 ec 0c             	sub    esp,0xc
c0018f04:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f0b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f0f:	50                   	push   eax
c0018f10:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f14:	55                   	push   ebp
c0018f15:	56                   	push   esi
c0018f16:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f1a:	57                   	push   edi
c0018f1b:	68 00 00 00 80       	push   0x80000000
c0018f20:	e8 5f f8 ff ff       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f25:	83 c4 20             	add    esp,0x20
c0018f28:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f30:	76 22                	jbe    c0018f54 <CPU::detectFeatures()+0x604>
c0018f32:	83 ec 0c             	sub    esp,0xc
c0018f35:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f39:	50                   	push   eax
c0018f3a:	55                   	push   ebp
c0018f3b:	56                   	push   esi
c0018f3c:	57                   	push   edi
c0018f3d:	68 01 00 00 80       	push   0x80000001
c0018f42:	e8 3d f8 ff ff       	call   c0018784 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f47:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f51:	83 c4 20             	add    esp,0x20
c0018f54:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f5a:	83 f8 01             	cmp    eax,0x1
c0018f5d:	75 6f                	jne    c0018fce <CPU::detectFeatures()+0x67e>
c0018f5f:	51                   	push   ecx
c0018f60:	51                   	push   ecx
c0018f61:	68 95 b3 02 c0       	push   0xc002b395
c0018f66:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f6a:	56                   	push   esi
c0018f6b:	e8 9c 78 fe ff       	call   c000080c <strcpy>
c0018f70:	5f                   	pop    edi
c0018f71:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f77:	5d                   	pop    ebp
c0018f78:	66 c1 e8 06          	shr    ax,0x6
c0018f7c:	0f b6 c0             	movzx  eax,al
c0018f7f:	50                   	push   eax
c0018f80:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f86:	c1 e8 0e             	shr    eax,0xe
c0018f89:	0f b6 c0             	movzx  eax,al
c0018f8c:	50                   	push   eax
c0018f8d:	e8 9c f4 ff ff       	call   c001842e <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018f92:	5a                   	pop    edx
c0018f93:	59                   	pop    ecx
c0018f94:	50                   	push   eax
c0018f95:	56                   	push   esi
c0018f96:	e8 b1 79 fe ff       	call   c000094c <strcat>
c0018f9b:	5f                   	pop    edi
c0018f9c:	5d                   	pop    ebp
c0018f9d:	56                   	push   esi
c0018f9e:	53                   	push   ebx
c0018f9f:	e8 36 ad ff ff       	call   c0013cda <Device::setName(char const*)>
c0018fa4:	58                   	pop    eax
c0018fa5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fab:	5a                   	pop    edx
c0018fac:	68 9c b3 02 c0       	push   0xc002b39c
c0018fb1:	50                   	push   eax
c0018fb2:	e8 e1 78 fe ff       	call   c0000898 <strcmp>
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	85 c0                	test   eax,eax
c0018fbc:	0f 85 71 03 00 00    	jne    c0019333 <CPU::detectFeatures()+0x9e3>
c0018fc2:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018fc9:	e9 65 03 00 00       	jmp    c0019333 <CPU::detectFeatures()+0x9e3>
c0018fce:	83 f8 02             	cmp    eax,0x2
c0018fd1:	0f 85 b5 00 00 00    	jne    c001908c <CPU::detectFeatures()+0x73c>
c0018fd7:	57                   	push   edi
c0018fd8:	57                   	push   edi
c0018fd9:	68 ae b3 02 c0       	push   0xc002b3ae
c0018fde:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018fe2:	56                   	push   esi
c0018fe3:	e8 24 78 fe ff       	call   c000080c <strcpy>
c0018fe8:	5d                   	pop    ebp
c0018fe9:	58                   	pop    eax
c0018fea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ff0:	66 c1 e8 06          	shr    ax,0x6
c0018ff4:	0f b6 c0             	movzx  eax,al
c0018ff7:	50                   	push   eax
c0018ff8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ffe:	c1 e8 0e             	shr    eax,0xe
c0019001:	0f b6 c0             	movzx  eax,al
c0019004:	50                   	push   eax
c0019005:	e8 90 f2 ff ff       	call   c001829a <CPU::lookupAMDName(unsigned char, unsigned char)>
c001900a:	5a                   	pop    edx
c001900b:	59                   	pop    ecx
c001900c:	50                   	push   eax
c001900d:	56                   	push   esi
c001900e:	e8 39 79 fe ff       	call   c000094c <strcat>
c0019013:	5f                   	pop    edi
c0019014:	5d                   	pop    ebp
c0019015:	56                   	push   esi
c0019016:	53                   	push   ebx
c0019017:	e8 be ac ff ff       	call   c0013cda <Device::setName(char const*)>
c001901c:	58                   	pop    eax
c001901d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019023:	5a                   	pop    edx
c0019024:	68 b3 b3 02 c0       	push   0xc002b3b3
c0019029:	50                   	push   eax
c001902a:	e8 69 78 fe ff       	call   c0000898 <strcmp>
c001902f:	83 c4 10             	add    esp,0x10
c0019032:	85 c0                	test   eax,eax
c0019034:	75 20                	jne    c0019056 <CPU::detectFeatures()+0x706>
c0019036:	8b 15 e8 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8e8
c001903c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019042:	a8 01                	test   al,0x1
c0019044:	74 10                	je     c0019056 <CPU::detectFeatures()+0x706>
c0019046:	83 e0 fe             	and    eax,0xfffffffe
c0019049:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001904f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019056:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001905c:	c1 e8 0e             	shr    eax,0xe
c001905f:	3c 05                	cmp    al,0x5
c0019061:	0f 85 cc 02 00 00    	jne    c0019333 <CPU::detectFeatures()+0x9e3>
c0019067:	56                   	push   esi
c0019068:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001906e:	83 e0 0f             	and    eax,0xf
c0019071:	50                   	push   eax
c0019072:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019078:	66 c1 e8 06          	shr    ax,0x6
c001907c:	0f b6 c0             	movzx  eax,al
c001907f:	50                   	push   eax
c0019080:	6a 05                	push   0x5
c0019082:	e8 89 f6 ff ff       	call   c0018710 <CPU::AMD_K6_writeback(int, int, int)>
c0019087:	e9 1f 02 00 00       	jmp    c00192ab <CPU::detectFeatures()+0x95b>
c001908c:	8d 50 fd             	lea    edx,[eax-0x3]
c001908f:	83 fa 01             	cmp    edx,0x1
c0019092:	76 09                	jbe    c001909d <CPU::detectFeatures()+0x74d>
c0019094:	83 f8 06             	cmp    eax,0x6
c0019097:	0f 85 91 01 00 00    	jne    c001922e <CPU::detectFeatures()+0x8de>
c001909d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190a3:	c1 ea 0e             	shr    edx,0xe
c00190a6:	80 fa 05             	cmp    dl,0x5
c00190a9:	75 7b                	jne    c0019126 <CPU::detectFeatures()+0x7d6>
c00190ab:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190b1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190b6:	66 81 fa 00 01       	cmp    dx,0x100
c00190bb:	75 0c                	jne    c00190c9 <CPU::detectFeatures()+0x779>
c00190bd:	51                   	push   ecx
c00190be:	51                   	push   ecx
c00190bf:	68 ba b3 02 c0       	push   0xc002b3ba
c00190c4:	e9 dc 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c00190c9:	66 81 fa 00 02       	cmp    dx,0x200
c00190ce:	75 0c                	jne    c00190dc <CPU::detectFeatures()+0x78c>
c00190d0:	52                   	push   edx
c00190d1:	52                   	push   edx
c00190d2:	68 cd b3 02 c0       	push   0xc002b3cd
c00190d7:	e9 c9 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c00190dc:	66 81 fa 40 02       	cmp    dx,0x240
c00190e1:	75 0c                	jne    c00190ef <CPU::detectFeatures()+0x79f>
c00190e3:	50                   	push   eax
c00190e4:	50                   	push   eax
c00190e5:	68 df b3 02 c0       	push   0xc002b3df
c00190ea:	e9 b6 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c00190ef:	83 f8 06             	cmp    eax,0x6
c00190f2:	75 0c                	jne    c0019100 <CPU::detectFeatures()+0x7b0>
c00190f4:	50                   	push   eax
c00190f5:	50                   	push   eax
c00190f6:	68 f1 b3 02 c0       	push   0xc002b3f1
c00190fb:	e9 a5 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019100:	83 f8 04             	cmp    eax,0x4
c0019103:	75 0c                	jne    c0019111 <CPU::detectFeatures()+0x7c1>
c0019105:	50                   	push   eax
c0019106:	50                   	push   eax
c0019107:	68 fd b3 02 c0       	push   0xc002b3fd
c001910c:	e9 94 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019111:	83 f8 03             	cmp    eax,0x3
c0019114:	0f 85 19 02 00 00    	jne    c0019333 <CPU::detectFeatures()+0x9e3>
c001911a:	50                   	push   eax
c001911b:	50                   	push   eax
c001911c:	68 05 b4 02 c0       	push   0xc002b405
c0019121:	e9 7f 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019126:	80 fa 06             	cmp    dl,0x6
c0019129:	0f 85 db 00 00 00    	jne    c001920a <CPU::detectFeatures()+0x8ba>
c001912f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019135:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001913a:	66 81 fa 80 01       	cmp    dx,0x180
c001913f:	75 0c                	jne    c001914d <CPU::detectFeatures()+0x7fd>
c0019141:	50                   	push   eax
c0019142:	50                   	push   eax
c0019143:	68 10 b4 02 c0       	push   0xc002b410
c0019148:	e9 58 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c001914d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019153:	66 f7 c1 80 ff       	test   cx,0xff80
c0019158:	75 0c                	jne    c0019166 <CPU::detectFeatures()+0x816>
c001915a:	50                   	push   eax
c001915b:	50                   	push   eax
c001915c:	68 20 b4 02 c0       	push   0xc002b420
c0019161:	e9 3f 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019166:	66 81 fa 40 02       	cmp    dx,0x240
c001916b:	75 0c                	jne    c0019179 <CPU::detectFeatures()+0x829>
c001916d:	55                   	push   ebp
c001916e:	55                   	push   ebp
c001916f:	68 27 b4 02 c0       	push   0xc002b427
c0019174:	e9 2c 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019179:	66 81 fa 80 02       	cmp    dx,0x280
c001917e:	75 0c                	jne    c001918c <CPU::detectFeatures()+0x83c>
c0019180:	57                   	push   edi
c0019181:	57                   	push   edi
c0019182:	68 30 b4 02 c0       	push   0xc002b430
c0019187:	e9 19 01 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c001918c:	66 81 fa 40 03       	cmp    dx,0x340
c0019191:	74 ed                	je     c0019180 <CPU::detectFeatures()+0x830>
c0019193:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019198:	75 0c                	jne    c00191a6 <CPU::detectFeatures()+0x856>
c001919a:	56                   	push   esi
c001919b:	56                   	push   esi
c001919c:	68 37 b4 02 c0       	push   0xc002b437
c00191a1:	e9 ff 00 00 00       	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c00191a6:	83 f8 06             	cmp    eax,0x6
c00191a9:	0f 84 45 ff ff ff    	je     c00190f4 <CPU::detectFeatures()+0x7a4>
c00191af:	83 f8 04             	cmp    eax,0x4
c00191b2:	0f 84 4d ff ff ff    	je     c0019105 <CPU::detectFeatures()+0x7b5>
c00191b8:	83 f8 03             	cmp    eax,0x3
c00191bb:	0f 85 72 01 00 00    	jne    c0019333 <CPU::detectFeatures()+0x9e3>
c00191c1:	51                   	push   ecx
c00191c2:	51                   	push   ecx
c00191c3:	68 40 b4 02 c0       	push   0xc002b440
c00191c8:	53                   	push   ebx
c00191c9:	e8 0c ab ff ff       	call   c0013cda <Device::setName(char const*)>
c00191ce:	b1 c1                	mov    cl,0xc1
c00191d0:	88 c8                	mov    al,cl
c00191d2:	e6 22                	out    0x22,al
c00191d4:	e4 23                	in     al,0x23
c00191d6:	88 c2                	mov    dl,al
c00191d8:	88 c8                	mov    al,cl
c00191da:	e6 22                	out    0x22,al
c00191dc:	88 d0                	mov    al,dl
c00191de:	83 c8 10             	or     eax,0x10
c00191e1:	e6 23                	out    0x23,al
c00191e3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00191ea:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00191ed:	89 d0                	mov    eax,edx
c00191ef:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00191f5:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00191f9:	40                   	inc    eax
c00191fa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019200:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019205:	e9 a1 00 00 00       	jmp    c00192ab <CPU::detectFeatures()+0x95b>
c001920a:	83 f8 06             	cmp    eax,0x6
c001920d:	0f 84 e1 fe ff ff    	je     c00190f4 <CPU::detectFeatures()+0x7a4>
c0019213:	83 f8 04             	cmp    eax,0x4
c0019216:	0f 84 e9 fe ff ff    	je     c0019105 <CPU::detectFeatures()+0x7b5>
c001921c:	83 f8 03             	cmp    eax,0x3
c001921f:	0f 85 0e 01 00 00    	jne    c0019333 <CPU::detectFeatures()+0x9e3>
c0019225:	52                   	push   edx
c0019226:	52                   	push   edx
c0019227:	68 4b b4 02 c0       	push   0xc002b44b
c001922c:	eb 77                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c001922e:	83 f8 07             	cmp    eax,0x7
c0019231:	75 09                	jne    c001923c <CPU::detectFeatures()+0x8ec>
c0019233:	50                   	push   eax
c0019234:	50                   	push   eax
c0019235:	68 55 b4 02 c0       	push   0xc002b455
c001923a:	eb 69                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c001923c:	83 f8 0a             	cmp    eax,0xa
c001923f:	75 09                	jne    c001924a <CPU::detectFeatures()+0x8fa>
c0019241:	50                   	push   eax
c0019242:	50                   	push   eax
c0019243:	68 60 b4 02 c0       	push   0xc002b460
c0019248:	eb 5b                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c001924a:	83 f8 0b             	cmp    eax,0xb
c001924d:	75 09                	jne    c0019258 <CPU::detectFeatures()+0x908>
c001924f:	50                   	push   eax
c0019250:	50                   	push   eax
c0019251:	68 68 b4 02 c0       	push   0xc002b468
c0019256:	eb 4d                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019258:	83 f8 08             	cmp    eax,0x8
c001925b:	75 09                	jne    c0019266 <CPU::detectFeatures()+0x916>
c001925d:	50                   	push   eax
c001925e:	50                   	push   eax
c001925f:	68 71 b4 02 c0       	push   0xc002b471
c0019264:	eb 3f                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019266:	83 f8 09             	cmp    eax,0x9
c0019269:	75 09                	jne    c0019274 <CPU::detectFeatures()+0x924>
c001926b:	50                   	push   eax
c001926c:	50                   	push   eax
c001926d:	68 79 b4 02 c0       	push   0xc002b479
c0019272:	eb 31                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019274:	83 f8 05             	cmp    eax,0x5
c0019277:	75 09                	jne    c0019282 <CPU::detectFeatures()+0x932>
c0019279:	50                   	push   eax
c001927a:	50                   	push   eax
c001927b:	68 81 b4 02 c0       	push   0xc002b481
c0019280:	eb 23                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019282:	83 f8 0c             	cmp    eax,0xc
c0019285:	75 09                	jne    c0019290 <CPU::detectFeatures()+0x940>
c0019287:	55                   	push   ebp
c0019288:	55                   	push   ebp
c0019289:	68 8f b4 02 c0       	push   0xc002b48f
c001928e:	eb 15                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c0019290:	83 f8 0d             	cmp    eax,0xd
c0019293:	75 09                	jne    c001929e <CPU::detectFeatures()+0x94e>
c0019295:	57                   	push   edi
c0019296:	57                   	push   edi
c0019297:	68 9a b4 02 c0       	push   0xc002b49a
c001929c:	eb 07                	jmp    c00192a5 <CPU::detectFeatures()+0x955>
c001929e:	56                   	push   esi
c001929f:	56                   	push   esi
c00192a0:	68 ae b4 02 c0       	push   0xc002b4ae
c00192a5:	53                   	push   ebx
c00192a6:	e8 2f aa ff ff       	call   c0013cda <Device::setName(char const*)>
c00192ab:	83 c4 10             	add    esp,0x10
c00192ae:	e9 80 00 00 00       	jmp    c0019333 <CPU::detectFeatures()+0x9e3>
c00192b3:	51                   	push   ecx
c00192b4:	51                   	push   ecx
c00192b5:	68 fa b2 02 c0       	push   0xc002b2fa
c00192ba:	55                   	push   ebp
c00192bb:	e8 4c 75 fe ff       	call   c000080c <strcpy>
c00192c0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192ca:	e8 df 6f fe ff       	call   c00002ae <is486>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	85 c0                	test   eax,eax
c00192d4:	74 2b                	je     c0019301 <CPU::detectFeatures()+0x9b1>
c00192d6:	52                   	push   edx
c00192d7:	52                   	push   edx
c00192d8:	68 ba b4 02 c0       	push   0xc002b4ba
c00192dd:	53                   	push   ebx
c00192de:	e8 f7 a9 ff ff       	call   c0013cda <Device::setName(char const*)>
c00192e3:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00192ea:	0f 20 c0             	mov    eax,cr0
c00192ed:	83 e0 14             	and    eax,0x14
c00192f0:	83 c4 10             	add    esp,0x10
c00192f3:	83 f8 04             	cmp    eax,0x4
c00192f6:	75 1f                	jne    c0019317 <CPU::detectFeatures()+0x9c7>
c00192f8:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00192ff:	eb 32                	jmp    c0019333 <CPU::detectFeatures()+0x9e3>
c0019301:	50                   	push   eax
c0019302:	50                   	push   eax
c0019303:	68 c5 b4 02 c0       	push   0xc002b4c5
c0019308:	53                   	push   ebx
c0019309:	e8 cc a9 ff ff       	call   c0013cda <Device::setName(char const*)>
c001930e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019315:	eb d3                	jmp    c00192ea <CPU::detectFeatures()+0x99a>
c0019317:	e8 6d 6f fe ff       	call   c0000289 <hasLegacyFPU>
c001931c:	83 e0 01             	and    eax,0x1
c001931f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019322:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019328:	83 e0 fd             	and    eax,0xfffffffd
c001932b:	09 d0                	or     eax,edx
c001932d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019333:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001933a:	83 c4 4c             	add    esp,0x4c
c001933d:	5b                   	pop    ebx
c001933e:	5e                   	pop    esi
c001933f:	5f                   	pop    edi
c0019340:	5d                   	pop    ebp
c0019341:	c3                   	ret    

c0019342 <CPU::setupSMEP()>:
c0019342:	0f 20 e0             	mov    eax,cr4
c0019345:	0d 00 00 10 00       	or     eax,0x100000
c001934a:	0f 22 e0             	mov    cr4,eax
c001934d:	c3                   	ret    

c001934e <CPU::setupUMIP()>:
c001934e:	0f 20 e0             	mov    eax,cr4
c0019351:	80 cc 08             	or     ah,0x8
c0019354:	0f 22 e0             	mov    cr4,eax
c0019357:	c3                   	ret    

c0019358 <CPU::setupTSC()>:
c0019358:	0f 20 e0             	mov    eax,cr4
c001935b:	83 c8 04             	or     eax,0x4
c001935e:	0f 22 e0             	mov    cr4,eax
c0019361:	c3                   	ret    

c0019362 <CPU::setupLargePages()>:
c0019362:	0f 20 e0             	mov    eax,cr4
c0019365:	83 c8 10             	or     eax,0x10
c0019368:	0f 22 e0             	mov    cr4,eax
c001936b:	c3                   	ret    

c001936c <CPU::setupPAT()>:
c001936c:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0019371:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019378:	74 2c                	je     c00193a6 <CPU::setupPAT()+0x3a>
c001937a:	53                   	push   ebx
c001937b:	83 ec 10             	sub    esp,0x10
c001937e:	68 77 02 00 00       	push   0x277
c0019383:	50                   	push   eax
c0019384:	e8 b7 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019389:	83 e2 f8             	and    edx,0xfffffff8
c001938c:	83 ca 01             	or     edx,0x1
c001938f:	52                   	push   edx
c0019390:	50                   	push   eax
c0019391:	68 77 02 00 00       	push   0x277
c0019396:	ff 35 e8 d8 02 c0    	push   DWORD PTR ds:0xc002d8e8
c001939c:	e8 cb 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193a1:	83 c4 28             	add    esp,0x28
c00193a4:	5b                   	pop    ebx
c00193a5:	c3                   	ret    
c00193a6:	c3                   	ret    
c00193a7:	90                   	nop

c00193a8 <CPU::setupMTRR()>:
c00193a8:	c3                   	ret    
c00193a9:	90                   	nop

c00193aa <CPU::setupGlobalPages()>:
c00193aa:	0f 20 e0             	mov    eax,cr4
c00193ad:	0c 80                	or     al,0x80
c00193af:	0f 22 e0             	mov    cr4,eax
c00193b2:	c3                   	ret    
c00193b3:	90                   	nop

c00193b4 <CPU::allowUsermodeDataAccess()>:
c00193b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193b8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193bf:	74 03                	je     c00193c4 <CPU::allowUsermodeDataAccess()+0x10>
c00193c1:	0f 01 cb             	stac   
c00193c4:	c3                   	ret    
c00193c5:	90                   	nop

c00193c6 <CPU::prohibitUsermodeDataAccess()>:
c00193c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193ca:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193d1:	74 03                	je     c00193d6 <CPU::prohibitUsermodeDataAccess()+0x10>
c00193d3:	0f 01 ca             	clac   
c00193d6:	c3                   	ret    
c00193d7:	90                   	nop

c00193d8 <CPU::setupSMAP()>:
c00193d8:	0f 20 e0             	mov    eax,cr4
c00193db:	0d 00 00 20 00       	or     eax,0x200000
c00193e0:	0f 22 e0             	mov    cr4,eax
c00193e3:	eb e1                	jmp    c00193c6 <CPU::prohibitUsermodeDataAccess()>
c00193e5:	90                   	nop

c00193e6 <CPU::setupFeatures()>:
c00193e6:	83 ec 0c             	sub    esp,0xc
c00193e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00193ed:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00193f4:	74 07                	je     c00193fd <CPU::setupFeatures()+0x17>
c00193f6:	52                   	push   edx
c00193f7:	e8 46 ff ff ff       	call   c0019342 <CPU::setupSMEP()>
c00193fc:	58                   	pop    eax
c00193fd:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019404:	74 07                	je     c001940d <CPU::setupFeatures()+0x27>
c0019406:	52                   	push   edx
c0019407:	e8 cc ff ff ff       	call   c00193d8 <CPU::setupSMAP()>
c001940c:	58                   	pop    eax
c001940d:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019414:	74 07                	je     c001941d <CPU::setupFeatures()+0x37>
c0019416:	52                   	push   edx
c0019417:	e8 32 ff ff ff       	call   c001934e <CPU::setupUMIP()>
c001941c:	58                   	pop    eax
c001941d:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019424:	74 07                	je     c001942d <CPU::setupFeatures()+0x47>
c0019426:	52                   	push   edx
c0019427:	e8 2c ff ff ff       	call   c0019358 <CPU::setupTSC()>
c001942c:	58                   	pop    eax
c001942d:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019434:	74 07                	je     c001943d <CPU::setupFeatures()+0x57>
c0019436:	52                   	push   edx
c0019437:	e8 26 ff ff ff       	call   c0019362 <CPU::setupLargePages()>
c001943c:	59                   	pop    ecx
c001943d:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019444:	74 07                	je     c001944d <CPU::setupFeatures()+0x67>
c0019446:	52                   	push   edx
c0019447:	e8 5e ff ff ff       	call   c00193aa <CPU::setupGlobalPages()>
c001944c:	58                   	pop    eax
c001944d:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019454:	74 0c                	je     c0019462 <CPU::setupFeatures()+0x7c>
c0019456:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001945a:	83 c4 0c             	add    esp,0xc
c001945d:	e9 0a ff ff ff       	jmp    c001936c <CPU::setupPAT()>
c0019462:	83 c4 0c             	add    esp,0xc
c0019465:	c3                   	ret    

c0019466 <CPU::open(int, int, void*)>:
c0019466:	57                   	push   edi
c0019467:	56                   	push   esi
c0019468:	53                   	push   ebx
c0019469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001946d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019471:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019477:	83 ec 0c             	sub    esp,0xc
c001947a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019480:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019486:	50                   	push   eax
c0019487:	e8 a2 59 ff ff       	call   c000ee2e <GDT::setup()>
c001948c:	83 c4 0c             	add    esp,0xc
c001948f:	6a 00                	push   0x0
c0019491:	68 ef be ad de       	push   0xdeadbeef
c0019496:	57                   	push   edi
c0019497:	e8 ea 76 ff ff       	call   c0010b86 <TSS::setup(unsigned long, unsigned long)>
c001949c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001949f:	e8 c2 76 ff ff       	call   c0010b66 <TSS::flush()>
c00194a4:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00194ad:	e8 e0 5b ff ff       	call   c000f092 <IDT::setup()>
c00194b2:	b8 00 04 00 00       	mov    eax,0x400
c00194b7:	0f 23 f8             	mov    db7,eax
c00194ba:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00194c4:	e8 a8 64 ff ff       	call   c000f971 <Phys::allocatePage()>
c00194c9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00194cf:	89 30                	mov    DWORD PTR [eax],esi
c00194d1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00194d7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00194da:	58                   	pop    eax
c00194db:	5a                   	pop    edx
c00194dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194e6:	e8 ab 87 ff ff       	call   c0011c96 <VAS::setCPUSpecific(unsigned long)>
c00194eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00194ee:	e8 5d f4 ff ff       	call   c0018950 <CPU::detectFeatures()>
c00194f3:	e8 35 bc ff ff       	call   c001512d <setupInterruptController()>
c00194f8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00194fe:	a1 00 d9 02 c0       	mov    eax,ds:0xc002d900
c0019503:	83 e0 10             	and    eax,0x10
c0019506:	83 f8 01             	cmp    eax,0x1
c0019509:	19 c0                	sbb    eax,eax
c001950b:	83 e0 46             	and    eax,0x46
c001950e:	83 c0 1e             	add    eax,0x1e
c0019511:	89 04 24             	mov    DWORD PTR [esp],eax
c0019514:	e8 02 d2 ff ff       	call   c001671b <setupTimer(int)>
c0019519:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001951f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019522:	e8 bf fe ff ff       	call   c00193e6 <CPU::setupFeatures()>
c0019527:	83 c4 10             	add    esp,0x10
c001952a:	31 c0                	xor    eax,eax
c001952c:	5b                   	pop    ebx
c001952d:	5e                   	pop    esi
c001952e:	5f                   	pop    edi
c001952f:	c3                   	ret    

c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019530:	57                   	push   edi
c0019531:	56                   	push   esi
c0019532:	53                   	push   ebx
c0019533:	51                   	push   ecx
c0019534:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019538:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001953b:	0f 02 c0             	lar    eax,ax
c001953e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019541:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019545:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019548:	88 ca                	mov    dl,cl
c001954a:	c0 ea 06             	shr    dl,0x6
c001954d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019551:	89 ca                	mov    edx,ecx
c0019553:	66 c1 ea 03          	shr    dx,0x3
c0019557:	83 e2 07             	and    edx,0x7
c001955a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001955f:	88 17                	mov    BYTE PTR [edi],dl
c0019561:	0f 84 a6 01 00 00    	je     c001970d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019567:	83 e1 07             	and    ecx,0x7
c001956a:	80 f9 04             	cmp    cl,0x4
c001956d:	0f 84 98 00 00 00    	je     c001960b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019573:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019578:	0f 95 c0             	setne  al
c001957b:	80 f9 05             	cmp    cl,0x5
c001957e:	0f 95 c2             	setne  dl
c0019581:	08 c2                	or     dl,al
c0019583:	74 79                	je     c00195fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019585:	84 c9                	test   cl,cl
c0019587:	75 05                	jne    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019589:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001958c:	eb 3c                	jmp    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001958e:	80 f9 01             	cmp    cl,0x1
c0019591:	75 05                	jne    c0019598 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019593:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019596:	eb 32                	jmp    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019598:	80 f9 02             	cmp    cl,0x2
c001959b:	75 05                	jne    c00195a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001959d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195a0:	eb 28                	jmp    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195a2:	31 c0                	xor    eax,eax
c00195a4:	80 f9 03             	cmp    cl,0x3
c00195a7:	75 05                	jne    c00195ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00195a9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195ac:	eb 1c                	jmp    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195ae:	80 f9 05             	cmp    cl,0x5
c00195b1:	75 05                	jne    c00195b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195b3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195b6:	eb 12                	jmp    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195b8:	80 f9 06             	cmp    cl,0x6
c00195bb:	75 05                	jne    c00195c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00195bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195c0:	eb 08                	jmp    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195c2:	80 f9 07             	cmp    cl,0x7
c00195c5:	75 03                	jne    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195c7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195ca:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195cf:	75 10                	jne    c00195e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00195d1:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00195d5:	b9 03 00 00 00       	mov    ecx,0x3
c00195da:	01 d0                	add    eax,edx
c00195dc:	e9 37 01 00 00       	jmp    c0019718 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195e1:	b9 02 00 00 00       	mov    ecx,0x2
c00195e6:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00195eb:	0f 85 27 01 00 00    	jne    c0019718 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195f1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00195f4:	b9 06 00 00 00       	mov    ecx,0x6
c00195f9:	e9 1a 01 00 00       	jmp    c0019718 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195fe:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019601:	b9 06 00 00 00       	mov    ecx,0x6
c0019606:	e9 0f 01 00 00       	jmp    c001971a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001960b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001960e:	88 ca                	mov    dl,cl
c0019610:	c0 ea 06             	shr    dl,0x6
c0019613:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019617:	89 ca                	mov    edx,ecx
c0019619:	66 c1 ea 03          	shr    dx,0x3
c001961d:	83 e2 07             	and    edx,0x7
c0019620:	80 e1 07             	and    cl,0x7
c0019623:	75 05                	jne    c001962a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019625:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019628:	eb 4c                	jmp    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001962a:	80 f9 01             	cmp    cl,0x1
c001962d:	75 05                	jne    c0019634 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001962f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019632:	eb 42                	jmp    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019634:	80 f9 02             	cmp    cl,0x2
c0019637:	75 05                	jne    c001963e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019639:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001963c:	eb 38                	jmp    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001963e:	80 f9 03             	cmp    cl,0x3
c0019641:	75 05                	jne    c0019648 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019643:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019646:	eb 2e                	jmp    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019648:	80 f9 04             	cmp    cl,0x4
c001964b:	75 12                	jne    c001965f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001964d:	f6 c4 60             	test   ah,0x60
c0019650:	75 08                	jne    c001965a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019652:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019655:	8d 78 14             	lea    edi,[eax+0x14]
c0019658:	eb 1c                	jmp    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001965a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001965d:	eb 17                	jmp    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001965f:	80 f9 05             	cmp    cl,0x5
c0019662:	75 05                	jne    c0019669 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019664:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019667:	eb 0d                	jmp    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019669:	80 f9 06             	cmp    cl,0x6
c001966c:	75 05                	jne    c0019673 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001966e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019671:	eb 03                	jmp    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019673:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019676:	84 d2                	test   dl,dl
c0019678:	75 05                	jne    c001967f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001967a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001967d:	eb 3c                	jmp    c00196bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001967f:	80 fa 01             	cmp    dl,0x1
c0019682:	75 05                	jne    c0019689 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019684:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019687:	eb 32                	jmp    c00196bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019689:	80 fa 02             	cmp    dl,0x2
c001968c:	75 05                	jne    c0019693 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001968e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019691:	eb 28                	jmp    c00196bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019693:	80 fa 03             	cmp    dl,0x3
c0019696:	75 05                	jne    c001969d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019698:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001969b:	eb 1e                	jmp    c00196bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001969d:	31 c0                	xor    eax,eax
c001969f:	80 fa 04             	cmp    dl,0x4
c00196a2:	74 17                	je     c00196bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196a4:	80 fa 05             	cmp    dl,0x5
c00196a7:	75 05                	jne    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00196a9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196ac:	eb 0d                	jmp    c00196bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196ae:	80 fa 06             	cmp    dl,0x6
c00196b1:	75 05                	jne    c00196b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196b3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196b6:	eb 03                	jmp    c00196bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196b8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196bb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196c0:	0f 94 c2             	sete   dl
c00196c3:	80 f9 05             	cmp    cl,0x5
c00196c6:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00196ca:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00196cf:	d3 e0                	shl    eax,cl
c00196d1:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00196d5:	74 0a                	je     c00196e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00196d7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196da:	b9 07 00 00 00       	mov    ecx,0x7
c00196df:	eb 37                	jmp    c0019718 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196e1:	01 f8                	add    eax,edi
c00196e3:	b9 03 00 00 00       	mov    ecx,0x3
c00196e8:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196ed:	74 2b                	je     c001971a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196ef:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00196f4:	75 0d                	jne    c0019703 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00196f6:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00196fa:	01 c8                	add    eax,ecx
c00196fc:	b9 04 00 00 00       	mov    ecx,0x4
c0019701:	eb 17                	jmp    c001971a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019703:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019706:	b9 07 00 00 00       	mov    ecx,0x7
c001970b:	eb 0d                	jmp    c001971a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001970d:	b9 02 00 00 00       	mov    ecx,0x2
c0019712:	b2 01                	mov    dl,0x1
c0019714:	31 c0                	xor    eax,eax
c0019716:	eb 02                	jmp    c001971a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019718:	31 d2                	xor    edx,edx
c001971a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001971e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019720:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019724:	88 11                	mov    BYTE PTR [ecx],dl
c0019726:	5a                   	pop    edx
c0019727:	5b                   	pop    ebx
c0019728:	5e                   	pop    esi
c0019729:	5f                   	pop    edi
c001972a:	c3                   	ret    

c001972b <Krnl::smpEntry()>:
c001972b:	eb fe                	jmp    c001972b <Krnl::smpEntry()>

c001972d <Krnl::startCPU(int)>:
c001972d:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0019732:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019739:	0f 84 36 01 00 00    	je     c0019875 <Krnl::startCPU(int)+0x148>
c001973f:	53                   	push   ebx
c0019740:	83 ec 10             	sub    esp,0x10
c0019743:	fa                   	cli    
c0019744:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001974a:	6a 1b                	push   0x1b
c001974c:	ff 35 e8 d8 02 c0    	push   DWORD PTR ds:0xc002d8e8
c0019752:	e8 e9 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019757:	25 00 f0 ff ff       	and    eax,0xfffff000
c001975c:	89 c3                	mov    ebx,eax
c001975e:	58                   	pop    eax
c001975f:	5a                   	pop    edx
c0019760:	53                   	push   ebx
c0019761:	68 fc b4 02 c0       	push   0xc002b4fc
c0019766:	e8 40 8f ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001976b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019779:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019783:	c1 e0 18             	shl    eax,0x18
c0019786:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001978c:	83 c4 10             	add    esp,0x10
c001978f:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019795:	09 c2                	or     edx,eax
c0019797:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001979d:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197a3:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197a9:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197af:	80 cd c5             	or     ch,0xc5
c00197b2:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197b8:	f3 90                	pause  
c00197ba:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197bc:	0f ba e1 0c          	bt     ecx,0xc
c00197c0:	72 f6                	jb     c00197b8 <Krnl::startCPU(int)+0x8b>
c00197c2:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197c8:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00197ce:	09 c1                	or     ecx,eax
c00197d0:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00197d6:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197dc:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197e2:	80 cd 85             	or     ch,0x85
c00197e5:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197eb:	f3 90                	pause  
c00197ed:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197ef:	0f ba e1 0c          	bt     ecx,0xc
c00197f3:	72 f6                	jb     c00197eb <Krnl::startCPU(int)+0xbe>
c00197f5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00197ff:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019805:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001980b:	09 c1                	or     ecx,eax
c001980d:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019813:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019819:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001981f:	81 c9 02 06 00 00    	or     ecx,0x602
c0019825:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001982b:	f3 90                	pause  
c001982d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001982f:	0f ba e1 0c          	bt     ecx,0xc
c0019833:	72 f6                	jb     c001982b <Krnl::startCPU(int)+0xfe>
c0019835:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001983f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019845:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001984b:	09 c8                	or     eax,ecx
c001984d:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019853:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019859:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001985e:	0d 02 06 00 00       	or     eax,0x602
c0019863:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019869:	f3 90                	pause  
c001986b:	8b 02                	mov    eax,DWORD PTR [edx]
c001986d:	0f ba e0 0c          	bt     eax,0xc
c0019871:	72 f6                	jb     c0019869 <Krnl::startCPU(int)+0x13c>
c0019873:	eb fe                	jmp    c0019873 <Krnl::startCPU(int)+0x146>
c0019875:	c3                   	ret    

c0019876 <Krnl::startCPUs()>:
c0019876:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001987b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019881:	88 c2                	mov    dl,al
c0019883:	83 e2 0a             	and    edx,0xa
c0019886:	80 fa 0a             	cmp    dl,0xa
c0019889:	75 09                	jne    c0019894 <Krnl::startCPUs()+0x1e>
c001988b:	a8 01                	test   al,0x1
c001988d:	74 05                	je     c0019894 <Krnl::startCPUs()+0x1e>
c001988f:	e9 07 69 fe ff       	jmp    c000019b <prepareTramp>
c0019894:	c3                   	ret    
c0019895:	90                   	nop

c0019896 <EnvVarContainer::getEnv(char const*)>:
c0019896:	57                   	push   edi
c0019897:	56                   	push   esi
c0019898:	53                   	push   ebx
c0019899:	31 db                	xor    ebx,ebx
c001989b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001989f:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198a1:	7e 2b                	jle    c00198ce <EnvVarContainer::getEnv(char const*)+0x38>
c00198a3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198aa:	50                   	push   eax
c00198ab:	50                   	push   eax
c00198ac:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198af:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198b6:	e8 dd 6f fe ff       	call   c0000898 <strcmp>
c00198bb:	83 c4 10             	add    esp,0x10
c00198be:	85 c0                	test   eax,eax
c00198c0:	75 09                	jne    c00198cb <EnvVarContainer::getEnv(char const*)+0x35>
c00198c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198c5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198c9:	eb 05                	jmp    c00198d0 <EnvVarContainer::getEnv(char const*)+0x3a>
c00198cb:	43                   	inc    ebx
c00198cc:	eb d1                	jmp    c001989f <EnvVarContainer::getEnv(char const*)+0x9>
c00198ce:	31 c0                	xor    eax,eax
c00198d0:	5b                   	pop    ebx
c00198d1:	5e                   	pop    esi
c00198d2:	5f                   	pop    edi
c00198d3:	c3                   	ret    

c00198d4 <EnvVarContainer::setEnv(char const*, char const*)>:
c00198d4:	55                   	push   ebp
c00198d5:	57                   	push   edi
c00198d6:	56                   	push   esi
c00198d7:	53                   	push   ebx
c00198d8:	83 ec 28             	sub    esp,0x28
c00198db:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00198df:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00198e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00198e7:	56                   	push   esi
c00198e8:	e8 7f 6e fe ff       	call   c000076c <strlen>
c00198ed:	40                   	inc    eax
c00198ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00198f1:	e8 a3 5c ff ff       	call   c000f599 <malloc>
c00198f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00198fd:	e8 6a 6e fe ff       	call   c000076c <strlen>
c0019902:	40                   	inc    eax
c0019903:	89 04 24             	mov    DWORD PTR [esp],eax
c0019906:	e8 8e 5c ff ff       	call   c000f599 <malloc>
c001990b:	89 34 24             	mov    DWORD PTR [esp],esi
c001990e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019912:	e8 55 6e fe ff       	call   c000076c <strlen>
c0019917:	83 c4 0c             	add    esp,0xc
c001991a:	40                   	inc    eax
c001991b:	50                   	push   eax
c001991c:	6a 00                	push   0x0
c001991e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019922:	e8 29 6e fe ff       	call   c0000750 <memset>
c0019927:	89 34 24             	mov    DWORD PTR [esp],esi
c001992a:	e8 3d 6e fe ff       	call   c000076c <strlen>
c001992f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019933:	8d 48 01             	lea    ecx,[eax+0x1]
c0019936:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019938:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001993b:	89 de                	mov    esi,ebx
c001993d:	e8 2a 6e fe ff       	call   c000076c <strlen>
c0019942:	83 c4 0c             	add    esp,0xc
c0019945:	40                   	inc    eax
c0019946:	50                   	push   eax
c0019947:	6a 00                	push   0x0
c0019949:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001994d:	e8 fe 6d fe ff       	call   c0000750 <memset>
c0019952:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019955:	e8 12 6e fe ff       	call   c000076c <strlen>
c001995a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001995e:	8d 48 01             	lea    ecx,[eax+0x1]
c0019961:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019963:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019966:	40                   	inc    eax
c0019967:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001996a:	c1 e0 03             	shl    eax,0x3
c001996d:	5a                   	pop    edx
c001996e:	59                   	pop    ecx
c001996f:	50                   	push   eax
c0019970:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019973:	e8 0d 5c ff ff       	call   c000f585 <realloc>
c0019978:	8d 74 24 18          	lea    esi,[esp+0x18]
c001997c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001997f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019982:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019986:	b9 08 00 00 00       	mov    ecx,0x8
c001998b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001998d:	83 c4 2c             	add    esp,0x2c
c0019990:	5b                   	pop    ebx
c0019991:	5e                   	pop    esi
c0019992:	5f                   	pop    edi
c0019993:	5d                   	pop    ebp
c0019994:	c3                   	ret    
c0019995:	90                   	nop

c0019996 <EnvVarContainer::deleteEnv(char const*)>:
c0019996:	c3                   	ret    
c0019997:	90                   	nop

c0019998 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019998:	55                   	push   ebp
c0019999:	57                   	push   edi
c001999a:	56                   	push   esi
c001999b:	53                   	push   ebx
c001999c:	81 ec 38 01 00 00    	sub    esp,0x138
c00199a2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00199a9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199b0:	68 14 01 00 00       	push   0x114
c00199b5:	e8 df 5b ff ff       	call   c000f599 <malloc>
c00199ba:	83 c4 0c             	add    esp,0xc
c00199bd:	89 c3                	mov    ebx,eax
c00199bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00199c2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199c9:	50                   	push   eax
c00199ca:	e8 3b 92 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c00199cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199d2:	e8 05 95 ff ff       	call   c0012edc <File::exists()>
c00199d7:	83 c4 10             	add    esp,0x10
c00199da:	84 c0                	test   al,al
c00199dc:	75 31                	jne    c0019a0f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00199de:	50                   	push   eax
c00199df:	50                   	push   eax
c00199e0:	6a 12                	push   0x12
c00199e2:	53                   	push   ebx
c00199e3:	e8 86 92 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c00199e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199ea:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00199ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00199f0:	e8 77 6d fe ff       	call   c000076c <strlen>
c00199f5:	5a                   	pop    edx
c00199f6:	31 d2                	xor    edx,edx
c00199f8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00199fc:	51                   	push   ecx
c00199fd:	56                   	push   esi
c00199fe:	52                   	push   edx
c00199ff:	50                   	push   eax
c0019a00:	53                   	push   ebx
c0019a01:	ff d7                	call   edi
c0019a03:	83 c4 14             	add    esp,0x14
c0019a06:	53                   	push   ebx
c0019a07:	e8 c0 92 ff ff       	call   c0012ccc <File::close()>
c0019a0c:	83 c4 10             	add    esp,0x10
c0019a0f:	56                   	push   esi
c0019a10:	31 f6                	xor    esi,esi
c0019a12:	68 00 01 00 00       	push   0x100
c0019a17:	6a 00                	push   0x0
c0019a19:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a1d:	50                   	push   eax
c0019a1e:	e8 2d 6d fe ff       	call   c0000750 <memset>
c0019a23:	5f                   	pop    edi
c0019a24:	58                   	pop    eax
c0019a25:	6a 01                	push   0x1
c0019a27:	53                   	push   ebx
c0019a28:	e8 41 92 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c0019a2d:	83 c4 10             	add    esp,0x10
c0019a30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a38:	83 ec 0c             	sub    esp,0xc
c0019a3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a3d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a41:	51                   	push   ecx
c0019a42:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a46:	52                   	push   edx
c0019a47:	6a 00                	push   0x0
c0019a49:	6a 01                	push   0x1
c0019a4b:	53                   	push   ebx
c0019a4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a4f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a53:	83 c4 20             	add    esp,0x20
c0019a56:	3c 0d                	cmp    al,0xd
c0019a58:	0f 84 09 01 00 00    	je     c0019b67 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a5e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a63:	0f 84 ef 00 00 00    	je     c0019b58 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a69:	3c 0a                	cmp    al,0xa
c0019a6b:	74 13                	je     c0019a80 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a6d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a72:	74 0c                	je     c0019a80 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a74:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019a7a:	0f 8e d8 00 00 00    	jle    c0019b58 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a84:	83 ec 0c             	sub    esp,0xc
c0019a87:	8d 78 01             	lea    edi,[eax+0x1]
c0019a8a:	57                   	push   edi
c0019a8b:	e8 09 5b ff ff       	call   c000f599 <malloc>
c0019a90:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019a94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019a98:	8d 56 04             	lea    edx,[esi+0x4]
c0019a9b:	89 14 24             	mov    DWORD PTR [esp],edx
c0019a9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019aa2:	e8 f2 5a ff ff       	call   c000f599 <malloc>
c0019aa7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019aab:	83 c4 0c             	add    esp,0xc
c0019aae:	57                   	push   edi
c0019aaf:	6a 00                	push   0x0
c0019ab1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ab5:	e8 96 6c fe ff       	call   c0000750 <memset>
c0019aba:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019abe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ac2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ac6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ac8:	83 c4 0c             	add    esp,0xc
c0019acb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019acf:	52                   	push   edx
c0019ad0:	6a 00                	push   0x0
c0019ad2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ad6:	e8 75 6c fe ff       	call   c0000750 <memset>
c0019adb:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019adf:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019ae3:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ae6:	e8 81 6c fe ff       	call   c000076c <strlen>
c0019aeb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019aef:	89 c1                	mov    ecx,eax
c0019af1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019af3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019af6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019af9:	40                   	inc    eax
c0019afa:	83 c4 10             	add    esp,0x10
c0019afd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b00:	85 d2                	test   edx,edx
c0019b02:	75 0c                	jne    c0019b10 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b04:	83 ec 0c             	sub    esp,0xc
c0019b07:	6a 08                	push   0x8
c0019b09:	e8 8b 5a ff ff       	call   c000f599 <malloc>
c0019b0e:	eb 0c                	jmp    c0019b1c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b10:	c1 e0 03             	shl    eax,0x3
c0019b13:	51                   	push   ecx
c0019b14:	51                   	push   ecx
c0019b15:	50                   	push   eax
c0019b16:	52                   	push   edx
c0019b17:	e8 69 5a ff ff       	call   c000f585 <realloc>
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b22:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b25:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b28:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b2c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b30:	b9 08 00 00 00       	mov    ecx,0x8
c0019b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b37:	31 f6                	xor    esi,esi
c0019b39:	50                   	push   eax
c0019b3a:	68 00 01 00 00       	push   0x100
c0019b3f:	6a 00                	push   0x0
c0019b41:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b45:	50                   	push   eax
c0019b46:	e8 05 6c fe ff       	call   c0000750 <memset>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b56:	eb 0f                	jmp    c0019b67 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b58:	3c 3d                	cmp    al,0x3d
c0019b5a:	74 07                	je     c0019b63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b5c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b60:	46                   	inc    esi
c0019b61:	eb 04                	jmp    c0019b67 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b63:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b67:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b6c:	0f 85 c6 fe ff ff    	jne    c0019a38 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019b72:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b78:	5b                   	pop    ebx
c0019b79:	5e                   	pop    esi
c0019b7a:	5f                   	pop    edi
c0019b7b:	5d                   	pop    ebp
c0019b7c:	c3                   	ret    
c0019b7d:	90                   	nop

c0019b7e <EnvVarContainer::__loadSystem()>:
c0019b7e:	83 ec 10             	sub    esp,0x10
c0019b81:	68 20 ce 02 c0       	push   0xc002ce20
c0019b86:	68 0d b5 02 c0       	push   0xc002b50d
c0019b8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b8f:	e8 04 fe ff ff       	call   c0019998 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019b94:	83 c4 1c             	add    esp,0x1c
c0019b97:	c3                   	ret    

c0019b98 <EnvVarContainer::__loadUser()>:
c0019b98:	c3                   	ret    
c0019b99:	90                   	nop

c0019b9a <EnvVarContainer::EnvVarContainer(Process*)>:
c0019b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b9e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019baf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bba:	90                   	nop
c0019bbb:	c3                   	ret    

c0019bbc <EnvVarContainer::~EnvVarContainer()>:
c0019bbc:	83 ec 0c             	sub    esp,0xc
c0019bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bc6:	85 c0                	test   eax,eax
c0019bc8:	74 1d                	je     c0019be7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bd0:	85 c0                	test   eax,eax
c0019bd2:	74 13                	je     c0019be7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bdb:	83 ec 0c             	sub    esp,0xc
c0019bde:	50                   	push   eax
c0019bdf:	e8 c5 59 ff ff       	call   c000f5a9 <free>
c0019be4:	83 c4 10             	add    esp,0x10
c0019be7:	90                   	nop
c0019be8:	83 c4 0c             	add    esp,0xc
c0019beb:	c3                   	ret    

c0019bec <Krnl::getEnv(Process*, char const*)>:
c0019bec:	53                   	push   ebx
c0019bed:	83 ec 08             	sub    esp,0x8
c0019bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019bf8:	39 05 30 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e30,eax
c0019bfe:	74 04                	je     c0019c04 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c00:	85 c0                	test   eax,eax
c0019c02:	75 0b                	jne    c0019c0f <Krnl::getEnv(Process*, char const*)+0x23>
c0019c04:	a1 14 04 03 c0       	mov    eax,ds:0xc0030414
c0019c09:	85 c0                	test   eax,eax
c0019c0b:	75 19                	jne    c0019c26 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c0d:	eb 27                	jmp    c0019c36 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c0f:	52                   	push   edx
c0019c10:	52                   	push   edx
c0019c11:	53                   	push   ebx
c0019c12:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c18:	e8 79 fc ff ff       	call   c0019896 <EnvVarContainer::getEnv(char const*)>
c0019c1d:	83 c4 10             	add    esp,0x10
c0019c20:	85 c0                	test   eax,eax
c0019c22:	75 28                	jne    c0019c4c <Krnl::getEnv(Process*, char const*)+0x60>
c0019c24:	eb de                	jmp    c0019c04 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c26:	52                   	push   edx
c0019c27:	52                   	push   edx
c0019c28:	53                   	push   ebx
c0019c29:	50                   	push   eax
c0019c2a:	e8 67 fc ff ff       	call   c0019896 <EnvVarContainer::getEnv(char const*)>
c0019c2f:	83 c4 10             	add    esp,0x10
c0019c32:	85 c0                	test   eax,eax
c0019c34:	75 16                	jne    c0019c4c <Krnl::getEnv(Process*, char const*)+0x60>
c0019c36:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c3a:	a1 18 04 03 c0       	mov    eax,ds:0xc0030418
c0019c3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c43:	83 c4 08             	add    esp,0x8
c0019c46:	5b                   	pop    ebx
c0019c47:	e9 4a fc ff ff       	jmp    c0019896 <EnvVarContainer::getEnv(char const*)>
c0019c4c:	83 c4 08             	add    esp,0x8
c0019c4f:	5b                   	pop    ebx
c0019c50:	c3                   	ret    

c0019c51 <Krnl::setEnvSystem(char const*, char const*)>:
c0019c51:	83 ec 10             	sub    esp,0x10
c0019c54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c5c:	ff 35 18 04 03 c0    	push   DWORD PTR ds:0xc0030418
c0019c62:	e8 6d fc ff ff       	call   c00198d4 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c67:	83 c4 1c             	add    esp,0x1c
c0019c6a:	c3                   	ret    

c0019c6b <Krnl::setEnvUser(char const*, char const*)>:
c0019c6b:	a1 14 04 03 c0       	mov    eax,ds:0xc0030414
c0019c70:	85 c0                	test   eax,eax
c0019c72:	74 15                	je     c0019c89 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c74:	83 ec 10             	sub    esp,0x10
c0019c77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c7f:	50                   	push   eax
c0019c80:	e8 4f fc ff ff       	call   c00198d4 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c85:	83 c4 1c             	add    esp,0x1c
c0019c88:	c3                   	ret    
c0019c89:	c3                   	ret    

c0019c8a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c8e:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019c94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c98:	e9 37 fc ff ff       	jmp    c00198d4 <EnvVarContainer::setEnv(char const*, char const*)>

c0019c9d <Krnl::deleteEnvSystem(char const*)>:
c0019c9d:	c3                   	ret    

c0019c9e <Krnl::deleteEnvUser(char const*)>:
c0019c9e:	c3                   	ret    

c0019c9f <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019c9f:	c3                   	ret    

c0019ca0 <Krnl::newProcessEnv(Process*)>:
c0019ca0:	83 ec 28             	sub    esp,0x28
c0019ca3:	6a 0c                	push   0xc
c0019ca5:	e8 ef 58 ff ff       	call   c000f599 <malloc>
c0019caa:	5a                   	pop    edx
c0019cab:	59                   	pop    ecx
c0019cac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cb0:	50                   	push   eax
c0019cb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cb5:	e8 e0 fe ff ff       	call   c0019b9a <EnvVarContainer::EnvVarContainer(Process*)>
c0019cba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cbe:	83 c4 2c             	add    esp,0x2c
c0019cc1:	c3                   	ret    

c0019cc2 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019cc2:	57                   	push   edi
c0019cc3:	56                   	push   esi
c0019cc4:	53                   	push   ebx
c0019cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc9:	83 ec 0c             	sub    esp,0xc
c0019ccc:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019cd2:	6a 0c                	push   0xc
c0019cd4:	e8 c0 58 ff ff       	call   c000f599 <malloc>
c0019cd9:	89 c3                	mov    ebx,eax
c0019cdb:	58                   	pop    eax
c0019cdc:	5a                   	pop    edx
c0019cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ce1:	53                   	push   ebx
c0019ce2:	e8 b3 fe ff ff       	call   c0019b9a <EnvVarContainer::EnvVarContainer(Process*)>
c0019ce7:	8b 07                	mov    eax,DWORD PTR [edi]
c0019ce9:	89 03                	mov    DWORD PTR [ebx],eax
c0019ceb:	c1 e0 03             	shl    eax,0x3
c0019cee:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cf1:	e8 a3 58 ff ff       	call   c000f599 <malloc>
c0019cf6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019cf9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019cfb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019cfe:	c1 e1 03             	shl    ecx,0x3
c0019d01:	89 c7                	mov    edi,eax
c0019d03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d05:	83 c4 10             	add    esp,0x10
c0019d08:	89 d8                	mov    eax,ebx
c0019d0a:	5b                   	pop    ebx
c0019d0b:	5e                   	pop    esi
c0019d0c:	5f                   	pop    edi
c0019d0d:	c3                   	ret    

c0019d0e <Krnl::loadSystemEnv()>:
c0019d0e:	53                   	push   ebx
c0019d0f:	83 ec 14             	sub    esp,0x14
c0019d12:	6a 0c                	push   0xc
c0019d14:	e8 80 58 ff ff       	call   c000f599 <malloc>
c0019d19:	89 c3                	mov    ebx,eax
c0019d1b:	58                   	pop    eax
c0019d1c:	5a                   	pop    edx
c0019d1d:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c0019d23:	53                   	push   ebx
c0019d24:	e8 71 fe ff ff       	call   c0019b9a <EnvVarContainer::EnvVarContainer(Process*)>
c0019d29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d2c:	89 1d 18 04 03 c0    	mov    DWORD PTR ds:0xc0030418,ebx
c0019d32:	e8 47 fe ff ff       	call   c0019b7e <EnvVarContainer::__loadSystem()>
c0019d37:	83 c4 18             	add    esp,0x18
c0019d3a:	5b                   	pop    ebx
c0019d3b:	c3                   	ret    

c0019d3c <Krnl::loadUserEnv()>:
c0019d3c:	53                   	push   ebx
c0019d3d:	83 ec 14             	sub    esp,0x14
c0019d40:	6a 0c                	push   0xc
c0019d42:	e8 52 58 ff ff       	call   c000f599 <malloc>
c0019d47:	89 c3                	mov    ebx,eax
c0019d49:	58                   	pop    eax
c0019d4a:	5a                   	pop    edx
c0019d4b:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c0019d51:	53                   	push   ebx
c0019d52:	e8 43 fe ff ff       	call   c0019b9a <EnvVarContainer::EnvVarContainer(Process*)>
c0019d57:	89 1d 14 04 03 c0    	mov    DWORD PTR ds:0xc0030414,ebx
c0019d5d:	83 c4 18             	add    esp,0x18
c0019d60:	5b                   	pop    ebx
c0019d61:	c3                   	ret    

c0019d62 <Krnl::flushEnv()>:
c0019d62:	c3                   	ret    

c0019d63 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d67:	8b 15 14 04 03 c0    	mov    edx,DWORD PTR ds:0xc0030414
c0019d6d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d73:	a1 18 04 03 c0       	mov    eax,ds:0xc0030418
c0019d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d7a:	03 01                	add    eax,DWORD PTR [ecx]
c0019d7c:	85 d2                	test   edx,edx
c0019d7e:	74 02                	je     c0019d82 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d80:	03 02                	add    eax,DWORD PTR [edx]
c0019d82:	c3                   	ret    

c0019d83 <Krnl::getProcessEnvPair(Process*, int)>:
c0019d83:	57                   	push   edi
c0019d84:	56                   	push   esi
c0019d85:	8b 35 14 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030414
c0019d8b:	53                   	push   ebx
c0019d8c:	85 f6                	test   esi,esi
c0019d8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d96:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019da0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019da2:	75 16                	jne    c0019dba <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019da4:	39 c2                	cmp    edx,eax
c0019da6:	7c 16                	jl     c0019dbe <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019da8:	8b 0d 18 04 03 c0    	mov    ecx,DWORD PTR ds:0xc0030418
c0019dae:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019db0:	01 c6                	add    esi,eax
c0019db2:	39 d6                	cmp    esi,edx
c0019db4:	7e 3c                	jle    c0019df2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019db6:	29 c2                	sub    edx,eax
c0019db8:	eb 04                	jmp    c0019dbe <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dba:	39 c2                	cmp    edx,eax
c0019dbc:	7d 05                	jge    c0019dc3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019dbe:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019dc1:	eb 20                	jmp    c0019de3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019dc3:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019dc5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019dc8:	39 d1                	cmp    ecx,edx
c0019dca:	7e 04                	jle    c0019dd0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019dcc:	29 c2                	sub    edx,eax
c0019dce:	eb 10                	jmp    c0019de0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019dd0:	8b 35 18 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030418
c0019dd6:	03 0e                	add    ecx,DWORD PTR [esi]
c0019dd8:	39 d1                	cmp    ecx,edx
c0019dda:	7e 16                	jle    c0019df2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019ddc:	29 c2                	sub    edx,eax
c0019dde:	29 fa                	sub    edx,edi
c0019de0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019de3:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019de6:	8b 02                	mov    eax,DWORD PTR [edx]
c0019de8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019deb:	89 03                	mov    DWORD PTR [ebx],eax
c0019ded:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019df0:	eb 1d                	jmp    c0019e0f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019df2:	83 ec 0c             	sub    esp,0xc
c0019df5:	68 2f b5 02 c0       	push   0xc002b52f
c0019dfa:	e8 18 00 00 00       	call   c0019e17 <Krnl::panic(char const*)>
c0019dff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e05:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e0c:	83 c4 10             	add    esp,0x10
c0019e0f:	89 d8                	mov    eax,ebx
c0019e11:	5b                   	pop    ebx
c0019e12:	5e                   	pop    esi
c0019e13:	5f                   	pop    edi
c0019e14:	c2 04 00             	ret    0x4

c0019e17 <Krnl::panic(char const*)>:
c0019e17:	55                   	push   ebp
c0019e18:	89 e5                	mov    ebp,esp
c0019e1a:	53                   	push   ebx
c0019e1b:	83 ec 10             	sub    esp,0x10
c0019e1e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e21:	fa                   	cli    
c0019e22:	c6 05 24 04 03 c0 01 	mov    BYTE PTR ds:0xc0030424,0x1
c0019e29:	53                   	push   ebx
c0019e2a:	e8 c4 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e2f:	58                   	pop    eax
c0019e30:	c6 05 20 c8 02 c0 00 	mov    BYTE PTR ds:0xc002c820,0x0
c0019e37:	5a                   	pop    edx
c0019e38:	53                   	push   ebx
c0019e39:	68 49 b5 02 c0       	push   0xc002b549
c0019e3e:	e8 68 88 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0019e43:	59                   	pop    ecx
c0019e44:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019e49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e4f:	e8 e1 64 ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c0019e54:	83 c4 0c             	add    esp,0xc
c0019e57:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019e5c:	6a 01                	push   0x1
c0019e5e:	6a 0f                	push   0xf
c0019e60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e66:	e8 29 63 ff ff       	call   c0010194 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e6b:	58                   	pop    eax
c0019e6c:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019e71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e77:	e8 3a 68 ff ff       	call   c00106b6 <VgaText::clearScreen()>
c0019e7c:	58                   	pop    eax
c0019e7d:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019e82:	5a                   	pop    edx
c0019e83:	68 62 b5 02 c0       	push   0xc002b562
c0019e88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e8e:	e8 af 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019e93:	59                   	pop    ecx
c0019e94:	58                   	pop    eax
c0019e95:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019e9a:	68 08 b6 02 c0       	push   0xc002b608
c0019e9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea5:	e8 98 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019eaa:	58                   	pop    eax
c0019eab:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019eb0:	5a                   	pop    edx
c0019eb1:	68 7e b5 02 c0       	push   0xc002b57e
c0019eb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ebc:	e8 81 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019ec1:	59                   	pop    ecx
c0019ec2:	58                   	pop    eax
c0019ec3:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019ec8:	53                   	push   ebx
c0019ec9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ecf:	e8 6e 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019ed4:	58                   	pop    eax
c0019ed5:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019eda:	5a                   	pop    edx
c0019edb:	68 9e b5 02 c0       	push   0xc002b59e
c0019ee0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee6:	e8 57 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019eeb:	a1 20 04 03 c0       	mov    eax,ds:0xc0030420
c0019ef0:	83 c4 10             	add    esp,0x10
c0019ef3:	85 c0                	test   eax,eax
c0019ef5:	74 02                	je     c0019ef9 <Krnl::panic(char const*)+0xe2>
c0019ef7:	ff d0                	call   eax
c0019ef9:	83 ec 0c             	sub    esp,0xc
c0019efc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019eff:	e8 8c 30 00 00       	call   c001cf90 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f04:	83 c4 10             	add    esp,0x10
c0019f07:	89 c3                	mov    ebx,eax
c0019f09:	85 c0                	test   eax,eax
c0019f0b:	0f 84 4e 02 00 00    	je     c001a15f <Krnl::panic(char const*)+0x348>
c0019f11:	83 ec 08             	sub    esp,0x8
c0019f14:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019f19:	68 44 b6 02 c0       	push   0xc002b644
c0019f1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f24:	e8 19 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f29:	58                   	pop    eax
c0019f2a:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019f2f:	5a                   	pop    edx
c0019f30:	68 7e b5 02 c0       	push   0xc002b57e
c0019f35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f3b:	e8 02 69 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f40:	59                   	pop    ecx
c0019f41:	58                   	pop    eax
c0019f42:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019f47:	53                   	push   ebx
c0019f48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f4e:	e8 ef 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f53:	83 c4 10             	add    esp,0x10
c0019f56:	83 ec 08             	sub    esp,0x8
c0019f59:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019f5e:	68 9d b5 02 c0       	push   0xc002b59d
c0019f63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f69:	e8 d4 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f6e:	58                   	pop    eax
c0019f6f:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019f74:	5a                   	pop    edx
c0019f75:	68 9c b6 02 c0       	push   0xc002b69c
c0019f7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f80:	e8 bd 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f85:	59                   	pop    ecx
c0019f86:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019f8b:	5b                   	pop    ebx
c0019f8c:	68 dc b6 02 c0       	push   0xc002b6dc
c0019f91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f97:	e8 a6 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019f9c:	58                   	pop    eax
c0019f9d:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019fa2:	5a                   	pop    edx
c0019fa3:	68 89 b5 02 c0       	push   0xc002b589
c0019fa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fae:	e8 8f 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019fb3:	59                   	pop    ecx
c0019fb4:	5b                   	pop    ebx
c0019fb5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fb8:	68 a1 b5 02 c0       	push   0xc002b5a1
c0019fbd:	e8 e9 86 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0019fc2:	58                   	pop    eax
c0019fc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fc6:	5a                   	pop    edx
c0019fc7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fca:	68 aa b5 02 c0       	push   0xc002b5aa
c0019fcf:	e8 d7 86 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0019fd4:	59                   	pop    ecx
c0019fd5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fd8:	5b                   	pop    ebx
c0019fd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fdb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fde:	68 b3 b5 02 c0       	push   0xc002b5b3
c0019fe3:	e8 c3 86 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0019fe8:	58                   	pop    eax
c0019fe9:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0019fee:	5a                   	pop    edx
c0019fef:	68 20 b7 02 c0       	push   0xc002b720
c0019ff4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ffa:	e8 43 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c0019fff:	59                   	pop    ecx
c001a000:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a005:	5b                   	pop    ebx
c001a006:	68 bc b5 02 c0       	push   0xc002b5bc
c001a00b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a011:	e8 2c 68 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a016:	0f 20 c0             	mov    eax,cr0
c001a019:	5a                   	pop    edx
c001a01a:	59                   	pop    ecx
c001a01b:	50                   	push   eax
c001a01c:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a021:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a027:	e8 d0 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a02c:	5b                   	pop    ebx
c001a02d:	58                   	pop    eax
c001a02e:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a033:	68 c6 b5 02 c0       	push   0xc002b5c6
c001a038:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a03e:	e8 ff 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a043:	0f 20 d0             	mov    eax,cr2
c001a046:	5a                   	pop    edx
c001a047:	59                   	pop    ecx
c001a048:	50                   	push   eax
c001a049:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a04e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a054:	e8 a3 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a059:	5b                   	pop    ebx
c001a05a:	58                   	pop    eax
c001a05b:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a060:	68 d0 b5 02 c0       	push   0xc002b5d0
c001a065:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a06b:	e8 d2 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a070:	0f 20 d8             	mov    eax,cr3
c001a073:	5a                   	pop    edx
c001a074:	59                   	pop    ecx
c001a075:	50                   	push   eax
c001a076:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a07b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a081:	e8 76 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a086:	5b                   	pop    ebx
c001a087:	58                   	pop    eax
c001a088:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a08d:	68 e3 b5 02 c0       	push   0xc002b5e3
c001a092:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a098:	e8 a5 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a09d:	0f 20 e0             	mov    eax,cr4
c001a0a0:	5a                   	pop    edx
c001a0a1:	59                   	pop    ecx
c001a0a2:	50                   	push   eax
c001a0a3:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a0a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ae:	e8 49 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a0b3:	5b                   	pop    ebx
c001a0b4:	58                   	pop    eax
c001a0b5:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a0ba:	68 ed b5 02 c0       	push   0xc002b5ed
c001a0bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c5:	e8 78 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a0ca:	5a                   	pop    edx
c001a0cb:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a0d0:	59                   	pop    ecx
c001a0d1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0d7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0da:	50                   	push   eax
c001a0db:	e8 1c 67 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a0e0:	5b                   	pop    ebx
c001a0e1:	58                   	pop    eax
c001a0e2:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a0e7:	68 04 b6 02 c0       	push   0xc002b604
c001a0ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f2:	e8 4b 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a0f7:	5a                   	pop    edx
c001a0f8:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a0fd:	59                   	pop    ecx
c001a0fe:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a104:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a107:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a10a:	50                   	push   eax
c001a10b:	e8 ec 66 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a110:	5b                   	pop    ebx
c001a111:	58                   	pop    eax
c001a112:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a117:	68 04 b6 02 c0       	push   0xc002b604
c001a11c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a122:	e8 1b 67 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a127:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a12c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a12f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a135:	8b 12                	mov    edx,DWORD PTR [edx]
c001a137:	59                   	pop    ecx
c001a138:	5b                   	pop    ebx
c001a139:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a13c:	50                   	push   eax
c001a13d:	e8 ba 66 ff ff       	call   c00107fc <VgaText::putx(unsigned int)>
c001a142:	83 c4 10             	add    esp,0x10
c001a145:	b2 fe                	mov    dl,0xfe
c001a147:	e4 60                	in     al,0x60
c001a149:	3c 1c                	cmp    al,0x1c
c001a14b:	74 04                	je     c001a151 <Krnl::panic(char const*)+0x33a>
c001a14d:	3c 5a                	cmp    al,0x5a
c001a14f:	75 f6                	jne    c001a147 <Krnl::panic(char const*)+0x330>
c001a151:	e4 64                	in     al,0x64
c001a153:	a8 02                	test   al,0x2
c001a155:	75 fa                	jne    c001a151 <Krnl::panic(char const*)+0x33a>
c001a157:	88 d0                	mov    al,dl
c001a159:	e6 64                	out    0x64,al
c001a15b:	fa                   	cli    
c001a15c:	f4                   	hlt    
c001a15d:	eb e8                	jmp    c001a147 <Krnl::panic(char const*)+0x330>
c001a15f:	50                   	push   eax
c001a160:	50                   	push   eax
c001a161:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a166:	68 70 b6 02 c0       	push   0xc002b670
c001a16b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a171:	e8 cc 66 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a176:	58                   	pop    eax
c001a177:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a17c:	5a                   	pop    edx
c001a17d:	68 7e b5 02 c0       	push   0xc002b57e
c001a182:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a188:	e8 b5 66 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a18d:	59                   	pop    ecx
c001a18e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a193:	5b                   	pop    ebx
c001a194:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a197:	83 c0 0c             	add    eax,0xc
c001a19a:	50                   	push   eax
c001a19b:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001a1a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a6:	e8 97 66 ff ff       	call   c0010842 <VgaText::puts(char const*)>
c001a1ab:	83 c4 10             	add    esp,0x10
c001a1ae:	e9 a3 fd ff ff       	jmp    c0019f56 <Krnl::panic(char const*)+0x13f>

c001a1b3 <Net::switchEndian16(unsigned short)>:
c001a1b3:	83 ec 04             	sub    esp,0x4
c001a1b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1ba:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1be:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1c2:	c1 f8 08             	sar    eax,0x8
c001a1c5:	89 c2                	mov    edx,eax
c001a1c7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1cb:	c1 e0 08             	shl    eax,0x8
c001a1ce:	09 d0                	or     eax,edx
c001a1d0:	83 c4 04             	add    esp,0x4
c001a1d3:	c3                   	ret    

c001a1d4 <Net::switchEndian32(unsigned int)>:
c001a1d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1d8:	c1 e8 18             	shr    eax,0x18
c001a1db:	89 c2                	mov    edx,eax
c001a1dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e1:	c1 e0 08             	shl    eax,0x8
c001a1e4:	25 00 00 ff 00       	and    eax,0xff0000
c001a1e9:	09 c2                	or     edx,eax
c001a1eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ef:	c1 e8 08             	shr    eax,0x8
c001a1f2:	25 00 ff 00 00       	and    eax,0xff00
c001a1f7:	09 c2                	or     edx,eax
c001a1f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1fd:	c1 e0 18             	shl    eax,0x18
c001a200:	09 d0                	or     eax,edx
c001a202:	c3                   	ret    

c001a203 <Net::crc32Calc(unsigned char*, int)>:
c001a203:	83 ec 10             	sub    esp,0x10
c001a206:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a20b:	75 07                	jne    c001a214 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a20d:	b8 00 00 00 00       	mov    eax,0x0
c001a212:	eb 7c                	jmp    c001a290 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a214:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a219:	7f 07                	jg     c001a222 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a21b:	b8 00 00 00 00       	mov    eax,0x0
c001a220:	eb 6e                	jmp    c001a290 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a222:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a22a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a232:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a236:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a23a:	7d 4e                	jge    c001a28a <Net::crc32Calc(unsigned char*, int)+0x87>
c001a23c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a240:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a244:	01 d0                	add    eax,edx
c001a246:	8a 00                	mov    al,BYTE PTR [eax]
c001a248:	0f b6 c0             	movzx  eax,al
c001a24b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a24f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a257:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a25c:	7f 26                	jg     c001a284 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a25e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a262:	83 e0 01             	and    eax,0x1
c001a265:	74 0d                	je     c001a274 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a26b:	d1 e8                	shr    eax,1
c001a26d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a272:	eb 06                	jmp    c001a27a <Net::crc32Calc(unsigned char*, int)+0x77>
c001a274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a278:	d1 e8                	shr    eax,1
c001a27a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a27e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a282:	eb d3                	jmp    c001a257 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a284:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a288:	eb a8                	jmp    c001a232 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a28a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a28e:	f7 d0                	not    eax
c001a290:	83 c4 10             	add    esp,0x10
c001a293:	c3                   	ret    

c001a294 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a294:	57                   	push   edi
c001a295:	56                   	push   esi
c001a296:	53                   	push   ebx
c001a297:	83 ec 60             	sub    esp,0x60
c001a29a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2a1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2a5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2ad:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2b2:	7f 1a                	jg     c001a2ce <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2b4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2bb:	8d 50 01             	lea    edx,[eax+0x1]
c001a2be:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2c5:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2c8:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a2cc:	eb df                	jmp    c001a2ad <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a2ce:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2d5:	8d 50 01             	lea    edx,[eax+0x1]
c001a2d8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2df:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a2e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2ed:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a2f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2f5:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a2fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a305:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a30d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a311:	89 c6                	mov    esi,eax
c001a313:	89 d7                	mov    edi,edx
c001a315:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a317:	89 c8                	mov    eax,ecx
c001a319:	89 fa                	mov    edx,edi
c001a31b:	89 f3                	mov    ebx,esi
c001a31d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a321:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a325:	89 04 24             	mov    DWORD PTR [esp],eax
c001a328:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a330:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a337:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a33b:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a33f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a343:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a34b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a34f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a357:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a35b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a35f:	89 c6                	mov    esi,eax
c001a361:	89 d7                	mov    edi,edx
c001a363:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a365:	89 c8                	mov    eax,ecx
c001a367:	89 fa                	mov    edx,edi
c001a369:	89 f3                	mov    ebx,esi
c001a36b:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a36f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a373:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a377:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a37f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a386:	0f b7 c0             	movzx  eax,ax
c001a389:	c1 f8 08             	sar    eax,0x8
c001a38c:	89 c1                	mov    ecx,eax
c001a38e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a395:	8d 50 01             	lea    edx,[eax+0x1]
c001a398:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a39f:	88 ca                	mov    dl,cl
c001a3a1:	88 10                	mov    BYTE PTR [eax],dl
c001a3a3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3aa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3b1:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3b4:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a3bb:	88 10                	mov    BYTE PTR [eax],dl
c001a3bd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3c1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a3c5:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a3cc:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a3d0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a3d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a3d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a3dc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a3e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a3e4:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a3e8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a3ec:	89 c6                	mov    esi,eax
c001a3ee:	89 d7                	mov    edi,edx
c001a3f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3f2:	89 c8                	mov    eax,ecx
c001a3f4:	89 fa                	mov    edx,edi
c001a3f6:	89 f3                	mov    ebx,esi
c001a3f8:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a3fc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a400:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a404:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a408:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a40f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a416:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a41a:	50                   	push   eax
c001a41b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a41f:	e8 df fd ff ff       	call   c001a203 <Net::crc32Calc(unsigned char*, int)>
c001a424:	83 c4 08             	add    esp,0x8
c001a427:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a42b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a42f:	c1 e8 18             	shr    eax,0x18
c001a432:	89 c1                	mov    ecx,eax
c001a434:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a43b:	8d 50 01             	lea    edx,[eax+0x1]
c001a43e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a445:	88 ca                	mov    dl,cl
c001a447:	88 10                	mov    BYTE PTR [eax],dl
c001a449:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a44d:	c1 e8 10             	shr    eax,0x10
c001a450:	89 c1                	mov    ecx,eax
c001a452:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a459:	8d 50 01             	lea    edx,[eax+0x1]
c001a45c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a463:	88 ca                	mov    dl,cl
c001a465:	88 10                	mov    BYTE PTR [eax],dl
c001a467:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a46b:	c1 e8 08             	shr    eax,0x8
c001a46e:	89 c1                	mov    ecx,eax
c001a470:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a477:	8d 50 01             	lea    edx,[eax+0x1]
c001a47a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a481:	88 ca                	mov    dl,cl
c001a483:	88 10                	mov    BYTE PTR [eax],dl
c001a485:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a48c:	8d 50 01             	lea    edx,[eax+0x1]
c001a48f:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a496:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a49a:	88 10                	mov    BYTE PTR [eax],dl
c001a49c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4a0:	83 c4 60             	add    esp,0x60
c001a4a3:	5b                   	pop    ebx
c001a4a4:	5e                   	pop    esi
c001a4a5:	5f                   	pop    edi
c001a4a6:	c3                   	ret    

c001a4a7 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4a7:	57                   	push   edi
c001a4a8:	56                   	push   esi
c001a4a9:	53                   	push   ebx
c001a4aa:	83 ec 70             	sub    esp,0x70
c001a4ad:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4b4:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a4b8:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a4c0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4c7:	83 c0 0e             	add    eax,0xe
c001a4ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a4ce:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4d9:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a4e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4ed:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a4f1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a4f5:	89 c6                	mov    esi,eax
c001a4f7:	89 d7                	mov    edi,edx
c001a4f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4fb:	89 c8                	mov    eax,ecx
c001a4fd:	89 fa                	mov    edx,edi
c001a4ff:	89 f3                	mov    ebx,esi
c001a501:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a505:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a509:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a50d:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a515:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a51c:	83 c0 08             	add    eax,0x8
c001a51f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a523:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a52a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a52e:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a536:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a53a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a53e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a542:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a546:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a54a:	89 c6                	mov    esi,eax
c001a54c:	89 d7                	mov    edi,edx
c001a54e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a550:	89 c8                	mov    eax,ecx
c001a552:	89 fa                	mov    edx,edi
c001a554:	89 f3                	mov    ebx,esi
c001a556:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a55a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a55e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a562:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a56a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a571:	8d 50 01             	lea    edx,[eax+0x1]
c001a574:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a57b:	8a 00                	mov    al,BYTE PTR [eax]
c001a57d:	0f b6 c0             	movzx  eax,al
c001a580:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a585:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a58c:	8d 50 01             	lea    edx,[eax+0x1]
c001a58f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a596:	8a 00                	mov    al,BYTE PTR [eax]
c001a598:	0f b6 c0             	movzx  eax,al
c001a59b:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5a0:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5a5:	c1 e0 08             	shl    eax,0x8
c001a5a8:	89 c2                	mov    edx,eax
c001a5aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5ae:	09 d0                	or     eax,edx
c001a5b0:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5b7:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a5bb:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a5c3:	75 46                	jne    c001a60b <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5c5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5cf:	66 3d dc 05          	cmp    ax,0x5dc
c001a5d3:	77 16                	ja     c001a5eb <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a5d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5dc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5df:	0f b7 c0             	movzx  eax,ax
c001a5e2:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a5e9:	eb 20                	jmp    c001a60b <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5eb:	83 ec 0c             	sub    esp,0xc
c001a5ee:	68 48 b7 02 c0       	push   0xc002b748
c001a5f3:	e8 b3 80 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001a5f8:	83 c4 10             	add    esp,0x10
c001a5fb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a602:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a606:	e9 17 01 00 00       	jmp    c001a722 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a60b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a612:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a619:	8b 12                	mov    edx,DWORD PTR [edx]
c001a61b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a61f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a626:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a62a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a62e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a632:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a63a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a63e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a642:	89 c6                	mov    esi,eax
c001a644:	89 d7                	mov    edi,edx
c001a646:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a648:	89 c8                	mov    eax,ecx
c001a64a:	89 fa                	mov    edx,edi
c001a64c:	89 f3                	mov    ebx,esi
c001a64e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a652:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a656:	89 04 24             	mov    DWORD PTR [esp],eax
c001a659:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a660:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a667:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a66e:	8d 50 01             	lea    edx,[eax+0x1]
c001a671:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a678:	8a 00                	mov    al,BYTE PTR [eax]
c001a67a:	0f b6 c0             	movzx  eax,al
c001a67d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a681:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a688:	8d 50 01             	lea    edx,[eax+0x1]
c001a68b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a692:	8a 00                	mov    al,BYTE PTR [eax]
c001a694:	0f b6 c0             	movzx  eax,al
c001a697:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a69b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6a2:	8d 50 01             	lea    edx,[eax+0x1]
c001a6a5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ac:	8a 00                	mov    al,BYTE PTR [eax]
c001a6ae:	0f b6 c0             	movzx  eax,al
c001a6b1:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6b5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6bc:	8d 50 01             	lea    edx,[eax+0x1]
c001a6bf:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6c6:	8a 00                	mov    al,BYTE PTR [eax]
c001a6c8:	0f b6 c0             	movzx  eax,al
c001a6cb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6cf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a6d3:	c1 e0 18             	shl    eax,0x18
c001a6d6:	89 c2                	mov    edx,eax
c001a6d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a6dc:	c1 e0 10             	shl    eax,0x10
c001a6df:	09 c2                	or     edx,eax
c001a6e1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a6e5:	c1 e0 08             	shl    eax,0x8
c001a6e8:	09 d0                	or     eax,edx
c001a6ea:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a6ee:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a6f2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6f9:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a6fd:	83 e8 04             	sub    eax,0x4
c001a700:	83 ec 08             	sub    esp,0x8
c001a703:	50                   	push   eax
c001a704:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a708:	e8 f6 fa ff ff       	call   c001a203 <Net::crc32Calc(unsigned char*, int)>
c001a70d:	83 c4 10             	add    esp,0x10
c001a710:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a714:	0f 94 c2             	sete   dl
c001a717:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a71e:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a721:	90                   	nop
c001a722:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a729:	83 c4 70             	add    esp,0x70
c001a72c:	5b                   	pop    ebx
c001a72d:	5e                   	pop    esi
c001a72e:	5f                   	pop    edi
c001a72f:	c2 04 00             	ret    0x4

c001a732 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a732:	55                   	push   ebp
c001a733:	57                   	push   edi
c001a734:	56                   	push   esi
c001a735:	53                   	push   ebx
c001a736:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a73c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a743:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a745:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a748:	80 fb 40             	cmp    bl,0x40
c001a74b:	75 1b                	jne    c001a768 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a74d:	8a 16                	mov    dl,BYTE PTR [esi]
c001a74f:	84 d2                	test   dl,dl
c001a751:	0f 84 f1 00 00 00    	je     c001a848 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a757:	8d 46 01             	lea    eax,[esi+0x1]
c001a75a:	80 fa 3a             	cmp    dl,0x3a
c001a75d:	74 04                	je     c001a763 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a75f:	89 c6                	mov    esi,eax
c001a761:	eb ea                	jmp    c001a74d <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a763:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a766:	89 c6                	mov    esi,eax
c001a768:	50                   	push   eax
c001a769:	6a 40                	push   0x40
c001a76b:	6a 00                	push   0x0
c001a76d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a771:	50                   	push   eax
c001a772:	e8 d9 5f fe ff       	call   c0000750 <memset>
c001a777:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a77e:	31 c0                	xor    eax,eax
c001a780:	83 c4 10             	add    esp,0x10
c001a783:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a785:	84 c9                	test   cl,cl
c001a787:	0f 84 bb 00 00 00    	je     c001a848 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a78d:	3d c7 00 00 00       	cmp    eax,0xc7
c001a792:	0f 8f b0 00 00 00    	jg     c001a848 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a798:	80 f9 0a             	cmp    cl,0xa
c001a79b:	0f 85 98 00 00 00    	jne    c001a839 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7a1:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7a6:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7aa:	a8 df                	test   al,0xdf
c001a7ac:	0f 94 c1             	sete   cl
c001a7af:	3c 23                	cmp    al,0x23
c001a7b1:	0f 94 c2             	sete   dl
c001a7b4:	08 d1                	or     cl,dl
c001a7b6:	75 4a                	jne    c001a802 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7b8:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7bb:	80 fa 01             	cmp    dl,0x1
c001a7be:	76 42                	jbe    c001a802 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7c0:	3c 5b                	cmp    al,0x5b
c001a7c2:	75 42                	jne    c001a806 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7c4:	80 fb 40             	cmp    bl,0x40
c001a7c7:	75 39                	jne    c001a802 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7c9:	83 ec 0c             	sub    esp,0xc
c001a7cc:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a7d0:	52                   	push   edx
c001a7d1:	e8 96 5f fe ff       	call   c000076c <strlen>
c001a7d6:	83 c4 10             	add    esp,0x10
c001a7d9:	83 f8 3f             	cmp    eax,0x3f
c001a7dc:	77 6a                	ja     c001a848 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7de:	50                   	push   eax
c001a7df:	50                   	push   eax
c001a7e0:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a7e4:	52                   	push   edx
c001a7e5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7e9:	52                   	push   edx
c001a7ea:	e8 1d 60 fe ff       	call   c000080c <strcpy>
c001a7ef:	58                   	pop    eax
c001a7f0:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7f4:	52                   	push   edx
c001a7f5:	e8 72 5f fe ff       	call   c000076c <strlen>
c001a7fa:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a7ff:	83 c4 10             	add    esp,0x10
c001a802:	31 d2                	xor    edx,edx
c001a804:	eb 3a                	jmp    c001a840 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a806:	80 fb 40             	cmp    bl,0x40
c001a809:	74 06                	je     c001a811 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a80b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a80f:	eb 20                	jmp    c001a831 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a811:	50                   	push   eax
c001a812:	50                   	push   eax
c001a813:	55                   	push   ebp
c001a814:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a818:	50                   	push   eax
c001a819:	e8 7a 60 fe ff       	call   c0000898 <strcmp>
c001a81e:	83 c4 10             	add    esp,0x10
c001a821:	85 c0                	test   eax,eax
c001a823:	75 dd                	jne    c001a802 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a825:	eb e4                	jmp    c001a80b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a827:	8d 50 01             	lea    edx,[eax+0x1]
c001a82a:	80 f9 3d             	cmp    cl,0x3d
c001a82d:	74 1d                	je     c001a84c <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a82f:	89 d0                	mov    eax,edx
c001a831:	8a 08                	mov    cl,BYTE PTR [eax]
c001a833:	84 c9                	test   cl,cl
c001a835:	75 f0                	jne    c001a827 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a837:	eb 0f                	jmp    c001a848 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a839:	8d 50 01             	lea    edx,[eax+0x1]
c001a83c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a840:	47                   	inc    edi
c001a841:	89 d0                	mov    eax,edx
c001a843:	e9 3b ff ff ff       	jmp    c001a783 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a848:	31 c0                	xor    eax,eax
c001a84a:	eb 33                	jmp    c001a87f <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a84c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a850:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a853:	50                   	push   eax
c001a854:	50                   	push   eax
c001a855:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a859:	50                   	push   eax
c001a85a:	56                   	push   esi
c001a85b:	e8 38 60 fe ff       	call   c0000898 <strcmp>
c001a860:	83 c4 10             	add    esp,0x10
c001a863:	85 c0                	test   eax,eax
c001a865:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a869:	75 97                	jne    c001a802 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a86b:	51                   	push   ecx
c001a86c:	51                   	push   ecx
c001a86d:	52                   	push   edx
c001a86e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a875:	e8 92 5f fe ff       	call   c000080c <strcpy>
c001a87a:	83 c4 10             	add    esp,0x10
c001a87d:	b0 01                	mov    al,0x1
c001a87f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a885:	5b                   	pop    ebx
c001a886:	5e                   	pop    esi
c001a887:	5f                   	pop    edi
c001a888:	5d                   	pop    ebp
c001a889:	c3                   	ret    

c001a88a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a88a:	57                   	push   edi
c001a88b:	56                   	push   esi
c001a88c:	53                   	push   ebx
c001a88d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a893:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a89a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8a1:	53                   	push   ebx
c001a8a2:	e8 c5 5e fe ff       	call   c000076c <strlen>
c001a8a7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8aa:	89 c7                	mov    edi,eax
c001a8ac:	e8 bb 5e fe ff       	call   c000076c <strlen>
c001a8b1:	83 c4 10             	add    esp,0x10
c001a8b4:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8b8:	3d ff 00 00 00       	cmp    eax,0xff
c001a8bd:	0f 87 d3 00 00 00    	ja     c001a996 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8c3:	57                   	push   edi
c001a8c4:	57                   	push   edi
c001a8c5:	56                   	push   esi
c001a8c6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a8ca:	56                   	push   esi
c001a8cb:	e8 3c 5f fe ff       	call   c000080c <strcpy>
c001a8d0:	58                   	pop    eax
c001a8d1:	5a                   	pop    edx
c001a8d2:	68 ea ba 02 c0       	push   0xc002baea
c001a8d7:	56                   	push   esi
c001a8d8:	e8 6f 60 fe ff       	call   c000094c <strcat>
c001a8dd:	59                   	pop    ecx
c001a8de:	5f                   	pop    edi
c001a8df:	53                   	push   ebx
c001a8e0:	56                   	push   esi
c001a8e1:	e8 66 60 fe ff       	call   c000094c <strcat>
c001a8e6:	58                   	pop    eax
c001a8e7:	5a                   	pop    edx
c001a8e8:	68 94 b7 02 c0       	push   0xc002b794
c001a8ed:	56                   	push   esi
c001a8ee:	e8 59 60 fe ff       	call   c000094c <strcat>
c001a8f3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a8fa:	e8 9a 4c ff ff       	call   c000f599 <malloc>
c001a8ff:	83 c4 0c             	add    esp,0xc
c001a902:	89 c3                	mov    ebx,eax
c001a904:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c001a90a:	56                   	push   esi
c001a90b:	50                   	push   eax
c001a90c:	e8 f9 82 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001a911:	83 c4 10             	add    esp,0x10
c001a914:	85 db                	test   ebx,ebx
c001a916:	74 7e                	je     c001a996 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a918:	51                   	push   ecx
c001a919:	51                   	push   ecx
c001a91a:	6a 01                	push   0x1
c001a91c:	53                   	push   ebx
c001a91d:	e8 4c 83 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c001a922:	83 c4 10             	add    esp,0x10
c001a925:	85 c0                	test   eax,eax
c001a927:	74 08                	je     c001a931 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a929:	83 ec 0c             	sub    esp,0xc
c001a92c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a92e:	53                   	push   ebx
c001a92f:	eb 5f                	jmp    c001a990 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a931:	52                   	push   edx
c001a932:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a936:	50                   	push   eax
c001a937:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a93b:	50                   	push   eax
c001a93c:	53                   	push   ebx
c001a93d:	e8 d8 85 ff ff       	call   c0012f1a <File::stat(unsigned long long*, bool*)>
c001a942:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a946:	83 c4 10             	add    esp,0x10
c001a949:	89 c1                	mov    ecx,eax
c001a94b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a94f:	74 31                	je     c001a982 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a951:	83 ec 0c             	sub    esp,0xc
c001a954:	50                   	push   eax
c001a955:	e8 3f 4c ff ff       	call   c000f599 <malloc>
c001a95a:	89 c6                	mov    esi,eax
c001a95c:	58                   	pop    eax
c001a95d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a95f:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a963:	52                   	push   edx
c001a964:	56                   	push   esi
c001a965:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a969:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a96d:	53                   	push   ebx
c001a96e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a971:	83 c4 20             	add    esp,0x20
c001a974:	85 c0                	test   eax,eax
c001a976:	75 0a                	jne    c001a982 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a978:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a97c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a980:	74 18                	je     c001a99a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a982:	83 ec 0c             	sub    esp,0xc
c001a985:	53                   	push   ebx
c001a986:	e8 41 83 ff ff       	call   c0012ccc <File::close()>
c001a98b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a98d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a990:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a993:	83 c4 10             	add    esp,0x10
c001a996:	31 c0                	xor    eax,eax
c001a998:	eb 3b                	jmp    c001a9d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	53                   	push   ebx
c001a99e:	e8 29 83 ff ff       	call   c0012ccc <File::close()>
c001a9a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9ab:	83 c4 0c             	add    esp,0xc
c001a9ae:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9b5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9bc:	56                   	push   esi
c001a9bd:	e8 70 fd ff ff       	call   c001a732 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9c2:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9c5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a9c9:	e8 db 4b ff ff       	call   c000f5a9 <free>
c001a9ce:	83 c4 10             	add    esp,0x10
c001a9d1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a9d5:	81 c4 20 01 00 00    	add    esp,0x120
c001a9db:	5b                   	pop    ebx
c001a9dc:	5e                   	pop    esi
c001a9dd:	5f                   	pop    edi
c001a9de:	c3                   	ret    

c001a9df <Reg::getLine(char*, char*, char*)>:
c001a9df:	57                   	push   edi
c001a9e0:	56                   	push   esi
c001a9e1:	53                   	push   ebx
c001a9e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9ea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a9ee:	57                   	push   edi
c001a9ef:	56                   	push   esi
c001a9f0:	53                   	push   ebx
c001a9f1:	68 99 b7 02 c0       	push   0xc002b799
c001a9f6:	e8 8f fe ff ff       	call   c001a88a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a9fb:	83 c4 10             	add    esp,0x10
c001a9fe:	84 c0                	test   al,al
c001aa00:	75 10                	jne    c001aa12 <Reg::getLine(char*, char*, char*)+0x33>
c001aa02:	57                   	push   edi
c001aa03:	56                   	push   esi
c001aa04:	53                   	push   ebx
c001aa05:	68 be b7 02 c0       	push   0xc002b7be
c001aa0a:	e8 7b fe ff ff       	call   c001a88a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa0f:	83 c4 10             	add    esp,0x10
c001aa12:	5b                   	pop    ebx
c001aa13:	5e                   	pop    esi
c001aa14:	5f                   	pop    edi
c001aa15:	c3                   	ret    

c001aa16 <Reg::readInt(char*, char*, int*)>:
c001aa16:	55                   	push   ebp
c001aa17:	57                   	push   edi
c001aa18:	56                   	push   esi
c001aa19:	53                   	push   ebx
c001aa1a:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa20:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa24:	57                   	push   edi
c001aa25:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa2c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa33:	e8 a7 ff ff ff       	call   c001a9df <Reg::getLine(char*, char*, char*)>
c001aa38:	83 c4 10             	add    esp,0x10
c001aa3b:	84 c0                	test   al,al
c001aa3d:	0f 84 b3 00 00 00    	je     c001aaf6 <Reg::readInt(char*, char*, int*)+0xe0>
c001aa43:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa47:	80 fa 2b             	cmp    dl,0x2b
c001aa4a:	74 0c                	je     c001aa58 <Reg::readInt(char*, char*, int*)+0x42>
c001aa4c:	80 fa 2d             	cmp    dl,0x2d
c001aa4f:	75 0e                	jne    c001aa5f <Reg::readInt(char*, char*, int*)+0x49>
c001aa51:	ba 01 00 00 00       	mov    edx,0x1
c001aa56:	eb 0b                	jmp    c001aa63 <Reg::readInt(char*, char*, int*)+0x4d>
c001aa58:	ba 01 00 00 00       	mov    edx,0x1
c001aa5d:	eb 02                	jmp    c001aa61 <Reg::readInt(char*, char*, int*)+0x4b>
c001aa5f:	31 d2                	xor    edx,edx
c001aa61:	31 c0                	xor    eax,eax
c001aa63:	be 0a 00 00 00       	mov    esi,0xa
c001aa68:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa6d:	75 20                	jne    c001aa8f <Reg::readInt(char*, char*, int*)+0x79>
c001aa6f:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa73:	80 f9 78             	cmp    cl,0x78
c001aa76:	75 0a                	jne    c001aa82 <Reg::readInt(char*, char*, int*)+0x6c>
c001aa78:	83 c2 02             	add    edx,0x2
c001aa7b:	be 10 00 00 00       	mov    esi,0x10
c001aa80:	eb 0d                	jmp    c001aa8f <Reg::readInt(char*, char*, int*)+0x79>
c001aa82:	80 f9 62             	cmp    cl,0x62
c001aa85:	75 08                	jne    c001aa8f <Reg::readInt(char*, char*, int*)+0x79>
c001aa87:	83 c2 02             	add    edx,0x2
c001aa8a:	be 02 00 00 00       	mov    esi,0x2
c001aa8f:	01 d7                	add    edi,edx
c001aa91:	31 d2                	xor    edx,edx
c001aa93:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aa95:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aa99:	80 fb 0d             	cmp    bl,0xd
c001aa9c:	0f 94 c3             	sete   bl
c001aa9f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aaa4:	0f 94 c1             	sete   cl
c001aaa7:	08 cb                	or     bl,cl
c001aaa9:	75 3a                	jne    c001aae5 <Reg::readInt(char*, char*, int*)+0xcf>
c001aaab:	0f af d6             	imul   edx,esi
c001aaae:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aab3:	83 fe 10             	cmp    esi,0x10
c001aab6:	75 26                	jne    c001aade <Reg::readInt(char*, char*, int*)+0xc8>
c001aab8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aabc:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aabf:	89 e9                	mov    ecx,ebp
c001aac1:	80 f9 05             	cmp    cl,0x5
c001aac4:	77 06                	ja     c001aacc <Reg::readInt(char*, char*, int*)+0xb6>
c001aac6:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aaca:	eb 16                	jmp    c001aae2 <Reg::readInt(char*, char*, int*)+0xcc>
c001aacc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aad0:	83 e9 61             	sub    ecx,0x61
c001aad3:	80 f9 05             	cmp    cl,0x5
c001aad6:	77 06                	ja     c001aade <Reg::readInt(char*, char*, int*)+0xc8>
c001aad8:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aadc:	eb 04                	jmp    c001aae2 <Reg::readInt(char*, char*, int*)+0xcc>
c001aade:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aae2:	47                   	inc    edi
c001aae3:	eb ae                	jmp    c001aa93 <Reg::readInt(char*, char*, int*)+0x7d>
c001aae5:	84 c0                	test   al,al
c001aae7:	74 02                	je     c001aaeb <Reg::readInt(char*, char*, int*)+0xd5>
c001aae9:	f7 da                	neg    edx
c001aaeb:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aaf2:	89 10                	mov    DWORD PTR [eax],edx
c001aaf4:	88 d8                	mov    al,bl
c001aaf6:	81 c4 ec 00 00 00    	add    esp,0xec
c001aafc:	5b                   	pop    ebx
c001aafd:	5e                   	pop    esi
c001aafe:	5f                   	pop    edi
c001aaff:	5d                   	pop    ebp
c001ab00:	c3                   	ret    

c001ab01 <Reg::readString(char*, char*, char*, int)>:
c001ab01:	57                   	push   edi
c001ab02:	56                   	push   esi
c001ab03:	53                   	push   ebx
c001ab04:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab0a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab11:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab15:	57                   	push   edi
c001ab16:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab1d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab24:	e8 b6 fe ff ff       	call   c001a9df <Reg::getLine(char*, char*, char*)>
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	89 c6                	mov    esi,eax
c001ab2e:	84 c0                	test   al,al
c001ab30:	74 44                	je     c001ab76 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab32:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab39:	31 c0                	xor    eax,eax
c001ab3b:	4a                   	dec    edx
c001ab3c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab3f:	84 c9                	test   cl,cl
c001ab41:	74 0f                	je     c001ab52 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab43:	39 c2                	cmp    edx,eax
c001ab45:	7e 0b                	jle    c001ab52 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab47:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab4a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab4f:	40                   	inc    eax
c001ab50:	eb ea                	jmp    c001ab3c <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	53                   	push   ebx
c001ab56:	e8 11 5c fe ff       	call   c000076c <strlen>
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab63:	75 11                	jne    c001ab76 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab65:	83 ec 0c             	sub    esp,0xc
c001ab68:	53                   	push   ebx
c001ab69:	e8 fe 5b fe ff       	call   c000076c <strlen>
c001ab6e:	83 c4 10             	add    esp,0x10
c001ab71:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab76:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ab7c:	89 f0                	mov    eax,esi
c001ab7e:	5b                   	pop    ebx
c001ab7f:	5e                   	pop    esi
c001ab80:	5f                   	pop    edi
c001ab81:	c3                   	ret    

c001ab82 <Reg::readBool(char*, char*, bool*)>:
c001ab82:	83 ec 20             	sub    esp,0x20
c001ab85:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab89:	50                   	push   eax
c001ab8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab92:	e8 7f fe ff ff       	call   c001aa16 <Reg::readInt(char*, char*, int*)>
c001ab97:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ab9c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aba0:	0f 95 02             	setne  BYTE PTR [edx]
c001aba3:	83 c4 2c             	add    esp,0x2c
c001aba6:	c3                   	ret    

c001aba7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aba7:	53                   	push   ebx
c001aba8:	83 ec 1c             	sub    esp,0x1c
c001abab:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abaf:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abb3:	50                   	push   eax
c001abb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abbc:	e8 c1 ff ff ff       	call   c001ab82 <Reg::readBool(char*, char*, bool*)>
c001abc1:	83 c4 10             	add    esp,0x10
c001abc4:	84 c0                	test   al,al
c001abc6:	74 04                	je     c001abcc <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001abc8:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001abcc:	88 d8                	mov    al,bl
c001abce:	83 c4 18             	add    esp,0x18
c001abd1:	5b                   	pop    ebx
c001abd2:	c3                   	ret    

c001abd3 <Reg::readIntWithDefault(char*, char*, int)>:
c001abd3:	53                   	push   ebx
c001abd4:	83 ec 1c             	sub    esp,0x1c
c001abd7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abdb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abdf:	50                   	push   eax
c001abe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abe8:	e8 29 fe ff ff       	call   c001aa16 <Reg::readInt(char*, char*, int*)>
c001abed:	83 c4 10             	add    esp,0x10
c001abf0:	84 c0                	test   al,al
c001abf2:	74 04                	je     c001abf8 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001abf4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001abf8:	89 d8                	mov    eax,ebx
c001abfa:	83 c4 18             	add    esp,0x18
c001abfd:	5b                   	pop    ebx
c001abfe:	c3                   	ret    

c001abff <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001abff:	57                   	push   edi
c001ac00:	56                   	push   esi
c001ac01:	56                   	push   esi
c001ac02:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac06:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac0a:	56                   	push   esi
c001ac0b:	57                   	push   edi
c001ac0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac14:	e8 e8 fe ff ff       	call   c001ab01 <Reg::readString(char*, char*, char*, int)>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	84 c0                	test   al,al
c001ac1e:	75 1a                	jne    c001ac3a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac20:	51                   	push   ecx
c001ac21:	56                   	push   esi
c001ac22:	6a 00                	push   0x0
c001ac24:	57                   	push   edi
c001ac25:	e8 26 5b fe ff       	call   c0000750 <memset>
c001ac2a:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac33:	83 c4 10             	add    esp,0x10
c001ac36:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac3a:	89 f8                	mov    eax,edi
c001ac3c:	5a                   	pop    edx
c001ac3d:	5e                   	pop    esi
c001ac3e:	5f                   	pop    edi
c001ac3f:	c3                   	ret    

c001ac40 <Sys::eject(regs*)>:
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	83 ca ff             	or     edx,0xffffffff
c001ac46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac4d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac52:	83 e9 41             	sub    ecx,0x41
c001ac55:	83 f9 19             	cmp    ecx,0x19
c001ac58:	77 18                	ja     c001ac72 <Sys::eject(regs*)+0x32>
c001ac5a:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c001ac61:	85 c9                	test   ecx,ecx
c001ac63:	74 0d                	je     c001ac72 <Sys::eject(regs*)+0x32>
c001ac65:	83 ec 0c             	sub    esp,0xc
c001ac68:	51                   	push   ecx
c001ac69:	e8 28 b3 ff ff       	call   c0015f96 <LogicalDisk::eject()>
c001ac6e:	83 c4 10             	add    esp,0x10
c001ac71:	99                   	cdq    
c001ac72:	83 c4 0c             	add    esp,0xc
c001ac75:	c3                   	ret    

c001ac76 <Sys::exit(regs*)>:
c001ac76:	83 ec 18             	sub    esp,0x18
c001ac79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac7d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac80:	e8 bc 35 00 00       	call   c001e241 <terminateTask(int)>
c001ac85:	83 c8 ff             	or     eax,0xffffffff
c001ac88:	83 c4 1c             	add    esp,0x1c
c001ac8b:	89 c2                	mov    edx,eax
c001ac8d:	c3                   	ret    

c001ac8e <Sys::getCwd(regs*)>:
c001ac8e:	83 ec 10             	sub    esp,0x10
c001ac91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac95:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ac98:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aca0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aca3:	e8 64 7d ff ff       	call   c0012a0c <Fs::getcwd(Process*, char*, int)>
c001aca8:	83 c4 1c             	add    esp,0x1c
c001acab:	99                   	cdq    
c001acac:	c3                   	ret    

c001acad <Sys::getPID(regs*)>:
c001acad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acb2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001acb7:	99                   	cdq    
c001acb8:	c3                   	ret    

c001acb9 <Sys::getRAMData(regs*)>:
c001acb9:	8b 0d 34 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d934
c001acbf:	6b 05 30 d9 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d930,0x64
c001acc6:	99                   	cdq    
c001acc7:	f7 f9                	idiv   ecx
c001acc9:	c1 e0 18             	shl    eax,0x18
c001accc:	09 c8                	or     eax,ecx
c001acce:	99                   	cdq    
c001accf:	c3                   	ret    

c001acd0 <Sys::getVGAPtr(regs*)>:
c001acd0:	55                   	push   ebp
c001acd1:	57                   	push   edi
c001acd2:	56                   	push   esi
c001acd3:	53                   	push   ebx
c001acd4:	83 ec 18             	sub    esp,0x18
c001acd7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acdb:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001acde:	e8 aa 30 00 00       	call   c001dd8d <Thr::processFromPID(int)>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	89 c1                	mov    ecx,eax
c001ace8:	b8 01 00 00 00       	mov    eax,0x1
c001aced:	85 c9                	test   ecx,ecx
c001acef:	74 59                	je     c001ad4a <Sys::getVGAPtr(regs*)+0x7a>
c001acf1:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001acf7:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001acfb:	74 0c                	je     c001ad09 <Sys::getVGAPtr(regs*)+0x39>
c001acfd:	83 ec 0c             	sub    esp,0xc
c001ad00:	53                   	push   ebx
c001ad01:	e8 2f 56 ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c001ad06:	83 c4 10             	add    esp,0x10
c001ad09:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad0c:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad0f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad16:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad19:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad1c:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad22:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad28:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad2b:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad2e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad34:	50                   	push   eax
c001ad35:	50                   	push   eax
c001ad36:	53                   	push   ebx
c001ad37:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad3a:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad3f:	50                   	push   eax
c001ad40:	e8 c7 5a fe ff       	call   c000080c <strcpy>
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	31 c0                	xor    eax,eax
c001ad4a:	83 c4 0c             	add    esp,0xc
c001ad4d:	31 d2                	xor    edx,edx
c001ad4f:	5b                   	pop    ebx
c001ad50:	5e                   	pop    esi
c001ad51:	5f                   	pop    edi
c001ad52:	5d                   	pop    ebp
c001ad53:	c3                   	ret    

c001ad54 <Sys::loadDLL(regs*)>:
c001ad54:	56                   	push   esi
c001ad55:	53                   	push   ebx
c001ad56:	31 d2                	xor    edx,edx
c001ad58:	51                   	push   ecx
c001ad59:	b8 01 00 00 00       	mov    eax,0x1
c001ad5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad62:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad66:	0f 84 8c 00 00 00    	je     c001adf8 <Sys::loadDLL(regs*)+0xa4>
c001ad6c:	83 ec 0c             	sub    esp,0xc
c001ad6f:	68 14 01 00 00       	push   0x114
c001ad74:	e8 20 48 ff ff       	call   c000f599 <malloc>
c001ad79:	83 c4 0c             	add    esp,0xc
c001ad7c:	89 c3                	mov    ebx,eax
c001ad7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad83:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad86:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad89:	53                   	push   ebx
c001ad8a:	e8 7b 7e ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	31 d2                	xor    edx,edx
c001ad94:	b8 02 00 00 00       	mov    eax,0x2
c001ad99:	85 db                	test   ebx,ebx
c001ad9b:	74 5b                	je     c001adf8 <Sys::loadDLL(regs*)+0xa4>
c001ad9d:	83 ec 0c             	sub    esp,0xc
c001ada0:	53                   	push   ebx
c001ada1:	e8 36 81 ff ff       	call   c0012edc <File::exists()>
c001ada6:	83 c4 10             	add    esp,0x10
c001ada9:	84 c0                	test   al,al
c001adab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adad:	75 11                	jne    c001adc0 <Sys::loadDLL(regs*)+0x6c>
c001adaf:	83 ec 0c             	sub    esp,0xc
c001adb2:	53                   	push   ebx
c001adb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adb6:	83 c4 10             	add    esp,0x10
c001adb9:	b8 03 00 00 00       	mov    eax,0x3
c001adbe:	eb 36                	jmp    c001adf6 <Sys::loadDLL(regs*)+0xa2>
c001adc0:	83 ec 0c             	sub    esp,0xc
c001adc3:	53                   	push   ebx
c001adc4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adc7:	58                   	pop    eax
c001adc8:	5a                   	pop    edx
c001adc9:	6a 00                	push   0x0
c001adcb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adce:	e8 0e 22 00 00       	call   c001cfe1 <Thr::loadDLL(char const*, bool)>
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	89 c1                	mov    ecx,eax
c001add8:	31 d2                	xor    edx,edx
c001adda:	b8 04 00 00 00       	mov    eax,0x4
c001addf:	85 c9                	test   ecx,ecx
c001ade1:	74 15                	je     c001adf8 <Sys::loadDLL(regs*)+0xa4>
c001ade3:	53                   	push   ebx
c001ade4:	53                   	push   ebx
c001ade5:	ff 35 e8 d8 02 c0    	push   DWORD PTR ds:0xc002d8e8
c001adeb:	51                   	push   ecx
c001adec:	e8 1b 24 00 00       	call   c001d20c <Thr::executeDLL(unsigned long, void*)>
c001adf1:	83 c4 10             	add    esp,0x10
c001adf4:	31 c0                	xor    eax,eax
c001adf6:	31 d2                	xor    edx,edx
c001adf8:	59                   	pop    ecx
c001adf9:	5b                   	pop    ebx
c001adfa:	5e                   	pop    esi
c001adfb:	c3                   	ret    

c001adfc <Sys::read(regs*)>:
c001adfc:	57                   	push   edi
c001adfd:	56                   	push   esi
c001adfe:	53                   	push   ebx
c001adff:	83 ec 10             	sub    esp,0x10
c001ae02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae09:	83 f8 02             	cmp    eax,0x2
c001ae0c:	77 10                	ja     c001ae1e <Sys::read(regs*)+0x22>
c001ae0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae16:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae1c:	eb 0e                	jmp    c001ae2c <Sys::read(regs*)+0x30>
c001ae1e:	83 ec 0c             	sub    esp,0xc
c001ae21:	50                   	push   eax
c001ae22:	e8 82 62 ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001ae27:	83 c4 10             	add    esp,0x10
c001ae2a:	89 c1                	mov    ecx,eax
c001ae2c:	83 c8 ff             	or     eax,0xffffffff
c001ae2f:	85 c9                	test   ecx,ecx
c001ae31:	89 c2                	mov    edx,eax
c001ae33:	74 28                	je     c001ae5d <Sys::read(regs*)+0x61>
c001ae35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae3d:	31 ff                	xor    edi,edi
c001ae3f:	83 ec 0c             	sub    esp,0xc
c001ae42:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae44:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae48:	52                   	push   edx
c001ae49:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae4c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae4f:	57                   	push   edi
c001ae50:	56                   	push   esi
c001ae51:	51                   	push   ecx
c001ae52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae59:	83 c4 20             	add    esp,0x20
c001ae5c:	99                   	cdq    
c001ae5d:	83 c4 10             	add    esp,0x10
c001ae60:	5b                   	pop    ebx
c001ae61:	5e                   	pop    esi
c001ae62:	5f                   	pop    edi
c001ae63:	c3                   	ret    

c001ae64 <Sys::sbrk(regs*)>:
c001ae64:	56                   	push   esi
c001ae65:	53                   	push   ebx
c001ae66:	50                   	push   eax
c001ae67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae73:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae76:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae7c:	85 db                	test   ebx,ebx
c001ae7e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ae81:	74 02                	je     c001ae85 <Sys::sbrk(regs*)+0x21>
c001ae83:	79 06                	jns    c001ae8b <Sys::sbrk(regs*)+0x27>
c001ae85:	89 f0                	mov    eax,esi
c001ae87:	31 d2                	xor    edx,edx
c001ae89:	eb 2a                	jmp    c001aeb5 <Sys::sbrk(regs*)+0x51>
c001ae8b:	83 c8 ff             	or     eax,0xffffffff
c001ae8e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ae94:	89 c2                	mov    edx,eax
c001ae96:	77 1d                	ja     c001aeb5 <Sys::sbrk(regs*)+0x51>
c001ae98:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ae9e:	50                   	push   eax
c001ae9f:	c1 ea 0c             	shr    edx,0xc
c001aea2:	68 07 0c 00 00       	push   0xc07
c001aea7:	52                   	push   edx
c001aea8:	51                   	push   ecx
c001aea9:	e8 10 6c ff ff       	call   c0011abe <VAS::allocatePages(int, int)>
c001aeae:	89 f0                	mov    eax,esi
c001aeb0:	31 d2                	xor    edx,edx
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	59                   	pop    ecx
c001aeb6:	5b                   	pop    ebx
c001aeb7:	5e                   	pop    esi
c001aeb8:	c3                   	ret    

c001aeb9 <Sys::setCwd(regs*)>:
c001aeb9:	83 ec 14             	sub    esp,0x14
c001aebc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aec0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aec8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aecb:	e8 ab 80 ff ff       	call   c0012f7b <Fs::setcwd(Process*, char*)>
c001aed0:	83 c4 1c             	add    esp,0x1c
c001aed3:	99                   	cdq    
c001aed4:	c3                   	ret    

c001aed5 <Sys::setTime(regs*)>:
c001aed5:	55                   	push   ebp
c001aed6:	31 c9                	xor    ecx,ecx
c001aed8:	57                   	push   edi
c001aed9:	bd 0c 00 00 00       	mov    ebp,0xc
c001aede:	56                   	push   esi
c001aedf:	53                   	push   ebx
c001aee0:	31 db                	xor    ebx,ebx
c001aee2:	83 ec 10             	sub    esp,0x10
c001aee5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aee9:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001aeec:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001aeef:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001aef2:	89 c2                	mov    edx,eax
c001aef4:	66 81 ef 6c 07       	sub    di,0x76c
c001aef9:	83 e2 1f             	and    edx,0x1f
c001aefc:	c1 e7 10             	shl    edi,0x10
c001aeff:	42                   	inc    edx
c001af00:	c1 e8 05             	shr    eax,0x5
c001af03:	88 d1                	mov    cl,dl
c001af05:	31 d2                	xor    edx,edx
c001af07:	f7 f5                	div    ebp
c001af09:	89 dd                	mov    ebp,ebx
c001af0b:	88 d5                	mov    ch,dl
c001af0d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af13:	0f b7 c1             	movzx  eax,cx
c001af16:	31 d2                	xor    edx,edx
c001af18:	09 f8                	or     eax,edi
c001af1a:	bf 3c 00 00 00       	mov    edi,0x3c
c001af1f:	89 c1                	mov    ecx,eax
c001af21:	89 f0                	mov    eax,esi
c001af23:	f7 f7                	div    edi
c001af25:	c1 e2 10             	shl    edx,0x10
c001af28:	09 d5                	or     ebp,edx
c001af2a:	31 d2                	xor    edx,edx
c001af2c:	89 eb                	mov    ebx,ebp
c001af2e:	f7 f7                	div    edi
c001af30:	bf 10 0e 00 00       	mov    edi,0xe10
c001af35:	88 d7                	mov    bh,dl
c001af37:	89 f0                	mov    eax,esi
c001af39:	31 d2                	xor    edx,edx
c001af3b:	f7 f7                	div    edi
c001af3d:	bf 18 00 00 00       	mov    edi,0x18
c001af42:	31 d2                	xor    edx,edx
c001af44:	f7 f7                	div    edi
c001af46:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001af4b:	88 d3                	mov    bl,dl
c001af4d:	53                   	push   ebx
c001af4e:	51                   	push   ecx
c001af4f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af55:	e8 6a 88 ff ff       	call   c00137c4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af5a:	83 c4 1c             	add    esp,0x1c
c001af5d:	83 f0 01             	xor    eax,0x1
c001af60:	5b                   	pop    ebx
c001af61:	0f b6 c0             	movzx  eax,al
c001af64:	5e                   	pop    esi
c001af65:	31 d2                	xor    edx,edx
c001af67:	5f                   	pop    edi
c001af68:	5d                   	pop    ebp
c001af69:	c3                   	ret    

c001af6a <Sys::timezone(regs*)>:
c001af6a:	53                   	push   ebx
c001af6b:	83 ec 08             	sub    esp,0x8
c001af6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af72:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af76:	75 17                	jne    c001af8f <Sys::timezone(regs*)+0x25>
c001af78:	83 ec 0c             	sub    esp,0xc
c001af7b:	68 d9 b7 02 c0       	push   0xc002b7d9
c001af80:	e8 26 77 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001af85:	83 c8 ff             	or     eax,0xffffffff
c001af88:	83 c4 10             	add    esp,0x10
c001af8b:	89 c2                	mov    edx,eax
c001af8d:	eb 20                	jmp    c001afaf <Sys::timezone(regs*)+0x45>
c001af8f:	83 ec 0c             	sub    esp,0xc
c001af92:	68 ee b7 02 c0       	push   0xc002b7ee
c001af97:	e8 0f 77 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001af9c:	58                   	pop    eax
c001af9d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afa0:	e8 81 85 ff ff       	call   c0013526 <User::loadClockSettings(int)>
c001afa5:	83 c4 10             	add    esp,0x10
c001afa8:	b8 01 00 00 00       	mov    eax,0x1
c001afad:	31 d2                	xor    edx,edx
c001afaf:	83 c4 08             	add    esp,0x8
c001afb2:	5b                   	pop    ebx
c001afb3:	c3                   	ret    

c001afb4 <Sys::write(regs*)>:
c001afb4:	57                   	push   edi
c001afb5:	56                   	push   esi
c001afb6:	53                   	push   ebx
c001afb7:	83 ec 10             	sub    esp,0x10
c001afba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afbe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afc1:	83 f8 02             	cmp    eax,0x2
c001afc4:	77 10                	ja     c001afd6 <Sys::write(regs*)+0x22>
c001afc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afcb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afce:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001afd4:	eb 0e                	jmp    c001afe4 <Sys::write(regs*)+0x30>
c001afd6:	83 ec 0c             	sub    esp,0xc
c001afd9:	50                   	push   eax
c001afda:	e8 ca 60 ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001afdf:	83 c4 10             	add    esp,0x10
c001afe2:	89 c1                	mov    ecx,eax
c001afe4:	83 c8 ff             	or     eax,0xffffffff
c001afe7:	85 c9                	test   ecx,ecx
c001afe9:	89 c2                	mov    edx,eax
c001afeb:	74 28                	je     c001b015 <Sys::write(regs*)+0x61>
c001afed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aff5:	31 ff                	xor    edi,edi
c001aff7:	83 ec 0c             	sub    esp,0xc
c001affa:	8b 01                	mov    eax,DWORD PTR [ecx]
c001affc:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b000:	52                   	push   edx
c001b001:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b004:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b007:	57                   	push   edi
c001b008:	56                   	push   esi
c001b009:	51                   	push   ecx
c001b00a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b00d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b011:	83 c4 20             	add    esp,0x20
c001b014:	99                   	cdq    
c001b015:	83 c4 10             	add    esp,0x10
c001b018:	5b                   	pop    ebx
c001b019:	5e                   	pop    esi
c001b01a:	5f                   	pop    edi
c001b01b:	c3                   	ret    

c001b01c <Sys::wsbe(regs*)>:
c001b01c:	57                   	push   edi
c001b01d:	b9 0b 00 00 00       	mov    ecx,0xb
c001b022:	56                   	push   esi
c001b023:	be 2d b8 02 c0       	mov    esi,0xc002b82d
c001b028:	53                   	push   ebx
c001b029:	83 ec 30             	sub    esp,0x30
c001b02c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b030:	fc                   	cld    
c001b031:	83 ec 0c             	sub    esp,0xc
c001b034:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b036:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b03a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b03f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b042:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b048:	8b 06                	mov    eax,DWORD PTR [esi]
c001b04a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b04d:	57                   	push   edi
c001b04e:	e8 19 57 fe ff       	call   c000076c <strlen>
c001b053:	5a                   	pop    edx
c001b054:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b058:	52                   	push   edx
c001b059:	31 d2                	xor    edx,edx
c001b05b:	57                   	push   edi
c001b05c:	52                   	push   edx
c001b05d:	50                   	push   eax
c001b05e:	56                   	push   esi
c001b05f:	ff d3                	call   ebx
c001b061:	83 c4 14             	add    esp,0x14
c001b064:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b068:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b06b:	e8 d1 31 00 00       	call   c001e241 <terminateTask(int)>
c001b070:	83 c4 40             	add    esp,0x40
c001b073:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b078:	5b                   	pop    ebx
c001b079:	31 d2                	xor    edx,edx
c001b07b:	5e                   	pop    esi
c001b07c:	5f                   	pop    edi
c001b07d:	c3                   	ret    

c001b07e <Sys::yield(regs*)>:
c001b07e:	57                   	push   edi
c001b07f:	56                   	push   esi
c001b080:	53                   	push   ebx
c001b081:	fa                   	cli    
c001b082:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001b088:	e8 14 29 00 00       	call   c001d9a1 <schedule()>
c001b08d:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001b092:	48                   	dec    eax
c001b093:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001b098:	75 01                	jne    c001b09b <Sys::yield(regs*)+0x1d>
c001b09a:	fb                   	sti    
c001b09b:	8b 35 50 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df50
c001b0a1:	8b 3d 54 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df54
c001b0a7:	89 f0                	mov    eax,esi
c001b0a9:	89 fb                	mov    ebx,edi
c001b0ab:	89 f1                	mov    ecx,esi
c001b0ad:	c1 e0 07             	shl    eax,0x7
c001b0b0:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0b4:	25 80 30 0f 00       	and    eax,0xf3080
c001b0b9:	c1 eb 17             	shr    ebx,0x17
c001b0bc:	31 c8                	xor    eax,ecx
c001b0be:	89 da                	mov    edx,ebx
c001b0c0:	5b                   	pop    ebx
c001b0c1:	5e                   	pop    esi
c001b0c2:	5f                   	pop    edi
c001b0c3:	c3                   	ret    

c001b0c4 <sysCallSeekDir(regs*)>:
c001b0c4:	31 c0                	xor    eax,eax
c001b0c6:	31 d2                	xor    edx,edx
c001b0c8:	c3                   	ret    

c001b0c9 <sysCallTellDir(regs*)>:
c001b0c9:	31 c0                	xor    eax,eax
c001b0cb:	31 d2                	xor    edx,edx
c001b0cd:	c3                   	ret    

c001b0ce <sysCallVerify(regs*)>:
c001b0ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0d2:	31 d2                	xor    edx,edx
c001b0d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0d7:	c3                   	ret    

c001b0d8 <sysCallGetArgc(regs*)>:
c001b0d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0e0:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b0e6:	99                   	cdq    
c001b0e7:	c3                   	ret    

c001b0e8 <sysFormatDisk(regs*)>:
c001b0e8:	56                   	push   esi
c001b0e9:	53                   	push   ebx
c001b0ea:	53                   	push   ebx
c001b0eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0ef:	8b 1d 54 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da54
c001b0f5:	eb 25                	jmp    c001b11c <sysFormatDisk(regs*)+0x34>
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b0fd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0ff:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b102:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b105:	50                   	push   eax
c001b106:	ff 34 85 e0 de 02 c0 	push   DWORD PTR [eax*4-0x3ffd2120]
c001b10d:	53                   	push   ebx
c001b10e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b111:	83 c4 20             	add    esp,0x20
c001b114:	83 f8 08             	cmp    eax,0x8
c001b117:	75 12                	jne    c001b12b <sysFormatDisk(regs*)+0x43>
c001b119:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b11c:	85 db                	test   ebx,ebx
c001b11e:	75 d7                	jne    c001b0f7 <sysFormatDisk(regs*)+0xf>
c001b120:	59                   	pop    ecx
c001b121:	b8 03 00 00 00       	mov    eax,0x3
c001b126:	31 d2                	xor    edx,edx
c001b128:	5b                   	pop    ebx
c001b129:	5e                   	pop    esi
c001b12a:	c3                   	ret    
c001b12b:	85 c0                	test   eax,eax
c001b12d:	74 1b                	je     c001b14a <sysFormatDisk(regs*)+0x62>
c001b12f:	83 f8 09             	cmp    eax,0x9
c001b132:	74 0b                	je     c001b13f <sysFormatDisk(regs*)+0x57>
c001b134:	59                   	pop    ecx
c001b135:	b8 02 00 00 00       	mov    eax,0x2
c001b13a:	31 d2                	xor    edx,edx
c001b13c:	5b                   	pop    ebx
c001b13d:	5e                   	pop    esi
c001b13e:	c3                   	ret    
c001b13f:	59                   	pop    ecx
c001b140:	b8 01 00 00 00       	mov    eax,0x1
c001b145:	31 d2                	xor    edx,edx
c001b147:	5b                   	pop    ebx
c001b148:	5e                   	pop    esi
c001b149:	c3                   	ret    
c001b14a:	59                   	pop    ecx
c001b14b:	31 c0                	xor    eax,eax
c001b14d:	31 d2                	xor    edx,edx
c001b14f:	5b                   	pop    ebx
c001b150:	5e                   	pop    esi
c001b151:	c3                   	ret    

c001b152 <sysSetDiskVolumeLabel(regs*)>:
c001b152:	56                   	push   esi
c001b153:	53                   	push   ebx
c001b154:	53                   	push   ebx
c001b155:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b159:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b15c:	83 f8 19             	cmp    eax,0x19
c001b15f:	77 29                	ja     c001b18a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b161:	8b 0c 85 e0 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2120]
c001b168:	85 c9                	test   ecx,ecx
c001b16a:	74 1e                	je     c001b18a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b16c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b16f:	85 d2                	test   edx,edx
c001b171:	74 17                	je     c001b18a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b173:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b179:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b17b:	52                   	push   edx
c001b17c:	50                   	push   eax
c001b17d:	51                   	push   ecx
c001b17e:	53                   	push   ebx
c001b17f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b182:	83 c4 10             	add    esp,0x10
c001b185:	99                   	cdq    
c001b186:	59                   	pop    ecx
c001b187:	5b                   	pop    ebx
c001b188:	5e                   	pop    esi
c001b189:	c3                   	ret    
c001b18a:	59                   	pop    ecx
c001b18b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b190:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b195:	5b                   	pop    ebx
c001b196:	5e                   	pop    esi
c001b197:	c3                   	ret    

c001b198 <sysGetDiskVolumeLabel(regs*)>:
c001b198:	57                   	push   edi
c001b199:	56                   	push   esi
c001b19a:	53                   	push   ebx
c001b19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b19f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1a2:	83 fa 19             	cmp    edx,0x19
c001b1a5:	77 34                	ja     c001b1db <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1a7:	8b 0c 95 e0 de 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2120]
c001b1ae:	85 c9                	test   ecx,ecx
c001b1b0:	74 29                	je     c001b1db <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1b2:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1b5:	85 db                	test   ebx,ebx
c001b1b7:	74 22                	je     c001b1db <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1b9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1bc:	85 c0                	test   eax,eax
c001b1be:	74 1b                	je     c001b1db <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1c0:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1c6:	83 ec 0c             	sub    esp,0xc
c001b1c9:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1cb:	50                   	push   eax
c001b1cc:	53                   	push   ebx
c001b1cd:	52                   	push   edx
c001b1ce:	51                   	push   ecx
c001b1cf:	56                   	push   esi
c001b1d0:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1d3:	83 c4 20             	add    esp,0x20
c001b1d6:	99                   	cdq    
c001b1d7:	5b                   	pop    ebx
c001b1d8:	5e                   	pop    esi
c001b1d9:	5f                   	pop    edi
c001b1da:	c3                   	ret    
c001b1db:	5b                   	pop    ebx
c001b1dc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1e6:	5e                   	pop    esi
c001b1e7:	5f                   	pop    edi
c001b1e8:	c3                   	ret    

c001b1e9 <sysShutdown(regs*)>:
c001b1e9:	83 ec 0c             	sub    esp,0xc
c001b1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1f3:	85 c0                	test   eax,eax
c001b1f5:	74 18                	je     c001b20f <sysShutdown(regs*)+0x26>
c001b1f7:	83 f8 01             	cmp    eax,0x1
c001b1fa:	74 38                	je     c001b234 <sysShutdown(regs*)+0x4b>
c001b1fc:	83 f8 02             	cmp    eax,0x2
c001b1ff:	74 24                	je     c001b225 <sysShutdown(regs*)+0x3c>
c001b201:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b206:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b20b:	83 c4 0c             	add    esp,0xc
c001b20e:	c3                   	ret    
c001b20f:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001b214:	8b 10                	mov    edx,DWORD PTR [eax]
c001b216:	6a 00                	push   0x0
c001b218:	6a 00                	push   0x0
c001b21a:	6a 00                	push   0x0
c001b21c:	50                   	push   eax
c001b21d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b220:	83 c4 10             	add    esp,0x10
c001b223:	eb dc                	jmp    c001b201 <sysShutdown(regs*)+0x18>
c001b225:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001b22a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b22c:	6a 00                	push   0x0
c001b22e:	6a 00                	push   0x0
c001b230:	6a 01                	push   0x1
c001b232:	eb e8                	jmp    c001b21c <sysShutdown(regs*)+0x33>
c001b234:	a1 80 ff 02 c0       	mov    eax,ds:0xc002ff80
c001b239:	85 c0                	test   eax,eax
c001b23b:	74 02                	je     c001b23f <sysShutdown(regs*)+0x56>
c001b23d:	ff d0                	call   eax
c001b23f:	31 c0                	xor    eax,eax
c001b241:	31 d2                	xor    edx,edx
c001b243:	83 c4 0c             	add    esp,0xc
c001b246:	c3                   	ret    

c001b247 <sysCallRealpath(regs*)>:
c001b247:	83 ec 0c             	sub    esp,0xc
c001b24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b24e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b251:	85 d2                	test   edx,edx
c001b253:	74 07                	je     c001b25c <sysCallRealpath(regs*)+0x15>
c001b255:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b258:	85 c0                	test   eax,eax
c001b25a:	75 0b                	jne    c001b267 <sysCallRealpath(regs*)+0x20>
c001b25c:	b8 01 00 00 00       	mov    eax,0x1
c001b261:	31 d2                	xor    edx,edx
c001b263:	83 c4 0c             	add    esp,0xc
c001b266:	c3                   	ret    
c001b267:	51                   	push   ecx
c001b268:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b26e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b271:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b277:	51                   	push   ecx
c001b278:	52                   	push   edx
c001b279:	50                   	push   eax
c001b27a:	e8 e1 77 ff ff       	call   c0012a60 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b27f:	83 c4 10             	add    esp,0x10
c001b282:	31 c0                	xor    eax,eax
c001b284:	31 d2                	xor    edx,edx
c001b286:	83 c4 0c             	add    esp,0xc
c001b289:	c3                   	ret    

c001b28a <sysCallReadDir(regs*)>:
c001b28a:	53                   	push   ebx
c001b28b:	83 ec 18             	sub    esp,0x18
c001b28e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b292:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b295:	83 f8 02             	cmp    eax,0x2
c001b298:	76 60                	jbe    c001b2fa <sysCallReadDir(regs*)+0x70>
c001b29a:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2a1:	77 48                	ja     c001b2eb <sysCallReadDir(regs*)+0x61>
c001b2a3:	83 ec 0c             	sub    esp,0xc
c001b2a6:	50                   	push   eax
c001b2a7:	e8 fd 5d ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b2ac:	83 c4 10             	add    esp,0x10
c001b2af:	85 c0                	test   eax,eax
c001b2b1:	74 38                	je     c001b2eb <sysCallReadDir(regs*)+0x61>
c001b2b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2bb:	83 ec 0c             	sub    esp,0xc
c001b2be:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2c0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2c4:	51                   	push   ecx
c001b2c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2c8:	6a 00                	push   0x0
c001b2ca:	68 10 01 00 00       	push   0x110
c001b2cf:	50                   	push   eax
c001b2d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2d3:	83 c4 20             	add    esp,0x20
c001b2d6:	85 c0                	test   eax,eax
c001b2d8:	74 29                	je     c001b303 <sysCallReadDir(regs*)+0x79>
c001b2da:	83 f8 07             	cmp    eax,0x7
c001b2dd:	74 1b                	je     c001b2fa <sysCallReadDir(regs*)+0x70>
c001b2df:	b8 02 00 00 00       	mov    eax,0x2
c001b2e4:	31 d2                	xor    edx,edx
c001b2e6:	83 c4 18             	add    esp,0x18
c001b2e9:	5b                   	pop    ebx
c001b2ea:	c3                   	ret    
c001b2eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2f5:	83 c4 18             	add    esp,0x18
c001b2f8:	5b                   	pop    ebx
c001b2f9:	c3                   	ret    
c001b2fa:	b8 01 00 00 00       	mov    eax,0x1
c001b2ff:	31 d2                	xor    edx,edx
c001b301:	eb e3                	jmp    c001b2e6 <sysCallReadDir(regs*)+0x5c>
c001b303:	31 c0                	xor    eax,eax
c001b305:	31 d2                	xor    edx,edx
c001b307:	eb dd                	jmp    c001b2e6 <sysCallReadDir(regs*)+0x5c>

c001b309 <sysCallIsATTY(regs*)>:
c001b309:	83 ec 0c             	sub    esp,0xc
c001b30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b310:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b313:	83 f8 02             	cmp    eax,0x2
c001b316:	76 07                	jbe    c001b31f <sysCallIsATTY(regs*)+0x16>
c001b318:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b31d:	75 26                	jne    c001b345 <sysCallIsATTY(regs*)+0x3c>
c001b31f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b324:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b327:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b32d:	85 c0                	test   eax,eax
c001b32f:	74 24                	je     c001b355 <sysCallIsATTY(regs*)+0x4c>
c001b331:	83 ec 0c             	sub    esp,0xc
c001b334:	8b 10                	mov    edx,DWORD PTR [eax]
c001b336:	50                   	push   eax
c001b337:	ff 12                	call   DWORD PTR [edx]
c001b339:	31 d2                	xor    edx,edx
c001b33b:	0f b6 c0             	movzx  eax,al
c001b33e:	83 c4 10             	add    esp,0x10
c001b341:	83 c4 0c             	add    esp,0xc
c001b344:	c3                   	ret    
c001b345:	83 ec 0c             	sub    esp,0xc
c001b348:	50                   	push   eax
c001b349:	e8 5b 5d ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b34e:	83 c4 10             	add    esp,0x10
c001b351:	85 c0                	test   eax,eax
c001b353:	75 dc                	jne    c001b331 <sysCallIsATTY(regs*)+0x28>
c001b355:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b35a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b35f:	83 c4 0c             	add    esp,0xc
c001b362:	c3                   	ret    

c001b363 <sysCallSeek(regs*)>:
c001b363:	53                   	push   ebx
c001b364:	83 ec 08             	sub    esp,0x8
c001b367:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b36b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b36e:	8d 50 fd             	lea    edx,[eax-0x3]
c001b371:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b377:	77 32                	ja     c001b3ab <sysCallSeek(regs*)+0x48>
c001b379:	83 ec 0c             	sub    esp,0xc
c001b37c:	50                   	push   eax
c001b37d:	e8 27 5d ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b382:	83 c4 0c             	add    esp,0xc
c001b385:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b388:	31 db                	xor    ebx,ebx
c001b38a:	53                   	push   ebx
c001b38b:	51                   	push   ecx
c001b38c:	50                   	push   eax
c001b38d:	e8 9a 79 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001b392:	83 c4 10             	add    esp,0x10
c001b395:	85 c0                	test   eax,eax
c001b397:	0f 95 c0             	setne  al
c001b39a:	31 d2                	xor    edx,edx
c001b39c:	0f b6 c0             	movzx  eax,al
c001b39f:	f7 d8                	neg    eax
c001b3a1:	83 d2 00             	adc    edx,0x0
c001b3a4:	83 c4 08             	add    esp,0x8
c001b3a7:	f7 da                	neg    edx
c001b3a9:	5b                   	pop    ebx
c001b3aa:	c3                   	ret    
c001b3ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3b5:	83 c4 08             	add    esp,0x8
c001b3b8:	5b                   	pop    ebx
c001b3b9:	c3                   	ret    

c001b3ba <sysCallTell(regs*)>:
c001b3ba:	53                   	push   ebx
c001b3bb:	83 ec 08             	sub    esp,0x8
c001b3be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3c5:	83 f8 02             	cmp    eax,0x2
c001b3c8:	76 4d                	jbe    c001b417 <sysCallTell(regs*)+0x5d>
c001b3ca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3cf:	76 19                	jbe    c001b3ea <sysCallTell(regs*)+0x30>
c001b3d1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3d4:	31 d2                	xor    edx,edx
c001b3d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3e3:	31 c0                	xor    eax,eax
c001b3e5:	83 c4 08             	add    esp,0x8
c001b3e8:	5b                   	pop    ebx
c001b3e9:	c3                   	ret    
c001b3ea:	83 ec 0c             	sub    esp,0xc
c001b3ed:	50                   	push   eax
c001b3ee:	e8 b6 5c ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b3f3:	5a                   	pop    edx
c001b3f4:	59                   	pop    ecx
c001b3f5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b3f8:	50                   	push   eax
c001b3f9:	e8 84 79 ff ff       	call   c0012d82 <File::tell(unsigned long long*)>
c001b3fe:	83 c4 10             	add    esp,0x10
c001b401:	85 c0                	test   eax,eax
c001b403:	0f 95 c0             	setne  al
c001b406:	31 d2                	xor    edx,edx
c001b408:	0f b6 c0             	movzx  eax,al
c001b40b:	f7 d8                	neg    eax
c001b40d:	83 d2 00             	adc    edx,0x0
c001b410:	83 c4 08             	add    esp,0x8
c001b413:	f7 da                	neg    edx
c001b415:	5b                   	pop    ebx
c001b416:	c3                   	ret    
c001b417:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b41c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b421:	83 c4 08             	add    esp,0x8
c001b424:	5b                   	pop    ebx
c001b425:	c3                   	ret    

c001b426 <sysCallSize(regs*)>:
c001b426:	53                   	push   ebx
c001b427:	83 ec 18             	sub    esp,0x18
c001b42a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b42e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b431:	83 f8 02             	cmp    eax,0x2
c001b434:	76 53                	jbe    c001b489 <sysCallSize(regs*)+0x63>
c001b436:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b43b:	76 19                	jbe    c001b456 <sysCallSize(regs*)+0x30>
c001b43d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b440:	31 d2                	xor    edx,edx
c001b442:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b448:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b44f:	31 c0                	xor    eax,eax
c001b451:	83 c4 18             	add    esp,0x18
c001b454:	5b                   	pop    ebx
c001b455:	c3                   	ret    
c001b456:	83 ec 0c             	sub    esp,0xc
c001b459:	50                   	push   eax
c001b45a:	e8 4a 5c ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b45f:	83 c4 0c             	add    esp,0xc
c001b462:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b466:	52                   	push   edx
c001b467:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b46a:	50                   	push   eax
c001b46b:	e8 aa 7a ff ff       	call   c0012f1a <File::stat(unsigned long long*, bool*)>
c001b470:	83 c4 10             	add    esp,0x10
c001b473:	85 c0                	test   eax,eax
c001b475:	0f 95 c0             	setne  al
c001b478:	31 d2                	xor    edx,edx
c001b47a:	0f b6 c0             	movzx  eax,al
c001b47d:	f7 d8                	neg    eax
c001b47f:	83 d2 00             	adc    edx,0x0
c001b482:	83 c4 18             	add    esp,0x18
c001b485:	f7 da                	neg    edx
c001b487:	5b                   	pop    ebx
c001b488:	c3                   	ret    
c001b489:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b48e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b493:	83 c4 18             	add    esp,0x18
c001b496:	5b                   	pop    ebx
c001b497:	c3                   	ret    

c001b498 <sysCallSizeFromFilename(regs*)>:
c001b498:	57                   	push   edi
c001b499:	56                   	push   esi
c001b49a:	53                   	push   ebx
c001b49b:	83 ec 20             	sub    esp,0x20
c001b49e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4a2:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4a5:	83 fb 02             	cmp    ebx,0x2
c001b4a8:	0f 86 88 00 00 00    	jbe    c001b536 <sysCallSizeFromFilename(regs*)+0x9e>
c001b4ae:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4b4:	76 1b                	jbe    c001b4d1 <sysCallSizeFromFilename(regs*)+0x39>
c001b4b6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4b9:	31 d2                	xor    edx,edx
c001b4bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4c8:	83 c4 20             	add    esp,0x20
c001b4cb:	31 c0                	xor    eax,eax
c001b4cd:	5b                   	pop    ebx
c001b4ce:	5e                   	pop    esi
c001b4cf:	5f                   	pop    edi
c001b4d0:	c3                   	ret    
c001b4d1:	83 ec 0c             	sub    esp,0xc
c001b4d4:	68 14 01 00 00       	push   0x114
c001b4d9:	e8 bb 40 ff ff       	call   c000f599 <malloc>
c001b4de:	83 c4 0c             	add    esp,0xc
c001b4e1:	89 c7                	mov    edi,eax
c001b4e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4eb:	53                   	push   ebx
c001b4ec:	57                   	push   edi
c001b4ed:	e8 18 77 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001b4f2:	83 c4 0c             	add    esp,0xc
c001b4f5:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b4f9:	50                   	push   eax
c001b4fa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b4fd:	57                   	push   edi
c001b4fe:	e8 17 7a ff ff       	call   c0012f1a <File::stat(unsigned long long*, bool*)>
c001b503:	83 c4 10             	add    esp,0x10
c001b506:	85 ff                	test   edi,edi
c001b508:	74 14                	je     c001b51e <sysCallSizeFromFilename(regs*)+0x86>
c001b50a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b50e:	8b 17                	mov    edx,DWORD PTR [edi]
c001b510:	83 ec 0c             	sub    esp,0xc
c001b513:	57                   	push   edi
c001b514:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b517:	83 c4 10             	add    esp,0x10
c001b51a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b51e:	85 c0                	test   eax,eax
c001b520:	0f 95 c0             	setne  al
c001b523:	31 d2                	xor    edx,edx
c001b525:	0f b6 c0             	movzx  eax,al
c001b528:	f7 d8                	neg    eax
c001b52a:	83 d2 00             	adc    edx,0x0
c001b52d:	83 c4 20             	add    esp,0x20
c001b530:	f7 da                	neg    edx
c001b532:	5b                   	pop    ebx
c001b533:	5e                   	pop    esi
c001b534:	5f                   	pop    edi
c001b535:	c3                   	ret    
c001b536:	83 c4 20             	add    esp,0x20
c001b539:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b53e:	5b                   	pop    ebx
c001b53f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b544:	5e                   	pop    esi
c001b545:	5f                   	pop    edi
c001b546:	c3                   	ret    

c001b547 <sysCallClose(regs*)>:
c001b547:	53                   	push   ebx
c001b548:	83 ec 08             	sub    esp,0x8
c001b54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b54f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b552:	83 f8 02             	cmp    eax,0x2
c001b555:	76 41                	jbe    c001b598 <sysCallClose(regs*)+0x51>
c001b557:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b55d:	83 fa 01             	cmp    edx,0x1
c001b560:	76 2d                	jbe    c001b58f <sysCallClose(regs*)+0x48>
c001b562:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b567:	77 2f                	ja     c001b598 <sysCallClose(regs*)+0x51>
c001b569:	83 ec 0c             	sub    esp,0xc
c001b56c:	50                   	push   eax
c001b56d:	e8 37 5b ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b572:	89 c3                	mov    ebx,eax
c001b574:	89 04 24             	mov    DWORD PTR [esp],eax
c001b577:	e8 50 77 ff ff       	call   c0012ccc <File::close()>
c001b57c:	83 c4 10             	add    esp,0x10
c001b57f:	85 db                	test   ebx,ebx
c001b581:	74 0c                	je     c001b58f <sysCallClose(regs*)+0x48>
c001b583:	83 ec 0c             	sub    esp,0xc
c001b586:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b588:	53                   	push   ebx
c001b589:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b58c:	83 c4 10             	add    esp,0x10
c001b58f:	31 c0                	xor    eax,eax
c001b591:	31 d2                	xor    edx,edx
c001b593:	83 c4 08             	add    esp,0x8
c001b596:	5b                   	pop    ebx
c001b597:	c3                   	ret    
c001b598:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b59d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5a2:	83 c4 08             	add    esp,0x8
c001b5a5:	5b                   	pop    ebx
c001b5a6:	c3                   	ret    

c001b5a7 <sysCallOpenDir(regs*)>:
c001b5a7:	56                   	push   esi
c001b5a8:	53                   	push   ebx
c001b5a9:	53                   	push   ebx
c001b5aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5ae:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5b1:	85 f6                	test   esi,esi
c001b5b3:	74 59                	je     c001b60e <sysCallOpenDir(regs*)+0x67>
c001b5b5:	83 ec 0c             	sub    esp,0xc
c001b5b8:	68 14 01 00 00       	push   0x114
c001b5bd:	e8 d7 3f ff ff       	call   c000f599 <malloc>
c001b5c2:	83 c4 0c             	add    esp,0xc
c001b5c5:	89 c6                	mov    esi,eax
c001b5c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5d2:	56                   	push   esi
c001b5d3:	e8 de 7a ff ff       	call   c00130b6 <Directory::Directory(char const*, Process*)>
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	85 f6                	test   esi,esi
c001b5dd:	74 2f                	je     c001b60e <sysCallOpenDir(regs*)+0x67>
c001b5df:	83 ec 0c             	sub    esp,0xc
c001b5e2:	56                   	push   esi
c001b5e3:	e8 32 7b ff ff       	call   c001311a <Directory::open()>
c001b5e8:	83 c4 10             	add    esp,0x10
c001b5eb:	85 c0                	test   eax,eax
c001b5ed:	75 1f                	jne    c001b60e <sysCallOpenDir(regs*)+0x67>
c001b5ef:	83 ec 0c             	sub    esp,0xc
c001b5f2:	56                   	push   esi
c001b5f3:	e8 bc 57 ff ff       	call   c0010db4 <UnixFile::getFileDescriptor()>
c001b5f8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	89 02                	mov    DWORD PTR [edx],eax
c001b600:	c1 f8 1f             	sar    eax,0x1f
c001b603:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b606:	31 c0                	xor    eax,eax
c001b608:	59                   	pop    ecx
c001b609:	31 d2                	xor    edx,edx
c001b60b:	5b                   	pop    ebx
c001b60c:	5e                   	pop    esi
c001b60d:	c3                   	ret    
c001b60e:	59                   	pop    ecx
c001b60f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b614:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b619:	5b                   	pop    ebx
c001b61a:	5e                   	pop    esi
c001b61b:	c3                   	ret    

c001b61c <sysCallCloseDir(regs*)>:
c001b61c:	53                   	push   ebx
c001b61d:	83 ec 08             	sub    esp,0x8
c001b620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b624:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b627:	8d 50 fd             	lea    edx,[eax-0x3]
c001b62a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b630:	77 2f                	ja     c001b661 <sysCallCloseDir(regs*)+0x45>
c001b632:	83 ec 0c             	sub    esp,0xc
c001b635:	50                   	push   eax
c001b636:	e8 6e 5a ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b63b:	89 c3                	mov    ebx,eax
c001b63d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b640:	e8 31 7b ff ff       	call   c0013176 <Directory::close()>
c001b645:	83 c4 10             	add    esp,0x10
c001b648:	85 db                	test   ebx,ebx
c001b64a:	74 0c                	je     c001b658 <sysCallCloseDir(regs*)+0x3c>
c001b64c:	83 ec 0c             	sub    esp,0xc
c001b64f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b651:	53                   	push   ebx
c001b652:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b655:	83 c4 10             	add    esp,0x10
c001b658:	31 c0                	xor    eax,eax
c001b65a:	31 d2                	xor    edx,edx
c001b65c:	83 c4 08             	add    esp,0x8
c001b65f:	5b                   	pop    ebx
c001b660:	c3                   	ret    
c001b661:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b666:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b66b:	83 c4 08             	add    esp,0x8
c001b66e:	5b                   	pop    ebx
c001b66f:	c3                   	ret    

c001b670 <sysCallMakeDir(regs*)>:
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	83 ec 10             	sub    esp,0x10
c001b675:	68 14 01 00 00       	push   0x114
c001b67a:	e8 1a 3f ff ff       	call   c000f599 <malloc>
c001b67f:	83 c4 0c             	add    esp,0xc
c001b682:	89 c3                	mov    ebx,eax
c001b684:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b689:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b68c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b690:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b693:	53                   	push   ebx
c001b694:	e8 1d 7a ff ff       	call   c00130b6 <Directory::Directory(char const*, Process*)>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	85 db                	test   ebx,ebx
c001b69e:	74 32                	je     c001b6d2 <sysCallMakeDir(regs*)+0x62>
c001b6a0:	83 ec 0c             	sub    esp,0xc
c001b6a3:	53                   	push   ebx
c001b6a4:	e8 51 7c ff ff       	call   c00132fa <Directory::create()>
c001b6a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6ac:	89 c6                	mov    esi,eax
c001b6ae:	e8 c3 7a ff ff       	call   c0013176 <Directory::close()>
c001b6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	31 c0                	xor    eax,eax
c001b6c0:	59                   	pop    ecx
c001b6c1:	85 f6                	test   esi,esi
c001b6c3:	5b                   	pop    ebx
c001b6c4:	0f 95 c0             	setne  al
c001b6c7:	5e                   	pop    esi
c001b6c8:	31 d2                	xor    edx,edx
c001b6ca:	f7 d8                	neg    eax
c001b6cc:	83 d2 00             	adc    edx,0x0
c001b6cf:	f7 da                	neg    edx
c001b6d1:	c3                   	ret    
c001b6d2:	59                   	pop    ecx
c001b6d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6dd:	5b                   	pop    ebx
c001b6de:	5e                   	pop    esi
c001b6df:	c3                   	ret    

c001b6e0 <sysCallWait(regs*)>:
c001b6e0:	83 ec 10             	sub    esp,0x10
c001b6e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6e7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b6ea:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6ed:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b6f0:	e8 af 24 00 00       	call   c001dba4 <waitTask(int, int*, int)>
c001b6f5:	83 c4 1c             	add    esp,0x1c
c001b6f8:	99                   	cdq    
c001b6f9:	c3                   	ret    

c001b6fa <sysCallNotImpl(regs*)>:
c001b6fa:	83 ec 18             	sub    esp,0x18
c001b6fd:	68 59 b8 02 c0       	push   0xc002b859
c001b702:	e8 10 e7 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001b707:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b70c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b711:	83 c4 1c             	add    esp,0x1c
c001b714:	c3                   	ret    

c001b715 <sysPanic(regs*)>:
c001b715:	83 ec 18             	sub    esp,0x18
c001b718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b71c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b71f:	e8 f3 e6 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001b724:	b8 01 00 00 00       	mov    eax,0x1
c001b729:	31 d2                	xor    edx,edx
c001b72b:	83 c4 1c             	add    esp,0x1c
c001b72e:	c3                   	ret    

c001b72f <sysCallRmdir(regs*)>:
c001b72f:	56                   	push   esi
c001b730:	53                   	push   ebx
c001b731:	83 ec 20             	sub    esp,0x20
c001b734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b738:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b73b:	68 14 01 00 00       	push   0x114
c001b740:	e8 54 3e ff ff       	call   c000f599 <malloc>
c001b745:	83 c4 0c             	add    esp,0xc
c001b748:	89 c3                	mov    ebx,eax
c001b74a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b74f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b752:	56                   	push   esi
c001b753:	53                   	push   ebx
c001b754:	e8 b1 74 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001b759:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b75c:	e8 85 76 ff ff       	call   c0012de6 <File::unlink()>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	85 db                	test   ebx,ebx
c001b766:	74 14                	je     c001b77c <sysCallRmdir(regs*)+0x4d>
c001b768:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b76c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b76e:	83 ec 0c             	sub    esp,0xc
c001b771:	53                   	push   ebx
c001b772:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b775:	83 c4 10             	add    esp,0x10
c001b778:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b77c:	85 c0                	test   eax,eax
c001b77e:	0f 95 c0             	setne  al
c001b781:	31 d2                	xor    edx,edx
c001b783:	0f b6 c0             	movzx  eax,al
c001b786:	f7 d8                	neg    eax
c001b788:	83 d2 00             	adc    edx,0x0
c001b78b:	83 c4 14             	add    esp,0x14
c001b78e:	f7 da                	neg    edx
c001b790:	5b                   	pop    ebx
c001b791:	5e                   	pop    esi
c001b792:	c3                   	ret    

c001b793 <sysCallUnlink(regs*)>:
c001b793:	56                   	push   esi
c001b794:	53                   	push   ebx
c001b795:	83 ec 20             	sub    esp,0x20
c001b798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b79c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b79f:	68 14 01 00 00       	push   0x114
c001b7a4:	e8 f0 3d ff ff       	call   c000f599 <malloc>
c001b7a9:	83 c4 0c             	add    esp,0xc
c001b7ac:	89 c3                	mov    ebx,eax
c001b7ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7b3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7b6:	56                   	push   esi
c001b7b7:	53                   	push   ebx
c001b7b8:	e8 4d 74 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001b7bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7c0:	e8 21 76 ff ff       	call   c0012de6 <File::unlink()>
c001b7c5:	83 c4 10             	add    esp,0x10
c001b7c8:	85 db                	test   ebx,ebx
c001b7ca:	74 14                	je     c001b7e0 <sysCallUnlink(regs*)+0x4d>
c001b7cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7d2:	83 ec 0c             	sub    esp,0xc
c001b7d5:	53                   	push   ebx
c001b7d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7e0:	85 c0                	test   eax,eax
c001b7e2:	0f 95 c0             	setne  al
c001b7e5:	31 d2                	xor    edx,edx
c001b7e7:	0f b6 c0             	movzx  eax,al
c001b7ea:	f7 d8                	neg    eax
c001b7ec:	83 d2 00             	adc    edx,0x0
c001b7ef:	83 c4 14             	add    esp,0x14
c001b7f2:	f7 da                	neg    edx
c001b7f4:	5b                   	pop    ebx
c001b7f5:	5e                   	pop    esi
c001b7f6:	c3                   	ret    

c001b7f7 <sysCallGetArgv(regs*)>:
c001b7f7:	83 ec 0c             	sub    esp,0xc
c001b7fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7fe:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b801:	85 c0                	test   eax,eax
c001b803:	78 2b                	js     c001b830 <sysCallGetArgv(regs*)+0x39>
c001b805:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b80b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b80e:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b814:	7d 1a                	jge    c001b830 <sysCallGetArgv(regs*)+0x39>
c001b816:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b81d:	85 c0                	test   eax,eax
c001b81f:	74 17                	je     c001b838 <sysCallGetArgv(regs*)+0x41>
c001b821:	83 ec 08             	sub    esp,0x8
c001b824:	50                   	push   eax
c001b825:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b828:	e8 df 4f fe ff       	call   c000080c <strcpy>
c001b82d:	83 c4 10             	add    esp,0x10
c001b830:	31 c0                	xor    eax,eax
c001b832:	31 d2                	xor    edx,edx
c001b834:	83 c4 0c             	add    esp,0xc
c001b837:	c3                   	ret    
c001b838:	b8 01 00 00 00       	mov    eax,0x1
c001b83d:	31 d2                	xor    edx,edx
c001b83f:	83 c4 0c             	add    esp,0xc
c001b842:	c3                   	ret    

c001b843 <sysCallTTYName(regs*)>:
c001b843:	56                   	push   esi
c001b844:	53                   	push   ebx
c001b845:	53                   	push   ebx
c001b846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b84a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b84d:	85 c0                	test   eax,eax
c001b84f:	74 5f                	je     c001b8b0 <sysCallTTYName(regs*)+0x6d>
c001b851:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b854:	83 f8 02             	cmp    eax,0x2
c001b857:	77 3e                	ja     c001b897 <sysCallTTYName(regs*)+0x54>
c001b859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b85e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b861:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b867:	85 db                	test   ebx,ebx
c001b869:	74 45                	je     c001b8b0 <sysCallTTYName(regs*)+0x6d>
c001b86b:	83 ec 0c             	sub    esp,0xc
c001b86e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b870:	53                   	push   ebx
c001b871:	ff 10                	call   DWORD PTR [eax]
c001b873:	83 c4 10             	add    esp,0x10
c001b876:	84 c0                	test   al,al
c001b878:	74 41                	je     c001b8bb <sysCallTTYName(regs*)+0x78>
c001b87a:	83 ec 08             	sub    esp,0x8
c001b87d:	81 c3 82 00 00 00    	add    ebx,0x82
c001b883:	53                   	push   ebx
c001b884:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b887:	e8 80 4f fe ff       	call   c000080c <strcpy>
c001b88c:	83 c4 10             	add    esp,0x10
c001b88f:	31 c0                	xor    eax,eax
c001b891:	59                   	pop    ecx
c001b892:	31 d2                	xor    edx,edx
c001b894:	5b                   	pop    ebx
c001b895:	5e                   	pop    esi
c001b896:	c3                   	ret    
c001b897:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b89c:	74 bb                	je     c001b859 <sysCallTTYName(regs*)+0x16>
c001b89e:	83 ec 0c             	sub    esp,0xc
c001b8a1:	50                   	push   eax
c001b8a2:	e8 02 58 ff ff       	call   c00110a9 <getFromFileDescriptor(int)>
c001b8a7:	83 c4 10             	add    esp,0x10
c001b8aa:	89 c3                	mov    ebx,eax
c001b8ac:	85 db                	test   ebx,ebx
c001b8ae:	75 bb                	jne    c001b86b <sysCallTTYName(regs*)+0x28>
c001b8b0:	59                   	pop    ecx
c001b8b1:	b8 01 00 00 00       	mov    eax,0x1
c001b8b6:	31 d2                	xor    edx,edx
c001b8b8:	5b                   	pop    ebx
c001b8b9:	5e                   	pop    esi
c001b8ba:	c3                   	ret    
c001b8bb:	59                   	pop    ecx
c001b8bc:	b8 02 00 00 00       	mov    eax,0x2
c001b8c1:	31 d2                	xor    edx,edx
c001b8c3:	5b                   	pop    ebx
c001b8c4:	5e                   	pop    esi
c001b8c5:	c3                   	ret    

c001b8c6 <sysCallUSleep(regs*)>:
c001b8c6:	83 ec 14             	sub    esp,0x14
c001b8c9:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b8ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8d2:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b8d9:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b8dc:	01 ca                	add    edx,ecx
c001b8de:	52                   	push   edx
c001b8df:	50                   	push   eax
c001b8e0:	e8 96 23 00 00       	call   c001dc7b <nanoSleep(unsigned long long)>
c001b8e5:	31 c0                	xor    eax,eax
c001b8e7:	31 d2                	xor    edx,edx
c001b8e9:	83 c4 1c             	add    esp,0x1c
c001b8ec:	c3                   	ret    

c001b8ed <sysCallSpawn(regs*)>:
c001b8ed:	56                   	push   esi
c001b8ee:	53                   	push   ebx
c001b8ef:	50                   	push   eax
c001b8f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b8f7:	85 c0                	test   eax,eax
c001b8f9:	75 08                	jne    c001b903 <sysCallSpawn(regs*)+0x16>
c001b8fb:	59                   	pop    ecx
c001b8fc:	31 c0                	xor    eax,eax
c001b8fe:	31 d2                	xor    edx,edx
c001b900:	5b                   	pop    ebx
c001b901:	5e                   	pop    esi
c001b902:	c3                   	ret    
c001b903:	83 ec 0c             	sub    esp,0xc
c001b906:	68 3f 07 00 00       	push   0x73f
c001b90b:	e8 89 3c ff ff       	call   c000f599 <malloc>
c001b910:	83 c4 10             	add    esp,0x10
c001b913:	89 c6                	mov    esi,eax
c001b915:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b918:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b91b:	85 c0                	test   eax,eax
c001b91d:	75 32                	jne    c001b951 <sysCallSpawn(regs*)+0x64>
c001b91f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b924:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b927:	52                   	push   edx
c001b928:	50                   	push   eax
c001b929:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b92c:	56                   	push   esi
c001b92d:	e8 6e 1a 00 00       	call   c001d3a0 <Process::Process(char const*, Process*, char**)>
c001b932:	83 c4 10             	add    esp,0x10
c001b935:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b93c:	75 bd                	jne    c001b8fb <sysCallSpawn(regs*)+0xe>
c001b93e:	83 ec 0c             	sub    esp,0xc
c001b941:	56                   	push   esi
c001b942:	e8 3b 1f 00 00       	call   c001d882 <Process::createUserThread()>
c001b947:	8b 06                	mov    eax,DWORD PTR [esi]
c001b949:	83 c4 10             	add    esp,0x10
c001b94c:	99                   	cdq    
c001b94d:	59                   	pop    ecx
c001b94e:	5b                   	pop    ebx
c001b94f:	5e                   	pop    esi
c001b950:	c3                   	ret    
c001b951:	31 c0                	xor    eax,eax
c001b953:	eb d2                	jmp    c001b927 <sysCallSpawn(regs*)+0x3a>

c001b955 <sysCallGetEnv(regs*)>:
c001b955:	57                   	push   edi
c001b956:	56                   	push   esi
c001b957:	53                   	push   ebx
c001b958:	83 ec 1c             	sub    esp,0x1c
c001b95b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b95f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b964:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b967:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b96a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b96d:	e8 f1 e3 ff ff       	call   c0019d63 <Krnl::getProcessTotalEnvCount(Process*)>
c001b972:	83 c4 10             	add    esp,0x10
c001b975:	39 c7                	cmp    edi,eax
c001b977:	7c 14                	jl     c001b98d <sysCallGetEnv(regs*)+0x38>
c001b979:	85 f6                	test   esi,esi
c001b97b:	75 0b                	jne    c001b988 <sysCallGetEnv(regs*)+0x33>
c001b97d:	83 c4 10             	add    esp,0x10
c001b980:	31 c0                	xor    eax,eax
c001b982:	5b                   	pop    ebx
c001b983:	31 d2                	xor    edx,edx
c001b985:	5e                   	pop    esi
c001b986:	5f                   	pop    edi
c001b987:	c3                   	ret    
c001b988:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b98b:	eb f0                	jmp    c001b97d <sysCallGetEnv(regs*)+0x28>
c001b98d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b991:	52                   	push   edx
c001b992:	57                   	push   edi
c001b993:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b999:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b99c:	50                   	push   eax
c001b99d:	e8 e1 e3 ff ff       	call   c0019d83 <Krnl::getProcessEnvPair(Process*, int)>
c001b9a2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9ad:	83 c4 0c             	add    esp,0xc
c001b9b0:	85 c9                	test   ecx,ecx
c001b9b2:	75 23                	jne    c001b9d7 <sysCallGetEnv(regs*)+0x82>
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	50                   	push   eax
c001b9b8:	e8 af 4d fe ff       	call   c000076c <strlen>
c001b9bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9c0:	89 c3                	mov    ebx,eax
c001b9c2:	e8 a5 4d fe ff       	call   c000076c <strlen>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b9ce:	83 c4 10             	add    esp,0x10
c001b9d1:	31 d2                	xor    edx,edx
c001b9d3:	5b                   	pop    ebx
c001b9d4:	5e                   	pop    esi
c001b9d5:	5f                   	pop    edi
c001b9d6:	c3                   	ret    
c001b9d7:	83 ec 08             	sub    esp,0x8
c001b9da:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9dd:	50                   	push   eax
c001b9de:	56                   	push   esi
c001b9df:	e8 28 4e fe ff       	call   c000080c <strcpy>
c001b9e4:	58                   	pop    eax
c001b9e5:	5a                   	pop    edx
c001b9e6:	68 73 b8 02 c0       	push   0xc002b873
c001b9eb:	56                   	push   esi
c001b9ec:	e8 5b 4f fe ff       	call   c000094c <strcat>
c001b9f1:	59                   	pop    ecx
c001b9f2:	5b                   	pop    ebx
c001b9f3:	57                   	push   edi
c001b9f4:	56                   	push   esi
c001b9f5:	e8 52 4f fe ff       	call   c000094c <strcat>
c001b9fa:	83 c4 10             	add    esp,0x10
c001b9fd:	e9 7b ff ff ff       	jmp    c001b97d <sysCallGetEnv(regs*)+0x28>

c001ba02 <sysAppSettings(regs*)>:
c001ba02:	57                   	push   edi
c001ba03:	56                   	push   esi
c001ba04:	56                   	push   esi
c001ba05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba09:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba0c:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba12:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba17:	66 3d c0 09          	cmp    ax,0x9c0
c001ba1b:	75 2e                	jne    c001ba4b <sysAppSettings(regs*)+0x49>
c001ba1d:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba23:	83 e0 1f             	and    eax,0x1f
c001ba26:	3c 01                	cmp    al,0x1
c001ba28:	74 2c                	je     c001ba56 <sysAppSettings(regs*)+0x54>
c001ba2a:	3c 07                	cmp    al,0x7
c001ba2c:	0f 84 b3 00 00 00    	je     c001bae5 <sysAppSettings(regs*)+0xe3>
c001ba32:	84 c0                	test   al,al
c001ba34:	0f 84 d2 00 00 00    	je     c001bb0c <sysAppSettings(regs*)+0x10a>
c001ba3a:	3c 08                	cmp    al,0x8
c001ba3c:	74 63                	je     c001baa1 <sysAppSettings(regs*)+0x9f>
c001ba3e:	59                   	pop    ecx
c001ba3f:	0f b6 c0             	movzx  eax,al
c001ba42:	5e                   	pop    esi
c001ba43:	05 e8 03 00 00       	add    eax,0x3e8
c001ba48:	5f                   	pop    edi
c001ba49:	99                   	cdq    
c001ba4a:	c3                   	ret    
c001ba4b:	b8 01 00 00 00       	mov    eax,0x1
c001ba50:	59                   	pop    ecx
c001ba51:	31 d2                	xor    edx,edx
c001ba53:	5e                   	pop    esi
c001ba54:	5f                   	pop    edi
c001ba55:	c3                   	ret    
c001ba56:	50                   	push   eax
c001ba57:	68 00 01 00 00       	push   0x100
c001ba5c:	6a 00                	push   0x0
c001ba5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba66:	83 c0 0c             	add    eax,0xc
c001ba69:	50                   	push   eax
c001ba6a:	e8 e1 4c fe ff       	call   c0000750 <memset>
c001ba6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba74:	b9 ff 00 00 00       	mov    ecx,0xff
c001ba79:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001ba7c:	83 c7 0c             	add    edi,0xc
c001ba7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba86:	5a                   	pop    edx
c001ba87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba8a:	59                   	pop    ecx
c001ba8b:	8d 50 0c             	lea    edx,[eax+0xc]
c001ba8e:	52                   	push   edx
c001ba8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba95:	e8 3a 47 ff ff       	call   c00101d4 <VgaText::setTitle(char*)>
c001ba9a:	83 c4 10             	add    esp,0x10
c001ba9d:	31 c0                	xor    eax,eax
c001ba9f:	eb af                	jmp    c001ba50 <sysAppSettings(regs*)+0x4e>
c001baa1:	83 ec 08             	sub    esp,0x8
c001baa4:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001baaa:	83 e0 0f             	and    eax,0xf
c001baad:	50                   	push   eax
c001baae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bab3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bab6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001babc:	e8 03 47 ff ff       	call   c00101c4 <VgaText::setTitleColour(VgaColour)>
c001bac1:	5f                   	pop    edi
c001bac2:	58                   	pop    eax
c001bac3:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bac9:	c1 e8 04             	shr    eax,0x4
c001bacc:	83 e0 0f             	and    eax,0xf
c001bacf:	50                   	push   eax
c001bad0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bad8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bade:	e8 d1 46 ff ff       	call   c00101b4 <VgaText::setTitleTextColour(VgaColour)>
c001bae3:	eb b5                	jmp    c001ba9a <sysAppSettings(regs*)+0x98>
c001bae5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baed:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001baf3:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001baf9:	c0 e8 06             	shr    al,0x6
c001bafc:	83 e0 01             	and    eax,0x1
c001baff:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb05:	31 c0                	xor    eax,eax
c001bb07:	e9 44 ff ff ff       	jmp    c001ba50 <sysAppSettings(regs*)+0x4e>
c001bb0c:	b8 02 00 00 00       	mov    eax,0x2
c001bb11:	e9 3a ff ff ff       	jmp    c001ba50 <sysAppSettings(regs*)+0x4e>

c001bb16 <sysSetFatAttrib(regs*)>:
c001bb16:	57                   	push   edi
c001bb17:	56                   	push   esi
c001bb18:	53                   	push   ebx
c001bb19:	83 ec 1c             	sub    esp,0x1c
c001bb1c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb20:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb23:	68 14 01 00 00       	push   0x114
c001bb28:	e8 6c 3a ff ff       	call   c000f599 <malloc>
c001bb2d:	83 c4 0c             	add    esp,0xc
c001bb30:	89 c3                	mov    ebx,eax
c001bb32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb37:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb3a:	57                   	push   edi
c001bb3b:	53                   	push   ebx
c001bb3c:	e8 c9 70 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001bb41:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb44:	83 c4 0c             	add    esp,0xc
c001bb47:	0f b6 d4             	movzx  edx,ah
c001bb4a:	0f b6 c0             	movzx  eax,al
c001bb4d:	52                   	push   edx
c001bb4e:	50                   	push   eax
c001bb4f:	53                   	push   ebx
c001bb50:	e8 2b 73 ff ff       	call   c0012e80 <File::chfatattr(unsigned char, unsigned char)>
c001bb55:	83 c4 10             	add    esp,0x10
c001bb58:	85 db                	test   ebx,ebx
c001bb5a:	74 14                	je     c001bb70 <sysSetFatAttrib(regs*)+0x5a>
c001bb5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb60:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb62:	83 ec 0c             	sub    esp,0xc
c001bb65:	53                   	push   ebx
c001bb66:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb69:	83 c4 10             	add    esp,0x10
c001bb6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb70:	85 c0                	test   eax,eax
c001bb72:	0f 95 c0             	setne  al
c001bb75:	31 d2                	xor    edx,edx
c001bb77:	0f b6 c0             	movzx  eax,al
c001bb7a:	f7 d8                	neg    eax
c001bb7c:	83 d2 00             	adc    edx,0x0
c001bb7f:	83 c4 10             	add    esp,0x10
c001bb82:	f7 da                	neg    edx
c001bb84:	5b                   	pop    ebx
c001bb85:	5e                   	pop    esi
c001bb86:	5f                   	pop    edi
c001bb87:	c3                   	ret    

c001bb88 <sysPipe(regs*)>:
c001bb88:	57                   	push   edi
c001bb89:	56                   	push   esi
c001bb8a:	53                   	push   ebx
c001bb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8f:	83 ec 0c             	sub    esp,0xc
c001bb92:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bb95:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bb98:	6a 20                	push   0x20
c001bb9a:	e8 fa 39 ff ff       	call   c000f599 <malloc>
c001bb9f:	89 c3                	mov    ebx,eax
c001bba1:	58                   	pop    eax
c001bba2:	5a                   	pop    edx
c001bba3:	68 00 50 00 00       	push   0x5000
c001bba8:	53                   	push   ebx
c001bba9:	e8 9e 43 ff ff       	call   c000ff4c <Pipe::Pipe(int)>
c001bbae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbb1:	e8 fe 51 ff ff       	call   c0010db4 <UnixFile::getFileDescriptor()>
c001bbb6:	89 07                	mov    DWORD PTR [edi],eax
c001bbb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbbb:	e8 f4 51 ff ff       	call   c0010db4 <UnixFile::getFileDescriptor()>
c001bbc0:	83 c4 10             	add    esp,0x10
c001bbc3:	89 06                	mov    DWORD PTR [esi],eax
c001bbc5:	31 d2                	xor    edx,edx
c001bbc7:	5b                   	pop    ebx
c001bbc8:	31 c0                	xor    eax,eax
c001bbca:	5e                   	pop    esi
c001bbcb:	5f                   	pop    edi
c001bbcc:	c3                   	ret    

c001bbcd <sysGetUnixTime(regs*)>:
c001bbcd:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001bbd2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bbd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbdc:	e9 1b 7a ff ff       	jmp    c00135fc <Clock::timeInSecondsLocal()>

c001bbe1 <string_ends_with(char const*, char const*)>:
c001bbe1:	57                   	push   edi
c001bbe2:	56                   	push   esi
c001bbe3:	53                   	push   ebx
c001bbe4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbe8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bbec:	83 ec 0c             	sub    esp,0xc
c001bbef:	53                   	push   ebx
c001bbf0:	e8 77 4b fe ff       	call   c000076c <strlen>
c001bbf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbf8:	89 c6                	mov    esi,eax
c001bbfa:	e8 6d 4b fe ff       	call   c000076c <strlen>
c001bbff:	83 c4 10             	add    esp,0x10
c001bc02:	39 c6                	cmp    esi,eax
c001bc04:	7d 06                	jge    c001bc0c <string_ends_with(char const*, char const*)+0x2b>
c001bc06:	5b                   	pop    ebx
c001bc07:	31 c0                	xor    eax,eax
c001bc09:	5e                   	pop    esi
c001bc0a:	5f                   	pop    edi
c001bc0b:	c3                   	ret    
c001bc0c:	83 ec 08             	sub    esp,0x8
c001bc0f:	29 c6                	sub    esi,eax
c001bc11:	57                   	push   edi
c001bc12:	01 f3                	add    ebx,esi
c001bc14:	53                   	push   ebx
c001bc15:	e8 7e 4c fe ff       	call   c0000898 <strcmp>
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	85 c0                	test   eax,eax
c001bc1f:	5b                   	pop    ebx
c001bc20:	0f 94 c0             	sete   al
c001bc23:	5e                   	pop    esi
c001bc24:	0f b6 c0             	movzx  eax,al
c001bc27:	5f                   	pop    edi
c001bc28:	c3                   	ret    

c001bc29 <sysCallOpen(regs*)>:
c001bc29:	56                   	push   esi
c001bc2a:	53                   	push   ebx
c001bc2b:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc31:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc38:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc3b:	85 c9                	test   ecx,ecx
c001bc3d:	0f 84 ad 01 00 00    	je     c001bdf0 <sysCallOpen(regs*)+0x1c7>
c001bc43:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc46:	85 c0                	test   eax,eax
c001bc48:	0f 84 a2 01 00 00    	je     c001bdf0 <sysCallOpen(regs*)+0x1c7>
c001bc4e:	52                   	push   edx
c001bc4f:	68 75 b8 02 c0       	push   0xc002b875
c001bc54:	50                   	push   eax
c001bc55:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc59:	56                   	push   esi
c001bc5a:	e8 01 6e ff ff       	call   c0012a60 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc5f:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc62:	e8 05 4b fe ff       	call   c000076c <strlen>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	48                   	dec    eax
c001bc6b:	74 1d                	je     c001bc8a <sysCallOpen(regs*)+0x61>
c001bc6d:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc70:	eb 0f                	jmp    c001bc81 <sysCallOpen(regs*)+0x58>
c001bc72:	80 fa 3a             	cmp    dl,0x3a
c001bc75:	74 0f                	je     c001bc86 <sysCallOpen(regs*)+0x5d>
c001bc77:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bc7b:	48                   	dec    eax
c001bc7c:	74 0c                	je     c001bc8a <sysCallOpen(regs*)+0x61>
c001bc7e:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bc81:	80 fa 2e             	cmp    dl,0x2e
c001bc84:	75 ec                	jne    c001bc72 <sysCallOpen(regs*)+0x49>
c001bc86:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bc8a:	83 ec 08             	sub    esp,0x8
c001bc8d:	68 79 b8 02 c0       	push   0xc002b879
c001bc92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc95:	e8 47 ff ff ff       	call   c001bbe1 <string_ends_with(char const*, char const*)>
c001bc9a:	83 c4 10             	add    esp,0x10
c001bc9d:	85 c0                	test   eax,eax
c001bc9f:	74 1d                	je     c001bcbe <sysCallOpen(regs*)+0x95>
c001bca1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bca4:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bcaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcb1:	81 c4 04 01 00 00    	add    esp,0x104
c001bcb7:	31 c0                	xor    eax,eax
c001bcb9:	31 d2                	xor    edx,edx
c001bcbb:	5b                   	pop    ebx
c001bcbc:	5e                   	pop    esi
c001bcbd:	c3                   	ret    
c001bcbe:	83 ec 08             	sub    esp,0x8
c001bcc1:	68 7e b8 02 c0       	push   0xc002b87e
c001bcc6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcc9:	e8 13 ff ff ff       	call   c001bbe1 <string_ends_with(char const*, char const*)>
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	85 c0                	test   eax,eax
c001bcd3:	75 cc                	jne    c001bca1 <sysCallOpen(regs*)+0x78>
c001bcd5:	83 ec 08             	sub    esp,0x8
c001bcd8:	68 7a b8 02 c0       	push   0xc002b87a
c001bcdd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bce0:	e8 b3 4b fe ff       	call   c0000898 <strcmp>
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	85 c0                	test   eax,eax
c001bcea:	74 b5                	je     c001bca1 <sysCallOpen(regs*)+0x78>
c001bcec:	83 ec 08             	sub    esp,0x8
c001bcef:	68 79 b8 02 c0       	push   0xc002b879
c001bcf4:	56                   	push   esi
c001bcf5:	e8 e7 fe ff ff       	call   c001bbe1 <string_ends_with(char const*, char const*)>
c001bcfa:	83 c4 10             	add    esp,0x10
c001bcfd:	85 c0                	test   eax,eax
c001bcff:	75 a0                	jne    c001bca1 <sysCallOpen(regs*)+0x78>
c001bd01:	83 ec 08             	sub    esp,0x8
c001bd04:	68 83 b8 02 c0       	push   0xc002b883
c001bd09:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd0c:	e8 d0 fe ff ff       	call   c001bbe1 <string_ends_with(char const*, char const*)>
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	85 c0                	test   eax,eax
c001bd16:	0f 85 e7 00 00 00    	jne    c001be03 <sysCallOpen(regs*)+0x1da>
c001bd1c:	83 ec 08             	sub    esp,0x8
c001bd1f:	68 88 b8 02 c0       	push   0xc002b888
c001bd24:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd27:	e8 b5 fe ff ff       	call   c001bbe1 <string_ends_with(char const*, char const*)>
c001bd2c:	83 c4 10             	add    esp,0x10
c001bd2f:	85 c0                	test   eax,eax
c001bd31:	0f 85 cc 00 00 00    	jne    c001be03 <sysCallOpen(regs*)+0x1da>
c001bd37:	83 ec 08             	sub    esp,0x8
c001bd3a:	68 84 b8 02 c0       	push   0xc002b884
c001bd3f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd42:	e8 51 4b fe ff       	call   c0000898 <strcmp>
c001bd47:	83 c4 10             	add    esp,0x10
c001bd4a:	85 c0                	test   eax,eax
c001bd4c:	0f 84 b1 00 00 00    	je     c001be03 <sysCallOpen(regs*)+0x1da>
c001bd52:	83 ec 08             	sub    esp,0x8
c001bd55:	68 83 b8 02 c0       	push   0xc002b883
c001bd5a:	56                   	push   esi
c001bd5b:	e8 81 fe ff ff       	call   c001bbe1 <string_ends_with(char const*, char const*)>
c001bd60:	83 c4 10             	add    esp,0x10
c001bd63:	85 c0                	test   eax,eax
c001bd65:	0f 85 98 00 00 00    	jne    c001be03 <sysCallOpen(regs*)+0x1da>
c001bd6b:	83 ec 0c             	sub    esp,0xc
c001bd6e:	68 14 01 00 00       	push   0x114
c001bd73:	e8 21 38 ff ff       	call   c000f599 <malloc>
c001bd78:	83 c4 0c             	add    esp,0xc
c001bd7b:	89 c6                	mov    esi,eax
c001bd7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd82:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd85:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd88:	56                   	push   esi
c001bd89:	e8 7c 6e ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001bd8e:	83 c4 10             	add    esp,0x10
c001bd91:	85 f6                	test   esi,esi
c001bd93:	74 5b                	je     c001bdf0 <sysCallOpen(regs*)+0x1c7>
c001bd95:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bd98:	0f b6 c2             	movzx  eax,dl
c001bd9b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bd9e:	89 d0                	mov    eax,edx
c001bda0:	83 e0 01             	and    eax,0x1
c001bda3:	f6 c2 02             	test   dl,0x2
c001bda6:	74 03                	je     c001bdab <sysCallOpen(regs*)+0x182>
c001bda8:	83 c8 02             	or     eax,0x2
c001bdab:	f6 c2 04             	test   dl,0x4
c001bdae:	74 03                	je     c001bdb3 <sysCallOpen(regs*)+0x18a>
c001bdb0:	83 c8 04             	or     eax,0x4
c001bdb3:	f6 c2 08             	test   dl,0x8
c001bdb6:	74 03                	je     c001bdbb <sysCallOpen(regs*)+0x192>
c001bdb8:	83 c8 0a             	or     eax,0xa
c001bdbb:	83 e2 10             	and    edx,0x10
c001bdbe:	74 03                	je     c001bdc3 <sysCallOpen(regs*)+0x19a>
c001bdc0:	83 c8 12             	or     eax,0x12
c001bdc3:	83 ec 08             	sub    esp,0x8
c001bdc6:	50                   	push   eax
c001bdc7:	56                   	push   esi
c001bdc8:	e8 a1 6e ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c001bdcd:	83 c4 10             	add    esp,0x10
c001bdd0:	85 c0                	test   eax,eax
c001bdd2:	75 1c                	jne    c001bdf0 <sysCallOpen(regs*)+0x1c7>
c001bdd4:	83 ec 0c             	sub    esp,0xc
c001bdd7:	56                   	push   esi
c001bdd8:	e8 d7 4f ff ff       	call   c0010db4 <UnixFile::getFileDescriptor()>
c001bddd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bde0:	83 c4 10             	add    esp,0x10
c001bde3:	89 02                	mov    DWORD PTR [edx],eax
c001bde5:	c1 f8 1f             	sar    eax,0x1f
c001bde8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bdeb:	e9 c1 fe ff ff       	jmp    c001bcb1 <sysCallOpen(regs*)+0x88>
c001bdf0:	81 c4 04 01 00 00    	add    esp,0x104
c001bdf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be00:	5b                   	pop    ebx
c001be01:	5e                   	pop    esi
c001be02:	c3                   	ret    
c001be03:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be06:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be0c:	e9 99 fe ff ff       	jmp    c001bcaa <sysCallOpen(regs*)+0x81>

c001be11 <Sys::loadSyscalls()>:
c001be11:	c7 05 40 04 03 c0 7e b0 01 c0 	mov    DWORD PTR ds:0xc0030440,0xc001b07e
c001be1b:	c7 05 44 04 03 c0 76 ac 01 c0 	mov    DWORD PTR ds:0xc0030444,0xc001ac76
c001be25:	c7 05 48 04 03 c0 64 ae 01 c0 	mov    DWORD PTR ds:0xc0030448,0xc001ae64
c001be2f:	c7 05 4c 04 03 c0 b4 af 01 c0 	mov    DWORD PTR ds:0xc003044c,0xc001afb4
c001be39:	c7 05 50 04 03 c0 fc ad 01 c0 	mov    DWORD PTR ds:0xc0030450,0xc001adfc
c001be43:	c7 05 54 04 03 c0 ad ac 01 c0 	mov    DWORD PTR ds:0xc0030454,0xc001acad
c001be4d:	c7 05 58 04 03 c0 8e ac 01 c0 	mov    DWORD PTR ds:0xc0030458,0xc001ac8e
c001be57:	c7 05 5c 04 03 c0 b9 ae 01 c0 	mov    DWORD PTR ds:0xc003045c,0xc001aeb9
c001be61:	c7 05 64 04 03 c0 47 b5 01 c0 	mov    DWORD PTR ds:0xc0030464,0xc001b547
c001be6b:	c7 05 60 04 03 c0 29 bc 01 c0 	mov    DWORD PTR ds:0xc0030460,0xc001bc29
c001be75:	c7 05 68 04 03 c0 a7 b5 01 c0 	mov    DWORD PTR ds:0xc0030468,0xc001b5a7
c001be7f:	c7 05 6c 04 03 c0 8a b2 01 c0 	mov    DWORD PTR ds:0xc003046c,0xc001b28a
c001be89:	c7 05 70 04 03 c0 c4 b0 01 c0 	mov    DWORD PTR ds:0xc0030470,0xc001b0c4
c001be93:	c7 05 74 04 03 c0 c9 b0 01 c0 	mov    DWORD PTR ds:0xc0030474,0xc001b0c9
c001be9d:	c7 05 78 04 03 c0 70 b6 01 c0 	mov    DWORD PTR ds:0xc0030478,0xc001b670
c001bea7:	c7 05 7c 04 03 c0 1c b6 01 c0 	mov    DWORD PTR ds:0xc003047c,0xc001b61c
c001beb1:	c7 05 80 04 03 c0 63 b3 01 c0 	mov    DWORD PTR ds:0xc0030480,0xc001b363
c001bebb:	c7 05 84 04 03 c0 ba b3 01 c0 	mov    DWORD PTR ds:0xc0030484,0xc001b3ba
c001bec5:	c7 05 88 04 03 c0 26 b4 01 c0 	mov    DWORD PTR ds:0xc0030488,0xc001b426
c001becf:	c7 05 8c 04 03 c0 ce b0 01 c0 	mov    DWORD PTR ds:0xc003048c,0xc001b0ce
c001bed9:	c7 05 90 04 03 c0 e0 b6 01 c0 	mov    DWORD PTR ds:0xc0030490,0xc001b6e0
c001bee3:	c7 05 94 04 03 c0 fa b6 01 c0 	mov    DWORD PTR ds:0xc0030494,0xc001b6fa
c001beed:	c7 05 98 04 03 c0 fa b6 01 c0 	mov    DWORD PTR ds:0xc0030498,0xc001b6fa
c001bef7:	c7 05 9c 04 03 c0 2f b7 01 c0 	mov    DWORD PTR ds:0xc003049c,0xc001b72f
c001bf01:	c7 05 a0 04 03 c0 93 b7 01 c0 	mov    DWORD PTR ds:0xc00304a0,0xc001b793
c001bf0b:	c7 05 a4 04 03 c0 d8 b0 01 c0 	mov    DWORD PTR ds:0xc00304a4,0xc001b0d8
c001bf15:	c7 05 a8 04 03 c0 f7 b7 01 c0 	mov    DWORD PTR ds:0xc00304a8,0xc001b7f7
c001bf1f:	c7 05 ac 04 03 c0 47 b2 01 c0 	mov    DWORD PTR ds:0xc00304ac,0xc001b247
c001bf29:	c7 05 b0 04 03 c0 43 b8 01 c0 	mov    DWORD PTR ds:0xc00304b0,0xc001b843
c001bf33:	c7 05 b4 04 03 c0 09 b3 01 c0 	mov    DWORD PTR ds:0xc00304b4,0xc001b309
c001bf3d:	c7 05 b8 04 03 c0 c6 b8 01 c0 	mov    DWORD PTR ds:0xc00304b8,0xc001b8c6
c001bf47:	c7 05 bc 04 03 c0 98 b4 01 c0 	mov    DWORD PTR ds:0xc00304bc,0xc001b498
c001bf51:	c7 05 c0 04 03 c0 ed b8 01 c0 	mov    DWORD PTR ds:0xc00304c0,0xc001b8ed
c001bf5b:	c7 05 c4 04 03 c0 55 b9 01 c0 	mov    DWORD PTR ds:0xc00304c4,0xc001b955
c001bf65:	c7 05 c8 04 03 c0 02 ba 01 c0 	mov    DWORD PTR ds:0xc00304c8,0xc001ba02
c001bf6f:	c7 05 cc 04 03 c0 e8 b0 01 c0 	mov    DWORD PTR ds:0xc00304cc,0xc001b0e8
c001bf79:	c7 05 d0 04 03 c0 52 b1 01 c0 	mov    DWORD PTR ds:0xc00304d0,0xc001b152
c001bf83:	c7 05 d4 04 03 c0 98 b1 01 c0 	mov    DWORD PTR ds:0xc00304d4,0xc001b198
c001bf8d:	c7 05 d8 04 03 c0 16 bb 01 c0 	mov    DWORD PTR ds:0xc00304d8,0xc001bb16
c001bf97:	c7 05 dc 04 03 c0 15 b7 01 c0 	mov    DWORD PTR ds:0xc00304dc,0xc001b715
c001bfa1:	c7 05 e0 04 03 c0 e9 b1 01 c0 	mov    DWORD PTR ds:0xc00304e0,0xc001b1e9
c001bfab:	c7 05 e4 04 03 c0 88 bb 01 c0 	mov    DWORD PTR ds:0xc00304e4,0xc001bb88
c001bfb5:	c7 05 e8 04 03 c0 cd bb 01 c0 	mov    DWORD PTR ds:0xc00304e8,0xc001bbcd
c001bfbf:	c7 05 ec 04 03 c0 54 ad 01 c0 	mov    DWORD PTR ds:0xc00304ec,0xc001ad54
c001bfc9:	c7 05 f0 04 03 c0 d5 ae 01 c0 	mov    DWORD PTR ds:0xc00304f0,0xc001aed5
c001bfd3:	c7 05 f4 04 03 c0 6a af 01 c0 	mov    DWORD PTR ds:0xc00304f4,0xc001af6a
c001bfdd:	c7 05 f8 04 03 c0 40 ac 01 c0 	mov    DWORD PTR ds:0xc00304f8,0xc001ac40
c001bfe7:	c7 05 fc 04 03 c0 1c b0 01 c0 	mov    DWORD PTR ds:0xc00304fc,0xc001b01c
c001bff1:	c7 05 00 05 03 c0 b9 ac 01 c0 	mov    DWORD PTR ds:0xc0030500,0xc001acb9
c001bffb:	c7 05 04 05 03 c0 d0 ac 01 c0 	mov    DWORD PTR ds:0xc0030504,0xc001acd0
c001c005:	c3                   	ret    

c001c006 <Sys::systemCall(regs*, void*)>:
c001c006:	53                   	push   ebx
c001c007:	83 ec 08             	sub    esp,0x8
c001c00a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c00e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c011:	83 f8 7f             	cmp    eax,0x7f
c001c014:	77 16                	ja     c001c02c <Sys::systemCall(regs*, void*)+0x26>
c001c016:	8b 14 85 40 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfbc0]
c001c01d:	85 d2                	test   edx,edx
c001c01f:	74 0b                	je     c001c02c <Sys::systemCall(regs*, void*)+0x26>
c001c021:	83 ec 0c             	sub    esp,0xc
c001c024:	53                   	push   ebx
c001c025:	ff d2                	call   edx
c001c027:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c02a:	eb 0d                	jmp    c001c039 <Sys::systemCall(regs*, void*)+0x33>
c001c02c:	52                   	push   edx
c001c02d:	52                   	push   edx
c001c02e:	50                   	push   eax
c001c02f:	68 8d b8 02 c0       	push   0xc002b88d
c001c034:	e8 72 66 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001c039:	83 c4 10             	add    esp,0x10
c001c03c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c041:	31 d2                	xor    edx,edx
c001c043:	83 c4 08             	add    esp,0x8
c001c046:	5b                   	pop    ebx
c001c047:	c3                   	ret    

c001c048 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c048:	55                   	push   ebp
c001c049:	57                   	push   edi
c001c04a:	56                   	push   esi
c001c04b:	53                   	push   ebx
c001c04c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c052:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c059:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c060:	85 c0                	test   eax,eax
c001c062:	0f 95 c1             	setne  cl
c001c065:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c06d:	0f 94 c2             	sete   dl
c001c070:	84 d1                	test   cl,dl
c001c072:	74 23                	je     c001c097 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c074:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c07a:	74 1b                	je     c001c097 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c07c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c082:	89 da                	mov    edx,ebx
c001c084:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c08a:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c090:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c097:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c09e:	05 ff 0f 00 00       	add    eax,0xfff
c001c0a3:	83 ec 0c             	sub    esp,0xc
c001c0a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0aa:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0b0:	c1 e8 0c             	shr    eax,0xc
c001c0b3:	89 fe                	mov    esi,edi
c001c0b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0b9:	c1 ee 0c             	shr    esi,0xc
c001c0bc:	6a 01                	push   0x1
c001c0be:	e8 3c 51 ff ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c001c0c3:	89 c5                	mov    ebp,eax
c001c0c5:	58                   	pop    eax
c001c0c6:	5a                   	pop    edx
c001c0c7:	56                   	push   esi
c001c0c8:	68 a1 b8 02 c0       	push   0xc002b8a1
c001c0cd:	e8 d9 65 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001c0d2:	59                   	pop    ecx
c001c0d3:	58                   	pop    eax
c001c0d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0d8:	68 b3 b8 02 c0       	push   0xc002b8b3
c001c0dd:	e8 c9 65 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001c0e2:	83 c4 10             	add    esp,0x10
c001c0e5:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c0eb:	0f 86 31 01 00 00    	jbe    c001c222 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c0f1:	c1 e6 0c             	shl    esi,0xc
c001c0f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0f7:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c0fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0fe:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c105:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c108:	01 df                	add    edi,ebx
c001c10a:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c10d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c111:	0f 84 08 01 00 00    	je     c001c21f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c117:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c11d:	76 05                	jbe    c001c124 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c11f:	bf 00 10 00 00       	mov    edi,0x1000
c001c124:	83 ec 0c             	sub    esp,0xc
c001c127:	31 d2                	xor    edx,edx
c001c129:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c130:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c132:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c136:	50                   	push   eax
c001c137:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c13b:	56                   	push   esi
c001c13c:	52                   	push   edx
c001c13d:	57                   	push   edi
c001c13e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c145:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c148:	83 c4 20             	add    esp,0x20
c001c14b:	85 c0                	test   eax,eax
c001c14d:	74 0a                	je     c001c159 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c14f:	53                   	push   ebx
c001c150:	53                   	push   ebx
c001c151:	50                   	push   eax
c001c152:	68 c5 b8 02 c0       	push   0xc002b8c5
c001c157:	eb 0f                	jmp    c001c168 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c159:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c15d:	74 20                	je     c001c17f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c15f:	51                   	push   ecx
c001c160:	51                   	push   ecx
c001c161:	6a 00                	push   0x0
c001c163:	68 f0 b8 02 c0       	push   0xc002b8f0
c001c168:	e8 3e 65 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001c16d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c170:	e8 d0 54 ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c001c175:	83 c4 10             	add    esp,0x10
c001c178:	31 c0                	xor    eax,eax
c001c17a:	e9 68 01 00 00       	jmp    c001c2e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c17f:	fa                   	cli    
c001c180:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001c186:	e8 e6 37 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c18b:	6a 07                	push   0x7
c001c18d:	89 c7                	mov    edi,eax
c001c18f:	55                   	push   ebp
c001c190:	50                   	push   eax
c001c191:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c196:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c199:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c19f:	e8 18 58 ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1a4:	83 c4 0c             	add    esp,0xc
c001c1a7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1ae:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1b4:	6a 00                	push   0x0
c001c1b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1be:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1c4:	e8 4d 56 ff ff       	call   c0011816 <VAS::mapOtherVASIn(bool, VAS*)>
c001c1c9:	58                   	pop    eax
c001c1ca:	5a                   	pop    edx
c001c1cb:	68 07 0c 00 00       	push   0xc07
c001c1d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c1d4:	57                   	push   edi
c001c1d5:	89 ef                	mov    edi,ebp
c001c1d7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1de:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1e4:	6a 00                	push   0x0
c001c1e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ee:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1f4:	e8 7f 5b ff ff       	call   c0011d78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c1f9:	b9 00 10 00 00       	mov    ecx,0x1000
c001c1fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c200:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001c205:	83 c4 20             	add    esp,0x20
c001c208:	48                   	dec    eax
c001c209:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001c20e:	85 c0                	test   eax,eax
c001c210:	75 01                	jne    c001c213 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c212:	fb                   	sti    
c001c213:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c21a:	e9 df fe ff ff       	jmp    c001c0fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c21f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c222:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c22a:	0f 86 a9 00 00 00    	jbe    c001c2d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c230:	fa                   	cli    
c001c231:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001c237:	51                   	push   ecx
c001c238:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c23f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c245:	6a 00                	push   0x0
c001c247:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c24c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c24f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c255:	e8 bc 55 ff ff       	call   c0011816 <VAS::mapOtherVASIn(bool, VAS*)>
c001c25a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c25e:	c1 e6 0c             	shl    esi,0xc
c001c261:	01 de                	add    esi,ebx
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	39 de                	cmp    esi,ebx
c001c268:	74 61                	je     c001c2cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c26a:	e8 02 37 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c26f:	6a 07                	push   0x7
c001c271:	89 c7                	mov    edi,eax
c001c273:	55                   	push   ebp
c001c274:	50                   	push   eax
c001c275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c283:	e8 34 57 ff ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c288:	58                   	pop    eax
c001c289:	5a                   	pop    edx
c001c28a:	68 07 0c 00 00       	push   0xc07
c001c28f:	53                   	push   ebx
c001c290:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c296:	57                   	push   edi
c001c297:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c29e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2a4:	6a 00                	push   0x0
c001c2a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2ae:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2b4:	e8 bf 5a ff ff       	call   c0011d78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2b9:	83 c4 1c             	add    esp,0x1c
c001c2bc:	68 00 10 00 00       	push   0x1000
c001c2c1:	6a 00                	push   0x0
c001c2c3:	55                   	push   ebp
c001c2c4:	e8 87 44 fe ff       	call   c0000750 <memset>
c001c2c9:	eb 98                	jmp    c001c263 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c2cb:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001c2d0:	48                   	dec    eax
c001c2d1:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001c2d6:	75 01                	jne    c001c2d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2d8:	fb                   	sti    
c001c2d9:	83 ec 0c             	sub    esp,0xc
c001c2dc:	55                   	push   ebp
c001c2dd:	e8 63 53 ff ff       	call   c0011645 <Virt::freeKernelVirtualPages(unsigned long)>
c001c2e2:	83 c4 10             	add    esp,0x10
c001c2e5:	b0 01                	mov    al,0x1
c001c2e7:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c2ed:	5b                   	pop    ebx
c001c2ee:	5e                   	pop    esi
c001c2ef:	5f                   	pop    edi
c001c2f0:	5d                   	pop    ebp
c001c2f1:	c3                   	ret    

c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c2f2:	55                   	push   ebp
c001c2f3:	57                   	push   edi
c001c2f4:	56                   	push   esi
c001c2f5:	53                   	push   ebx
c001c2f6:	83 ec 48             	sub    esp,0x48
c001c2f9:	68 14 01 00 00       	push   0x114
c001c2fe:	e8 96 32 ff ff       	call   c000f599 <malloc>
c001c303:	83 c4 0c             	add    esp,0xc
c001c306:	89 c6                	mov    esi,eax
c001c308:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c30c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c310:	50                   	push   eax
c001c311:	e8 f4 68 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001c316:	58                   	pop    eax
c001c317:	5a                   	pop    edx
c001c318:	6a 01                	push   0x1
c001c31a:	56                   	push   esi
c001c31b:	e8 4e 69 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c001c320:	83 c4 10             	add    esp,0x10
c001c323:	85 c0                	test   eax,eax
c001c325:	0f 85 47 01 00 00    	jne    c001c472 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c32b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c333:	83 ec 0c             	sub    esp,0xc
c001c336:	6a 34                	push   0x34
c001c338:	e8 5c 32 ff ff       	call   c000f599 <malloc>
c001c33d:	89 c3                	mov    ebx,eax
c001c33f:	58                   	pop    eax
c001c340:	8b 06                	mov    eax,DWORD PTR [esi]
c001c342:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c346:	57                   	push   edi
c001c347:	53                   	push   ebx
c001c348:	6a 00                	push   0x0
c001c34a:	6a 34                	push   0x34
c001c34c:	56                   	push   esi
c001c34d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c350:	83 c4 20             	add    esp,0x20
c001c353:	85 c0                	test   eax,eax
c001c355:	0f 85 17 01 00 00    	jne    c001c472 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c35b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c361:	0f 85 0b 01 00 00    	jne    c001c472 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c367:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c36a:	85 c0                	test   eax,eax
c001c36c:	0f 84 00 01 00 00    	je     c001c472 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c372:	31 d2                	xor    edx,edx
c001c374:	55                   	push   ebp
c001c375:	52                   	push   edx
c001c376:	50                   	push   eax
c001c377:	56                   	push   esi
c001c378:	e8 af 69 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c37d:	83 c4 10             	add    esp,0x10
c001c380:	85 c0                	test   eax,eax
c001c382:	0f 85 ea 00 00 00    	jne    c001c472 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c388:	83 ec 0c             	sub    esp,0xc
c001c38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c38e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c392:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c396:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c39a:	0f af c2             	imul   eax,edx
c001c39d:	50                   	push   eax
c001c39e:	e8 f6 31 ff ff       	call   c000f599 <malloc>
c001c3a3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3b0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3b4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3b8:	0f af c2             	imul   eax,edx
c001c3bb:	99                   	cdq    
c001c3bc:	52                   	push   edx
c001c3bd:	50                   	push   eax
c001c3be:	56                   	push   esi
c001c3bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3c2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3c5:	83 c4 20             	add    esp,0x20
c001c3c8:	85 c0                	test   eax,eax
c001c3ca:	0f 84 a2 00 00 00    	je     c001c472 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3d0:	31 d2                	xor    edx,edx
c001c3d2:	51                   	push   ecx
c001c3d3:	52                   	push   edx
c001c3d4:	50                   	push   eax
c001c3d5:	56                   	push   esi
c001c3d6:	e8 51 69 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c3db:	83 c4 10             	add    esp,0x10
c001c3de:	85 c0                	test   eax,eax
c001c3e0:	0f 85 8c 00 00 00    	jne    c001c472 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3e6:	83 ec 0c             	sub    esp,0xc
c001c3e9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c3ed:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c3f1:	31 ed                	xor    ebp,ebp
c001c3f3:	0f af c2             	imul   eax,edx
c001c3f6:	50                   	push   eax
c001c3f7:	e8 9d 31 ff ff       	call   c000f599 <malloc>
c001c3fc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c402:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c409:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c40d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c411:	0f af c2             	imul   eax,edx
c001c414:	99                   	cdq    
c001c415:	52                   	push   edx
c001c416:	50                   	push   eax
c001c417:	56                   	push   esi
c001c418:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c41b:	83 c4 20             	add    esp,0x20
c001c41e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c426:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c42a:	0f 86 80 00 00 00    	jbe    c001c4b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c430:	0f b7 fd             	movzx  edi,bp
c001c433:	c1 e7 05             	shl    edi,0x5
c001c436:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c43a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c43d:	75 6b                	jne    c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c43f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c442:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c446:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c449:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c44d:	52                   	push   edx
c001c44e:	31 d2                	xor    edx,edx
c001c450:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c453:	52                   	push   edx
c001c454:	50                   	push   eax
c001c455:	56                   	push   esi
c001c456:	e8 d1 68 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c45b:	83 c4 10             	add    esp,0x10
c001c45e:	85 c0                	test   eax,eax
c001c460:	74 17                	je     c001c479 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c462:	83 ec 0c             	sub    esp,0xc
c001c465:	68 1c b9 02 c0       	push   0xc002b91c
c001c46a:	e8 3c 62 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001c46f:	83 c4 10             	add    esp,0x10
c001c472:	31 c0                	xor    eax,eax
c001c474:	e9 87 00 00 00       	jmp    c001c500 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c479:	83 ec 0c             	sub    esp,0xc
c001c47c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c47f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c482:	50                   	push   eax
c001c483:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c487:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c48b:	56                   	push   esi
c001c48c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c490:	e8 b3 fb ff ff       	call   c001c048 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c495:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c499:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c49d:	83 c4 20             	add    esp,0x20
c001c4a0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4a4:	73 04                	jae    c001c4aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4aa:	45                   	inc    ebp
c001c4ab:	e9 76 ff ff ff       	jmp    c001c426 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4b0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4bc:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4c2:	83 ec 0c             	sub    esp,0xc
c001c4c5:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c4cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c4d0:	05 00 10 00 00       	add    eax,0x1000
c001c4d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4dc:	e8 c8 30 ff ff       	call   c000f5a9 <free>
c001c4e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4e4:	e8 c0 30 ff ff       	call   c000f5a9 <free>
c001c4e9:	58                   	pop    eax
c001c4ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4ee:	e8 b6 30 ff ff       	call   c000f5a9 <free>
c001c4f3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4f6:	e8 d1 67 ff ff       	call   c0012ccc <File::close()>
c001c4fb:	83 c4 10             	add    esp,0x10
c001c4fe:	b0 01                	mov    al,0x1
c001c500:	83 c4 3c             	add    esp,0x3c
c001c503:	5b                   	pop    ebx
c001c504:	5e                   	pop    esi
c001c505:	5f                   	pop    edi
c001c506:	5d                   	pop    ebp
c001c507:	c3                   	ret    

c001c508 <Thr::runtimeReferenceHelper()>:
c001c508:	83 ec 18             	sub    esp,0x18
c001c50b:	68 24 b9 02 c0       	push   0xc002b924
c001c510:	e8 96 61 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001c515:	fa                   	cli    
c001c516:	83 c4 10             	add    esp,0x10
c001c519:	eb fe                	jmp    c001c519 <Thr::runtimeReferenceHelper()+0x11>

c001c51b <Thr::getAddressOfKernelSymbol(char const*)>:
c001c51b:	57                   	push   edi
c001c51c:	56                   	push   esi
c001c51d:	53                   	push   ebx
c001c51e:	31 db                	xor    ebx,ebx
c001c520:	39 1d e0 0d 03 c0    	cmp    DWORD PTR ds:0xc0030de0,ebx
c001c526:	7e 3c                	jle    c001c564 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c528:	8b 34 9d 60 0d 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf2a0]
c001c52f:	31 ff                	xor    edi,edi
c001c531:	39 3c 9d 60 0c 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf3a0],edi
c001c538:	7e 27                	jle    c001c561 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c53a:	50                   	push   eax
c001c53b:	50                   	push   eax
c001c53c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c540:	8b 06                	mov    eax,DWORD PTR [esi]
c001c542:	03 04 9d e0 0c 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf320]
c001c549:	50                   	push   eax
c001c54a:	e8 49 43 fe ff       	call   c0000898 <strcmp>
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	85 c0                	test   eax,eax
c001c554:	75 05                	jne    c001c55b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c556:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c559:	eb 0b                	jmp    c001c566 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c55b:	83 c6 10             	add    esi,0x10
c001c55e:	47                   	inc    edi
c001c55f:	eb d0                	jmp    c001c531 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c561:	43                   	inc    ebx
c001c562:	eb bc                	jmp    c001c520 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c564:	31 c0                	xor    eax,eax
c001c566:	5b                   	pop    ebx
c001c567:	5e                   	pop    esi
c001c568:	5f                   	pop    edi
c001c569:	c3                   	ret    

c001c56a <Thr::loadKernelSymbolTable(char const*)>:
c001c56a:	55                   	push   ebp
c001c56b:	57                   	push   edi
c001c56c:	56                   	push   esi
c001c56d:	53                   	push   ebx
c001c56e:	83 ec 68             	sub    esp,0x68
c001c571:	8b 35 30 0e 03 c0    	mov    esi,DWORD PTR ds:0xc0030e30
c001c577:	68 14 01 00 00       	push   0x114
c001c57c:	e8 18 30 ff ff       	call   c000f599 <malloc>
c001c581:	83 c4 0c             	add    esp,0xc
c001c584:	89 c3                	mov    ebx,eax
c001c586:	56                   	push   esi
c001c587:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c58b:	50                   	push   eax
c001c58c:	e8 79 66 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001c591:	5e                   	pop    esi
c001c592:	5f                   	pop    edi
c001c593:	6a 01                	push   0x1
c001c595:	53                   	push   ebx
c001c596:	e8 d3 66 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	85 c0                	test   eax,eax
c001c5a0:	74 0a                	je     c001c5ac <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5a2:	83 ec 0c             	sub    esp,0xc
c001c5a5:	68 46 b9 02 c0       	push   0xc002b946
c001c5aa:	eb 34                	jmp    c001c5e0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5ac:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5b4:	83 ec 0c             	sub    esp,0xc
c001c5b7:	6a 34                	push   0x34
c001c5b9:	e8 db 2f ff ff       	call   c000f599 <malloc>
c001c5be:	59                   	pop    ecx
c001c5bf:	89 c7                	mov    edi,eax
c001c5c1:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5c7:	56                   	push   esi
c001c5c8:	57                   	push   edi
c001c5c9:	6a 00                	push   0x0
c001c5cb:	6a 34                	push   0x34
c001c5cd:	53                   	push   ebx
c001c5ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5d1:	83 c4 20             	add    esp,0x20
c001c5d4:	85 c0                	test   eax,eax
c001c5d6:	74 17                	je     c001c5ef <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c5d8:	83 ec 0c             	sub    esp,0xc
c001c5db:	68 5d b9 02 c0       	push   0xc002b95d
c001c5e0:	e8 32 d8 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001c5e5:	83 c4 10             	add    esp,0x10
c001c5e8:	31 c0                	xor    eax,eax
c001c5ea:	e9 31 02 00 00       	jmp    c001c820 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c5ef:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c5f5:	75 e1                	jne    c001c5d8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c5f7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c5fa:	85 c0                	test   eax,eax
c001c5fc:	74 da                	je     c001c5d8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c5fe:	52                   	push   edx
c001c5ff:	31 d2                	xor    edx,edx
c001c601:	52                   	push   edx
c001c602:	50                   	push   eax
c001c603:	53                   	push   ebx
c001c604:	e8 23 67 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	85 c0                	test   eax,eax
c001c60e:	75 c8                	jne    c001c5d8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c610:	83 ec 0c             	sub    esp,0xc
c001c613:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c617:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c61b:	31 ed                	xor    ebp,ebp
c001c61d:	0f af c2             	imul   eax,edx
c001c620:	50                   	push   eax
c001c621:	e8 73 2f ff ff       	call   c000f599 <malloc>
c001c626:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c628:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c62c:	89 34 24             	mov    DWORD PTR [esp],esi
c001c62f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c633:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c637:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c63b:	0f af c2             	imul   eax,edx
c001c63e:	99                   	cdq    
c001c63f:	52                   	push   edx
c001c640:	50                   	push   eax
c001c641:	53                   	push   ebx
c001c642:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c645:	83 c4 20             	add    esp,0x20
c001c648:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c650:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c658:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c660:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c668:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c66c:	0f 86 aa 00 00 00    	jbe    c001c71c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c672:	0f b7 f5             	movzx  esi,bp
c001c675:	6b f6 28             	imul   esi,esi,0x28
c001c678:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c67c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c683:	50                   	push   eax
c001c684:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c688:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c68c:	8b 16                	mov    edx,DWORD PTR [esi]
c001c68e:	6b c0 28             	imul   eax,eax,0x28
c001c691:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c695:	89 d0                	mov    eax,edx
c001c697:	31 d2                	xor    edx,edx
c001c699:	52                   	push   edx
c001c69a:	50                   	push   eax
c001c69b:	53                   	push   ebx
c001c69c:	e8 8b 66 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c6a1:	83 c4 0c             	add    esp,0xc
c001c6a4:	6a 20                	push   0x20
c001c6a6:	6a 00                	push   0x0
c001c6a8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6ac:	52                   	push   edx
c001c6ad:	e8 9e 40 fe ff       	call   c0000750 <memset>
c001c6b2:	58                   	pop    eax
c001c6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6b5:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6b9:	51                   	push   ecx
c001c6ba:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6be:	52                   	push   edx
c001c6bf:	6a 00                	push   0x0
c001c6c1:	6a 1f                	push   0x1f
c001c6c3:	53                   	push   ebx
c001c6c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6c7:	83 c4 18             	add    esp,0x18
c001c6ca:	68 74 b9 02 c0       	push   0xc002b974
c001c6cf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6d3:	52                   	push   edx
c001c6d4:	e8 bf 41 fe ff       	call   c0000898 <strcmp>
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	85 c0                	test   eax,eax
c001c6de:	75 0f                	jne    c001c6ef <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c6e0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6ef:	50                   	push   eax
c001c6f0:	50                   	push   eax
c001c6f1:	68 7c b9 02 c0       	push   0xc002b97c
c001c6f6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c6fa:	50                   	push   eax
c001c6fb:	e8 98 41 fe ff       	call   c0000898 <strcmp>
c001c700:	83 c4 10             	add    esp,0x10
c001c703:	85 c0                	test   eax,eax
c001c705:	75 0f                	jne    c001c716 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c707:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c70a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c70e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c712:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c716:	45                   	inc    ebp
c001c717:	e9 4c ff ff ff       	jmp    c001c668 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c71c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c721:	75 10                	jne    c001c733 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c723:	83 ec 0c             	sub    esp,0xc
c001c726:	68 84 b9 02 c0       	push   0xc002b984
c001c72b:	e8 e7 d6 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001c730:	83 c4 10             	add    esp,0x10
c001c733:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c738:	75 10                	jne    c001c74a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c73a:	83 ec 0c             	sub    esp,0xc
c001c73d:	68 84 b9 02 c0       	push   0xc002b984
c001c742:	e8 d0 d6 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	31 d2                	xor    edx,edx
c001c74c:	50                   	push   eax
c001c74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c751:	52                   	push   edx
c001c752:	50                   	push   eax
c001c753:	53                   	push   ebx
c001c754:	e8 d3 65 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c759:	5a                   	pop    edx
c001c75a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c75e:	e8 36 2e ff ff       	call   c000f599 <malloc>
c001c763:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c767:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c76b:	31 c9                	xor    ecx,ecx
c001c76d:	5e                   	pop    esi
c001c76e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c770:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c774:	55                   	push   ebp
c001c775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c779:	51                   	push   ecx
c001c77a:	52                   	push   edx
c001c77b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c77f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c783:	53                   	push   ebx
c001c784:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c787:	83 c4 14             	add    esp,0x14
c001c78a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c78e:	e8 06 2e ff ff       	call   c000f599 <malloc>
c001c793:	89 c6                	mov    esi,eax
c001c795:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c797:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c79a:	56                   	push   esi
c001c79b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c79f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7a3:	51                   	push   ecx
c001c7a4:	52                   	push   edx
c001c7a5:	53                   	push   ebx
c001c7a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7ad:	8b 15 e0 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030de0
c001c7b3:	83 c4 1c             	add    esp,0x1c
c001c7b6:	c1 e8 04             	shr    eax,0x4
c001c7b9:	89 04 95 60 0c 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf3a0],eax
c001c7c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7c4:	31 d2                	xor    edx,edx
c001c7c6:	52                   	push   edx
c001c7c7:	50                   	push   eax
c001c7c8:	53                   	push   ebx
c001c7c9:	e8 5e 65 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c7ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7d0:	31 d2                	xor    edx,edx
c001c7d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7d5:	56                   	push   esi
c001c7d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7da:	52                   	push   edx
c001c7db:	50                   	push   eax
c001c7dc:	53                   	push   ebx
c001c7dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7e0:	83 c4 14             	add    esp,0x14
c001c7e3:	53                   	push   ebx
c001c7e4:	e8 e3 64 ff ff       	call   c0012ccc <File::close()>
c001c7e9:	5d                   	pop    ebp
c001c7ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7ee:	e8 b6 2d ff ff       	call   c000f5a9 <free>
c001c7f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7f6:	e8 ae 2d ff ff       	call   c000f5a9 <free>
c001c7fb:	a1 e0 0d 03 c0       	mov    eax,ds:0xc0030de0
c001c800:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c804:	8d 50 01             	lea    edx,[eax+0x1]
c001c807:	89 0c 85 60 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2a0],ecx
c001c80e:	89 34 85 e0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf320],esi
c001c815:	89 15 e0 0d 03 c0    	mov    DWORD PTR ds:0xc0030de0,edx
c001c81b:	83 c4 10             	add    esp,0x10
c001c81e:	b0 01                	mov    al,0x1
c001c820:	83 c4 5c             	add    esp,0x5c
c001c823:	5b                   	pop    ebx
c001c824:	5e                   	pop    esi
c001c825:	5f                   	pop    edi
c001c826:	5d                   	pop    ebp
c001c827:	c3                   	ret    

c001c828 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c828:	55                   	push   ebp
c001c829:	57                   	push   edi
c001c82a:	56                   	push   esi
c001c82b:	53                   	push   ebx
c001c82c:	81 ec 68 03 00 00    	sub    esp,0x368
c001c832:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c839:	8b 1d 30 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e30
c001c83f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c843:	68 14 01 00 00       	push   0x114
c001c848:	e8 4c 2d ff ff       	call   c000f599 <malloc>
c001c84d:	83 c4 0c             	add    esp,0xc
c001c850:	89 c5                	mov    ebp,eax
c001c852:	53                   	push   ebx
c001c853:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c85a:	50                   	push   eax
c001c85b:	e8 aa 63 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001c860:	5e                   	pop    esi
c001c861:	5f                   	pop    edi
c001c862:	6a 01                	push   0x1
c001c864:	55                   	push   ebp
c001c865:	e8 04 64 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c001c86a:	83 c4 10             	add    esp,0x10
c001c86d:	85 c0                	test   eax,eax
c001c86f:	0f 85 a7 06 00 00    	jne    c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c875:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c87d:	83 ec 0c             	sub    esp,0xc
c001c880:	6a 34                	push   0x34
c001c882:	e8 12 2d ff ff       	call   c000f599 <malloc>
c001c887:	5b                   	pop    ebx
c001c888:	89 c7                	mov    edi,eax
c001c88a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c88e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c891:	53                   	push   ebx
c001c892:	57                   	push   edi
c001c893:	6a 00                	push   0x0
c001c895:	6a 34                	push   0x34
c001c897:	55                   	push   ebp
c001c898:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c89b:	83 c4 20             	add    esp,0x20
c001c89e:	85 c0                	test   eax,eax
c001c8a0:	0f 85 76 06 00 00    	jne    c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8a6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8ac:	0f 85 6a 06 00 00    	jne    c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8b2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8b5:	85 c0                	test   eax,eax
c001c8b7:	0f 84 5f 06 00 00    	je     c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8bd:	31 d2                	xor    edx,edx
c001c8bf:	51                   	push   ecx
c001c8c0:	52                   	push   edx
c001c8c1:	50                   	push   eax
c001c8c2:	55                   	push   ebp
c001c8c3:	e8 64 64 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c8c8:	83 c4 10             	add    esp,0x10
c001c8cb:	85 c0                	test   eax,eax
c001c8cd:	0f 85 49 06 00 00    	jne    c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8d3:	83 ec 0c             	sub    esp,0xc
c001c8d6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c8d9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8dd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c8e1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8e5:	0f af c2             	imul   eax,edx
c001c8e8:	50                   	push   eax
c001c8e9:	e8 ab 2c ff ff       	call   c000f599 <malloc>
c001c8ee:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8fc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c900:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c904:	0f af c2             	imul   eax,edx
c001c907:	99                   	cdq    
c001c908:	52                   	push   edx
c001c909:	50                   	push   eax
c001c90a:	55                   	push   ebp
c001c90b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c90e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c911:	83 c4 20             	add    esp,0x20
c001c914:	85 c0                	test   eax,eax
c001c916:	0f 84 00 06 00 00    	je     c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c91c:	52                   	push   edx
c001c91d:	31 d2                	xor    edx,edx
c001c91f:	52                   	push   edx
c001c920:	50                   	push   eax
c001c921:	55                   	push   ebp
c001c922:	e8 05 64 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c927:	83 c4 10             	add    esp,0x10
c001c92a:	85 c0                	test   eax,eax
c001c92c:	0f 85 ea 05 00 00    	jne    c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c932:	83 ec 0c             	sub    esp,0xc
c001c935:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c939:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c93d:	31 f6                	xor    esi,esi
c001c93f:	0f af c2             	imul   eax,edx
c001c942:	50                   	push   eax
c001c943:	e8 51 2c ff ff       	call   c000f599 <malloc>
c001c948:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c94b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c94f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c952:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c956:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c95a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c95e:	0f af c2             	imul   eax,edx
c001c961:	99                   	cdq    
c001c962:	52                   	push   edx
c001c963:	50                   	push   eax
c001c964:	55                   	push   ebp
c001c965:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c968:	83 c4 20             	add    esp,0x20
c001c96b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c96f:	0f 86 8a 00 00 00    	jbe    c001c9ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c975:	0f b7 de             	movzx  ebx,si
c001c978:	c1 e3 05             	shl    ebx,0x5
c001c97b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c97f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c982:	75 75                	jne    c001c9f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c984:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c987:	31 d2                	xor    edx,edx
c001c989:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c98d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c990:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c994:	50                   	push   eax
c001c995:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c998:	52                   	push   edx
c001c999:	50                   	push   eax
c001c99a:	55                   	push   ebp
c001c99b:	e8 8c 63 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001c9a0:	83 c4 10             	add    esp,0x10
c001c9a3:	85 c0                	test   eax,eax
c001c9a5:	0f 85 71 05 00 00    	jne    c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9ab:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9b2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9b5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9b9:	31 d2                	xor    edx,edx
c001c9bb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9bf:	83 ec 0c             	sub    esp,0xc
c001c9c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9cd:	50                   	push   eax
c001c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9d6:	52                   	push   edx
c001c9d7:	50                   	push   eax
c001c9d8:	55                   	push   ebp
c001c9d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9dc:	83 c4 1c             	add    esp,0x1c
c001c9df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9e2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c9e5:	50                   	push   eax
c001c9e6:	6a 00                	push   0x0
c001c9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ec:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c9f0:	50                   	push   eax
c001c9f1:	e8 5a 3d fe ff       	call   c0000750 <memset>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	46                   	inc    esi
c001c9fa:	e9 6c ff ff ff       	jmp    c001c96b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c9ff:	53                   	push   ebx
c001ca00:	31 db                	xor    ebx,ebx
c001ca02:	68 00 01 00 00       	push   0x100
c001ca07:	6a 00                	push   0x0
c001ca09:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca0d:	50                   	push   eax
c001ca0e:	e8 3d 3d fe ff       	call   c0000750 <memset>
c001ca13:	83 c4 0c             	add    esp,0xc
c001ca16:	68 00 01 00 00       	push   0x100
c001ca1b:	6a 00                	push   0x0
c001ca1d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca24:	50                   	push   eax
c001ca25:	e8 26 3d fe ff       	call   c0000750 <memset>
c001ca2a:	83 c4 10             	add    esp,0x10
c001ca2d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca35:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca3d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca45:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca4d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca55:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca59:	0f 86 30 01 00 00    	jbe    c001cb8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca5f:	0f b7 f3             	movzx  esi,bx
c001ca62:	6b f6 28             	imul   esi,esi,0x28
c001ca65:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca69:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca70:	52                   	push   edx
c001ca71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca75:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca79:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca7b:	6b d2 28             	imul   edx,edx,0x28
c001ca7e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ca82:	31 d2                	xor    edx,edx
c001ca84:	52                   	push   edx
c001ca85:	50                   	push   eax
c001ca86:	55                   	push   ebp
c001ca87:	e8 a0 62 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001ca8c:	83 c4 0c             	add    esp,0xc
c001ca8f:	6a 20                	push   0x20
c001ca91:	6a 00                	push   0x0
c001ca93:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ca9a:	51                   	push   ecx
c001ca9b:	e8 b0 3c fe ff       	call   c0000750 <memset>
c001caa0:	59                   	pop    ecx
c001caa1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001caa4:	8d 54 24 58          	lea    edx,[esp+0x58]
c001caa8:	52                   	push   edx
c001caa9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cab0:	51                   	push   ecx
c001cab1:	6a 00                	push   0x0
c001cab3:	6a 1f                	push   0x1f
c001cab5:	55                   	push   ebp
c001cab6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cab9:	83 c4 1c             	add    esp,0x1c
c001cabc:	6a 09                	push   0x9
c001cabe:	68 9e b9 02 c0       	push   0xc002b99e
c001cac3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001caca:	51                   	push   ecx
c001cacb:	e8 7c 3b fe ff       	call   c000064c <memcmp>
c001cad0:	83 c4 10             	add    esp,0x10
c001cad3:	85 c0                	test   eax,eax
c001cad5:	75 21                	jne    c001caf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cadb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cadf:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cae3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cae7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caea:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001caf1:	89 d0                	mov    eax,edx
c001caf3:	40                   	inc    eax
c001caf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001caf8:	50                   	push   eax
c001caf9:	6a 09                	push   0x9
c001cafb:	68 a8 b9 02 c0       	push   0xc002b9a8
c001cb00:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb07:	50                   	push   eax
c001cb08:	e8 3f 3b fe ff       	call   c000064c <memcmp>
c001cb0d:	83 c4 10             	add    esp,0x10
c001cb10:	85 c0                	test   eax,eax
c001cb12:	75 21                	jne    c001cb35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb1c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb24:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb27:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb2e:	89 d0                	mov    eax,edx
c001cb30:	40                   	inc    eax
c001cb31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb35:	50                   	push   eax
c001cb36:	50                   	push   eax
c001cb37:	68 74 b9 02 c0       	push   0xc002b974
c001cb3c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb43:	50                   	push   eax
c001cb44:	e8 4f 3d fe ff       	call   c0000898 <strcmp>
c001cb49:	83 c4 10             	add    esp,0x10
c001cb4c:	85 c0                	test   eax,eax
c001cb4e:	75 0f                	jne    c001cb5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb50:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb5f:	50                   	push   eax
c001cb60:	50                   	push   eax
c001cb61:	68 7c b9 02 c0       	push   0xc002b97c
c001cb66:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb6d:	50                   	push   eax
c001cb6e:	e8 25 3d fe ff       	call   c0000898 <strcmp>
c001cb73:	83 c4 10             	add    esp,0x10
c001cb76:	85 c0                	test   eax,eax
c001cb78:	75 0f                	jne    c001cb89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb7a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb7d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb85:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cb89:	43                   	inc    ebx
c001cb8a:	e9 c6 fe ff ff       	jmp    c001ca55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cb8f:	31 d2                	xor    edx,edx
c001cb91:	50                   	push   eax
c001cb92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb96:	52                   	push   edx
c001cb97:	50                   	push   eax
c001cb98:	55                   	push   ebp
c001cb99:	e8 8e 61 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001cb9e:	58                   	pop    eax
c001cb9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cba3:	e8 f1 29 ff ff       	call   c000f599 <malloc>
c001cba8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbab:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbaf:	31 d2                	xor    edx,edx
c001cbb1:	58                   	pop    eax
c001cbb2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbb6:	53                   	push   ebx
c001cbb7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbbf:	52                   	push   edx
c001cbc0:	50                   	push   eax
c001cbc1:	55                   	push   ebp
c001cbc2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbc5:	83 c4 14             	add    esp,0x14
c001cbc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbcc:	e8 c8 29 ff ff       	call   c000f599 <malloc>
c001cbd1:	31 d2                	xor    edx,edx
c001cbd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbd7:	83 c4 0c             	add    esp,0xc
c001cbda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbde:	52                   	push   edx
c001cbdf:	50                   	push   eax
c001cbe0:	55                   	push   ebp
c001cbe1:	e8 46 61 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001cbe6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbe9:	31 d2                	xor    edx,edx
c001cbeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbf6:	52                   	push   edx
c001cbf7:	50                   	push   eax
c001cbf8:	55                   	push   ebp
c001cbf9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbfc:	83 c4 20             	add    esp,0x20
c001cbff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc07:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc0b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc0f:	0f 84 0b 03 00 00    	je     c001cf20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc15:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc1c:	31 d2                	xor    edx,edx
c001cc1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc22:	c1 e8 03             	shr    eax,0x3
c001cc25:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc29:	51                   	push   ecx
c001cc2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc2e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc32:	52                   	push   edx
c001cc33:	50                   	push   eax
c001cc34:	55                   	push   ebp
c001cc35:	e8 f2 60 ff ff       	call   c0012d2c <File::seek(unsigned long long)>
c001cc3a:	5b                   	pop    ebx
c001cc3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc3f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc46:	e8 4e 29 ff ff       	call   c000f599 <malloc>
c001cc4b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc52:	31 d2                	xor    edx,edx
c001cc54:	5e                   	pop    esi
c001cc55:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc59:	50                   	push   eax
c001cc5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc62:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc69:	52                   	push   edx
c001cc6a:	50                   	push   eax
c001cc6b:	55                   	push   ebp
c001cc6c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc6f:	83 c4 20             	add    esp,0x20
c001cc72:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc7a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cc7e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cc82:	0f 8d 7c 02 00 00    	jge    c001cf04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cc88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc90:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cc95:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cc98:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cc9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cca0:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cca4:	89 d8                	mov    eax,ebx
c001cca6:	c1 e8 08             	shr    eax,0x8
c001cca9:	89 c6                	mov    esi,eax
c001ccab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ccaf:	c1 e6 04             	shl    esi,0x4
c001ccb2:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccb6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccb9:	85 d2                	test   edx,edx
c001ccbb:	0f 85 bf 00 00 00    	jne    c001cd80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccc1:	83 ec 0c             	sub    esp,0xc
c001ccc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccc8:	03 06                	add    eax,DWORD PTR [esi]
c001ccca:	50                   	push   eax
c001cccb:	e8 4b f8 ff ff       	call   c001c51b <Thr::getAddressOfKernelSymbol(char const*)>
c001ccd0:	83 c4 10             	add    esp,0x10
c001ccd3:	89 c2                	mov    edx,eax
c001ccd5:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ccda:	85 c0                	test   eax,eax
c001ccdc:	0f 85 9e 00 00 00    	jne    c001cd80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cce2:	83 ec 0c             	sub    esp,0xc
c001cce5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cce9:	03 06                	add    eax,DWORD PTR [esi]
c001cceb:	50                   	push   eax
c001ccec:	e8 4e 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001ccf1:	83 c4 10             	add    esp,0x10
c001ccf4:	89 c2                	mov    edx,eax
c001ccf6:	85 c0                	test   eax,eax
c001ccf8:	0f 85 82 00 00 00    	jne    c001cd80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccfe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd02:	50                   	push   eax
c001cd03:	50                   	push   eax
c001cd04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd08:	03 06                	add    eax,DWORD PTR [esi]
c001cd0a:	50                   	push   eax
c001cd0b:	68 b2 b9 02 c0       	push   0xc002b9b2
c001cd10:	e8 96 59 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001cd15:	58                   	pop    eax
c001cd16:	5a                   	pop    edx
c001cd17:	68 cc b9 02 c0       	push   0xc002b9cc
c001cd1c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd23:	50                   	push   eax
c001cd24:	e8 e3 3a fe ff       	call   c000080c <strcpy>
c001cd29:	59                   	pop    ecx
c001cd2a:	58                   	pop    eax
c001cd2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd2f:	03 06                	add    eax,DWORD PTR [esi]
c001cd31:	50                   	push   eax
c001cd32:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd39:	50                   	push   eax
c001cd3a:	e8 0d 3c fe ff       	call   c000094c <strcat>
c001cd3f:	58                   	pop    eax
c001cd40:	5a                   	pop    edx
c001cd41:	68 62 ba 02 c0       	push   0xc002ba62
c001cd46:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd4d:	50                   	push   eax
c001cd4e:	e8 f9 3b fe ff       	call   c000094c <strcat>
c001cd53:	83 c4 10             	add    esp,0x10
c001cd56:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd5b:	0f 84 5d 01 00 00    	je     c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd61:	83 ec 0c             	sub    esp,0xc
c001cd64:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd6b:	50                   	push   eax
c001cd6c:	e8 a6 d0 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001cd71:	83 c4 10             	add    esp,0x10
c001cd74:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cd7c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cd80:	80 fb 01             	cmp    bl,0x1
c001cd83:	0f 85 88 00 00 00    	jne    c001ce11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cd89:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cd90:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd94:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cd98:	01 ce                	add    esi,ecx
c001cd9a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cda0:	0f 94 c0             	sete   al
c001cda3:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cda9:	0f 94 c3             	sete   bl
c001cdac:	09 c3                	or     ebx,eax
c001cdae:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdb0:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdb5:	74 41                	je     c001cdf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cdb7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cdba:	84 db                	test   bl,bl
c001cdbc:	75 15                	jne    c001cdd3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cdbe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdc2:	66 83 f8 0c          	cmp    ax,0xc
c001cdc6:	76 05                	jbe    c001cdcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cdc8:	b8 0c 00 00 00       	mov    eax,0xc
c001cdcd:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdd1:	76 37                	jbe    c001ce0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdd3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cdd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cddc:	0f 84 dc 00 00 00    	je     c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cde2:	83 ec 0c             	sub    esp,0xc
c001cde5:	68 e3 b9 02 c0       	push   0xc002b9e3
c001cdea:	e8 28 d0 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001cdef:	83 c4 10             	add    esp,0x10
c001cdf2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cdf6:	eb 12                	jmp    c001ce0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdf8:	01 c1                	add    ecx,eax
c001cdfa:	84 db                	test   bl,bl
c001cdfc:	75 0c                	jne    c001ce0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdfe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce02:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce06:	77 02                	ja     c001ce0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce08:	01 d1                	add    ecx,edx
c001ce0a:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce0c:	e9 ea 00 00 00       	jmp    c001cefb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce11:	80 fb 02             	cmp    bl,0x2
c001ce14:	75 7c                	jne    c001ce92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce16:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce1d:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce21:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce25:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce2b:	74 20                	je     c001ce4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce2d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce33:	74 18                	je     c001ce4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce35:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce39:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce3e:	66 83 f8 0e          	cmp    ax,0xe
c001ce42:	77 03                	ja     c001ce47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce44:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce47:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce4b:	76 1f                	jbe    c001ce6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce4d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce51:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce56:	74 66                	je     c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	68 ff b9 02 c0       	push   0xc002b9ff
c001ce60:	e8 b2 cf ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001ce65:	83 c4 10             	add    esp,0x10
c001ce68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce6c:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce6e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce73:	74 13                	je     c001ce88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ce75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce79:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ce80:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ce84:	01 c8                	add    eax,ecx
c001ce86:	eb 04                	jmp    c001ce8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ce88:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ce8c:	01 c2                	add    edx,eax
c001ce8e:	89 16                	mov    DWORD PTR [esi],edx
c001ce90:	eb 69                	jmp    c001cefb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce92:	0f b6 db             	movzx  ebx,bl
c001ce95:	50                   	push   eax
c001ce96:	50                   	push   eax
c001ce97:	53                   	push   ebx
c001ce98:	68 1b ba 02 c0       	push   0xc002ba1b
c001ce9d:	e8 09 58 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001cea2:	83 c4 10             	add    esp,0x10
c001cea5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ceaa:	74 12                	je     c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ceac:	83 ec 0c             	sub    esp,0xc
c001ceaf:	68 26 ba 02 c0       	push   0xc002ba26
c001ceb4:	e8 5e cf ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001ceb9:	83 c4 10             	add    esp,0x10
c001cebc:	eb 3d                	jmp    c001cefb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cebe:	83 ec 0c             	sub    esp,0xc
c001cec1:	55                   	push   ebp
c001cec2:	e8 05 5e ff ff       	call   c0012ccc <File::close()>
c001cec7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ceca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cecd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ced0:	59                   	pop    ecx
c001ced1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ced5:	e8 cf 26 ff ff       	call   c000f5a9 <free>
c001ceda:	5b                   	pop    ebx
c001cedb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cedf:	e8 c5 26 ff ff       	call   c000f5a9 <free>
c001cee4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cee7:	e8 bd 26 ff ff       	call   c000f5a9 <free>
c001ceec:	5e                   	pop    esi
c001ceed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cef1:	e8 b3 26 ff ff       	call   c000f5a9 <free>
c001cef6:	83 c4 10             	add    esp,0x10
c001cef9:	eb 21                	jmp    c001cf1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cefb:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001ceff:	e9 76 fd ff ff       	jmp    c001cc7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf04:	83 ec 0c             	sub    esp,0xc
c001cf07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf0b:	e8 99 26 ff ff       	call   c000f5a9 <free>
c001cf10:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf14:	83 c4 10             	add    esp,0x10
c001cf17:	e9 eb fc ff ff       	jmp    c001cc07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf1c:	31 c0                	xor    eax,eax
c001cf1e:	eb 33                	jmp    c001cf53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	55                   	push   ebp
c001cf24:	e8 a3 5d ff ff       	call   c0012ccc <File::close()>
c001cf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf2c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf32:	58                   	pop    eax
c001cf33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf37:	e8 6d 26 ff ff       	call   c000f5a9 <free>
c001cf3c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf3f:	e8 65 26 ff ff       	call   c000f5a9 <free>
c001cf44:	5a                   	pop    edx
c001cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf49:	e8 5b 26 ff ff       	call   c000f5a9 <free>
c001cf4e:	83 c4 10             	add    esp,0x10
c001cf51:	b0 01                	mov    al,0x1
c001cf53:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf59:	5b                   	pop    ebx
c001cf5a:	5e                   	pop    esi
c001cf5b:	5f                   	pop    edi
c001cf5c:	5d                   	pop    ebp
c001cf5d:	c3                   	ret    

c001cf5e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf5e:	56                   	push   esi
c001cf5f:	31 d2                	xor    edx,edx
c001cf61:	53                   	push   ebx
c001cf62:	8b 1d 40 06 03 c0    	mov    ebx,DWORD PTR ds:0xc0030640
c001cf68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf6c:	39 d3                	cmp    ebx,edx
c001cf6e:	7e 1b                	jle    c001cf8b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf70:	8b 04 95 60 08 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf7a0]
c001cf77:	39 c8                	cmp    eax,ecx
c001cf79:	77 0d                	ja     c001cf88 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf7b:	8b 34 95 60 06 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf9a0]
c001cf82:	01 c6                	add    esi,eax
c001cf84:	39 ce                	cmp    esi,ecx
c001cf86:	77 05                	ja     c001cf8d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cf88:	42                   	inc    edx
c001cf89:	eb e1                	jmp    c001cf6c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cf8b:	31 c0                	xor    eax,eax
c001cf8d:	5b                   	pop    ebx
c001cf8e:	5e                   	pop    esi
c001cf8f:	c3                   	ret    

c001cf90 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cf90:	53                   	push   ebx
c001cf91:	31 c0                	xor    eax,eax
c001cf93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cf97:	8b 1d 40 06 03 c0    	mov    ebx,DWORD PTR ds:0xc0030640
c001cf9d:	39 c3                	cmp    ebx,eax
c001cf9f:	7e 22                	jle    c001cfc3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfa1:	8b 14 85 60 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf7a0]
c001cfa8:	39 ca                	cmp    edx,ecx
c001cfaa:	77 14                	ja     c001cfc0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfac:	03 14 85 60 06 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf9a0]
c001cfb3:	39 ca                	cmp    edx,ecx
c001cfb5:	76 09                	jbe    c001cfc0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfb7:	8b 04 85 60 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5a0]
c001cfbe:	eb 05                	jmp    c001cfc5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cfc0:	40                   	inc    eax
c001cfc1:	eb da                	jmp    c001cf9d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cfc3:	31 c0                	xor    eax,eax
c001cfc5:	5b                   	pop    ebx
c001cfc6:	c3                   	ret    

c001cfc7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfc7:	53                   	push   ebx
c001cfc8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cfcc:	53                   	push   ebx
c001cfcd:	e8 8c ff ff ff       	call   c001cf5e <Thr::getDriverBaseFromAddress(unsigned long)>
c001cfd2:	5a                   	pop    edx
c001cfd3:	31 d2                	xor    edx,edx
c001cfd5:	85 c0                	test   eax,eax
c001cfd7:	74 04                	je     c001cfdd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cfd9:	89 da                	mov    edx,ebx
c001cfdb:	29 c2                	sub    edx,eax
c001cfdd:	89 d0                	mov    eax,edx
c001cfdf:	5b                   	pop    ebx
c001cfe0:	c3                   	ret    

c001cfe1 <Thr::loadDLL(char const*, bool)>:
c001cfe1:	55                   	push   ebp
c001cfe2:	57                   	push   edi
c001cfe3:	56                   	push   esi
c001cfe4:	53                   	push   ebx
c001cfe5:	81 ec 34 01 00 00    	sub    esp,0x134
c001cfeb:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cff2:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cff9:	56                   	push   esi
c001cffa:	68 3e ba 02 c0       	push   0xc002ba3e
c001cfff:	e8 a7 56 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001d004:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d00b:	e8 89 25 ff ff       	call   c000f599 <malloc>
c001d010:	83 c4 0c             	add    esp,0xc
c001d013:	89 c3                	mov    ebx,eax
c001d015:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c001d01b:	56                   	push   esi
c001d01c:	50                   	push   eax
c001d01d:	e8 e8 5b ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001d022:	83 c4 10             	add    esp,0x10
c001d025:	85 db                	test   ebx,ebx
c001d027:	75 3c                	jne    c001d065 <Thr::loadDLL(char const*, bool)+0x84>
c001d029:	89 f8                	mov    eax,edi
c001d02b:	84 c0                	test   al,al
c001d02d:	0f 84 cc 01 00 00    	je     c001d1ff <Thr::loadDLL(char const*, bool)+0x21e>
c001d033:	55                   	push   ebp
c001d034:	55                   	push   ebp
c001d035:	68 4f ba 02 c0       	push   0xc002ba4f
c001d03a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d03e:	55                   	push   ebp
c001d03f:	e8 c8 37 fe ff       	call   c000080c <strcpy>
c001d044:	58                   	pop    eax
c001d045:	5a                   	pop    edx
c001d046:	56                   	push   esi
c001d047:	55                   	push   ebp
c001d048:	e8 ff 38 fe ff       	call   c000094c <strcat>
c001d04d:	59                   	pop    ecx
c001d04e:	58                   	pop    eax
c001d04f:	68 62 ba 02 c0       	push   0xc002ba62
c001d054:	55                   	push   ebp
c001d055:	e8 f2 38 fe ff       	call   c000094c <strcat>
c001d05a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d05d:	e8 b5 cd ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001d062:	83 c4 10             	add    esp,0x10
c001d065:	51                   	push   ecx
c001d066:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d06a:	50                   	push   eax
c001d06b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d06f:	50                   	push   eax
c001d070:	53                   	push   ebx
c001d071:	e8 a4 5e ff ff       	call   c0012f1a <File::stat(unsigned long long*, bool*)>
c001d076:	83 c4 10             	add    esp,0x10
c001d079:	85 db                	test   ebx,ebx
c001d07b:	74 0c                	je     c001d089 <Thr::loadDLL(char const*, bool)+0xa8>
c001d07d:	83 ec 0c             	sub    esp,0xc
c001d080:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d082:	53                   	push   ebx
c001d083:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d086:	83 c4 10             	add    esp,0x10
c001d089:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d08e:	75 0a                	jne    c001d09a <Thr::loadDLL(char const*, bool)+0xb9>
c001d090:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d094:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d098:	75 3c                	jne    c001d0d6 <Thr::loadDLL(char const*, bool)+0xf5>
c001d09a:	89 f8                	mov    eax,edi
c001d09c:	84 c0                	test   al,al
c001d09e:	0f 84 43 01 00 00    	je     c001d1e7 <Thr::loadDLL(char const*, bool)+0x206>
c001d0a4:	51                   	push   ecx
c001d0a5:	51                   	push   ecx
c001d0a6:	68 4f ba 02 c0       	push   0xc002ba4f
c001d0ab:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0af:	53                   	push   ebx
c001d0b0:	e8 57 37 fe ff       	call   c000080c <strcpy>
c001d0b5:	5d                   	pop    ebp
c001d0b6:	58                   	pop    eax
c001d0b7:	56                   	push   esi
c001d0b8:	53                   	push   ebx
c001d0b9:	e8 8e 38 fe ff       	call   c000094c <strcat>
c001d0be:	58                   	pop    eax
c001d0bf:	5a                   	pop    edx
c001d0c0:	68 62 ba 02 c0       	push   0xc002ba62
c001d0c5:	53                   	push   ebx
c001d0c6:	e8 81 38 fe ff       	call   c000094c <strcat>
c001d0cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ce:	e8 44 cd ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001d0d3:	83 c4 10             	add    esp,0x10
c001d0d6:	52                   	push   edx
c001d0d7:	6a 03                	push   0x3
c001d0d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d0e1:	05 ff 0f 00 00       	add    eax,0xfff
c001d0e6:	83 d2 00             	adc    edx,0x0
c001d0e9:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d0ed:	50                   	push   eax
c001d0ee:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c001d0f4:	e8 c5 49 ff ff       	call   c0011abe <VAS::allocatePages(int, int)>
c001d0f9:	59                   	pop    ecx
c001d0fa:	89 c3                	mov    ebx,eax
c001d0fc:	5d                   	pop    ebp
c001d0fd:	50                   	push   eax
c001d0fe:	68 42 a0 02 c0       	push   0xc002a042
c001d103:	e8 a3 55 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001d108:	89 34 24             	mov    DWORD PTR [esp],esi
c001d10b:	e8 5c 36 fe ff       	call   c000076c <strlen>
c001d110:	8b 2d 40 06 03 c0    	mov    ebp,DWORD PTR ds:0xc0030640
c001d116:	40                   	inc    eax
c001d117:	89 04 24             	mov    DWORD PTR [esp],eax
c001d11a:	e8 7a 24 ff ff       	call   c000f599 <malloc>
c001d11f:	89 04 ad 60 0a 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf5a0],eax
c001d126:	58                   	pop    eax
c001d127:	a1 40 06 03 c0       	mov    eax,ds:0xc0030640
c001d12c:	5a                   	pop    edx
c001d12d:	56                   	push   esi
c001d12e:	ff 34 85 60 0a 03 c0 	push   DWORD PTR [eax*4-0x3ffcf5a0]
c001d135:	e8 d2 36 fe ff       	call   c000080c <strcpy>
c001d13a:	a1 40 06 03 c0       	mov    eax,ds:0xc0030640
c001d13f:	8d 50 01             	lea    edx,[eax+0x1]
c001d142:	89 1c 85 60 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf7a0],ebx
c001d149:	89 15 40 06 03 c0    	mov    DWORD PTR ds:0xc0030640,edx
c001d14f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d153:	83 c4 0c             	add    esp,0xc
c001d156:	89 14 85 60 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf9a0],edx
c001d15d:	6a 01                	push   0x1
c001d15f:	53                   	push   ebx
c001d160:	56                   	push   esi
c001d161:	e8 c2 f6 ff ff       	call   c001c828 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d166:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d16a:	83 c4 10             	add    esp,0x10
c001d16d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d172:	0f 85 83 00 00 00    	jne    c001d1fb <Thr::loadDLL(char const*, bool)+0x21a>
c001d178:	89 f8                	mov    eax,edi
c001d17a:	84 c0                	test   al,al
c001d17c:	74 6d                	je     c001d1eb <Thr::loadDLL(char const*, bool)+0x20a>
c001d17e:	83 ec 0c             	sub    esp,0xc
c001d181:	68 64 ba 02 c0       	push   0xc002ba64
c001d186:	e8 8c cc ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001d18b:	83 c4 10             	add    esp,0x10
c001d18e:	eb 5b                	jmp    c001d1eb <Thr::loadDLL(char const*, bool)+0x20a>
c001d190:	89 ee                	mov    esi,ebp
c001d192:	50                   	push   eax
c001d193:	c1 e6 0c             	shl    esi,0xc
c001d196:	50                   	push   eax
c001d197:	01 de                	add    esi,ebx
c001d199:	56                   	push   esi
c001d19a:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c001d1a0:	e8 81 44 ff ff       	call   c0011626 <VAS::getPageTableEntry(unsigned long)>
c001d1a5:	83 c4 10             	add    esp,0x10
c001d1a8:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d1ab:	75 0c                	jne    c001d1b9 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d1ad:	83 ec 0c             	sub    esp,0xc
c001d1b0:	56                   	push   esi
c001d1b1:	e8 4a 27 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001d1b6:	83 c4 10             	add    esp,0x10
c001d1b9:	45                   	inc    ebp
c001d1ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1c2:	05 ff 0f 00 00       	add    eax,0xfff
c001d1c7:	bf 00 00 00 00       	mov    edi,0x0
c001d1cc:	83 d2 00             	adc    edx,0x0
c001d1cf:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1d3:	c1 ea 0c             	shr    edx,0xc
c001d1d6:	39 c5                	cmp    ebp,eax
c001d1d8:	89 d1                	mov    ecx,edx
c001d1da:	89 f8                	mov    eax,edi
c001d1dc:	19 c8                	sbb    eax,ecx
c001d1de:	72 b0                	jb     c001d190 <Thr::loadDLL(char const*, bool)+0x1af>
c001d1e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d1e5:	75 18                	jne    c001d1ff <Thr::loadDLL(char const*, bool)+0x21e>
c001d1e7:	31 db                	xor    ebx,ebx
c001d1e9:	eb 14                	jmp    c001d1ff <Thr::loadDLL(char const*, bool)+0x21e>
c001d1eb:	83 ec 0c             	sub    esp,0xc
c001d1ee:	68 83 ba 02 c0       	push   0xc002ba83
c001d1f3:	e8 1f cc ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001d1f8:	83 c4 10             	add    esp,0x10
c001d1fb:	31 ed                	xor    ebp,ebp
c001d1fd:	eb bb                	jmp    c001d1ba <Thr::loadDLL(char const*, bool)+0x1d9>
c001d1ff:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d205:	89 d8                	mov    eax,ebx
c001d207:	5b                   	pop    ebx
c001d208:	5e                   	pop    esi
c001d209:	5f                   	pop    edi
c001d20a:	5d                   	pop    ebp
c001d20b:	c3                   	ret    

c001d20c <Thr::executeDLL(unsigned long, void*)>:
c001d20c:	56                   	push   esi
c001d20d:	53                   	push   ebx
c001d20e:	52                   	push   edx
c001d20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d213:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d217:	85 db                	test   ebx,ebx
c001d219:	75 10                	jne    c001d22b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d21b:	83 ec 0c             	sub    esp,0xc
c001d21e:	68 9f ba 02 c0       	push   0xc002ba9f
c001d223:	e8 ef cb ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001d228:	83 c4 10             	add    esp,0x10
c001d22b:	50                   	push   eax
c001d22c:	50                   	push   eax
c001d22d:	53                   	push   ebx
c001d22e:	68 c9 ba 02 c0       	push   0xc002bac9
c001d233:	e8 73 54 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001d238:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d23c:	89 d8                	mov    eax,ebx
c001d23e:	83 c4 14             	add    esp,0x14
c001d241:	5b                   	pop    ebx
c001d242:	5e                   	pop    esi
c001d243:	ff e0                	jmp    eax
c001d245:	90                   	nop

c001d246 <userModeEntryPoint(void*)>:
c001d246:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001d24b:	48                   	dec    eax
c001d24c:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001d251:	75 01                	jne    c001d254 <userModeEntryPoint(void*)+0xe>
c001d253:	fb                   	sti    
c001d254:	fb                   	sti    
c001d255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d25a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d25d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d263:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d267:	e9 be 30 fe ff       	jmp    c000032a <goToUsermode>

c001d26c <changeTSS>:
c001d26c:	83 ec 14             	sub    esp,0x14
c001d26f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d274:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d277:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d27c:	c1 e2 15             	shl    edx,0x15
c001d27f:	29 d0                	sub    eax,edx
c001d281:	50                   	push   eax
c001d282:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001d287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d28d:	05 7c 11 00 00       	add    eax,0x117c
c001d292:	50                   	push   eax
c001d293:	e8 bc 38 ff ff       	call   c0010b54 <TSS::setESP(unsigned long)>
c001d298:	83 c4 1c             	add    esp,0x1c
c001d29b:	c3                   	ret    

c001d29c <switchToThread(ThreadControlBlock*)>:
c001d29c:	57                   	push   edi
c001d29d:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001d2a2:	56                   	push   esi
c001d2a3:	85 c0                	test   eax,eax
c001d2a5:	53                   	push   ebx
c001d2a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2aa:	0f 85 88 00 00 00    	jne    c001d338 <switchToThread(ThreadControlBlock*)+0x9c>
c001d2b0:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d2b3:	3c ff                	cmp    al,0xff
c001d2b5:	74 7d                	je     c001d334 <switchToThread(ThreadControlBlock*)+0x98>
c001d2b7:	0f b6 d0             	movzx  edx,al
c001d2ba:	b8 84 03 00 00       	mov    eax,0x384
c001d2bf:	29 d0                	sub    eax,edx
c001d2c1:	c1 e0 10             	shl    eax,0x10
c001d2c4:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d2c7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d2ca:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001d2cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2d5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d2dc:	74 4a                	je     c001d328 <switchToThread(ThreadControlBlock*)+0x8c>
c001d2de:	0f 31                	rdtsc  
c001d2e0:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c001d2e5:	89 c6                	mov    esi,eax
c001d2e7:	89 d7                	mov    edi,edx
c001d2e9:	2b 35 38 0e 03 c0    	sub    esi,DWORD PTR ds:0xc0030e38
c001d2ef:	89 15 4c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e4c,edx
c001d2f5:	1b 3d 3c 0e 03 c0    	sbb    edi,DWORD PTR ds:0xc0030e3c
c001d2fb:	89 35 40 0e 03 c0    	mov    DWORD PTR ds:0xc0030e40,esi
c001d301:	a3 38 0e 03 c0       	mov    ds:0xc0030e38,eax
c001d306:	89 3d 44 0e 03 c0    	mov    DWORD PTR ds:0xc0030e44,edi
c001d30c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d312:	89 15 3c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e3c,edx
c001d318:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d31b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d31e:	01 c6                	add    esi,eax
c001d320:	11 d7                	adc    edi,edx
c001d322:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d325:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d328:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d32c:	5b                   	pop    ebx
c001d32d:	5e                   	pop    esi
c001d32e:	5f                   	pop    edi
c001d32f:	e9 2e 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d334:	31 c0                	xor    eax,eax
c001d336:	eb 8f                	jmp    c001d2c7 <switchToThread(ThreadControlBlock*)+0x2b>
c001d338:	5b                   	pop    ebx
c001d339:	c7 05 00 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x1
c001d343:	5e                   	pop    esi
c001d344:	5f                   	pop    edi
c001d345:	c3                   	ret    

c001d346 <Process::addArgs(char**)>:
c001d346:	57                   	push   edi
c001d347:	56                   	push   esi
c001d348:	53                   	push   ebx
c001d349:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d34d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d351:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d35b:	85 ff                	test   edi,edi
c001d35d:	74 3d                	je     c001d39c <Process::addArgs(char**)+0x56>
c001d35f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d361:	85 c0                	test   eax,eax
c001d363:	74 37                	je     c001d39c <Process::addArgs(char**)+0x56>
c001d365:	31 db                	xor    ebx,ebx
c001d367:	83 ec 0c             	sub    esp,0xc
c001d36a:	50                   	push   eax
c001d36b:	e8 fc 33 fe ff       	call   c000076c <strlen>
c001d370:	40                   	inc    eax
c001d371:	89 04 24             	mov    DWORD PTR [esp],eax
c001d374:	e8 20 22 ff ff       	call   c000f599 <malloc>
c001d379:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d380:	5a                   	pop    edx
c001d381:	59                   	pop    ecx
c001d382:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d385:	43                   	inc    ebx
c001d386:	50                   	push   eax
c001d387:	e8 80 34 fe ff       	call   c000080c <strcpy>
c001d38c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d392:	83 c4 10             	add    esp,0x10
c001d395:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d398:	85 c0                	test   eax,eax
c001d39a:	75 cb                	jne    c001d367 <Process::addArgs(char**)+0x21>
c001d39c:	5b                   	pop    ebx
c001d39d:	5e                   	pop    esi
c001d39e:	5f                   	pop    edi
c001d39f:	c3                   	ret    

c001d3a0 <Process::Process(char const*, Process*, char**)>:
c001d3a0:	56                   	push   esi
c001d3a1:	53                   	push   ebx
c001d3a2:	83 ec 14             	sub    esp,0x14
c001d3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a9:	05 0c 02 00 00       	add    eax,0x20c
c001d3ae:	bb 07 00 00 00       	mov    ebx,0x7
c001d3b3:	89 c6                	mov    esi,eax
c001d3b5:	85 db                	test   ebx,ebx
c001d3b7:	78 12                	js     c001d3cb <Process::Process(char const*, Process*, char**)+0x2b>
c001d3b9:	83 ec 0c             	sub    esp,0xc
c001d3bc:	56                   	push   esi
c001d3bd:	e8 94 b6 00 00       	call   c0028a56 <ThreadControlBlock::ThreadControlBlock()>
c001d3c2:	83 c4 10             	add    esp,0x10
c001d3c5:	83 c6 63             	add    esi,0x63
c001d3c8:	4b                   	dec    ebx
c001d3c9:	eb ea                	jmp    c001d3b5 <Process::Process(char const*, Process*, char**)+0x15>
c001d3cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3cf:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d3d6:	83 ec 0c             	sub    esp,0xc
c001d3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3dd:	e8 be c8 ff ff       	call   c0019ca0 <Krnl::newProcessEnv(Process*)>
c001d3e2:	83 c4 10             	add    esp,0x10
c001d3e5:	89 c2                	mov    edx,eax
c001d3e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3eb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d3fe:	a1 70 ce 02 c0       	mov    eax,ds:0xc002ce70
c001d403:	8d 50 01             	lea    edx,[eax+0x1]
c001d406:	89 15 70 ce 02 c0    	mov    DWORD PTR ds:0xc002ce70,edx
c001d40c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d410:	89 02                	mov    DWORD PTR [edx],eax
c001d412:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d41a:	83 ec 0c             	sub    esp,0xc
c001d41d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d421:	e8 73 21 ff ff       	call   c000f599 <malloc>
c001d426:	83 c4 10             	add    esp,0x10
c001d429:	89 c3                	mov    ebx,eax
c001d42b:	83 ec 08             	sub    esp,0x8
c001d42e:	6a 00                	push   0x0
c001d430:	53                   	push   ebx
c001d431:	e8 30 4a ff ff       	call   c0011e66 <VAS::VAS(bool)>
c001d436:	83 c4 10             	add    esp,0x10
c001d439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d43d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d443:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d447:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d455:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d459:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d45f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d463:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d469:	85 c0                	test   eax,eax
c001d46b:	74 42                	je     c001d4af <Process::Process(char const*, Process*, char**)+0x10f>
c001d46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d471:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d477:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d47d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d481:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d491:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49b:	05 0c 01 00 00       	add    eax,0x10c
c001d4a0:	83 ec 08             	sub    esp,0x8
c001d4a3:	52                   	push   edx
c001d4a4:	50                   	push   eax
c001d4a5:	e8 62 33 fe ff       	call   c000080c <strcpy>
c001d4aa:	83 c4 10             	add    esp,0x10
c001d4ad:	eb 63                	jmp    c001d512 <Process::Process(char const*, Process*, char**)+0x172>
c001d4af:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d4b7:	83 ec 0c             	sub    esp,0xc
c001d4ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4be:	e8 d6 20 ff ff       	call   c000f599 <malloc>
c001d4c3:	83 c4 10             	add    esp,0x10
c001d4c6:	89 c3                	mov    ebx,eax
c001d4c8:	83 ec 08             	sub    esp,0x8
c001d4cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4cf:	53                   	push   ebx
c001d4d0:	e8 93 33 ff ff       	call   c0010868 <VgaText::VgaText(char const*)>
c001d4d5:	83 c4 10             	add    esp,0x10
c001d4d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4dc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d4e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	50                   	push   eax
c001d4f0:	e8 32 2b ff ff       	call   c0010027 <addToTerminalCycle(VgaText*)>
c001d4f5:	83 c4 10             	add    esp,0x10
c001d4f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4fc:	05 0c 01 00 00       	add    eax,0x10c
c001d501:	83 ec 08             	sub    esp,0x8
c001d504:	68 e8 ba 02 c0       	push   0xc002bae8
c001d509:	50                   	push   eax
c001d50a:	e8 fd 32 fe ff       	call   c000080c <strcpy>
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d516:	83 c0 0c             	add    eax,0xc
c001d519:	83 ec 08             	sub    esp,0x8
c001d51c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d520:	50                   	push   eax
c001d521:	e8 e6 32 fe ff       	call   c000080c <strcpy>
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	83 ec 08             	sub    esp,0x8
c001d52c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d530:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d534:	e8 0d fe ff ff       	call   c001d346 <Process::addArgs(char**)>
c001d539:	83 c4 10             	add    esp,0x10
c001d53c:	83 ec 08             	sub    esp,0x8
c001d53f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d543:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d547:	e8 a6 ed ff ff       	call   c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d54c:	83 c4 10             	add    esp,0x10
c001d54f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d553:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d557:	83 f0 01             	xor    eax,0x1
c001d55a:	88 c2                	mov    dl,al
c001d55c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d560:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d566:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d56b:	83 ec 08             	sub    esp,0x8
c001d56e:	50                   	push   eax
c001d56f:	68 40 bb 02 c0       	push   0xc002bb40
c001d574:	e8 32 51 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	90                   	nop
c001d57d:	83 c4 14             	add    esp,0x14
c001d580:	5b                   	pop    ebx
c001d581:	5e                   	pop    esi
c001d582:	c3                   	ret    
c001d583:	90                   	nop

c001d584 <Process::Process(bool, char const*, Process*, char**)>:
c001d584:	56                   	push   esi
c001d585:	53                   	push   ebx
c001d586:	83 ec 24             	sub    esp,0x24
c001d589:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d58d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d595:	05 0c 02 00 00       	add    eax,0x20c
c001d59a:	bb 07 00 00 00       	mov    ebx,0x7
c001d59f:	89 c6                	mov    esi,eax
c001d5a1:	85 db                	test   ebx,ebx
c001d5a3:	78 12                	js     c001d5b7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5a5:	83 ec 0c             	sub    esp,0xc
c001d5a8:	56                   	push   esi
c001d5a9:	e8 a8 b4 00 00       	call   c0028a56 <ThreadControlBlock::ThreadControlBlock()>
c001d5ae:	83 c4 10             	add    esp,0x10
c001d5b1:	83 c6 63             	add    esi,0x63
c001d5b4:	4b                   	dec    ebx
c001d5b5:	eb ea                	jmp    c001d5a1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d5b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5bb:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5c2:	83 ec 0c             	sub    esp,0xc
c001d5c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5c9:	e8 d2 c6 ff ff       	call   c0019ca0 <Krnl::newProcessEnv(Process*)>
c001d5ce:	83 c4 10             	add    esp,0x10
c001d5d1:	89 c2                	mov    edx,eax
c001d5d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5d7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d5dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5e1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d5ea:	a1 70 ce 02 c0       	mov    eax,ds:0xc002ce70
c001d5ef:	8d 50 01             	lea    edx,[eax+0x1]
c001d5f2:	89 15 70 ce 02 c0    	mov    DWORD PTR ds:0xc002ce70,edx
c001d5f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5fc:	89 02                	mov    DWORD PTR [edx],eax
c001d5fe:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d606:	83 ec 0c             	sub    esp,0xc
c001d609:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d60d:	e8 87 1f ff ff       	call   c000f599 <malloc>
c001d612:	83 c4 10             	add    esp,0x10
c001d615:	89 c3                	mov    ebx,eax
c001d617:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d61c:	83 ec 08             	sub    esp,0x8
c001d61f:	50                   	push   eax
c001d620:	53                   	push   ebx
c001d621:	e8 40 48 ff ff       	call   c0011e66 <VAS::VAS(bool)>
c001d626:	83 c4 10             	add    esp,0x10
c001d629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d62d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d633:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d637:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d645:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d649:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d64f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d653:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d659:	85 c0                	test   eax,eax
c001d65b:	74 42                	je     c001d69f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d65d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d661:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d667:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d66d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d671:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d677:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d67b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d681:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d687:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d68b:	05 0c 01 00 00       	add    eax,0x10c
c001d690:	83 ec 08             	sub    esp,0x8
c001d693:	52                   	push   edx
c001d694:	50                   	push   eax
c001d695:	e8 72 31 fe ff       	call   c000080c <strcpy>
c001d69a:	83 c4 10             	add    esp,0x10
c001d69d:	eb 63                	jmp    c001d702 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d69f:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6a7:	83 ec 0c             	sub    esp,0xc
c001d6aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6ae:	e8 e6 1e ff ff       	call   c000f599 <malloc>
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	89 c3                	mov    ebx,eax
c001d6b8:	83 ec 08             	sub    esp,0x8
c001d6bb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6bf:	53                   	push   ebx
c001d6c0:	e8 a3 31 ff ff       	call   c0010868 <VgaText::VgaText(char const*)>
c001d6c5:	83 c4 10             	add    esp,0x10
c001d6c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6cc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6d6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	50                   	push   eax
c001d6e0:	e8 42 29 ff ff       	call   c0010027 <addToTerminalCycle(VgaText*)>
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ec:	05 0c 01 00 00       	add    eax,0x10c
c001d6f1:	83 ec 08             	sub    esp,0x8
c001d6f4:	68 e8 ba 02 c0       	push   0xc002bae8
c001d6f9:	50                   	push   eax
c001d6fa:	e8 0d 31 fe ff       	call   c000080c <strcpy>
c001d6ff:	83 c4 10             	add    esp,0x10
c001d702:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d706:	83 c0 0c             	add    eax,0xc
c001d709:	83 ec 08             	sub    esp,0x8
c001d70c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d710:	50                   	push   eax
c001d711:	e8 f6 30 fe ff       	call   c000080c <strcpy>
c001d716:	83 c4 10             	add    esp,0x10
c001d719:	83 ec 08             	sub    esp,0x8
c001d71c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d724:	e8 1d fc ff ff       	call   c001d346 <Process::addArgs(char**)>
c001d729:	83 c4 10             	add    esp,0x10
c001d72c:	90                   	nop
c001d72d:	83 c4 24             	add    esp,0x24
c001d730:	5b                   	pop    ebx
c001d731:	5e                   	pop    esi
c001d732:	c3                   	ret    

c001d733 <taskStartupFunction>:
c001d733:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d738:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d73b:	c3                   	ret    

c001d73c <Semaphore::Semaphore(int)>:
c001d73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d740:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d744:	89 10                	mov    DWORD PTR [eax],edx
c001d746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d74a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d755:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d75c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d760:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d767:	90                   	nop
c001d768:	c3                   	ret    
c001d769:	90                   	nop

c001d76a <Mutex::Mutex()>:
c001d76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d76e:	6a 01                	push   0x1
c001d770:	50                   	push   eax
c001d771:	e8 c6 ff ff ff       	call   c001d73c <Semaphore::Semaphore(int)>
c001d776:	83 c4 08             	add    esp,0x8
c001d779:	90                   	nop
c001d77a:	c3                   	ret    
c001d77b:	90                   	nop

c001d77c <Process::createThread(void (*)(void*), void*, int)>:
c001d77c:	55                   	push   ebp
c001d77d:	31 c9                	xor    ecx,ecx
c001d77f:	57                   	push   edi
c001d780:	56                   	push   esi
c001d781:	53                   	push   ebx
c001d782:	83 ec 1c             	sub    esp,0x1c
c001d785:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d789:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d790:	89 f2                	mov    edx,esi
c001d792:	0f b7 c2             	movzx  eax,dx
c001d795:	83 e2 01             	and    edx,0x1
c001d798:	74 16                	je     c001d7b0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d79a:	d1 f8                	sar    eax,1
c001d79c:	41                   	inc    ecx
c001d79d:	89 c2                	mov    edx,eax
c001d79f:	83 f9 10             	cmp    ecx,0x10
c001d7a2:	75 ee                	jne    c001d792 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7a4:	83 c4 1c             	add    esp,0x1c
c001d7a7:	31 db                	xor    ebx,ebx
c001d7a9:	89 d8                	mov    eax,ebx
c001d7ab:	5b                   	pop    ebx
c001d7ac:	5e                   	pop    esi
c001d7ad:	5f                   	pop    edi
c001d7ae:	5d                   	pop    ebp
c001d7af:	c3                   	ret    
c001d7b0:	b8 01 00 00 00       	mov    eax,0x1
c001d7b5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d7b8:	d3 e0                	shl    eax,cl
c001d7ba:	09 c6                	or     esi,eax
c001d7bc:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d7bf:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d7c6:	89 c6                	mov    esi,eax
c001d7c8:	c1 e6 05             	shl    esi,0x5
c001d7cb:	01 f0                	add    eax,esi
c001d7cd:	01 d8                	add    eax,ebx
c001d7cf:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d7d6:	75 0a                	jne    c001d7e2 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d7d8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d7e2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d7e8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d7ec:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d7ef:	01 ca                	add    edx,ecx
c001d7f1:	83 ec 08             	sub    esp,0x8
c001d7f4:	89 d0                	mov    eax,edx
c001d7f6:	c1 e0 05             	shl    eax,0x5
c001d7f9:	01 d0                	add    eax,edx
c001d7fb:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d7ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d803:	01 d8                	add    eax,ebx
c001d805:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d80b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d811:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d817:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d81d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d823:	89 cd                	mov    ebp,ecx
c001d825:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d829:	f7 dd                	neg    ebp
c001d82b:	c1 e5 15             	shl    ebp,0x15
c001d82e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d834:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d83a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d844:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d84a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d854:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d85e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d862:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d869:	53                   	push   ebx
c001d86a:	68 24 0e 03 c0       	push   0xc0030e24
c001d86f:	e8 9c af 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d874:	89 d8                	mov    eax,ebx
c001d876:	83 c4 10             	add    esp,0x10
c001d879:	83 c4 1c             	add    esp,0x1c
c001d87c:	5b                   	pop    ebx
c001d87d:	5e                   	pop    esi
c001d87e:	5f                   	pop    edi
c001d87f:	5d                   	pop    ebp
c001d880:	c3                   	ret    
c001d881:	90                   	nop

c001d882 <Process::createUserThread()>:
c001d882:	83 ec 0c             	sub    esp,0xc
c001d885:	68 80 00 00 00       	push   0x80
c001d88a:	6a 00                	push   0x0
c001d88c:	68 46 d2 01 c0       	push   0xc001d246
c001d891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d895:	e8 e2 fe ff ff       	call   c001d77c <Process::createThread(void (*)(void*), void*, int)>
c001d89a:	83 c4 1c             	add    esp,0x1c
c001d89d:	c3                   	ret    

c001d89e <setupMultitasking(void (*)())>:
c001d89e:	56                   	push   esi
c001d89f:	53                   	push   ebx
c001d8a0:	51                   	push   ecx
c001d8a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8a5:	eb 10                	jmp    c001d8b7 <setupMultitasking(void (*)())+0x19>
c001d8a7:	83 ec 0c             	sub    esp,0xc
c001d8aa:	68 24 0e 03 c0       	push   0xc0030e24
c001d8af:	e8 ae ae 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8b4:	83 c4 10             	add    esp,0x10
c001d8b7:	83 ec 0c             	sub    esp,0xc
c001d8ba:	68 24 0e 03 c0       	push   0xc0030e24
c001d8bf:	e8 7a ae 00 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8c4:	83 c4 10             	add    esp,0x10
c001d8c7:	84 c0                	test   al,al
c001d8c9:	74 dc                	je     c001d8a7 <setupMultitasking(void (*)())+0x9>
c001d8cb:	83 ec 0c             	sub    esp,0xc
c001d8ce:	68 3f 07 00 00       	push   0x73f
c001d8d3:	e8 c1 1c ff ff       	call   c000f599 <malloc>
c001d8d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8df:	89 c3                	mov    ebx,eax
c001d8e1:	6a 00                	push   0x0
c001d8e3:	68 ec ba 02 c0       	push   0xc002baec
c001d8e8:	6a 01                	push   0x1
c001d8ea:	50                   	push   eax
c001d8eb:	e8 94 fc ff ff       	call   c001d584 <Process::Process(bool, char const*, Process*, char**)>
c001d8f0:	83 c4 14             	add    esp,0x14
c001d8f3:	89 1d 30 0e 03 c0    	mov    DWORD PTR ds:0xc0030e30,ebx
c001d8f9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d8ff:	e8 31 2a ff ff       	call   c0010335 <setActiveTerminal(VgaText*)>
c001d904:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d90c:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d916:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d91c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d91f:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d929:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d92f:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d935:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d93f:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d949:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d953:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d959:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d963:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d969:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d973:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d979:	58                   	pop    eax
c001d97a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d980:	5a                   	pop    edx
c001d981:	68 e8 ba 02 c0       	push   0xc002bae8
c001d986:	50                   	push   eax
c001d987:	e8 80 2e fe ff       	call   c000080c <strcpy>
c001d98c:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d993:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d997:	83 c4 14             	add    esp,0x14
c001d99a:	5b                   	pop    ebx
c001d99b:	5e                   	pop    esi
c001d99c:	e9 b3 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9a1 <schedule()>:
c001d9a1:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001d9a6:	85 c0                	test   eax,eax
c001d9a8:	74 0b                	je     c001d9b5 <schedule()+0x14>
c001d9aa:	c7 05 00 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x1
c001d9b4:	c3                   	ret    
c001d9b5:	53                   	push   ebx
c001d9b6:	83 ec 14             	sub    esp,0x14
c001d9b9:	68 24 0e 03 c0       	push   0xc0030e24
c001d9be:	e8 7b ad 00 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9c3:	83 c4 10             	add    esp,0x10
c001d9c6:	84 c0                	test   al,al
c001d9c8:	75 38                	jne    c001da02 <schedule()+0x61>
c001d9ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9d2:	4a                   	dec    edx
c001d9d3:	74 32                	je     c001da07 <schedule()+0x66>
c001d9d5:	83 ec 0c             	sub    esp,0xc
c001d9d8:	68 24 0e 03 c0       	push   0xc0030e24
c001d9dd:	e8 78 ad 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d9e2:	c7 04 24 24 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e24
c001d9e9:	89 c3                	mov    ebx,eax
c001d9eb:	e8 72 ad 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d9f0:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d9f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d9fa:	e8 9d f8 ff ff       	call   c001d29c <switchToThread(ThreadControlBlock*)>
c001d9ff:	83 c4 10             	add    esp,0x10
c001da02:	83 c4 08             	add    esp,0x8
c001da05:	5b                   	pop    ebx
c001da06:	c3                   	ret    
c001da07:	83 ec 08             	sub    esp,0x8
c001da0a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da11:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da17:	68 24 0e 03 c0       	push   0xc0030e24
c001da1c:	e8 ef ad 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da21:	83 c4 10             	add    esp,0x10
c001da24:	eb af                	jmp    c001d9d5 <schedule()+0x34>

c001da26 <Semaphore::tryAcquire()>:
c001da26:	53                   	push   ebx
c001da27:	83 ec 08             	sub    esp,0x8
c001da2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da2e:	fa                   	cli    
c001da2f:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001da34:	8d 50 01             	lea    edx,[eax+0x1]
c001da37:	89 15 08 0e 03 c0    	mov    DWORD PTR ds:0xc0030e08,edx
c001da3d:	8b 15 04 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e04
c001da43:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da46:	89 1d 04 0e 03 c0    	mov    DWORD PTR ds:0xc0030e04,ebx
c001da4c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da4f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da51:	7c 2a                	jl     c001da7d <Semaphore::tryAcquire()+0x57>
c001da53:	89 15 04 0e 03 c0    	mov    DWORD PTR ds:0xc0030e04,edx
c001da59:	85 d2                	test   edx,edx
c001da5b:	75 0a                	jne    c001da67 <Semaphore::tryAcquire()+0x41>
c001da5d:	8b 15 00 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e00
c001da63:	85 d2                	test   edx,edx
c001da65:	75 5b                	jne    c001dac2 <Semaphore::tryAcquire()+0x9c>
c001da67:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001da6c:	85 c0                	test   eax,eax
c001da6e:	74 07                	je     c001da77 <Semaphore::tryAcquire()+0x51>
c001da70:	31 c0                	xor    eax,eax
c001da72:	83 c4 08             	add    esp,0x8
c001da75:	5b                   	pop    ebx
c001da76:	c3                   	ret    
c001da77:	fb                   	sti    
c001da78:	83 c4 08             	add    esp,0x8
c001da7b:	5b                   	pop    ebx
c001da7c:	c3                   	ret    
c001da7d:	43                   	inc    ebx
c001da7e:	89 15 04 0e 03 c0    	mov    DWORD PTR ds:0xc0030e04,edx
c001da84:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001da87:	85 d2                	test   edx,edx
c001da89:	75 1f                	jne    c001daaa <Semaphore::tryAcquire()+0x84>
c001da8b:	8b 0d 00 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e00
c001da91:	85 c9                	test   ecx,ecx
c001da93:	74 15                	je     c001daaa <Semaphore::tryAcquire()+0x84>
c001da95:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c001da9f:	e8 fd fe ff ff       	call   c001d9a1 <schedule()>
c001daa4:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001daa9:	48                   	dec    eax
c001daaa:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001daaf:	85 c0                	test   eax,eax
c001dab1:	75 08                	jne    c001dabb <Semaphore::tryAcquire()+0x95>
c001dab3:	fb                   	sti    
c001dab4:	b0 01                	mov    al,0x1
c001dab6:	83 c4 08             	add    esp,0x8
c001dab9:	5b                   	pop    ebx
c001daba:	c3                   	ret    
c001dabb:	b0 01                	mov    al,0x1
c001dabd:	83 c4 08             	add    esp,0x8
c001dac0:	5b                   	pop    ebx
c001dac1:	c3                   	ret    
c001dac2:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c001dacc:	e8 d0 fe ff ff       	call   c001d9a1 <schedule()>
c001dad1:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001dad6:	48                   	dec    eax
c001dad7:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001dadc:	85 c0                	test   eax,eax
c001dade:	75 90                	jne    c001da70 <Semaphore::tryAcquire()+0x4a>
c001dae0:	eb 95                	jmp    c001da77 <Semaphore::tryAcquire()+0x51>

c001dae2 <Semaphore::assertLocked(char const*)>:
c001dae2:	83 ec 0c             	sub    esp,0xc
c001dae5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dae9:	fa                   	cli    
c001daea:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001daf0:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001daf5:	8d 48 01             	lea    ecx,[eax+0x1]
c001daf8:	89 0d 04 0e 03 c0    	mov    DWORD PTR ds:0xc0030e04,ecx
c001dafe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db00:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db03:	7c 24                	jl     c001db29 <Semaphore::assertLocked(char const*)+0x47>
c001db05:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c001db0a:	85 c0                	test   eax,eax
c001db0c:	75 09                	jne    c001db17 <Semaphore::assertLocked(char const*)+0x35>
c001db0e:	a1 00 0e 03 c0       	mov    eax,ds:0xc0030e00
c001db13:	85 c0                	test   eax,eax
c001db15:	75 29                	jne    c001db40 <Semaphore::assertLocked(char const*)+0x5e>
c001db17:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001db1c:	48                   	dec    eax
c001db1d:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001db22:	75 01                	jne    c001db25 <Semaphore::assertLocked(char const*)+0x43>
c001db24:	fb                   	sti    
c001db25:	83 c4 0c             	add    esp,0xc
c001db28:	c3                   	ret    
c001db29:	83 ec 0c             	sub    esp,0xc
c001db2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db30:	e8 e2 c2 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001db35:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	48                   	dec    eax
c001db3e:	eb c5                	jmp    c001db05 <Semaphore::assertLocked(char const*)+0x23>
c001db40:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c001db4a:	e8 52 fe ff ff       	call   c001d9a1 <schedule()>
c001db4f:	eb c6                	jmp    c001db17 <Semaphore::assertLocked(char const*)+0x35>

c001db51 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db51:	83 ec 0c             	sub    esp,0xc
c001db54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db60:	e8 3c fe ff ff       	call   c001d9a1 <schedule()>
c001db65:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001db6a:	48                   	dec    eax
c001db6b:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001db70:	75 01                	jne    c001db73 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001db72:	fb                   	sti    
c001db73:	83 c4 0c             	add    esp,0xc
c001db76:	c3                   	ret    

c001db77 <blockTask(TaskState)>:
c001db77:	83 ec 0c             	sub    esp,0xc
c001db7a:	fa                   	cli    
c001db7b:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001db81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db8a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db8d:	e8 0f fe ff ff       	call   c001d9a1 <schedule()>
c001db92:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001db97:	48                   	dec    eax
c001db98:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001db9d:	75 01                	jne    c001dba0 <blockTask(TaskState)+0x29>
c001db9f:	fb                   	sti    
c001dba0:	83 c4 0c             	add    esp,0xc
c001dba3:	c3                   	ret    

c001dba4 <waitTask(int, int*, int)>:
c001dba4:	83 ec 18             	sub    esp,0x18
c001dba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbb0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dbb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbbc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dbbf:	6a 07                	push   0x7
c001dbc1:	e8 b1 ff ff ff       	call   c001db77 <blockTask(TaskState)>
c001dbc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbcb:	83 c4 10             	add    esp,0x10
c001dbce:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dbd1:	85 d2                	test   edx,edx
c001dbd3:	74 0a                	je     c001dbdf <waitTask(int, int*, int)+0x3b>
c001dbd5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dbd8:	89 02                	mov    DWORD PTR [edx],eax
c001dbda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbdf:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dbe2:	83 c4 0c             	add    esp,0xc
c001dbe5:	c3                   	ret    

c001dbe6 <nanoSleepUntil(unsigned long long)>:
c001dbe6:	83 ec 0c             	sub    esp,0xc
c001dbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbf1:	3b 05 50 df 02 c0    	cmp    eax,DWORD PTR ds:0xc002df50
c001dbf7:	89 d1                	mov    ecx,edx
c001dbf9:	1b 0d 54 df 02 c0    	sbb    ecx,DWORD PTR ds:0xc002df54
c001dbff:	73 04                	jae    c001dc05 <nanoSleepUntil(unsigned long long)+0x1f>
c001dc01:	83 c4 0c             	add    esp,0xc
c001dc04:	c3                   	ret    
c001dc05:	fa                   	cli    
c001dc06:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001dc0c:	83 ec 08             	sub    esp,0x8
c001dc0f:	ff 05 04 0e 03 c0    	inc    DWORD PTR ds:0xc0030e04
c001dc15:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc1b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc1e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc21:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc27:	68 18 0e 03 c0       	push   0xc0030e18
c001dc2c:	e8 df ab 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc31:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc38:	e8 3a ff ff ff       	call   c001db77 <blockTask(TaskState)>
c001dc3d:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001dc42:	83 c4 10             	add    esp,0x10
c001dc45:	48                   	dec    eax
c001dc46:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c001dc4b:	85 c0                	test   eax,eax
c001dc4d:	75 09                	jne    c001dc58 <nanoSleepUntil(unsigned long long)+0x72>
c001dc4f:	a1 00 0e 03 c0       	mov    eax,ds:0xc0030e00
c001dc54:	85 c0                	test   eax,eax
c001dc56:	75 12                	jne    c001dc6a <nanoSleepUntil(unsigned long long)+0x84>
c001dc58:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001dc5d:	48                   	dec    eax
c001dc5e:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001dc63:	75 9c                	jne    c001dc01 <nanoSleepUntil(unsigned long long)+0x1b>
c001dc65:	fb                   	sti    
c001dc66:	83 c4 0c             	add    esp,0xc
c001dc69:	c3                   	ret    
c001dc6a:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c001dc74:	e8 28 fd ff ff       	call   c001d9a1 <schedule()>
c001dc79:	eb dd                	jmp    c001dc58 <nanoSleepUntil(unsigned long long)+0x72>

c001dc7b <nanoSleep(unsigned long long)>:
c001dc7b:	a1 50 df 02 c0       	mov    eax,ds:0xc002df50
c001dc80:	8b 15 54 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df54
c001dc86:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dc8a:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dc8e:	e9 53 ff ff ff       	jmp    c001dbe6 <nanoSleepUntil(unsigned long long)>

c001dc93 <sleep(unsigned long long)>:
c001dc93:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dc9b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dca0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dca4:	01 ca                	add    edx,ecx
c001dca6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcaa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcae:	eb cb                	jmp    c001dc7b <nanoSleep(unsigned long long)>

c001dcb0 <Semaphore::acquire()>:
c001dcb0:	83 ec 0c             	sub    esp,0xc
c001dcb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcb7:	fa                   	cli    
c001dcb8:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001dcbd:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001dcc3:	8d 48 01             	lea    ecx,[eax+0x1]
c001dcc6:	89 0d 04 0e 03 c0    	mov    DWORD PTR ds:0xc0030e04,ecx
c001dccc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dccf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dcd1:	7d 28                	jge    c001dcfb <Semaphore::acquire()+0x4b>
c001dcd3:	41                   	inc    ecx
c001dcd4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dcd7:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c001dcdc:	85 c0                	test   eax,eax
c001dcde:	75 09                	jne    c001dce9 <Semaphore::acquire()+0x39>
c001dce0:	a1 00 0e 03 c0       	mov    eax,ds:0xc0030e00
c001dce5:	85 c0                	test   eax,eax
c001dce7:	75 4e                	jne    c001dd37 <Semaphore::acquire()+0x87>
c001dce9:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001dcee:	48                   	dec    eax
c001dcef:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001dcf4:	75 01                	jne    c001dcf7 <Semaphore::acquire()+0x47>
c001dcf6:	fb                   	sti    
c001dcf7:	83 c4 0c             	add    esp,0xc
c001dcfa:	c3                   	ret    
c001dcfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd00:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd07:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd0a:	85 c9                	test   ecx,ecx
c001dd0c:	74 3a                	je     c001dd48 <Semaphore::acquire()+0x98>
c001dd0e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd11:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd17:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd1f:	83 ec 0c             	sub    esp,0xc
c001dd22:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd25:	6a 05                	push   0x5
c001dd27:	e8 4b fe ff ff       	call   c001db77 <blockTask(TaskState)>
c001dd2c:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001dd31:	83 c4 10             	add    esp,0x10
c001dd34:	48                   	dec    eax
c001dd35:	eb a0                	jmp    c001dcd7 <Semaphore::acquire()+0x27>
c001dd37:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c001dd41:	e8 5b fc ff ff       	call   c001d9a1 <schedule()>
c001dd46:	eb a1                	jmp    c001dce9 <Semaphore::acquire()+0x39>
c001dd48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd50:	eb c8                	jmp    c001dd1a <Semaphore::acquire()+0x6a>

c001dd52 <taskReturned>:
c001dd52:	83 ec 18             	sub    esp,0x18
c001dd55:	68 68 bb 02 c0       	push   0xc002bb68
c001dd5a:	e8 b8 c0 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	83 ec 0c             	sub    esp,0xc
c001dd65:	6a 02                	push   0x2
c001dd67:	e8 0b fe ff ff       	call   c001db77 <blockTask(TaskState)>
c001dd6c:	fa                   	cli    
c001dd6d:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001dd73:	e8 29 fc ff ff       	call   c001d9a1 <schedule()>
c001dd78:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001dd7d:	83 c4 10             	add    esp,0x10
c001dd80:	48                   	dec    eax
c001dd81:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001dd86:	85 c0                	test   eax,eax
c001dd88:	75 d8                	jne    c001dd62 <taskReturned+0x10>
c001dd8a:	fb                   	sti    
c001dd8b:	eb d5                	jmp    c001dd62 <taskReturned+0x10>

c001dd8d <Thr::processFromPID(int)>:
c001dd8d:	57                   	push   edi
c001dd8e:	56                   	push   esi
c001dd8f:	53                   	push   ebx
c001dd90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd94:	fa                   	cli    
c001dd95:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001dd9b:	83 ec 0c             	sub    esp,0xc
c001dd9e:	68 24 0e 03 c0       	push   0xc0030e24
c001dda3:	e8 b2 a9 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dda8:	83 c4 10             	add    esp,0x10
c001ddab:	89 c7                	mov    edi,eax
c001ddad:	eb 14                	jmp    c001ddc3 <Thr::processFromPID(int)+0x36>
c001ddaf:	83 ec 0c             	sub    esp,0xc
c001ddb2:	68 24 0e 03 c0       	push   0xc0030e24
c001ddb7:	e8 9e a9 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddbc:	83 c4 10             	add    esp,0x10
c001ddbf:	39 f8                	cmp    eax,edi
c001ddc1:	74 49                	je     c001de0c <Thr::processFromPID(int)+0x7f>
c001ddc3:	83 ec 0c             	sub    esp,0xc
c001ddc6:	68 24 0e 03 c0       	push   0xc0030e24
c001ddcb:	e8 8a a9 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddd0:	c7 04 24 24 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e24
c001ddd7:	89 c3                	mov    ebx,eax
c001ddd9:	e8 84 a9 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ddde:	58                   	pop    eax
c001dddf:	5a                   	pop    edx
c001dde0:	53                   	push   ebx
c001dde1:	68 24 0e 03 c0       	push   0xc0030e24
c001dde6:	e8 25 aa 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddeb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ddee:	83 c4 10             	add    esp,0x10
c001ddf1:	39 30                	cmp    DWORD PTR [eax],esi
c001ddf3:	75 ba                	jne    c001ddaf <Thr::processFromPID(int)+0x22>
c001ddf5:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001ddfa:	48                   	dec    eax
c001ddfb:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001de00:	74 07                	je     c001de09 <Thr::processFromPID(int)+0x7c>
c001de02:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de05:	5b                   	pop    ebx
c001de06:	5e                   	pop    esi
c001de07:	5f                   	pop    edi
c001de08:	c3                   	ret    
c001de09:	fb                   	sti    
c001de0a:	eb f6                	jmp    c001de02 <Thr::processFromPID(int)+0x75>
c001de0c:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001de11:	48                   	dec    eax
c001de12:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001de17:	75 05                	jne    c001de1e <Thr::processFromPID(int)+0x91>
c001de19:	fb                   	sti    
c001de1a:	5b                   	pop    ebx
c001de1b:	5e                   	pop    esi
c001de1c:	5f                   	pop    edi
c001de1d:	c3                   	ret    
c001de1e:	5b                   	pop    ebx
c001de1f:	31 c0                	xor    eax,eax
c001de21:	5e                   	pop    esi
c001de22:	5f                   	pop    edi
c001de23:	c3                   	ret    

c001de24 <unblockTask(ThreadControlBlock*)>:
c001de24:	53                   	push   ebx
c001de25:	83 ec 08             	sub    esp,0x8
c001de28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de2c:	fa                   	cli    
c001de2d:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001de33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de36:	85 c0                	test   eax,eax
c001de38:	74 5a                	je     c001de94 <unblockTask(ThreadControlBlock*)+0x70>
c001de3a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de3d:	48                   	dec    eax
c001de3e:	74 31                	je     c001de71 <unblockTask(ThreadControlBlock*)+0x4d>
c001de40:	83 ec 0c             	sub    esp,0xc
c001de43:	68 24 0e 03 c0       	push   0xc0030e24
c001de48:	e8 0d a9 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de4d:	83 c4 10             	add    esp,0x10
c001de50:	85 c0                	test   eax,eax
c001de52:	75 17                	jne    c001de6b <unblockTask(ThreadControlBlock*)+0x47>
c001de54:	eb 50                	jmp    c001dea6 <unblockTask(ThreadControlBlock*)+0x82>
c001de56:	83 ec 08             	sub    esp,0x8
c001de59:	50                   	push   eax
c001de5a:	68 24 0e 03 c0       	push   0xc0030e24
c001de5f:	e8 7e ac 00 00       	call   c0028ae2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de64:	83 c4 10             	add    esp,0x10
c001de67:	85 c0                	test   eax,eax
c001de69:	74 3b                	je     c001dea6 <unblockTask(ThreadControlBlock*)+0x82>
c001de6b:	39 c3                	cmp    ebx,eax
c001de6d:	75 e7                	jne    c001de56 <unblockTask(ThreadControlBlock*)+0x32>
c001de6f:	eb 10                	jmp    c001de81 <unblockTask(ThreadControlBlock*)+0x5d>
c001de71:	83 ec 0c             	sub    esp,0xc
c001de74:	68 0a bb 02 c0       	push   0xc002bb0a
c001de79:	e8 2d 48 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001de7e:	83 c4 10             	add    esp,0x10
c001de81:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001de86:	48                   	dec    eax
c001de87:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001de8c:	75 01                	jne    c001de8f <unblockTask(ThreadControlBlock*)+0x6b>
c001de8e:	fb                   	sti    
c001de8f:	83 c4 08             	add    esp,0x8
c001de92:	5b                   	pop    ebx
c001de93:	c3                   	ret    
c001de94:	83 ec 0c             	sub    esp,0xc
c001de97:	68 f3 ba 02 c0       	push   0xc002baf3
c001de9c:	e8 0a 48 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001dea1:	83 c4 10             	add    esp,0x10
c001dea4:	eb db                	jmp    c001de81 <unblockTask(ThreadControlBlock*)+0x5d>
c001dea6:	83 ec 08             	sub    esp,0x8
c001dea9:	53                   	push   ebx
c001deaa:	68 24 0e 03 c0       	push   0xc0030e24
c001deaf:	e8 5c a9 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001deb4:	83 c4 10             	add    esp,0x10
c001deb7:	eb c8                	jmp    c001de81 <unblockTask(ThreadControlBlock*)+0x5d>

c001deb9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001deb9:	55                   	push   ebp
c001deba:	57                   	push   edi
c001debb:	56                   	push   esi
c001debc:	53                   	push   ebx
c001debd:	83 ec 1c             	sub    esp,0x1c
c001dec0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dec4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dec7:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001decd:	85 ff                	test   edi,edi
c001decf:	7e 20                	jle    c001def1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ded1:	31 f6                	xor    esi,esi
c001ded3:	83 ec 0c             	sub    esp,0xc
c001ded6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dedd:	46                   	inc    esi
c001dede:	e8 c6 16 ff ff       	call   c000f5a9 <free>
c001dee3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dee6:	83 c4 10             	add    esp,0x10
c001dee9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001deef:	7f e2                	jg     c001ded3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001def1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001defb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df00:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df03:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df06:	d3 c0                	rol    eax,cl
c001df08:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df0f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df12:	89 f7                	mov    edi,esi
c001df14:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df1c:	0f 85 64 01 00 00    	jne    c001e086 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df22:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df28:	85 ed                	test   ebp,ebp
c001df2a:	74 1b                	je     c001df47 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df2c:	83 ec 0c             	sub    esp,0xc
c001df2f:	55                   	push   ebp
c001df30:	e8 87 bc ff ff       	call   c0019bbc <EnvVarContainer::~EnvVarContainer()>
c001df35:	59                   	pop    ecx
c001df36:	5e                   	pop    esi
c001df37:	6a 0c                	push   0xc
c001df39:	55                   	push   ebp
c001df3a:	e8 94 46 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c001df3f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df42:	83 c4 10             	add    esp,0x10
c001df45:	89 f7                	mov    edi,esi
c001df47:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df4d:	85 c0                	test   eax,eax
c001df4f:	0f 84 aa 00 00 00    	je     c001dfff <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df55:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df5c:	31 c9                	xor    ecx,ecx
c001df5e:	eb 10                	jmp    c001df70 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df60:	41                   	inc    ecx
c001df61:	83 f9 10             	cmp    ecx,0x10
c001df64:	0f 84 95 00 00 00    	je     c001dfff <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df6a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df70:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001df77:	d3 fa                	sar    edx,cl
c001df79:	83 e2 01             	and    edx,0x1
c001df7c:	74 e2                	je     c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df7e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df81:	01 ca                	add    edx,ecx
c001df83:	89 d5                	mov    ebp,edx
c001df85:	c1 e5 05             	shl    ebp,0x5
c001df88:	01 ea                	add    edx,ebp
c001df8a:	01 d0                	add    eax,edx
c001df8c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001df92:	83 fd 07             	cmp    ebp,0x7
c001df95:	75 c9                	jne    c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df97:	05 40 02 00 00       	add    eax,0x240
c001df9c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001df9f:	83 fd ff             	cmp    ebp,0xffffffff
c001dfa2:	0f 8c e6 00 00 00    	jl     c001e08e <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dfa8:	0f 84 97 01 00 00    	je     c001e145 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dfae:	85 ed                	test   ebp,ebp
c001dfb0:	0f 84 7e 01 00 00    	je     c001e134 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dfb6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dfb8:	75 a6                	jne    c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfba:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfc0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfc4:	01 d0                	add    eax,edx
c001dfc6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dfca:	83 ec 0c             	sub    esp,0xc
c001dfcd:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dfd3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfd6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfdc:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dfe3:	50                   	push   eax
c001dfe4:	e8 3b fe ff ff       	call   c001de24 <unblockTask(ThreadControlBlock*)>
c001dfe9:	83 c4 10             	add    esp,0x10
c001dfec:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dff3:	89 f7                	mov    edi,esi
c001dff5:	41                   	inc    ecx
c001dff6:	83 f9 10             	cmp    ecx,0x10
c001dff9:	0f 85 6b ff ff ff    	jne    c001df6a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001dfff:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e005:	85 c0                	test   eax,eax
c001e007:	74 5d                	je     c001e066 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e009:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e00f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e015:	74 4f                	je     c001e066 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e017:	83 ec 0c             	sub    esp,0xc
c001e01a:	68 24 0e 03 c0       	push   0xc0030e24
c001e01f:	e8 36 a7 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e024:	c7 04 24 24 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e24
c001e02b:	89 c7                	mov    edi,eax
c001e02d:	e8 0c a7 00 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e032:	83 c4 10             	add    esp,0x10
c001e035:	84 c0                	test   al,al
c001e037:	0f 84 c2 00 00 00    	je     c001e0ff <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e03d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e040:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e046:	85 d2                	test   edx,edx
c001e048:	74 0f                	je     c001e059 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e04a:	83 ec 0c             	sub    esp,0xc
c001e04d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e04f:	52                   	push   edx
c001e050:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e053:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e056:	83 c4 10             	add    esp,0x10
c001e059:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e063:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e066:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e06c:	85 db                	test   ebx,ebx
c001e06e:	74 16                	je     c001e086 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e070:	83 ec 0c             	sub    esp,0xc
c001e073:	53                   	push   ebx
c001e074:	e8 c7 37 ff ff       	call   c0011840 <VAS::~VAS()>
c001e079:	58                   	pop    eax
c001e07a:	5a                   	pop    edx
c001e07b:	6a 14                	push   0x14
c001e07d:	53                   	push   ebx
c001e07e:	e8 50 45 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c001e083:	83 c4 10             	add    esp,0x10
c001e086:	83 c4 1c             	add    esp,0x1c
c001e089:	5b                   	pop    ebx
c001e08a:	5e                   	pop    esi
c001e08b:	5f                   	pop    edi
c001e08c:	5d                   	pop    ebp
c001e08d:	c3                   	ret    
c001e08e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	68 9c bb 02 c0       	push   0xc002bb9c
c001e09a:	e8 78 bd ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001e09f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0a2:	83 c4 10             	add    esp,0x10
c001e0a5:	89 f7                	mov    edi,esi
c001e0a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0ab:	e9 b0 fe ff ff       	jmp    c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0b0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0b6:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e0bc:	75 1c                	jne    c001e0da <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0be:	83 ec 0c             	sub    esp,0xc
c001e0c1:	68 04 bc 02 c0       	push   0xc002bc04
c001e0c6:	e8 e0 45 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001e0cb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e0d2:	e8 a0 fa ff ff       	call   c001db77 <blockTask(TaskState)>
c001e0d7:	83 c4 10             	add    esp,0x10
c001e0da:	83 ec 08             	sub    esp,0x8
c001e0dd:	56                   	push   esi
c001e0de:	68 24 0e 03 c0       	push   0xc0030e24
c001e0e3:	e8 28 a7 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0e8:	c7 04 24 24 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e24
c001e0ef:	e8 66 a6 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0f4:	83 c4 10             	add    esp,0x10
c001e0f7:	39 f8                	cmp    eax,edi
c001e0f9:	0f 84 3e ff ff ff    	je     c001e03d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e0ff:	83 ec 0c             	sub    esp,0xc
c001e102:	68 24 0e 03 c0       	push   0xc0030e24
c001e107:	e8 4e a6 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e10c:	c7 04 24 24 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e24
c001e113:	89 c6                	mov    esi,eax
c001e115:	e8 48 a6 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e11a:	83 c4 10             	add    esp,0x10
c001e11d:	39 f3                	cmp    ebx,esi
c001e11f:	74 b9                	je     c001e0da <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e121:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e124:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e127:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e12d:	75 ab                	jne    c001e0da <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e12f:	e9 7c ff ff ff       	jmp    c001e0b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e134:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e138:	83 ec 0c             	sub    esp,0xc
c001e13b:	68 d0 bb 02 c0       	push   0xc002bbd0
c001e140:	e9 55 ff ff ff       	jmp    c001e09a <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e145:	8b 36                	mov    esi,DWORD PTR [esi]
c001e147:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e14b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e14e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e151:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e157:	01 d7                	add    edi,edx
c001e159:	89 f8                	mov    eax,edi
c001e15b:	e9 66 fe ff ff       	jmp    c001dfc6 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e160 <cleanerTaskFunction(void*)>:
c001e160:	53                   	push   ebx
c001e161:	83 ec 08             	sub    esp,0x8
c001e164:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e169:	48                   	dec    eax
c001e16a:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e16f:	75 01                	jne    c001e172 <cleanerTaskFunction(void*)+0x12>
c001e171:	fb                   	sti    
c001e172:	fa                   	cli    
c001e173:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e178:	80 3d ec 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030dec,0x0
c001e17f:	8d 50 01             	lea    edx,[eax+0x1]
c001e182:	89 15 08 0e 03 c0    	mov    DWORD PTR ds:0xc0030e08,edx
c001e188:	0f 84 a1 00 00 00    	je     c001e22f <cleanerTaskFunction(void*)+0xcf>
c001e18e:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e193:	85 c0                	test   eax,eax
c001e195:	75 01                	jne    c001e198 <cleanerTaskFunction(void*)+0x38>
c001e197:	fb                   	sti    
c001e198:	c6 05 ec 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030dec,0x0
c001e19f:	fa                   	cli    
c001e1a0:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e1a6:	ff 05 04 0e 03 c0    	inc    DWORD PTR ds:0xc0030e04
c001e1ac:	fa                   	cli    
c001e1ad:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e1b3:	eb 26                	jmp    c001e1db <cleanerTaskFunction(void*)+0x7b>
c001e1b5:	83 ec 0c             	sub    esp,0xc
c001e1b8:	68 0c 0e 03 c0       	push   0xc0030e0c
c001e1bd:	e8 98 a5 00 00       	call   c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1c2:	c7 04 24 0c 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e0c
c001e1c9:	89 c3                	mov    ebx,eax
c001e1cb:	e8 92 a5 00 00       	call   c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1d3:	e8 e1 fc ff ff       	call   c001deb9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e1d8:	83 c4 10             	add    esp,0x10
c001e1db:	83 ec 0c             	sub    esp,0xc
c001e1de:	68 0c 0e 03 c0       	push   0xc0030e0c
c001e1e3:	e8 56 a5 00 00       	call   c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1e8:	83 c4 10             	add    esp,0x10
c001e1eb:	84 c0                	test   al,al
c001e1ed:	74 c6                	je     c001e1b5 <cleanerTaskFunction(void*)+0x55>
c001e1ef:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e1f4:	48                   	dec    eax
c001e1f5:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e1fa:	75 01                	jne    c001e1fd <cleanerTaskFunction(void*)+0x9d>
c001e1fc:	fb                   	sti    
c001e1fd:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001e202:	48                   	dec    eax
c001e203:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c001e208:	0f 85 56 ff ff ff    	jne    c001e164 <cleanerTaskFunction(void*)+0x4>
c001e20e:	a1 00 0e 03 c0       	mov    eax,ds:0xc0030e00
c001e213:	85 c0                	test   eax,eax
c001e215:	0f 84 49 ff ff ff    	je     c001e164 <cleanerTaskFunction(void*)+0x4>
c001e21b:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c001e225:	e8 77 f7 ff ff       	call   c001d9a1 <schedule()>
c001e22a:	e9 35 ff ff ff       	jmp    c001e164 <cleanerTaskFunction(void*)+0x4>
c001e22f:	83 ec 0c             	sub    esp,0xc
c001e232:	6a 02                	push   0x2
c001e234:	e8 18 f9 ff ff       	call   c001db51 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e239:	83 c4 10             	add    esp,0x10
c001e23c:	e9 57 ff ff ff       	jmp    c001e198 <cleanerTaskFunction(void*)+0x38>

c001e241 <terminateTask(int)>:
c001e241:	83 ec 14             	sub    esp,0x14
c001e244:	fa                   	cli    
c001e245:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e24b:	ff 05 04 0e 03 c0    	inc    DWORD PTR ds:0xc0030e04
c001e251:	fa                   	cli    
c001e252:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e258:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e25c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e261:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e269:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e26c:	50                   	push   eax
c001e26d:	68 0c 0e 03 c0       	push   0xc0030e0c
c001e272:	e8 99 a5 00 00       	call   c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e27c:	83 c4 10             	add    esp,0x10
c001e27f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e286:	a1 e8 0d 03 c0       	mov    eax,ds:0xc0030de8
c001e28b:	85 c0                	test   eax,eax
c001e28d:	74 53                	je     c001e2e2 <terminateTask(int)+0xa1>
c001e28f:	83 ec 0c             	sub    esp,0xc
c001e292:	c6 05 ec 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030dec,0x1
c001e299:	50                   	push   eax
c001e29a:	e8 85 fb ff ff       	call   c001de24 <unblockTask(ThreadControlBlock*)>
c001e29f:	83 c4 10             	add    esp,0x10
c001e2a2:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e2a7:	48                   	dec    eax
c001e2a8:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e2ad:	75 01                	jne    c001e2b0 <terminateTask(int)+0x6f>
c001e2af:	fb                   	sti    
c001e2b0:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001e2b5:	48                   	dec    eax
c001e2b6:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c001e2bb:	75 09                	jne    c001e2c6 <terminateTask(int)+0x85>
c001e2bd:	83 3d 00 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e00,0x0
c001e2c4:	75 2e                	jne    c001e2f4 <terminateTask(int)+0xb3>
c001e2c6:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e2cb:	48                   	dec    eax
c001e2cc:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e2d1:	75 01                	jne    c001e2d4 <terminateTask(int)+0x93>
c001e2d3:	fb                   	sti    
c001e2d4:	fa                   	cli    
c001e2d5:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e2db:	e8 c1 f6 ff ff       	call   c001d9a1 <schedule()>
c001e2e0:	eb e4                	jmp    c001e2c6 <terminateTask(int)+0x85>
c001e2e2:	83 ec 0c             	sub    esp,0xc
c001e2e5:	68 21 bb 02 c0       	push   0xc002bb21
c001e2ea:	e8 bc 43 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001e2ef:	83 c4 10             	add    esp,0x10
c001e2f2:	eb ae                	jmp    c001e2a2 <terminateTask(int)+0x61>
c001e2f4:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c001e2fe:	eb db                	jmp    c001e2db <terminateTask(int)+0x9a>

c001e300 <Thr::terminateFromIRQ(int)>:
c001e300:	83 ec 18             	sub    esp,0x18
c001e303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e307:	e8 35 ff ff ff       	call   c001e241 <terminateTask(int)>

c001e30c <Semaphore::release()>:
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e313:	fa                   	cli    
c001e314:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001e319:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e31f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e322:	89 0d 04 0e 03 c0    	mov    DWORD PTR ds:0xc0030e04,ecx
c001e328:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e32b:	85 c9                	test   ecx,ecx
c001e32d:	74 3c                	je     c001e36b <Semaphore::release()+0x5f>
c001e32f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e332:	83 ec 0c             	sub    esp,0xc
c001e335:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e338:	51                   	push   ecx
c001e339:	e8 e6 fa ff ff       	call   c001de24 <unblockTask(ThreadControlBlock*)>
c001e33e:	a1 04 0e 03 c0       	mov    eax,ds:0xc0030e04
c001e343:	83 c4 10             	add    esp,0x10
c001e346:	48                   	dec    eax
c001e347:	a3 04 0e 03 c0       	mov    ds:0xc0030e04,eax
c001e34c:	85 c0                	test   eax,eax
c001e34e:	75 09                	jne    c001e359 <Semaphore::release()+0x4d>
c001e350:	a1 00 0e 03 c0       	mov    eax,ds:0xc0030e00
c001e355:	85 c0                	test   eax,eax
c001e357:	75 17                	jne    c001e370 <Semaphore::release()+0x64>
c001e359:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e35e:	48                   	dec    eax
c001e35f:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e364:	75 01                	jne    c001e367 <Semaphore::release()+0x5b>
c001e366:	fb                   	sti    
c001e367:	83 c4 0c             	add    esp,0xc
c001e36a:	c3                   	ret    
c001e36b:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e36e:	eb d7                	jmp    c001e347 <Semaphore::release()+0x3b>
c001e370:	c7 05 00 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e00,0x0
c001e37a:	e8 22 f6 ff ff       	call   c001d9a1 <schedule()>
c001e37f:	eb d8                	jmp    c001e359 <Semaphore::release()+0x4d>

c001e381 <__static_initialization_and_destruction_0(int, int)>:
c001e381:	83 ec 0c             	sub    esp,0xc
c001e384:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e389:	0f 85 88 00 00 00    	jne    c001e417 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e38f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e397:	75 7e                	jne    c001e417 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e399:	83 ec 0c             	sub    esp,0xc
c001e39c:	68 24 0e 03 c0       	push   0xc0030e24
c001e3a1:	e8 fa a6 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3a6:	83 c4 10             	add    esp,0x10
c001e3a9:	83 ec 04             	sub    esp,0x4
c001e3ac:	68 b8 c6 02 c0       	push   0xc002c6b8
c001e3b1:	68 24 0e 03 c0       	push   0xc0030e24
c001e3b6:	68 54 8a 02 c0       	push   0xc0028a54
c001e3bb:	e8 8d 41 ff ff       	call   c001254d <__cxa_atexit>
c001e3c0:	83 c4 10             	add    esp,0x10
c001e3c3:	83 ec 0c             	sub    esp,0xc
c001e3c6:	68 18 0e 03 c0       	push   0xc0030e18
c001e3cb:	e8 d0 a6 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3d0:	83 c4 10             	add    esp,0x10
c001e3d3:	83 ec 04             	sub    esp,0x4
c001e3d6:	68 b8 c6 02 c0       	push   0xc002c6b8
c001e3db:	68 18 0e 03 c0       	push   0xc0030e18
c001e3e0:	68 54 8a 02 c0       	push   0xc0028a54
c001e3e5:	e8 63 41 ff ff       	call   c001254d <__cxa_atexit>
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	83 ec 0c             	sub    esp,0xc
c001e3f0:	68 0c 0e 03 c0       	push   0xc0030e0c
c001e3f5:	e8 a6 a6 00 00       	call   c0028aa0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3fa:	83 c4 10             	add    esp,0x10
c001e3fd:	83 ec 04             	sub    esp,0x4
c001e400:	68 b8 c6 02 c0       	push   0xc002c6b8
c001e405:	68 0c 0e 03 c0       	push   0xc0030e0c
c001e40a:	68 54 8a 02 c0       	push   0xc0028a54
c001e40f:	e8 39 41 ff ff       	call   c001254d <__cxa_atexit>
c001e414:	83 c4 10             	add    esp,0x10
c001e417:	90                   	nop
c001e418:	83 c4 0c             	add    esp,0xc
c001e41b:	c3                   	ret    

c001e41c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e41c:	83 ec 0c             	sub    esp,0xc
c001e41f:	83 ec 08             	sub    esp,0x8
c001e422:	68 ff ff 00 00       	push   0xffff
c001e427:	6a 01                	push   0x1
c001e429:	e8 53 ff ff ff       	call   c001e381 <__static_initialization_and_destruction_0(int, int)>
c001e42e:	83 c4 10             	add    esp,0x10
c001e431:	83 c4 0c             	add    esp,0xc
c001e434:	c3                   	ret    

c001e435 <Vm::inbv(unsigned short)>:
c001e435:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e439:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e43e:	75 06                	jne    c001e446 <Vm::inbv(unsigned short)+0x11>
c001e440:	a0 6c 0e 03 c0       	mov    al,ds:0xc0030e6c
c001e445:	c3                   	ret    
c001e446:	ec                   	in     al,dx
c001e447:	c3                   	ret    

c001e448 <Vm::outbv(unsigned short, unsigned char)>:
c001e448:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e450:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e455:	75 25                	jne    c001e47c <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e457:	8b 0d 6c 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e6c
c001e45d:	8d 51 01             	lea    edx,[ecx+0x1]
c001e460:	88 81 80 0e 03 c0    	mov    BYTE PTR [ecx-0x3ffcf180],al
c001e466:	89 15 6c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e6c,edx
c001e46c:	83 fa 20             	cmp    edx,0x20
c001e46f:	75 0c                	jne    c001e47d <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e471:	c7 05 6c 0e 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030e6c,0x1f
c001e47b:	c3                   	ret    
c001e47c:	ee                   	out    dx,al
c001e47d:	c3                   	ret    

c001e47e <Vm::realToLinear(unsigned short, unsigned short)>:
c001e47e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e483:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e488:	c1 e0 04             	shl    eax,0x4
c001e48b:	01 d0                	add    eax,edx
c001e48d:	c3                   	ret    

c001e48e <Vm::getSegment(unsigned int)>:
c001e48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e492:	c1 e8 10             	shr    eax,0x10
c001e495:	c3                   	ret    

c001e496 <Vm::getOffset(unsigned int)>:
c001e496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e49a:	c3                   	ret    

c001e49b <Vm::mainloop2()>:
c001e49b:	83 ec 18             	sub    esp,0x18
c001e49e:	fa                   	cli    
c001e49f:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e4a5:	6a 02                	push   0x2
c001e4a7:	c6 05 65 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e65,0x1
c001e4ae:	e8 9e f6 ff ff       	call   c001db51 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4b8:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4bc:	52                   	push   edx
c001e4bd:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e4c1:	52                   	push   edx
c001e4c2:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e4c6:	52                   	push   edx
c001e4c7:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e4cb:	50                   	push   eax
c001e4cc:	e8 29 1e fe ff       	call   c00002fa <goToVM86>
c001e4d1:	83 c4 2c             	add    esp,0x2c
c001e4d4:	c3                   	ret    

c001e4d5 <Vm::mainVm8086Loop(void*)>:
c001e4d5:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e4da:	48                   	dec    eax
c001e4db:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e4e0:	75 01                	jne    c001e4e3 <Vm::mainVm8086Loop(void*)+0xe>
c001e4e2:	fb                   	sti    
c001e4e3:	eb b6                	jmp    c001e49b <Vm::mainloop2()>

c001e4e5 <Vm::mainloop3(unsigned long)>:
c001e4e5:	83 ec 18             	sub    esp,0x18
c001e4e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4ec:	fa                   	cli    
c001e4ed:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e4f3:	6a 02                	push   0x2
c001e4f5:	c6 05 64 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e64,0x1
c001e4fc:	a3 60 0e 03 c0       	mov    ds:0xc0030e60,eax
c001e501:	e8 4b f6 ff ff       	call   c001db51 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e506:	83 c4 1c             	add    esp,0x1c
c001e509:	eb 90                	jmp    c001e49b <Vm::mainloop2()>

c001e50b <Vm::initialise8086()>:
c001e50b:	83 ec 0c             	sub    esp,0xc
c001e50e:	68 80 00 00 00       	push   0x80
c001e513:	6a 00                	push   0x0
c001e515:	68 d5 e4 01 c0       	push   0xc001e4d5
c001e51a:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c001e520:	e8 57 f2 ff ff       	call   c001d77c <Process::createThread(void (*)(void*), void*, int)>
c001e525:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e52c:	a3 68 0e 03 c0       	mov    ds:0xc0030e68,eax
c001e531:	68 00 01 00 00       	push   0x100
c001e536:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c001e53b:	6a 00                	push   0x0
c001e53d:	6a 00                	push   0x0
c001e53f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e545:	e8 68 37 ff ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e54a:	83 c4 2c             	add    esp,0x2c
c001e54d:	c3                   	ret    

c001e54e <Vm::finish8086()>:
c001e54e:	53                   	push   ebx
c001e54f:	83 ec 08             	sub    esp,0x8
c001e552:	fa                   	cli    
c001e553:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e559:	80 3d 64 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e64,0x0
c001e560:	75 15                	jne    c001e577 <Vm::finish8086()+0x29>
c001e562:	e8 3a f4 ff ff       	call   c001d9a1 <schedule()>
c001e567:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e56c:	48                   	dec    eax
c001e56d:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e572:	75 de                	jne    c001e552 <Vm::finish8086()+0x4>
c001e574:	fb                   	sti    
c001e575:	eb db                	jmp    c001e552 <Vm::finish8086()+0x4>
c001e577:	83 ec 0c             	sub    esp,0xc
c001e57a:	8b 1d 60 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e60
c001e580:	ff 35 68 0e 03 c0    	push   DWORD PTR ds:0xc0030e68
c001e586:	c6 05 64 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e64,0x0
c001e58d:	e8 92 f8 ff ff       	call   c001de24 <unblockTask(ThreadControlBlock*)>
c001e592:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e597:	83 c4 10             	add    esp,0x10
c001e59a:	8d 50 ff             	lea    edx,[eax-0x1]
c001e59d:	89 15 08 0e 03 c0    	mov    DWORD PTR ds:0xc0030e08,edx
c001e5a3:	85 d2                	test   edx,edx
c001e5a5:	75 01                	jne    c001e5a8 <Vm::finish8086()+0x5a>
c001e5a7:	fb                   	sti    
c001e5a8:	89 d8                	mov    eax,ebx
c001e5aa:	83 c4 08             	add    esp,0x8
c001e5ad:	5b                   	pop    ebx
c001e5ae:	c3                   	ret    

c001e5af <Vm::getOutput8086(unsigned char*)>:
c001e5af:	57                   	push   edi
c001e5b0:	8b 0d 6c 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e6c
c001e5b6:	56                   	push   esi
c001e5b7:	be 80 0e 03 c0       	mov    esi,0xc0030e80
c001e5bc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5c2:	a1 6c 0e 03 c0       	mov    eax,ds:0xc0030e6c
c001e5c7:	5e                   	pop    esi
c001e5c8:	c7 05 6c 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e6c,0x0
c001e5d2:	5f                   	pop    edi
c001e5d3:	c3                   	ret    

c001e5d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e5d4:	55                   	push   ebp
c001e5d5:	57                   	push   edi
c001e5d6:	56                   	push   esi
c001e5d7:	53                   	push   ebx
c001e5d8:	83 ec 2c             	sub    esp,0x2c
c001e5db:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e5df:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e5e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5e7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e5eb:	fa                   	cli    
c001e5ec:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c001e5f2:	0f b6 35 65 0e 03 c0 	movzx  esi,BYTE PTR ds:0xc0030e65
c001e5f9:	89 f0                	mov    eax,esi
c001e5fb:	84 c0                	test   al,al
c001e5fd:	75 1d                	jne    c001e61c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e5ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e603:	e8 99 f3 ff ff       	call   c001d9a1 <schedule()>
c001e608:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e60d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e611:	48                   	dec    eax
c001e612:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e617:	75 d2                	jne    c001e5eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e619:	fb                   	sti    
c001e61a:	eb cf                	jmp    c001e5eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e61c:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c001e621:	c7 05 6c 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e6c,0x0
c001e62b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e62f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e633:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e637:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e63b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e63f:	50                   	push   eax
c001e640:	6a 20                	push   0x20
c001e642:	6a 00                	push   0x0
c001e644:	68 80 0e 03 c0       	push   0xc0030e80
c001e649:	e8 02 21 fe ff       	call   c0000750 <memset>
c001e64e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e655:	e8 3f 0f ff ff       	call   c000f599 <malloc>
c001e65a:	83 c4 0c             	add    esp,0xc
c001e65d:	89 c3                	mov    ebx,eax
c001e65f:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c001e665:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e669:	50                   	push   eax
c001e66a:	e8 9b 45 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c001e66f:	83 c4 10             	add    esp,0x10
c001e672:	85 db                	test   ebx,ebx
c001e674:	75 0a                	jne    c001e680 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e676:	83 ec 0c             	sub    esp,0xc
c001e679:	68 2c bc 02 c0       	push   0xc002bc2c
c001e67e:	eb 3e                	jmp    c001e6be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e680:	50                   	push   eax
c001e681:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e685:	50                   	push   eax
c001e686:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e68a:	50                   	push   eax
c001e68b:	53                   	push   ebx
c001e68c:	e8 89 48 ff ff       	call   c0012f1a <File::stat(unsigned long long*, bool*)>
c001e691:	83 c4 10             	add    esp,0x10
c001e694:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e699:	74 0a                	je     c001e6a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e69b:	83 ec 0c             	sub    esp,0xc
c001e69e:	68 40 bc 02 c0       	push   0xc002bc40
c001e6a3:	eb 19                	jmp    c001e6be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6a5:	51                   	push   ecx
c001e6a6:	51                   	push   ecx
c001e6a7:	6a 01                	push   0x1
c001e6a9:	53                   	push   ebx
c001e6aa:	e8 bf 45 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c001e6af:	83 c4 10             	add    esp,0x10
c001e6b2:	85 c0                	test   eax,eax
c001e6b4:	74 24                	je     c001e6da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e6b6:	83 ec 0c             	sub    esp,0xc
c001e6b9:	68 59 bc 02 c0       	push   0xc002bc59
c001e6be:	e8 54 b7 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001e6c3:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e6c8:	83 c4 10             	add    esp,0x10
c001e6cb:	48                   	dec    eax
c001e6cc:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e6d1:	85 c0                	test   eax,eax
c001e6d3:	75 01                	jne    c001e6d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e6d5:	fb                   	sti    
c001e6d6:	31 f6                	xor    esi,esi
c001e6d8:	eb 58                	jmp    c001e732 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e6da:	0f b7 ed             	movzx  ebp,bp
c001e6dd:	50                   	push   eax
c001e6de:	0f b7 ff             	movzx  edi,di
c001e6e1:	50                   	push   eax
c001e6e2:	55                   	push   ebp
c001e6e3:	57                   	push   edi
c001e6e4:	e8 95 fd ff ff       	call   c001e47e <Vm::realToLinear(unsigned short, unsigned short)>
c001e6e9:	5a                   	pop    edx
c001e6ea:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e6ec:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e6f0:	51                   	push   ecx
c001e6f1:	50                   	push   eax
c001e6f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6fa:	53                   	push   ebx
c001e6fb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e6fe:	83 c4 14             	add    esp,0x14
c001e701:	53                   	push   ebx
c001e702:	e8 c5 45 ff ff       	call   c0012ccc <File::close()>
c001e707:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e70c:	83 c4 10             	add    esp,0x10
c001e70f:	48                   	dec    eax
c001e710:	c6 05 65 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e65,0x0
c001e717:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c001e71c:	85 c0                	test   eax,eax
c001e71e:	75 01                	jne    c001e721 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e720:	fb                   	sti    
c001e721:	83 ec 0c             	sub    esp,0xc
c001e724:	ff 35 68 0e 03 c0    	push   DWORD PTR ds:0xc0030e68
c001e72a:	e8 f5 f6 ff ff       	call   c001de24 <unblockTask(ThreadControlBlock*)>
c001e72f:	83 c4 10             	add    esp,0x10
c001e732:	83 c4 2c             	add    esp,0x2c
c001e735:	89 f0                	mov    eax,esi
c001e737:	5b                   	pop    ebx
c001e738:	5e                   	pop    esi
c001e739:	5f                   	pop    edi
c001e73a:	5d                   	pop    ebp
c001e73b:	c3                   	ret    

c001e73c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e73c:	57                   	push   edi
c001e73d:	56                   	push   esi
c001e73e:	53                   	push   ebx
c001e73f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e747:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e74b:	83 e8 06             	sub    eax,0x6
c001e74e:	0f b7 c0             	movzx  eax,ax
c001e751:	50                   	push   eax
c001e752:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e757:	50                   	push   eax
c001e758:	e8 21 fd ff ff       	call   c001e47e <Vm::realToLinear(unsigned short, unsigned short)>
c001e75d:	5a                   	pop    edx
c001e75e:	5e                   	pop    esi
c001e75f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e762:	8d 56 fa             	lea    edx,[esi-0x6]
c001e765:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e76b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e76e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e771:	83 c2 02             	add    edx,0x2
c001e774:	66 89 10             	mov    WORD PTR [eax],dx
c001e777:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e77a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e77e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e781:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e785:	89 d6                	mov    esi,edx
c001e787:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e78d:	66 81 e6 ff fd       	and    si,0xfdff
c001e792:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e796:	74 07                	je     c001e79f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e798:	89 d6                	mov    esi,edx
c001e79a:	66 81 ce 00 02       	or     si,0x200
c001e79f:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7a8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7ac:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7b4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7b7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7bf:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e7c2:	5b                   	pop    ebx
c001e7c3:	5e                   	pop    esi
c001e7c4:	5f                   	pop    edi
c001e7c5:	c3                   	ret    

c001e7c6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e7c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7d0:	c1 e0 04             	shl    eax,0x4
c001e7d3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e7d6:	c3                   	ret    

c001e7d7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e7d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7e1:	c1 e0 04             	shl    eax,0x4
c001e7e4:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e7e8:	c3                   	ret    

c001e7e9 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e7e9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7ee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7f3:	c1 e0 04             	shl    eax,0x4
c001e7f6:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e7f9:	c3                   	ret    

c001e7fa <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e7fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e804:	c1 e0 04             	shl    eax,0x4
c001e807:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e80b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e80e:	c3                   	ret    

c001e80f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e80f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e814:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e819:	c1 e0 04             	shl    eax,0x4
c001e81c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e820:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e824:	c3                   	ret    

c001e825 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e825:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e82a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e82f:	c1 e0 04             	shl    eax,0x4
c001e832:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e836:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e839:	c3                   	ret    

c001e83a <Vm::faultHandler(regs*)>:
c001e83a:	55                   	push   ebp
c001e83b:	57                   	push   edi
c001e83c:	56                   	push   esi
c001e83d:	53                   	push   ebx
c001e83e:	83 ec 1c             	sub    esp,0x1c
c001e841:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e845:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e848:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e84c:	0f b7 f8             	movzx  edi,ax
c001e84f:	52                   	push   edx
c001e850:	0f b7 c0             	movzx  eax,ax
c001e853:	50                   	push   eax
c001e854:	e8 25 fc ff ff       	call   c001e47e <Vm::realToLinear(unsigned short, unsigned short)>
c001e859:	5a                   	pop    edx
c001e85a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e85d:	59                   	pop    ecx
c001e85e:	89 c1                	mov    ecx,eax
c001e860:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e863:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e867:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e86c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e870:	0f b7 c5             	movzx  eax,bp
c001e873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e877:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e87b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e87f:	e8 fa fb ff ff       	call   c001e47e <Vm::realToLinear(unsigned short, unsigned short)>
c001e884:	5e                   	pop    esi
c001e885:	be 06 00 00 00       	mov    esi,0x6
c001e88a:	5a                   	pop    edx
c001e88b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e890:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e895:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e898:	80 fa 9d             	cmp    dl,0x9d
c001e89b:	0f 84 2c 02 00 00    	je     c001eacd <Vm::faultHandler(regs*)+0x293>
c001e8a1:	0f 87 91 00 00 00    	ja     c001e938 <Vm::faultHandler(regs*)+0xfe>
c001e8a7:	80 fa 66             	cmp    dl,0x66
c001e8aa:	0f 84 98 01 00 00    	je     c001ea48 <Vm::faultHandler(regs*)+0x20e>
c001e8b0:	77 47                	ja     c001e8f9 <Vm::faultHandler(regs*)+0xbf>
c001e8b2:	80 fa 36             	cmp    dl,0x36
c001e8b5:	0f 84 80 01 00 00    	je     c001ea3b <Vm::faultHandler(regs*)+0x201>
c001e8bb:	77 1a                	ja     c001e8d7 <Vm::faultHandler(regs*)+0x9d>
c001e8bd:	80 fa 26             	cmp    dl,0x26
c001e8c0:	0f 84 4e 01 00 00    	je     c001ea14 <Vm::faultHandler(regs*)+0x1da>
c001e8c6:	80 fa 2e             	cmp    dl,0x2e
c001e8c9:	0f 85 e2 05 00 00    	jne    c001eeb1 <Vm::faultHandler(regs*)+0x677>
c001e8cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8d2:	31 f6                	xor    esi,esi
c001e8d4:	41                   	inc    ecx
c001e8d5:	eb be                	jmp    c001e895 <Vm::faultHandler(regs*)+0x5b>
c001e8d7:	80 fa 64             	cmp    dl,0x64
c001e8da:	0f 84 41 01 00 00    	je     c001ea21 <Vm::faultHandler(regs*)+0x1e7>
c001e8e0:	0f 87 48 01 00 00    	ja     c001ea2e <Vm::faultHandler(regs*)+0x1f4>
c001e8e6:	80 fa 3e             	cmp    dl,0x3e
c001e8e9:	0f 85 c2 05 00 00    	jne    c001eeb1 <Vm::faultHandler(regs*)+0x677>
c001e8ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8f2:	be 01 00 00 00       	mov    esi,0x1
c001e8f7:	eb db                	jmp    c001e8d4 <Vm::faultHandler(regs*)+0x9a>
c001e8f9:	80 fa 6d             	cmp    dl,0x6d
c001e8fc:	0f 84 ec 02 00 00    	je     c001ebee <Vm::faultHandler(regs*)+0x3b4>
c001e902:	77 17                	ja     c001e91b <Vm::faultHandler(regs*)+0xe1>
c001e904:	80 fa 67             	cmp    dl,0x67
c001e907:	0f 84 48 01 00 00    	je     c001ea55 <Vm::faultHandler(regs*)+0x21b>
c001e90d:	80 fa 6c             	cmp    dl,0x6c
c001e910:	0f 84 69 02 00 00    	je     c001eb7f <Vm::faultHandler(regs*)+0x345>
c001e916:	e9 96 05 00 00       	jmp    c001eeb1 <Vm::faultHandler(regs*)+0x677>
c001e91b:	80 fa 6f             	cmp    dl,0x6f
c001e91e:	0f 84 f4 03 00 00    	je     c001ed18 <Vm::faultHandler(regs*)+0x4de>
c001e924:	0f 82 59 03 00 00    	jb     c001ec83 <Vm::faultHandler(regs*)+0x449>
c001e92a:	80 fa 9c             	cmp    dl,0x9c
c001e92d:	0f 84 2f 01 00 00    	je     c001ea62 <Vm::faultHandler(regs*)+0x228>
c001e933:	e9 79 05 00 00       	jmp    c001eeb1 <Vm::faultHandler(regs*)+0x677>
c001e938:	80 fa ec             	cmp    dl,0xec
c001e93b:	0f 84 14 05 00 00    	je     c001ee55 <Vm::faultHandler(regs*)+0x61b>
c001e941:	77 7b                	ja     c001e9be <Vm::faultHandler(regs*)+0x184>
c001e943:	80 fa e4             	cmp    dl,0xe4
c001e946:	0f 84 93 04 00 00    	je     c001eddf <Vm::faultHandler(regs*)+0x5a5>
c001e94c:	77 53                	ja     c001e9a1 <Vm::faultHandler(regs*)+0x167>
c001e94e:	80 fa cd             	cmp    dl,0xcd
c001e951:	0f 84 d9 01 00 00    	je     c001eb30 <Vm::faultHandler(regs*)+0x2f6>
c001e957:	80 fa cf             	cmp    dl,0xcf
c001e95a:	0f 85 51 05 00 00    	jne    c001eeb1 <Vm::faultHandler(regs*)+0x677>
c001e960:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e963:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e966:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e96a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e96d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e971:	81 ca 00 02 02 00    	or     edx,0x20200
c001e977:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e97a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e97e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e984:	66 c1 e8 09          	shr    ax,0x9
c001e988:	83 e0 01             	and    eax,0x1
c001e98b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e98e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e991:	83 c0 06             	add    eax,0x6
c001e994:	25 ff ff 00 00       	and    eax,0xffff
c001e999:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e99c:	e9 0c 05 00 00       	jmp    c001eead <Vm::faultHandler(regs*)+0x673>
c001e9a1:	80 fa e6             	cmp    dl,0xe6
c001e9a4:	0f 84 7f 04 00 00    	je     c001ee29 <Vm::faultHandler(regs*)+0x5ef>
c001e9aa:	0f 82 4b 04 00 00    	jb     c001edfb <Vm::faultHandler(regs*)+0x5c1>
c001e9b0:	80 fa e7             	cmp    dl,0xe7
c001e9b3:	0f 84 87 04 00 00    	je     c001ee40 <Vm::faultHandler(regs*)+0x606>
c001e9b9:	e9 f3 04 00 00       	jmp    c001eeb1 <Vm::faultHandler(regs*)+0x677>
c001e9be:	80 fa ef             	cmp    dl,0xef
c001e9c1:	0f 84 d1 04 00 00    	je     c001ee98 <Vm::faultHandler(regs*)+0x65e>
c001e9c7:	77 28                	ja     c001e9f1 <Vm::faultHandler(regs*)+0x1b7>
c001e9c9:	80 fa ed             	cmp    dl,0xed
c001e9cc:	0f 84 9f 04 00 00    	je     c001ee71 <Vm::faultHandler(regs*)+0x637>
c001e9d2:	80 fa ee             	cmp    dl,0xee
c001e9d5:	0f 85 d6 04 00 00    	jne    c001eeb1 <Vm::faultHandler(regs*)+0x677>
c001e9db:	50                   	push   eax
c001e9dc:	50                   	push   eax
c001e9dd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e9e1:	50                   	push   eax
c001e9e2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e9e6:	50                   	push   eax
c001e9e7:	e8 5c fa ff ff       	call   c001e448 <Vm::outbv(unsigned short, unsigned char)>
c001e9ec:	e9 9f 04 00 00       	jmp    c001ee90 <Vm::faultHandler(regs*)+0x656>
c001e9f1:	80 fa fa             	cmp    dl,0xfa
c001e9f4:	0f 84 69 01 00 00    	je     c001eb63 <Vm::faultHandler(regs*)+0x329>
c001e9fa:	80 fa fb             	cmp    dl,0xfb
c001e9fd:	0f 84 6e 01 00 00    	je     c001eb71 <Vm::faultHandler(regs*)+0x337>
c001ea03:	80 fa f3             	cmp    dl,0xf3
c001ea06:	0f 85 a5 04 00 00    	jne    c001eeb1 <Vm::faultHandler(regs*)+0x677>
c001ea0c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea0f:	e9 c0 fe ff ff       	jmp    c001e8d4 <Vm::faultHandler(regs*)+0x9a>
c001ea14:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea17:	be 02 00 00 00       	mov    esi,0x2
c001ea1c:	e9 b3 fe ff ff       	jmp    c001e8d4 <Vm::faultHandler(regs*)+0x9a>
c001ea21:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea24:	be 03 00 00 00       	mov    esi,0x3
c001ea29:	e9 a6 fe ff ff       	jmp    c001e8d4 <Vm::faultHandler(regs*)+0x9a>
c001ea2e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea31:	be 04 00 00 00       	mov    esi,0x4
c001ea36:	e9 99 fe ff ff       	jmp    c001e8d4 <Vm::faultHandler(regs*)+0x9a>
c001ea3b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea3e:	be 05 00 00 00       	mov    esi,0x5
c001ea43:	e9 8c fe ff ff       	jmp    c001e8d4 <Vm::faultHandler(regs*)+0x9a>
c001ea48:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea4b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea50:	e9 7f fe ff ff       	jmp    c001e8d4 <Vm::faultHandler(regs*)+0x9a>
c001ea55:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea58:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea5d:	e9 72 fe ff ff       	jmp    c001e8d4 <Vm::faultHandler(regs*)+0x9a>
c001ea62:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea65:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ea69:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea6e:	74 30                	je     c001eaa0 <Vm::faultHandler(regs*)+0x266>
c001ea70:	83 e9 04             	sub    ecx,0x4
c001ea73:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea79:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ea7f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ea82:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ea85:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea8b:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ea8f:	0f 84 15 04 00 00    	je     c001eeaa <Vm::faultHandler(regs*)+0x670>
c001ea95:	80 ce 02             	or     dh,0x2
c001ea98:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ea9b:	e9 0a 04 00 00       	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001eaa0:	83 e9 02             	sub    ecx,0x2
c001eaa3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eaa9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eaac:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eab0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eab6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eaba:	74 05                	je     c001eac1 <Vm::faultHandler(regs*)+0x287>
c001eabc:	80 ce 02             	or     dh,0x2
c001eabf:	eb 03                	jmp    c001eac4 <Vm::faultHandler(regs*)+0x28a>
c001eac1:	80 e6 fd             	and    dh,0xfd
c001eac4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eac8:	e9 dd 03 00 00       	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001eacd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ead2:	74 2a                	je     c001eafe <Vm::faultHandler(regs*)+0x2c4>
c001ead4:	8b 10                	mov    edx,DWORD PTR [eax]
c001ead6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eadc:	81 ca 00 02 02 00    	or     edx,0x20200
c001eae2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eae5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eaed:	c1 e8 09             	shr    eax,0x9
c001eaf0:	83 e0 01             	and    eax,0x1
c001eaf3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eaf6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eaf9:	83 c0 04             	add    eax,0x4
c001eafc:	eb 25                	jmp    c001eb23 <Vm::faultHandler(regs*)+0x2e9>
c001eafe:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb01:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb07:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb13:	66 c1 e8 09          	shr    ax,0x9
c001eb17:	83 e0 01             	and    eax,0x1
c001eb1a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb1d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb20:	83 c0 02             	add    eax,0x2
c001eb23:	25 ff ff 00 00       	and    eax,0xffff
c001eb28:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb2b:	e9 7a 03 00 00       	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001eb30:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb34:	3c ee                	cmp    al,0xee
c001eb36:	75 10                	jne    c001eb48 <Vm::faultHandler(regs*)+0x30e>
c001eb38:	83 ec 0c             	sub    esp,0xc
c001eb3b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb3e:	e8 a2 f9 ff ff       	call   c001e4e5 <Vm::mainloop3(unsigned long)>
c001eb43:	e9 4b 03 00 00       	jmp    c001ee93 <Vm::faultHandler(regs*)+0x659>
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb53:	51                   	push   ecx
c001eb54:	50                   	push   eax
c001eb55:	53                   	push   ebx
c001eb56:	e8 e1 fb ff ff       	call   c001e73c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb5b:	83 c4 20             	add    esp,0x20
c001eb5e:	e9 4a 03 00 00       	jmp    c001eead <Vm::faultHandler(regs*)+0x673>
c001eb63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb68:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb6c:	e9 39 03 00 00       	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001eb71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb76:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eb7a:	e9 2b 03 00 00       	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001eb7f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb82:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb87:	74 2b                	je     c001ebb4 <Vm::faultHandler(regs*)+0x37a>
c001eb89:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eb90:	76 22                	jbe    c001ebb4 <Vm::faultHandler(regs*)+0x37a>
c001eb92:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb96:	50                   	push   eax
c001eb97:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb9b:	50                   	push   eax
c001eb9c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eba0:	50                   	push   eax
c001eba1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eba5:	50                   	push   eax
c001eba6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebaa:	50                   	push   eax
c001ebab:	6a 6c                	push   0x6c
c001ebad:	6a 6c                	push   0x6c
c001ebaf:	e9 b9 01 00 00       	jmp    c001ed6d <Vm::faultHandler(regs*)+0x533>
c001ebb4:	83 ec 0c             	sub    esp,0xc
c001ebb7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebbb:	0f b7 f6             	movzx  esi,si
c001ebbe:	50                   	push   eax
c001ebbf:	e8 71 f8 ff ff       	call   c001e435 <Vm::inbv(unsigned short)>
c001ebc4:	83 c4 0c             	add    esp,0xc
c001ebc7:	0f b6 c0             	movzx  eax,al
c001ebca:	50                   	push   eax
c001ebcb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ebcf:	50                   	push   eax
c001ebd0:	56                   	push   esi
c001ebd1:	e8 24 fc ff ff       	call   c001e7fa <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ebd6:	83 c4 10             	add    esp,0x10
c001ebd9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebdc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ebe0:	74 03                	je     c001ebe5 <Vm::faultHandler(regs*)+0x3ab>
c001ebe2:	48                   	dec    eax
c001ebe3:	eb 01                	jmp    c001ebe6 <Vm::faultHandler(regs*)+0x3ac>
c001ebe5:	40                   	inc    eax
c001ebe6:	0f b7 c0             	movzx  eax,ax
c001ebe9:	e9 8d 00 00 00       	jmp    c001ec7b <Vm::faultHandler(regs*)+0x441>
c001ebee:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ebf1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebf4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebf9:	74 29                	je     c001ec24 <Vm::faultHandler(regs*)+0x3ea>
c001ebfb:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec00:	76 22                	jbe    c001ec24 <Vm::faultHandler(regs*)+0x3ea>
c001ec02:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec06:	50                   	push   eax
c001ec07:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec0b:	50                   	push   eax
c001ec0c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec10:	50                   	push   eax
c001ec11:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec15:	50                   	push   eax
c001ec16:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec1a:	50                   	push   eax
c001ec1b:	6a 6d                	push   0x6d
c001ec1d:	6a 6d                	push   0x6d
c001ec1f:	e9 49 01 00 00       	jmp    c001ed6d <Vm::faultHandler(regs*)+0x533>
c001ec24:	0f b7 c8             	movzx  ecx,ax
c001ec27:	0f b7 f6             	movzx  esi,si
c001ec2a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec2d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec32:	74 20                	je     c001ec54 <Vm::faultHandler(regs*)+0x41a>
c001ec34:	ed                   	in     eax,dx
c001ec35:	55                   	push   ebp
c001ec36:	50                   	push   eax
c001ec37:	51                   	push   ecx
c001ec38:	56                   	push   esi
c001ec39:	e8 e7 fb ff ff       	call   c001e825 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec44:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec48:	74 05                	je     c001ec4f <Vm::faultHandler(regs*)+0x415>
c001ec4a:	83 e8 04             	sub    eax,0x4
c001ec4d:	eb 27                	jmp    c001ec76 <Vm::faultHandler(regs*)+0x43c>
c001ec4f:	83 c0 04             	add    eax,0x4
c001ec52:	eb 22                	jmp    c001ec76 <Vm::faultHandler(regs*)+0x43c>
c001ec54:	66 ed                	in     ax,dx
c001ec56:	0f b7 c0             	movzx  eax,ax
c001ec59:	57                   	push   edi
c001ec5a:	50                   	push   eax
c001ec5b:	51                   	push   ecx
c001ec5c:	56                   	push   esi
c001ec5d:	e8 ad fb ff ff       	call   c001e80f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ec62:	83 c4 10             	add    esp,0x10
c001ec65:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec68:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec6c:	74 05                	je     c001ec73 <Vm::faultHandler(regs*)+0x439>
c001ec6e:	83 e8 02             	sub    eax,0x2
c001ec71:	eb 03                	jmp    c001ec76 <Vm::faultHandler(regs*)+0x43c>
c001ec73:	83 c0 02             	add    eax,0x2
c001ec76:	25 ff ff 00 00       	and    eax,0xffff
c001ec7b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ec7e:	e9 27 02 00 00       	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001ec83:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec86:	3c 05                	cmp    al,0x5
c001ec88:	77 24                	ja     c001ecae <Vm::faultHandler(regs*)+0x474>
c001ec8a:	0f b6 c0             	movzx  eax,al
c001ec8d:	ff 24 85 cc bc 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4334]
c001ec94:	0f b7 fd             	movzx  edi,bp
c001ec97:	eb 15                	jmp    c001ecae <Vm::faultHandler(regs*)+0x474>
c001ec99:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ec9d:	eb 0f                	jmp    c001ecae <Vm::faultHandler(regs*)+0x474>
c001ec9f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001eca3:	eb 09                	jmp    c001ecae <Vm::faultHandler(regs*)+0x474>
c001eca5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001eca9:	eb 03                	jmp    c001ecae <Vm::faultHandler(regs*)+0x474>
c001ecab:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ecae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecb1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ecb6:	74 29                	je     c001ece1 <Vm::faultHandler(regs*)+0x4a7>
c001ecb8:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecbd:	76 22                	jbe    c001ece1 <Vm::faultHandler(regs*)+0x4a7>
c001ecbf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ecc3:	50                   	push   eax
c001ecc4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecc8:	50                   	push   eax
c001ecc9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eccd:	50                   	push   eax
c001ecce:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecd2:	50                   	push   eax
c001ecd3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecd7:	50                   	push   eax
c001ecd8:	6a 6e                	push   0x6e
c001ecda:	6a 6e                	push   0x6e
c001ecdc:	e9 8c 00 00 00       	jmp    c001ed6d <Vm::faultHandler(regs*)+0x533>
c001ece1:	0f b7 c0             	movzx  eax,ax
c001ece4:	52                   	push   edx
c001ece5:	52                   	push   edx
c001ece6:	50                   	push   eax
c001ece7:	57                   	push   edi
c001ece8:	e8 d9 fa ff ff       	call   c001e7c6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eced:	59                   	pop    ecx
c001ecee:	0f b6 c0             	movzx  eax,al
c001ecf1:	5e                   	pop    esi
c001ecf2:	50                   	push   eax
c001ecf3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ecf7:	50                   	push   eax
c001ecf8:	e8 4b f7 ff ff       	call   c001e448 <Vm::outbv(unsigned short, unsigned char)>
c001ecfd:	83 c4 10             	add    esp,0x10
c001ed00:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed03:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed07:	74 03                	je     c001ed0c <Vm::faultHandler(regs*)+0x4d2>
c001ed09:	48                   	dec    eax
c001ed0a:	eb 01                	jmp    c001ed0d <Vm::faultHandler(regs*)+0x4d3>
c001ed0c:	40                   	inc    eax
c001ed0d:	0f b7 c0             	movzx  eax,ax
c001ed10:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed13:	e9 92 01 00 00       	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001ed18:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed1b:	3c 05                	cmp    al,0x5
c001ed1d:	77 1f                	ja     c001ed3e <Vm::faultHandler(regs*)+0x504>
c001ed1f:	0f b6 c0             	movzx  eax,al
c001ed22:	ff 24 85 e4 bc 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd431c]
c001ed29:	89 ef                	mov    edi,ebp
c001ed2b:	eb 11                	jmp    c001ed3e <Vm::faultHandler(regs*)+0x504>
c001ed2d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed30:	eb 0c                	jmp    c001ed3e <Vm::faultHandler(regs*)+0x504>
c001ed32:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed35:	eb 07                	jmp    c001ed3e <Vm::faultHandler(regs*)+0x504>
c001ed37:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed3a:	eb 02                	jmp    c001ed3e <Vm::faultHandler(regs*)+0x504>
c001ed3c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed3e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed41:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed46:	74 37                	je     c001ed7f <Vm::faultHandler(regs*)+0x545>
c001ed48:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed4e:	76 2f                	jbe    c001ed7f <Vm::faultHandler(regs*)+0x545>
c001ed50:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed54:	50                   	push   eax
c001ed55:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed59:	50                   	push   eax
c001ed5a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed5e:	50                   	push   eax
c001ed5f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed63:	50                   	push   eax
c001ed64:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed68:	50                   	push   eax
c001ed69:	6a 6f                	push   0x6f
c001ed6b:	6a 6f                	push   0x6f
c001ed6d:	68 72 bc 02 c0       	push   0xc002bc72
c001ed72:	e8 34 39 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001ed77:	83 c4 20             	add    esp,0x20
c001ed7a:	e9 86 01 00 00       	jmp    c001ef05 <Vm::faultHandler(regs*)+0x6cb>
c001ed7f:	0f b7 d7             	movzx  edx,di
c001ed82:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ed85:	0f b7 c6             	movzx  eax,si
c001ed88:	81 e1 00 04 00 00    	and    ecx,0x400
c001ed8e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ed91:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed96:	74 1d                	je     c001edb5 <Vm::faultHandler(regs*)+0x57b>
c001ed98:	55                   	push   ebp
c001ed99:	55                   	push   ebp
c001ed9a:	50                   	push   eax
c001ed9b:	52                   	push   edx
c001ed9c:	e8 48 fa ff ff       	call   c001e7e9 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001eda1:	83 c4 10             	add    esp,0x10
c001eda4:	89 fa                	mov    edx,edi
c001eda6:	ef                   	out    dx,eax
c001eda7:	85 c9                	test   ecx,ecx
c001eda9:	74 05                	je     c001edb0 <Vm::faultHandler(regs*)+0x576>
c001edab:	83 ee 04             	sub    esi,0x4
c001edae:	eb 21                	jmp    c001edd1 <Vm::faultHandler(regs*)+0x597>
c001edb0:	83 c6 04             	add    esi,0x4
c001edb3:	eb 1c                	jmp    c001edd1 <Vm::faultHandler(regs*)+0x597>
c001edb5:	55                   	push   ebp
c001edb6:	55                   	push   ebp
c001edb7:	50                   	push   eax
c001edb8:	52                   	push   edx
c001edb9:	e8 19 fa ff ff       	call   c001e7d7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001edbe:	83 c4 10             	add    esp,0x10
c001edc1:	89 fa                	mov    edx,edi
c001edc3:	66 ef                	out    dx,ax
c001edc5:	85 c9                	test   ecx,ecx
c001edc7:	74 05                	je     c001edce <Vm::faultHandler(regs*)+0x594>
c001edc9:	83 ee 02             	sub    esi,0x2
c001edcc:	eb 03                	jmp    c001edd1 <Vm::faultHandler(regs*)+0x597>
c001edce:	83 c6 02             	add    esi,0x2
c001edd1:	81 e6 ff ff 00 00    	and    esi,0xffff
c001edd7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001edda:	e9 cb 00 00 00       	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001eddf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ede6:	83 ec 0c             	sub    esp,0xc
c001ede9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eded:	50                   	push   eax
c001edee:	e8 42 f6 ff ff       	call   c001e435 <Vm::inbv(unsigned short)>
c001edf3:	0f b6 c0             	movzx  eax,al
c001edf6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001edf9:	eb 3f                	jmp    c001ee3a <Vm::faultHandler(regs*)+0x600>
c001edfb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee00:	74 07                	je     c001ee09 <Vm::faultHandler(regs*)+0x5cf>
c001ee02:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee06:	ed                   	in     eax,dx
c001ee07:	eb 14                	jmp    c001ee1d <Vm::faultHandler(regs*)+0x5e3>
c001ee09:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee0c:	66 31 f6             	xor    si,si
c001ee0f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee12:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee16:	66 ed                	in     ax,dx
c001ee18:	0f b7 c0             	movzx  eax,ax
c001ee1b:	09 f0                	or     eax,esi
c001ee1d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee20:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee24:	e9 84 00 00 00       	jmp    c001eead <Vm::faultHandler(regs*)+0x673>
c001ee29:	52                   	push   edx
c001ee2a:	52                   	push   edx
c001ee2b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee2f:	50                   	push   eax
c001ee30:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee34:	50                   	push   eax
c001ee35:	e8 0e f6 ff ff       	call   c001e448 <Vm::outbv(unsigned short, unsigned char)>
c001ee3a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee3e:	eb 53                	jmp    c001ee93 <Vm::faultHandler(regs*)+0x659>
c001ee40:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee43:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee4c:	74 03                	je     c001ee51 <Vm::faultHandler(regs*)+0x617>
c001ee4e:	ef                   	out    dx,eax
c001ee4f:	eb cf                	jmp    c001ee20 <Vm::faultHandler(regs*)+0x5e6>
c001ee51:	66 ef                	out    dx,ax
c001ee53:	eb cb                	jmp    c001ee20 <Vm::faultHandler(regs*)+0x5e6>
c001ee55:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee5c:	83 ec 0c             	sub    esp,0xc
c001ee5f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee63:	50                   	push   eax
c001ee64:	e8 cc f5 ff ff       	call   c001e435 <Vm::inbv(unsigned short)>
c001ee69:	0f b6 c0             	movzx  eax,al
c001ee6c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee6f:	eb 1f                	jmp    c001ee90 <Vm::faultHandler(regs*)+0x656>
c001ee71:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee74:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee79:	74 03                	je     c001ee7e <Vm::faultHandler(regs*)+0x644>
c001ee7b:	ed                   	in     eax,dx
c001ee7c:	eb 0d                	jmp    c001ee8b <Vm::faultHandler(regs*)+0x651>
c001ee7e:	66 ed                	in     ax,dx
c001ee80:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ee83:	0f b7 c0             	movzx  eax,ax
c001ee86:	66 31 d2             	xor    dx,dx
c001ee89:	09 d0                	or     eax,edx
c001ee8b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee8e:	eb 1a                	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001ee90:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	eb 15                	jmp    c001eead <Vm::faultHandler(regs*)+0x673>
c001ee98:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee9b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee9e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eea3:	74 03                	je     c001eea8 <Vm::faultHandler(regs*)+0x66e>
c001eea5:	ef                   	out    dx,eax
c001eea6:	eb 02                	jmp    c001eeaa <Vm::faultHandler(regs*)+0x670>
c001eea8:	66 ef                	out    dx,ax
c001eeaa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eead:	b0 01                	mov    al,0x1
c001eeaf:	eb 56                	jmp    c001ef07 <Vm::faultHandler(regs*)+0x6cd>
c001eeb1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eeb5:	50                   	push   eax
c001eeb6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eeba:	50                   	push   eax
c001eebb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eebf:	50                   	push   eax
c001eec0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eec4:	50                   	push   eax
c001eec5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eec9:	50                   	push   eax
c001eeca:	52                   	push   edx
c001eecb:	52                   	push   edx
c001eecc:	68 9f bc 02 c0       	push   0xc002bc9f
c001eed1:	e8 d5 37 ff ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c001eed6:	83 c4 20             	add    esp,0x20
c001eed9:	83 ec 0c             	sub    esp,0xc
c001eedc:	6a 60                	push   0x60
c001eede:	e8 52 f5 ff ff       	call   c001e435 <Vm::inbv(unsigned short)>
c001eee3:	83 c4 10             	add    esp,0x10
c001eee6:	3c 1c                	cmp    al,0x1c
c001eee8:	74 04                	je     c001eeee <Vm::faultHandler(regs*)+0x6b4>
c001eeea:	3c 5a                	cmp    al,0x5a
c001eeec:	75 eb                	jne    c001eed9 <Vm::faultHandler(regs*)+0x69f>
c001eeee:	3c 5a                	cmp    al,0x5a
c001eef0:	74 04                	je     c001eef6 <Vm::faultHandler(regs*)+0x6bc>
c001eef2:	3c 1c                	cmp    al,0x1c
c001eef4:	75 0f                	jne    c001ef05 <Vm::faultHandler(regs*)+0x6cb>
c001eef6:	83 ec 0c             	sub    esp,0xc
c001eef9:	6a 60                	push   0x60
c001eefb:	e8 35 f5 ff ff       	call   c001e435 <Vm::inbv(unsigned short)>
c001ef00:	83 c4 10             	add    esp,0x10
c001ef03:	eb e9                	jmp    c001eeee <Vm::faultHandler(regs*)+0x6b4>
c001ef05:	31 c0                	xor    eax,eax
c001ef07:	83 c4 1c             	add    esp,0x1c
c001ef0a:	5b                   	pop    ebx
c001ef0b:	5e                   	pop    esi
c001ef0c:	5f                   	pop    edi
c001ef0d:	5d                   	pop    ebp
c001ef0e:	c3                   	ret    

c001ef0f <Vm::fpuInternalTo32(unsigned long long)>:
c001ef0f:	57                   	push   edi
c001ef10:	56                   	push   esi
c001ef11:	53                   	push   ebx
c001ef12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1a:	89 d6                	mov    esi,edx
c001ef1c:	89 d7                	mov    edi,edx
c001ef1e:	89 c1                	mov    ecx,eax
c001ef20:	c1 ef 14             	shr    edi,0x14
c001ef23:	89 d3                	mov    ebx,edx
c001ef25:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef2b:	31 d2                	xor    edx,edx
c001ef2d:	89 f8                	mov    eax,edi
c001ef2f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef35:	bf ff 00 00 00       	mov    edi,0xff
c001ef3a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef3f:	83 d2 ff             	adc    edx,0xffffffff
c001ef42:	39 c7                	cmp    edi,eax
c001ef44:	bf 00 00 00 00       	mov    edi,0x0
c001ef49:	19 d7                	sbb    edi,edx
c001ef4b:	72 15                	jb     c001ef62 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef4d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef51:	c1 e0 17             	shl    eax,0x17
c001ef54:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef5a:	09 f1                	or     ecx,esi
c001ef5c:	09 c1                	or     ecx,eax
c001ef5e:	89 cf                	mov    edi,ecx
c001ef60:	eb 02                	jmp    c001ef64 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef62:	31 ff                	xor    edi,edi
c001ef64:	89 f8                	mov    eax,edi
c001ef66:	5b                   	pop    ebx
c001ef67:	5e                   	pop    esi
c001ef68:	5f                   	pop    edi
c001ef69:	c3                   	ret    

c001ef6a <Vm::fpuInternalTo64(unsigned long long)>:
c001ef6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef72:	c3                   	ret    

c001ef73 <Vm::fpu32ToInternal(unsigned int)>:
c001ef73:	57                   	push   edi
c001ef74:	31 ff                	xor    edi,edi
c001ef76:	56                   	push   esi
c001ef77:	53                   	push   ebx
c001ef78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef7c:	89 cb                	mov    ebx,ecx
c001ef7e:	89 ce                	mov    esi,ecx
c001ef80:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ef86:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ef8c:	c1 e9 17             	shr    ecx,0x17
c001ef8f:	89 f0                	mov    eax,esi
c001ef91:	0f b6 d1             	movzx  edx,cl
c001ef94:	81 c2 80 03 00 00    	add    edx,0x380
c001ef9a:	89 d1                	mov    ecx,edx
c001ef9c:	89 fa                	mov    edx,edi
c001ef9e:	c1 e1 14             	shl    ecx,0x14
c001efa1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001efa5:	c1 e0 1d             	shl    eax,0x1d
c001efa8:	89 d7                	mov    edi,edx
c001efaa:	89 c6                	mov    esi,eax
c001efac:	89 ca                	mov    edx,ecx
c001efae:	89 f0                	mov    eax,esi
c001efb0:	09 fa                	or     edx,edi
c001efb2:	09 da                	or     edx,ebx
c001efb4:	5b                   	pop    ebx
c001efb5:	5e                   	pop    esi
c001efb6:	5f                   	pop    edi
c001efb7:	c3                   	ret    

c001efb8 <Vm::fpu64ToInternal(unsigned long long)>:
c001efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efc0:	c3                   	ret    

c001efc1 <Vm::fpuFloatToLong(unsigned long long)>:
c001efc1:	57                   	push   edi
c001efc2:	31 c0                	xor    eax,eax
c001efc4:	56                   	push   esi
c001efc5:	31 d2                	xor    edx,edx
c001efc7:	53                   	push   ebx
c001efc8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efcc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efd0:	89 d9                	mov    ecx,ebx
c001efd2:	c1 e9 14             	shr    ecx,0x14
c001efd5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001efdb:	89 cf                	mov    edi,ecx
c001efdd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001efe3:	78 33                	js     c001f018 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001efe5:	89 d9                	mov    ecx,ebx
c001efe7:	89 f0                	mov    eax,esi
c001efe9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efef:	81 c9 00 00 10 00    	or     ecx,0x100000
c001eff5:	89 ca                	mov    edx,ecx
c001eff7:	b9 34 00 00 00       	mov    ecx,0x34
c001effc:	29 f9                	sub    ecx,edi
c001effe:	0f ad d0             	shrd   eax,edx,cl
c001f001:	d3 fa                	sar    edx,cl
c001f003:	f6 c1 20             	test   cl,0x20
c001f006:	74 05                	je     c001f00d <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f008:	89 d0                	mov    eax,edx
c001f00a:	c1 fa 1f             	sar    edx,0x1f
c001f00d:	85 db                	test   ebx,ebx
c001f00f:	79 07                	jns    c001f018 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f011:	f7 d8                	neg    eax
c001f013:	83 d2 00             	adc    edx,0x0
c001f016:	f7 da                	neg    edx
c001f018:	5b                   	pop    ebx
c001f019:	5e                   	pop    esi
c001f01a:	5f                   	pop    edi
c001f01b:	c3                   	ret    

c001f01c <Vm::fpuULongToFloat(unsigned long long)>:
c001f01c:	57                   	push   edi
c001f01d:	31 c9                	xor    ecx,ecx
c001f01f:	56                   	push   esi
c001f020:	53                   	push   ebx
c001f021:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f025:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f029:	0f ba e7 14          	bt     edi,0x14
c001f02d:	72 07                	jb     c001f036 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f02f:	01 f6                	add    esi,esi
c001f031:	11 ff                	adc    edi,edi
c001f033:	41                   	inc    ecx
c001f034:	eb f3                	jmp    c001f029 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f036:	89 fa                	mov    edx,edi
c001f038:	89 f0                	mov    eax,esi
c001f03a:	bb 33 04 00 00       	mov    ebx,0x433
c001f03f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f045:	29 cb                	sub    ebx,ecx
c001f047:	89 d9                	mov    ecx,ebx
c001f049:	5b                   	pop    ebx
c001f04a:	c1 e1 14             	shl    ecx,0x14
c001f04d:	5e                   	pop    esi
c001f04e:	09 ca                	or     edx,ecx
c001f050:	5f                   	pop    edi
c001f051:	c3                   	ret    

c001f052 <Vm::fpuLongToFloat(long long)>:
c001f052:	56                   	push   esi
c001f053:	31 c0                	xor    eax,eax
c001f055:	53                   	push   ebx
c001f056:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f05a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f05e:	39 c8                	cmp    eax,ecx
c001f060:	19 d8                	sbb    eax,ebx
c001f062:	7d 04                	jge    c001f068 <Vm::fpuLongToFloat(long long)+0x16>
c001f064:	31 f6                	xor    esi,esi
c001f066:	eb 0c                	jmp    c001f074 <Vm::fpuLongToFloat(long long)+0x22>
c001f068:	f7 d9                	neg    ecx
c001f06a:	be 01 00 00 00       	mov    esi,0x1
c001f06f:	83 d3 00             	adc    ebx,0x0
c001f072:	f7 db                	neg    ebx
c001f074:	31 c0                	xor    eax,eax
c001f076:	0f ba e3 14          	bt     ebx,0x14
c001f07a:	72 07                	jb     c001f083 <Vm::fpuLongToFloat(long long)+0x31>
c001f07c:	01 c9                	add    ecx,ecx
c001f07e:	11 db                	adc    ebx,ebx
c001f080:	40                   	inc    eax
c001f081:	eb f3                	jmp    c001f076 <Vm::fpuLongToFloat(long long)+0x24>
c001f083:	ba 33 04 00 00       	mov    edx,0x433
c001f088:	29 c2                	sub    edx,eax
c001f08a:	89 c8                	mov    eax,ecx
c001f08c:	c1 e2 14             	shl    edx,0x14
c001f08f:	89 d9                	mov    ecx,ebx
c001f091:	89 f3                	mov    ebx,esi
c001f093:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f099:	09 ca                	or     edx,ecx
c001f09b:	84 db                	test   bl,bl
c001f09d:	74 06                	je     c001f0a5 <Vm::fpuLongToFloat(long long)+0x53>
c001f09f:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0a5:	5b                   	pop    ebx
c001f0a6:	5e                   	pop    esi
c001f0a7:	c3                   	ret    

c001f0a8 <Vm::fpuGet0()>:
c001f0a8:	31 c0                	xor    eax,eax
c001f0aa:	31 d2                	xor    edx,edx
c001f0ac:	c3                   	ret    

c001f0ad <Vm::fpuGet1()>:
c001f0ad:	b8 01 00 00 00       	mov    eax,0x1
c001f0b2:	31 d2                	xor    edx,edx
c001f0b4:	c3                   	ret    

c001f0b5 <Vm::fpuGetPi()>:
c001f0b5:	b8 03 00 00 00       	mov    eax,0x3
c001f0ba:	31 d2                	xor    edx,edx
c001f0bc:	c3                   	ret    

c001f0bd <Vm::fpuGetLog2E()>:
c001f0bd:	83 ec 18             	sub    esp,0x18
c001f0c0:	68 fc bc 02 c0       	push   0xc002bcfc
c001f0c5:	e8 4d ad ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001f0ca:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0cf:	31 d2                	xor    edx,edx
c001f0d1:	83 c4 1c             	add    esp,0x1c
c001f0d4:	c3                   	ret    

c001f0d5 <Vm::fpuGetLogE2()>:
c001f0d5:	83 ec 18             	sub    esp,0x18
c001f0d8:	68 08 bd 02 c0       	push   0xc002bd08
c001f0dd:	e8 35 ad ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001f0e2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0e7:	31 d2                	xor    edx,edx
c001f0e9:	83 c4 1c             	add    esp,0x1c
c001f0ec:	c3                   	ret    

c001f0ed <Vm::fpuGetLog210()>:
c001f0ed:	83 ec 18             	sub    esp,0x18
c001f0f0:	68 14 bd 02 c0       	push   0xc002bd14
c001f0f5:	e8 1d ad ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001f0fa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0ff:	31 d2                	xor    edx,edx
c001f101:	83 c4 1c             	add    esp,0x1c
c001f104:	c3                   	ret    

c001f105 <Vm::fpuGetLog102()>:
c001f105:	83 ec 18             	sub    esp,0x18
c001f108:	68 21 bd 02 c0       	push   0xc002bd21
c001f10d:	e8 05 ad ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001f112:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f117:	31 d2                	xor    edx,edx
c001f119:	83 c4 1c             	add    esp,0x1c
c001f11c:	c3                   	ret    

c001f11d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f11d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f121:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f125:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f129:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f12d:	0f 92 c0             	setb   al
c001f130:	c3                   	ret    

c001f131 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f131:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f139:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f13d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f141:	09 c2                	or     edx,eax
c001f143:	0f 94 c0             	sete   al
c001f146:	c3                   	ret    

c001f147 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f147:	57                   	push   edi
c001f148:	56                   	push   esi
c001f149:	53                   	push   ebx
c001f14a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f14e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f152:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f156:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f15a:	57                   	push   edi
c001f15b:	56                   	push   esi
c001f15c:	53                   	push   ebx
c001f15d:	51                   	push   ecx
c001f15e:	e8 ce ff ff ff       	call   c001f131 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f163:	83 c4 10             	add    esp,0x10
c001f166:	88 c2                	mov    dl,al
c001f168:	31 c0                	xor    eax,eax
c001f16a:	84 d2                	test   dl,dl
c001f16c:	75 0c                	jne    c001f17a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f16e:	57                   	push   edi
c001f16f:	56                   	push   esi
c001f170:	53                   	push   ebx
c001f171:	51                   	push   ecx
c001f172:	e8 a6 ff ff ff       	call   c001f11d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f177:	83 c4 10             	add    esp,0x10
c001f17a:	83 e0 01             	and    eax,0x1
c001f17d:	5b                   	pop    ebx
c001f17e:	88 c1                	mov    cl,al
c001f180:	83 e2 01             	and    edx,0x1
c001f183:	a0 a1 0e 03 c0       	mov    al,ds:0xc0030ea1
c001f188:	c1 e2 06             	shl    edx,0x6
c001f18b:	83 e0 ba             	and    eax,0xffffffba
c001f18e:	5e                   	pop    esi
c001f18f:	09 c8                	or     eax,ecx
c001f191:	5f                   	pop    edi
c001f192:	09 d0                	or     eax,edx
c001f194:	a2 a1 0e 03 c0       	mov    ds:0xc0030ea1,al
c001f199:	c3                   	ret    

c001f19a <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f19a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f19e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1a2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1a6:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1aa:	c3                   	ret    

c001f1ab <Vm::fpuAbs(unsigned long long)>:
c001f1ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1b3:	c3                   	ret    

c001f1b4 <Vm::fpuChs(unsigned long long)>:
c001f1b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1bc:	f7 d8                	neg    eax
c001f1be:	83 d2 00             	adc    edx,0x0
c001f1c1:	f7 da                	neg    edx
c001f1c3:	c3                   	ret    

c001f1c4 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1c4:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1c8:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1cd:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1d1:	eb c7                	jmp    c001f19a <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1d3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1d3:	53                   	push   ebx
c001f1d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1e4:	0f af ca             	imul   ecx,edx
c001f1e7:	0f af d8             	imul   ebx,eax
c001f1ea:	f7 e2                	mul    edx
c001f1ec:	01 d9                	add    ecx,ebx
c001f1ee:	5b                   	pop    ebx
c001f1ef:	01 ca                	add    edx,ecx
c001f1f1:	c3                   	ret    

c001f1f2 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f1f2:	83 ec 0c             	sub    esp,0xc
c001f1f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f201:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f205:	e8 da 74 00 00       	call   c00266e4 <__udivdi3>
c001f20a:	83 c4 1c             	add    esp,0x1c
c001f20d:	c3                   	ret    

c001f20e <Vm::fpuSquare(unsigned long long)>:
c001f20e:	50                   	push   eax
c001f20f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f213:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f217:	52                   	push   edx
c001f218:	50                   	push   eax
c001f219:	52                   	push   edx
c001f21a:	50                   	push   eax
c001f21b:	e8 b3 ff ff ff       	call   c001f1d3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f220:	83 c4 14             	add    esp,0x14
c001f223:	c3                   	ret    

c001f224 <Vm::fpuGetReg(int)>:
c001f224:	83 ec 0c             	sub    esp,0xc
c001f227:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f22c:	76 10                	jbe    c001f23e <Vm::fpuGetReg(int)+0x1a>
c001f22e:	83 ec 0c             	sub    esp,0xc
c001f231:	68 2e bd 02 c0       	push   0xc002bd2e
c001f236:	e8 dc ab ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001f23b:	83 c4 10             	add    esp,0x10
c001f23e:	a0 a1 0e 03 c0       	mov    al,ds:0xc0030ea1
c001f243:	b9 08 00 00 00       	mov    ecx,0x8
c001f248:	c0 e8 03             	shr    al,0x3
c001f24b:	83 e0 07             	and    eax,0x7
c001f24e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f252:	99                   	cdq    
c001f253:	f7 f9                	idiv   ecx
c001f255:	8b 04 d5 a4 0e 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf15c]
c001f25c:	8b 14 d5 a8 0e 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf158]
c001f263:	83 c4 0c             	add    esp,0xc
c001f266:	c3                   	ret    

c001f267 <Vm::fpuSetReg(int, unsigned long long)>:
c001f267:	57                   	push   edi
c001f268:	56                   	push   esi
c001f269:	52                   	push   edx
c001f26a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f26e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f272:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f277:	76 10                	jbe    c001f289 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f279:	83 ec 0c             	sub    esp,0xc
c001f27c:	68 41 bd 02 c0       	push   0xc002bd41
c001f281:	e8 91 ab ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c001f286:	83 c4 10             	add    esp,0x10
c001f289:	a0 a1 0e 03 c0       	mov    al,ds:0xc0030ea1
c001f28e:	b9 08 00 00 00       	mov    ecx,0x8
c001f293:	c0 e8 03             	shr    al,0x3
c001f296:	83 e0 07             	and    eax,0x7
c001f299:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f29d:	99                   	cdq    
c001f29e:	f7 f9                	idiv   ecx
c001f2a0:	89 34 d5 a4 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf15c],esi
c001f2a7:	89 3c d5 a8 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf158],edi
c001f2ae:	58                   	pop    eax
c001f2af:	5e                   	pop    esi
c001f2b0:	5f                   	pop    edi
c001f2b1:	c3                   	ret    

c001f2b2 <Vm::fpuPush(unsigned long long)>:
c001f2b2:	a0 a1 0e 03 c0       	mov    al,ds:0xc0030ea1
c001f2b7:	c0 e8 03             	shr    al,0x3
c001f2ba:	83 e0 07             	and    eax,0x7
c001f2bd:	83 c0 07             	add    eax,0x7
c001f2c0:	88 c2                	mov    dl,al
c001f2c2:	83 e0 07             	and    eax,0x7
c001f2c5:	83 e2 07             	and    edx,0x7
c001f2c8:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2cf:	8a 15 a1 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ea1
c001f2d5:	83 e2 c7             	and    edx,0xffffffc7
c001f2d8:	09 ca                	or     edx,ecx
c001f2da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2de:	88 15 a1 0e 03 c0    	mov    BYTE PTR ds:0xc0030ea1,dl
c001f2e4:	89 0c c5 a8 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf158],ecx
c001f2eb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2ef:	89 14 c5 a4 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf15c],edx
c001f2f6:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001f2fb:	83 f8 08             	cmp    eax,0x8
c001f2fe:	75 08                	jne    c001f308 <Vm::fpuPush(unsigned long long)+0x56>
c001f300:	80 0d a0 0e 03 c0 40 	or     BYTE PTR ds:0xc0030ea0,0x40
c001f307:	c3                   	ret    
c001f308:	40                   	inc    eax
c001f309:	a3 e4 0e 03 c0       	mov    ds:0xc0030ee4,eax
c001f30e:	c3                   	ret    

c001f30f <Vm::fpuPop()>:
c001f30f:	8a 0d a1 0e 03 c0    	mov    cl,BYTE PTR ds:0xc0030ea1
c001f315:	53                   	push   ebx
c001f316:	c0 e9 03             	shr    cl,0x3
c001f319:	8a 1d a1 0e 03 c0    	mov    bl,BYTE PTR ds:0xc0030ea1
c001f31f:	83 e1 07             	and    ecx,0x7
c001f322:	83 e3 c7             	and    ebx,0xffffffc7
c001f325:	8b 04 cd a4 0e 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf15c]
c001f32c:	8b 14 cd a8 0e 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf158]
c001f333:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f33a:	83 e1 38             	and    ecx,0x38
c001f33d:	09 d9                	or     ecx,ebx
c001f33f:	88 0d a1 0e 03 c0    	mov    BYTE PTR ds:0xc0030ea1,cl
c001f345:	8b 0d e4 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ee4
c001f34b:	85 c9                	test   ecx,ecx
c001f34d:	74 09                	je     c001f358 <Vm::fpuPop()+0x49>
c001f34f:	49                   	dec    ecx
c001f350:	89 0d e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,ecx
c001f356:	eb 07                	jmp    c001f35f <Vm::fpuPop()+0x50>
c001f358:	80 0d a0 0e 03 c0 40 	or     BYTE PTR ds:0xc0030ea0,0x40
c001f35f:	5b                   	pop    ebx
c001f360:	c3                   	ret    

c001f361 <Vm::x87Handler(regs*)>:
c001f361:	55                   	push   ebp
c001f362:	57                   	push   edi
c001f363:	56                   	push   esi
c001f364:	53                   	push   ebx
c001f365:	83 ec 1c             	sub    esp,0x1c
c001f368:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f36c:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f371:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f374:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f37c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f380:	50                   	push   eax
c001f381:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f385:	50                   	push   eax
c001f386:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f38a:	50                   	push   eax
c001f38b:	53                   	push   ebx
c001f38c:	e8 9f a1 ff ff       	call   c0019530 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f391:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f394:	83 c4 10             	add    esp,0x10
c001f397:	89 c6                	mov    esi,eax
c001f399:	80 fa d9             	cmp    dl,0xd9
c001f39c:	0f 85 52 01 00 00    	jne    c001f4f4 <Vm::x87Handler(regs*)+0x193>
c001f3a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3a6:	8d 50 20             	lea    edx,[eax+0x20]
c001f3a9:	80 fa 0e             	cmp    dl,0xe
c001f3ac:	0f 87 86 00 00 00    	ja     c001f438 <Vm::x87Handler(regs*)+0xd7>
c001f3b2:	0f b6 d2             	movzx  edx,dl
c001f3b5:	ff 24 95 54 bd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd42ac]
c001f3bc:	e8 e7 fc ff ff       	call   c001f0a8 <Vm::fpuGet0()>
c001f3c1:	eb 05                	jmp    c001f3c8 <Vm::x87Handler(regs*)+0x67>
c001f3c3:	e8 e5 fc ff ff       	call   c001f0ad <Vm::fpuGet1()>
c001f3c8:	57                   	push   edi
c001f3c9:	57                   	push   edi
c001f3ca:	52                   	push   edx
c001f3cb:	50                   	push   eax
c001f3cc:	e8 e1 fe ff ff       	call   c001f2b2 <Vm::fpuPush(unsigned long long)>
c001f3d1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3d5:	83 c4 10             	add    esp,0x10
c001f3d8:	b0 01                	mov    al,0x1
c001f3da:	e9 e3 09 00 00       	jmp    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001f3df:	83 ec 0c             	sub    esp,0xc
c001f3e2:	6a 00                	push   0x0
c001f3e4:	e8 3b fe ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f3e9:	59                   	pop    ecx
c001f3ea:	5e                   	pop    esi
c001f3eb:	52                   	push   edx
c001f3ec:	50                   	push   eax
c001f3ed:	e8 c2 fd ff ff       	call   c001f1b4 <Vm::fpuChs(unsigned long long)>
c001f3f2:	eb 13                	jmp    c001f407 <Vm::x87Handler(regs*)+0xa6>
c001f3f4:	83 ec 0c             	sub    esp,0xc
c001f3f7:	6a 00                	push   0x0
c001f3f9:	e8 26 fe ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f3fe:	5f                   	pop    edi
c001f3ff:	5d                   	pop    ebp
c001f400:	52                   	push   edx
c001f401:	50                   	push   eax
c001f402:	e8 a4 fd ff ff       	call   c001f1ab <Vm::fpuAbs(unsigned long long)>
c001f407:	83 c4 0c             	add    esp,0xc
c001f40a:	52                   	push   edx
c001f40b:	50                   	push   eax
c001f40c:	6a 00                	push   0x0
c001f40e:	e8 54 fe ff ff       	call   c001f267 <Vm::fpuSetReg(int, unsigned long long)>
c001f413:	eb bc                	jmp    c001f3d1 <Vm::x87Handler(regs*)+0x70>
c001f415:	e8 d3 fc ff ff       	call   c001f0ed <Vm::fpuGetLog210()>
c001f41a:	eb ac                	jmp    c001f3c8 <Vm::x87Handler(regs*)+0x67>
c001f41c:	e8 9c fc ff ff       	call   c001f0bd <Vm::fpuGetLog2E()>
c001f421:	eb a5                	jmp    c001f3c8 <Vm::x87Handler(regs*)+0x67>
c001f423:	e8 8d fc ff ff       	call   c001f0b5 <Vm::fpuGetPi()>
c001f428:	eb 9e                	jmp    c001f3c8 <Vm::x87Handler(regs*)+0x67>
c001f42a:	e8 d6 fc ff ff       	call   c001f105 <Vm::fpuGetLog102()>
c001f42f:	eb 97                	jmp    c001f3c8 <Vm::x87Handler(regs*)+0x67>
c001f431:	e8 9f fc ff ff       	call   c001f0d5 <Vm::fpuGetLogE2()>
c001f436:	eb 90                	jmp    c001f3c8 <Vm::x87Handler(regs*)+0x67>
c001f438:	8d 50 40             	lea    edx,[eax+0x40]
c001f43b:	80 fa 07             	cmp    dl,0x7
c001f43e:	77 15                	ja     c001f455 <Vm::x87Handler(regs*)+0xf4>
c001f440:	83 ec 0c             	sub    esp,0xc
c001f443:	2d c0 00 00 00       	sub    eax,0xc0
c001f448:	50                   	push   eax
c001f449:	e8 d6 fd ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f44e:	59                   	pop    ecx
c001f44f:	5e                   	pop    esi
c001f450:	e9 75 ff ff ff       	jmp    c001f3ca <Vm::x87Handler(regs*)+0x69>
c001f455:	8d 50 38             	lea    edx,[eax+0x38]
c001f458:	80 fa 07             	cmp    dl,0x7
c001f45b:	77 3c                	ja     c001f499 <Vm::x87Handler(regs*)+0x138>
c001f45d:	83 ec 0c             	sub    esp,0xc
c001f460:	2d c8 00 00 00       	sub    eax,0xc8
c001f465:	50                   	push   eax
c001f466:	e8 b9 fd ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f46b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f472:	89 c6                	mov    esi,eax
c001f474:	89 d7                	mov    edi,edx
c001f476:	e8 a9 fd ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f47b:	83 c4 0c             	add    esp,0xc
c001f47e:	52                   	push   edx
c001f47f:	50                   	push   eax
c001f480:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f484:	2d c8 00 00 00       	sub    eax,0xc8
c001f489:	50                   	push   eax
c001f48a:	e8 d8 fd ff ff       	call   c001f267 <Vm::fpuSetReg(int, unsigned long long)>
c001f48f:	83 c4 0c             	add    esp,0xc
c001f492:	57                   	push   edi
c001f493:	56                   	push   esi
c001f494:	e9 73 ff ff ff       	jmp    c001f40c <Vm::x87Handler(regs*)+0xab>
c001f499:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f49d:	84 d2                	test   dl,dl
c001f49f:	75 0f                	jne    c001f4b0 <Vm::x87Handler(regs*)+0x14f>
c001f4a1:	83 ec 0c             	sub    esp,0xc
c001f4a4:	ff 36                	push   DWORD PTR [esi]
c001f4a6:	e8 c8 fa ff ff       	call   c001ef73 <Vm::fpu32ToInternal(unsigned int)>
c001f4ab:	e9 bf 00 00 00       	jmp    c001f56f <Vm::x87Handler(regs*)+0x20e>
c001f4b0:	80 fa 03             	cmp    dl,0x3
c001f4b3:	75 13                	jne    c001f4c8 <Vm::x87Handler(regs*)+0x167>
c001f4b5:	e8 55 fe ff ff       	call   c001f30f <Vm::fpuPop()>
c001f4ba:	55                   	push   ebp
c001f4bb:	55                   	push   ebp
c001f4bc:	52                   	push   edx
c001f4bd:	50                   	push   eax
c001f4be:	e8 4c fa ff ff       	call   c001ef0f <Vm::fpuInternalTo32(unsigned long long)>
c001f4c3:	e9 88 00 00 00       	jmp    c001f550 <Vm::x87Handler(regs*)+0x1ef>
c001f4c8:	80 fa 05             	cmp    dl,0x5
c001f4cb:	75 0e                	jne    c001f4db <Vm::x87Handler(regs*)+0x17a>
c001f4cd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4d0:	66 a3 a2 0e 03 c0    	mov    ds:0xc0030ea2,ax
c001f4d6:	e9 df 00 00 00       	jmp    c001f5ba <Vm::x87Handler(regs*)+0x259>
c001f4db:	31 c0                	xor    eax,eax
c001f4dd:	80 fa 07             	cmp    dl,0x7
c001f4e0:	0f 85 dc 08 00 00    	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001f4e6:	66 a1 a2 0e 03 c0    	mov    ax,ds:0xc0030ea2
c001f4ec:	66 89 06             	mov    WORD PTR [esi],ax
c001f4ef:	e9 c6 00 00 00       	jmp    c001f5ba <Vm::x87Handler(regs*)+0x259>
c001f4f4:	80 fa d8             	cmp    dl,0xd8
c001f4f7:	0f 84 c9 00 00 00    	je     c001f5c6 <Vm::x87Handler(regs*)+0x265>
c001f4fd:	80 fa dc             	cmp    dl,0xdc
c001f500:	0f 84 0d 02 00 00    	je     c001f713 <Vm::x87Handler(regs*)+0x3b2>
c001f506:	80 fa de             	cmp    dl,0xde
c001f509:	0f 84 cd 02 00 00    	je     c001f7dc <Vm::x87Handler(regs*)+0x47b>
c001f50f:	80 fa dd             	cmp    dl,0xdd
c001f512:	0f 84 5f 04 00 00    	je     c001f977 <Vm::x87Handler(regs*)+0x616>
c001f518:	80 fa da             	cmp    dl,0xda
c001f51b:	0f 84 24 05 00 00    	je     c001fa45 <Vm::x87Handler(regs*)+0x6e4>
c001f521:	80 fa df             	cmp    dl,0xdf
c001f524:	0f 84 68 05 00 00    	je     c001fa92 <Vm::x87Handler(regs*)+0x731>
c001f52a:	31 c0                	xor    eax,eax
c001f52c:	80 fa db             	cmp    dl,0xdb
c001f52f:	0f 85 8d 08 00 00    	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001f535:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f539:	80 fa 03             	cmp    dl,0x3
c001f53c:	0f 85 70 06 00 00    	jne    c001fbb2 <Vm::x87Handler(regs*)+0x851>
c001f542:	e8 c8 fd ff ff       	call   c001f30f <Vm::fpuPop()>
c001f547:	55                   	push   ebp
c001f548:	55                   	push   ebp
c001f549:	52                   	push   edx
c001f54a:	50                   	push   eax
c001f54b:	e8 71 fa ff ff       	call   c001efc1 <Vm::fpuFloatToLong(unsigned long long)>
c001f550:	83 c4 10             	add    esp,0x10
c001f553:	89 06                	mov    DWORD PTR [esi],eax
c001f555:	eb 63                	jmp    c001f5ba <Vm::x87Handler(regs*)+0x259>
c001f557:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f55b:	84 d2                	test   dl,dl
c001f55d:	0f 85 e6 05 00 00    	jne    c001fb49 <Vm::x87Handler(regs*)+0x7e8>
c001f563:	57                   	push   edi
c001f564:	57                   	push   edi
c001f565:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f568:	ff 36                	push   DWORD PTR [esi]
c001f56a:	e8 49 fa ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001f56f:	5e                   	pop    esi
c001f570:	5f                   	pop    edi
c001f571:	52                   	push   edx
c001f572:	50                   	push   eax
c001f573:	e8 3a fd ff ff       	call   c001f2b2 <Vm::fpuPush(unsigned long long)>
c001f578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f57c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f57f:	e9 51 fe ff ff       	jmp    c001f3d5 <Vm::x87Handler(regs*)+0x74>
c001f584:	80 fa 03             	cmp    dl,0x3
c001f587:	0f 85 d7 06 00 00    	jne    c001fc64 <Vm::x87Handler(regs*)+0x903>
c001f58d:	57                   	push   edi
c001f58e:	57                   	push   edi
c001f58f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f592:	ff 36                	push   DWORD PTR [esi]
c001f594:	e8 1f fa ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001f599:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5a0:	89 c6                	mov    esi,eax
c001f5a2:	89 d7                	mov    edi,edx
c001f5a4:	e8 7b fc ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f5a9:	57                   	push   edi
c001f5aa:	56                   	push   esi
c001f5ab:	52                   	push   edx
c001f5ac:	50                   	push   eax
c001f5ad:	e8 95 fb ff ff       	call   c001f147 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5b2:	83 c4 20             	add    esp,0x20
c001f5b5:	e8 55 fd ff ff       	call   c001f30f <Vm::fpuPop()>
c001f5ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5be:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5c1:	e9 12 fe ff ff       	jmp    c001f3d8 <Vm::x87Handler(regs*)+0x77>
c001f5c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5ca:	8d 50 40             	lea    edx,[eax+0x40]
c001f5cd:	80 fa 07             	cmp    dl,0x7
c001f5d0:	77 29                	ja     c001f5fb <Vm::x87Handler(regs*)+0x29a>
c001f5d2:	83 ec 0c             	sub    esp,0xc
c001f5d5:	2d c0 00 00 00       	sub    eax,0xc0
c001f5da:	50                   	push   eax
c001f5db:	e8 44 fc ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f5e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5e7:	89 c6                	mov    esi,eax
c001f5e9:	89 d7                	mov    edi,edx
c001f5eb:	e8 34 fc ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f5f0:	57                   	push   edi
c001f5f1:	56                   	push   esi
c001f5f2:	52                   	push   edx
c001f5f3:	50                   	push   eax
c001f5f4:	e8 a1 fb ff ff       	call   c001f19a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5f9:	eb 2f                	jmp    c001f62a <Vm::x87Handler(regs*)+0x2c9>
c001f5fb:	8d 50 38             	lea    edx,[eax+0x38]
c001f5fe:	80 fa 07             	cmp    dl,0x7
c001f601:	77 2f                	ja     c001f632 <Vm::x87Handler(regs*)+0x2d1>
c001f603:	83 ec 0c             	sub    esp,0xc
c001f606:	2d c8 00 00 00       	sub    eax,0xc8
c001f60b:	50                   	push   eax
c001f60c:	e8 13 fc ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f611:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f618:	89 c6                	mov    esi,eax
c001f61a:	89 d7                	mov    edi,edx
c001f61c:	e8 03 fc ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f621:	57                   	push   edi
c001f622:	56                   	push   esi
c001f623:	52                   	push   edx
c001f624:	50                   	push   eax
c001f625:	e8 a9 fb ff ff       	call   c001f1d3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f62a:	83 c4 1c             	add    esp,0x1c
c001f62d:	e9 d8 fd ff ff       	jmp    c001f40a <Vm::x87Handler(regs*)+0xa9>
c001f632:	8d 50 30             	lea    edx,[eax+0x30]
c001f635:	80 fa 07             	cmp    dl,0x7
c001f638:	77 0d                	ja     c001f647 <Vm::x87Handler(regs*)+0x2e6>
c001f63a:	83 ec 0c             	sub    esp,0xc
c001f63d:	2d d0 00 00 00       	sub    eax,0xd0
c001f642:	e9 99 03 00 00       	jmp    c001f9e0 <Vm::x87Handler(regs*)+0x67f>
c001f647:	8d 50 28             	lea    edx,[eax+0x28]
c001f64a:	80 fa 07             	cmp    dl,0x7
c001f64d:	77 0d                	ja     c001f65c <Vm::x87Handler(regs*)+0x2fb>
c001f64f:	83 ec 0c             	sub    esp,0xc
c001f652:	2d d8 00 00 00       	sub    eax,0xd8
c001f657:	e9 c0 03 00 00       	jmp    c001fa1c <Vm::x87Handler(regs*)+0x6bb>
c001f65c:	8d 50 20             	lea    edx,[eax+0x20]
c001f65f:	80 fa 07             	cmp    dl,0x7
c001f662:	77 1b                	ja     c001f67f <Vm::x87Handler(regs*)+0x31e>
c001f664:	83 ec 0c             	sub    esp,0xc
c001f667:	2d e0 00 00 00       	sub    eax,0xe0
c001f66c:	50                   	push   eax
c001f66d:	e8 b2 fb ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f672:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f679:	89 c6                	mov    esi,eax
c001f67b:	89 d7                	mov    edi,edx
c001f67d:	eb 22                	jmp    c001f6a1 <Vm::x87Handler(regs*)+0x340>
c001f67f:	8d 50 18             	lea    edx,[eax+0x18]
c001f682:	80 fa 07             	cmp    dl,0x7
c001f685:	77 2d                	ja     c001f6b4 <Vm::x87Handler(regs*)+0x353>
c001f687:	83 ec 0c             	sub    esp,0xc
c001f68a:	6a 00                	push   0x0
c001f68c:	e8 93 fb ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f691:	89 c6                	mov    esi,eax
c001f693:	89 d7                	mov    edi,edx
c001f695:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f699:	2d e8 00 00 00       	sub    eax,0xe8
c001f69e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6a1:	e8 7e fb ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f6a6:	57                   	push   edi
c001f6a7:	56                   	push   esi
c001f6a8:	52                   	push   edx
c001f6a9:	50                   	push   eax
c001f6aa:	e8 15 fb ff ff       	call   c001f1c4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6af:	e9 76 ff ff ff       	jmp    c001f62a <Vm::x87Handler(regs*)+0x2c9>
c001f6b4:	8d 50 10             	lea    edx,[eax+0x10]
c001f6b7:	80 fa 07             	cmp    dl,0x7
c001f6ba:	77 1b                	ja     c001f6d7 <Vm::x87Handler(regs*)+0x376>
c001f6bc:	83 ec 0c             	sub    esp,0xc
c001f6bf:	2d f0 00 00 00       	sub    eax,0xf0
c001f6c4:	50                   	push   eax
c001f6c5:	e8 5a fb ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f6ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6d1:	89 c6                	mov    esi,eax
c001f6d3:	89 d7                	mov    edi,edx
c001f6d5:	eb 22                	jmp    c001f6f9 <Vm::x87Handler(regs*)+0x398>
c001f6d7:	3c f7                	cmp    al,0xf7
c001f6d9:	0f 86 d1 03 00 00    	jbe    c001fab0 <Vm::x87Handler(regs*)+0x74f>
c001f6df:	83 ec 0c             	sub    esp,0xc
c001f6e2:	6a 00                	push   0x0
c001f6e4:	e8 3b fb ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f6e9:	89 c6                	mov    esi,eax
c001f6eb:	89 d7                	mov    edi,edx
c001f6ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6f1:	2d f8 00 00 00       	sub    eax,0xf8
c001f6f6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6f9:	e8 26 fb ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f6fe:	57                   	push   edi
c001f6ff:	56                   	push   esi
c001f700:	52                   	push   edx
c001f701:	50                   	push   eax
c001f702:	e8 eb fa ff ff       	call   c001f1f2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f707:	83 c4 1c             	add    esp,0x1c
c001f70a:	52                   	push   edx
c001f70b:	50                   	push   eax
c001f70c:	6a 00                	push   0x0
c001f70e:	e9 51 02 00 00       	jmp    c001f964 <Vm::x87Handler(regs*)+0x603>
c001f713:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f717:	8d 50 40             	lea    edx,[eax+0x40]
c001f71a:	80 fa 07             	cmp    dl,0x7
c001f71d:	77 37                	ja     c001f756 <Vm::x87Handler(regs*)+0x3f5>
c001f71f:	83 ec 0c             	sub    esp,0xc
c001f722:	2d c0 00 00 00       	sub    eax,0xc0
c001f727:	50                   	push   eax
c001f728:	e8 f7 fa ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f72d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f734:	89 c6                	mov    esi,eax
c001f736:	89 d7                	mov    edi,edx
c001f738:	e8 e7 fa ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f73d:	57                   	push   edi
c001f73e:	56                   	push   esi
c001f73f:	52                   	push   edx
c001f740:	50                   	push   eax
c001f741:	e8 54 fa ff ff       	call   c001f19a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f746:	83 c4 1c             	add    esp,0x1c
c001f749:	52                   	push   edx
c001f74a:	50                   	push   eax
c001f74b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f74f:	2d c0 00 00 00       	sub    eax,0xc0
c001f754:	eb 3d                	jmp    c001f793 <Vm::x87Handler(regs*)+0x432>
c001f756:	8d 50 38             	lea    edx,[eax+0x38]
c001f759:	80 fa 07             	cmp    dl,0x7
c001f75c:	77 3b                	ja     c001f799 <Vm::x87Handler(regs*)+0x438>
c001f75e:	83 ec 0c             	sub    esp,0xc
c001f761:	2d c8 00 00 00       	sub    eax,0xc8
c001f766:	50                   	push   eax
c001f767:	e8 b8 fa ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f76c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f773:	89 c6                	mov    esi,eax
c001f775:	89 d7                	mov    edi,edx
c001f777:	e8 a8 fa ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f77c:	57                   	push   edi
c001f77d:	56                   	push   esi
c001f77e:	52                   	push   edx
c001f77f:	50                   	push   eax
c001f780:	e8 4e fa ff ff       	call   c001f1d3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f785:	83 c4 1c             	add    esp,0x1c
c001f788:	52                   	push   edx
c001f789:	50                   	push   eax
c001f78a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f78e:	2d c8 00 00 00       	sub    eax,0xc8
c001f793:	50                   	push   eax
c001f794:	e9 75 fc ff ff       	jmp    c001f40e <Vm::x87Handler(regs*)+0xad>
c001f799:	83 c0 18             	add    eax,0x18
c001f79c:	3c 07                	cmp    al,0x7
c001f79e:	0f 87 3b 04 00 00    	ja     c001fbdf <Vm::x87Handler(regs*)+0x87e>
c001f7a4:	83 ec 0c             	sub    esp,0xc
c001f7a7:	6a 00                	push   0x0
c001f7a9:	e8 76 fa ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f7ae:	89 c6                	mov    esi,eax
c001f7b0:	89 d7                	mov    edi,edx
c001f7b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b6:	2d e8 00 00 00       	sub    eax,0xe8
c001f7bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7be:	e8 61 fa ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f7c3:	57                   	push   edi
c001f7c4:	56                   	push   esi
c001f7c5:	52                   	push   edx
c001f7c6:	50                   	push   eax
c001f7c7:	e8 f8 f9 ff ff       	call   c001f1c4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7cc:	83 c4 1c             	add    esp,0x1c
c001f7cf:	52                   	push   edx
c001f7d0:	50                   	push   eax
c001f7d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d5:	2d e8 00 00 00       	sub    eax,0xe8
c001f7da:	eb b7                	jmp    c001f793 <Vm::x87Handler(regs*)+0x432>
c001f7dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7e0:	8d 50 40             	lea    edx,[eax+0x40]
c001f7e3:	80 fa 07             	cmp    dl,0x7
c001f7e6:	77 3a                	ja     c001f822 <Vm::x87Handler(regs*)+0x4c1>
c001f7e8:	83 ec 0c             	sub    esp,0xc
c001f7eb:	2d c0 00 00 00       	sub    eax,0xc0
c001f7f0:	50                   	push   eax
c001f7f1:	e8 2e fa ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f7f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7fd:	89 c6                	mov    esi,eax
c001f7ff:	89 d7                	mov    edi,edx
c001f801:	e8 1e fa ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f806:	57                   	push   edi
c001f807:	56                   	push   esi
c001f808:	52                   	push   edx
c001f809:	50                   	push   eax
c001f80a:	e8 8b f9 ff ff       	call   c001f19a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f80f:	83 c4 1c             	add    esp,0x1c
c001f812:	52                   	push   edx
c001f813:	50                   	push   eax
c001f814:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f818:	2d c0 00 00 00       	sub    eax,0xc0
c001f81d:	e9 9e 01 00 00       	jmp    c001f9c0 <Vm::x87Handler(regs*)+0x65f>
c001f822:	8d 50 20             	lea    edx,[eax+0x20]
c001f825:	80 fa 07             	cmp    dl,0x7
c001f828:	77 3a                	ja     c001f864 <Vm::x87Handler(regs*)+0x503>
c001f82a:	83 ec 0c             	sub    esp,0xc
c001f82d:	2d e0 00 00 00       	sub    eax,0xe0
c001f832:	50                   	push   eax
c001f833:	e8 ec f9 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f838:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f83f:	89 c6                	mov    esi,eax
c001f841:	89 d7                	mov    edi,edx
c001f843:	e8 dc f9 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f848:	57                   	push   edi
c001f849:	56                   	push   esi
c001f84a:	52                   	push   edx
c001f84b:	50                   	push   eax
c001f84c:	e8 73 f9 ff ff       	call   c001f1c4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f851:	83 c4 1c             	add    esp,0x1c
c001f854:	52                   	push   edx
c001f855:	50                   	push   eax
c001f856:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f85a:	2d e0 00 00 00       	sub    eax,0xe0
c001f85f:	e9 5c 01 00 00       	jmp    c001f9c0 <Vm::x87Handler(regs*)+0x65f>
c001f864:	8d 50 18             	lea    edx,[eax+0x18]
c001f867:	80 fa 07             	cmp    dl,0x7
c001f86a:	77 3b                	ja     c001f8a7 <Vm::x87Handler(regs*)+0x546>
c001f86c:	83 ec 0c             	sub    esp,0xc
c001f86f:	6a 00                	push   0x0
c001f871:	e8 ae f9 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f876:	89 c6                	mov    esi,eax
c001f878:	89 d7                	mov    edi,edx
c001f87a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f87e:	2d e8 00 00 00       	sub    eax,0xe8
c001f883:	89 04 24             	mov    DWORD PTR [esp],eax
c001f886:	e8 99 f9 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f88b:	57                   	push   edi
c001f88c:	56                   	push   esi
c001f88d:	52                   	push   edx
c001f88e:	50                   	push   eax
c001f88f:	e8 30 f9 ff ff       	call   c001f1c4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f894:	83 c4 1c             	add    esp,0x1c
c001f897:	52                   	push   edx
c001f898:	50                   	push   eax
c001f899:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f89d:	2d e8 00 00 00       	sub    eax,0xe8
c001f8a2:	e9 19 01 00 00       	jmp    c001f9c0 <Vm::x87Handler(regs*)+0x65f>
c001f8a7:	8d 50 38             	lea    edx,[eax+0x38]
c001f8aa:	80 fa 07             	cmp    dl,0x7
c001f8ad:	77 37                	ja     c001f8e6 <Vm::x87Handler(regs*)+0x585>
c001f8af:	83 ec 0c             	sub    esp,0xc
c001f8b2:	2d c8 00 00 00       	sub    eax,0xc8
c001f8b7:	50                   	push   eax
c001f8b8:	e8 67 f9 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f8bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8c4:	89 c6                	mov    esi,eax
c001f8c6:	89 d7                	mov    edi,edx
c001f8c8:	e8 57 f9 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f8cd:	57                   	push   edi
c001f8ce:	56                   	push   esi
c001f8cf:	52                   	push   edx
c001f8d0:	50                   	push   eax
c001f8d1:	e8 fd f8 ff ff       	call   c001f1d3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8d6:	83 c4 1c             	add    esp,0x1c
c001f8d9:	52                   	push   edx
c001f8da:	50                   	push   eax
c001f8db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8df:	2d c8 00 00 00       	sub    eax,0xc8
c001f8e4:	eb 7d                	jmp    c001f963 <Vm::x87Handler(regs*)+0x602>
c001f8e6:	3c f7                	cmp    al,0xf7
c001f8e8:	76 38                	jbe    c001f922 <Vm::x87Handler(regs*)+0x5c1>
c001f8ea:	83 ec 0c             	sub    esp,0xc
c001f8ed:	6a 00                	push   0x0
c001f8ef:	e8 30 f9 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f8f4:	89 c6                	mov    esi,eax
c001f8f6:	89 d7                	mov    edi,edx
c001f8f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8fc:	2d f8 00 00 00       	sub    eax,0xf8
c001f901:	89 04 24             	mov    DWORD PTR [esp],eax
c001f904:	e8 1b f9 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f909:	57                   	push   edi
c001f90a:	56                   	push   esi
c001f90b:	52                   	push   edx
c001f90c:	50                   	push   eax
c001f90d:	e8 e0 f8 ff ff       	call   c001f1f2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f912:	83 c4 1c             	add    esp,0x1c
c001f915:	52                   	push   edx
c001f916:	50                   	push   eax
c001f917:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f91b:	2d f8 00 00 00       	sub    eax,0xf8
c001f920:	eb 41                	jmp    c001f963 <Vm::x87Handler(regs*)+0x602>
c001f922:	8d 50 10             	lea    edx,[eax+0x10]
c001f925:	80 fa 07             	cmp    dl,0x7
c001f928:	0f 87 5a 01 00 00    	ja     c001fa88 <Vm::x87Handler(regs*)+0x727>
c001f92e:	83 ec 0c             	sub    esp,0xc
c001f931:	2d f0 00 00 00       	sub    eax,0xf0
c001f936:	50                   	push   eax
c001f937:	e8 e8 f8 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f93c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f943:	89 c6                	mov    esi,eax
c001f945:	89 d7                	mov    edi,edx
c001f947:	e8 d8 f8 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f94c:	57                   	push   edi
c001f94d:	56                   	push   esi
c001f94e:	52                   	push   edx
c001f94f:	50                   	push   eax
c001f950:	e8 9d f8 ff ff       	call   c001f1f2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f955:	83 c4 1c             	add    esp,0x1c
c001f958:	52                   	push   edx
c001f959:	50                   	push   eax
c001f95a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f95e:	2d f0 00 00 00       	sub    eax,0xf0
c001f963:	50                   	push   eax
c001f964:	e8 fe f8 ff ff       	call   c001f267 <Vm::fpuSetReg(int, unsigned long long)>
c001f969:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f96d:	e8 9d f9 ff ff       	call   c001f30f <Vm::fpuPop()>
c001f972:	e9 5e fa ff ff       	jmp    c001f3d5 <Vm::x87Handler(regs*)+0x74>
c001f977:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f97b:	8d 50 30             	lea    edx,[eax+0x30]
c001f97e:	80 fa 07             	cmp    dl,0x7
c001f981:	77 1d                	ja     c001f9a0 <Vm::x87Handler(regs*)+0x63f>
c001f983:	83 ec 0c             	sub    esp,0xc
c001f986:	6a 00                	push   0x0
c001f988:	e8 97 f8 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f98d:	83 c4 0c             	add    esp,0xc
c001f990:	52                   	push   edx
c001f991:	50                   	push   eax
c001f992:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f996:	2d d0 00 00 00       	sub    eax,0xd0
c001f99b:	e9 f3 fd ff ff       	jmp    c001f793 <Vm::x87Handler(regs*)+0x432>
c001f9a0:	8d 50 28             	lea    edx,[eax+0x28]
c001f9a3:	80 fa 07             	cmp    dl,0x7
c001f9a6:	77 28                	ja     c001f9d0 <Vm::x87Handler(regs*)+0x66f>
c001f9a8:	83 ec 0c             	sub    esp,0xc
c001f9ab:	6a 00                	push   0x0
c001f9ad:	e8 72 f8 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f9b2:	83 c4 0c             	add    esp,0xc
c001f9b5:	52                   	push   edx
c001f9b6:	50                   	push   eax
c001f9b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9bb:	2d d8 00 00 00       	sub    eax,0xd8
c001f9c0:	50                   	push   eax
c001f9c1:	e8 a1 f8 ff ff       	call   c001f267 <Vm::fpuSetReg(int, unsigned long long)>
c001f9c6:	e8 44 f9 ff ff       	call   c001f30f <Vm::fpuPop()>
c001f9cb:	e9 01 fa ff ff       	jmp    c001f3d1 <Vm::x87Handler(regs*)+0x70>
c001f9d0:	8d 50 20             	lea    edx,[eax+0x20]
c001f9d3:	80 fa 07             	cmp    dl,0x7
c001f9d6:	77 30                	ja     c001fa08 <Vm::x87Handler(regs*)+0x6a7>
c001f9d8:	83 ec 0c             	sub    esp,0xc
c001f9db:	2d e0 00 00 00       	sub    eax,0xe0
c001f9e0:	50                   	push   eax
c001f9e1:	e8 3e f8 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f9e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9ed:	89 c6                	mov    esi,eax
c001f9ef:	89 d7                	mov    edi,edx
c001f9f1:	e8 2e f8 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001f9f6:	57                   	push   edi
c001f9f7:	56                   	push   esi
c001f9f8:	52                   	push   edx
c001f9f9:	50                   	push   eax
c001f9fa:	e8 48 f7 ff ff       	call   c001f147 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9ff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa03:	e9 54 02 00 00       	jmp    c001fc5c <Vm::x87Handler(regs*)+0x8fb>
c001fa08:	8d 50 18             	lea    edx,[eax+0x18]
c001fa0b:	80 fa 07             	cmp    dl,0x7
c001fa0e:	0f 87 43 fb ff ff    	ja     c001f557 <Vm::x87Handler(regs*)+0x1f6>
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	2d e8 00 00 00       	sub    eax,0xe8
c001fa1c:	50                   	push   eax
c001fa1d:	e8 02 f8 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fa22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa29:	89 c6                	mov    esi,eax
c001fa2b:	89 d7                	mov    edi,edx
c001fa2d:	e8 f2 f7 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fa32:	57                   	push   edi
c001fa33:	56                   	push   esi
c001fa34:	52                   	push   edx
c001fa35:	50                   	push   eax
c001fa36:	e8 0c f7 ff ff       	call   c001f147 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa3b:	83 c4 20             	add    esp,0x20
c001fa3e:	e8 cc f8 ff ff       	call   c001f30f <Vm::fpuPop()>
c001fa43:	eb 62                	jmp    c001faa7 <Vm::x87Handler(regs*)+0x746>
c001fa45:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa49:	0f 85 0f 01 00 00    	jne    c001fb5e <Vm::x87Handler(regs*)+0x7fd>
c001fa4f:	83 ec 0c             	sub    esp,0xc
c001fa52:	6a 01                	push   0x1
c001fa54:	e8 cb f7 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fa59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa60:	89 c6                	mov    esi,eax
c001fa62:	89 d7                	mov    edi,edx
c001fa64:	e8 bb f7 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fa69:	57                   	push   edi
c001fa6a:	56                   	push   esi
c001fa6b:	52                   	push   edx
c001fa6c:	50                   	push   eax
c001fa6d:	e8 d5 f6 ff ff       	call   c001f147 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa72:	83 c4 20             	add    esp,0x20
c001fa75:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa79:	e8 91 f8 ff ff       	call   c001f30f <Vm::fpuPop()>
c001fa7e:	e8 8c f8 ff ff       	call   c001f30f <Vm::fpuPop()>
c001fa83:	e9 50 f9 ff ff       	jmp    c001f3d8 <Vm::x87Handler(regs*)+0x77>
c001fa88:	3c d9                	cmp    al,0xd9
c001fa8a:	0f 85 b5 02 00 00    	jne    c001fd45 <Vm::x87Handler(regs*)+0x9e4>
c001fa90:	eb bd                	jmp    c001fa4f <Vm::x87Handler(regs*)+0x6ee>
c001fa92:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fa96:	0f 85 ea 02 00 00    	jne    c001fd86 <Vm::x87Handler(regs*)+0xa25>
c001fa9c:	0f b7 05 a0 0e 03 c0 	movzx  eax,WORD PTR ds:0xc0030ea0
c001faa3:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001faa7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faab:	e9 28 f9 ff ff       	jmp    c001f3d8 <Vm::x87Handler(regs*)+0x77>
c001fab0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fab4:	84 d2                	test   dl,dl
c001fab6:	75 0f                	jne    c001fac7 <Vm::x87Handler(regs*)+0x766>
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	ff 36                	push   DWORD PTR [esi]
c001fabd:	e8 b1 f4 ff ff       	call   c001ef73 <Vm::fpu32ToInternal(unsigned int)>
c001fac2:	e9 2c 01 00 00       	jmp    c001fbf3 <Vm::x87Handler(regs*)+0x892>
c001fac7:	80 fa 01             	cmp    dl,0x1
c001faca:	75 0f                	jne    c001fadb <Vm::x87Handler(regs*)+0x77a>
c001facc:	83 ec 0c             	sub    esp,0xc
c001facf:	ff 36                	push   DWORD PTR [esi]
c001fad1:	e8 9d f4 ff ff       	call   c001ef73 <Vm::fpu32ToInternal(unsigned int)>
c001fad6:	e9 81 02 00 00       	jmp    c001fd5c <Vm::x87Handler(regs*)+0x9fb>
c001fadb:	80 fa 04             	cmp    dl,0x4
c001fade:	75 0f                	jne    c001faef <Vm::x87Handler(regs*)+0x78e>
c001fae0:	83 ec 0c             	sub    esp,0xc
c001fae3:	ff 36                	push   DWORD PTR [esi]
c001fae5:	e8 89 f4 ff ff       	call   c001ef73 <Vm::fpu32ToInternal(unsigned int)>
c001faea:	e9 86 01 00 00       	jmp    c001fc75 <Vm::x87Handler(regs*)+0x914>
c001faef:	80 fa 05             	cmp    dl,0x5
c001faf2:	75 1b                	jne    c001fb0f <Vm::x87Handler(regs*)+0x7ae>
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	6a 00                	push   0x0
c001faf9:	e8 26 f7 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fafe:	89 c7                	mov    edi,eax
c001fb00:	89 d5                	mov    ebp,edx
c001fb02:	58                   	pop    eax
c001fb03:	ff 36                	push   DWORD PTR [esi]
c001fb05:	e8 69 f4 ff ff       	call   c001ef73 <Vm::fpu32ToInternal(unsigned int)>
c001fb0a:	e9 a3 01 00 00       	jmp    c001fcb2 <Vm::x87Handler(regs*)+0x951>
c001fb0f:	80 fa 06             	cmp    dl,0x6
c001fb12:	75 0f                	jne    c001fb23 <Vm::x87Handler(regs*)+0x7c2>
c001fb14:	83 ec 0c             	sub    esp,0xc
c001fb17:	ff 36                	push   DWORD PTR [esi]
c001fb19:	e8 55 f4 ff ff       	call   c001ef73 <Vm::fpu32ToInternal(unsigned int)>
c001fb1e:	e9 ae 01 00 00       	jmp    c001fcd1 <Vm::x87Handler(regs*)+0x970>
c001fb23:	31 c0                	xor    eax,eax
c001fb25:	80 fa 07             	cmp    dl,0x7
c001fb28:	0f 85 94 02 00 00    	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001fb2e:	83 ec 0c             	sub    esp,0xc
c001fb31:	6a 00                	push   0x0
c001fb33:	e8 ec f6 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fb38:	89 c7                	mov    edi,eax
c001fb3a:	89 d5                	mov    ebp,edx
c001fb3c:	58                   	pop    eax
c001fb3d:	ff 36                	push   DWORD PTR [esi]
c001fb3f:	e8 2f f4 ff ff       	call   c001ef73 <Vm::fpu32ToInternal(unsigned int)>
c001fb44:	e9 cb 01 00 00       	jmp    c001fd14 <Vm::x87Handler(regs*)+0x9b3>
c001fb49:	80 fa 03             	cmp    dl,0x3
c001fb4c:	0f 85 d3 01 00 00    	jne    c001fd25 <Vm::x87Handler(regs*)+0x9c4>
c001fb52:	e8 b8 f7 ff ff       	call   c001f30f <Vm::fpuPop()>
c001fb57:	51                   	push   ecx
c001fb58:	51                   	push   ecx
c001fb59:	e9 de 01 00 00       	jmp    c001fd3c <Vm::x87Handler(regs*)+0x9db>
c001fb5e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb62:	80 fa 01             	cmp    dl,0x1
c001fb65:	75 09                	jne    c001fb70 <Vm::x87Handler(regs*)+0x80f>
c001fb67:	57                   	push   edi
c001fb68:	57                   	push   edi
c001fb69:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb6b:	e9 e3 01 00 00       	jmp    c001fd53 <Vm::x87Handler(regs*)+0x9f2>
c001fb70:	80 fa 04             	cmp    dl,0x4
c001fb73:	75 12                	jne    c001fb87 <Vm::x87Handler(regs*)+0x826>
c001fb75:	31 d2                	xor    edx,edx
c001fb77:	51                   	push   ecx
c001fb78:	51                   	push   ecx
c001fb79:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb7b:	52                   	push   edx
c001fb7c:	50                   	push   eax
c001fb7d:	e8 d0 f4 ff ff       	call   c001f052 <Vm::fpuLongToFloat(long long)>
c001fb82:	e9 ee 00 00 00       	jmp    c001fc75 <Vm::x87Handler(regs*)+0x914>
c001fb87:	31 c0                	xor    eax,eax
c001fb89:	80 fa 07             	cmp    dl,0x7
c001fb8c:	0f 85 30 02 00 00    	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001fb92:	83 ec 0c             	sub    esp,0xc
c001fb95:	6a 00                	push   0x0
c001fb97:	e8 88 f6 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fb9c:	89 c7                	mov    edi,eax
c001fb9e:	89 d5                	mov    ebp,edx
c001fba0:	58                   	pop    eax
c001fba1:	8b 06                	mov    eax,DWORD PTR [esi]
c001fba3:	5a                   	pop    edx
c001fba4:	31 d2                	xor    edx,edx
c001fba6:	52                   	push   edx
c001fba7:	50                   	push   eax
c001fba8:	e8 a5 f4 ff ff       	call   c001f052 <Vm::fpuLongToFloat(long long)>
c001fbad:	e9 62 01 00 00       	jmp    c001fd14 <Vm::x87Handler(regs*)+0x9b3>
c001fbb2:	84 d2                	test   dl,dl
c001fbb4:	75 0d                	jne    c001fbc3 <Vm::x87Handler(regs*)+0x862>
c001fbb6:	31 d2                	xor    edx,edx
c001fbb8:	55                   	push   ebp
c001fbb9:	55                   	push   ebp
c001fbba:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbbc:	52                   	push   edx
c001fbbd:	50                   	push   eax
c001fbbe:	e9 d3 01 00 00       	jmp    c001fd96 <Vm::x87Handler(regs*)+0xa35>
c001fbc3:	31 c0                	xor    eax,eax
c001fbc5:	80 fa 02             	cmp    dl,0x2
c001fbc8:	0f 85 f4 01 00 00    	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001fbce:	83 ec 0c             	sub    esp,0xc
c001fbd1:	6a 00                	push   0x0
c001fbd3:	e8 4c f6 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fbd8:	59                   	pop    ecx
c001fbd9:	5f                   	pop    edi
c001fbda:	e9 6a f9 ff ff       	jmp    c001f549 <Vm::x87Handler(regs*)+0x1e8>
c001fbdf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbe3:	84 d2                	test   dl,dl
c001fbe5:	75 2a                	jne    c001fc11 <Vm::x87Handler(regs*)+0x8b0>
c001fbe7:	50                   	push   eax
c001fbe8:	50                   	push   eax
c001fbe9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbec:	ff 36                	push   DWORD PTR [esi]
c001fbee:	e8 c5 f3 ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001fbf3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbfa:	89 c6                	mov    esi,eax
c001fbfc:	89 d7                	mov    edi,edx
c001fbfe:	e8 21 f6 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fc03:	57                   	push   edi
c001fc04:	56                   	push   esi
c001fc05:	52                   	push   edx
c001fc06:	50                   	push   eax
c001fc07:	e8 8e f5 ff ff       	call   c001f19a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc0c:	e9 64 01 00 00       	jmp    c001fd75 <Vm::x87Handler(regs*)+0xa14>
c001fc11:	80 fa 01             	cmp    dl,0x1
c001fc14:	75 11                	jne    c001fc27 <Vm::x87Handler(regs*)+0x8c6>
c001fc16:	50                   	push   eax
c001fc17:	50                   	push   eax
c001fc18:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc1b:	ff 36                	push   DWORD PTR [esi]
c001fc1d:	e8 96 f3 ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001fc22:	e9 35 01 00 00       	jmp    c001fd5c <Vm::x87Handler(regs*)+0x9fb>
c001fc27:	80 fa 02             	cmp    dl,0x2
c001fc2a:	0f 85 54 f9 ff ff    	jne    c001f584 <Vm::x87Handler(regs*)+0x223>
c001fc30:	55                   	push   ebp
c001fc31:	55                   	push   ebp
c001fc32:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc35:	ff 36                	push   DWORD PTR [esi]
c001fc37:	e8 7c f3 ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001fc3c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc43:	89 c6                	mov    esi,eax
c001fc45:	89 d7                	mov    edi,edx
c001fc47:	e8 d8 f5 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fc4c:	57                   	push   edi
c001fc4d:	56                   	push   esi
c001fc4e:	52                   	push   edx
c001fc4f:	50                   	push   eax
c001fc50:	e8 f2 f4 ff ff       	call   c001f147 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc59:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc5c:	83 c4 20             	add    esp,0x20
c001fc5f:	e9 74 f7 ff ff       	jmp    c001f3d8 <Vm::x87Handler(regs*)+0x77>
c001fc64:	80 fa 04             	cmp    dl,0x4
c001fc67:	75 2a                	jne    c001fc93 <Vm::x87Handler(regs*)+0x932>
c001fc69:	51                   	push   ecx
c001fc6a:	51                   	push   ecx
c001fc6b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc6e:	ff 36                	push   DWORD PTR [esi]
c001fc70:	e8 43 f3 ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001fc75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc7c:	89 c6                	mov    esi,eax
c001fc7e:	89 d7                	mov    edi,edx
c001fc80:	e8 9f f5 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fc85:	57                   	push   edi
c001fc86:	56                   	push   esi
c001fc87:	52                   	push   edx
c001fc88:	50                   	push   eax
c001fc89:	e8 36 f5 ff ff       	call   c001f1c4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc8e:	e9 e2 00 00 00       	jmp    c001fd75 <Vm::x87Handler(regs*)+0xa14>
c001fc93:	80 fa 05             	cmp    dl,0x5
c001fc96:	75 28                	jne    c001fcc0 <Vm::x87Handler(regs*)+0x95f>
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	6a 00                	push   0x0
c001fc9d:	e8 82 f5 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fca2:	89 c7                	mov    edi,eax
c001fca4:	89 d5                	mov    ebp,edx
c001fca6:	58                   	pop    eax
c001fca7:	5a                   	pop    edx
c001fca8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcab:	ff 36                	push   DWORD PTR [esi]
c001fcad:	e8 06 f3 ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001fcb2:	83 c4 10             	add    esp,0x10
c001fcb5:	55                   	push   ebp
c001fcb6:	57                   	push   edi
c001fcb7:	52                   	push   edx
c001fcb8:	50                   	push   eax
c001fcb9:	e8 06 f5 ff ff       	call   c001f1c4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcbe:	eb 60                	jmp    c001fd20 <Vm::x87Handler(regs*)+0x9bf>
c001fcc0:	80 fa 06             	cmp    dl,0x6
c001fcc3:	75 2a                	jne    c001fcef <Vm::x87Handler(regs*)+0x98e>
c001fcc5:	51                   	push   ecx
c001fcc6:	51                   	push   ecx
c001fcc7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcca:	ff 36                	push   DWORD PTR [esi]
c001fccc:	e8 e7 f2 ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001fcd1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcd8:	89 c6                	mov    esi,eax
c001fcda:	89 d7                	mov    edi,edx
c001fcdc:	e8 43 f5 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fce1:	57                   	push   edi
c001fce2:	56                   	push   esi
c001fce3:	52                   	push   edx
c001fce4:	50                   	push   eax
c001fce5:	e8 08 f5 ff ff       	call   c001f1f2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcea:	e9 86 00 00 00       	jmp    c001fd75 <Vm::x87Handler(regs*)+0xa14>
c001fcef:	31 c0                	xor    eax,eax
c001fcf1:	80 fa 07             	cmp    dl,0x7
c001fcf4:	0f 85 c8 00 00 00    	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001fcfa:	83 ec 0c             	sub    esp,0xc
c001fcfd:	6a 00                	push   0x0
c001fcff:	e8 20 f5 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fd04:	89 c7                	mov    edi,eax
c001fd06:	89 d5                	mov    ebp,edx
c001fd08:	58                   	pop    eax
c001fd09:	5a                   	pop    edx
c001fd0a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd0d:	ff 36                	push   DWORD PTR [esi]
c001fd0f:	e8 a4 f2 ff ff       	call   c001efb8 <Vm::fpu64ToInternal(unsigned long long)>
c001fd14:	83 c4 10             	add    esp,0x10
c001fd17:	55                   	push   ebp
c001fd18:	57                   	push   edi
c001fd19:	52                   	push   edx
c001fd1a:	50                   	push   eax
c001fd1b:	e8 d2 f4 ff ff       	call   c001f1f2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd20:	83 c4 0c             	add    esp,0xc
c001fd23:	eb 53                	jmp    c001fd78 <Vm::x87Handler(regs*)+0xa17>
c001fd25:	31 c0                	xor    eax,eax
c001fd27:	80 fa 02             	cmp    dl,0x2
c001fd2a:	0f 85 92 00 00 00    	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001fd30:	83 ec 0c             	sub    esp,0xc
c001fd33:	6a 00                	push   0x0
c001fd35:	e8 ea f4 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fd3a:	59                   	pop    ecx
c001fd3b:	5f                   	pop    edi
c001fd3c:	52                   	push   edx
c001fd3d:	50                   	push   eax
c001fd3e:	e8 27 f2 ff ff       	call   c001ef6a <Vm::fpuInternalTo64(unsigned long long)>
c001fd43:	eb 70                	jmp    c001fdb5 <Vm::x87Handler(regs*)+0xa54>
c001fd45:	31 c0                	xor    eax,eax
c001fd47:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd4c:	75 74                	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001fd4e:	50                   	push   eax
c001fd4f:	50                   	push   eax
c001fd50:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd53:	31 d2                	xor    edx,edx
c001fd55:	52                   	push   edx
c001fd56:	50                   	push   eax
c001fd57:	e8 f6 f2 ff ff       	call   c001f052 <Vm::fpuLongToFloat(long long)>
c001fd5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd63:	89 c6                	mov    esi,eax
c001fd65:	89 d7                	mov    edi,edx
c001fd67:	e8 b8 f4 ff ff       	call   c001f224 <Vm::fpuGetReg(int)>
c001fd6c:	57                   	push   edi
c001fd6d:	56                   	push   esi
c001fd6e:	52                   	push   edx
c001fd6f:	50                   	push   eax
c001fd70:	e8 5e f4 ff ff       	call   c001f1d3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd75:	83 c4 1c             	add    esp,0x1c
c001fd78:	52                   	push   edx
c001fd79:	50                   	push   eax
c001fd7a:	6a 00                	push   0x0
c001fd7c:	e8 e6 f4 ff ff       	call   c001f267 <Vm::fpuSetReg(int, unsigned long long)>
c001fd81:	e9 f2 f7 ff ff       	jmp    c001f578 <Vm::x87Handler(regs*)+0x217>
c001fd86:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd8a:	80 fa 05             	cmp    dl,0x5
c001fd8d:	75 11                	jne    c001fda0 <Vm::x87Handler(regs*)+0xa3f>
c001fd8f:	55                   	push   ebp
c001fd90:	55                   	push   ebp
c001fd91:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd94:	ff 36                	push   DWORD PTR [esi]
c001fd96:	e8 81 f2 ff ff       	call   c001f01c <Vm::fpuULongToFloat(unsigned long long)>
c001fd9b:	e9 cf f7 ff ff       	jmp    c001f56f <Vm::x87Handler(regs*)+0x20e>
c001fda0:	31 c0                	xor    eax,eax
c001fda2:	80 fa 07             	cmp    dl,0x7
c001fda5:	75 1b                	jne    c001fdc2 <Vm::x87Handler(regs*)+0xa61>
c001fda7:	e8 63 f5 ff ff       	call   c001f30f <Vm::fpuPop()>
c001fdac:	51                   	push   ecx
c001fdad:	51                   	push   ecx
c001fdae:	52                   	push   edx
c001fdaf:	50                   	push   eax
c001fdb0:	e8 0c f2 ff ff       	call   c001efc1 <Vm::fpuFloatToLong(unsigned long long)>
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	89 06                	mov    DWORD PTR [esi],eax
c001fdba:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fdbd:	e9 f8 f7 ff ff       	jmp    c001f5ba <Vm::x87Handler(regs*)+0x259>
c001fdc2:	83 c4 1c             	add    esp,0x1c
c001fdc5:	5b                   	pop    ebx
c001fdc6:	5e                   	pop    esi
c001fdc7:	5f                   	pop    edi
c001fdc8:	5d                   	pop    ebp
c001fdc9:	c3                   	ret    

c001fdca <__static_initialization_and_destruction_0(int, int)>:
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdd2:	75 1a                	jne    c001fdee <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdd4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fddc:	75 10                	jne    c001fdee <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	68 a0 0e 03 c0       	push   0xc0030ea0
c001fde6:	e8 ff 8c 00 00       	call   c0028aea <Vm::_FPUState::_FPUState()>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	90                   	nop
c001fdef:	83 c4 0c             	add    esp,0xc
c001fdf2:	c3                   	ret    

c001fdf3 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fdf3:	83 ec 0c             	sub    esp,0xc
c001fdf6:	83 ec 08             	sub    esp,0x8
c001fdf9:	68 ff ff 00 00       	push   0xffff
c001fdfe:	6a 01                	push   0x1
c001fe00:	e8 c5 ff ff ff       	call   c001fdca <__static_initialization_and_destruction_0(int, int)>
c001fe05:	83 c4 10             	add    esp,0x10
c001fe08:	83 c4 0c             	add    esp,0xc
c001fe0b:	c3                   	ret    

c001fe0c <FAT::getName()>:
c001fe0c:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c001fe11:	c3                   	ret    

c001fe12 <FAT::tell(void*, unsigned long long*)>:
c001fe12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe17:	75 06                	jne    c001fe1f <FAT::tell(void*, unsigned long long*)+0xd>
c001fe19:	b8 04 00 00 00       	mov    eax,0x4
c001fe1e:	c3                   	ret    
c001fe1f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe24:	75 06                	jne    c001fe2c <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe26:	b8 04 00 00 00       	mov    eax,0x4
c001fe2b:	c3                   	ret    
c001fe2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe30:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe33:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe3a:	89 01                	mov    DWORD PTR [ecx],eax
c001fe3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe3f:	b8 00 00 00 00       	mov    eax,0x0
c001fe44:	c3                   	ret    
c001fe45:	90                   	nop

c001fe46 <FAT::stat(void*, unsigned long long*)>:
c001fe46:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe4b:	75 06                	jne    c001fe53 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe4d:	b8 04 00 00 00       	mov    eax,0x4
c001fe52:	c3                   	ret    
c001fe53:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe58:	75 06                	jne    c001fe60 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe5a:	b8 04 00 00 00       	mov    eax,0x4
c001fe5f:	c3                   	ret    
c001fe60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe64:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe6e:	89 01                	mov    DWORD PTR [ecx],eax
c001fe70:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe73:	b8 00 00 00 00       	mov    eax,0x0
c001fe78:	c3                   	ret    
c001fe79:	90                   	nop

c001fe7a <FAT::~FAT()>:
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	ba dc bd 02 c0       	mov    edx,0xc002bddc
c001fe82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe86:	89 10                	mov    DWORD PTR [eax],edx
c001fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8c:	83 ec 0c             	sub    esp,0xc
c001fe8f:	50                   	push   eax
c001fe90:	e8 45 2b ff ff       	call   c00129da <Filesystem::~Filesystem()>
c001fe95:	83 c4 10             	add    esp,0x10
c001fe98:	90                   	nop
c001fe99:	83 c4 0c             	add    esp,0xc
c001fe9c:	c3                   	ret    
c001fe9d:	90                   	nop

c001fe9e <FAT::~FAT()>:
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	83 ec 0c             	sub    esp,0xc
c001fea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea8:	e8 cd ff ff ff       	call   c001fe7a <FAT::~FAT()>
c001fead:	83 c4 10             	add    esp,0x10
c001feb0:	83 ec 08             	sub    esp,0x8
c001feb3:	6a 08                	push   0x8
c001feb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb9:	e8 15 27 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c001febe:	83 c4 10             	add    esp,0x10
c001fec1:	83 c4 0c             	add    esp,0xc
c001fec4:	c3                   	ret    
c001fec5:	90                   	nop

c001fec6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fec6:	83 ec 1c             	sub    esp,0x1c
c001fec9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fed0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fed5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fed9:	8b 04 85 20 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0e0]
c001fee0:	83 f8 ff             	cmp    eax,0xffffffff
c001fee3:	75 34                	jne    c001ff19 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fee5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fee9:	88 c2                	mov    dl,al
c001feeb:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001fef0:	01 d0                	add    eax,edx
c001fef2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fef6:	8b 15 00 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f00
c001fefc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff00:	89 14 85 20 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0e0],edx
c001ff07:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001ff0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff10:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c001ff17:	eb 17                	jmp    c001ff30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff19:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff1d:	88 c2                	mov    dl,al
c001ff1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff23:	8b 04 85 20 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0e0]
c001ff2a:	01 d0                	add    eax,edx
c001ff2c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff30:	83 ec 04             	sub    esp,0x4
c001ff33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff3f:	50                   	push   eax
c001ff40:	e8 b9 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff45:	83 c4 10             	add    esp,0x10
c001ff48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff51:	75 07                	jne    c001ff5a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff53:	b8 00 00 00 00       	mov    eax,0x0
c001ff58:	eb 05                	jmp    c001ff5f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff5a:	b8 01 00 00 00       	mov    eax,0x1
c001ff5f:	83 c4 1c             	add    esp,0x1c
c001ff62:	c3                   	ret    
c001ff63:	90                   	nop

c001ff64 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff64:	57                   	push   edi
c001ff65:	83 ec 58             	sub    esp,0x58
c001ff68:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff70:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff74:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff79:	b8 00 00 00 00       	mov    eax,0x0
c001ff7e:	fc                   	cld    
c001ff7f:	89 d7                	mov    edi,edx
c001ff81:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff83:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff87:	8b 04 85 20 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0e0]
c001ff8e:	83 f8 ff             	cmp    eax,0xffffffff
c001ff91:	75 34                	jne    c001ffc7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ff93:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff97:	88 c2                	mov    dl,al
c001ff99:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001ff9e:	01 d0                	add    eax,edx
c001ffa0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffa4:	8b 15 00 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f00
c001ffaa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffae:	89 14 85 20 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0e0],edx
c001ffb5:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c001ffba:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffbe:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c001ffc5:	eb 17                	jmp    c001ffde <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ffc7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffcb:	88 c2                	mov    dl,al
c001ffcd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffd1:	8b 04 85 20 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0e0]
c001ffd8:	01 d0                	add    eax,edx
c001ffda:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffde:	83 ec 08             	sub    esp,0x8
c001ffe1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ffe5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffe9:	50                   	push   eax
c001ffea:	e8 5d 09 fe ff       	call   c000094c <strcat>
c001ffef:	83 c4 10             	add    esp,0x10
c001fff2:	83 ec 0c             	sub    esp,0xc
c001fff5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fff9:	50                   	push   eax
c001fffa:	e8 ed 6e fe ff       	call   c0006eec <f_setlabel>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020006:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002000b:	75 07                	jne    c0020014 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002000d:	b8 00 00 00 00       	mov    eax,0x0
c0020012:	eb 05                	jmp    c0020019 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020014:	b8 01 00 00 00       	mov    eax,0x1
c0020019:	83 c4 58             	add    esp,0x58
c002001c:	5f                   	pop    edi
c002001d:	c3                   	ret    

c002001e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002001e:	83 ec 2c             	sub    esp,0x2c
c0020021:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020029:	83 ec 08             	sub    esp,0x8
c002002c:	68 b4 bd 02 c0       	push   0xc002bdb4
c0020031:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020035:	e8 5e 08 fe ff       	call   c0000898 <strcmp>
c002003a:	83 c4 10             	add    esp,0x10
c002003d:	85 c0                	test   eax,eax
c002003f:	0f 94 c0             	sete   al
c0020042:	84 c0                	test   al,al
c0020044:	74 0d                	je     c0020053 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020046:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002004e:	e9 a6 00 00 00       	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020053:	83 ec 08             	sub    esp,0x8
c0020056:	68 a6 bd 02 c0       	push   0xc002bda6
c002005b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002005f:	e8 34 08 fe ff       	call   c0000898 <strcmp>
c0020064:	83 c4 10             	add    esp,0x10
c0020067:	85 c0                	test   eax,eax
c0020069:	0f 94 c0             	sete   al
c002006c:	84 c0                	test   al,al
c002006e:	74 0a                	je     c002007a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020070:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020078:	eb 7f                	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002007a:	83 ec 08             	sub    esp,0x8
c002007d:	68 ac bd 02 c0       	push   0xc002bdac
c0020082:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020086:	e8 0d 08 fe ff       	call   c0000898 <strcmp>
c002008b:	83 c4 10             	add    esp,0x10
c002008e:	85 c0                	test   eax,eax
c0020090:	0f 94 c0             	sete   al
c0020093:	84 c0                	test   al,al
c0020095:	74 0a                	je     c00200a1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020097:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002009f:	eb 58                	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200a1:	83 ec 08             	sub    esp,0x8
c00200a4:	68 4c 92 02 c0       	push   0xc002924c
c00200a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200ad:	e8 e6 07 fe ff       	call   c0000898 <strcmp>
c00200b2:	83 c4 10             	add    esp,0x10
c00200b5:	85 c0                	test   eax,eax
c00200b7:	0f 94 c0             	sete   al
c00200ba:	84 c0                	test   al,al
c00200bc:	74 0a                	je     c00200c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200be:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200c6:	eb 31                	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200c8:	83 ec 08             	sub    esp,0x8
c00200cb:	68 b2 bd 02 c0       	push   0xc002bdb2
c00200d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200d4:	e8 bf 07 fe ff       	call   c0000898 <strcmp>
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	85 c0                	test   eax,eax
c00200de:	0f 94 c0             	sete   al
c00200e1:	84 c0                	test   al,al
c00200e3:	74 0a                	je     c00200ef <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00200e5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00200ed:	eb 0a                	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ef:	b8 08 00 00 00       	mov    eax,0x8
c00200f4:	e9 df 00 00 00       	jmp    c00201d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00200f9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020100:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020105:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020109:	8b 04 85 20 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0e0]
c0020110:	83 f8 ff             	cmp    eax,0xffffffff
c0020113:	75 34                	jne    c0020149 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020115:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020119:	88 c2                	mov    dl,al
c002011b:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c0020120:	01 d0                	add    eax,edx
c0020122:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020126:	8b 15 00 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f00
c002012c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020130:	89 14 85 20 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0e0],edx
c0020137:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c002013c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020140:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c0020147:	eb 17                	jmp    c0020160 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020149:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002014d:	88 c2                	mov    dl,al
c002014f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020153:	8b 04 85 20 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0e0]
c002015a:	01 d0                	add    eax,edx
c002015c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020164:	88 04 24             	mov    BYTE PTR [esp],al
c0020167:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002016b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002016f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020177:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002017c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	68 00 20 00 00       	push   0x2000
c002018c:	e8 08 f4 fe ff       	call   c000f599 <malloc>
c0020191:	83 c4 10             	add    esp,0x10
c0020194:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020198:	68 00 20 00 00       	push   0x2000
c002019d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201a5:	50                   	push   eax
c00201a6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201aa:	50                   	push   eax
c00201ab:	e8 87 71 fe ff       	call   c0007337 <f_mkfs>
c00201b0:	83 c4 10             	add    esp,0x10
c00201b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201bc:	75 07                	jne    c00201c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201be:	b8 00 00 00 00       	mov    eax,0x0
c00201c3:	eb 13                	jmp    c00201d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201c5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201ca:	75 07                	jne    c00201d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00201cc:	b8 09 00 00 00       	mov    eax,0x9
c00201d1:	eb 05                	jmp    c00201d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201d3:	b8 01 00 00 00       	mov    eax,0x1
c00201d8:	83 c4 2c             	add    esp,0x2c
c00201db:	c3                   	ret    

c00201dc <FAT::tryMount(LogicalDisk*, int)>:
c00201dc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00201e2:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c00201e7:	83 f8 14             	cmp    eax,0x14
c00201ea:	75 17                	jne    c0020203 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00201ec:	83 ec 0c             	sub    esp,0xc
c00201ef:	68 b8 bd 02 c0       	push   0xc002bdb8
c00201f4:	e8 1e 9c ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	b0 00                	mov    al,0x0
c00201fe:	e9 d7 01 00 00       	jmp    c00203da <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020203:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002020a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020210:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020216:	3d 00 02 00 00       	cmp    eax,0x200
c002021b:	74 07                	je     c0020224 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002021d:	b0 00                	mov    al,0x0
c002021f:	e9 b6 01 00 00       	jmp    c00203da <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020224:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002022c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020233:	8b 04 85 20 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0e0]
c002023a:	83 f8 ff             	cmp    eax,0xffffffff
c002023d:	74 07                	je     c0020246 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002023f:	b0 01                	mov    al,0x1
c0020241:	e9 94 01 00 00       	jmp    c00203da <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020246:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020250:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020258:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002025f:	88 c2                	mov    dl,al
c0020261:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c0020266:	01 d0                	add    eax,edx
c0020268:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002026f:	8b 15 00 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f00
c0020275:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002027c:	89 14 85 20 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0e0],edx
c0020283:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c0020288:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002028f:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c0020296:	83 ec 0c             	sub    esp,0xc
c0020299:	68 54 02 00 00       	push   0x254
c002029e:	e8 f6 f2 fe ff       	call   c000f599 <malloc>
c00202a3:	83 c4 10             	add    esp,0x10
c00202a6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202ad:	83 ec 04             	sub    esp,0x4
c00202b0:	6a 00                	push   0x0
c00202b2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202b9:	50                   	push   eax
c00202ba:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202c1:	e8 2f 4c fe ff       	call   c0004ef5 <f_mount>
c00202c6:	83 c4 10             	add    esp,0x10
c00202c9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202d0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00202d8:	74 19                	je     c00202f3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00202da:	83 ec 0c             	sub    esp,0xc
c00202dd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202e4:	e8 d0 f2 fe ff       	call   c000f5b9 <rfree>
c00202e9:	83 c4 10             	add    esp,0x10
c00202ec:	b0 00                	mov    al,0x0
c00202ee:	e9 e7 00 00 00       	jmp    c00203da <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202f3:	83 ec 04             	sub    esp,0x4
c00202f6:	68 00 01 00 00       	push   0x100
c00202fb:	6a 00                	push   0x0
c00202fd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020304:	50                   	push   eax
c0020305:	e8 46 04 fe ff       	call   c0000750 <memset>
c002030a:	83 c4 10             	add    esp,0x10
c002030d:	83 ec 08             	sub    esp,0x8
c0020310:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020317:	50                   	push   eax
c0020318:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002031f:	50                   	push   eax
c0020320:	e8 27 06 fe ff       	call   c000094c <strcat>
c0020325:	83 c4 10             	add    esp,0x10
c0020328:	83 ec 08             	sub    esp,0x8
c002032b:	68 c6 bd 02 c0       	push   0xc002bdc6
c0020330:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020337:	50                   	push   eax
c0020338:	e8 0f 06 fe ff       	call   c000094c <strcat>
c002033d:	83 c4 10             	add    esp,0x10
c0020340:	83 ec 04             	sub    esp,0x4
c0020343:	6a 01                	push   0x1
c0020345:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002034c:	50                   	push   eax
c002034d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020351:	50                   	push   eax
c0020352:	e8 00 4c fe ff       	call   c0004f57 <f_open>
c0020357:	83 c4 10             	add    esp,0x10
c002035a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020361:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020368:	85 c0                	test   eax,eax
c002036a:	74 0a                	je     c0020376 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002036c:	78 2d                	js     c002039b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002036e:	83 e8 04             	sub    eax,0x4
c0020371:	83 f8 01             	cmp    eax,0x1
c0020374:	77 25                	ja     c002039b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020376:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002037e:	83 ec 0c             	sub    esp,0xc
c0020381:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020385:	50                   	push   eax
c0020386:	e8 1e 57 fe ff       	call   c0005aa9 <f_close>
c002038b:	83 c4 10             	add    esp,0x10
c002038e:	90                   	nop
c002038f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020397:	74 3a                	je     c00203d3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020399:	eb 2d                	jmp    c00203c8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002039b:	83 ec 0c             	sub    esp,0xc
c002039e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203a5:	e8 0f f2 fe ff       	call   c000f5b9 <rfree>
c00203aa:	83 c4 10             	add    esp,0x10
c00203ad:	83 ec 04             	sub    esp,0x4
c00203b0:	6a 00                	push   0x0
c00203b2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203b9:	50                   	push   eax
c00203ba:	6a 00                	push   0x0
c00203bc:	e8 34 4b fe ff       	call   c0004ef5 <f_mount>
c00203c1:	83 c4 10             	add    esp,0x10
c00203c4:	b0 00                	mov    al,0x0
c00203c6:	eb 12                	jmp    c00203da <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203c8:	a1 00 0f 03 c0       	mov    eax,ds:0xc0030f00
c00203cd:	40                   	inc    eax
c00203ce:	a3 00 0f 03 c0       	mov    ds:0xc0030f00,eax
c00203d3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00203da:	81 c4 6c 03 00 00    	add    esp,0x36c
c00203e0:	c3                   	ret    
c00203e1:	90                   	nop

c00203e2 <FAT::getFileFirstSector(char const*)>:
c00203e2:	53                   	push   ebx
c00203e3:	83 ec 28             	sub    esp,0x28
c00203e6:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00203ee:	83 ec 0c             	sub    esp,0xc
c00203f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f5:	e8 9f f1 fe ff       	call   c000f599 <malloc>
c00203fa:	83 c4 10             	add    esp,0x10
c00203fd:	89 c3                	mov    ebx,eax
c00203ff:	a1 30 0e 03 c0       	mov    eax,ds:0xc0030e30
c0020404:	83 ec 04             	sub    esp,0x4
c0020407:	50                   	push   eax
c0020408:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002040c:	53                   	push   ebx
c002040d:	e8 f8 27 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c0020412:	83 c4 10             	add    esp,0x10
c0020415:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020419:	83 ec 08             	sub    esp,0x8
c002041c:	6a 01                	push   0x1
c002041e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020422:	e8 47 28 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c0020427:	83 c4 10             	add    esp,0x10
c002042a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002042e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020430:	83 c0 0c             	add    eax,0xc
c0020433:	8b 00                	mov    eax,DWORD PTR [eax]
c0020435:	83 ec 0c             	sub    esp,0xc
c0020438:	8d 54 24 14          	lea    edx,[esp+0x14]
c002043c:	52                   	push   edx
c002043d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020441:	52                   	push   edx
c0020442:	6a 00                	push   0x0
c0020444:	6a 04                	push   0x4
c0020446:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002044a:	ff d0                	call   eax
c002044c:	83 c4 20             	add    esp,0x20
c002044f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020453:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020459:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002045d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020461:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020464:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020467:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002046b:	83 ec 0c             	sub    esp,0xc
c002046e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020472:	e8 55 28 ff ff       	call   c0012ccc <File::close()>
c0020477:	83 c4 10             	add    esp,0x10
c002047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002047e:	ba 00 00 00 00       	mov    edx,0x0
c0020483:	83 c4 28             	add    esp,0x28
c0020486:	5b                   	pop    ebx
c0020487:	c3                   	ret    

c0020488 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020488:	57                   	push   edi
c0020489:	56                   	push   esi
c002048a:	53                   	push   ebx
c002048b:	81 ec 50 02 00 00    	sub    esp,0x250
c0020491:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020499:	74 0a                	je     c00204a5 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c002049b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204a3:	75 0a                	jne    c00204af <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204a5:	b8 04 00 00 00       	mov    eax,0x4
c00204aa:	e9 29 01 00 00       	jmp    c00205d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204af:	83 ec 08             	sub    esp,0x8
c00204b2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204b9:	50                   	push   eax
c00204ba:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00204c1:	e8 ed 5b fe ff       	call   c00060b3 <f_readdir>
c00204c6:	83 c4 10             	add    esp,0x10
c00204c9:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00204d0:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00204d7:	83 ec 0c             	sub    esp,0xc
c00204da:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00204e1:	83 c0 1a             	add    eax,0x1a
c00204e4:	50                   	push   eax
c00204e5:	e8 82 02 fe ff       	call   c000076c <strlen>
c00204ea:	83 c4 10             	add    esp,0x10
c00204ed:	ba 00 00 00 00       	mov    edx,0x0
c00204f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204fa:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020501:	0f b6 c0             	movzx  eax,al
c0020504:	83 e0 10             	and    eax,0x10
c0020507:	74 07                	je     c0020510 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020509:	b8 02 00 00 00       	mov    eax,0x2
c002050e:	eb 05                	jmp    c0020515 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020510:	b8 01 00 00 00       	mov    eax,0x1
c0020515:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020519:	83 ec 08             	sub    esp,0x8
c002051c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020523:	83 c0 1a             	add    eax,0x1a
c0020526:	50                   	push   eax
c0020527:	8d 44 24 10          	lea    eax,[esp+0x10]
c002052b:	83 c0 10             	add    eax,0x10
c002052e:	50                   	push   eax
c002052f:	e8 d8 02 fe ff       	call   c000080c <strcpy>
c0020534:	83 c4 10             	add    esp,0x10
c0020537:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002053e:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020545:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020549:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020550:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020557:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002055e:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020565:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002056c:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020573:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002057a:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020581:	89 c6                	mov    esi,eax
c0020583:	89 d7                	mov    edi,edx
c0020585:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020587:	89 c8                	mov    eax,ecx
c0020589:	89 fa                	mov    edx,edi
c002058b:	89 f3                	mov    ebx,esi
c002058d:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020594:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002059b:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205a2:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00205a9:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205af:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00205b6:	84 c0                	test   al,al
c00205b8:	75 07                	jne    c00205c1 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00205ba:	b8 07 00 00 00       	mov    eax,0x7
c00205bf:	eb 17                	jmp    c00205d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205c1:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00205c8:	85 c0                	test   eax,eax
c00205ca:	75 07                	jne    c00205d3 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00205cc:	b8 00 00 00 00       	mov    eax,0x0
c00205d1:	eb 05                	jmp    c00205d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205d3:	b8 01 00 00 00       	mov    eax,0x1
c00205d8:	81 c4 50 02 00 00    	add    esp,0x250
c00205de:	5b                   	pop    ebx
c00205df:	5e                   	pop    esi
c00205e0:	5f                   	pop    edi
c00205e1:	c3                   	ret    

c00205e2 <FAT::read(void*, unsigned long, void*, int*)>:
c00205e2:	83 ec 1c             	sub    esp,0x1c
c00205e5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205ea:	74 07                	je     c00205f3 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00205ec:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00205f1:	75 07                	jne    c00205fa <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00205f3:	b8 04 00 00 00       	mov    eax,0x4
c00205f8:	eb 3d                	jmp    c0020637 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00205fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205fe:	50                   	push   eax
c00205ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020603:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020607:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002060b:	e8 83 4d fe ff       	call   c0005393 <f_read>
c0020610:	83 c4 10             	add    esp,0x10
c0020613:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002061b:	89 c2                	mov    edx,eax
c002061d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020621:	89 10                	mov    DWORD PTR [eax],edx
c0020623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020627:	85 c0                	test   eax,eax
c0020629:	75 07                	jne    c0020632 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002062b:	b8 00 00 00 00       	mov    eax,0x0
c0020630:	eb 05                	jmp    c0020637 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020632:	b8 01 00 00 00       	mov    eax,0x1
c0020637:	83 c4 1c             	add    esp,0x1c
c002063a:	c3                   	ret    
c002063b:	90                   	nop

c002063c <FAT::write(void*, unsigned long, void*, int*)>:
c002063c:	83 ec 1c             	sub    esp,0x1c
c002063f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020644:	74 07                	je     c002064d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020646:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002064b:	75 07                	jne    c0020654 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002064d:	b8 04 00 00 00       	mov    eax,0x4
c0020652:	eb 3d                	jmp    c0020691 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020654:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020658:	50                   	push   eax
c0020659:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002065d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020661:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020665:	e8 a9 4f fe ff       	call   c0005613 <f_write>
c002066a:	83 c4 10             	add    esp,0x10
c002066d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020671:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020675:	89 c2                	mov    edx,eax
c0020677:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002067b:	89 10                	mov    DWORD PTR [eax],edx
c002067d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020681:	85 c0                	test   eax,eax
c0020683:	75 07                	jne    c002068c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020685:	b8 00 00 00 00       	mov    eax,0x0
c002068a:	eb 05                	jmp    c0020691 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002068c:	b8 01 00 00 00       	mov    eax,0x1
c0020691:	83 c4 1c             	add    esp,0x1c
c0020694:	c3                   	ret    
c0020695:	90                   	nop

c0020696 <FAT::close(void*)>:
c0020696:	83 ec 1c             	sub    esp,0x1c
c0020699:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002069e:	75 07                	jne    c00206a7 <FAT::close(void*)+0x11>
c00206a0:	b8 04 00 00 00       	mov    eax,0x4
c00206a5:	eb 36                	jmp    c00206dd <FAT::close(void*)+0x47>
c00206a7:	83 ec 0c             	sub    esp,0xc
c00206aa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206ae:	e8 f6 53 fe ff       	call   c0005aa9 <f_close>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206ba:	83 ec 0c             	sub    esp,0xc
c00206bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206c1:	e8 e3 ee fe ff       	call   c000f5a9 <free>
c00206c6:	83 c4 10             	add    esp,0x10
c00206c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206cd:	85 c0                	test   eax,eax
c00206cf:	75 07                	jne    c00206d8 <FAT::close(void*)+0x42>
c00206d1:	b8 00 00 00 00       	mov    eax,0x0
c00206d6:	eb 05                	jmp    c00206dd <FAT::close(void*)+0x47>
c00206d8:	b8 01 00 00 00       	mov    eax,0x1
c00206dd:	83 c4 1c             	add    esp,0x1c
c00206e0:	c3                   	ret    
c00206e1:	90                   	nop

c00206e2 <FAT::closeDir(void*)>:
c00206e2:	83 ec 1c             	sub    esp,0x1c
c00206e5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206ea:	75 07                	jne    c00206f3 <FAT::closeDir(void*)+0x11>
c00206ec:	b8 04 00 00 00       	mov    eax,0x4
c00206f1:	eb 36                	jmp    c0020729 <FAT::closeDir(void*)+0x47>
c00206f3:	83 ec 0c             	sub    esp,0xc
c00206f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206fa:	e8 92 59 fe ff       	call   c0006091 <f_closedir>
c00206ff:	83 c4 10             	add    esp,0x10
c0020702:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020706:	83 ec 0c             	sub    esp,0xc
c0020709:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002070d:	e8 97 ee fe ff       	call   c000f5a9 <free>
c0020712:	83 c4 10             	add    esp,0x10
c0020715:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020719:	85 c0                	test   eax,eax
c002071b:	75 07                	jne    c0020724 <FAT::closeDir(void*)+0x42>
c002071d:	b8 00 00 00 00       	mov    eax,0x0
c0020722:	eb 05                	jmp    c0020729 <FAT::closeDir(void*)+0x47>
c0020724:	b8 01 00 00 00       	mov    eax,0x1
c0020729:	83 c4 1c             	add    esp,0x1c
c002072c:	c3                   	ret    
c002072d:	90                   	nop

c002072e <FAT::seek(void*, unsigned long long)>:
c002072e:	83 ec 2c             	sub    esp,0x2c
c0020731:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020735:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020739:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002073d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020741:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020746:	75 07                	jne    c002074f <FAT::seek(void*, unsigned long long)+0x21>
c0020748:	b8 04 00 00 00       	mov    eax,0x4
c002074d:	eb 2f                	jmp    c002077e <FAT::seek(void*, unsigned long long)+0x50>
c002074f:	83 ec 04             	sub    esp,0x4
c0020752:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020756:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002075a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002075e:	e8 75 53 fe ff       	call   c0005ad8 <f_lseek>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002076a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002076e:	85 c0                	test   eax,eax
c0020770:	75 07                	jne    c0020779 <FAT::seek(void*, unsigned long long)+0x4b>
c0020772:	b8 00 00 00 00       	mov    eax,0x0
c0020777:	eb 05                	jmp    c002077e <FAT::seek(void*, unsigned long long)+0x50>
c0020779:	b8 01 00 00 00       	mov    eax,0x1
c002077e:	83 c4 2c             	add    esp,0x2c
c0020781:	c3                   	ret    

c0020782 <fatWrapperReadDisk>:
c0020782:	83 ec 1c             	sub    esp,0x1c
c0020785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020789:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002078d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020791:	89 04 24             	mov    DWORD PTR [esp],eax
c0020794:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020798:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002079c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207a1:	8b 04 85 e0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2120]
c00207a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207ac:	83 ec 0c             	sub    esp,0xc
c00207af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207b3:	52                   	push   edx
c00207b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207bc:	50                   	push   eax
c00207bd:	e8 3e 58 ff ff       	call   c0016000 <LogicalDisk::read(unsigned long long, int, void*)>
c00207c2:	83 c4 20             	add    esp,0x20
c00207c5:	83 c4 1c             	add    esp,0x1c
c00207c8:	c3                   	ret    

c00207c9 <fatWrapperWriteDisk>:
c00207c9:	83 ec 1c             	sub    esp,0x1c
c00207cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00207db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207e3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207e8:	8b 04 85 e0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2120]
c00207ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207f3:	83 ec 0c             	sub    esp,0xc
c00207f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207fa:	52                   	push   edx
c00207fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020803:	50                   	push   eax
c0020804:	e8 63 58 ff ff       	call   c001606c <LogicalDisk::write(unsigned long long, int, void*)>
c0020809:	83 c4 20             	add    esp,0x20
c002080c:	83 c4 1c             	add    esp,0x1c
c002080f:	c3                   	ret    

c0020810 <fatWrapperIoctl>:
c0020810:	53                   	push   ebx
c0020811:	83 ec 28             	sub    esp,0x28
c0020814:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002081c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020820:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020824:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020829:	75 31                	jne    c002085c <fatWrapperIoctl+0x4c>
c002082b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002082f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020833:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020838:	8b 04 85 e0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2120]
c002083f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020845:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002084b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002084f:	66 89 02             	mov    WORD PTR [edx],ax
c0020852:	b8 00 00 00 00       	mov    eax,0x0
c0020857:	e9 b2 00 00 00       	jmp    c002090e <fatWrapperIoctl+0xfe>
c002085c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020861:	75 6a                	jne    c00208cd <fatWrapperIoctl+0xbd>
c0020863:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020867:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002086b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020870:	8b 04 85 e0 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2120]
c0020877:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002087d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020883:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020889:	89 c8                	mov    eax,ecx
c002088b:	89 da                	mov    edx,ebx
c002088d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020891:	c1 e0 0a             	shl    eax,0xa
c0020894:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020899:	8b 0c 8d e0 de 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2120]
c00208a0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208a6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208ac:	89 cb                	mov    ebx,ecx
c00208ae:	c1 fb 1f             	sar    ebx,0x1f
c00208b1:	53                   	push   ebx
c00208b2:	51                   	push   ecx
c00208b3:	52                   	push   edx
c00208b4:	50                   	push   eax
c00208b5:	e8 2a 5e 00 00       	call   c00266e4 <__udivdi3>
c00208ba:	83 c4 10             	add    esp,0x10
c00208bd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208c1:	89 01                	mov    DWORD PTR [ecx],eax
c00208c3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00208c6:	b8 00 00 00 00       	mov    eax,0x0
c00208cb:	eb 41                	jmp    c002090e <fatWrapperIoctl+0xfe>
c00208cd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00208d2:	75 07                	jne    c00208db <fatWrapperIoctl+0xcb>
c00208d4:	b8 00 00 00 00       	mov    eax,0x0
c00208d9:	eb 33                	jmp    c002090e <fatWrapperIoctl+0xfe>
c00208db:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00208e0:	75 19                	jne    c00208fb <fatWrapperIoctl+0xeb>
c00208e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208ee:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00208f4:	b8 00 00 00 00       	mov    eax,0x0
c00208f9:	eb 13                	jmp    c002090e <fatWrapperIoctl+0xfe>
c00208fb:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020900:	75 07                	jne    c0020909 <fatWrapperIoctl+0xf9>
c0020902:	b8 00 00 00 00       	mov    eax,0x0
c0020907:	eb 05                	jmp    c002090e <fatWrapperIoctl+0xfe>
c0020909:	b8 04 00 00 00       	mov    eax,0x4
c002090e:	83 c4 28             	add    esp,0x28
c0020911:	5b                   	pop    ebx
c0020912:	c3                   	ret    
c0020913:	90                   	nop

c0020914 <FAT::FAT()>:
c0020914:	83 ec 1c             	sub    esp,0x1c
c0020917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002091b:	83 ec 0c             	sub    esp,0xc
c002091e:	50                   	push   eax
c002091f:	e8 92 20 ff ff       	call   c00129b6 <Filesystem::Filesystem()>
c0020924:	83 c4 10             	add    esp,0x10
c0020927:	ba dc bd 02 c0       	mov    edx,0xc002bddc
c002092c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020930:	89 10                	mov    DWORD PTR [eax],edx
c0020932:	c7 05 00 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f00,0x0
c002093c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020944:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020949:	7f 15                	jg     c0020960 <FAT::FAT()+0x4c>
c002094b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002094f:	c7 04 85 20 0f 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf0e0],0xffffffff
c002095a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002095e:	eb e4                	jmp    c0020944 <FAT::FAT()+0x30>
c0020960:	90                   	nop
c0020961:	83 c4 1c             	add    esp,0x1c
c0020964:	c3                   	ret    
c0020965:	90                   	nop

c0020966 <FAT::fixFilepath(char*)>:
c0020966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002096a:	8a 00                	mov    al,BYTE PTR [eax]
c002096c:	3c 40                	cmp    al,0x40
c002096e:	7e 2c                	jle    c002099c <FAT::fixFilepath(char*)+0x36>
c0020970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020974:	8a 00                	mov    al,BYTE PTR [eax]
c0020976:	83 e8 41             	sub    eax,0x41
c0020979:	88 c2                	mov    dl,al
c002097b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002097f:	88 10                	mov    BYTE PTR [eax],dl
c0020981:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020985:	8a 00                	mov    al,BYTE PTR [eax]
c0020987:	0f be c0             	movsx  eax,al
c002098a:	8b 04 85 20 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0e0]
c0020991:	83 c0 30             	add    eax,0x30
c0020994:	88 c2                	mov    dl,al
c0020996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002099a:	88 10                	mov    BYTE PTR [eax],dl
c002099c:	90                   	nop
c002099d:	c3                   	ret    

c002099e <FAT::open(char const*, void**, FileOpenMode)>:
c002099e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209a4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209ac:	74 0a                	je     c00209b8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209ae:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209b6:	75 0a                	jne    c00209c2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00209b8:	b8 04 00 00 00       	mov    eax,0x4
c00209bd:	e9 fd 00 00 00       	jmp    c0020abf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209c2:	83 ec 08             	sub    esp,0x8
c00209c5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209d0:	50                   	push   eax
c00209d1:	e8 36 fe fd ff       	call   c000080c <strcpy>
c00209d6:	83 c4 10             	add    esp,0x10
c00209d9:	83 ec 08             	sub    esp,0x8
c00209dc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00209e0:	50                   	push   eax
c00209e1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209e8:	e8 79 ff ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c00209ed:	83 c4 10             	add    esp,0x10
c00209f0:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00209f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00209ff:	83 e0 01             	and    eax,0x1
c0020a02:	74 08                	je     c0020a0c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a04:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a13:	83 e0 04             	and    eax,0x4
c0020a16:	74 10                	je     c0020a28 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a18:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a20:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a2f:	83 e0 02             	and    eax,0x2
c0020a32:	74 08                	je     c0020a3c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a34:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a3c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a43:	83 e0 08             	and    eax,0x8
c0020a46:	74 08                	je     c0020a50 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a48:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a57:	83 e0 10             	and    eax,0x10
c0020a5a:	74 08                	je     c0020a64 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a5c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020a64:	83 ec 0c             	sub    esp,0xc
c0020a67:	68 50 02 00 00       	push   0x250
c0020a6c:	e8 28 eb fe ff       	call   c000f599 <malloc>
c0020a71:	83 c4 10             	add    esp,0x10
c0020a74:	89 c2                	mov    edx,eax
c0020a76:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a7d:	89 10                	mov    DWORD PTR [eax],edx
c0020a7f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020a87:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a90:	83 ec 04             	sub    esp,0x4
c0020a93:	52                   	push   edx
c0020a94:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020a98:	52                   	push   edx
c0020a99:	50                   	push   eax
c0020a9a:	e8 b8 44 fe ff       	call   c0004f57 <f_open>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020aa9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020ab1:	74 07                	je     c0020aba <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020ab3:	b8 01 00 00 00       	mov    eax,0x1
c0020ab8:	eb 05                	jmp    c0020abf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020aba:	b8 00 00 00 00       	mov    eax,0x0
c0020abf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ac5:	c3                   	ret    

c0020ac6 <FAT::openDir(char const*, void**)>:
c0020ac6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020acc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ad4:	74 0a                	je     c0020ae0 <FAT::openDir(char const*, void**)+0x1a>
c0020ad6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ade:	75 07                	jne    c0020ae7 <FAT::openDir(char const*, void**)+0x21>
c0020ae0:	b8 04 00 00 00       	mov    eax,0x4
c0020ae5:	eb 7d                	jmp    c0020b64 <FAT::openDir(char const*, void**)+0x9e>
c0020ae7:	83 ec 08             	sub    esp,0x8
c0020aea:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020af1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020af5:	50                   	push   eax
c0020af6:	e8 11 fd fd ff       	call   c000080c <strcpy>
c0020afb:	83 c4 10             	add    esp,0x10
c0020afe:	83 ec 08             	sub    esp,0x8
c0020b01:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b05:	50                   	push   eax
c0020b06:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b0d:	e8 54 fe ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c0020b12:	83 c4 10             	add    esp,0x10
c0020b15:	83 ec 0c             	sub    esp,0xc
c0020b18:	6a 4c                	push   0x4c
c0020b1a:	e8 7a ea fe ff       	call   c000f599 <malloc>
c0020b1f:	83 c4 10             	add    esp,0x10
c0020b22:	89 c2                	mov    edx,eax
c0020b24:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b2b:	89 10                	mov    DWORD PTR [eax],edx
c0020b2d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b34:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b36:	83 ec 08             	sub    esp,0x8
c0020b39:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b3d:	52                   	push   edx
c0020b3e:	50                   	push   eax
c0020b3f:	e8 4b 54 fe ff       	call   c0005f8f <f_opendir>
c0020b44:	83 c4 10             	add    esp,0x10
c0020b47:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b4e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b56:	74 07                	je     c0020b5f <FAT::openDir(char const*, void**)+0x99>
c0020b58:	b8 01 00 00 00       	mov    eax,0x1
c0020b5d:	eb 05                	jmp    c0020b64 <FAT::openDir(char const*, void**)+0x9e>
c0020b5f:	b8 00 00 00 00       	mov    eax,0x0
c0020b64:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b6a:	c3                   	ret    
c0020b6b:	90                   	nop

c0020b6c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020b6c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020b72:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020b7a:	75 0a                	jne    c0020b86 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020b7c:	b8 04 00 00 00       	mov    eax,0x4
c0020b81:	e9 c9 00 00 00       	jmp    c0020c4f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b86:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020b8e:	75 0a                	jne    c0020b9a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020b90:	b8 04 00 00 00       	mov    eax,0x4
c0020b95:	e9 b5 00 00 00       	jmp    c0020c4f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b9a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020ba2:	75 0a                	jne    c0020bae <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020ba4:	b8 04 00 00 00       	mov    eax,0x4
c0020ba9:	e9 a1 00 00 00       	jmp    c0020c4f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bae:	83 ec 08             	sub    esp,0x8
c0020bb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bb8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020bbf:	50                   	push   eax
c0020bc0:	e8 47 fc fd ff       	call   c000080c <strcpy>
c0020bc5:	83 c4 10             	add    esp,0x10
c0020bc8:	83 ec 08             	sub    esp,0x8
c0020bcb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020bd2:	50                   	push   eax
c0020bd3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bda:	e8 87 fd ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c0020bdf:	83 c4 10             	add    esp,0x10
c0020be2:	83 ec 08             	sub    esp,0x8
c0020be5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020be9:	50                   	push   eax
c0020bea:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020bf1:	50                   	push   eax
c0020bf2:	e8 57 55 fe ff       	call   c000614e <f_stat>
c0020bf7:	83 c4 10             	add    esp,0x10
c0020bfa:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c01:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c08:	85 c0                	test   eax,eax
c0020c0a:	74 07                	je     c0020c13 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c0c:	83 f8 04             	cmp    eax,0x4
c0020c0f:	74 32                	je     c0020c43 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c11:	eb 37                	jmp    c0020c4a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c13:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c17:	0f b6 c0             	movzx  eax,al
c0020c1a:	83 e0 10             	and    eax,0x10
c0020c1d:	0f 95 c2             	setne  dl
c0020c20:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c27:	88 10                	mov    BYTE PTR [eax],dl
c0020c29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c30:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c37:	89 01                	mov    DWORD PTR [ecx],eax
c0020c39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c3c:	b8 00 00 00 00       	mov    eax,0x0
c0020c41:	eb 0c                	jmp    c0020c4f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c43:	b8 02 00 00 00       	mov    eax,0x2
c0020c48:	eb 05                	jmp    c0020c4f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c4a:	b8 01 00 00 00       	mov    eax,0x1
c0020c4f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c55:	c3                   	ret    

c0020c56 <FAT::unlink(char const*)>:
c0020c56:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c5c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c64:	75 07                	jne    c0020c6d <FAT::unlink(char const*)+0x17>
c0020c66:	b8 04 00 00 00       	mov    eax,0x4
c0020c6b:	eb 5c                	jmp    c0020cc9 <FAT::unlink(char const*)+0x73>
c0020c6d:	83 ec 08             	sub    esp,0x8
c0020c70:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c77:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c7b:	50                   	push   eax
c0020c7c:	e8 8b fb fd ff       	call   c000080c <strcpy>
c0020c81:	83 c4 10             	add    esp,0x10
c0020c84:	83 ec 08             	sub    esp,0x8
c0020c87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c8b:	50                   	push   eax
c0020c8c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c93:	e8 ce fc ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c0020c98:	83 c4 10             	add    esp,0x10
c0020c9b:	83 ec 0c             	sub    esp,0xc
c0020c9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ca2:	50                   	push   eax
c0020ca3:	e8 f8 57 fe ff       	call   c00064a0 <f_unlink>
c0020ca8:	83 c4 10             	add    esp,0x10
c0020cab:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cb2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020cb9:	85 c0                	test   eax,eax
c0020cbb:	75 07                	jne    c0020cc4 <FAT::unlink(char const*)+0x6e>
c0020cbd:	b8 00 00 00 00       	mov    eax,0x0
c0020cc2:	eb 05                	jmp    c0020cc9 <FAT::unlink(char const*)+0x73>
c0020cc4:	b8 01 00 00 00       	mov    eax,0x1
c0020cc9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ccf:	c3                   	ret    

c0020cd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020cd0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020cd6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020cdd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020ce4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ce8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020cec:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020cf4:	75 0a                	jne    c0020d00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020cf6:	b8 04 00 00 00       	mov    eax,0x4
c0020cfb:	e9 1c 01 00 00       	jmp    c0020e1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d00:	83 ec 08             	sub    esp,0x8
c0020d03:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d0a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d0e:	50                   	push   eax
c0020d0f:	e8 f8 fa fd ff       	call   c000080c <strcpy>
c0020d14:	83 c4 10             	add    esp,0x10
c0020d17:	83 ec 08             	sub    esp,0x8
c0020d1a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d1e:	50                   	push   eax
c0020d1f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d26:	e8 3b fc ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c0020d2b:	83 c4 10             	add    esp,0x10
c0020d2e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d36:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d3e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d43:	83 e0 01             	and    eax,0x1
c0020d46:	74 08                	je     c0020d50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d48:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d55:	83 e0 02             	and    eax,0x2
c0020d58:	74 08                	je     c0020d62 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d5a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020d62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d67:	83 e0 04             	and    eax,0x4
c0020d6a:	74 08                	je     c0020d74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020d6c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020d74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d79:	83 e0 08             	and    eax,0x8
c0020d7c:	74 08                	je     c0020d86 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020d7e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020d86:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d8b:	83 e0 01             	and    eax,0x1
c0020d8e:	74 08                	je     c0020d98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020d90:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020d98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d9d:	83 e0 02             	and    eax,0x2
c0020da0:	74 08                	je     c0020daa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020da2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020daa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020daf:	83 e0 04             	and    eax,0x4
c0020db2:	74 08                	je     c0020dbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020db4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020dbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dc1:	83 e0 08             	and    eax,0x8
c0020dc4:	74 08                	je     c0020dce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020dc6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020dce:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020dd5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020ddc:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020de4:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020dec:	83 ec 04             	sub    esp,0x4
c0020def:	52                   	push   edx
c0020df0:	50                   	push   eax
c0020df1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020df5:	50                   	push   eax
c0020df6:	e8 47 5d fe ff       	call   c0006b42 <f_chmod>
c0020dfb:	83 c4 10             	add    esp,0x10
c0020dfe:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e05:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e0c:	85 c0                	test   eax,eax
c0020e0e:	75 07                	jne    c0020e17 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e10:	b8 00 00 00 00       	mov    eax,0x0
c0020e15:	eb 05                	jmp    c0020e1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e17:	b8 01 00 00 00       	mov    eax,0x1
c0020e1c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e22:	c3                   	ret    
c0020e23:	90                   	nop

c0020e24 <FAT::rename(char const*, char const*)>:
c0020e24:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e2a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e32:	74 0a                	je     c0020e3e <FAT::rename(char const*, char const*)+0x1a>
c0020e34:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e3c:	75 0a                	jne    c0020e48 <FAT::rename(char const*, char const*)+0x24>
c0020e3e:	b8 04 00 00 00       	mov    eax,0x4
c0020e43:	e9 98 00 00 00       	jmp    c0020ee0 <FAT::rename(char const*, char const*)+0xbc>
c0020e48:	83 ec 08             	sub    esp,0x8
c0020e4b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e52:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e59:	50                   	push   eax
c0020e5a:	e8 ad f9 fd ff       	call   c000080c <strcpy>
c0020e5f:	83 c4 10             	add    esp,0x10
c0020e62:	83 ec 08             	sub    esp,0x8
c0020e65:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020e6c:	50                   	push   eax
c0020e6d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e74:	e8 ed fa ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c0020e79:	83 c4 10             	add    esp,0x10
c0020e7c:	83 ec 08             	sub    esp,0x8
c0020e7f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020e86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e8a:	50                   	push   eax
c0020e8b:	e8 7c f9 fd ff       	call   c000080c <strcpy>
c0020e90:	83 c4 10             	add    esp,0x10
c0020e93:	83 ec 08             	sub    esp,0x8
c0020e96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e9a:	50                   	push   eax
c0020e9b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ea2:	e8 bf fa ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c0020ea7:	83 c4 10             	add    esp,0x10
c0020eaa:	83 ec 08             	sub    esp,0x8
c0020ead:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eb1:	50                   	push   eax
c0020eb2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020eb9:	50                   	push   eax
c0020eba:	e8 90 59 fe ff       	call   c000684f <f_rename>
c0020ebf:	83 c4 10             	add    esp,0x10
c0020ec2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020ec9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020ed0:	85 c0                	test   eax,eax
c0020ed2:	75 07                	jne    c0020edb <FAT::rename(char const*, char const*)+0xb7>
c0020ed4:	b8 00 00 00 00       	mov    eax,0x0
c0020ed9:	eb 05                	jmp    c0020ee0 <FAT::rename(char const*, char const*)+0xbc>
c0020edb:	b8 01 00 00 00       	mov    eax,0x1
c0020ee0:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020ee6:	c3                   	ret    
c0020ee7:	90                   	nop

c0020ee8 <FAT::mkdir(char const*)>:
c0020ee8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020eee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ef6:	75 07                	jne    c0020eff <FAT::mkdir(char const*)+0x17>
c0020ef8:	b8 04 00 00 00       	mov    eax,0x4
c0020efd:	eb 5c                	jmp    c0020f5b <FAT::mkdir(char const*)+0x73>
c0020eff:	83 ec 08             	sub    esp,0x8
c0020f02:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f09:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f0d:	50                   	push   eax
c0020f0e:	e8 f9 f8 fd ff       	call   c000080c <strcpy>
c0020f13:	83 c4 10             	add    esp,0x10
c0020f16:	83 ec 08             	sub    esp,0x8
c0020f19:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f1d:	50                   	push   eax
c0020f1e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f25:	e8 3c fa ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c0020f2a:	83 c4 10             	add    esp,0x10
c0020f2d:	83 ec 0c             	sub    esp,0xc
c0020f30:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f34:	50                   	push   eax
c0020f35:	e8 e9 56 fe ff       	call   c0006623 <f_mkdir>
c0020f3a:	83 c4 10             	add    esp,0x10
c0020f3d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f44:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f4b:	85 c0                	test   eax,eax
c0020f4d:	75 07                	jne    c0020f56 <FAT::mkdir(char const*)+0x6e>
c0020f4f:	b8 00 00 00 00       	mov    eax,0x0
c0020f54:	eb 05                	jmp    c0020f5b <FAT::mkdir(char const*)+0x73>
c0020f56:	b8 01 00 00 00       	mov    eax,0x1
c0020f5b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f61:	c3                   	ret    

c0020f62 <FAT::exists(char const*)>:
c0020f62:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f68:	83 ec 08             	sub    esp,0x8
c0020f6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f76:	50                   	push   eax
c0020f77:	e8 90 f8 fd ff       	call   c000080c <strcpy>
c0020f7c:	83 c4 10             	add    esp,0x10
c0020f7f:	83 ec 08             	sub    esp,0x8
c0020f82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f86:	50                   	push   eax
c0020f87:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f8e:	e8 d3 f9 ff ff       	call   c0020966 <FAT::fixFilepath(char*)>
c0020f93:	83 c4 10             	add    esp,0x10
c0020f96:	83 ec 08             	sub    esp,0x8
c0020f99:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020fa0:	50                   	push   eax
c0020fa1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fa5:	50                   	push   eax
c0020fa6:	e8 a3 51 fe ff       	call   c000614e <f_stat>
c0020fab:	83 c4 10             	add    esp,0x10
c0020fae:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020fb5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020fbc:	85 c0                	test   eax,eax
c0020fbe:	75 04                	jne    c0020fc4 <FAT::exists(char const*)+0x62>
c0020fc0:	b0 01                	mov    al,0x1
c0020fc2:	eb 02                	jmp    c0020fc6 <FAT::exists(char const*)+0x64>
c0020fc4:	b0 00                	mov    al,0x0
c0020fc6:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020fcc:	c3                   	ret    
c0020fcd:	90                   	nop

c0020fce <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020fce:	b8 08 00 00 00       	mov    eax,0x8
c0020fd3:	c3                   	ret    

c0020fd4 <ISO9660::seek(void*, unsigned long long)>:
c0020fd4:	53                   	push   ebx
c0020fd5:	b8 04 00 00 00       	mov    eax,0x4
c0020fda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020fde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fe2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020fe6:	85 d2                	test   edx,edx
c0020fe8:	74 17                	je     c0021001 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020fea:	89 c8                	mov    eax,ecx
c0020fec:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020fef:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020ff2:	b8 01 00 00 00       	mov    eax,0x1
c0020ff7:	73 08                	jae    c0021001 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020ff9:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020ffc:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020fff:	31 c0                	xor    eax,eax
c0021001:	5b                   	pop    ebx
c0021002:	c3                   	ret    
c0021003:	90                   	nop

c0021004 <ISO9660::tell(void*, unsigned long long*)>:
c0021004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002100c:	85 d2                	test   edx,edx
c002100e:	74 12                	je     c0021022 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021010:	85 c0                	test   eax,eax
c0021012:	74 0e                	je     c0021022 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021014:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021017:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002101a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002101d:	89 10                	mov    DWORD PTR [eax],edx
c002101f:	31 c0                	xor    eax,eax
c0021021:	c3                   	ret    
c0021022:	b8 04 00 00 00       	mov    eax,0x4
c0021027:	c3                   	ret    

c0021028 <ISO9660::getName()>:
c0021028:	b8 3c be 02 c0       	mov    eax,0xc002be3c
c002102d:	c3                   	ret    

c002102e <ISO9660::stat(void*, unsigned long long*)>:
c002102e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021036:	85 d2                	test   edx,edx
c0021038:	74 12                	je     c002104c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002103a:	85 c0                	test   eax,eax
c002103c:	74 0e                	je     c002104c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002103e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021041:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021044:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021047:	89 10                	mov    DWORD PTR [eax],edx
c0021049:	31 c0                	xor    eax,eax
c002104b:	c3                   	ret    
c002104c:	b8 04 00 00 00       	mov    eax,0x4
c0021051:	c3                   	ret    

c0021052 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021052:	b8 01 00 00 00       	mov    eax,0x1
c0021057:	c3                   	ret    

c0021058 <ISO9660::unlink(char const*)>:
c0021058:	b8 01 00 00 00       	mov    eax,0x1
c002105d:	c3                   	ret    

c002105e <ISO9660::write(void*, unsigned long, void*, int*)>:
c002105e:	b8 01 00 00 00       	mov    eax,0x1
c0021063:	c3                   	ret    

c0021064 <ISO9660::rename(char const*, char const*)>:
c0021064:	b8 01 00 00 00       	mov    eax,0x1
c0021069:	c3                   	ret    

c002106a <ISO9660::mkdir(char const*)>:
c002106a:	b8 01 00 00 00       	mov    eax,0x1
c002106f:	c3                   	ret    

c0021070 <ISO9660::close(void*)>:
c0021070:	83 ec 0c             	sub    esp,0xc
c0021073:	b8 04 00 00 00       	mov    eax,0x4
c0021078:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002107c:	85 d2                	test   edx,edx
c002107e:	74 0e                	je     c002108e <ISO9660::close(void*)+0x1e>
c0021080:	83 ec 0c             	sub    esp,0xc
c0021083:	52                   	push   edx
c0021084:	e8 20 e5 fe ff       	call   c000f5a9 <free>
c0021089:	83 c4 10             	add    esp,0x10
c002108c:	31 c0                	xor    eax,eax
c002108e:	83 c4 0c             	add    esp,0xc
c0021091:	c3                   	ret    

c0021092 <ISO9660::closeDir(void*)>:
c0021092:	83 ec 0c             	sub    esp,0xc
c0021095:	b8 04 00 00 00       	mov    eax,0x4
c002109a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002109e:	85 d2                	test   edx,edx
c00210a0:	74 0e                	je     c00210b0 <ISO9660::closeDir(void*)+0x1e>
c00210a2:	83 ec 0c             	sub    esp,0xc
c00210a5:	52                   	push   edx
c00210a6:	e8 fe e4 fe ff       	call   c000f5a9 <free>
c00210ab:	83 c4 10             	add    esp,0x10
c00210ae:	31 c0                	xor    eax,eax
c00210b0:	83 c4 0c             	add    esp,0xc
c00210b3:	c3                   	ret    

c00210b4 <ISO9660::~ISO9660()>:
c00210b4:	83 ec 0c             	sub    esp,0xc
c00210b7:	ba 60 be 02 c0       	mov    edx,0xc002be60
c00210bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c0:	89 10                	mov    DWORD PTR [eax],edx
c00210c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c6:	83 ec 0c             	sub    esp,0xc
c00210c9:	50                   	push   eax
c00210ca:	e8 0b 19 ff ff       	call   c00129da <Filesystem::~Filesystem()>
c00210cf:	83 c4 10             	add    esp,0x10
c00210d2:	90                   	nop
c00210d3:	83 c4 0c             	add    esp,0xc
c00210d6:	c3                   	ret    
c00210d7:	90                   	nop

c00210d8 <ISO9660::~ISO9660()>:
c00210d8:	83 ec 0c             	sub    esp,0xc
c00210db:	83 ec 0c             	sub    esp,0xc
c00210de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210e2:	e8 cd ff ff ff       	call   c00210b4 <ISO9660::~ISO9660()>
c00210e7:	83 c4 10             	add    esp,0x10
c00210ea:	83 ec 08             	sub    esp,0x8
c00210ed:	6a 08                	push   0x8
c00210ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210f3:	e8 db 14 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c00210f8:	83 c4 10             	add    esp,0x10
c00210fb:	83 c4 0c             	add    esp,0xc
c00210fe:	c3                   	ret    

c00210ff <__memmem(unsigned char*, int, unsigned char*, int)>:
c00210ff:	55                   	push   ebp
c0021100:	31 c9                	xor    ecx,ecx
c0021102:	57                   	push   edi
c0021103:	56                   	push   esi
c0021104:	53                   	push   ebx
c0021105:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021109:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002110d:	89 eb                	mov    ebx,ebp
c002110f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021113:	39 ce                	cmp    esi,ecx
c0021115:	7e 17                	jle    c002112e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021117:	31 d2                	xor    edx,edx
c0021119:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002111d:	7d 13                	jge    c0021132 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002111f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021123:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021126:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021129:	75 0d                	jne    c0021138 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002112b:	42                   	inc    edx
c002112c:	eb eb                	jmp    c0021119 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002112e:	31 c0                	xor    eax,eax
c0021130:	eb 0a                	jmp    c002113c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021132:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021136:	eb 04                	jmp    c002113c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021138:	41                   	inc    ecx
c0021139:	43                   	inc    ebx
c002113a:	eb d7                	jmp    c0021113 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002113c:	5b                   	pop    ebx
c002113d:	5e                   	pop    esi
c002113e:	5f                   	pop    edi
c002113f:	5d                   	pop    ebp
c0021140:	c3                   	ret    

c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021141:	57                   	push   edi
c0021142:	56                   	push   esi
c0021143:	53                   	push   ebx
c0021144:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021148:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002114c:	39 0d 00 10 03 c0    	cmp    DWORD PTR ds:0xc0031000,ecx
c0021152:	75 08                	jne    c002115c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021154:	38 05 74 ce 02 c0    	cmp    BYTE PTR ds:0xc002ce74,al
c002115a:	74 2b                	je     c0021187 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002115c:	83 ec 0c             	sub    esp,0xc
c002115f:	a2 74 ce 02 c0       	mov    ds:0xc002ce74,al
c0021164:	68 20 10 03 c0       	push   0xc0031020
c0021169:	0f be c0             	movsx  eax,al
c002116c:	6a 01                	push   0x1
c002116e:	89 0d 00 10 03 c0    	mov    DWORD PTR ds:0xc0031000,ecx
c0021174:	31 db                	xor    ebx,ebx
c0021176:	53                   	push   ebx
c0021177:	51                   	push   ecx
c0021178:	ff 34 85 dc dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2224]
c002117f:	e8 7c 4e ff ff       	call   c0016000 <LogicalDisk::read(unsigned long long, int, void*)>
c0021184:	83 c4 20             	add    esp,0x20
c0021187:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002118b:	be 20 10 03 c0       	mov    esi,0xc0031020
c0021190:	b9 00 08 00 00       	mov    ecx,0x800
c0021195:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021197:	5b                   	pop    ebx
c0021198:	5e                   	pop    esi
c0021199:	5f                   	pop    edi
c002119a:	c3                   	ret    
c002119b:	90                   	nop

c002119c <ISO9660::tryMount(LogicalDisk*, int)>:
c002119c:	81 ec 10 08 00 00    	sub    esp,0x810
c00211a2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00211a9:	83 c0 41             	add    eax,0x41
c00211ac:	0f be c0             	movsx  eax,al
c00211af:	50                   	push   eax
c00211b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211b4:	50                   	push   eax
c00211b5:	6a 10                	push   0x10
c00211b7:	e8 85 ff ff ff       	call   c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211bc:	83 c4 10             	add    esp,0x10
c00211bf:	31 c0                	xor    eax,eax
c00211c1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00211c6:	75 1d                	jne    c00211e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211c8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00211cd:	75 16                	jne    c00211e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211cf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00211d4:	75 0f                	jne    c00211e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211d6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00211db:	75 08                	jne    c00211e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211dd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00211e2:	0f 94 c0             	sete   al
c00211e5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00211eb:	c3                   	ret    

c00211ec <ISO9660::read(void*, unsigned long, void*, int*)>:
c00211ec:	55                   	push   ebp
c00211ed:	57                   	push   edi
c00211ee:	56                   	push   esi
c00211ef:	53                   	push   ebx
c00211f0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00211f6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00211fd:	85 ed                	test   ebp,ebp
c00211ff:	0f 84 da 01 00 00    	je     c00213df <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021205:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002120d:	0f 84 cc 01 00 00    	je     c00213df <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021213:	b8 01 00 00 00       	mov    eax,0x1
c0021218:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002121c:	0f 85 c2 01 00 00    	jne    c00213e4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021222:	31 d2                	xor    edx,edx
c0021224:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002122b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002122e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021231:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021234:	89 04 24             	mov    DWORD PTR [esp],eax
c0021237:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002123b:	01 c8                	add    eax,ecx
c002123d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021240:	11 da                	adc    edx,ebx
c0021242:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021246:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002124a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002124e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021252:	19 d7                	sbb    edi,edx
c0021254:	72 11                	jb     c0021267 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021256:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021259:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002125d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021265:	eb 0c                	jmp    c0021273 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021267:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002126b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002126f:	29 ce                	sub    esi,ecx
c0021271:	19 df                	sbb    edi,ebx
c0021273:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021276:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021279:	0f a4 c2 0b          	shld   edx,eax,0xb
c002127d:	c1 e0 0b             	shl    eax,0xb
c0021280:	01 c8                	add    eax,ecx
c0021282:	11 da                	adc    edx,ebx
c0021284:	89 04 24             	mov    DWORD PTR [esp],eax
c0021287:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002128b:	51                   	push   ecx
c002128c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021290:	50                   	push   eax
c0021291:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021295:	53                   	push   ebx
c0021296:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002129a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002129e:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212a2:	50                   	push   eax
c00212a3:	e8 99 fe ff ff       	call   c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212a8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212ab:	b8 00 08 00 00       	mov    eax,0x800
c00212b0:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00212b6:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00212ba:	29 d0                	sub    eax,edx
c00212bc:	83 c4 10             	add    esp,0x10
c00212bf:	89 f9                	mov    ecx,edi
c00212c1:	39 c6                	cmp    esi,eax
c00212c3:	83 d9 00             	sbb    ecx,0x0
c00212c6:	7d 1b                	jge    c00212e3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00212c8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00212cd:	75 12                	jne    c00212e1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00212cf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212dc:	e9 fa 00 00 00       	jmp    c00213db <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00212e1:	89 f0                	mov    eax,esi
c00212e3:	01 d3                	add    ebx,edx
c00212e5:	31 d2                	xor    edx,edx
c00212e7:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00212eb:	39 c2                	cmp    edx,eax
c00212ed:	7d 14                	jge    c0021303 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00212ef:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00212f6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00212fa:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00212fd:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021300:	42                   	inc    edx
c0021301:	eb e8                	jmp    c00212eb <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021303:	89 c2                	mov    edx,eax
c0021305:	85 c0                	test   eax,eax
c0021307:	79 02                	jns    c002130b <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021309:	31 d2                	xor    edx,edx
c002130b:	01 c2                	add    edx,eax
c002130d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021310:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021317:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002131b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002131f:	99                   	cdq    
c0021320:	01 c1                	add    ecx,eax
c0021322:	11 d3                	adc    ebx,edx
c0021324:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021328:	29 c6                	sub    esi,eax
c002132a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002132e:	19 d7                	sbb    edi,edx
c0021330:	89 34 24             	mov    DWORD PTR [esp],esi
c0021333:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021337:	b8 ff 07 00 00       	mov    eax,0x7ff
c002133c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002133f:	b8 00 00 00 00       	mov    eax,0x0
c0021344:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021348:	7d 43                	jge    c002138d <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002134a:	52                   	push   edx
c002134b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002134f:	50                   	push   eax
c0021350:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021354:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021358:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002135c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021360:	50                   	push   eax
c0021361:	e8 db fd ff ff       	call   c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021366:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002136e:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021373:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002137b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021383:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021388:	83 c4 10             	add    esp,0x10
c002138b:	eb aa                	jmp    c0021337 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c002138d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021391:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021394:	74 2a                	je     c00213c0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021396:	50                   	push   eax
c0021397:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002139b:	50                   	push   eax
c002139c:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213a0:	56                   	push   esi
c00213a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00213a9:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213ad:	51                   	push   ecx
c00213ae:	e8 8e fd ff ff       	call   c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213b3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213bd:	83 c4 10             	add    esp,0x10
c00213c0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213c7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00213cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213cf:	89 18                	mov    DWORD PTR [eax],ebx
c00213d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213d5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213d8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213db:	31 c0                	xor    eax,eax
c00213dd:	eb 05                	jmp    c00213e4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00213df:	b8 04 00 00 00       	mov    eax,0x4
c00213e4:	81 c4 2c 08 00 00    	add    esp,0x82c
c00213ea:	5b                   	pop    ebx
c00213eb:	5e                   	pop    esi
c00213ec:	5f                   	pop    edi
c00213ed:	5d                   	pop    ebp
c00213ee:	c3                   	ret    
c00213ef:	90                   	nop

c00213f0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00213f0:	55                   	push   ebp
c00213f1:	57                   	push   edi
c00213f2:	56                   	push   esi
c00213f3:	53                   	push   ebx
c00213f4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00213fa:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021401:	85 ed                	test   ebp,ebp
c0021403:	0f 84 51 02 00 00    	je     c002165a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021409:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021411:	0f 84 43 02 00 00    	je     c002165a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021417:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002141a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002141d:	75 0a                	jne    c0021429 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002141f:	b8 07 00 00 00       	mov    eax,0x7
c0021424:	e9 36 02 00 00       	jmp    c002165f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021429:	50                   	push   eax
c002142a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002142e:	50                   	push   eax
c002142f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021436:	53                   	push   ebx
c0021437:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002143a:	c1 e0 0b             	shl    eax,0xb
c002143d:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021440:	c1 e8 0b             	shr    eax,0xb
c0021443:	50                   	push   eax
c0021444:	e8 f8 fc ff ff       	call   c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021449:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002144c:	83 c4 10             	add    esp,0x10
c002144f:	89 c1                	mov    ecx,eax
c0021451:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021454:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002145a:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002145d:	84 db                	test   bl,bl
c002145f:	0f 85 8b 00 00 00    	jne    c00214f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021465:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002146b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002146e:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021474:	29 c6                	sub    esi,eax
c0021476:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002147a:	89 f3                	mov    ebx,esi
c002147c:	89 f1                	mov    ecx,esi
c002147e:	c1 fb 1f             	sar    ebx,0x1f
c0021481:	01 f0                	add    eax,esi
c0021483:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021486:	11 da                	adc    edx,ebx
c0021488:	89 04 24             	mov    DWORD PTR [esp],eax
c002148b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002148f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021492:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021495:	89 d8                	mov    eax,ebx
c0021497:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002149b:	ba 00 00 00 00       	mov    edx,0x0
c00214a0:	19 f8                	sbb    eax,edi
c00214a2:	b8 00 00 00 00       	mov    eax,0x0
c00214a7:	73 08                	jae    c00214b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00214a9:	89 f0                	mov    eax,esi
c00214ab:	89 fa                	mov    edx,edi
c00214ad:	29 c8                	sub    eax,ecx
c00214af:	19 da                	sbb    edx,ebx
c00214b1:	89 d7                	mov    edi,edx
c00214b3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214b6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214b9:	09 c7                	or     edi,eax
c00214bb:	0f 84 5e ff ff ff    	je     c002141f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00214c1:	57                   	push   edi
c00214c2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214c6:	50                   	push   eax
c00214c7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214ce:	53                   	push   ebx
c00214cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214d2:	c1 e0 0b             	shl    eax,0xb
c00214d5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00214d9:	c1 e8 0b             	shr    eax,0xb
c00214dc:	50                   	push   eax
c00214dd:	e8 5f fc ff ff       	call   c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214e5:	83 c4 10             	add    esp,0x10
c00214e8:	25 ff 07 00 00       	and    eax,0x7ff
c00214ed:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00214f0:	31 ff                	xor    edi,edi
c00214f2:	56                   	push   esi
c00214f3:	6a 28                	push   0x28
c00214f5:	6a 00                	push   0x0
c00214f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214fb:	50                   	push   eax
c00214fc:	e8 4f f2 fd ff       	call   c0000750 <memset>
c0021501:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021504:	25 ff 07 00 00       	and    eax,0x7ff
c0021509:	89 c6                	mov    esi,eax
c002150b:	83 c6 21             	add    esi,0x21
c002150e:	83 d7 00             	adc    edi,0x0
c0021511:	83 c4 10             	add    esp,0x10
c0021514:	31 c9                	xor    ecx,ecx
c0021516:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002151d:	83 f9 28             	cmp    ecx,0x28
c0021520:	88 04 24             	mov    BYTE PTR [esp],al
c0021523:	0f 94 c2             	sete   dl
c0021526:	88 d0                	mov    al,dl
c0021528:	ba ff 07 00 00       	mov    edx,0x7ff
c002152d:	39 f2                	cmp    edx,esi
c002152f:	ba 00 00 00 00       	mov    edx,0x0
c0021534:	19 fa                	sbb    edx,edi
c0021536:	0f 92 c2             	setb   dl
c0021539:	09 c2                	or     edx,eax
c002153b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002153f:	0f 94 c0             	sete   al
c0021542:	08 d0                	or     al,dl
c0021544:	75 16                	jne    c002155c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021546:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002154a:	74 10                	je     c002155c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002154c:	8a 04 24             	mov    al,BYTE PTR [esp]
c002154f:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021553:	41                   	inc    ecx
c0021554:	83 c6 01             	add    esi,0x1
c0021557:	83 d7 00             	adc    edi,0x0
c002155a:	eb ba                	jmp    c0021516 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002155c:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021563:	83 ec 0c             	sub    esp,0xc
c0021566:	8d 74 24 24          	lea    esi,[esp+0x24]
c002156a:	56                   	push   esi
c002156b:	e8 fc f1 fd ff       	call   c000076c <strlen>
c0021570:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021577:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002157b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021583:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021586:	5a                   	pop    edx
c0021587:	25 ff 07 00 00       	and    eax,0x7ff
c002158c:	59                   	pop    ecx
c002158d:	01 f8                	add    eax,edi
c002158f:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021595:	83 e0 02             	and    eax,0x2
c0021598:	3c 01                	cmp    al,0x1
c002159a:	19 c0                	sbb    eax,eax
c002159c:	83 c0 02             	add    eax,0x2
c002159f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215a3:	56                   	push   esi
c00215a4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00215a8:	50                   	push   eax
c00215a9:	e8 5e f2 fd ff       	call   c000080c <strcpy>
c00215ae:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00215b2:	83 c4 10             	add    esp,0x10
c00215b5:	84 c0                	test   al,al
c00215b7:	75 21                	jne    c00215da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00215b9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00215c1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215c9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215d1:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00215d8:	eb 28                	jmp    c0021602 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215da:	fe c8                	dec    al
c00215dc:	75 24                	jne    c0021602 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215de:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00215e6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215ee:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215f6:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00215fd:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021602:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021606:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002160d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021614:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021616:	0f b6 f3             	movzx  esi,bl
c0021619:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021620:	31 db                	xor    ebx,ebx
c0021622:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021628:	89 df                	mov    edi,ebx
c002162a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002162d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021630:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021633:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021636:	39 c6                	cmp    esi,eax
c0021638:	19 d7                	sbb    edi,edx
c002163a:	72 10                	jb     c002164c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002163c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021643:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002164a:	eb 0a                	jmp    c0021656 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002164c:	29 f0                	sub    eax,esi
c002164e:	19 da                	sbb    edx,ebx
c0021650:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021653:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021656:	31 c0                	xor    eax,eax
c0021658:	eb 05                	jmp    c002165f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002165a:	b8 04 00 00 00       	mov    eax,0x4
c002165f:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021665:	5b                   	pop    ebx
c0021666:	5e                   	pop    esi
c0021667:	5f                   	pop    edi
c0021668:	5d                   	pop    ebp
c0021669:	c3                   	ret    

c002166a <readRoot(unsigned int*, unsigned int*, char)>:
c002166a:	57                   	push   edi
c002166b:	56                   	push   esi
c002166c:	81 ec 38 08 00 00    	sub    esp,0x838
c0021672:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002167a:	50                   	push   eax
c002167b:	8d 44 24 38          	lea    eax,[esp+0x38]
c002167f:	50                   	push   eax
c0021680:	6a 10                	push   0x10
c0021682:	e8 ba fa ff ff       	call   c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021687:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c002168e:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021692:	b9 22 00 00 00       	mov    ecx,0x22
c0021697:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021699:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216a4:	89 10                	mov    DWORD PTR [eax],edx
c00216a6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216b1:	89 10                	mov    DWORD PTR [eax],edx
c00216b3:	81 c4 44 08 00 00    	add    esp,0x844
c00216b9:	b0 01                	mov    al,0x1
c00216bb:	5e                   	pop    esi
c00216bc:	5f                   	pop    edi
c00216bd:	c3                   	ret    

c00216be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00216be:	55                   	push   ebp
c00216bf:	57                   	push   edi
c00216c0:	56                   	push   esi
c00216c1:	53                   	push   ebx
c00216c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216c8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00216cf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00216d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216da:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00216de:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00216e2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00216e6:	75 03                	jne    c00216eb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00216e8:	83 c3 02             	add    ebx,0x2
c00216eb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00216ee:	75 03                	jne    c00216f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00216f0:	43                   	inc    ebx
c00216f1:	eb f8                	jmp    c00216eb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00216f3:	51                   	push   ecx
c00216f4:	68 00 01 00 00       	push   0x100
c00216f9:	6a 00                	push   0x0
c00216fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216ff:	50                   	push   eax
c0021700:	e8 4b f0 fd ff       	call   c0000750 <memset>
c0021705:	83 c4 10             	add    esp,0x10
c0021708:	31 d2                	xor    edx,edx
c002170a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002170d:	84 c0                	test   al,al
c002170f:	74 21                	je     c0021732 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021711:	3c 2f                	cmp    al,0x2f
c0021713:	75 0b                	jne    c0021720 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021715:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021719:	bd 01 00 00 00       	mov    ebp,0x1
c002171e:	eb 14                	jmp    c0021734 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021720:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021723:	80 f9 19             	cmp    cl,0x19
c0021726:	77 03                	ja     c002172b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021728:	83 e8 20             	sub    eax,0x20
c002172b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002172f:	42                   	inc    edx
c0021730:	eb d8                	jmp    c002170a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021732:	31 ed                	xor    ebp,ebp
c0021734:	83 ec 0c             	sub    esp,0xc
c0021737:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002173e:	e8 56 de fe ff       	call   c000f599 <malloc>
c0021743:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002174a:	89 c6                	mov    esi,eax
c002174c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021752:	c1 ef 0b             	shr    edi,0xb
c0021755:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002175c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021760:	83 c4 10             	add    esp,0x10
c0021763:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021768:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002176c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021773:	74 28                	je     c002179d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021775:	52                   	push   edx
c0021776:	57                   	push   edi
c0021777:	50                   	push   eax
c0021778:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002177c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021783:	e8 b9 f9 ff ff       	call   c0021141 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021788:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002178c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021793:	05 00 08 00 00       	add    eax,0x800
c0021798:	83 c4 10             	add    esp,0x10
c002179b:	eb cb                	jmp    c0021768 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002179d:	83 ec 0c             	sub    esp,0xc
c00217a0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217a4:	57                   	push   edi
c00217a5:	e8 c2 ef fd ff       	call   c000076c <strlen>
c00217aa:	50                   	push   eax
c00217ab:	57                   	push   edi
c00217ac:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00217b3:	56                   	push   esi
c00217b4:	e8 46 f9 ff ff       	call   c00210ff <__memmem(unsigned char*, int, unsigned char*, int)>
c00217b9:	83 c4 20             	add    esp,0x20
c00217bc:	85 c0                	test   eax,eax
c00217be:	75 13                	jne    c00217d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00217c0:	83 ec 0c             	sub    esp,0xc
c00217c3:	56                   	push   esi
c00217c4:	e8 e0 dd fe ff       	call   c000f5a9 <free>
c00217c9:	83 c4 10             	add    esp,0x10
c00217cc:	31 c0                	xor    eax,eax
c00217ce:	e9 b3 00 00 00       	jmp    c0021886 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00217d3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00217d7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00217db:	c1 e7 08             	shl    edi,0x8
c00217de:	c1 e2 10             	shl    edx,0x10
c00217e1:	09 d7                	or     edi,edx
c00217e3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00217e7:	09 d7                	or     edi,edx
c00217e9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00217ed:	c1 e2 18             	shl    edx,0x18
c00217f0:	09 d7                	or     edi,edx
c00217f2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00217f6:	89 d1                	mov    ecx,edx
c00217f8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00217fc:	c1 e1 08             	shl    ecx,0x8
c00217ff:	c1 e2 10             	shl    edx,0x10
c0021802:	09 ca                	or     edx,ecx
c0021804:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021808:	09 ca                	or     edx,ecx
c002180a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002180e:	c1 e1 18             	shl    ecx,0x18
c0021811:	09 ca                	or     edx,ecx
c0021813:	89 e9                	mov    ecx,ebp
c0021815:	84 c9                	test   cl,cl
c0021817:	74 3c                	je     c0021855 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021819:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002181d:	83 ec 0c             	sub    esp,0xc
c0021820:	56                   	push   esi
c0021821:	e8 83 dd fe ff       	call   c000f5a9 <free>
c0021826:	83 c4 0c             	add    esp,0xc
c0021829:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021830:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021835:	50                   	push   eax
c0021836:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002183d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021844:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021848:	52                   	push   edx
c0021849:	57                   	push   edi
c002184a:	53                   	push   ebx
c002184b:	e8 6e fe ff ff       	call   c00216be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021850:	83 c4 20             	add    esp,0x20
c0021853:	eb 31                	jmp    c0021886 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021855:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021858:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002185f:	d0 e8                	shr    al,1
c0021861:	89 3b                	mov    DWORD PTR [ebx],edi
c0021863:	83 e0 01             	and    eax,0x1
c0021866:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002186d:	83 ec 0c             	sub    esp,0xc
c0021870:	89 13                	mov    DWORD PTR [ebx],edx
c0021872:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021879:	89 03                	mov    DWORD PTR [ebx],eax
c002187b:	56                   	push   esi
c002187c:	e8 28 dd fe ff       	call   c000f5a9 <free>
c0021881:	83 c4 10             	add    esp,0x10
c0021884:	b0 01                	mov    al,0x1
c0021886:	81 c4 1c 01 00 00    	add    esp,0x11c
c002188c:	5b                   	pop    ebx
c002188d:	5e                   	pop    esi
c002188e:	5f                   	pop    edi
c002188f:	5d                   	pop    ebp
c0021890:	c3                   	ret    

c0021891 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021891:	55                   	push   ebp
c0021892:	57                   	push   edi
c0021893:	56                   	push   esi
c0021894:	53                   	push   ebx
c0021895:	83 ec 20             	sub    esp,0x20
c0021898:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002189c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218a0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218ac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218b4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00218b9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00218bf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00218c5:	57                   	push   edi
c00218c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218ca:	50                   	push   eax
c00218cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218cf:	50                   	push   eax
c00218d0:	e8 95 fd ff ff       	call   c002166a <readRoot(unsigned int*, unsigned int*, char)>
c00218d5:	5a                   	pop    edx
c00218d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218da:	e8 8d ee fd ff       	call   c000076c <strlen>
c00218df:	83 c4 10             	add    esp,0x10
c00218e2:	83 f8 03             	cmp    eax,0x3
c00218e5:	77 17                	ja     c00218fe <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00218e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218eb:	89 03                	mov    DWORD PTR [ebx],eax
c00218ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218f1:	89 06                	mov    DWORD PTR [esi],eax
c00218f3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00218fa:	b0 01                	mov    al,0x1
c00218fc:	eb 19                	jmp    c0021917 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00218fe:	50                   	push   eax
c00218ff:	55                   	push   ebp
c0021900:	57                   	push   edi
c0021901:	56                   	push   esi
c0021902:	53                   	push   ebx
c0021903:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021907:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002190b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002190f:	e8 aa fd ff ff       	call   c00216be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021914:	83 c4 20             	add    esp,0x20
c0021917:	83 c4 1c             	add    esp,0x1c
c002191a:	5b                   	pop    ebx
c002191b:	5e                   	pop    esi
c002191c:	5f                   	pop    edi
c002191d:	5d                   	pop    ebp
c002191e:	c3                   	ret    
c002191f:	90                   	nop

c0021920 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021920:	57                   	push   edi
c0021921:	56                   	push   esi
c0021922:	53                   	push   ebx
c0021923:	83 ec 10             	sub    esp,0x10
c0021926:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002192a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002192e:	85 ff                	test   edi,edi
c0021930:	0f 84 8b 00 00 00    	je     c00219c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021936:	85 f6                	test   esi,esi
c0021938:	0f 84 83 00 00 00    	je     c00219c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002193e:	b8 03 00 00 00       	mov    eax,0x3
c0021943:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021948:	75 7c                	jne    c00219c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002194a:	83 ec 0c             	sub    esp,0xc
c002194d:	6a 1c                	push   0x1c
c002194f:	e8 45 dc fe ff       	call   c000f599 <malloc>
c0021954:	89 07                	mov    DWORD PTR [edi],eax
c0021956:	89 c3                	mov    ebx,eax
c0021958:	58                   	pop    eax
c0021959:	8d 44 24 18          	lea    eax,[esp+0x18]
c002195d:	50                   	push   eax
c002195e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021961:	50                   	push   eax
c0021962:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021966:	50                   	push   eax
c0021967:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002196b:	50                   	push   eax
c002196c:	56                   	push   esi
c002196d:	e8 1f ff ff ff       	call   c0021891 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021972:	83 c4 20             	add    esp,0x20
c0021975:	84 c0                	test   al,al
c0021977:	74 07                	je     c0021980 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021979:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002197e:	74 0b                	je     c002198b <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021980:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021984:	b8 01 00 00 00       	mov    eax,0x1
c0021989:	eb 3b                	jmp    c00219c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002198b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002198f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021993:	89 03                	mov    DWORD PTR [ebx],eax
c0021995:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002199c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219ae:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219b1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219b8:	8a 06                	mov    al,BYTE PTR [esi]
c00219ba:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219bd:	31 c0                	xor    eax,eax
c00219bf:	eb 05                	jmp    c00219c6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219c1:	b8 04 00 00 00       	mov    eax,0x4
c00219c6:	83 c4 10             	add    esp,0x10
c00219c9:	5b                   	pop    ebx
c00219ca:	5e                   	pop    esi
c00219cb:	5f                   	pop    edi
c00219cc:	c3                   	ret    
c00219cd:	90                   	nop

c00219ce <ISO9660::exists(char const*)>:
c00219ce:	83 ec 28             	sub    esp,0x28
c00219d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00219d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00219d9:	52                   	push   edx
c00219da:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00219dd:	52                   	push   edx
c00219de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219e2:	52                   	push   edx
c00219e3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219e7:	52                   	push   edx
c00219e8:	50                   	push   eax
c00219e9:	e8 a3 fe ff ff       	call   c0021891 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219ee:	83 c4 3c             	add    esp,0x3c
c00219f1:	c3                   	ret    

c00219f2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00219f2:	56                   	push   esi
c00219f3:	53                   	push   ebx
c00219f4:	83 ec 14             	sub    esp,0x14
c00219f7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00219fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00219ff:	85 db                	test   ebx,ebx
c0021a01:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a05:	0f 94 c2             	sete   dl
c0021a08:	85 f6                	test   esi,esi
c0021a0a:	0f 94 c0             	sete   al
c0021a0d:	08 c2                	or     dl,al
c0021a0f:	75 68                	jne    c0021a79 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a11:	85 c9                	test   ecx,ecx
c0021a13:	74 64                	je     c0021a79 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a15:	83 ec 0c             	sub    esp,0xc
c0021a18:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a1b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a1f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a2c:	50                   	push   eax
c0021a2d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a30:	50                   	push   eax
c0021a31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a35:	50                   	push   eax
c0021a36:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a3a:	50                   	push   eax
c0021a3b:	51                   	push   ecx
c0021a3c:	e8 50 fe ff ff       	call   c0021891 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a41:	83 c4 20             	add    esp,0x20
c0021a44:	ba 01 00 00 00       	mov    edx,0x1
c0021a49:	84 c0                	test   al,al
c0021a4b:	74 31                	je     c0021a7e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a51:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a58:	89 03                	mov    DWORD PTR [ebx],eax
c0021a5a:	ba 00 00 00 00       	mov    edx,0x0
c0021a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a63:	85 c0                	test   eax,eax
c0021a65:	0f 95 06             	setne  BYTE PTR [esi]
c0021a68:	74 14                	je     c0021a7e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a6a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a70:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a77:	eb 05                	jmp    c0021a7e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a79:	ba 04 00 00 00       	mov    edx,0x4
c0021a7e:	83 c4 14             	add    esp,0x14
c0021a81:	89 d0                	mov    eax,edx
c0021a83:	5b                   	pop    ebx
c0021a84:	5e                   	pop    esi
c0021a85:	c3                   	ret    

c0021a86 <ISO9660::openDir(char const*, void**)>:
c0021a86:	57                   	push   edi
c0021a87:	56                   	push   esi
c0021a88:	53                   	push   ebx
c0021a89:	83 ec 10             	sub    esp,0x10
c0021a8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a90:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021a94:	85 ff                	test   edi,edi
c0021a96:	74 7b                	je     c0021b13 <ISO9660::openDir(char const*, void**)+0x8d>
c0021a98:	85 f6                	test   esi,esi
c0021a9a:	74 77                	je     c0021b13 <ISO9660::openDir(char const*, void**)+0x8d>
c0021a9c:	83 ec 0c             	sub    esp,0xc
c0021a9f:	6a 1c                	push   0x1c
c0021aa1:	e8 f3 da fe ff       	call   c000f599 <malloc>
c0021aa6:	89 07                	mov    DWORD PTR [edi],eax
c0021aa8:	89 c3                	mov    ebx,eax
c0021aaa:	58                   	pop    eax
c0021aab:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021aaf:	50                   	push   eax
c0021ab0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021ab3:	50                   	push   eax
c0021ab4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ab8:	50                   	push   eax
c0021ab9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021abd:	50                   	push   eax
c0021abe:	56                   	push   esi
c0021abf:	e8 cd fd ff ff       	call   c0021891 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ac4:	83 c4 20             	add    esp,0x20
c0021ac7:	84 c0                	test   al,al
c0021ac9:	74 07                	je     c0021ad2 <ISO9660::openDir(char const*, void**)+0x4c>
c0021acb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ad0:	75 0b                	jne    c0021add <ISO9660::openDir(char const*, void**)+0x57>
c0021ad2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ad6:	b8 01 00 00 00       	mov    eax,0x1
c0021adb:	eb 3b                	jmp    c0021b18 <ISO9660::openDir(char const*, void**)+0x92>
c0021add:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ae5:	89 03                	mov    DWORD PTR [ebx],eax
c0021ae7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021aee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021af2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021af9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b03:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b0a:	8a 06                	mov    al,BYTE PTR [esi]
c0021b0c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b0f:	31 c0                	xor    eax,eax
c0021b11:	eb 05                	jmp    c0021b18 <ISO9660::openDir(char const*, void**)+0x92>
c0021b13:	b8 04 00 00 00       	mov    eax,0x4
c0021b18:	83 c4 10             	add    esp,0x10
c0021b1b:	5b                   	pop    ebx
c0021b1c:	5e                   	pop    esi
c0021b1d:	5f                   	pop    edi
c0021b1e:	c3                   	ret    
c0021b1f:	90                   	nop

c0021b20 <ISO9660::ISO9660()>:
c0021b20:	83 ec 0c             	sub    esp,0xc
c0021b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b27:	83 ec 0c             	sub    esp,0xc
c0021b2a:	50                   	push   eax
c0021b2b:	e8 86 0e ff ff       	call   c00129b6 <Filesystem::Filesystem()>
c0021b30:	83 c4 10             	add    esp,0x10
c0021b33:	ba 60 be 02 c0       	mov    edx,0xc002be60
c0021b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3c:	89 10                	mov    DWORD PTR [eax],edx
c0021b3e:	90                   	nop
c0021b3f:	83 c4 0c             	add    esp,0xc
c0021b42:	c3                   	ret    
c0021b43:	90                   	nop

c0021b44 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b44:	83 ec 1c             	sub    esp,0x1c
c0021b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b4b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b4f:	89 10                	mov    DWORD PTR [eax],edx
c0021b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b59:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b64:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b67:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b6c:	75 23                	jne    c0021b91 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b72:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b7b:	0f af c2             	imul   eax,edx
c0021b7e:	85 c0                	test   eax,eax
c0021b80:	79 03                	jns    c0021b85 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021b82:	83 c0 03             	add    eax,0x3
c0021b85:	c1 f8 02             	sar    eax,0x2
c0021b88:	05 a0 0f 00 00       	add    eax,0xfa0
c0021b8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b95:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021b99:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021ba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bab:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bb9:	c1 e0 02             	shl    eax,0x2
c0021bbc:	83 ec 0c             	sub    esp,0xc
c0021bbf:	50                   	push   eax
c0021bc0:	e8 d4 d9 fe ff       	call   c000f599 <malloc>
c0021bc5:	83 c4 10             	add    esp,0x10
c0021bc8:	89 c2                	mov    edx,eax
c0021bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bce:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bd1:	83 ec 04             	sub    esp,0x4
c0021bd4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bd8:	50                   	push   eax
c0021bd9:	6a 01                	push   0x1
c0021bdb:	6a 04                	push   0x4
c0021bdd:	e8 83 6f fe ff       	call   c0008b65 <src_new>
c0021be2:	83 c4 10             	add    esp,0x10
c0021be5:	89 c2                	mov    edx,eax
c0021be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021beb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf2:	85 c0                	test   eax,eax
c0021bf4:	74 10                	je     c0021c06 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021bf6:	83 ec 0c             	sub    esp,0xc
c0021bf9:	68 c0 be 02 c0       	push   0xc002bec0
c0021bfe:	e8 14 82 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0021c03:	83 c4 10             	add    esp,0x10
c0021c06:	a0 20 1c 03 c0       	mov    al,ds:0xc0031c20
c0021c0b:	83 f0 01             	xor    eax,0x1
c0021c0e:	84 c0                	test   al,al
c0021c10:	74 57                	je     c0021c69 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c12:	a1 dc be 02 c0       	mov    eax,ds:0xc002bedc
c0021c17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c1b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c23:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c2b:	7f 35                	jg     c0021c62 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c2d:	83 ec 0c             	sub    esp,0xc
c0021c30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c34:	e8 d6 53 00 00       	call   c002700f <__floatsisf>
c0021c39:	83 c4 10             	add    esp,0x10
c0021c3c:	8b 15 dc be 02 c0    	mov    edx,DWORD PTR ds:0xc002bedc
c0021c42:	83 ec 08             	sub    esp,0x8
c0021c45:	52                   	push   edx
c0021c46:	50                   	push   eax
c0021c47:	e8 d5 4f 00 00       	call   c0026c21 <__mulsf3>
c0021c4c:	83 c4 10             	add    esp,0x10
c0021c4f:	89 c2                	mov    edx,eax
c0021c51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c55:	89 14 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],edx
c0021c5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c60:	eb c1                	jmp    c0021c23 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021c62:	c6 05 20 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c20,0x1
c0021c69:	90                   	nop
c0021c6a:	83 c4 1c             	add    esp,0x1c
c0021c6d:	c3                   	ret    

c0021c6e <SoundChannel::~SoundChannel()>:
c0021c6e:	83 ec 0c             	sub    esp,0xc
c0021c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c75:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021c78:	83 ec 0c             	sub    esp,0xc
c0021c7b:	50                   	push   eax
c0021c7c:	e8 28 d9 fe ff       	call   c000f5a9 <free>
c0021c81:	83 c4 10             	add    esp,0x10
c0021c84:	90                   	nop
c0021c85:	83 c4 0c             	add    esp,0xc
c0021c88:	c3                   	ret    
c0021c89:	90                   	nop

c0021c8a <SoundChannel::getSampleRate()>:
c0021c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c90:	c3                   	ret    
c0021c91:	90                   	nop

c0021c92 <SoundChannel::getBits()>:
c0021c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c99:	c3                   	ret    

c0021c9a <SoundChannel::getBufferUsed()>:
c0021c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c9e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021ca1:	c3                   	ret    

c0021ca2 <SoundChannel::getBufferSize()>:
c0021ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ca6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ca9:	c3                   	ret    

c0021caa <SoundChannel::unbuffer(float*, int, int)>:
c0021caa:	56                   	push   esi
c0021cab:	53                   	push   ebx
c0021cac:	83 ec 40             	sub    esp,0x40
c0021caf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021cb3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021cb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021cbd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021cc1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021cc5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021cc9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021ccd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021cd1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021cd5:	e8 35 53 00 00       	call   c002700f <__floatsisf>
c0021cda:	5a                   	pop    edx
c0021cdb:	89 c6                	mov    esi,eax
c0021cdd:	ff 33                	push   DWORD PTR [ebx]
c0021cdf:	e8 2b 53 00 00       	call   c002700f <__floatsisf>
c0021ce4:	59                   	pop    ecx
c0021ce5:	5a                   	pop    edx
c0021ce6:	50                   	push   eax
c0021ce7:	56                   	push   esi
c0021ce8:	e8 f7 50 00 00       	call   c0026de4 <__divsf3>
c0021ced:	89 04 24             	mov    DWORD PTR [esp],eax
c0021cf0:	e8 ea 65 00 00       	call   c00282df <__extendsfdf2>
c0021cf5:	59                   	pop    ecx
c0021cf6:	5e                   	pop    esi
c0021cf7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021cfb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021cff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d07:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d0b:	50                   	push   eax
c0021d0c:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d0f:	e8 46 6a fe ff       	call   c000875a <src_process>
c0021d14:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d18:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d1b:	83 c4 0c             	add    esp,0xc
c0021d1e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d21:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d24:	29 d0                	sub    eax,edx
c0021d26:	c1 e0 02             	shl    eax,0x2
c0021d29:	50                   	push   eax
c0021d2a:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d2d:	50                   	push   eax
c0021d2e:	51                   	push   ecx
c0021d2f:	e8 54 e9 fd ff       	call   c0000688 <memmove>
c0021d34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d38:	83 c4 44             	add    esp,0x44
c0021d3b:	5b                   	pop    ebx
c0021d3c:	5e                   	pop    esi
c0021d3d:	c3                   	ret    

c0021d3e <SoundChannel::buffer16(short*, int)>:
c0021d3e:	55                   	push   ebp
c0021d3f:	57                   	push   edi
c0021d40:	56                   	push   esi
c0021d41:	53                   	push   ebx
c0021d42:	83 ec 1c             	sub    esp,0x1c
c0021d45:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d49:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d4c:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d4f:	0f 84 d2 00 00 00    	je     c0021e27 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d55:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d59:	85 ed                	test   ebp,ebp
c0021d5b:	0f 8e c6 00 00 00    	jle    c0021e27 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d65:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021d6a:	83 ec 0c             	sub    esp,0xc
c0021d6d:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021d70:	50                   	push   eax
c0021d71:	e8 99 52 00 00       	call   c002700f <__floatsisf>
c0021d76:	59                   	pop    ecx
c0021d77:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d7a:	5f                   	pop    edi
c0021d7b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021d7e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d81:	55                   	push   ebp
c0021d82:	50                   	push   eax
c0021d83:	e8 99 4e 00 00       	call   c0026c21 <__mulsf3>
c0021d88:	83 c4 10             	add    esp,0x10
c0021d8b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021d8e:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d91:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d94:	0f 84 99 00 00 00    	je     c0021e33 <SoundChannel::buffer16(short*, int)+0xf5>
c0021d9a:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021d9f:	74 78                	je     c0021e19 <SoundChannel::buffer16(short*, int)+0xdb>
c0021da1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021da5:	83 ec 0c             	sub    esp,0xc
c0021da8:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021dac:	50                   	push   eax
c0021dad:	e8 5d 52 00 00       	call   c002700f <__floatsisf>
c0021db2:	5f                   	pop    edi
c0021db3:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021db6:	5a                   	pop    edx
c0021db7:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dba:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dbd:	55                   	push   ebp
c0021dbe:	50                   	push   eax
c0021dbf:	e8 5d 4e 00 00       	call   c0026c21 <__mulsf3>
c0021dc4:	83 c4 10             	add    esp,0x10
c0021dc7:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021dca:	be 02 00 00 00       	mov    esi,0x2
c0021dcf:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021dd2:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021dd5:	74 46                	je     c0021e1d <SoundChannel::buffer16(short*, int)+0xdf>
c0021dd7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021ddb:	eb 36                	jmp    c0021e13 <SoundChannel::buffer16(short*, int)+0xd5>
c0021ddd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021de1:	83 ec 0c             	sub    esp,0xc
c0021de4:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021de8:	46                   	inc    esi
c0021de9:	50                   	push   eax
c0021dea:	e8 20 52 00 00       	call   c002700f <__floatsisf>
c0021def:	5a                   	pop    edx
c0021df0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021df3:	59                   	pop    ecx
c0021df4:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021df7:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dfe:	50                   	push   eax
c0021dff:	e8 1d 4e 00 00       	call   c0026c21 <__mulsf3>
c0021e04:	83 c4 10             	add    esp,0x10
c0021e07:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e0b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e0e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e11:	74 0a                	je     c0021e1d <SoundChannel::buffer16(short*, int)+0xdf>
c0021e13:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e17:	75 c4                	jne    c0021ddd <SoundChannel::buffer16(short*, int)+0x9f>
c0021e19:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e1d:	83 c4 1c             	add    esp,0x1c
c0021e20:	89 f0                	mov    eax,esi
c0021e22:	5b                   	pop    ebx
c0021e23:	5e                   	pop    esi
c0021e24:	5f                   	pop    edi
c0021e25:	5d                   	pop    ebp
c0021e26:	c3                   	ret    
c0021e27:	83 c4 1c             	add    esp,0x1c
c0021e2a:	31 f6                	xor    esi,esi
c0021e2c:	5b                   	pop    ebx
c0021e2d:	89 f0                	mov    eax,esi
c0021e2f:	5e                   	pop    esi
c0021e30:	5f                   	pop    edi
c0021e31:	5d                   	pop    ebp
c0021e32:	c3                   	ret    
c0021e33:	be 01 00 00 00       	mov    esi,0x1
c0021e38:	eb e3                	jmp    c0021e1d <SoundChannel::buffer16(short*, int)+0xdf>

c0021e3a <SoundChannel::buffer8(unsigned char*, int)>:
c0021e3a:	55                   	push   ebp
c0021e3b:	57                   	push   edi
c0021e3c:	56                   	push   esi
c0021e3d:	53                   	push   ebx
c0021e3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e42:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e46:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e49:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e4d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e50:	74 7a                	je     c0021ecc <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e52:	85 ff                	test   edi,edi
c0021e54:	7e 76                	jle    c0021ecc <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e56:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e5a:	8d 70 01             	lea    esi,[eax+0x1]
c0021e5d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e60:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e63:	8b 1c 9d 20 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7e0]
c0021e6a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e6d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e70:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e73:	74 5e                	je     c0021ed3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021e75:	83 ff 01             	cmp    edi,0x1
c0021e78:	74 4b                	je     c0021ec5 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021e7a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021e7e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e81:	8d 70 01             	lea    esi,[eax+0x1]
c0021e84:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e87:	8b 1c 9d 20 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7e0]
c0021e8e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e91:	b8 02 00 00 00       	mov    eax,0x2
c0021e96:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021e99:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021e9c:	75 23                	jne    c0021ec1 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021e9e:	eb 27                	jmp    c0021ec7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ea0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ea5:	8d 71 01             	lea    esi,[ecx+0x1]
c0021ea8:	40                   	inc    eax
c0021ea9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021eac:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021eaf:	8b 1c 9d 20 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7e0]
c0021eb6:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021eb9:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ebc:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ebf:	74 06                	je     c0021ec7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ec1:	39 c7                	cmp    edi,eax
c0021ec3:	75 db                	jne    c0021ea0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021ec5:	89 f8                	mov    eax,edi
c0021ec7:	5b                   	pop    ebx
c0021ec8:	5e                   	pop    esi
c0021ec9:	5f                   	pop    edi
c0021eca:	5d                   	pop    ebp
c0021ecb:	c3                   	ret    
c0021ecc:	5b                   	pop    ebx
c0021ecd:	31 c0                	xor    eax,eax
c0021ecf:	5e                   	pop    esi
c0021ed0:	5f                   	pop    edi
c0021ed1:	5d                   	pop    ebp
c0021ed2:	c3                   	ret    
c0021ed3:	b8 01 00 00 00       	mov    eax,0x1
c0021ed8:	eb ed                	jmp    c0021ec7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021eda <SoundDevice::SoundDevice(char const*)>:
c0021eda:	83 ec 1c             	sub    esp,0x1c
c0021edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ee1:	83 ec 08             	sub    esp,0x8
c0021ee4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021ee8:	50                   	push   eax
c0021ee9:	e8 fa 1d ff ff       	call   c0013ce8 <Device::Device(char const*)>
c0021eee:	83 c4 10             	add    esp,0x10
c0021ef1:	ba e8 be 02 c0       	mov    edx,0xc002bee8
c0021ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021efa:	89 10                	mov    DWORD PTR [eax],edx
c0021efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f00:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f0e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f18:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f20:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f25:	7f 19                	jg     c0021f40 <SoundDevice::SoundDevice(char const*)+0x66>
c0021f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f2f:	83 c2 54             	add    edx,0x54
c0021f32:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f3a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f3e:	eb e0                	jmp    c0021f20 <SoundDevice::SoundDevice(char const*)+0x46>
c0021f40:	90                   	nop
c0021f41:	83 c4 1c             	add    esp,0x1c
c0021f44:	c3                   	ret    
c0021f45:	90                   	nop

c0021f46 <SoundDevice::~SoundDevice()>:
c0021f46:	53                   	push   ebx
c0021f47:	83 ec 18             	sub    esp,0x18
c0021f4a:	ba e8 be 02 c0       	mov    edx,0xc002bee8
c0021f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f53:	89 10                	mov    DWORD PTR [eax],edx
c0021f55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f5d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f62:	7f 46                	jg     c0021faa <SoundDevice::~SoundDevice()+0x64>
c0021f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f6c:	83 c2 54             	add    edx,0x54
c0021f6f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021f73:	85 c0                	test   eax,eax
c0021f75:	74 2d                	je     c0021fa4 <SoundDevice::~SoundDevice()+0x5e>
c0021f77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f7f:	83 c2 54             	add    edx,0x54
c0021f82:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021f86:	85 db                	test   ebx,ebx
c0021f88:	74 1a                	je     c0021fa4 <SoundDevice::~SoundDevice()+0x5e>
c0021f8a:	83 ec 0c             	sub    esp,0xc
c0021f8d:	53                   	push   ebx
c0021f8e:	e8 db fc ff ff       	call   c0021c6e <SoundChannel::~SoundChannel()>
c0021f93:	83 c4 10             	add    esp,0x10
c0021f96:	83 ec 08             	sub    esp,0x8
c0021f99:	6a 2c                	push   0x2c
c0021f9b:	53                   	push   ebx
c0021f9c:	e8 32 06 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0021fa1:	83 c4 10             	add    esp,0x10
c0021fa4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fa8:	eb b3                	jmp    c0021f5d <SoundDevice::~SoundDevice()+0x17>
c0021faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fae:	83 ec 0c             	sub    esp,0xc
c0021fb1:	50                   	push   eax
c0021fb2:	e8 fb 19 ff ff       	call   c00139b2 <Device::~Device()>
c0021fb7:	83 c4 10             	add    esp,0x10
c0021fba:	90                   	nop
c0021fbb:	83 c4 18             	add    esp,0x18
c0021fbe:	5b                   	pop    ebx
c0021fbf:	c3                   	ret    

c0021fc0 <SoundDevice::~SoundDevice()>:
c0021fc0:	83 ec 0c             	sub    esp,0xc
c0021fc3:	83 ec 0c             	sub    esp,0xc
c0021fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fca:	e8 77 ff ff ff       	call   c0021f46 <SoundDevice::~SoundDevice()>
c0021fcf:	83 c4 10             	add    esp,0x10
c0021fd2:	83 ec 08             	sub    esp,0x8
c0021fd5:	68 e4 01 00 00       	push   0x1e4
c0021fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fde:	e8 f0 05 ff ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0021fe3:	83 c4 10             	add    esp,0x10
c0021fe6:	83 c4 0c             	add    esp,0xc
c0021fe9:	c3                   	ret    

c0021fea <SoundDevice::getFreeChannelNum()>:
c0021fea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021fee:	31 c0                	xor    eax,eax
c0021ff0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021ff8:	74 09                	je     c0022003 <SoundDevice::getFreeChannelNum()+0x19>
c0021ffa:	40                   	inc    eax
c0021ffb:	83 f8 20             	cmp    eax,0x20
c0021ffe:	75 f0                	jne    c0021ff0 <SoundDevice::getFreeChannelNum()+0x6>
c0022000:	83 c8 ff             	or     eax,0xffffffff
c0022003:	c3                   	ret    

c0022004 <SoundDevice::addChannel(SoundChannel*)>:
c0022004:	56                   	push   esi
c0022005:	53                   	push   ebx
c0022006:	51                   	push   ecx
c0022007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002200b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002200f:	53                   	push   ebx
c0022010:	e8 d5 ff ff ff       	call   c0021fea <SoundDevice::getFreeChannelNum()>
c0022015:	5a                   	pop    edx
c0022016:	83 f8 ff             	cmp    eax,0xffffffff
c0022019:	74 51                	je     c002206c <SoundDevice::addChannel(SoundChannel*)+0x68>
c002201b:	85 f6                	test   esi,esi
c002201d:	74 4d                	je     c002206c <SoundDevice::addChannel(SoundChannel*)+0x68>
c002201f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022026:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002202d:	75 30                	jne    c002205f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002202f:	83 ec 0c             	sub    esp,0xc
c0022032:	56                   	push   esi
c0022033:	e8 52 fc ff ff       	call   c0021c8a <SoundChannel::getSampleRate()>
c0022038:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002203e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022041:	e8 4c fc ff ff       	call   c0021c92 <SoundChannel::getBits()>
c0022046:	83 c4 0c             	add    esp,0xc
c0022049:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002204f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022051:	50                   	push   eax
c0022052:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022058:	53                   	push   ebx
c0022059:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002205c:	83 c4 10             	add    esp,0x10
c002205f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022065:	b8 01 00 00 00       	mov    eax,0x1
c002206a:	eb 03                	jmp    c002206f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002206c:	83 c8 ff             	or     eax,0xffffffff
c002206f:	5a                   	pop    edx
c0022070:	5b                   	pop    ebx
c0022071:	5e                   	pop    esi
c0022072:	c3                   	ret    
c0022073:	90                   	nop

c0022074 <SoundDevice::removeChannel(int)>:
c0022074:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002207c:	83 fa 1f             	cmp    edx,0x1f
c002207f:	77 23                	ja     c00220a4 <SoundDevice::removeChannel(int)+0x30>
c0022081:	8d 14 90             	lea    edx,[eax+edx*4]
c0022084:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002208b:	74 17                	je     c00220a4 <SoundDevice::removeChannel(int)+0x30>
c002208d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022097:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002209d:	75 05                	jne    c00220a4 <SoundDevice::removeChannel(int)+0x30>
c002209f:	8b 00                	mov    eax,DWORD PTR [eax]
c00220a1:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220a4:	c3                   	ret    
c00220a5:	90                   	nop

c00220a6 <SoundDevice::floatTo16(float*, short*, int)>:
c00220a6:	57                   	push   edi
c00220a7:	56                   	push   esi
c00220a8:	53                   	push   ebx
c00220a9:	31 db                	xor    ebx,ebx
c00220ab:	83 ec 10             	sub    esp,0x10
c00220ae:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220b2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220b6:	0f 8d d0 00 00 00    	jge    c002218c <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00220bc:	83 ec 0c             	sub    esp,0xc
c00220bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220c3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220c6:	e8 14 62 00 00       	call   c00282df <__extendsfdf2>
c00220cb:	83 c4 10             	add    esp,0x10
c00220ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220d6:	68 00 00 f0 3f       	push   0x3ff00000
c00220db:	6a 00                	push   0x0
c00220dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220e5:	e8 81 51 00 00       	call   c002726b <__adddf3>
c00220ea:	83 c4 10             	add    esp,0x10
c00220ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220f5:	68 00 00 e0 3f       	push   0x3fe00000
c00220fa:	6a 00                	push   0x0
c00220fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022100:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022104:	e8 df 57 00 00       	call   c00278e8 <__muldf3>
c0022109:	83 c4 10             	add    esp,0x10
c002210c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022114:	68 c0 ff df 40       	push   0x40dfffc0
c0022119:	6a 00                	push   0x0
c002211b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002211f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022123:	e8 c0 57 00 00       	call   c00278e8 <__muldf3>
c0022128:	59                   	pop    ecx
c0022129:	5f                   	pop    edi
c002212a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002212e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022132:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022136:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213a:	e8 7c 60 00 00       	call   c00281bb <__truncdfsf2>
c002213f:	5a                   	pop    edx
c0022140:	89 c7                	mov    edi,eax
c0022142:	59                   	pop    ecx
c0022143:	68 00 fe ff 46       	push   0x46fffe00
c0022148:	50                   	push   eax
c0022149:	e8 17 51 00 00       	call   c0027265 <__gesf2>
c002214e:	83 c4 10             	add    esp,0x10
c0022151:	85 c0                	test   eax,eax
c0022153:	78 08                	js     c002215d <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022155:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002215b:	eb 29                	jmp    c0022186 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002215d:	50                   	push   eax
c002215e:	50                   	push   eax
c002215f:	6a 00                	push   0x0
c0022161:	57                   	push   edi
c0022162:	e8 02 51 00 00       	call   c0027269 <__lesf2>
c0022167:	83 c4 10             	add    esp,0x10
c002216a:	85 c0                	test   eax,eax
c002216c:	7f 08                	jg     c0022176 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c002216e:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022174:	eb 10                	jmp    c0022186 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022176:	83 ec 0c             	sub    esp,0xc
c0022179:	57                   	push   edi
c002217a:	e8 fd 61 00 00       	call   c002837c <lrintf>
c002217f:	83 c4 10             	add    esp,0x10
c0022182:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022186:	43                   	inc    ebx
c0022187:	e9 26 ff ff ff       	jmp    c00220b2 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c002218c:	83 c4 10             	add    esp,0x10
c002218f:	5b                   	pop    ebx
c0022190:	5e                   	pop    esi
c0022191:	5f                   	pop    edi
c0022192:	c3                   	ret    
c0022193:	90                   	nop

c0022194 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022194:	57                   	push   edi
c0022195:	56                   	push   esi
c0022196:	53                   	push   ebx
c0022197:	31 db                	xor    ebx,ebx
c0022199:	83 ec 10             	sub    esp,0x10
c002219c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221a0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221a4:	0f 8d cb 00 00 00    	jge    c0022275 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221aa:	83 ec 0c             	sub    esp,0xc
c00221ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221b1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221b4:	e8 26 61 00 00       	call   c00282df <__extendsfdf2>
c00221b9:	83 c4 10             	add    esp,0x10
c00221bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221c4:	68 00 00 f0 3f       	push   0x3ff00000
c00221c9:	6a 00                	push   0x0
c00221cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221d3:	e8 93 50 00 00       	call   c002726b <__adddf3>
c00221d8:	83 c4 10             	add    esp,0x10
c00221db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221e3:	68 00 00 e0 3f       	push   0x3fe00000
c00221e8:	6a 00                	push   0x0
c00221ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f2:	e8 f1 56 00 00       	call   c00278e8 <__muldf3>
c00221f7:	83 c4 10             	add    esp,0x10
c00221fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022202:	68 00 00 60 40       	push   0x40600000
c0022207:	6a 00                	push   0x0
c0022209:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002220d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022211:	e8 d2 56 00 00       	call   c00278e8 <__muldf3>
c0022216:	59                   	pop    ecx
c0022217:	5f                   	pop    edi
c0022218:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002221c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022228:	e8 8e 5f 00 00       	call   c00281bb <__truncdfsf2>
c002222d:	5a                   	pop    edx
c002222e:	89 c7                	mov    edi,eax
c0022230:	59                   	pop    ecx
c0022231:	68 00 00 fe 42       	push   0x42fe0000
c0022236:	50                   	push   eax
c0022237:	e8 29 50 00 00       	call   c0027265 <__gesf2>
c002223c:	83 c4 10             	add    esp,0x10
c002223f:	85 c0                	test   eax,eax
c0022241:	78 06                	js     c0022249 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022243:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022247:	eb 26                	jmp    c002226f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022249:	50                   	push   eax
c002224a:	50                   	push   eax
c002224b:	6a 00                	push   0x0
c002224d:	57                   	push   edi
c002224e:	e8 16 50 00 00       	call   c0027269 <__lesf2>
c0022253:	83 c4 10             	add    esp,0x10
c0022256:	85 c0                	test   eax,eax
c0022258:	7f 06                	jg     c0022260 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002225a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002225e:	eb 0f                	jmp    c002226f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022260:	83 ec 0c             	sub    esp,0xc
c0022263:	57                   	push   edi
c0022264:	e8 13 61 00 00       	call   c002837c <lrintf>
c0022269:	83 c4 10             	add    esp,0x10
c002226c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002226f:	43                   	inc    ebx
c0022270:	e9 2b ff ff ff       	jmp    c00221a0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022275:	83 c4 10             	add    esp,0x10
c0022278:	5b                   	pop    ebx
c0022279:	5e                   	pop    esi
c002227a:	5f                   	pop    edi
c002227b:	c3                   	ret    

c002227c <SoundDevice::getAudio(int, float*, float*)>:
c002227c:	55                   	push   ebp
c002227d:	31 ed                	xor    ebp,ebp
c002227f:	57                   	push   edi
c0022280:	56                   	push   esi
c0022281:	31 f6                	xor    esi,esi
c0022283:	53                   	push   ebx
c0022284:	83 ec 20             	sub    esp,0x20
c0022287:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002228b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002228f:	c1 e0 02             	shl    eax,0x2
c0022292:	50                   	push   eax
c0022293:	6a 00                	push   0x0
c0022295:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022299:	e8 b2 e4 fd ff       	call   c0000750 <memset>
c002229e:	83 c4 10             	add    esp,0x10
c00222a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222a9:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00222b0:	85 c9                	test   ecx,ecx
c00222b2:	74 52                	je     c0022306 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00222b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222b8:	99                   	cdq    
c00222b9:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00222bf:	50                   	push   eax
c00222c0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00222ca:	51                   	push   ecx
c00222cb:	e8 da f9 ff ff       	call   c0021caa <SoundChannel::unbuffer(float*, int, int)>
c00222d0:	31 d2                	xor    edx,edx
c00222d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222d6:	83 c4 10             	add    esp,0x10
c00222d9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00222dd:	7d 1e                	jge    c00222fd <SoundDevice::getAudio(int, float*, float*)+0x81>
c00222df:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00222e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00222e7:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00222ea:	89 cf                	mov    edi,ecx
c00222ec:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00222f2:	0f af ca             	imul   ecx,edx
c00222f5:	42                   	inc    edx
c00222f6:	01 e9                	add    ecx,ebp
c00222f8:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00222fb:	eb dc                	jmp    c00222d9 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00222fd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022301:	45                   	inc    ebp
c0022302:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022306:	46                   	inc    esi
c0022307:	83 fe 20             	cmp    esi,0x20
c002230a:	75 9d                	jne    c00222a9 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002230c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022310:	83 c4 1c             	add    esp,0x1c
c0022313:	5b                   	pop    ebx
c0022314:	5e                   	pop    esi
c0022315:	5f                   	pop    edi
c0022316:	5d                   	pop    ebp
c0022317:	c3                   	ret    

c0022318 <PCI::open(int, int, void*)>:
c0022318:	83 ec 18             	sub    esp,0x18
c002231b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002231f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022323:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022329:	8b 10                	mov    edx,DWORD PTR [eax]
c002232b:	50                   	push   eax
c002232c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002232f:	31 c0                	xor    eax,eax
c0022331:	83 c4 1c             	add    esp,0x1c
c0022334:	c3                   	ret    
c0022335:	90                   	nop

c0022336 <PCI::close(int, int, void*)>:
c0022336:	31 c0                	xor    eax,eax
c0022338:	c3                   	ret    
c0022339:	90                   	nop

c002233a <PCI::PCI()>:
c002233a:	83 ec 0c             	sub    esp,0xc
c002233d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022341:	83 ec 08             	sub    esp,0x8
c0022344:	68 18 bf 02 c0       	push   0xc002bf18
c0022349:	50                   	push   eax
c002234a:	e8 fd 0f ff ff       	call   c001334c <Bus::Bus(char const*)>
c002234f:	83 c4 10             	add    esp,0x10
c0022352:	ba 04 c0 02 c0       	mov    edx,0xc002c004
c0022357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235b:	89 10                	mov    DWORD PTR [eax],edx
c002235d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022361:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002236b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236f:	a3 24 1c 03 c0       	mov    ds:0xc0031c24,eax
c0022374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022378:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002237e:	0f b6 d0             	movzx  edx,al
c0022381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022385:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002238c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022390:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022396:	0f b6 d0             	movzx  edx,al
c0022399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ac:	8d 50 01             	lea    edx,[eax+0x1]
c00223af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223b3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223b9:	0f b6 d0             	movzx  edx,al
c00223bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223c4:	83 c9 c0             	or     ecx,0xffffffc0
c00223c7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223cb:	90                   	nop
c00223cc:	83 c4 0c             	add    esp,0xc
c00223cf:	c3                   	ret    

c00223d0 <PCI::readBAR8(unsigned int, int)>:
c00223d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223d8:	f6 c2 01             	test   dl,0x1
c00223db:	74 07                	je     c00223e4 <PCI::readBAR8(unsigned int, int)+0x14>
c00223dd:	83 e2 fc             	and    edx,0xfffffffc
c00223e0:	01 c2                	add    edx,eax
c00223e2:	ec                   	in     al,dx
c00223e3:	c3                   	ret    
c00223e4:	83 e2 f0             	and    edx,0xfffffff0
c00223e7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00223ea:	c3                   	ret    
c00223eb:	90                   	nop

c00223ec <PCI::readBAR16(unsigned int, int)>:
c00223ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223f4:	f6 c2 01             	test   dl,0x1
c00223f7:	74 08                	je     c0022401 <PCI::readBAR16(unsigned int, int)+0x15>
c00223f9:	83 e2 fc             	and    edx,0xfffffffc
c00223fc:	01 c2                	add    edx,eax
c00223fe:	66 ed                	in     ax,dx
c0022400:	c3                   	ret    
c0022401:	83 e2 f0             	and    edx,0xfffffff0
c0022404:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022408:	c3                   	ret    
c0022409:	90                   	nop

c002240a <PCI::readBAR32(unsigned int, int)>:
c002240a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002240e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022412:	f6 c2 01             	test   dl,0x1
c0022415:	74 07                	je     c002241e <PCI::readBAR32(unsigned int, int)+0x14>
c0022417:	83 e2 fc             	and    edx,0xfffffffc
c002241a:	01 c2                	add    edx,eax
c002241c:	ed                   	in     eax,dx
c002241d:	c3                   	ret    
c002241e:	83 e2 f0             	and    edx,0xfffffff0
c0022421:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022424:	c3                   	ret    
c0022425:	90                   	nop

c0022426 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002242a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002242e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022432:	f6 c2 01             	test   dl,0x1
c0022435:	74 07                	je     c002243e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022437:	83 e2 fc             	and    edx,0xfffffffc
c002243a:	01 ca                	add    edx,ecx
c002243c:	ee                   	out    dx,al
c002243d:	c3                   	ret    
c002243e:	83 e2 f0             	and    edx,0xfffffff0
c0022441:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022444:	c3                   	ret    
c0022445:	90                   	nop

c0022446 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022446:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002244a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002244e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022452:	f6 c2 01             	test   dl,0x1
c0022455:	74 08                	je     c002245f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022457:	83 e2 fc             	and    edx,0xfffffffc
c002245a:	01 ca                	add    edx,ecx
c002245c:	66 ef                	out    dx,ax
c002245e:	c3                   	ret    
c002245f:	83 e2 f0             	and    edx,0xfffffff0
c0022462:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022466:	c3                   	ret    
c0022467:	90                   	nop

c0022468 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022468:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002246c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022470:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022474:	f6 c2 01             	test   dl,0x1
c0022477:	74 07                	je     c0022480 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022479:	83 e2 fc             	and    edx,0xfffffffc
c002247c:	01 ca                	add    edx,ecx
c002247e:	ef                   	out    dx,eax
c002247f:	c3                   	ret    
c0022480:	83 e2 f0             	and    edx,0xfffffff0
c0022483:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022486:	c3                   	ret    
c0022487:	90                   	nop

c0022488 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022488:	55                   	push   ebp
c0022489:	57                   	push   edi
c002248a:	56                   	push   esi
c002248b:	53                   	push   ebx
c002248c:	83 ec 0c             	sub    esp,0xc
c002248f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022493:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022497:	89 f0                	mov    eax,esi
c0022499:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002249d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224a1:	3c 07                	cmp    al,0x7
c00224a3:	76 10                	jbe    c00224b5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224a5:	83 ec 0c             	sub    esp,0xc
c00224a8:	68 20 bf 02 c0       	push   0xc002bf20
c00224ad:	e8 65 79 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00224b2:	83 c4 10             	add    esp,0x10
c00224b5:	80 fb 0f             	cmp    bl,0xf
c00224b8:	76 10                	jbe    c00224ca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00224ba:	83 ec 0c             	sub    esp,0xc
c00224bd:	68 50 bf 02 c0       	push   0xc002bf50
c00224c2:	e8 50 79 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00224c7:	83 c4 10             	add    esp,0x10
c00224ca:	8d 04 36             	lea    eax,[esi+esi*1]
c00224cd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224d2:	83 c8 f0             	or     eax,0xfffffff0
c00224d5:	ee                   	out    dx,al
c00224d6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00224db:	89 e8                	mov    eax,ebp
c00224dd:	ee                   	out    dx,al
c00224de:	83 c4 0c             	add    esp,0xc
c00224e1:	89 d8                	mov    eax,ebx
c00224e3:	66 81 e7 fc 00       	and    di,0xfc
c00224e8:	5b                   	pop    ebx
c00224e9:	c1 e0 08             	shl    eax,0x8
c00224ec:	5e                   	pop    esi
c00224ed:	09 f8                	or     eax,edi
c00224ef:	5f                   	pop    edi
c00224f0:	66 0d 00 c0          	or     ax,0xc000
c00224f4:	5d                   	pop    ebp
c00224f5:	c3                   	ret    

c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224f6:	57                   	push   edi
c00224f7:	56                   	push   esi
c00224f8:	53                   	push   ebx
c00224f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00224fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022501:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022507:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002250b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002250f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022513:	83 ff 01             	cmp    edi,0x1
c0022516:	75 3e                	jne    c0022556 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022518:	89 de                	mov    esi,ebx
c002251a:	0f b6 c0             	movzx  eax,al
c002251d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022523:	c1 e0 10             	shl    eax,0x10
c0022526:	0f b6 c9             	movzx  ecx,cl
c0022529:	09 f0                	or     eax,esi
c002252b:	c1 e1 08             	shl    ecx,0x8
c002252e:	0f b6 d2             	movzx  edx,dl
c0022531:	09 c8                	or     eax,ecx
c0022533:	c1 e2 0b             	shl    edx,0xb
c0022536:	09 d0                	or     eax,edx
c0022538:	ba f8 0c 00 00       	mov    edx,0xcf8
c002253d:	0d 00 00 00 80       	or     eax,0x80000000
c0022542:	ef                   	out    dx,eax
c0022543:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022548:	ed                   	in     eax,dx
c0022549:	83 e3 02             	and    ebx,0x2
c002254c:	0f b6 cb             	movzx  ecx,bl
c002254f:	c1 e1 03             	shl    ecx,0x3
c0022552:	d3 e8                	shr    eax,cl
c0022554:	eb 43                	jmp    c0022599 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022556:	83 ff 02             	cmp    edi,0x2
c0022559:	75 2c                	jne    c0022587 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c002255b:	83 ec 0c             	sub    esp,0xc
c002255e:	0f b6 c9             	movzx  ecx,cl
c0022561:	0f b6 d2             	movzx  edx,dl
c0022564:	0f b6 fb             	movzx  edi,bl
c0022567:	0f b6 c0             	movzx  eax,al
c002256a:	57                   	push   edi
c002256b:	51                   	push   ecx
c002256c:	52                   	push   edx
c002256d:	50                   	push   eax
c002256e:	56                   	push   esi
c002256f:	e8 14 ff ff ff       	call   c0022488 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022574:	89 c2                	mov    edx,eax
c0022576:	ed                   	in     eax,dx
c0022577:	83 e3 02             	and    ebx,0x2
c002257a:	83 c4 20             	add    esp,0x20
c002257d:	0f b6 cb             	movzx  ecx,bl
c0022580:	c1 e1 03             	shl    ecx,0x3
c0022583:	d3 e8                	shr    eax,cl
c0022585:	eb 12                	jmp    c0022599 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022587:	83 ec 0c             	sub    esp,0xc
c002258a:	68 80 bf 02 c0       	push   0xc002bf80
c002258f:	e8 83 78 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0022594:	83 c4 10             	add    esp,0x10
c0022597:	31 c0                	xor    eax,eax
c0022599:	5b                   	pop    ebx
c002259a:	5e                   	pop    esi
c002259b:	5f                   	pop    edi
c002259c:	c3                   	ret    
c002259d:	90                   	nop

c002259e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002259e:	83 ec 18             	sub    esp,0x18
c00225a1:	6a 00                	push   0x0
c00225a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225a8:	50                   	push   eax
c00225a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ae:	50                   	push   eax
c00225af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225b4:	50                   	push   eax
c00225b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225b9:	e8 38 ff ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225be:	83 c4 2c             	add    esp,0x2c
c00225c1:	c3                   	ret    

c00225c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00225c2:	83 ec 18             	sub    esp,0x18
c00225c5:	6a 0e                	push   0xe
c00225c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225cc:	50                   	push   eax
c00225cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d2:	50                   	push   eax
c00225d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d8:	50                   	push   eax
c00225d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225dd:	e8 14 ff ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225e2:	83 c4 2c             	add    esp,0x2c
c00225e5:	0f b6 c0             	movzx  eax,al
c00225e8:	c3                   	ret    
c00225e9:	90                   	nop

c00225ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00225ea:	55                   	push   ebp
c00225eb:	57                   	push   edi
c00225ec:	56                   	push   esi
c00225ed:	53                   	push   ebx
c00225ee:	83 ec 18             	sub    esp,0x18
c00225f1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00225f6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00225fb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022600:	6a 0a                	push   0xa
c0022602:	56                   	push   esi
c0022603:	55                   	push   ebp
c0022604:	57                   	push   edi
c0022605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022609:	e8 e8 fe ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002260e:	83 c4 14             	add    esp,0x14
c0022611:	89 c3                	mov    ebx,eax
c0022613:	6a 0a                	push   0xa
c0022615:	0f b6 db             	movzx  ebx,bl
c0022618:	56                   	push   esi
c0022619:	55                   	push   ebp
c002261a:	57                   	push   edi
c002261b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002261f:	e8 d2 fe ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022624:	83 c4 2c             	add    esp,0x2c
c0022627:	25 00 ff 00 00       	and    eax,0xff00
c002262c:	09 d8                	or     eax,ebx
c002262e:	5b                   	pop    ebx
c002262f:	5e                   	pop    esi
c0022630:	5f                   	pop    edi
c0022631:	5d                   	pop    ebp
c0022632:	c3                   	ret    
c0022633:	90                   	nop

c0022634 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022634:	83 ec 18             	sub    esp,0x18
c0022637:	6a 08                	push   0x8
c0022639:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002263e:	50                   	push   eax
c002263f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022644:	50                   	push   eax
c0022645:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002264a:	50                   	push   eax
c002264b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002264f:	e8 a2 fe ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022654:	83 c4 2c             	add    esp,0x2c
c0022657:	0f b6 c4             	movzx  eax,ah
c002265a:	c3                   	ret    
c002265b:	90                   	nop

c002265c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002265c:	83 ec 18             	sub    esp,0x18
c002265f:	6a 08                	push   0x8
c0022661:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022666:	50                   	push   eax
c0022667:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002266c:	50                   	push   eax
c002266d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022672:	50                   	push   eax
c0022673:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022677:	e8 7a fe ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002267c:	83 c4 2c             	add    esp,0x2c
c002267f:	c3                   	ret    

c0022680 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022680:	83 ec 18             	sub    esp,0x18
c0022683:	6a 3c                	push   0x3c
c0022685:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268a:	50                   	push   eax
c002268b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022690:	50                   	push   eax
c0022691:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022696:	50                   	push   eax
c0022697:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002269b:	e8 56 fe ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a0:	83 c4 2c             	add    esp,0x2c
c00226a3:	c3                   	ret    

c00226a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226a4:	83 ec 18             	sub    esp,0x18
c00226a7:	6a 18                	push   0x18
c00226a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ae:	50                   	push   eax
c00226af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b4:	50                   	push   eax
c00226b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ba:	50                   	push   eax
c00226bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226bf:	e8 32 fe ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226c4:	83 c4 2c             	add    esp,0x2c
c00226c7:	0f b6 c4             	movzx  eax,ah
c00226ca:	c3                   	ret    
c00226cb:	90                   	nop

c00226cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226cc:	55                   	push   ebp
c00226cd:	57                   	push   edi
c00226ce:	56                   	push   esi
c00226cf:	53                   	push   ebx
c00226d0:	83 ec 28             	sub    esp,0x28
c00226d3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00226d7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00226dc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00226e1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00226e6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00226ed:	8d 43 12             	lea    eax,[ebx+0x12]
c00226f0:	83 c3 10             	add    ebx,0x10
c00226f3:	0f b6 c0             	movzx  eax,al
c00226f6:	0f b6 db             	movzx  ebx,bl
c00226f9:	50                   	push   eax
c00226fa:	51                   	push   ecx
c00226fb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00226ff:	57                   	push   edi
c0022700:	55                   	push   ebp
c0022701:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022705:	e8 ec fd ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002270a:	83 c4 14             	add    esp,0x14
c002270d:	89 c6                	mov    esi,eax
c002270f:	53                   	push   ebx
c0022710:	c1 e6 10             	shl    esi,0x10
c0022713:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022717:	51                   	push   ecx
c0022718:	57                   	push   edi
c0022719:	55                   	push   ebp
c002271a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002271e:	e8 d3 fd ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022723:	83 c4 3c             	add    esp,0x3c
c0022726:	0f b7 c0             	movzx  eax,ax
c0022729:	5b                   	pop    ebx
c002272a:	09 f0                	or     eax,esi
c002272c:	5e                   	pop    esi
c002272d:	5f                   	pop    edi
c002272e:	5d                   	pop    ebp
c002272f:	c3                   	ret    

c0022730 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022730:	55                   	push   ebp
c0022731:	57                   	push   edi
c0022732:	56                   	push   esi
c0022733:	53                   	push   ebx
c0022734:	83 ec 0c             	sub    esp,0xc
c0022737:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002273b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002273f:	89 f5                	mov    ebp,esi
c0022741:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022747:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002274b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002274f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022753:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022757:	83 f9 01             	cmp    ecx,0x1
c002275a:	75 5d                	jne    c00227b9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002275c:	0f b6 c8             	movzx  ecx,al
c002275f:	0f b6 d2             	movzx  edx,dl
c0022762:	c1 e1 10             	shl    ecx,0x10
c0022765:	c1 e2 0b             	shl    edx,0xb
c0022768:	89 f0                	mov    eax,esi
c002276a:	25 fc 00 00 00       	and    eax,0xfc
c002276f:	09 c1                	or     ecx,eax
c0022771:	89 e8                	mov    eax,ebp
c0022773:	0f b6 c0             	movzx  eax,al
c0022776:	c1 e0 08             	shl    eax,0x8
c0022779:	09 c1                	or     ecx,eax
c002277b:	09 d1                	or     ecx,edx
c002277d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022782:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022788:	89 c8                	mov    eax,ecx
c002278a:	ef                   	out    dx,eax
c002278b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022790:	ed                   	in     eax,dx
c0022791:	0f b7 db             	movzx  ebx,bx
c0022794:	83 e6 02             	and    esi,0x2
c0022797:	74 0a                	je     c00227a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022799:	0f b7 d0             	movzx  edx,ax
c002279c:	c1 e3 10             	shl    ebx,0x10
c002279f:	09 d3                	or     ebx,edx
c00227a1:	eb 05                	jmp    c00227a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227a3:	66 31 c0             	xor    ax,ax
c00227a6:	09 c3                	or     ebx,eax
c00227a8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227ad:	89 c8                	mov    eax,ecx
c00227af:	ef                   	out    dx,eax
c00227b0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227b5:	89 d8                	mov    eax,ebx
c00227b7:	eb 41                	jmp    c00227fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227b9:	83 f9 02             	cmp    ecx,0x2
c00227bc:	75 45                	jne    c0022803 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00227be:	83 ec 0c             	sub    esp,0xc
c00227c1:	0f b6 d2             	movzx  edx,dl
c00227c4:	89 f1                	mov    ecx,esi
c00227c6:	0f b6 c0             	movzx  eax,al
c00227c9:	0f b6 f1             	movzx  esi,cl
c00227cc:	89 e9                	mov    ecx,ebp
c00227ce:	56                   	push   esi
c00227cf:	0f b6 c9             	movzx  ecx,cl
c00227d2:	51                   	push   ecx
c00227d3:	52                   	push   edx
c00227d4:	50                   	push   eax
c00227d5:	57                   	push   edi
c00227d6:	e8 ad fc ff ff       	call   c0022488 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227db:	89 c2                	mov    edx,eax
c00227dd:	ed                   	in     eax,dx
c00227de:	83 c4 20             	add    esp,0x20
c00227e1:	0f b7 db             	movzx  ebx,bx
c00227e4:	f6 c2 02             	test   dl,0x2
c00227e7:	74 0c                	je     c00227f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00227e9:	0f b7 c8             	movzx  ecx,ax
c00227ec:	89 d8                	mov    eax,ebx
c00227ee:	c1 e0 10             	shl    eax,0x10
c00227f1:	09 c8                	or     eax,ecx
c00227f3:	eb 05                	jmp    c00227fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227f5:	66 31 c0             	xor    ax,ax
c00227f8:	09 d8                	or     eax,ebx
c00227fa:	ef                   	out    dx,eax
c00227fb:	83 c4 0c             	add    esp,0xc
c00227fe:	5b                   	pop    ebx
c00227ff:	5e                   	pop    esi
c0022800:	5f                   	pop    edi
c0022801:	5d                   	pop    ebp
c0022802:	c3                   	ret    
c0022803:	c7 44 24 20 80 bf 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bf80
c002280b:	83 c4 0c             	add    esp,0xc
c002280e:	5b                   	pop    ebx
c002280f:	5e                   	pop    esi
c0022810:	5f                   	pop    edi
c0022811:	5d                   	pop    ebp
c0022812:	e9 00 76 ff ff       	jmp    c0019e17 <Krnl::panic(char const*)>
c0022817:	90                   	nop

c0022818 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022818:	55                   	push   ebp
c0022819:	57                   	push   edi
c002281a:	56                   	push   esi
c002281b:	53                   	push   ebx
c002281c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022822:	80 3d 30 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c30,0x0
c0022829:	0f 85 84 00 00 00    	jne    c00228b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c002282f:	83 ec 0c             	sub    esp,0xc
c0022832:	68 14 01 00 00       	push   0x114
c0022837:	e8 5d cd fe ff       	call   c000f599 <malloc>
c002283c:	83 c4 0c             	add    esp,0xc
c002283f:	89 c3                	mov    ebx,eax
c0022841:	ff 35 30 0e 03 c0    	push   DWORD PTR ds:0xc0030e30
c0022847:	68 86 bf 02 c0       	push   0xc002bf86
c002284c:	50                   	push   eax
c002284d:	e8 b8 03 ff ff       	call   c0012c0a <File::File(char const*, Process*)>
c0022852:	5a                   	pop    edx
c0022853:	59                   	pop    ecx
c0022854:	6a 01                	push   0x1
c0022856:	53                   	push   ebx
c0022857:	e8 12 04 ff ff       	call   c0012c6e <File::open(FileOpenMode)>
c002285c:	83 c4 0c             	add    esp,0xc
c002285f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022863:	50                   	push   eax
c0022864:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022868:	50                   	push   eax
c0022869:	53                   	push   ebx
c002286a:	e8 ab 06 ff ff       	call   c0012f1a <File::stat(unsigned long long*, bool*)>
c002286f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022873:	40                   	inc    eax
c0022874:	89 04 24             	mov    DWORD PTR [esp],eax
c0022877:	e8 1d cd fe ff       	call   c000f599 <malloc>
c002287c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022880:	a3 2c 1c 03 c0       	mov    ds:0xc0031c2c,eax
c0022885:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022889:	5e                   	pop    esi
c002288a:	8b 13                	mov    edx,DWORD PTR [ebx]
c002288c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022890:	51                   	push   ecx
c0022891:	50                   	push   eax
c0022892:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022896:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002289a:	53                   	push   ebx
c002289b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002289e:	83 c4 14             	add    esp,0x14
c00228a1:	53                   	push   ebx
c00228a2:	e8 25 04 ff ff       	call   c0012ccc <File::close()>
c00228a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228ab:	83 c4 10             	add    esp,0x10
c00228ae:	a3 28 1c 03 c0       	mov    ds:0xc0031c28,eax
c00228b3:	a1 28 1c 03 c0       	mov    eax,ds:0xc0031c28
c00228b8:	8b 15 2c 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c2c
c00228be:	89 04 24             	mov    DWORD PTR [esp],eax
c00228c1:	31 ff                	xor    edi,edi
c00228c3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00228cb:	31 f6                	xor    esi,esi
c00228cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00228d2:	31 db                	xor    ebx,ebx
c00228d4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00228dc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00228e1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00228e8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00228ec:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00228f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00228f7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00228fa:	0f 8e 6b 01 00 00    	jle    c0022a6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022900:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022903:	d4 40                	aam    0x40
c0022905:	d5 39                	aad    0x39
c0022907:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002290b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002290f:	d4 40                	aam    0x40
c0022911:	d5 39                	aad    0x39
c0022913:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022917:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c002291b:	d4 40                	aam    0x40
c002291d:	d5 39                	aad    0x39
c002291f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022923:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022927:	d4 40                	aam    0x40
c0022929:	d5 39                	aad    0x39
c002292b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002292f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022933:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022937:	3c 56                	cmp    al,0x56
c0022939:	74 45                	je     c0022980 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c002293b:	d4 40                	aam    0x40
c002293d:	d5 39                	aad    0x39
c002293f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022942:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022946:	0f b6 c9             	movzx  ecx,cl
c0022949:	c1 e1 04             	shl    ecx,0x4
c002294c:	d4 40                	aam    0x40
c002294e:	d5 39                	aad    0x39
c0022950:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022953:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022957:	0f b6 db             	movzx  ebx,bl
c002295a:	09 cb                	or     ebx,ecx
c002295c:	c1 e3 04             	shl    ebx,0x4
c002295f:	d4 40                	aam    0x40
c0022961:	d5 39                	aad    0x39
c0022963:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022966:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c002296a:	0f b6 c9             	movzx  ecx,cl
c002296d:	09 cb                	or     ebx,ecx
c002296f:	c1 e3 04             	shl    ebx,0x4
c0022972:	89 d9                	mov    ecx,ebx
c0022974:	d4 40                	aam    0x40
c0022976:	d5 39                	aad    0x39
c0022978:	8d 58 d0             	lea    ebx,[eax-0x30]
c002297b:	0f b6 db             	movzx  ebx,bl
c002297e:	09 cb                	or     ebx,ecx
c0022980:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022984:	80 f9 44             	cmp    cl,0x44
c0022987:	74 47                	je     c00229d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022989:	88 c8                	mov    al,cl
c002298b:	d4 40                	aam    0x40
c002298d:	d5 39                	aad    0x39
c002298f:	83 e8 30             	sub    eax,0x30
c0022992:	0f b6 e8             	movzx  ebp,al
c0022995:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022999:	c1 e5 04             	shl    ebp,0x4
c002299c:	d4 40                	aam    0x40
c002299e:	d5 39                	aad    0x39
c00229a0:	83 e8 30             	sub    eax,0x30
c00229a3:	0f b6 f0             	movzx  esi,al
c00229a6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229aa:	09 ee                	or     esi,ebp
c00229ac:	c1 e6 04             	shl    esi,0x4
c00229af:	d4 40                	aam    0x40
c00229b1:	d5 39                	aad    0x39
c00229b3:	83 e8 30             	sub    eax,0x30
c00229b6:	0f b6 e8             	movzx  ebp,al
c00229b9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00229bd:	09 ee                	or     esi,ebp
c00229bf:	c1 e6 04             	shl    esi,0x4
c00229c2:	89 f5                	mov    ebp,esi
c00229c4:	d4 40                	aam    0x40
c00229c6:	d5 39                	aad    0x39
c00229c8:	83 e8 30             	sub    eax,0x30
c00229cb:	0f b6 f0             	movzx  esi,al
c00229ce:	09 ee                	or     esi,ebp
c00229d0:	83 c7 10             	add    edi,0x10
c00229d3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00229d7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229da:	3c 0a                	cmp    al,0xa
c00229dc:	74 09                	je     c00229e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00229de:	45                   	inc    ebp
c00229df:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00229e2:	75 16                	jne    c00229fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00229e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00229e7:	3c 0a                	cmp    al,0xa
c00229e9:	0f 94 c0             	sete   al
c00229ec:	0f b6 c0             	movzx  eax,al
c00229ef:	01 c7                	add    edi,eax
c00229f1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00229f6:	75 0c                	jne    c0022a04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00229f8:	eb 15                	jmp    c0022a0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00229fa:	47                   	inc    edi
c00229fb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00229fe:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a02:	eb d3                	jmp    c00229d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a04:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a09:	0f 85 e8 fe ff ff    	jne    c00228f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a0f:	80 f9 44             	cmp    cl,0x44
c0022a12:	74 0b                	je     c0022a1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a14:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a19:	0f 85 d8 fe ff ff    	jne    c00228f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a1f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a23:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a27:	c1 e1 04             	shl    ecx,0x4
c0022a2a:	83 e8 30             	sub    eax,0x30
c0022a2d:	09 c8                	or     eax,ecx
c0022a2f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a33:	0f 85 be fe ff ff    	jne    c00228f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a39:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a3d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a41:	c1 e1 04             	shl    ecx,0x4
c0022a44:	83 e8 30             	sub    eax,0x30
c0022a47:	09 c8                	or     eax,ecx
c0022a49:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a4d:	0f 85 a4 fe ff ff    	jne    c00228f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a53:	50                   	push   eax
c0022a54:	50                   	push   eax
c0022a55:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a59:	50                   	push   eax
c0022a5a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022a61:	e8 a6 dd fd ff       	call   c000080c <strcpy>
c0022a66:	83 c4 10             	add    esp,0x10
c0022a69:	eb 15                	jmp    c0022a80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022a6b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a72:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022a7d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022a80:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a87:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022a8d:	5b                   	pop    ebx
c0022a8e:	5e                   	pop    esi
c0022a8f:	5f                   	pop    edi
c0022a90:	5d                   	pop    ebp
c0022a91:	c3                   	ret    

c0022a92 <PCI::checkBus(unsigned char)>:
c0022a92:	56                   	push   esi
c0022a93:	53                   	push   ebx
c0022a94:	31 db                	xor    ebx,ebx
c0022a96:	51                   	push   ecx
c0022a97:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a9c:	52                   	push   edx
c0022a9d:	53                   	push   ebx
c0022a9e:	43                   	inc    ebx
c0022a9f:	56                   	push   esi
c0022aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022aa4:	e8 37 03 00 00       	call   c0022de0 <PCI::checkDevice(unsigned char, unsigned char)>
c0022aa9:	83 c4 10             	add    esp,0x10
c0022aac:	83 fb 20             	cmp    ebx,0x20
c0022aaf:	75 eb                	jne    c0022a9c <PCI::checkBus(unsigned char)+0xa>
c0022ab1:	58                   	pop    eax
c0022ab2:	5b                   	pop    ebx
c0022ab3:	5e                   	pop    esi
c0022ab4:	c3                   	ret    
c0022ab5:	90                   	nop

c0022ab6 <PCI::foundDevice(PCIDeviceInfo)>:
c0022ab6:	55                   	push   ebp
c0022ab7:	57                   	push   edi
c0022ab8:	56                   	push   esi
c0022ab9:	53                   	push   ebx
c0022aba:	83 ec 1c             	sub    esp,0x1c
c0022abd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ac1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022ac7:	0f 84 52 01 00 00    	je     c0022c1f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022acd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ad1:	66 81 f9 06 04       	cmp    cx,0x406
c0022ad6:	75 2c                	jne    c0022b04 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022ad8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022add:	50                   	push   eax
c0022ade:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022ae3:	50                   	push   eax
c0022ae4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022ae9:	50                   	push   eax
c0022aea:	56                   	push   esi
c0022aeb:	e8 b4 fb ff ff       	call   c00226a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022af0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022af4:	0f b6 c0             	movzx  eax,al
c0022af7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022afb:	83 c4 2c             	add    esp,0x2c
c0022afe:	5b                   	pop    ebx
c0022aff:	5e                   	pop    esi
c0022b00:	5f                   	pop    edi
c0022b01:	5d                   	pop    ebp
c0022b02:	eb 8e                	jmp    c0022a92 <PCI::checkBus(unsigned char)>
c0022b04:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b08:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b12:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b16:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b1a:	88 d3                	mov    bl,dl
c0022b1c:	85 c0                	test   eax,eax
c0022b1e:	74 33                	je     c0022b53 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b20:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b23:	85 d2                	test   edx,edx
c0022b25:	74 28                	je     c0022b4f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b27:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b2d:	31 ef                	xor    edi,ebp
c0022b2f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b35:	75 18                	jne    c0022b4f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b3b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b41:	75 0c                	jne    c0022b4f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b43:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b49:	0f 84 d0 00 00 00    	je     c0022c1f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b51:	eb c9                	jmp    c0022b1c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b53:	66 81 f9 01 06       	cmp    cx,0x601
c0022b58:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b5c:	75 19                	jne    c0022b77 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b5e:	83 ec 0c             	sub    esp,0xc
c0022b61:	68 64 01 00 00       	push   0x164
c0022b66:	e8 2e ca fe ff       	call   c000f599 <malloc>
c0022b6b:	89 c5                	mov    ebp,eax
c0022b6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b70:	e8 85 0e 00 00       	call   c00239fa <SATABus::SATABus()>
c0022b75:	eb 1e                	jmp    c0022b95 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b77:	66 81 f9 01 01       	cmp    cx,0x101
c0022b7c:	75 60                	jne    c0022bde <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b7e:	83 ec 0c             	sub    esp,0xc
c0022b81:	68 70 02 00 00       	push   0x270
c0022b86:	e8 0e ca fe ff       	call   c000f599 <malloc>
c0022b8b:	89 c5                	mov    ebp,eax
c0022b8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b90:	e8 0f 03 00 00       	call   c0022ea4 <IDE::IDE()>
c0022b95:	58                   	pop    eax
c0022b96:	5a                   	pop    edx
c0022b97:	55                   	push   ebp
c0022b98:	56                   	push   esi
c0022b99:	e8 46 0f ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c0022b9e:	83 ec 1c             	sub    esp,0x1c
c0022ba1:	b9 09 00 00 00       	mov    ecx,0x9
c0022ba6:	fc                   	cld    
c0022ba7:	89 e7                	mov    edi,esp
c0022ba9:	89 de                	mov    esi,ebx
c0022bab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bad:	55                   	push   ebp
c0022bae:	e8 43 0e ff ff       	call   c00139f6 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022bb6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bba:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022bc2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022bca:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022bd2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bd5:	83 c4 4c             	add    esp,0x4c
c0022bd8:	5b                   	pop    ebx
c0022bd9:	5e                   	pop    esi
c0022bda:	5f                   	pop    edi
c0022bdb:	5d                   	pop    ebp
c0022bdc:	ff e0                	jmp    eax
c0022bde:	83 ec 0c             	sub    esp,0xc
c0022be1:	68 58 01 00 00       	push   0x158
c0022be6:	e8 ae c9 fe ff       	call   c000f599 <malloc>
c0022beb:	89 c5                	mov    ebp,eax
c0022bed:	58                   	pop    eax
c0022bee:	5a                   	pop    edx
c0022bef:	68 9f bf 02 c0       	push   0xc002bf9f
c0022bf4:	55                   	push   ebp
c0022bf5:	e8 f4 11 ff ff       	call   c0013dee <DriverlessDevice::DriverlessDevice(char const*)>
c0022bfa:	59                   	pop    ecx
c0022bfb:	5f                   	pop    edi
c0022bfc:	55                   	push   ebp
c0022bfd:	56                   	push   esi
c0022bfe:	e8 e1 0e ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c0022c03:	b9 09 00 00 00       	mov    ecx,0x9
c0022c08:	fc                   	cld    
c0022c09:	89 df                	mov    edi,ebx
c0022c0b:	89 de                	mov    esi,ebx
c0022c0d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c0f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c13:	83 c4 2c             	add    esp,0x2c
c0022c16:	5b                   	pop    ebx
c0022c17:	5e                   	pop    esi
c0022c18:	5f                   	pop    edi
c0022c19:	5d                   	pop    ebp
c0022c1a:	e9 d7 0d ff ff       	jmp    c00139f6 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c1f:	83 c4 1c             	add    esp,0x1c
c0022c22:	5b                   	pop    ebx
c0022c23:	5e                   	pop    esi
c0022c24:	5f                   	pop    edi
c0022c25:	5d                   	pop    ebp
c0022c26:	c3                   	ret    
c0022c27:	90                   	nop

c0022c28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c28:	55                   	push   ebp
c0022c29:	57                   	push   edi
c0022c2a:	56                   	push   esi
c0022c2b:	53                   	push   ebx
c0022c2c:	83 ec 68             	sub    esp,0x68
c0022c2f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c33:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c3e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c45:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c4e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c55:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c5e:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022c63:	6a 0c                	push   0xc
c0022c65:	57                   	push   edi
c0022c66:	53                   	push   ebx
c0022c67:	56                   	push   esi
c0022c68:	55                   	push   ebp
c0022c69:	e8 88 f8 ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c6e:	83 c4 20             	add    esp,0x20
c0022c71:	57                   	push   edi
c0022c72:	53                   	push   ebx
c0022c73:	56                   	push   esi
c0022c74:	55                   	push   ebp
c0022c75:	e8 70 f9 ff ff       	call   c00225ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c7a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022c7f:	57                   	push   edi
c0022c80:	53                   	push   ebx
c0022c81:	56                   	push   esi
c0022c82:	55                   	push   ebp
c0022c83:	e8 f8 f9 ff ff       	call   c0022680 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c88:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022c8c:	83 c4 14             	add    esp,0x14
c0022c8f:	6a 3c                	push   0x3c
c0022c91:	57                   	push   edi
c0022c92:	53                   	push   ebx
c0022c93:	56                   	push   esi
c0022c94:	55                   	push   ebp
c0022c95:	e8 5c f8 ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c9a:	0f b6 c4             	movzx  eax,ah
c0022c9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022ca1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022ca5:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022ca9:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0022cae:	83 c4 20             	add    esp,0x20
c0022cb1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cb7:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022cbe:	74 7c                	je     c0022d3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cc0:	31 c0                	xor    eax,eax
c0022cc2:	8b 15 e8 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8e8
c0022cc8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cce:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022cd4:	7e 66                	jle    c0022d3c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cd6:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022cd9:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022ce0:	39 cb                	cmp    ebx,ecx
c0022ce2:	75 55                	jne    c0022d39 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022ce4:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ceb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022cef:	75 48                	jne    c0022d39 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022cf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022cf5:	83 ec 0c             	sub    esp,0xc
c0022cf8:	68 b9 bf 02 c0       	push   0xc002bfb9
c0022cfd:	e8 a9 f9 fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0022d02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d06:	8b 15 e8 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8e8
c0022d0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d10:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d16:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d1e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d22:	52                   	push   edx
c0022d23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d27:	53                   	push   ebx
c0022d28:	68 de bf 02 c0       	push   0xc002bfde
c0022d2d:	e8 79 f9 fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0022d32:	83 c4 20             	add    esp,0x20
c0022d35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d39:	40                   	inc    eax
c0022d3a:	eb 86                	jmp    c0022cc2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d3c:	31 d2                	xor    edx,edx
c0022d3e:	83 ec 0c             	sub    esp,0xc
c0022d41:	57                   	push   edi
c0022d42:	53                   	push   ebx
c0022d43:	56                   	push   esi
c0022d44:	52                   	push   edx
c0022d45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d49:	55                   	push   ebp
c0022d4a:	e8 7d f9 ff ff       	call   c00226cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d53:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d57:	42                   	inc    edx
c0022d58:	83 c4 20             	add    esp,0x20
c0022d5b:	83 fa 06             	cmp    edx,0x6
c0022d5e:	75 de                	jne    c0022d3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022d60:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022d65:	83 ec 0c             	sub    esp,0xc
c0022d68:	86 e0                	xchg   al,ah
c0022d6a:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022d6f:	6a 02                	push   0x2
c0022d71:	57                   	push   edi
c0022d72:	53                   	push   ebx
c0022d73:	56                   	push   esi
c0022d74:	55                   	push   ebp
c0022d75:	e8 7c f7 ff ff       	call   c00224f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d7a:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022d7f:	83 c4 20             	add    esp,0x20
c0022d82:	57                   	push   edi
c0022d83:	53                   	push   ebx
c0022d84:	56                   	push   esi
c0022d85:	55                   	push   ebp
c0022d86:	e8 a9 f8 ff ff       	call   c0022634 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d8b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d8f:	57                   	push   edi
c0022d90:	53                   	push   ebx
c0022d91:	56                   	push   esi
c0022d92:	55                   	push   ebp
c0022d93:	e8 06 f8 ff ff       	call   c002259e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d98:	b9 09 00 00 00       	mov    ecx,0x9
c0022d9d:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022da2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022da6:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022daa:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022dae:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022db2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022db6:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022dba:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022dbe:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022dc2:	83 ec 0c             	sub    esp,0xc
c0022dc5:	fc                   	cld    
c0022dc6:	89 e7                	mov    edi,esp
c0022dc8:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022dcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dce:	55                   	push   ebp
c0022dcf:	e8 e2 fc ff ff       	call   c0022ab6 <PCI::foundDevice(PCIDeviceInfo)>
c0022dd4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022dda:	5b                   	pop    ebx
c0022ddb:	5e                   	pop    esi
c0022ddc:	5f                   	pop    edi
c0022ddd:	5d                   	pop    ebp
c0022dde:	c3                   	ret    
c0022ddf:	90                   	nop

c0022de0 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022de0:	55                   	push   ebp
c0022de1:	57                   	push   edi
c0022de2:	56                   	push   esi
c0022de3:	53                   	push   ebx
c0022de4:	83 ec 0c             	sub    esp,0xc
c0022de7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022deb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022df0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022df5:	6a 00                	push   0x0
c0022df7:	56                   	push   esi
c0022df8:	57                   	push   edi
c0022df9:	55                   	push   ebp
c0022dfa:	e8 9f f7 ff ff       	call   c002259e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dff:	6a 00                	push   0x0
c0022e01:	56                   	push   esi
c0022e02:	57                   	push   edi
c0022e03:	55                   	push   ebp
c0022e04:	e8 1f fe ff ff       	call   c0022c28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e09:	83 c4 20             	add    esp,0x20
c0022e0c:	6a 00                	push   0x0
c0022e0e:	56                   	push   esi
c0022e0f:	57                   	push   edi
c0022e10:	55                   	push   ebp
c0022e11:	e8 ac f7 ff ff       	call   c00225c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e16:	83 c4 10             	add    esp,0x10
c0022e19:	84 c0                	test   al,al
c0022e1b:	79 27                	jns    c0022e44 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e1d:	bb 01 00 00 00       	mov    ebx,0x1
c0022e22:	53                   	push   ebx
c0022e23:	56                   	push   esi
c0022e24:	57                   	push   edi
c0022e25:	55                   	push   ebp
c0022e26:	e8 73 f7 ff ff       	call   c002259e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e2b:	83 c4 10             	add    esp,0x10
c0022e2e:	66 40                	inc    ax
c0022e30:	74 0c                	je     c0022e3e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e32:	53                   	push   ebx
c0022e33:	56                   	push   esi
c0022e34:	57                   	push   edi
c0022e35:	55                   	push   ebp
c0022e36:	e8 ed fd ff ff       	call   c0022c28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e3b:	83 c4 10             	add    esp,0x10
c0022e3e:	43                   	inc    ebx
c0022e3f:	83 fb 08             	cmp    ebx,0x8
c0022e42:	75 de                	jne    c0022e22 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e44:	83 c4 0c             	add    esp,0xc
c0022e47:	5b                   	pop    ebx
c0022e48:	5e                   	pop    esi
c0022e49:	5f                   	pop    edi
c0022e4a:	5d                   	pop    ebp
c0022e4b:	c3                   	ret    

c0022e4c <PCI::detect()>:
c0022e4c:	56                   	push   esi
c0022e4d:	53                   	push   ebx
c0022e4e:	53                   	push   ebx
c0022e4f:	31 db                	xor    ebx,ebx
c0022e51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e55:	6a 00                	push   0x0
c0022e57:	6a 00                	push   0x0
c0022e59:	6a 00                	push   0x0
c0022e5b:	56                   	push   esi
c0022e5c:	e8 61 f7 ff ff       	call   c00225c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e61:	83 c4 10             	add    esp,0x10
c0022e64:	a8 80                	test   al,0x80
c0022e66:	75 21                	jne    c0022e89 <PCI::detect()+0x3d>
c0022e68:	51                   	push   ecx
c0022e69:	51                   	push   ecx
c0022e6a:	6a 00                	push   0x0
c0022e6c:	56                   	push   esi
c0022e6d:	e8 20 fc ff ff       	call   c0022a92 <PCI::checkBus(unsigned char)>
c0022e72:	83 c4 10             	add    esp,0x10
c0022e75:	eb 24                	jmp    c0022e9b <PCI::detect()+0x4f>
c0022e77:	52                   	push   edx
c0022e78:	52                   	push   edx
c0022e79:	53                   	push   ebx
c0022e7a:	43                   	inc    ebx
c0022e7b:	56                   	push   esi
c0022e7c:	e8 11 fc ff ff       	call   c0022a92 <PCI::checkBus(unsigned char)>
c0022e81:	83 c4 10             	add    esp,0x10
c0022e84:	83 fb 08             	cmp    ebx,0x8
c0022e87:	74 12                	je     c0022e9b <PCI::detect()+0x4f>
c0022e89:	53                   	push   ebx
c0022e8a:	6a 00                	push   0x0
c0022e8c:	6a 00                	push   0x0
c0022e8e:	56                   	push   esi
c0022e8f:	e8 0a f7 ff ff       	call   c002259e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e94:	83 c4 10             	add    esp,0x10
c0022e97:	66 40                	inc    ax
c0022e99:	74 dc                	je     c0022e77 <PCI::detect()+0x2b>
c0022e9b:	58                   	pop    eax
c0022e9c:	5b                   	pop    ebx
c0022e9d:	5e                   	pop    esi
c0022e9e:	c3                   	ret    
c0022e9f:	90                   	nop

c0022ea0 <IDE::close(int, int, void*)>:
c0022ea0:	83 c8 ff             	or     eax,0xffffffff
c0022ea3:	c3                   	ret    

c0022ea4 <IDE::IDE()>:
c0022ea4:	83 ec 0c             	sub    esp,0xc
c0022ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eab:	83 ec 08             	sub    esp,0x8
c0022eae:	68 28 c0 02 c0       	push   0xc002c028
c0022eb3:	50                   	push   eax
c0022eb4:	e8 d9 0f ff ff       	call   c0013e92 <HardDiskController::HardDiskController(char const*)>
c0022eb9:	83 c4 10             	add    esp,0x10
c0022ebc:	ba b8 c0 02 c0       	mov    edx,0xc002c0b8
c0022ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec5:	89 10                	mov    DWORD PTR [eax],edx
c0022ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022ed2:	90                   	nop
c0022ed3:	83 c4 0c             	add    esp,0xc
c0022ed6:	c3                   	ret    
c0022ed7:	90                   	nop

c0022ed8 <IDE::prepareInterrupt(unsigned char)>:
c0022ed8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022edd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022ee1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022ee9:	c3                   	ret    

c0022eea <selectDrive(unsigned char, unsigned char)>:
c0022eea:	c3                   	ret    
c0022eeb:	90                   	nop

c0022eec <IDE::getBase(unsigned char)>:
c0022eec:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ef5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022efd:	c3                   	ret    

c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022efe:	55                   	push   ebp
c0022eff:	57                   	push   edi
c0022f00:	56                   	push   esi
c0022f01:	53                   	push   ebx
c0022f02:	83 ec 1c             	sub    esp,0x1c
c0022f05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f0d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f10:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f18:	80 f9 03             	cmp    cl,0x3
c0022f1b:	77 51                	ja     c0022f6e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f21:	0f b6 f2             	movzx  esi,dl
c0022f24:	0f b6 db             	movzx  ebx,bl
c0022f27:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f2a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f2e:	83 ca 80             	or     edx,0xffffff80
c0022f31:	0f b6 d2             	movzx  edx,dl
c0022f34:	52                   	push   edx
c0022f35:	6a 0c                	push   0xc
c0022f37:	56                   	push   esi
c0022f38:	57                   	push   edi
c0022f39:	e8 c0 ff ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f3e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f47:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f4b:	ee                   	out    dx,al
c0022f4c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f51:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f55:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f59:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f5d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f65:	83 c4 2c             	add    esp,0x2c
c0022f68:	5b                   	pop    ebx
c0022f69:	5e                   	pop    esi
c0022f6a:	5f                   	pop    edi
c0022f6b:	5d                   	pop    ebp
c0022f6c:	eb 90                	jmp    c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f6e:	80 fb 07             	cmp    bl,0x7
c0022f71:	77 12                	ja     c0022f85 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f73:	0f b6 d2             	movzx  edx,dl
c0022f76:	0f b6 db             	movzx  ebx,bl
c0022f79:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f81:	89 da                	mov    edx,ebx
c0022f83:	eb 2f                	jmp    c0022fb4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f85:	80 fb 0d             	cmp    bl,0xd
c0022f88:	77 13                	ja     c0022f9d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f8a:	0f b6 d2             	movzx  edx,dl
c0022f8d:	0f b6 db             	movzx  ebx,bl
c0022f90:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f97:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f9b:	eb 17                	jmp    c0022fb4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f9d:	80 fb 15             	cmp    bl,0x15
c0022fa0:	77 13                	ja     c0022fb5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022fa2:	0f b6 d2             	movzx  edx,dl
c0022fa5:	0f b6 db             	movzx  ebx,bl
c0022fa8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022fb0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022fb4:	ee                   	out    dx,al
c0022fb5:	83 c4 1c             	add    esp,0x1c
c0022fb8:	5b                   	pop    ebx
c0022fb9:	5e                   	pop    esi
c0022fba:	5f                   	pop    edi
c0022fbb:	5d                   	pop    ebp
c0022fbc:	c3                   	ret    
c0022fbd:	90                   	nop

c0022fbe <IDE::read(unsigned char, unsigned char)>:
c0022fbe:	55                   	push   ebp
c0022fbf:	57                   	push   edi
c0022fc0:	56                   	push   esi
c0022fc1:	53                   	push   ebx
c0022fc2:	83 ec 1c             	sub    esp,0x1c
c0022fc5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fc9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fcd:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022fd0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fd4:	3c 03                	cmp    al,0x3
c0022fd6:	77 43                	ja     c002301b <IDE::read(unsigned char, unsigned char)+0x5d>
c0022fd8:	0f b6 f2             	movzx  esi,dl
c0022fdb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fde:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022fe2:	83 c8 80             	or     eax,0xffffff80
c0022fe5:	0f b6 c0             	movzx  eax,al
c0022fe8:	50                   	push   eax
c0022fe9:	6a 0c                	push   0xc
c0022feb:	56                   	push   esi
c0022fec:	57                   	push   edi
c0022fed:	e8 0c ff ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ff2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022ff7:	0f b6 c3             	movzx  eax,bl
c0022ffa:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022ffe:	ec                   	in     al,dx
c0022fff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023003:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023008:	52                   	push   edx
c0023009:	6a 0c                	push   0xc
c002300b:	56                   	push   esi
c002300c:	57                   	push   edi
c002300d:	e8 ec fe ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023012:	83 c4 20             	add    esp,0x20
c0023015:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023019:	eb 49                	jmp    c0023064 <IDE::read(unsigned char, unsigned char)+0xa6>
c002301b:	80 fb 07             	cmp    bl,0x7
c002301e:	77 12                	ja     c0023032 <IDE::read(unsigned char, unsigned char)+0x74>
c0023020:	0f b6 d2             	movzx  edx,dl
c0023023:	0f b6 c3             	movzx  eax,bl
c0023026:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002302e:	89 c2                	mov    edx,eax
c0023030:	eb 31                	jmp    c0023063 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023032:	80 fb 0d             	cmp    bl,0xd
c0023035:	77 13                	ja     c002304a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023037:	0f b6 d2             	movzx  edx,dl
c002303a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023041:	0f b6 d3             	movzx  edx,bl
c0023044:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023048:	eb 19                	jmp    c0023063 <IDE::read(unsigned char, unsigned char)+0xa5>
c002304a:	31 c0                	xor    eax,eax
c002304c:	80 fb 15             	cmp    bl,0x15
c002304f:	77 13                	ja     c0023064 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023051:	0f b6 d2             	movzx  edx,dl
c0023054:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002305c:	0f b6 d3             	movzx  edx,bl
c002305f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023063:	ec                   	in     al,dx
c0023064:	83 c4 1c             	add    esp,0x1c
c0023067:	5b                   	pop    ebx
c0023068:	5e                   	pop    esi
c0023069:	5f                   	pop    edi
c002306a:	5d                   	pop    ebp
c002306b:	c3                   	ret    

c002306c <IDE::waitInterrupt(unsigned char)>:
c002306c:	55                   	push   ebp
c002306d:	57                   	push   edi
c002306e:	56                   	push   esi
c002306f:	53                   	push   ebx
c0023070:	31 db                	xor    ebx,ebx
c0023072:	83 ec 0c             	sub    esp,0xc
c0023075:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023079:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002307e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023086:	89 e8                	mov    eax,ebp
c0023088:	84 c0                	test   al,al
c002308a:	75 34                	jne    c00230c0 <IDE::waitInterrupt(unsigned char)+0x54>
c002308c:	52                   	push   edx
c002308d:	6a 0c                	push   0xc
c002308f:	56                   	push   esi
c0023090:	57                   	push   edi
c0023091:	e8 28 ff ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c0023096:	83 c4 10             	add    esp,0x10
c0023099:	a8 01                	test   al,0x1
c002309b:	75 2b                	jne    c00230c8 <IDE::waitInterrupt(unsigned char)+0x5c>
c002309d:	f6 c3 04             	test   bl,0x4
c00230a0:	75 16                	jne    c00230b8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230a2:	83 fb 32             	cmp    ebx,0x32
c00230a5:	7e 11                	jle    c00230b8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230a7:	50                   	push   eax
c00230a8:	50                   	push   eax
c00230a9:	6a 00                	push   0x0
c00230ab:	68 80 96 98 00       	push   0x989680
c00230b0:	e8 c6 ab ff ff       	call   c001dc7b <nanoSleep(unsigned long long)>
c00230b5:	83 c4 10             	add    esp,0x10
c00230b8:	83 fb 3c             	cmp    ebx,0x3c
c00230bb:	74 0b                	je     c00230c8 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230bd:	43                   	inc    ebx
c00230be:	eb be                	jmp    c002307e <IDE::waitInterrupt(unsigned char)+0x12>
c00230c0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230c8:	83 c4 0c             	add    esp,0xc
c00230cb:	89 e8                	mov    eax,ebp
c00230cd:	5b                   	pop    ebx
c00230ce:	5e                   	pop    esi
c00230cf:	5f                   	pop    edi
c00230d0:	5d                   	pop    ebp
c00230d1:	c3                   	ret    

c00230d2 <ideChannel0IRQHandler(regs*, void*)>:
c00230d2:	83 ec 10             	sub    esp,0x10
c00230d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230d9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00230e0:	6a 07                	push   0x7
c00230e2:	6a 00                	push   0x0
c00230e4:	50                   	push   eax
c00230e5:	e8 d4 fe ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00230ea:	83 c4 1c             	add    esp,0x1c
c00230ed:	c3                   	ret    

c00230ee <ideChannel1IRQHandler(regs*, void*)>:
c00230ee:	83 ec 10             	sub    esp,0x10
c00230f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230f5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230fc:	6a 07                	push   0x7
c00230fe:	6a 01                	push   0x1
c0023100:	50                   	push   eax
c0023101:	e8 b8 fe ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c0023106:	83 c4 1c             	add    esp,0x1c
c0023109:	c3                   	ret    

c002310a <IDE::enableIRQs(unsigned char, bool)>:
c002310a:	57                   	push   edi
c002310b:	56                   	push   esi
c002310c:	be 04 00 00 00       	mov    esi,0x4
c0023111:	53                   	push   ebx
c0023112:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023117:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002311b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023120:	0f 94 c0             	sete   al
c0023123:	d1 e0                	shl    eax,1
c0023125:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002312c:	0f b6 c0             	movzx  eax,al
c002312f:	50                   	push   eax
c0023130:	6a 0c                	push   0xc
c0023132:	57                   	push   edi
c0023133:	53                   	push   ebx
c0023134:	e8 c5 fd ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023139:	83 c4 10             	add    esp,0x10
c002313c:	50                   	push   eax
c002313d:	6a 0c                	push   0xc
c002313f:	57                   	push   edi
c0023140:	53                   	push   ebx
c0023141:	e8 78 fe ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c0023146:	83 c4 10             	add    esp,0x10
c0023149:	4e                   	dec    esi
c002314a:	75 f0                	jne    c002313c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002314c:	5b                   	pop    ebx
c002314d:	5e                   	pop    esi
c002314e:	5f                   	pop    edi
c002314f:	c3                   	ret    

c0023150 <IDE::open(int, int, void*)>:
c0023150:	55                   	push   ebp
c0023151:	57                   	push   edi
c0023152:	56                   	push   esi
c0023153:	53                   	push   ebx
c0023154:	83 ec 1c             	sub    esp,0x1c
c0023157:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002315b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023164:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002316d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023174:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002317b:	0f 85 b0 02 00 00    	jne    c0023431 <IDE::open(int, int, void*)+0x2e1>
c0023181:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023187:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002318b:	83 e0 7f             	and    eax,0x7f
c002318e:	3c 05                	cmp    al,0x5
c0023190:	74 04                	je     c0023196 <IDE::open(int, int, void*)+0x46>
c0023192:	3c 0f                	cmp    al,0xf
c0023194:	75 32                	jne    c00231c8 <IDE::open(int, int, void*)+0x78>
c0023196:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002319c:	83 e0 fc             	and    eax,0xfffffffc
c002319f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231a6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231ac:	83 e0 fc             	and    eax,0xfffffffc
c00231af:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231b6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231bc:	83 e0 fc             	and    eax,0xfffffffc
c00231bf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231c6:	eb 14                	jmp    c00231dc <IDE::open(int, int, void*)+0x8c>
c00231c8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231d2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231dc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00231e3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00231ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231ee:	89 c6                	mov    esi,eax
c00231f0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231f5:	c1 e6 10             	shl    esi,0x10
c00231f8:	89 e8                	mov    eax,ebp
c00231fa:	89 fa                	mov    edx,edi
c00231fc:	c1 e0 0b             	shl    eax,0xb
c00231ff:	09 f0                	or     eax,esi
c0023201:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023208:	c1 e6 08             	shl    esi,0x8
c002320b:	09 c6                	or     esi,eax
c002320d:	89 f0                	mov    eax,esi
c002320f:	0d 08 00 00 80       	or     eax,0x80000008
c0023214:	ef                   	out    dx,eax
c0023215:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002321a:	89 ca                	mov    edx,ecx
c002321c:	ed                   	in     eax,dx
c002321d:	c1 e8 10             	shr    eax,0x10
c0023220:	3d ff ff 00 00       	cmp    eax,0xffff
c0023225:	0f 84 f5 00 00 00    	je     c0023320 <IDE::open(int, int, void*)+0x1d0>
c002322b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023231:	89 fa                	mov    edx,edi
c0023233:	89 f0                	mov    eax,esi
c0023235:	ef                   	out    dx,eax
c0023236:	b0 fe                	mov    al,0xfe
c0023238:	89 ca                	mov    edx,ecx
c002323a:	ee                   	out    dx,al
c002323b:	89 f0                	mov    eax,esi
c002323d:	89 fa                	mov    edx,edi
c002323f:	ef                   	out    dx,eax
c0023240:	89 ca                	mov    edx,ecx
c0023242:	ed                   	in     eax,dx
c0023243:	3c fe                	cmp    al,0xfe
c0023245:	0f 85 a9 00 00 00    	jne    c00232f4 <IDE::open(int, int, void*)+0x1a4>
c002324b:	8b 15 e8 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8e8
c0023251:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023258:	74 33                	je     c002328d <IDE::open(int, int, void*)+0x13d>
c002325a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023260:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023264:	40                   	inc    eax
c0023265:	83 ec 0c             	sub    esp,0xc
c0023268:	0f b6 c0             	movzx  eax,al
c002326b:	50                   	push   eax
c002326c:	55                   	push   ebp
c002326d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023271:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023277:	51                   	push   ecx
c0023278:	e8 53 48 ff ff       	call   c0017ad0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002327d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023282:	83 c4 1c             	add    esp,0x1c
c0023285:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002328b:	eb 0a                	jmp    c0023297 <IDE::open(int, int, void*)+0x147>
c002328d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023297:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002329e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232a5:	c1 e1 10             	shl    ecx,0x10
c00232a8:	c1 e0 08             	shl    eax,0x8
c00232ab:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232b0:	09 c1                	or     ecx,eax
c00232b2:	89 fa                	mov    edx,edi
c00232b4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232bb:	c1 e0 0b             	shl    eax,0xb
c00232be:	09 c1                	or     ecx,eax
c00232c0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232c6:	89 c8                	mov    eax,ecx
c00232c8:	ef                   	out    dx,eax
c00232c9:	be fc 0c 00 00       	mov    esi,0xcfc
c00232ce:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232d4:	89 f2                	mov    edx,esi
c00232d6:	ee                   	out    dx,al
c00232d7:	89 c8                	mov    eax,ecx
c00232d9:	89 fa                	mov    edx,edi
c00232db:	ef                   	out    dx,eax
c00232dc:	89 f2                	mov    edx,esi
c00232de:	ed                   	in     eax,dx
c00232df:	0f b6 c0             	movzx  eax,al
c00232e2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00232e8:	74 46                	je     c0023330 <IDE::open(int, int, void*)+0x1e0>
c00232ea:	83 ec 0c             	sub    esp,0xc
c00232ed:	68 40 c0 02 c0       	push   0xc002c040
c00232f2:	eb 34                	jmp    c0023328 <IDE::open(int, int, void*)+0x1d8>
c00232f4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232fd:	75 17                	jne    c0023316 <IDE::open(int, int, void*)+0x1c6>
c00232ff:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023304:	74 07                	je     c002330d <IDE::open(int, int, void*)+0x1bd>
c0023306:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002330b:	75 09                	jne    c0023316 <IDE::open(int, int, void*)+0x1c6>
c002330d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023314:	eb 1a                	jmp    c0023330 <IDE::open(int, int, void*)+0x1e0>
c0023316:	83 ec 0c             	sub    esp,0xc
c0023319:	68 48 c0 02 c0       	push   0xc002c048
c002331e:	eb 08                	jmp    c0023328 <IDE::open(int, int, void*)+0x1d8>
c0023320:	83 ec 0c             	sub    esp,0xc
c0023323:	68 79 c0 02 c0       	push   0xc002c079
c0023328:	e8 ea 6a ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c002332d:	83 c4 10             	add    esp,0x10
c0023330:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023337:	79 1a                	jns    c0023353 <IDE::open(int, int, void*)+0x203>
c0023339:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002333f:	83 e0 fc             	and    eax,0xfffffffc
c0023342:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023349:	83 c0 08             	add    eax,0x8
c002334c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023353:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023359:	89 c2                	mov    edx,eax
c002335b:	83 e2 0f             	and    edx,0xf
c002335e:	66 83 fa 08          	cmp    dx,0x8
c0023362:	75 0a                	jne    c002336e <IDE::open(int, int, void*)+0x21e>
c0023364:	83 e8 02             	sub    eax,0x2
c0023367:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002336e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023374:	89 c2                	mov    edx,eax
c0023376:	83 e2 0f             	and    edx,0xf
c0023379:	66 83 fa 08          	cmp    dx,0x8
c002337d:	75 0a                	jne    c0023389 <IDE::open(int, int, void*)+0x239>
c002337f:	83 e8 02             	sub    eax,0x2
c0023382:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023389:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023390:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023397:	89 d0                	mov    eax,edx
c0023399:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002339c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233a0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233a4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233a7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233ac:	0f b6 c9             	movzx  ecx,cl
c00233af:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233b6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233b9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233bd:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233c1:	8d 50 02             	lea    edx,[eax+0x2]
c00233c4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233c9:	0f b6 d2             	movzx  edx,dl
c00233cc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00233d2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233d5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233d9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00233dd:	8d 48 03             	lea    ecx,[eax+0x3]
c00233e0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233e5:	0f b6 c9             	movzx  ecx,cl
c00233e8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00233ee:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233f1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233f5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233f9:	8d 50 04             	lea    edx,[eax+0x4]
c00233fc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023402:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023407:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002340e:	66 85 f6             	test   si,si
c0023411:	74 5b                	je     c002346e <IDE::open(int, int, void*)+0x31e>
c0023413:	0f b6 d2             	movzx  edx,dl
c0023416:	83 c0 05             	add    eax,0x5
c0023419:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002341c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023420:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023424:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002342a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002342f:	eb 3d                	jmp    c002346e <IDE::open(int, int, void*)+0x31e>
c0023431:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023437:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002343e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023445:	66 05 06 02          	add    ax,0x206
c0023449:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023450:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023457:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002345e:	66 05 06 02          	add    ax,0x206
c0023462:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023469:	e9 e5 fe ff ff       	jmp    c0023353 <IDE::open(int, int, void*)+0x203>
c002346e:	50                   	push   eax
c002346f:	50                   	push   eax
c0023470:	6a 00                	push   0x0
c0023472:	53                   	push   ebx
c0023473:	e8 60 fa ff ff       	call   c0022ed8 <IDE::prepareInterrupt(unsigned char)>
c0023478:	5a                   	pop    edx
c0023479:	59                   	pop    ecx
c002347a:	6a 01                	push   0x1
c002347c:	53                   	push   ebx
c002347d:	e8 56 fa ff ff       	call   c0022ed8 <IDE::prepareInterrupt(unsigned char)>
c0023482:	83 c4 0c             	add    esp,0xc
c0023485:	6a 00                	push   0x0
c0023487:	6a 00                	push   0x0
c0023489:	53                   	push   ebx
c002348a:	e8 7b fc ff ff       	call   c002310a <IDE::enableIRQs(unsigned char, bool)>
c002348f:	83 c4 0c             	add    esp,0xc
c0023492:	6a 00                	push   0x0
c0023494:	6a 01                	push   0x1
c0023496:	53                   	push   ebx
c0023497:	e8 6e fc ff ff       	call   c002310a <IDE::enableIRQs(unsigned char, bool)>
c002349c:	83 c4 10             	add    esp,0x10
c002349f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234a6:	74 34                	je     c00234dc <IDE::open(int, int, void*)+0x38c>
c00234a8:	83 ec 0c             	sub    esp,0xc
c00234ab:	53                   	push   ebx
c00234ac:	6a 01                	push   0x1
c00234ae:	68 d2 30 02 c0       	push   0xc00230d2
c00234b3:	6a 0e                	push   0xe
c00234b5:	53                   	push   ebx
c00234b6:	e8 a1 05 ff ff       	call   c0013a5c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234bb:	83 c4 14             	add    esp,0x14
c00234be:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234c4:	53                   	push   ebx
c00234c5:	6a 01                	push   0x1
c00234c7:	68 ee 30 02 c0       	push   0xc00230ee
c00234cc:	6a 0f                	push   0xf
c00234ce:	53                   	push   ebx
c00234cf:	e8 88 05 ff ff       	call   c0013a5c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234d4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00234da:	eb 38                	jmp    c0023514 <IDE::open(int, int, void*)+0x3c4>
c00234dc:	83 ec 0c             	sub    esp,0xc
c00234df:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00234e9:	53                   	push   ebx
c00234ea:	6a 00                	push   0x0
c00234ec:	68 d2 30 02 c0       	push   0xc00230d2
c00234f1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234f7:	53                   	push   ebx
c00234f8:	e8 5f 05 ff ff       	call   c0013a5c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234fd:	83 c4 14             	add    esp,0x14
c0023500:	53                   	push   ebx
c0023501:	6a 00                	push   0x0
c0023503:	68 ee 30 02 c0       	push   0xc00230ee
c0023508:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002350e:	53                   	push   ebx
c002350f:	e8 48 05 ff ff       	call   c0013a5c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023514:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023516:	83 c4 20             	add    esp,0x20
c0023519:	83 ec 0c             	sub    esp,0xc
c002351c:	53                   	push   ebx
c002351d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023520:	83 c4 0c             	add    esp,0xc
c0023523:	6a 07                	push   0x7
c0023525:	6a 00                	push   0x0
c0023527:	53                   	push   ebx
c0023528:	e8 91 fa ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c002352d:	83 c4 0c             	add    esp,0xc
c0023530:	6a 07                	push   0x7
c0023532:	6a 01                	push   0x1
c0023534:	53                   	push   ebx
c0023535:	e8 84 fa ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c002353a:	83 c4 0c             	add    esp,0xc
c002353d:	6a 01                	push   0x1
c002353f:	6a 00                	push   0x0
c0023541:	53                   	push   ebx
c0023542:	e8 c3 fb ff ff       	call   c002310a <IDE::enableIRQs(unsigned char, bool)>
c0023547:	83 c4 0c             	add    esp,0xc
c002354a:	6a 01                	push   0x1
c002354c:	6a 01                	push   0x1
c002354e:	53                   	push   ebx
c002354f:	e8 b6 fb ff ff       	call   c002310a <IDE::enableIRQs(unsigned char, bool)>
c0023554:	83 c4 2c             	add    esp,0x2c
c0023557:	31 c0                	xor    eax,eax
c0023559:	5b                   	pop    ebx
c002355a:	5e                   	pop    esi
c002355b:	5f                   	pop    edi
c002355c:	5d                   	pop    ebp
c002355d:	c3                   	ret    

c002355e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002355e:	55                   	push   ebp
c002355f:	57                   	push   edi
c0023560:	56                   	push   esi
c0023561:	53                   	push   ebx
c0023562:	83 ec 1c             	sub    esp,0x1c
c0023565:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023569:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002356d:	8d 50 f8             	lea    edx,[eax-0x8]
c0023570:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023574:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023578:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002357c:	80 fa 03             	cmp    dl,0x3
c002357f:	77 5d                	ja     c00235de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023581:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023585:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023589:	0f b6 db             	movzx  ebx,bl
c002358c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002358f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023593:	83 ca 80             	or     edx,0xffffff80
c0023596:	0f b6 d2             	movzx  edx,dl
c0023599:	52                   	push   edx
c002359a:	6a 0c                	push   0xc
c002359c:	53                   	push   ebx
c002359d:	56                   	push   esi
c002359e:	e8 5b f9 ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235a3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235b0:	0f b6 c0             	movzx  eax,al
c00235b3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235b7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235b9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235be:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235c2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235ca:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235d2:	83 c4 2c             	add    esp,0x2c
c00235d5:	5b                   	pop    ebx
c00235d6:	5e                   	pop    esi
c00235d7:	5f                   	pop    edi
c00235d8:	5d                   	pop    ebp
c00235d9:	e9 20 f9 ff ff       	jmp    c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235de:	3c 07                	cmp    al,0x7
c00235e0:	77 10                	ja     c00235f2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00235e2:	0f b6 db             	movzx  ebx,bl
c00235e5:	0f b6 d0             	movzx  edx,al
c00235e8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00235f0:	eb 2d                	jmp    c002361f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235f2:	3c 0d                	cmp    al,0xd
c00235f4:	77 13                	ja     c0023609 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235f6:	0f b6 db             	movzx  ebx,bl
c00235f9:	0f b6 c0             	movzx  eax,al
c00235fc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023603:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023607:	eb 16                	jmp    c002361f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023609:	3c 15                	cmp    al,0x15
c002360b:	77 14                	ja     c0023621 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002360d:	0f b6 db             	movzx  ebx,bl
c0023610:	0f b6 c0             	movzx  eax,al
c0023613:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002361b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002361f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023621:	83 c4 1c             	add    esp,0x1c
c0023624:	5b                   	pop    ebx
c0023625:	5e                   	pop    esi
c0023626:	5f                   	pop    edi
c0023627:	5d                   	pop    ebp
c0023628:	c3                   	ret    
c0023629:	90                   	nop

c002362a <IDE::detect()>:
c002362a:	55                   	push   ebp
c002362b:	57                   	push   edi
c002362c:	56                   	push   esi
c002362d:	53                   	push   ebx
c002362e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023634:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002363b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023642:	0f 85 9d 02 00 00    	jne    c00238e5 <IDE::detect()+0x2bb>
c0023648:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002364f:	31 f6                	xor    esi,esi
c0023651:	31 ed                	xor    ebp,ebp
c0023653:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002365b:	89 e8                	mov    eax,ebp
c002365d:	c1 e0 06             	shl    eax,0x6
c0023660:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023668:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002366c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023670:	c1 e0 04             	shl    eax,0x4
c0023673:	83 c8 a0             	or     eax,0xffffffa0
c0023676:	0f b6 c0             	movzx  eax,al
c0023679:	50                   	push   eax
c002367a:	6a 06                	push   0x6
c002367c:	56                   	push   esi
c002367d:	53                   	push   ebx
c002367e:	e8 7b f8 ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023683:	83 c4 0c             	add    esp,0xc
c0023686:	6a 0c                	push   0xc
c0023688:	56                   	push   esi
c0023689:	53                   	push   ebx
c002368a:	e8 2f f9 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c002368f:	83 c4 0c             	add    esp,0xc
c0023692:	6a 0c                	push   0xc
c0023694:	56                   	push   esi
c0023695:	53                   	push   ebx
c0023696:	e8 23 f9 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c002369b:	83 c4 0c             	add    esp,0xc
c002369e:	6a 0c                	push   0xc
c00236a0:	56                   	push   esi
c00236a1:	53                   	push   ebx
c00236a2:	e8 17 f9 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00236a7:	83 c4 0c             	add    esp,0xc
c00236aa:	6a 0c                	push   0xc
c00236ac:	56                   	push   esi
c00236ad:	53                   	push   ebx
c00236ae:	e8 0b f9 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00236b3:	68 ec 00 00 00       	push   0xec
c00236b8:	6a 07                	push   0x7
c00236ba:	56                   	push   esi
c00236bb:	53                   	push   ebx
c00236bc:	e8 3d f8 ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c1:	83 c4 1c             	add    esp,0x1c
c00236c4:	6a 0c                	push   0xc
c00236c6:	56                   	push   esi
c00236c7:	53                   	push   ebx
c00236c8:	e8 f1 f8 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00236cd:	83 c4 0c             	add    esp,0xc
c00236d0:	6a 0c                	push   0xc
c00236d2:	56                   	push   esi
c00236d3:	53                   	push   ebx
c00236d4:	e8 e5 f8 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00236d9:	83 c4 0c             	add    esp,0xc
c00236dc:	6a 0c                	push   0xc
c00236de:	56                   	push   esi
c00236df:	53                   	push   ebx
c00236e0:	e8 d9 f8 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00236e5:	83 c4 0c             	add    esp,0xc
c00236e8:	6a 0c                	push   0xc
c00236ea:	56                   	push   esi
c00236eb:	53                   	push   ebx
c00236ec:	e8 cd f8 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00236f1:	83 c4 0c             	add    esp,0xc
c00236f4:	6a 0c                	push   0xc
c00236f6:	56                   	push   esi
c00236f7:	53                   	push   ebx
c00236f8:	e8 c1 f8 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00236fd:	83 c4 10             	add    esp,0x10
c0023700:	84 c0                	test   al,al
c0023702:	0f 84 63 01 00 00    	je     c002386b <IDE::detect()+0x241>
c0023708:	31 ff                	xor    edi,edi
c002370a:	50                   	push   eax
c002370b:	6a 0c                	push   0xc
c002370d:	56                   	push   esi
c002370e:	53                   	push   ebx
c002370f:	e8 aa f8 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c0023714:	83 c4 10             	add    esp,0x10
c0023717:	a8 01                	test   al,0x1
c0023719:	0f 85 6d 01 00 00    	jne    c002388c <IDE::detect()+0x262>
c002371f:	84 c0                	test   al,al
c0023721:	78 04                	js     c0023727 <IDE::detect()+0xfd>
c0023723:	a8 08                	test   al,0x8
c0023725:	75 27                	jne    c002374e <IDE::detect()+0x124>
c0023727:	47                   	inc    edi
c0023728:	81 ff 17 01 00 00    	cmp    edi,0x117
c002372e:	7e da                	jle    c002370a <IDE::detect()+0xe0>
c0023730:	50                   	push   eax
c0023731:	50                   	push   eax
c0023732:	6a 00                	push   0x0
c0023734:	68 40 4b 4c 00       	push   0x4c4b40
c0023739:	e8 3d a5 ff ff       	call   c001dc7b <nanoSleep(unsigned long long)>
c002373e:	83 c4 10             	add    esp,0x10
c0023741:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023747:	75 c1                	jne    c002370a <IDE::detect()+0xe0>
c0023749:	e9 3e 01 00 00       	jmp    c002388c <IDE::detect()+0x262>
c002374e:	31 c9                	xor    ecx,ecx
c0023750:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023754:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023758:	83 ec 0c             	sub    esp,0xc
c002375b:	68 80 00 00 00       	push   0x80
c0023760:	57                   	push   edi
c0023761:	6a 00                	push   0x0
c0023763:	56                   	push   esi
c0023764:	53                   	push   ebx
c0023765:	e8 f4 fd ff ff       	call   c002355e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002376a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002376f:	89 e8                	mov    eax,ebp
c0023771:	89 d1                	mov    ecx,edx
c0023773:	c1 e0 06             	shl    eax,0x6
c0023776:	01 d8                	add    eax,ebx
c0023778:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002377f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023786:	89 f2                	mov    edx,esi
c0023788:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002378e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023792:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023798:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002379c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237a3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237ab:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237b2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237ba:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237c0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237c7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00237cd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237d1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237d5:	83 c4 20             	add    esp,0x20
c00237d8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00237db:	83 c0 02             	add    eax,0x2
c00237de:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00237e4:	83 c7 02             	add    edi,0x2
c00237e7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00237ea:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00237f0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237f4:	75 e2                	jne    c00237d8 <IDE::detect()+0x1ae>
c00237f6:	89 e8                	mov    eax,ebp
c00237f8:	c1 e0 06             	shl    eax,0x6
c00237fb:	01 d8                	add    eax,ebx
c00237fd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023803:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002380a:	66 c1 ea 09          	shr    dx,0x9
c002380e:	83 e2 01             	and    edx,0x1
c0023811:	84 c9                	test   cl,cl
c0023813:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023819:	75 22                	jne    c002383d <IDE::detect()+0x213>
c002381b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023822:	74 46                	je     c002386a <IDE::detect()+0x240>
c0023824:	83 ec 0c             	sub    esp,0xc
c0023827:	68 7c 01 00 00       	push   0x17c
c002382c:	e8 68 bd fe ff       	call   c000f599 <malloc>
c0023831:	89 c7                	mov    edi,eax
c0023833:	89 04 24             	mov    DWORD PTR [esp],eax
c0023836:	e8 15 05 00 00       	call   c0023d50 <ATA::ATA()>
c002383b:	eb 17                	jmp    c0023854 <IDE::detect()+0x22a>
c002383d:	83 ec 0c             	sub    esp,0xc
c0023840:	68 80 01 00 00       	push   0x180
c0023845:	e8 4f bd fe ff       	call   c000f599 <malloc>
c002384a:	89 c7                	mov    edi,eax
c002384c:	89 04 24             	mov    DWORD PTR [esp],eax
c002384f:	e8 04 0b 00 00       	call   c0024358 <ATAPI::ATAPI()>
c0023854:	5a                   	pop    edx
c0023855:	59                   	pop    ecx
c0023856:	57                   	push   edi
c0023857:	53                   	push   ebx
c0023858:	e8 87 02 ff ff       	call   c0013ae4 <Device::addChild(Device*)>
c002385d:	8b 07                	mov    eax,DWORD PTR [edi]
c002385f:	53                   	push   ebx
c0023860:	55                   	push   ebp
c0023861:	6a 00                	push   0x0
c0023863:	57                   	push   edi
c0023864:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023867:	83 c4 20             	add    esp,0x20
c002386a:	45                   	inc    ebp
c002386b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023870:	74 0d                	je     c002387f <IDE::detect()+0x255>
c0023872:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002387a:	e9 dc fd ff ff       	jmp    c002365b <IDE::detect()+0x31>
c002387f:	4e                   	dec    esi
c0023880:	74 63                	je     c00238e5 <IDE::detect()+0x2bb>
c0023882:	be 01 00 00 00       	mov    esi,0x1
c0023887:	e9 c7 fd ff ff       	jmp    c0023653 <IDE::detect()+0x29>
c002388c:	50                   	push   eax
c002388d:	6a 04                	push   0x4
c002388f:	56                   	push   esi
c0023890:	53                   	push   ebx
c0023891:	e8 28 f7 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c0023896:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002389a:	83 c4 0c             	add    esp,0xc
c002389d:	6a 05                	push   0x5
c002389f:	56                   	push   esi
c00238a0:	53                   	push   ebx
c00238a1:	e8 18 f7 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00238a6:	83 c4 10             	add    esp,0x10
c00238a9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238ad:	80 fa 14             	cmp    dl,0x14
c00238b0:	75 04                	jne    c00238b6 <IDE::detect()+0x28c>
c00238b2:	3c eb                	cmp    al,0xeb
c00238b4:	eb 07                	jmp    c00238bd <IDE::detect()+0x293>
c00238b6:	3c 96                	cmp    al,0x96
c00238b8:	75 b1                	jne    c002386b <IDE::detect()+0x241>
c00238ba:	80 fa 69             	cmp    dl,0x69
c00238bd:	75 ac                	jne    c002386b <IDE::detect()+0x241>
c00238bf:	68 a1 00 00 00       	push   0xa1
c00238c4:	6a 07                	push   0x7
c00238c6:	56                   	push   esi
c00238c7:	53                   	push   ebx
c00238c8:	e8 31 f6 ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238cd:	5f                   	pop    edi
c00238ce:	58                   	pop    eax
c00238cf:	6a 00                	push   0x0
c00238d1:	68 40 42 0f 00       	push   0xf4240
c00238d6:	e8 a0 a3 ff ff       	call   c001dc7b <nanoSleep(unsigned long long)>
c00238db:	83 c4 10             	add    esp,0x10
c00238de:	b1 01                	mov    cl,0x1
c00238e0:	e9 6b fe ff ff       	jmp    c0023750 <IDE::detect()+0x126>
c00238e5:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238eb:	5b                   	pop    ebx
c00238ec:	5e                   	pop    esi
c00238ed:	5f                   	pop    edi
c00238ee:	5d                   	pop    ebp
c00238ef:	c3                   	ret    

c00238f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238f0:	55                   	push   ebp
c00238f1:	57                   	push   edi
c00238f2:	56                   	push   esi
c00238f3:	53                   	push   ebx
c00238f4:	83 ec 1c             	sub    esp,0x1c
c00238f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023903:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023907:	88 c3                	mov    bl,al
c0023909:	84 c0                	test   al,al
c002390b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002390f:	0f 84 81 00 00 00    	je     c0023996 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023915:	83 ec 0c             	sub    esp,0xc
c0023918:	68 a3 c0 02 c0       	push   0xc002c0a3
c002391d:	e8 89 ed fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0023922:	83 c4 10             	add    esp,0x10
c0023925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023929:	3c 01                	cmp    al,0x1
c002392b:	74 63                	je     c0023990 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c002392d:	3c 02                	cmp    al,0x2
c002392f:	75 53                	jne    c0023984 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023931:	d1 e6                	shl    esi,1
c0023933:	09 ee                	or     esi,ebp
c0023935:	50                   	push   eax
c0023936:	89 f0                	mov    eax,esi
c0023938:	6a 01                	push   0x1
c002393a:	0f b6 f0             	movzx  esi,al
c002393d:	c1 e6 06             	shl    esi,0x6
c0023940:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023948:	50                   	push   eax
c0023949:	57                   	push   edi
c002394a:	e8 6f f6 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c002394f:	83 c4 10             	add    esp,0x10
c0023952:	a8 01                	test   al,0x1
c0023954:	74 02                	je     c0023958 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023956:	b3 07                	mov    bl,0x7
c0023958:	a8 02                	test   al,0x2
c002395a:	74 02                	je     c002395e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c002395c:	b3 03                	mov    bl,0x3
c002395e:	a8 04                	test   al,0x4
c0023960:	74 02                	je     c0023964 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023962:	b3 14                	mov    bl,0x14
c0023964:	a8 08                	test   al,0x8
c0023966:	74 02                	je     c002396a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023968:	b3 03                	mov    bl,0x3
c002396a:	a8 10                	test   al,0x10
c002396c:	74 02                	je     c0023970 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c002396e:	b3 15                	mov    bl,0x15
c0023970:	a8 20                	test   al,0x20
c0023972:	74 02                	je     c0023976 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023974:	b3 03                	mov    bl,0x3
c0023976:	a8 40                	test   al,0x40
c0023978:	74 02                	je     c002397c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c002397a:	b3 16                	mov    bl,0x16
c002397c:	84 c0                	test   al,al
c002397e:	79 16                	jns    c0023996 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023980:	b3 0d                	mov    bl,0xd
c0023982:	eb 12                	jmp    c0023996 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023984:	3c 03                	cmp    al,0x3
c0023986:	74 0c                	je     c0023994 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023988:	3c 04                	cmp    al,0x4
c002398a:	75 0a                	jne    c0023996 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002398c:	b3 08                	mov    bl,0x8
c002398e:	eb 06                	jmp    c0023996 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023990:	b3 13                	mov    bl,0x13
c0023992:	eb 02                	jmp    c0023996 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023994:	b3 17                	mov    bl,0x17
c0023996:	83 c4 1c             	add    esp,0x1c
c0023999:	88 d8                	mov    al,bl
c002399b:	5b                   	pop    ebx
c002399c:	5e                   	pop    esi
c002399d:	5f                   	pop    edi
c002399e:	5d                   	pop    ebp
c002399f:	c3                   	ret    

c00239a0 <IDE::polling(unsigned char, unsigned int)>:
c00239a0:	57                   	push   edi
c00239a1:	56                   	push   esi
c00239a2:	53                   	push   ebx
c00239a3:	bb 04 00 00 00       	mov    ebx,0x4
c00239a8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239ac:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00239b1:	52                   	push   edx
c00239b2:	6a 0c                	push   0xc
c00239b4:	56                   	push   esi
c00239b5:	57                   	push   edi
c00239b6:	e8 03 f6 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00239bb:	83 c4 10             	add    esp,0x10
c00239be:	4b                   	dec    ebx
c00239bf:	75 f0                	jne    c00239b1 <IDE::polling(unsigned char, unsigned int)+0x11>
c00239c1:	bb a0 86 01 00       	mov    ebx,0x186a0
c00239c6:	50                   	push   eax
c00239c7:	6a 0c                	push   0xc
c00239c9:	56                   	push   esi
c00239ca:	57                   	push   edi
c00239cb:	e8 ee f5 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00239d0:	83 c4 10             	add    esp,0x10
c00239d3:	a8 01                	test   al,0x1
c00239d5:	75 17                	jne    c00239ee <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239d7:	a8 20                	test   al,0x20
c00239d9:	75 0f                	jne    c00239ea <IDE::polling(unsigned char, unsigned int)+0x4a>
c00239db:	4b                   	dec    ebx
c00239dc:	74 10                	je     c00239ee <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239de:	84 c0                	test   al,al
c00239e0:	78 e4                	js     c00239c6 <IDE::polling(unsigned char, unsigned int)+0x26>
c00239e2:	a8 08                	test   al,0x8
c00239e4:	74 e0                	je     c00239c6 <IDE::polling(unsigned char, unsigned int)+0x26>
c00239e6:	31 c0                	xor    eax,eax
c00239e8:	eb 06                	jmp    c00239f0 <IDE::polling(unsigned char, unsigned int)+0x50>
c00239ea:	b0 01                	mov    al,0x1
c00239ec:	eb 02                	jmp    c00239f0 <IDE::polling(unsigned char, unsigned int)+0x50>
c00239ee:	b0 02                	mov    al,0x2
c00239f0:	5b                   	pop    ebx
c00239f1:	5e                   	pop    esi
c00239f2:	5f                   	pop    edi
c00239f3:	c3                   	ret    

c00239f4 <SATABus::close(int, int, void*)>:
c00239f4:	31 c0                	xor    eax,eax
c00239f6:	c3                   	ret    
c00239f7:	90                   	nop

c00239f8 <SATABus::detect()>:
c00239f8:	c3                   	ret    
c00239f9:	90                   	nop

c00239fa <SATABus::SATABus()>:
c00239fa:	83 ec 0c             	sub    esp,0xc
c00239fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a01:	83 ec 08             	sub    esp,0x8
c0023a04:	68 dc c0 02 c0       	push   0xc002c0dc
c0023a09:	50                   	push   eax
c0023a0a:	e8 83 04 ff ff       	call   c0013e92 <HardDiskController::HardDiskController(char const*)>
c0023a0f:	83 c4 10             	add    esp,0x10
c0023a12:	ba 30 c1 02 c0       	mov    edx,0xc002c130
c0023a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a1b:	89 10                	mov    DWORD PTR [eax],edx
c0023a1d:	83 ec 0c             	sub    esp,0xc
c0023a20:	6a 50                	push   0x50
c0023a22:	e8 21 c0 fe ff       	call   c000fa48 <Phys::allocateContiguousPages(int)>
c0023a27:	83 c4 10             	add    esp,0x10
c0023a2a:	89 c2                	mov    edx,eax
c0023a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a30:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a36:	83 ec 0c             	sub    esp,0xc
c0023a39:	6a 50                	push   0x50
c0023a3b:	e8 bf d7 fe ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0023a40:	83 c4 10             	add    esp,0x10
c0023a43:	89 c2                	mov    edx,eax
c0023a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a49:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a4f:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c0023a54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a58:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a62:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023a68:	83 ec 0c             	sub    esp,0xc
c0023a6b:	6a 03                	push   0x3
c0023a6d:	6a 50                	push   0x50
c0023a6f:	51                   	push   ecx
c0023a70:	52                   	push   edx
c0023a71:	50                   	push   eax
c0023a72:	e8 3b e2 fe ff       	call   c0011cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023a77:	83 c4 20             	add    esp,0x20
c0023a7a:	90                   	nop
c0023a7b:	83 c4 0c             	add    esp,0xc
c0023a7e:	c3                   	ret    
c0023a7f:	90                   	nop

c0023a80 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023a80:	83 ec 0c             	sub    esp,0xc
c0023a83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023a87:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023a8a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023a8d:	09 c2                	or     edx,eax
c0023a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023a99:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023a9b:	31 c0                	xor    eax,eax
c0023a9d:	c1 e9 08             	shr    ecx,0x8
c0023aa0:	83 e1 0f             	and    ecx,0xf
c0023aa3:	39 c8                	cmp    eax,ecx
c0023aa5:	74 0a                	je     c0023ab1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023aa7:	f6 c2 01             	test   dl,0x1
c0023aaa:	74 18                	je     c0023ac4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023aac:	d1 ea                	shr    edx,1
c0023aae:	40                   	inc    eax
c0023aaf:	eb f2                	jmp    c0023aa3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ab1:	83 ec 0c             	sub    esp,0xc
c0023ab4:	68 00 c1 02 c0       	push   0xc002c100
c0023ab9:	e8 59 63 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0023abe:	83 c4 10             	add    esp,0x10
c0023ac1:	83 c8 ff             	or     eax,0xffffffff
c0023ac4:	83 c4 0c             	add    esp,0xc
c0023ac7:	c3                   	ret    

c0023ac8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023ac8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023acc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023acf:	89 c2                	mov    edx,eax
c0023ad1:	c1 ea 08             	shr    edx,0x8
c0023ad4:	83 e2 0f             	and    edx,0xf
c0023ad7:	fe ca                	dec    dl
c0023ad9:	75 31                	jne    c0023b0c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023adb:	83 e0 0f             	and    eax,0xf
c0023ade:	3c 03                	cmp    al,0x3
c0023ae0:	75 2a                	jne    c0023b0c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ae2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023ae5:	b8 02 00 00 00       	mov    eax,0x2
c0023aea:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023af0:	74 1c                	je     c0023b0e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023af2:	b8 04 00 00 00       	mov    eax,0x4
c0023af7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023afd:	74 0f                	je     c0023b0e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023aff:	31 c0                	xor    eax,eax
c0023b01:	83 fa 03             	cmp    edx,0x3
c0023b04:	0f 94 c0             	sete   al
c0023b07:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b0b:	c3                   	ret    
c0023b0c:	31 c0                	xor    eax,eax
c0023b0e:	c3                   	ret    
c0023b0f:	90                   	nop

c0023b10 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b14:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b17:	0f ba e2 0f          	bt     edx,0xf
c0023b1b:	72 f7                	jb     c0023b14 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b1d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b20:	83 ca 10             	or     edx,0x10
c0023b23:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b26:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b29:	83 ca 01             	or     edx,0x1
c0023b2c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b2f:	c3                   	ret    

c0023b30 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b34:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b37:	83 e2 fe             	and    edx,0xfffffffe
c0023b3a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b3d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b40:	83 e2 ef             	and    edx,0xffffffef
c0023b43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b46:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b49:	0f ba e2 0e          	bt     edx,0xe
c0023b4d:	72 f7                	jb     c0023b46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b4f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b52:	0f ba e2 0f          	bt     edx,0xf
c0023b56:	72 ee                	jb     c0023b46 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b58:	c3                   	ret    
c0023b59:	90                   	nop

c0023b5a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b5a:	55                   	push   ebp
c0023b5b:	57                   	push   edi
c0023b5c:	56                   	push   esi
c0023b5d:	53                   	push   ebx
c0023b5e:	83 ec 1c             	sub    esp,0x1c
c0023b61:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b69:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b6d:	53                   	push   ebx
c0023b6e:	89 fd                	mov    ebp,edi
c0023b70:	56                   	push   esi
c0023b71:	c1 e5 0a             	shl    ebp,0xa
c0023b74:	e8 b7 ff ff ff       	call   c0023b30 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023b79:	83 ec 0c             	sub    esp,0xc
c0023b7c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023b82:	01 e8                	add    eax,ebp
c0023b84:	89 03                	mov    DWORD PTR [ebx],eax
c0023b86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023b88:	68 00 04 00 00       	push   0x400
c0023b8d:	6a 00                	push   0x0
c0023b8f:	50                   	push   eax
c0023b90:	e8 bb cb fd ff       	call   c0000750 <memset>
c0023b95:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023b9b:	89 fa                	mov    edx,edi
c0023b9d:	01 e8                	add    eax,ebp
c0023b9f:	c1 e7 0d             	shl    edi,0xd
c0023ba2:	89 03                	mov    DWORD PTR [ebx],eax
c0023ba4:	c1 e2 08             	shl    edx,0x8
c0023ba7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023bae:	81 c2 00 80 00 00    	add    edx,0x8000
c0023bb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023bb8:	89 d0                	mov    eax,edx
c0023bba:	83 c4 1c             	add    esp,0x1c
c0023bbd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023bc3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023bc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023bc9:	68 00 01 00 00       	push   0x100
c0023bce:	6a 00                	push   0x0
c0023bd0:	50                   	push   eax
c0023bd1:	e8 7a cb fd ff       	call   c0000750 <memset>
c0023bd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023bda:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023be0:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023be6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023bea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023bed:	83 c4 10             	add    esp,0x10
c0023bf0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023bf7:	31 ff                	xor    edi,edi
c0023bf9:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023bff:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c09:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c0f:	83 c5 20             	add    ebp,0x20
c0023c12:	01 f8                	add    eax,edi
c0023c14:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c17:	52                   	push   edx
c0023c18:	68 00 01 00 00       	push   0x100
c0023c1d:	6a 00                	push   0x0
c0023c1f:	50                   	push   eax
c0023c20:	e8 2b cb fd ff       	call   c0000750 <memset>
c0023c25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c29:	83 c4 10             	add    esp,0x10
c0023c2c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c32:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c39:	01 f8                	add    eax,edi
c0023c3b:	81 c7 00 01 00 00    	add    edi,0x100
c0023c41:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c44:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c4a:	75 b3                	jne    c0023bff <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c4c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c50:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c54:	83 c4 1c             	add    esp,0x1c
c0023c57:	5b                   	pop    ebx
c0023c58:	5e                   	pop    esi
c0023c59:	5f                   	pop    edi
c0023c5a:	5d                   	pop    ebp
c0023c5b:	e9 b0 fe ff ff       	jmp    c0023b10 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023c60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023c60:	55                   	push   ebp
c0023c61:	57                   	push   edi
c0023c62:	56                   	push   esi
c0023c63:	53                   	push   ebx
c0023c64:	31 db                	xor    ebx,ebx
c0023c66:	83 ec 0c             	sub    esp,0xc
c0023c69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023c6d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c71:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023c74:	f7 c7 01 00 00 00    	test   edi,0x1
c0023c7a:	74 7a                	je     c0023cf6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023c7c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023c80:	89 d8                	mov    eax,ebx
c0023c82:	c1 e0 07             	shl    eax,0x7
c0023c85:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023c8c:	55                   	push   ebp
c0023c8d:	56                   	push   esi
c0023c8e:	e8 35 fe ff ff       	call   c0023ac8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023c93:	5a                   	pop    edx
c0023c94:	83 f8 01             	cmp    eax,0x1
c0023c97:	59                   	pop    ecx
c0023c98:	75 21                	jne    c0023cbb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023c9a:	50                   	push   eax
c0023c9b:	53                   	push   ebx
c0023c9c:	55                   	push   ebp
c0023c9d:	56                   	push   esi
c0023c9e:	e8 b7 fe ff ff       	call   c0023b5a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ca3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023caa:	e8 ea b8 fe ff       	call   c000f599 <malloc>
c0023caf:	89 c5                	mov    ebp,eax
c0023cb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cb4:	e8 03 0d 00 00       	call   c00249bc <SATA::SATA()>
c0023cb9:	eb 24                	jmp    c0023cdf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023cbb:	83 f8 04             	cmp    eax,0x4
c0023cbe:	75 36                	jne    c0023cf6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023cc0:	51                   	push   ecx
c0023cc1:	53                   	push   ebx
c0023cc2:	55                   	push   ebp
c0023cc3:	56                   	push   esi
c0023cc4:	e8 91 fe ff ff       	call   c0023b5a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cc9:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023cd0:	e8 c4 b8 fe ff       	call   c000f599 <malloc>
c0023cd5:	89 c5                	mov    ebp,eax
c0023cd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cda:	e8 53 10 00 00       	call   c0024d32 <SATAPI::SATAPI()>
c0023cdf:	58                   	pop    eax
c0023ce0:	5a                   	pop    edx
c0023ce1:	55                   	push   ebp
c0023ce2:	56                   	push   esi
c0023ce3:	e8 fc fd fe ff       	call   c0013ae4 <Device::addChild(Device*)>
c0023ce8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023ceb:	56                   	push   esi
c0023cec:	6a 00                	push   0x0
c0023cee:	53                   	push   ebx
c0023cef:	55                   	push   ebp
c0023cf0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023cf3:	83 c4 20             	add    esp,0x20
c0023cf6:	d1 ef                	shr    edi,1
c0023cf8:	43                   	inc    ebx
c0023cf9:	83 fb 20             	cmp    ebx,0x20
c0023cfc:	0f 85 72 ff ff ff    	jne    c0023c74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d02:	83 c4 0c             	add    esp,0xc
c0023d05:	5b                   	pop    ebx
c0023d06:	5e                   	pop    esi
c0023d07:	5f                   	pop    edi
c0023d08:	5d                   	pop    ebp
c0023d09:	c3                   	ret    

c0023d0a <SATABus::open(int, int, void*)>:
c0023d0a:	83 ec 14             	sub    esp,0x14
c0023d0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d11:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d17:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d1d:	52                   	push   edx
c0023d1e:	50                   	push   eax
c0023d1f:	e8 3c ff ff ff       	call   c0023c60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d24:	31 c0                	xor    eax,eax
c0023d26:	83 c4 1c             	add    esp,0x1c
c0023d29:	c3                   	ret    

c0023d2a <ATA::close(int, int, void*)>:
c0023d2a:	83 ec 0c             	sub    esp,0xc
c0023d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d31:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d37:	85 c0                	test   eax,eax
c0023d39:	74 0c                	je     c0023d47 <ATA::close(int, int, void*)+0x1d>
c0023d3b:	83 ec 0c             	sub    esp,0xc
c0023d3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d40:	50                   	push   eax
c0023d41:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d44:	83 c4 10             	add    esp,0x10
c0023d47:	31 c0                	xor    eax,eax
c0023d49:	83 c4 0c             	add    esp,0xc
c0023d4c:	c3                   	ret    
c0023d4d:	90                   	nop

c0023d4e <ATA::powerSaving(PowerSavingLevel)>:
c0023d4e:	c3                   	ret    
c0023d4f:	90                   	nop

c0023d50 <ATA::ATA()>:
c0023d50:	83 ec 0c             	sub    esp,0xc
c0023d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d57:	83 ec 04             	sub    esp,0x4
c0023d5a:	68 00 02 00 00       	push   0x200
c0023d5f:	68 f9 c1 02 c0       	push   0xc002c1f9
c0023d64:	50                   	push   eax
c0023d65:	e8 b0 01 ff ff       	call   c0013f1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d6a:	83 c4 10             	add    esp,0x10
c0023d6d:	ba 7c c1 02 c0       	mov    edx,0xc002c17c
c0023d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d76:	89 10                	mov    DWORD PTR [eax],edx
c0023d78:	90                   	nop
c0023d79:	83 c4 0c             	add    esp,0xc
c0023d7c:	c3                   	ret    
c0023d7d:	90                   	nop

c0023d7e <ATA::flush(bool)>:
c0023d7e:	53                   	push   ebx
c0023d7f:	83 ec 08             	sub    esp,0x8
c0023d82:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023d87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d8b:	19 c0                	sbb    eax,eax
c0023d8d:	83 e0 fd             	and    eax,0xfffffffd
c0023d90:	05 ea 00 00 00       	add    eax,0xea
c0023d95:	50                   	push   eax
c0023d96:	6a 07                	push   0x7
c0023d98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d9f:	50                   	push   eax
c0023da0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023da6:	e8 53 f1 ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dab:	83 c4 0c             	add    esp,0xc
c0023dae:	6a 00                	push   0x0
c0023db0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023db7:	50                   	push   eax
c0023db8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dbe:	e8 dd fb ff ff       	call   c00239a0 <IDE::polling(unsigned char, unsigned int)>
c0023dc3:	83 c4 18             	add    esp,0x18
c0023dc6:	5b                   	pop    ebx
c0023dc7:	c3                   	ret    

c0023dc8 <ATA::readyForCommand()>:
c0023dc8:	56                   	push   esi
c0023dc9:	53                   	push   ebx
c0023dca:	31 db                	xor    ebx,ebx
c0023dcc:	50                   	push   eax
c0023dcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023dd1:	50                   	push   eax
c0023dd2:	6a 0c                	push   0xc
c0023dd4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ddb:	50                   	push   eax
c0023ddc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023de2:	e8 d7 f1 ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c0023de7:	83 c4 10             	add    esp,0x10
c0023dea:	a8 88                	test   al,0x88
c0023dec:	74 23                	je     c0023e11 <ATA::readyForCommand()+0x49>
c0023dee:	43                   	inc    ebx
c0023def:	83 fb 63             	cmp    ebx,0x63
c0023df2:	7e dd                	jle    c0023dd1 <ATA::readyForCommand()+0x9>
c0023df4:	51                   	push   ecx
c0023df5:	51                   	push   ecx
c0023df6:	6a 00                	push   0x0
c0023df8:	68 40 42 0f 00       	push   0xf4240
c0023dfd:	e8 79 9e ff ff       	call   c001dc7b <nanoSleep(unsigned long long)>
c0023e02:	83 c4 10             	add    esp,0x10
c0023e05:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e0b:	75 c4                	jne    c0023dd1 <ATA::readyForCommand()+0x9>
c0023e0d:	31 c0                	xor    eax,eax
c0023e0f:	eb 02                	jmp    c0023e13 <ATA::readyForCommand()+0x4b>
c0023e11:	b0 01                	mov    al,0x1
c0023e13:	5a                   	pop    edx
c0023e14:	5b                   	pop    ebx
c0023e15:	5e                   	pop    esi
c0023e16:	c3                   	ret    
c0023e17:	90                   	nop

c0023e18 <ATA::access(unsigned long long, int, void*, bool)>:
c0023e18:	55                   	push   ebp
c0023e19:	57                   	push   edi
c0023e1a:	56                   	push   esi
c0023e1b:	53                   	push   ebx
c0023e1c:	83 ec 2c             	sub    esp,0x2c
c0023e1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e27:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e2f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e33:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e37:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e3b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e45:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e4f:	c1 e0 06             	shl    eax,0x6
c0023e52:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e5a:	74 5d                	je     c0023eb9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e5c:	89 fa                	mov    edx,edi
c0023e5e:	89 f0                	mov    eax,esi
c0023e60:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023e64:	c1 ea 1c             	shr    edx,0x1c
c0023e67:	89 d1                	mov    ecx,edx
c0023e69:	09 c1                	or     ecx,eax
c0023e6b:	74 25                	je     c0023e92 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023e6d:	31 ed                	xor    ebp,ebp
c0023e6f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023e76:	89 fa                	mov    edx,edi
c0023e78:	89 f0                	mov    eax,esi
c0023e7a:	0f ad d0             	shrd   eax,edx,cl
c0023e7d:	d3 ea                	shr    edx,cl
c0023e7f:	f6 c1 20             	test   cl,0x20
c0023e82:	74 02                	je     c0023e86 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023e84:	89 d0                	mov    eax,edx
c0023e86:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023e8a:	45                   	inc    ebp
c0023e8b:	83 fd 06             	cmp    ebp,0x6
c0023e8e:	75 df                	jne    c0023e6f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023e90:	eb 76                	jmp    c0023f08 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023e92:	89 f0                	mov    eax,esi
c0023e94:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023e99:	89 fa                	mov    edx,edi
c0023e9b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ea2:	0f ac d0 10          	shrd   eax,edx,0x10
c0023ea6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023eab:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023eaf:	c1 ee 18             	shr    esi,0x18
c0023eb2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023eb7:	eb 56                	jmp    c0023f0f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023eb9:	6a 00                	push   0x0
c0023ebb:	6a 3f                	push   0x3f
c0023ebd:	57                   	push   edi
c0023ebe:	56                   	push   esi
c0023ebf:	e8 20 29 00 00       	call   c00267e4 <__umoddi3>
c0023ec4:	83 c4 10             	add    esp,0x10
c0023ec7:	40                   	inc    eax
c0023ec8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023ecc:	6a 00                	push   0x0
c0023ece:	68 f0 03 00 00       	push   0x3f0
c0023ed3:	57                   	push   edi
c0023ed4:	56                   	push   esi
c0023ed5:	e8 0a 28 00 00       	call   c00266e4 <__udivdi3>
c0023eda:	83 c4 10             	add    esp,0x10
c0023edd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023ee2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ee9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023eee:	6a 00                	push   0x0
c0023ef0:	6a 3f                	push   0x3f
c0023ef2:	57                   	push   edi
c0023ef3:	56                   	push   esi
c0023ef4:	e8 eb 27 00 00       	call   c00266e4 <__udivdi3>
c0023ef9:	83 c4 10             	add    esp,0x10
c0023efc:	89 c6                	mov    esi,eax
c0023efe:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f03:	83 e6 0f             	and    esi,0xf
c0023f06:	eb 07                	jmp    c0023f0f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f08:	31 f6                	xor    esi,esi
c0023f0a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f0f:	bf 01 00 00 00       	mov    edi,0x1
c0023f14:	50                   	push   eax
c0023f15:	6a 00                	push   0x0
c0023f17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f1e:	50                   	push   eax
c0023f1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f23:	e8 e2 f1 ff ff       	call   c002310a <IDE::enableIRQs(unsigned char, bool)>
c0023f28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f2b:	e8 98 fe ff ff       	call   c0023dc8 <ATA::readyForCommand()>
c0023f30:	83 c4 10             	add    esp,0x10
c0023f33:	84 c0                	test   al,al
c0023f35:	0f 84 5a 02 00 00    	je     c0024195 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f3b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f41:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f47:	c1 e0 04             	shl    eax,0x4
c0023f4a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f51:	09 c6                	or     esi,eax
c0023f53:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f58:	75 05                	jne    c0023f5f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f5a:	83 ce a0             	or     esi,0xffffffa0
c0023f5d:	eb 03                	jmp    c0023f62 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f5f:	83 ce e0             	or     esi,0xffffffe0
c0023f62:	89 f0                	mov    eax,esi
c0023f64:	0f b6 f0             	movzx  esi,al
c0023f67:	56                   	push   esi
c0023f68:	6a 06                	push   0x6
c0023f6a:	51                   	push   ecx
c0023f6b:	52                   	push   edx
c0023f6c:	e8 8d ef ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f71:	83 c4 10             	add    esp,0x10
c0023f74:	6a 00                	push   0x0
c0023f76:	6a 01                	push   0x1
c0023f78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f7f:	50                   	push   eax
c0023f80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f86:	e8 73 ef ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f8b:	83 c4 10             	add    esp,0x10
c0023f8e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f93:	75 6e                	jne    c0024003 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023f95:	6a 00                	push   0x0
c0023f97:	6a 08                	push   0x8
c0023f99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fa0:	50                   	push   eax
c0023fa1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fa7:	e8 52 ef ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fac:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023fb1:	50                   	push   eax
c0023fb2:	6a 09                	push   0x9
c0023fb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fbb:	50                   	push   eax
c0023fbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc2:	e8 37 ef ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc7:	83 c4 20             	add    esp,0x20
c0023fca:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023fcf:	50                   	push   eax
c0023fd0:	6a 0a                	push   0xa
c0023fd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fd9:	50                   	push   eax
c0023fda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe0:	e8 19 ef ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fe5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023fea:	50                   	push   eax
c0023feb:	6a 0b                	push   0xb
c0023fed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff4:	50                   	push   eax
c0023ff5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ffb:	e8 fe ee ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024000:	83 c4 20             	add    esp,0x20
c0024003:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024008:	50                   	push   eax
c0024009:	6a 02                	push   0x2
c002400b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024012:	50                   	push   eax
c0024013:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024019:	e8 e0 ee ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002401e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024023:	50                   	push   eax
c0024024:	6a 03                	push   0x3
c0024026:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002402d:	50                   	push   eax
c002402e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024034:	e8 c5 ee ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024039:	83 c4 20             	add    esp,0x20
c002403c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024041:	50                   	push   eax
c0024042:	6a 04                	push   0x4
c0024044:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002404b:	50                   	push   eax
c002404c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024052:	e8 a7 ee ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024057:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002405c:	50                   	push   eax
c002405d:	6a 05                	push   0x5
c002405f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024066:	50                   	push   eax
c0024067:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002406d:	e8 8c ee ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024072:	83 c4 20             	add    esp,0x20
c0024075:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002407a:	0f 94 c0             	sete   al
c002407d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024082:	74 09                	je     c002408d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024084:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002408b:	eb 07                	jmp    c0024094 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002408d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024094:	0f b6 c0             	movzx  eax,al
c0024097:	50                   	push   eax
c0024098:	6a 07                	push   0x7
c002409a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a1:	50                   	push   eax
c00240a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240a8:	e8 51 ee ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ad:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00240b1:	83 c4 10             	add    esp,0x10
c00240b4:	85 f6                	test   esi,esi
c00240b6:	0f 84 ba 00 00 00    	je     c0024176 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00240bc:	50                   	push   eax
c00240bd:	6a 01                	push   0x1
c00240bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c6:	50                   	push   eax
c00240c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240cd:	e8 ce f8 ff ff       	call   c00239a0 <IDE::polling(unsigned char, unsigned int)>
c00240d2:	83 c4 10             	add    esp,0x10
c00240d5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00240db:	84 c0                	test   al,al
c00240dd:	74 2c                	je     c002410b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00240df:	0f b6 f8             	movzx  edi,al
c00240e2:	0f b6 d2             	movzx  edx,dl
c00240e5:	57                   	push   edi
c00240e6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00240ed:	50                   	push   eax
c00240ee:	52                   	push   edx
c00240ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240f5:	e8 f6 f7 ff ff       	call   c00238f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00240fa:	c7 04 24 54 c1 02 c0 	mov    DWORD PTR [esp],0xc002c154
c0024101:	e8 a5 e5 fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0024106:	e9 87 00 00 00       	jmp    c0024192 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002410b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024110:	74 33                	je     c0024145 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024112:	31 ed                	xor    ebp,ebp
c0024114:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024118:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002411c:	50                   	push   eax
c002411d:	50                   	push   eax
c002411e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024125:	50                   	push   eax
c0024126:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002412c:	e8 bb ed ff ff       	call   c0022eec <IDE::getBase(unsigned char)>
c0024131:	89 c2                	mov    edx,eax
c0024133:	89 f8                	mov    eax,edi
c0024135:	66 ef                	out    dx,ax
c0024137:	45                   	inc    ebp
c0024138:	83 c4 10             	add    esp,0x10
c002413b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024141:	75 d1                	jne    c0024114 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024143:	eb 23                	jmp    c0024168 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024145:	0f b6 d2             	movzx  edx,dl
c0024148:	51                   	push   ecx
c0024149:	51                   	push   ecx
c002414a:	52                   	push   edx
c002414b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024151:	e8 96 ed ff ff       	call   c0022eec <IDE::getBase(unsigned char)>
c0024156:	b9 00 01 00 00       	mov    ecx,0x100
c002415b:	89 c2                	mov    edx,eax
c002415d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024161:	fc                   	cld    
c0024162:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024165:	83 c4 10             	add    esp,0x10
c0024168:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024170:	4e                   	dec    esi
c0024171:	e9 3e ff ff ff       	jmp    c00240b4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024176:	31 ff                	xor    edi,edi
c0024178:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002417d:	74 16                	je     c0024195 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002417f:	50                   	push   eax
c0024180:	50                   	push   eax
c0024181:	31 c0                	xor    eax,eax
c0024183:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024188:	0f 94 c0             	sete   al
c002418b:	50                   	push   eax
c002418c:	53                   	push   ebx
c002418d:	e8 ec fb ff ff       	call   c0023d7e <ATA::flush(bool)>
c0024192:	83 c4 10             	add    esp,0x10
c0024195:	83 c4 2c             	add    esp,0x2c
c0024198:	89 f8                	mov    eax,edi
c002419a:	5b                   	pop    ebx
c002419b:	5e                   	pop    esi
c002419c:	5f                   	pop    edi
c002419d:	5d                   	pop    ebp
c002419e:	c3                   	ret    
c002419f:	90                   	nop

c00241a0 <ATA::read(unsigned long long, int, void*)>:
c00241a0:	57                   	push   edi
c00241a1:	b8 04 00 00 00       	mov    eax,0x4
c00241a6:	56                   	push   esi
c00241a7:	53                   	push   ebx
c00241a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241b0:	8d 7a ff             	lea    edi,[edx-0x1]
c00241b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241b7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241bb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00241c1:	77 25                	ja     c00241e8 <ATA::read(unsigned long long, int, void*)+0x48>
c00241c3:	b8 06 00 00 00       	mov    eax,0x6
c00241c8:	85 f6                	test   esi,esi
c00241ca:	74 1c                	je     c00241e8 <ATA::read(unsigned long long, int, void*)+0x48>
c00241cc:	50                   	push   eax
c00241cd:	50                   	push   eax
c00241ce:	6a 00                	push   0x0
c00241d0:	56                   	push   esi
c00241d1:	52                   	push   edx
c00241d2:	53                   	push   ebx
c00241d3:	51                   	push   ecx
c00241d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241d8:	e8 3b fc ff ff       	call   c0023e18 <ATA::access(unsigned long long, int, void*, bool)>
c00241dd:	83 c4 20             	add    esp,0x20
c00241e0:	85 c0                	test   eax,eax
c00241e2:	0f 95 c0             	setne  al
c00241e5:	0f b6 c0             	movzx  eax,al
c00241e8:	5b                   	pop    ebx
c00241e9:	5e                   	pop    esi
c00241ea:	5f                   	pop    edi
c00241eb:	c3                   	ret    

c00241ec <ATA::write(unsigned long long, int, void*)>:
c00241ec:	57                   	push   edi
c00241ed:	b8 04 00 00 00       	mov    eax,0x4
c00241f2:	56                   	push   esi
c00241f3:	53                   	push   ebx
c00241f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241fc:	8d 7a ff             	lea    edi,[edx-0x1]
c00241ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024203:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024207:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002420d:	77 25                	ja     c0024234 <ATA::write(unsigned long long, int, void*)+0x48>
c002420f:	b8 06 00 00 00       	mov    eax,0x6
c0024214:	85 f6                	test   esi,esi
c0024216:	74 1c                	je     c0024234 <ATA::write(unsigned long long, int, void*)+0x48>
c0024218:	50                   	push   eax
c0024219:	50                   	push   eax
c002421a:	6a 01                	push   0x1
c002421c:	56                   	push   esi
c002421d:	52                   	push   edx
c002421e:	53                   	push   ebx
c002421f:	51                   	push   ecx
c0024220:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024224:	e8 ef fb ff ff       	call   c0023e18 <ATA::access(unsigned long long, int, void*, bool)>
c0024229:	83 c4 20             	add    esp,0x20
c002422c:	85 c0                	test   eax,eax
c002422e:	0f 95 c0             	setne  al
c0024231:	0f b6 c0             	movzx  eax,al
c0024234:	5b                   	pop    ebx
c0024235:	5e                   	pop    esi
c0024236:	5f                   	pop    edi
c0024237:	c3                   	ret    

c0024238 <ATA::detectCHS()>:
c0024238:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002423c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024242:	c1 e0 06             	shl    eax,0x6
c0024245:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002424b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024255:	c7 44 24 04 5f c1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c15f
c002425d:	e9 b5 5b ff ff       	jmp    c0019e17 <Krnl::panic(char const*)>

c0024262 <ATA::open(int, int, void*)>:
c0024262:	53                   	push   ebx
c0024263:	83 ec 08             	sub    esp,0x8
c0024266:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002426a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002426e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024272:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024278:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002427e:	c1 e0 06             	shl    eax,0x6
c0024281:	01 d0                	add    eax,edx
c0024283:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002428a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024290:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024297:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242a1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242a7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242ae:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00242b5:	75 0c                	jne    c00242c3 <ATA::open(int, int, void*)+0x61>
c00242b7:	83 ec 0c             	sub    esp,0xc
c00242ba:	53                   	push   ebx
c00242bb:	e8 78 ff ff ff       	call   c0024238 <ATA::detectCHS()>
c00242c0:	83 c4 10             	add    esp,0x10
c00242c3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242c9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00242cf:	c1 e0 06             	shl    eax,0x6
c00242d2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00242d9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00242e3:	d1 e8                	shr    eax,1
c00242e5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00242eb:	6a 04                	push   0x4
c00242ed:	6a 0c                	push   0xc
c00242ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f6:	50                   	push   eax
c00242f7:	52                   	push   edx
c00242f8:	e8 01 ec ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242fd:	90                   	nop
c00242fe:	90                   	nop
c00242ff:	6a 00                	push   0x0
c0024301:	6a 0c                	push   0xc
c0024303:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430a:	50                   	push   eax
c002430b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024311:	e8 e8 eb ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024316:	83 c4 14             	add    esp,0x14
c0024319:	53                   	push   ebx
c002431a:	e8 63 fc fe ff       	call   c0013f82 <PhysicalDisk::startCache()>
c002431f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024322:	e8 dd 1e ff ff       	call   c0016204 <createPartitionsForDisk(PhysicalDisk*)>
c0024327:	31 c0                	xor    eax,eax
c0024329:	83 c4 18             	add    esp,0x18
c002432c:	5b                   	pop    ebx
c002432d:	c3                   	ret    

c002432e <ATAPI::write(unsigned long long, int, void*)>:
c002432e:	b8 03 00 00 00       	mov    eax,0x3
c0024333:	c3                   	ret    

c0024334 <ATAPI::close(int, int, void*)>:
c0024334:	83 ec 0c             	sub    esp,0xc
c0024337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002433b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024341:	85 c0                	test   eax,eax
c0024343:	74 0c                	je     c0024351 <ATAPI::close(int, int, void*)+0x1d>
c0024345:	83 ec 0c             	sub    esp,0xc
c0024348:	8b 10                	mov    edx,DWORD PTR [eax]
c002434a:	50                   	push   eax
c002434b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002434e:	83 c4 10             	add    esp,0x10
c0024351:	31 c0                	xor    eax,eax
c0024353:	83 c4 0c             	add    esp,0xc
c0024356:	c3                   	ret    
c0024357:	90                   	nop

c0024358 <ATAPI::ATAPI()>:
c0024358:	83 ec 0c             	sub    esp,0xc
c002435b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002435f:	83 ec 04             	sub    esp,0x4
c0024362:	68 00 08 00 00       	push   0x800
c0024367:	68 99 c2 02 c0       	push   0xc002c299
c002436c:	50                   	push   eax
c002436d:	e8 a8 fb fe ff       	call   c0013f1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024372:	83 c4 10             	add    esp,0x10
c0024375:	ba b4 c1 02 c0       	mov    edx,0xc002c1b4
c002437a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002437e:	89 10                	mov    DWORD PTR [eax],edx
c0024380:	90                   	nop
c0024381:	83 c4 0c             	add    esp,0xc
c0024384:	c3                   	ret    
c0024385:	90                   	nop

c0024386 <ATAPI::readyForCommand()>:
c0024386:	56                   	push   esi
c0024387:	53                   	push   ebx
c0024388:	31 db                	xor    ebx,ebx
c002438a:	50                   	push   eax
c002438b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002438f:	50                   	push   eax
c0024390:	6a 0c                	push   0xc
c0024392:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024399:	50                   	push   eax
c002439a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243a0:	e8 19 ec ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c00243a5:	83 c4 10             	add    esp,0x10
c00243a8:	a8 88                	test   al,0x88
c00243aa:	74 23                	je     c00243cf <ATAPI::readyForCommand()+0x49>
c00243ac:	43                   	inc    ebx
c00243ad:	83 fb 63             	cmp    ebx,0x63
c00243b0:	7e dd                	jle    c002438f <ATAPI::readyForCommand()+0x9>
c00243b2:	51                   	push   ecx
c00243b3:	51                   	push   ecx
c00243b4:	6a 00                	push   0x0
c00243b6:	68 40 42 0f 00       	push   0xf4240
c00243bb:	e8 bb 98 ff ff       	call   c001dc7b <nanoSleep(unsigned long long)>
c00243c0:	83 c4 10             	add    esp,0x10
c00243c3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00243c9:	75 c4                	jne    c002438f <ATAPI::readyForCommand()+0x9>
c00243cb:	31 c0                	xor    eax,eax
c00243cd:	eb 02                	jmp    c00243d1 <ATAPI::readyForCommand()+0x4b>
c00243cf:	b0 01                	mov    al,0x1
c00243d1:	5a                   	pop    edx
c00243d2:	5b                   	pop    ebx
c00243d3:	5e                   	pop    esi
c00243d4:	c3                   	ret    
c00243d5:	90                   	nop

c00243d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00243d6:	55                   	push   ebp
c00243d7:	57                   	push   edi
c00243d8:	56                   	push   esi
c00243d9:	53                   	push   ebx
c00243da:	83 ec 20             	sub    esp,0x20
c00243dd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00243e1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00243e5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00243e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00243ed:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00243f1:	6a 01                	push   0x1
c00243f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243fa:	50                   	push   eax
c00243fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024401:	e8 04 ed ff ff       	call   c002310a <IDE::enableIRQs(unsigned char, bool)>
c0024406:	5e                   	pop    esi
c0024407:	58                   	pop    eax
c0024408:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002440f:	50                   	push   eax
c0024410:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024416:	e8 bd ea ff ff       	call   c0022ed8 <IDE::prepareInterrupt(unsigned char)>
c002441b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002441e:	e8 63 ff ff ff       	call   c0024386 <ATAPI::readyForCommand()>
c0024423:	83 c4 10             	add    esp,0x10
c0024426:	84 c0                	test   al,al
c0024428:	75 0a                	jne    c0024434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002442a:	bb 01 00 00 00       	mov    ebx,0x1
c002442f:	e9 57 02 00 00       	jmp    c002468b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024434:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002443a:	c1 e0 04             	shl    eax,0x4
c002443d:	0f b6 c0             	movzx  eax,al
c0024440:	50                   	push   eax
c0024441:	6a 06                	push   0x6
c0024443:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002444a:	50                   	push   eax
c002444b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024451:	e8 a8 ea ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024456:	6a 00                	push   0x0
c0024458:	6a 01                	push   0x1
c002445a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024461:	50                   	push   eax
c0024462:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024468:	e8 91 ea ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002446d:	83 c4 20             	add    esp,0x20
c0024470:	0f b6 c3             	movzx  eax,bl
c0024473:	0f b6 df             	movzx  ebx,bh
c0024476:	50                   	push   eax
c0024477:	6a 04                	push   0x4
c0024479:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024480:	50                   	push   eax
c0024481:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024487:	e8 72 ea ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002448c:	53                   	push   ebx
c002448d:	6a 05                	push   0x5
c002448f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024496:	50                   	push   eax
c0024497:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002449d:	e8 5c ea ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244a2:	83 c4 20             	add    esp,0x20
c00244a5:	68 a0 00 00 00       	push   0xa0
c00244aa:	6a 07                	push   0x7
c00244ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b3:	50                   	push   eax
c00244b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ba:	e8 3f ea ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244bf:	83 c4 0c             	add    esp,0xc
c00244c2:	6a 01                	push   0x1
c00244c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244cb:	50                   	push   eax
c00244cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244d2:	e8 c9 f4 ff ff       	call   c00239a0 <IDE::polling(unsigned char, unsigned int)>
c00244d7:	83 c4 10             	add    esp,0x10
c00244da:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00244e0:	84 c0                	test   al,al
c00244e2:	74 23                	je     c0024507 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00244e4:	0f b6 d8             	movzx  ebx,al
c00244e7:	0f b6 d2             	movzx  edx,dl
c00244ea:	53                   	push   ebx
c00244eb:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00244f2:	50                   	push   eax
c00244f3:	52                   	push   edx
c00244f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244fa:	e8 f1 f3 ff ff       	call   c00238f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00244ff:	83 c4 10             	add    esp,0x10
c0024502:	e9 84 01 00 00       	jmp    c002468b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024507:	0f b6 d2             	movzx  edx,dl
c002450a:	53                   	push   ebx
c002450b:	53                   	push   ebx
c002450c:	52                   	push   edx
c002450d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024513:	e8 d4 e9 ff ff       	call   c0022eec <IDE::getBase(unsigned char)>
c0024518:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002451c:	b9 06 00 00 00       	mov    ecx,0x6
c0024521:	89 c2                	mov    edx,eax
c0024523:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024526:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002452a:	83 c4 10             	add    esp,0x10
c002452d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024533:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002453a:	85 db                	test   ebx,ebx
c002453c:	0f 84 ec 00 00 00    	je     c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024542:	51                   	push   ecx
c0024543:	51                   	push   ecx
c0024544:	52                   	push   edx
c0024545:	50                   	push   eax
c0024546:	e8 21 eb ff ff       	call   c002306c <IDE::waitInterrupt(unsigned char)>
c002454b:	83 c4 10             	add    esp,0x10
c002454e:	84 c0                	test   al,al
c0024550:	0f 84 d4 fe ff ff    	je     c002442a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024556:	56                   	push   esi
c0024557:	56                   	push   esi
c0024558:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002455f:	50                   	push   eax
c0024560:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024566:	e8 6d e9 ff ff       	call   c0022ed8 <IDE::prepareInterrupt(unsigned char)>
c002456b:	83 c4 0c             	add    esp,0xc
c002456e:	6a 04                	push   0x4
c0024570:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024577:	50                   	push   eax
c0024578:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002457e:	e8 3b ea ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c0024583:	83 c4 0c             	add    esp,0xc
c0024586:	89 c6                	mov    esi,eax
c0024588:	6a 05                	push   0x5
c002458a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024591:	50                   	push   eax
c0024592:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024598:	e8 21 ea ff ff       	call   c0022fbe <IDE::read(unsigned char, unsigned char)>
c002459d:	89 f1                	mov    ecx,esi
c002459f:	0f b6 c0             	movzx  eax,al
c00245a2:	0f b6 f1             	movzx  esi,cl
c00245a5:	c1 e0 08             	shl    eax,0x8
c00245a8:	09 c6                	or     esi,eax
c00245aa:	d1 fe                	sar    esi,1
c00245ac:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00245b0:	83 c4 10             	add    esp,0x10
c00245b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00245b8:	74 41                	je     c00245fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00245ba:	31 c9                	xor    ecx,ecx
c00245bc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245c2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245c9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00245cd:	75 0a                	jne    c00245d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00245cf:	01 c9                	add    ecx,ecx
c00245d1:	01 cd                	add    ebp,ecx
c00245d3:	4b                   	dec    ebx
c00245d4:	e9 54 ff ff ff       	jmp    c002452d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00245d9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00245de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00245e2:	51                   	push   ecx
c00245e3:	51                   	push   ecx
c00245e4:	52                   	push   edx
c00245e5:	50                   	push   eax
c00245e6:	e8 01 e9 ff ff       	call   c0022eec <IDE::getBase(unsigned char)>
c00245eb:	89 c2                	mov    edx,eax
c00245ed:	89 f0                	mov    eax,esi
c00245ef:	66 ef                	out    dx,ax
c00245f1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00245f5:	83 c4 10             	add    esp,0x10
c00245f8:	41                   	inc    ecx
c00245f9:	eb c1                	jmp    c00245bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00245fb:	31 f6                	xor    esi,esi
c00245fd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024603:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002460a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002460e:	75 06                	jne    c0024616 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024610:	01 f6                	add    esi,esi
c0024612:	01 f5                	add    ebp,esi
c0024614:	eb bd                	jmp    c00245d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024616:	51                   	push   ecx
c0024617:	51                   	push   ecx
c0024618:	52                   	push   edx
c0024619:	50                   	push   eax
c002461a:	e8 cd e8 ff ff       	call   c0022eec <IDE::getBase(unsigned char)>
c002461f:	89 c2                	mov    edx,eax
c0024621:	66 ed                	in     ax,dx
c0024623:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024628:	83 c4 10             	add    esp,0x10
c002462b:	46                   	inc    esi
c002462c:	eb cf                	jmp    c00245fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002462e:	51                   	push   ecx
c002462f:	51                   	push   ecx
c0024630:	52                   	push   edx
c0024631:	50                   	push   eax
c0024632:	e8 35 ea ff ff       	call   c002306c <IDE::waitInterrupt(unsigned char)>
c0024637:	83 c4 10             	add    esp,0x10
c002463a:	84 c0                	test   al,al
c002463c:	0f 84 e8 fd ff ff    	je     c002442a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024642:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024647:	52                   	push   edx
c0024648:	52                   	push   edx
c0024649:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024650:	50                   	push   eax
c0024651:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024657:	e8 7c e8 ff ff       	call   c0022ed8 <IDE::prepareInterrupt(unsigned char)>
c002465c:	83 c4 10             	add    esp,0x10
c002465f:	50                   	push   eax
c0024660:	50                   	push   eax
c0024661:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024668:	50                   	push   eax
c0024669:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002466f:	e8 78 e8 ff ff       	call   c0022eec <IDE::getBase(unsigned char)>
c0024674:	8d 50 07             	lea    edx,[eax+0x7]
c0024677:	ec                   	in     al,dx
c0024678:	83 c4 10             	add    esp,0x10
c002467b:	a8 88                	test   al,0x88
c002467d:	74 0a                	je     c0024689 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002467f:	4b                   	dec    ebx
c0024680:	75 dd                	jne    c002465f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024682:	bb 02 00 00 00       	mov    ebx,0x2
c0024687:	eb 02                	jmp    c002468b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024689:	31 db                	xor    ebx,ebx
c002468b:	83 c4 1c             	add    esp,0x1c
c002468e:	89 d8                	mov    eax,ebx
c0024690:	5b                   	pop    ebx
c0024691:	5e                   	pop    esi
c0024692:	5f                   	pop    edi
c0024693:	5d                   	pop    ebp
c0024694:	c3                   	ret    
c0024695:	90                   	nop

c0024696 <ATAPI::diskRemoved()>:
c0024696:	83 ec 18             	sub    esp,0x18
c0024699:	68 a5 c2 02 c0       	push   0xc002c2a5
c002469e:	e8 08 e0 fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00246a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246a7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246ae:	83 c4 1c             	add    esp,0x1c
c00246b1:	c3                   	ret    

c00246b2 <ATAPI::eject()>:
c00246b2:	57                   	push   edi
c00246b3:	b9 03 00 00 00       	mov    ecx,0x3
c00246b8:	53                   	push   ebx
c00246b9:	83 ec 14             	sub    esp,0x14
c00246bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00246c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246c4:	fc                   	cld    
c00246c5:	31 c0                	xor    eax,eax
c00246c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246c9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00246ce:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00246d3:	50                   	push   eax
c00246d4:	50                   	push   eax
c00246d5:	6a 00                	push   0x0
c00246d7:	6a 00                	push   0x0
c00246d9:	6a 00                	push   0x0
c00246db:	6a 02                	push   0x2
c00246dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00246e1:	50                   	push   eax
c00246e2:	53                   	push   ebx
c00246e3:	e8 ee fc ff ff       	call   c00243d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00246e8:	83 c4 14             	add    esp,0x14
c00246eb:	53                   	push   ebx
c00246ec:	e8 a5 ff ff ff       	call   c0024696 <ATAPI::diskRemoved()>
c00246f1:	83 c4 24             	add    esp,0x24
c00246f4:	31 c0                	xor    eax,eax
c00246f6:	5b                   	pop    ebx
c00246f7:	5f                   	pop    edi
c00246f8:	c3                   	ret    
c00246f9:	90                   	nop

c00246fa <ATAPI::diskInserted()>:
c00246fa:	53                   	push   ebx
c00246fb:	83 ec 14             	sub    esp,0x14
c00246fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024702:	68 bc c2 02 c0       	push   0xc002c2bc
c0024707:	e8 9f df fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c002470c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024713:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024716:	e8 67 f8 fe ff       	call   c0013f82 <PhysicalDisk::startCache()>
c002471b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002471f:	83 c4 18             	add    esp,0x18
c0024722:	5b                   	pop    ebx
c0024723:	e9 dc 1a ff ff       	jmp    c0016204 <createPartitionsForDisk(PhysicalDisk*)>

c0024728 <ATAPI::detectMedia()>:
c0024728:	56                   	push   esi
c0024729:	53                   	push   ebx
c002472a:	83 ec 28             	sub    esp,0x28
c002472d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024731:	6a 0c                	push   0xc
c0024733:	6a 00                	push   0x0
c0024735:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024739:	56                   	push   esi
c002473a:	e8 11 c0 fd ff       	call   c0000750 <memset>
c002473f:	58                   	pop    eax
c0024740:	5a                   	pop    edx
c0024741:	6a 00                	push   0x0
c0024743:	6a 00                	push   0x0
c0024745:	6a 00                	push   0x0
c0024747:	6a 00                	push   0x0
c0024749:	56                   	push   esi
c002474a:	53                   	push   ebx
c002474b:	e8 86 fc ff ff       	call   c00243d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024750:	83 c4 1c             	add    esp,0x1c
c0024753:	6a 0c                	push   0xc
c0024755:	6a 00                	push   0x0
c0024757:	56                   	push   esi
c0024758:	e8 f3 bf fd ff       	call   c0000750 <memset>
c002475d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024762:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024767:	59                   	pop    ecx
c0024768:	58                   	pop    eax
c0024769:	6a 01                	push   0x1
c002476b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002476f:	50                   	push   eax
c0024770:	6a 00                	push   0x0
c0024772:	6a 12                	push   0x12
c0024774:	56                   	push   esi
c0024775:	53                   	push   ebx
c0024776:	e8 5b fc ff ff       	call   c00243d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002477b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002477f:	83 c4 20             	add    esp,0x20
c0024782:	83 e0 7f             	and    eax,0x7f
c0024785:	3c 70                	cmp    al,0x70
c0024787:	74 15                	je     c002479e <ATAPI::detectMedia()+0x76>
c0024789:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024790:	75 0c                	jne    c002479e <ATAPI::detectMedia()+0x76>
c0024792:	83 ec 0c             	sub    esp,0xc
c0024795:	53                   	push   ebx
c0024796:	e8 5f ff ff ff       	call   c00246fa <ATAPI::diskInserted()>
c002479b:	83 c4 10             	add    esp,0x10
c002479e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247a2:	83 e0 0f             	and    eax,0xf
c00247a5:	3c 02                	cmp    al,0x2
c00247a7:	75 1b                	jne    c00247c4 <ATAPI::detectMedia()+0x9c>
c00247a9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247ae:	75 2d                	jne    c00247dd <ATAPI::detectMedia()+0xb5>
c00247b0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247b7:	74 24                	je     c00247dd <ATAPI::detectMedia()+0xb5>
c00247b9:	83 ec 0c             	sub    esp,0xc
c00247bc:	53                   	push   ebx
c00247bd:	e8 d4 fe ff ff       	call   c0024696 <ATAPI::diskRemoved()>
c00247c2:	eb 16                	jmp    c00247da <ATAPI::detectMedia()+0xb2>
c00247c4:	84 c0                	test   al,al
c00247c6:	75 15                	jne    c00247dd <ATAPI::detectMedia()+0xb5>
c00247c8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247cf:	75 0c                	jne    c00247dd <ATAPI::detectMedia()+0xb5>
c00247d1:	83 ec 0c             	sub    esp,0xc
c00247d4:	53                   	push   ebx
c00247d5:	e8 20 ff ff ff       	call   c00246fa <ATAPI::diskInserted()>
c00247da:	83 c4 10             	add    esp,0x10
c00247dd:	83 c4 24             	add    esp,0x24
c00247e0:	5b                   	pop    ebx
c00247e1:	5e                   	pop    esi
c00247e2:	c3                   	ret    
c00247e3:	90                   	nop

c00247e4 <ATAPI::open(int, int, void*)>:
c00247e4:	53                   	push   ebx
c00247e5:	83 ec 08             	sub    esp,0x8
c00247e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247f4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00247fa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024800:	c1 e0 06             	shl    eax,0x6
c0024803:	01 d0                	add    eax,edx
c0024805:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002480c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024812:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024819:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024823:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024829:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024830:	6a 04                	push   0x4
c0024832:	6a 0c                	push   0xc
c0024834:	51                   	push   ecx
c0024835:	52                   	push   edx
c0024836:	e8 c3 e6 ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c002483b:	90                   	nop
c002483c:	90                   	nop
c002483d:	6a 00                	push   0x0
c002483f:	6a 0c                	push   0xc
c0024841:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024848:	50                   	push   eax
c0024849:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002484f:	e8 aa e6 ff ff       	call   c0022efe <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024854:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002485b:	83 c4 14             	add    esp,0x14
c002485e:	53                   	push   ebx
c002485f:	e8 c4 fe ff ff       	call   c0024728 <ATAPI::detectMedia()>
c0024864:	31 c0                	xor    eax,eax
c0024866:	83 c4 18             	add    esp,0x18
c0024869:	5b                   	pop    ebx
c002486a:	c3                   	ret    
c002486b:	90                   	nop

c002486c <ATAPI::read(unsigned long long, int, void*)>:
c002486c:	55                   	push   ebp
c002486d:	57                   	push   edi
c002486e:	56                   	push   esi
c002486f:	53                   	push   ebx
c0024870:	83 ec 1c             	sub    esp,0x1c
c0024873:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024877:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002487b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002487f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024886:	74 41                	je     c00248c9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024888:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002488c:	b9 03 00 00 00       	mov    ecx,0x3
c0024891:	fc                   	cld    
c0024892:	31 c0                	xor    eax,eax
c0024894:	86 fb                	xchg   bl,bh
c0024896:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024898:	c1 c3 10             	rol    ebx,0x10
c002489b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248a0:	89 e8                	mov    eax,ebp
c00248a2:	86 fb                	xchg   bl,bh
c00248a4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00248a8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248ac:	50                   	push   eax
c00248ad:	50                   	push   eax
c00248ae:	55                   	push   ebp
c00248af:	c1 e5 0b             	shl    ebp,0xb
c00248b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248b6:	6a 00                	push   0x0
c00248b8:	55                   	push   ebp
c00248b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248bd:	50                   	push   eax
c00248be:	56                   	push   esi
c00248bf:	e8 12 fb ff ff       	call   c00243d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248c4:	83 c4 20             	add    esp,0x20
c00248c7:	eb 1a                	jmp    c00248e3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00248c9:	83 ec 0c             	sub    esp,0xc
c00248cc:	56                   	push   esi
c00248cd:	e8 56 fe ff ff       	call   c0024728 <ATAPI::detectMedia()>
c00248d2:	83 c4 10             	add    esp,0x10
c00248d5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248dc:	75 aa                	jne    c0024888 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00248de:	b8 02 00 00 00       	mov    eax,0x2
c00248e3:	83 c4 1c             	add    esp,0x1c
c00248e6:	5b                   	pop    ebx
c00248e7:	5e                   	pop    esi
c00248e8:	5f                   	pop    edi
c00248e9:	5d                   	pop    ebp
c00248ea:	c3                   	ret    
c00248eb:	90                   	nop

c00248ec <SATA::close(int, int, void*)>:
c00248ec:	83 ec 0c             	sub    esp,0xc
c00248ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248f9:	85 c0                	test   eax,eax
c00248fb:	74 0c                	je     c0024909 <SATA::close(int, int, void*)+0x1d>
c00248fd:	83 ec 0c             	sub    esp,0xc
c0024900:	8b 10                	mov    edx,DWORD PTR [eax]
c0024902:	50                   	push   eax
c0024903:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024906:	83 c4 10             	add    esp,0x10
c0024909:	31 c0                	xor    eax,eax
c002490b:	83 c4 0c             	add    esp,0xc
c002490e:	c3                   	ret    
c002490f:	90                   	nop

c0024910 <SATA::powerSaving(PowerSavingLevel)>:
c0024910:	c3                   	ret    
c0024911:	90                   	nop

c0024912 <SATA::open(int, int, void*)>:
c0024912:	56                   	push   esi
c0024913:	53                   	push   ebx
c0024914:	50                   	push   eax
c0024915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002491d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024927:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002492d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002493b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024945:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002494b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024952:	e8 1a b0 fe ff       	call   c000f971 <Phys::allocatePage()>
c0024957:	89 c6                	mov    esi,eax
c0024959:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002495f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024965:	e8 07 b0 fe ff       	call   c000f971 <Phys::allocatePage()>
c002496a:	39 c6                	cmp    esi,eax
c002496c:	74 10                	je     c002497e <SATA::open(int, int, void*)+0x6c>
c002496e:	83 ec 0c             	sub    esp,0xc
c0024971:	68 e4 c1 02 c0       	push   0xc002c1e4
c0024976:	e8 9c 54 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c002497b:	83 c4 10             	add    esp,0x10
c002497e:	83 ec 0c             	sub    esp,0xc
c0024981:	6a 02                	push   0x2
c0024983:	e8 77 c8 fe ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0024988:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002498e:	6a 03                	push   0x3
c0024990:	50                   	push   eax
c0024991:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024997:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c002499d:	e8 1a d0 fe ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c00249a2:	83 c4 14             	add    esp,0x14
c00249a5:	53                   	push   ebx
c00249a6:	e8 d7 f5 fe ff       	call   c0013f82 <PhysicalDisk::startCache()>
c00249ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249ae:	e8 51 18 ff ff       	call   c0016204 <createPartitionsForDisk(PhysicalDisk*)>
c00249b3:	83 c4 14             	add    esp,0x14
c00249b6:	31 c0                	xor    eax,eax
c00249b8:	5b                   	pop    ebx
c00249b9:	5e                   	pop    esi
c00249ba:	c3                   	ret    
c00249bb:	90                   	nop

c00249bc <SATA::SATA()>:
c00249bc:	83 ec 0c             	sub    esp,0xc
c00249bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249c3:	83 ec 04             	sub    esp,0x4
c00249c6:	68 00 02 00 00       	push   0x200
c00249cb:	68 f8 c1 02 c0       	push   0xc002c1f8
c00249d0:	50                   	push   eax
c00249d1:	e8 44 f5 fe ff       	call   c0013f1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00249d6:	83 c4 10             	add    esp,0x10
c00249d9:	ba 68 c2 02 c0       	mov    edx,0xc002c268
c00249de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249e2:	89 10                	mov    DWORD PTR [eax],edx
c00249e4:	90                   	nop
c00249e5:	83 c4 0c             	add    esp,0xc
c00249e8:	c3                   	ret    
c00249e9:	90                   	nop

c00249ea <SATA::access(unsigned long long, int, void*, bool)>:
c00249ea:	55                   	push   ebp
c00249eb:	57                   	push   edi
c00249ec:	56                   	push   esi
c00249ed:	53                   	push   ebx
c00249ee:	83 ec 2c             	sub    esp,0x2c
c00249f1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00249f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00249f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00249fd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a01:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a05:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a0e:	7e 10                	jle    c0024a20 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a10:	83 ec 0c             	sub    esp,0xc
c0024a13:	68 08 c2 02 c0       	push   0xc002c208
c0024a18:	e8 fa 53 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0024a1d:	83 c4 10             	add    esp,0x10
c0024a20:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a26:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a36:	89 d0                	mov    eax,edx
c0024a38:	c1 e0 07             	shl    eax,0x7
c0024a3b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a3f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a49:	51                   	push   ecx
c0024a4a:	8d 42 02             	lea    eax,[edx+0x2]
c0024a4d:	51                   	push   ecx
c0024a4e:	c1 e0 07             	shl    eax,0x7
c0024a51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a55:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a59:	50                   	push   eax
c0024a5a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024a60:	e8 1b f0 ff ff       	call   c0023a80 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024a65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024a69:	83 c4 10             	add    esp,0x10
c0024a6c:	b8 01 00 00 00       	mov    eax,0x1
c0024a71:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024a76:	0f 84 cb 01 00 00    	je     c0024c47 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a7c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a84:	c1 e0 09             	shl    eax,0x9
c0024a87:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024a8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024a90:	74 0e                	je     c0024aa0 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024a92:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024a98:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024a9c:	89 c1                	mov    ecx,eax
c0024a9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024aa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024aa4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024aaa:	8d 42 02             	lea    eax,[edx+0x2]
c0024aad:	c1 e0 07             	shl    eax,0x7
c0024ab0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024ab4:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ab6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024abc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ac2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ac6:	c1 e1 05             	shl    ecx,0x5
c0024ac9:	01 c8                	add    eax,ecx
c0024acb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024acf:	83 e1 01             	and    ecx,0x1
c0024ad2:	89 ce                	mov    esi,ecx
c0024ad4:	8a 08                	mov    cl,BYTE PTR [eax]
c0024ad6:	c1 e6 06             	shl    esi,0x6
c0024ad9:	83 e1 bf             	and    ecx,0xffffffbf
c0024adc:	09 f1                	or     ecx,esi
c0024ade:	88 08                	mov    BYTE PTR [eax],cl
c0024ae0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024ae2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024ae8:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024aee:	89 08                	mov    DWORD PTR [eax],ecx
c0024af0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024af6:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024afc:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b02:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b05:	50                   	push   eax
c0024b06:	68 90 00 00 00       	push   0x90
c0024b0b:	6a 00                	push   0x0
c0024b0d:	56                   	push   esi
c0024b0e:	e8 3d bc fd ff       	call   c0000750 <memset>
c0024b13:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b19:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b1d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b23:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b2b:	83 c4 10             	add    esp,0x10
c0024b2e:	48                   	dec    eax
c0024b2f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b34:	89 c1                	mov    ecx,eax
c0024b36:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b3c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b41:	09 c8                	or     eax,ecx
c0024b43:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b49:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b4c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b53:	66 25 00 7f          	and    ax,0x7f00
c0024b57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b5b:	66 0d 27 80          	or     ax,0x8027
c0024b5f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024b64:	66 89 06             	mov    WORD PTR [esi],ax
c0024b67:	19 c0                	sbb    eax,eax
c0024b69:	83 e0 f0             	and    eax,0xfffffff0
c0024b6c:	83 c0 35             	add    eax,0x35
c0024b6f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024b72:	89 e8                	mov    eax,ebp
c0024b74:	c1 e8 10             	shr    eax,0x10
c0024b77:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024b7a:	89 e8                	mov    eax,ebp
c0024b7c:	c1 e8 18             	shr    eax,0x18
c0024b7f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024b82:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024b86:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024b89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b8d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024b90:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024b94:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024b98:	89 d6                	mov    esi,edx
c0024b9a:	31 c0                	xor    eax,eax
c0024b9c:	c1 e6 07             	shl    esi,0x7
c0024b9f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024ba3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024ba9:	80 e1 88             	and    cl,0x88
c0024bac:	74 0a                	je     c0024bb8 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024bae:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bb3:	74 0a                	je     c0024bbf <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024bb5:	40                   	inc    eax
c0024bb6:	eb eb                	jmp    c0024ba3 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024bb8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bbd:	75 0a                	jne    c0024bc9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024bbf:	83 ec 0c             	sub    esp,0xc
c0024bc2:	68 41 c2 02 c0       	push   0xc002c241
c0024bc7:	eb 56                	jmp    c0024c1f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024bc9:	b8 01 00 00 00       	mov    eax,0x1
c0024bce:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024bd2:	c1 e2 07             	shl    edx,0x7
c0024bd5:	d3 e0                	shl    eax,cl
c0024bd7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024bdb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024be1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024be7:	85 c8                	test   eax,ecx
c0024be9:	74 20                	je     c0024c0b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024beb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024bf1:	0f ba e1 1e          	bt     ecx,0x1e
c0024bf5:	73 ea                	jae    c0024be1 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024bf7:	83 ec 0c             	sub    esp,0xc
c0024bfa:	68 4f c2 02 c0       	push   0xc002c24f
c0024bff:	e8 13 52 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0024c04:	83 c4 10             	add    esp,0x10
c0024c07:	31 c0                	xor    eax,eax
c0024c09:	eb 3c                	jmp    c0024c47 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c0b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c11:	0f ba e0 1e          	bt     eax,0x1e
c0024c15:	73 17                	jae    c0024c2e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c17:	83 ec 0c             	sub    esp,0xc
c0024c1a:	68 4f c2 02 c0       	push   0xc002c24f
c0024c1f:	e8 f3 51 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0024c24:	83 c4 10             	add    esp,0x10
c0024c27:	b8 01 00 00 00       	mov    eax,0x1
c0024c2c:	eb 19                	jmp    c0024c47 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c2e:	31 c0                	xor    eax,eax
c0024c30:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c35:	75 10                	jne    c0024c47 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c37:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c3d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c47:	83 c4 2c             	add    esp,0x2c
c0024c4a:	5b                   	pop    ebx
c0024c4b:	5e                   	pop    esi
c0024c4c:	5f                   	pop    edi
c0024c4d:	5d                   	pop    ebp
c0024c4e:	c3                   	ret    
c0024c4f:	90                   	nop

c0024c50 <SATA::read(unsigned long long, int, void*)>:
c0024c50:	57                   	push   edi
c0024c51:	b8 04 00 00 00       	mov    eax,0x4
c0024c56:	56                   	push   esi
c0024c57:	53                   	push   ebx
c0024c58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c60:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c67:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c6b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c71:	77 25                	ja     c0024c98 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c73:	b8 06 00 00 00       	mov    eax,0x6
c0024c78:	85 f6                	test   esi,esi
c0024c7a:	74 1c                	je     c0024c98 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c7c:	50                   	push   eax
c0024c7d:	50                   	push   eax
c0024c7e:	6a 00                	push   0x0
c0024c80:	56                   	push   esi
c0024c81:	52                   	push   edx
c0024c82:	53                   	push   ebx
c0024c83:	51                   	push   ecx
c0024c84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c88:	e8 5d fd ff ff       	call   c00249ea <SATA::access(unsigned long long, int, void*, bool)>
c0024c8d:	83 c4 20             	add    esp,0x20
c0024c90:	85 c0                	test   eax,eax
c0024c92:	0f 95 c0             	setne  al
c0024c95:	0f b6 c0             	movzx  eax,al
c0024c98:	5b                   	pop    ebx
c0024c99:	5e                   	pop    esi
c0024c9a:	5f                   	pop    edi
c0024c9b:	c3                   	ret    

c0024c9c <SATA::write(unsigned long long, int, void*)>:
c0024c9c:	55                   	push   ebp
c0024c9d:	b8 04 00 00 00       	mov    eax,0x4
c0024ca2:	57                   	push   edi
c0024ca3:	56                   	push   esi
c0024ca4:	53                   	push   ebx
c0024ca5:	83 ec 0c             	sub    esp,0xc
c0024ca8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024cb0:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024cb3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024cb7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024cbb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024cc1:	77 3d                	ja     c0024d00 <SATA::write(unsigned long long, int, void*)+0x64>
c0024cc3:	b8 06 00 00 00       	mov    eax,0x6
c0024cc8:	85 ed                	test   ebp,ebp
c0024cca:	74 34                	je     c0024d00 <SATA::write(unsigned long long, int, void*)+0x64>
c0024ccc:	c1 e3 09             	shl    ebx,0x9
c0024ccf:	01 eb                	add    ebx,ebp
c0024cd1:	89 d6                	mov    esi,edx
c0024cd3:	89 cf                	mov    edi,ecx
c0024cd5:	83 c6 01             	add    esi,0x1
c0024cd8:	83 d7 00             	adc    edi,0x0
c0024cdb:	50                   	push   eax
c0024cdc:	50                   	push   eax
c0024cdd:	6a 01                	push   0x1
c0024cdf:	55                   	push   ebp
c0024ce0:	81 c5 00 02 00 00    	add    ebp,0x200
c0024ce6:	6a 01                	push   0x1
c0024ce8:	51                   	push   ecx
c0024ce9:	52                   	push   edx
c0024cea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024cee:	e8 f7 fc ff ff       	call   c00249ea <SATA::access(unsigned long long, int, void*, bool)>
c0024cf3:	83 c4 20             	add    esp,0x20
c0024cf6:	89 f2                	mov    edx,esi
c0024cf8:	89 f9                	mov    ecx,edi
c0024cfa:	39 dd                	cmp    ebp,ebx
c0024cfc:	75 d3                	jne    c0024cd1 <SATA::write(unsigned long long, int, void*)+0x35>
c0024cfe:	31 c0                	xor    eax,eax
c0024d00:	83 c4 0c             	add    esp,0xc
c0024d03:	5b                   	pop    ebx
c0024d04:	5e                   	pop    esi
c0024d05:	5f                   	pop    edi
c0024d06:	5d                   	pop    ebp
c0024d07:	c3                   	ret    

c0024d08 <SATAPI::write(unsigned long long, int, void*)>:
c0024d08:	b8 03 00 00 00       	mov    eax,0x3
c0024d0d:	c3                   	ret    

c0024d0e <SATAPI::close(int, int, void*)>:
c0024d0e:	83 ec 0c             	sub    esp,0xc
c0024d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d1b:	85 c0                	test   eax,eax
c0024d1d:	74 0c                	je     c0024d2b <SATAPI::close(int, int, void*)+0x1d>
c0024d1f:	83 ec 0c             	sub    esp,0xc
c0024d22:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d24:	50                   	push   eax
c0024d25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d28:	83 c4 10             	add    esp,0x10
c0024d2b:	31 c0                	xor    eax,eax
c0024d2d:	83 c4 0c             	add    esp,0xc
c0024d30:	c3                   	ret    
c0024d31:	90                   	nop

c0024d32 <SATAPI::SATAPI()>:
c0024d32:	83 ec 0c             	sub    esp,0xc
c0024d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d39:	83 ec 04             	sub    esp,0x4
c0024d3c:	68 00 08 00 00       	push   0x800
c0024d41:	68 98 c2 02 c0       	push   0xc002c298
c0024d46:	50                   	push   eax
c0024d47:	e8 ce f1 fe ff       	call   c0013f1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d4c:	83 c4 10             	add    esp,0x10
c0024d4f:	ba 44 c3 02 c0       	mov    edx,0xc002c344
c0024d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d58:	89 10                	mov    DWORD PTR [eax],edx
c0024d5a:	90                   	nop
c0024d5b:	83 c4 0c             	add    esp,0xc
c0024d5e:	c3                   	ret    
c0024d5f:	90                   	nop

c0024d60 <SATAPI::diskRemoved()>:
c0024d60:	83 ec 18             	sub    esp,0x18
c0024d63:	68 a4 c2 02 c0       	push   0xc002c2a4
c0024d68:	e8 3e d9 fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0024d6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d71:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024d78:	83 c4 1c             	add    esp,0x1c
c0024d7b:	c3                   	ret    

c0024d7c <SATAPI::diskInserted()>:
c0024d7c:	53                   	push   ebx
c0024d7d:	83 ec 14             	sub    esp,0x14
c0024d80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024d84:	68 bb c2 02 c0       	push   0xc002c2bb
c0024d89:	e8 1d d9 fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0024d8e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024d95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d98:	e8 e5 f1 fe ff       	call   c0013f82 <PhysicalDisk::startCache()>
c0024d9d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024da1:	83 c4 18             	add    esp,0x18
c0024da4:	5b                   	pop    ebx
c0024da5:	e9 5a 14 ff ff       	jmp    c0016204 <createPartitionsForDisk(PhysicalDisk*)>

c0024daa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024daa:	55                   	push   ebp
c0024dab:	57                   	push   edi
c0024dac:	56                   	push   esi
c0024dad:	53                   	push   ebx
c0024dae:	83 ec 34             	sub    esp,0x34
c0024db1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024db5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024db9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024dbd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024dc1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024dc5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024dcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024dd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024dd5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024ddb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ddf:	c1 e0 07             	shl    eax,0x7
c0024de2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024dea:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024df4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024df8:	8d 58 02             	lea    ebx,[eax+0x2]
c0024dfb:	c1 e3 07             	shl    ebx,0x7
c0024dfe:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e02:	53                   	push   ebx
c0024e03:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e09:	e8 72 ec ff ff       	call   c0023a80 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e12:	83 c4 10             	add    esp,0x10
c0024e15:	b8 01 00 00 00       	mov    eax,0x1
c0024e1a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e1f:	0f 84 85 01 00 00    	je     c0024faa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e25:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e2d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e33:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e3d:	c1 e1 05             	shl    ecx,0x5
c0024e40:	01 c8                	add    eax,ecx
c0024e42:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e44:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e4a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e50:	89 08                	mov    DWORD PTR [eax],ecx
c0024e52:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e58:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e5e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e64:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e67:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024e6a:	50                   	push   eax
c0024e6b:	68 90 00 00 00       	push   0x90
c0024e70:	6a 00                	push   0x0
c0024e72:	53                   	push   ebx
c0024e73:	e8 d8 b8 fd ff       	call   c0000750 <memset>
c0024e78:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024e7c:	b9 0c 00 00 00       	mov    ecx,0xc
c0024e81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e83:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024e89:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024e8d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e93:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e97:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e9b:	48                   	dec    eax
c0024e9c:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ea1:	89 c1                	mov    ecx,eax
c0024ea3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ea9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024eae:	09 c8                	or     eax,ecx
c0024eb0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024eb6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024eb9:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ec0:	66 25 00 7f          	and    ax,0x7f00
c0024ec4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024ec8:	66 0d 27 80          	or     ax,0x8027
c0024ecc:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024ed0:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ed3:	89 d0                	mov    eax,edx
c0024ed5:	c1 ea 18             	shr    edx,0x18
c0024ed8:	c1 e8 10             	shr    eax,0x10
c0024edb:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024ede:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ee1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024ee5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ee8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024eec:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024eef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024ef3:	83 c4 10             	add    esp,0x10
c0024ef6:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024efa:	31 c0                	xor    eax,eax
c0024efc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f00:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f06:	80 e2 88             	and    dl,0x88
c0024f09:	74 0a                	je     c0024f15 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f0b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f10:	74 0a                	je     c0024f1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f12:	40                   	inc    eax
c0024f13:	eb eb                	jmp    c0024f00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f15:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f1a:	75 0f                	jne    c0024f2b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f1c:	83 ec 0c             	sub    esp,0xc
c0024f1f:	68 41 c2 02 c0       	push   0xc002c241
c0024f24:	e8 ee 4e ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0024f29:	eb 3f                	jmp    c0024f6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f2b:	ba 01 00 00 00       	mov    edx,0x1
c0024f30:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f38:	d3 e2                	shl    edx,cl
c0024f3a:	c1 e0 07             	shl    eax,0x7
c0024f3d:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f43:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f47:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f4d:	85 ca                	test   edx,ecx
c0024f4f:	74 23                	je     c0024f74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f51:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f57:	0f ba e1 1e          	bt     ecx,0x1e
c0024f5b:	73 ea                	jae    c0024f47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f5d:	83 ec 0c             	sub    esp,0xc
c0024f60:	68 d3 c2 02 c0       	push   0xc002c2d3
c0024f65:	e8 41 d7 fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0024f6a:	83 c4 10             	add    esp,0x10
c0024f6d:	b8 01 00 00 00       	mov    eax,0x1
c0024f72:	eb 36                	jmp    c0024faa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f74:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024f7a:	0f ba e0 1e          	bt     eax,0x1e
c0024f7e:	73 0a                	jae    c0024f8a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024f80:	83 ec 0c             	sub    esp,0xc
c0024f83:	68 e6 c2 02 c0       	push   0xc002c2e6
c0024f88:	eb db                	jmp    c0024f65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024f8a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024f8f:	74 17                	je     c0024fa8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024f91:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024f96:	74 10                	je     c0024fa8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024f98:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024f9e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024fa2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024fa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024fa8:	31 c0                	xor    eax,eax
c0024faa:	83 c4 2c             	add    esp,0x2c
c0024fad:	5b                   	pop    ebx
c0024fae:	5e                   	pop    esi
c0024faf:	5f                   	pop    edi
c0024fb0:	5d                   	pop    ebp
c0024fb1:	c3                   	ret    

c0024fb2 <SATAPI::eject()>:
c0024fb2:	57                   	push   edi
c0024fb3:	b9 03 00 00 00       	mov    ecx,0x3
c0024fb8:	53                   	push   ebx
c0024fb9:	83 ec 14             	sub    esp,0x14
c0024fbc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024fc0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fc4:	fc                   	cld    
c0024fc5:	31 c0                	xor    eax,eax
c0024fc7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024fc9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024fce:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024fd3:	50                   	push   eax
c0024fd4:	6a 00                	push   0x0
c0024fd6:	6a 00                	push   0x0
c0024fd8:	6a 00                	push   0x0
c0024fda:	6a 00                	push   0x0
c0024fdc:	6a 02                	push   0x2
c0024fde:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024fe2:	50                   	push   eax
c0024fe3:	53                   	push   ebx
c0024fe4:	e8 c1 fd ff ff       	call   c0024daa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024fe9:	83 c4 14             	add    esp,0x14
c0024fec:	53                   	push   ebx
c0024fed:	e8 6e fd ff ff       	call   c0024d60 <SATAPI::diskRemoved()>
c0024ff2:	83 c4 24             	add    esp,0x24
c0024ff5:	31 c0                	xor    eax,eax
c0024ff7:	5b                   	pop    ebx
c0024ff8:	5f                   	pop    edi
c0024ff9:	c3                   	ret    

c0024ffa <SATAPI::detectMedia()>:
c0024ffa:	56                   	push   esi
c0024ffb:	53                   	push   ebx
c0024ffc:	83 ec 28             	sub    esp,0x28
c0024fff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025003:	6a 0c                	push   0xc
c0025005:	6a 00                	push   0x0
c0025007:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002500b:	56                   	push   esi
c002500c:	e8 3f b7 fd ff       	call   c0000750 <memset>
c0025011:	83 c4 0c             	add    esp,0xc
c0025014:	6a 00                	push   0x0
c0025016:	6a 00                	push   0x0
c0025018:	6a 00                	push   0x0
c002501a:	6a 00                	push   0x0
c002501c:	6a 00                	push   0x0
c002501e:	56                   	push   esi
c002501f:	53                   	push   ebx
c0025020:	e8 85 fd ff ff       	call   c0024daa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025025:	83 c4 1c             	add    esp,0x1c
c0025028:	6a 0c                	push   0xc
c002502a:	6a 00                	push   0x0
c002502c:	56                   	push   esi
c002502d:	e8 1e b7 fd ff       	call   c0000750 <memset>
c0025032:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025037:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002503c:	83 c4 0c             	add    esp,0xc
c002503f:	6a 01                	push   0x1
c0025041:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025045:	50                   	push   eax
c0025046:	6a 00                	push   0x0
c0025048:	6a 00                	push   0x0
c002504a:	6a 12                	push   0x12
c002504c:	56                   	push   esi
c002504d:	53                   	push   ebx
c002504e:	e8 57 fd ff ff       	call   c0024daa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025053:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025057:	83 c4 20             	add    esp,0x20
c002505a:	83 e0 7f             	and    eax,0x7f
c002505d:	3c 70                	cmp    al,0x70
c002505f:	74 15                	je     c0025076 <SATAPI::detectMedia()+0x7c>
c0025061:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025068:	75 0c                	jne    c0025076 <SATAPI::detectMedia()+0x7c>
c002506a:	83 ec 0c             	sub    esp,0xc
c002506d:	53                   	push   ebx
c002506e:	e8 09 fd ff ff       	call   c0024d7c <SATAPI::diskInserted()>
c0025073:	83 c4 10             	add    esp,0x10
c0025076:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002507a:	83 e0 0f             	and    eax,0xf
c002507d:	3c 02                	cmp    al,0x2
c002507f:	75 1b                	jne    c002509c <SATAPI::detectMedia()+0xa2>
c0025081:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025086:	75 2d                	jne    c00250b5 <SATAPI::detectMedia()+0xbb>
c0025088:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002508f:	74 24                	je     c00250b5 <SATAPI::detectMedia()+0xbb>
c0025091:	83 ec 0c             	sub    esp,0xc
c0025094:	53                   	push   ebx
c0025095:	e8 c6 fc ff ff       	call   c0024d60 <SATAPI::diskRemoved()>
c002509a:	eb 16                	jmp    c00250b2 <SATAPI::detectMedia()+0xb8>
c002509c:	84 c0                	test   al,al
c002509e:	75 15                	jne    c00250b5 <SATAPI::detectMedia()+0xbb>
c00250a0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250a7:	75 0c                	jne    c00250b5 <SATAPI::detectMedia()+0xbb>
c00250a9:	83 ec 0c             	sub    esp,0xc
c00250ac:	53                   	push   ebx
c00250ad:	e8 ca fc ff ff       	call   c0024d7c <SATAPI::diskInserted()>
c00250b2:	83 c4 10             	add    esp,0x10
c00250b5:	83 c4 24             	add    esp,0x24
c00250b8:	5b                   	pop    ebx
c00250b9:	5e                   	pop    esi
c00250ba:	c3                   	ret    
c00250bb:	90                   	nop

c00250bc <SATAPI::open(int, int, void*)>:
c00250bc:	56                   	push   esi
c00250bd:	53                   	push   ebx
c00250be:	50                   	push   eax
c00250bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250c7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00250d1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00250d7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00250e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250e5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00250ef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00250f5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00250fc:	e8 70 a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c0025101:	89 c6                	mov    esi,eax
c0025103:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025109:	81 c6 00 10 00 00    	add    esi,0x1000
c002510f:	e8 5d a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c0025114:	39 c6                	cmp    esi,eax
c0025116:	74 10                	je     c0025128 <SATAPI::open(int, int, void*)+0x6c>
c0025118:	83 ec 0c             	sub    esp,0xc
c002511b:	68 fb c2 02 c0       	push   0xc002c2fb
c0025120:	e8 f2 4c ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0025125:	83 c4 10             	add    esp,0x10
c0025128:	83 ec 0c             	sub    esp,0xc
c002512b:	6a 02                	push   0x2
c002512d:	e8 cd c0 fe ff       	call   c00111ff <Virt::allocateKernelVirtualPages(int)>
c0025132:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025138:	6a 03                	push   0x3
c002513a:	50                   	push   eax
c002513b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025141:	ff 35 50 da 02 c0    	push   DWORD PTR ds:0xc002da50
c0025147:	e8 70 c8 fe ff       	call   c00119bc <VAS::mapPage(unsigned long, unsigned long, int)>
c002514c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025153:	83 c4 14             	add    esp,0x14
c0025156:	53                   	push   ebx
c0025157:	e8 9e fe ff ff       	call   c0024ffa <SATAPI::detectMedia()>
c002515c:	83 c4 14             	add    esp,0x14
c002515f:	31 c0                	xor    eax,eax
c0025161:	5b                   	pop    ebx
c0025162:	5e                   	pop    esi
c0025163:	c3                   	ret    

c0025164 <SATAPI::read(unsigned long long, int, void*)>:
c0025164:	55                   	push   ebp
c0025165:	57                   	push   edi
c0025166:	56                   	push   esi
c0025167:	53                   	push   ebx
c0025168:	83 ec 1c             	sub    esp,0x1c
c002516b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002516f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025173:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025177:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002517e:	74 19                	je     c0025199 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025180:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025185:	7e 2e                	jle    c00251b5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025187:	83 ec 0c             	sub    esp,0xc
c002518a:	68 11 c3 02 c0       	push   0xc002c311
c002518f:	e8 83 4c ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0025194:	83 c4 10             	add    esp,0x10
c0025197:	eb 1c                	jmp    c00251b5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025199:	83 ec 0c             	sub    esp,0xc
c002519c:	55                   	push   ebp
c002519d:	e8 58 fe ff ff       	call   c0024ffa <SATAPI::detectMedia()>
c00251a2:	83 c4 10             	add    esp,0x10
c00251a5:	b8 02 00 00 00       	mov    eax,0x2
c00251aa:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251b1:	75 cd                	jne    c0025180 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00251b3:	eb 49                	jmp    c00251fe <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00251b5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251b9:	b9 03 00 00 00       	mov    ecx,0x3
c00251be:	fc                   	cld    
c00251bf:	31 c0                	xor    eax,eax
c00251c1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251c3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00251c8:	89 d8                	mov    eax,ebx
c00251ca:	86 e0                	xchg   al,ah
c00251cc:	c1 c0 10             	rol    eax,0x10
c00251cf:	86 e0                	xchg   al,ah
c00251d1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00251d5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00251d9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00251dd:	50                   	push   eax
c00251de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00251e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00251e6:	56                   	push   esi
c00251e7:	53                   	push   ebx
c00251e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00251ec:	c1 e0 0b             	shl    eax,0xb
c00251ef:	50                   	push   eax
c00251f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251f4:	50                   	push   eax
c00251f5:	55                   	push   ebp
c00251f6:	e8 af fb ff ff       	call   c0024daa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251fb:	83 c4 20             	add    esp,0x20
c00251fe:	83 c4 1c             	add    esp,0x1c
c0025201:	5b                   	pop    ebx
c0025202:	5e                   	pop    esi
c0025203:	5f                   	pop    edi
c0025204:	5d                   	pop    ebp
c0025205:	c3                   	ret    

c0025206 <AVX::open(int, int, void*)>:
c0025206:	83 ec 0c             	sub    esp,0xc
c0025209:	e8 3a 11 00 00       	call   c0026348 <avxInit>
c002520e:	b8 00 00 00 00       	mov    eax,0x0
c0025213:	83 c4 0c             	add    esp,0xc
c0025216:	c3                   	ret    
c0025217:	90                   	nop

c0025218 <AVX::close(int, int, void*)>:
c0025218:	83 ec 0c             	sub    esp,0xc
c002521b:	e8 29 11 00 00       	call   c0026349 <avxClose>
c0025220:	b8 00 00 00 00       	mov    eax,0x0
c0025225:	83 c4 0c             	add    esp,0xc
c0025228:	c3                   	ret    
c0025229:	90                   	nop

c002522a <AVX::available()>:
c002522a:	83 ec 0c             	sub    esp,0xc
c002522d:	e8 0e 11 00 00       	call   c0026340 <avxDetect>
c0025232:	85 c0                	test   eax,eax
c0025234:	0f 95 c0             	setne  al
c0025237:	83 c4 0c             	add    esp,0xc
c002523a:	c3                   	ret    
c002523b:	90                   	nop

c002523c <AVX::save(void*)>:
c002523c:	83 ec 0c             	sub    esp,0xc
c002523f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025243:	83 ec 0c             	sub    esp,0xc
c0025246:	50                   	push   eax
c0025247:	e8 fa 10 00 00       	call   c0026346 <avxSave>
c002524c:	83 c4 10             	add    esp,0x10
c002524f:	90                   	nop
c0025250:	83 c4 0c             	add    esp,0xc
c0025253:	c3                   	ret    

c0025254 <AVX::load(void*)>:
c0025254:	83 ec 0c             	sub    esp,0xc
c0025257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002525b:	83 ec 0c             	sub    esp,0xc
c002525e:	50                   	push   eax
c002525f:	e8 e3 10 00 00       	call   c0026347 <avxLoad>
c0025264:	83 c4 10             	add    esp,0x10
c0025267:	90                   	nop
c0025268:	83 c4 0c             	add    esp,0xc
c002526b:	c3                   	ret    

c002526c <AVX::AVX()>:
c002526c:	83 ec 0c             	sub    esp,0xc
c002526f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025273:	83 ec 08             	sub    esp,0x8
c0025276:	68 74 c3 02 c0       	push   0xc002c374
c002527b:	50                   	push   eax
c002527c:	e8 77 ed fe ff       	call   c0013ff8 <FPU::FPU(char const*)>
c0025281:	83 c4 10             	add    esp,0x10
c0025284:	ba 84 c3 02 c0       	mov    edx,0xc002c384
c0025289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002528d:	89 10                	mov    DWORD PTR [eax],edx
c002528f:	90                   	nop
c0025290:	83 c4 0c             	add    esp,0xc
c0025293:	c3                   	ret    

c0025294 <MMX::available()>:
c0025294:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0025299:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002529f:	83 e0 20             	and    eax,0x20
c00252a2:	84 c0                	test   al,al
c00252a4:	0f 95 c0             	setne  al
c00252a7:	c3                   	ret    

c00252a8 <MMX::open(int, int, void*)>:
c00252a8:	83 ec 0c             	sub    esp,0xc
c00252ab:	e8 22 11 00 00       	call   c00263d2 <x87Init>
c00252b0:	b8 00 00 00 00       	mov    eax,0x0
c00252b5:	83 c4 0c             	add    esp,0xc
c00252b8:	c3                   	ret    
c00252b9:	90                   	nop

c00252ba <MMX::close(int, int, void*)>:
c00252ba:	83 ec 0c             	sub    esp,0xc
c00252bd:	e8 2a 11 00 00       	call   c00263ec <x87Close>
c00252c2:	b8 00 00 00 00       	mov    eax,0x0
c00252c7:	83 c4 0c             	add    esp,0xc
c00252ca:	c3                   	ret    
c00252cb:	90                   	nop

c00252cc <MMX::save(void*)>:
c00252cc:	83 ec 0c             	sub    esp,0xc
c00252cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252d3:	83 ec 0c             	sub    esp,0xc
c00252d6:	50                   	push   eax
c00252d7:	e8 e5 10 00 00       	call   c00263c1 <x87Save>
c00252dc:	83 c4 10             	add    esp,0x10
c00252df:	90                   	nop
c00252e0:	83 c4 0c             	add    esp,0xc
c00252e3:	c3                   	ret    

c00252e4 <MMX::load(void*)>:
c00252e4:	83 ec 0c             	sub    esp,0xc
c00252e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252eb:	83 ec 0c             	sub    esp,0xc
c00252ee:	50                   	push   eax
c00252ef:	e8 d6 10 00 00       	call   c00263ca <x87Load>
c00252f4:	83 c4 10             	add    esp,0x10
c00252f7:	90                   	nop
c00252f8:	83 c4 0c             	add    esp,0xc
c00252fb:	c3                   	ret    

c00252fc <MMX::MMX()>:
c00252fc:	83 ec 0c             	sub    esp,0xc
c00252ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025303:	83 ec 08             	sub    esp,0x8
c0025306:	68 b4 c3 02 c0       	push   0xc002c3b4
c002530b:	50                   	push   eax
c002530c:	e8 e7 ec fe ff       	call   c0013ff8 <FPU::FPU(char const*)>
c0025311:	83 c4 10             	add    esp,0x10
c0025314:	ba c4 c3 02 c0       	mov    edx,0xc002c3c4
c0025319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002531d:	89 10                	mov    DWORD PTR [eax],edx
c002531f:	90                   	nop
c0025320:	83 c4 0c             	add    esp,0xc
c0025323:	c3                   	ret    

c0025324 <SSE::open(int, int, void*)>:
c0025324:	83 ec 0c             	sub    esp,0xc
c0025327:	e8 58 10 00 00       	call   c0026384 <sseInit>
c002532c:	b8 00 00 00 00       	mov    eax,0x0
c0025331:	83 c4 0c             	add    esp,0xc
c0025334:	c3                   	ret    
c0025335:	90                   	nop

c0025336 <SSE::close(int, int, void*)>:
c0025336:	83 ec 0c             	sub    esp,0xc
c0025339:	e8 56 10 00 00       	call   c0026394 <sseClose>
c002533e:	b8 00 00 00 00       	mov    eax,0x0
c0025343:	83 c4 0c             	add    esp,0xc
c0025346:	c3                   	ret    
c0025347:	90                   	nop

c0025348 <SSE::available()>:
c0025348:	83 ec 1c             	sub    esp,0x1c
c002534b:	e8 10 10 00 00       	call   c0026360 <absolutelyNoChanceInHell>
c0025350:	85 c0                	test   eax,eax
c0025352:	0f 95 c0             	setne  al
c0025355:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025359:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002535d:	83 c4 1c             	add    esp,0x1c
c0025360:	c3                   	ret    
c0025361:	90                   	nop

c0025362 <SSE::save(void*)>:
c0025362:	83 ec 0c             	sub    esp,0xc
c0025365:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025369:	83 ec 0c             	sub    esp,0xc
c002536c:	50                   	push   eax
c002536d:	e8 06 10 00 00       	call   c0026378 <sseSave>
c0025372:	83 c4 10             	add    esp,0x10
c0025375:	90                   	nop
c0025376:	83 c4 0c             	add    esp,0xc
c0025379:	c3                   	ret    

c002537a <SSE::load(void*)>:
c002537a:	83 ec 0c             	sub    esp,0xc
c002537d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025381:	83 ec 0c             	sub    esp,0xc
c0025384:	50                   	push   eax
c0025385:	e8 f4 0f 00 00       	call   c002637e <sseLoad>
c002538a:	83 c4 10             	add    esp,0x10
c002538d:	90                   	nop
c002538e:	83 c4 0c             	add    esp,0xc
c0025391:	c3                   	ret    

c0025392 <SSE::SSE()>:
c0025392:	83 ec 0c             	sub    esp,0xc
c0025395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025399:	83 ec 08             	sub    esp,0x8
c002539c:	68 f4 c3 02 c0       	push   0xc002c3f4
c00253a1:	50                   	push   eax
c00253a2:	e8 51 ec fe ff       	call   c0013ff8 <FPU::FPU(char const*)>
c00253a7:	83 c4 10             	add    esp,0x10
c00253aa:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c00253af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b3:	89 10                	mov    DWORD PTR [eax],edx
c00253b5:	90                   	nop
c00253b6:	83 c4 0c             	add    esp,0xc
c00253b9:	c3                   	ret    

c00253ba <x87::open(int, int, void*)>:
c00253ba:	83 ec 0c             	sub    esp,0xc
c00253bd:	e8 10 10 00 00       	call   c00263d2 <x87Init>
c00253c2:	b8 00 00 00 00       	mov    eax,0x0
c00253c7:	83 c4 0c             	add    esp,0xc
c00253ca:	c3                   	ret    
c00253cb:	90                   	nop

c00253cc <x87::close(int, int, void*)>:
c00253cc:	83 ec 0c             	sub    esp,0xc
c00253cf:	e8 18 10 00 00       	call   c00263ec <x87Close>
c00253d4:	b8 00 00 00 00       	mov    eax,0x0
c00253d9:	83 c4 0c             	add    esp,0xc
c00253dc:	c3                   	ret    
c00253dd:	90                   	nop

c00253de <x87::available()>:
c00253de:	83 ec 0c             	sub    esp,0xc
c00253e1:	e8 c0 0f 00 00       	call   c00263a6 <x87Detect>
c00253e6:	85 c0                	test   eax,eax
c00253e8:	0f 95 c0             	setne  al
c00253eb:	83 c4 0c             	add    esp,0xc
c00253ee:	c3                   	ret    
c00253ef:	90                   	nop

c00253f0 <x87::save(void*)>:
c00253f0:	83 ec 0c             	sub    esp,0xc
c00253f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253f7:	83 ec 0c             	sub    esp,0xc
c00253fa:	50                   	push   eax
c00253fb:	e8 c1 0f 00 00       	call   c00263c1 <x87Save>
c0025400:	83 c4 10             	add    esp,0x10
c0025403:	90                   	nop
c0025404:	83 c4 0c             	add    esp,0xc
c0025407:	c3                   	ret    

c0025408 <x87::load(void*)>:
c0025408:	83 ec 0c             	sub    esp,0xc
c002540b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002540f:	83 ec 0c             	sub    esp,0xc
c0025412:	50                   	push   eax
c0025413:	e8 b2 0f 00 00       	call   c00263ca <x87Load>
c0025418:	83 c4 10             	add    esp,0x10
c002541b:	90                   	nop
c002541c:	83 c4 0c             	add    esp,0xc
c002541f:	c3                   	ret    

c0025420 <x87::x87()>:
c0025420:	83 ec 0c             	sub    esp,0xc
c0025423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025427:	83 ec 08             	sub    esp,0x8
c002542a:	68 34 c4 02 c0       	push   0xc002c434
c002542f:	50                   	push   eax
c0025430:	e8 c3 eb fe ff       	call   c0013ff8 <FPU::FPU(char const*)>
c0025435:	83 c4 10             	add    esp,0x10
c0025438:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c002543d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025441:	89 10                	mov    DWORD PTR [eax],edx
c0025443:	90                   	nop
c0025444:	83 c4 0c             	add    esp,0xc
c0025447:	c3                   	ret    

c0025448 <APIC::disable()>:
c0025448:	90                   	nop
c0025449:	c3                   	ret    

c002544a <APIC::close(int, int, void*)>:
c002544a:	55                   	push   ebp
c002544b:	89 e5                	mov    ebp,esp
c002544d:	83 ec 08             	sub    esp,0x8
c0025450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025453:	8b 00                	mov    eax,DWORD PTR [eax]
c0025455:	83 c0 3c             	add    eax,0x3c
c0025458:	8b 00                	mov    eax,DWORD PTR [eax]
c002545a:	83 ec 0c             	sub    esp,0xc
c002545d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025460:	ff d0                	call   eax
c0025462:	83 c4 10             	add    esp,0x10
c0025465:	b8 00 00 00 00       	mov    eax,0x0
c002546a:	c9                   	leave  
c002546b:	c3                   	ret    

c002546c <IOAPIC::close(int, int, void*)>:
c002546c:	b8 00 00 00 00       	mov    eax,0x0
c0025471:	c3                   	ret    

c0025472 <APIC::io_wait()>:
c0025472:	eb 00                	jmp    c0025474 <APIC::io_wait()+0x2>
c0025474:	eb 00                	jmp    c0025476 <APIC::io_wait()+0x4>
c0025476:	90                   	nop
c0025477:	c3                   	ret    

c0025478 <APIC::getBase()>:
c0025478:	55                   	push   ebp
c0025479:	89 e5                	mov    ebp,esp
c002547b:	83 ec 18             	sub    esp,0x18
c002547e:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0025483:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025489:	83 e0 08             	and    eax,0x8
c002548c:	84 c0                	test   al,al
c002548e:	75 07                	jne    c0025497 <APIC::getBase()+0x1f>
c0025490:	b8 00 00 00 00       	mov    eax,0x0
c0025495:	eb 21                	jmp    c00254b8 <APIC::getBase()+0x40>
c0025497:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c002549c:	83 ec 08             	sub    esp,0x8
c002549f:	6a 1b                	push   0x1b
c00254a1:	50                   	push   eax
c00254a2:	e8 99 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254a7:	83 c4 10             	add    esp,0x10
c00254aa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254ad:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00254b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00254b8:	c9                   	leave  
c00254b9:	c3                   	ret    

c00254ba <APIC::eoi(unsigned char)>:
c00254ba:	55                   	push   ebp
c00254bb:	89 e5                	mov    ebp,esp
c00254bd:	83 ec 28             	sub    esp,0x28
c00254c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254c3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00254c6:	83 ec 0c             	sub    esp,0xc
c00254c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254cc:	e8 a7 ff ff ff       	call   c0025478 <APIC::getBase()>
c00254d1:	83 c4 10             	add    esp,0x10
c00254d4:	05 b0 00 00 00       	add    eax,0xb0
c00254d9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00254dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00254df:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00254e5:	90                   	nop
c00254e6:	c9                   	leave  
c00254e7:	c3                   	ret    

c00254e8 <APIC::open(int, int, void*)>:
c00254e8:	55                   	push   ebp
c00254e9:	89 e5                	mov    ebp,esp
c00254eb:	57                   	push   edi
c00254ec:	56                   	push   esi
c00254ed:	53                   	push   ebx
c00254ee:	83 ec 2c             	sub    esp,0x2c
c00254f1:	83 ec 0c             	sub    esp,0xc
c00254f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254f7:	e8 7c ff ff ff       	call   c0025478 <APIC::getBase()>
c00254fc:	83 c4 10             	add    esp,0x10
c00254ff:	89 c2                	mov    edx,eax
c0025501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025504:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002550a:	0f b6 f8             	movzx  edi,al
c002550d:	89 d0                	mov    eax,edx
c002550f:	ba 00 00 00 00       	mov    edx,0x0
c0025514:	89 c1                	mov    ecx,eax
c0025516:	80 e5 ff             	and    ch,0xff
c0025519:	89 cb                	mov    ebx,ecx
c002551b:	0f b6 f2             	movzx  esi,dl
c002551e:	89 d8                	mov    eax,ebx
c0025520:	89 f2                	mov    edx,esi
c0025522:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025525:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025528:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002552c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025530:	83 e0 00             	and    eax,0x0
c0025533:	09 d0                	or     eax,edx
c0025535:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002553c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025542:	8d 50 01             	lea    edx,[eax+0x1]
c0025545:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025548:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002554e:	0f b6 d0             	movzx  edx,al
c0025551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025554:	83 c2 08             	add    edx,0x8
c0025557:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002555b:	0f b6 c9             	movzx  ecx,cl
c002555e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025564:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025568:	83 ec 0c             	sub    esp,0xc
c002556b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002556e:	e8 05 ff ff ff       	call   c0025478 <APIC::getBase()>
c0025573:	83 c4 10             	add    esp,0x10
c0025576:	05 f0 00 00 00       	add    eax,0xf0
c002557b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002557e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025581:	8b 00                	mov    eax,DWORD PTR [eax]
c0025583:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025586:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002558d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025594:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025597:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002559a:	89 10                	mov    DWORD PTR [eax],edx
c002559c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255a3:	a1 b0 01 03 c0       	mov    eax,ds:0xc00301b0
c00255a8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255ab:	7d 7c                	jge    c0025629 <APIC::open(int, int, void*)+0x141>
c00255ad:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255b0:	8b 04 85 c0 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe40]
c00255b7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00255ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255bd:	8b 04 85 c0 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe40]
c00255c4:	c1 e8 08             	shr    eax,0x8
c00255c7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00255cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255ce:	8b 04 85 c0 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe40]
c00255d5:	c1 e8 18             	shr    eax,0x18
c00255d8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00255db:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00255df:	75 40                	jne    c0025621 <APIC::open(int, int, void*)+0x139>
c00255e1:	83 ec 0c             	sub    esp,0xc
c00255e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255e7:	e8 8c fe ff ff       	call   c0025478 <APIC::getBase()>
c00255ec:	83 c4 10             	add    esp,0x10
c00255ef:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00255f3:	75 07                	jne    c00255fc <APIC::open(int, int, void*)+0x114>
c00255f5:	ba 60 03 00 00       	mov    edx,0x360
c00255fa:	eb 05                	jmp    c0025601 <APIC::open(int, int, void*)+0x119>
c00255fc:	ba 50 03 00 00       	mov    edx,0x350
c0025601:	01 d0                	add    eax,edx
c0025603:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025606:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025609:	8b 00                	mov    eax,DWORD PTR [eax]
c002560b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002560e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025615:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025619:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002561c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002561f:	89 10                	mov    DWORD PTR [eax],edx
c0025621:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025624:	e9 7a ff ff ff       	jmp    c00255a3 <APIC::open(int, int, void*)+0xbb>
c0025629:	b8 00 00 00 00       	mov    eax,0x0
c002562e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025631:	5b                   	pop    ebx
c0025632:	5e                   	pop    esi
c0025633:	5f                   	pop    edi
c0025634:	5d                   	pop    ebp
c0025635:	c3                   	ret    

c0025636 <IOAPIC::IOAPIC()>:
c0025636:	83 ec 0c             	sub    esp,0xc
c0025639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002563d:	83 ec 08             	sub    esp,0x8
c0025640:	68 74 c4 02 c0       	push   0xc002c474
c0025645:	50                   	push   eax
c0025646:	e8 9d e6 fe ff       	call   c0013ce8 <Device::Device(char const*)>
c002564b:	83 c4 10             	add    esp,0x10
c002564e:	ba 9c c5 02 c0       	mov    edx,0xc002c59c
c0025653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025657:	89 10                	mov    DWORD PTR [eax],edx
c0025659:	90                   	nop
c002565a:	83 c4 0c             	add    esp,0xc
c002565d:	c3                   	ret    

c002565e <APIC::APIC()>:
c002565e:	53                   	push   ebx
c002565f:	83 ec 18             	sub    esp,0x18
c0025662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025666:	83 ec 08             	sub    esp,0x8
c0025669:	68 7c c4 02 c0       	push   0xc002c47c
c002566e:	50                   	push   eax
c002566f:	e8 de ed fe ff       	call   c0014452 <InterruptController::InterruptController(char const*)>
c0025674:	83 c4 10             	add    esp,0x10
c0025677:	ba 54 c5 02 c0       	mov    edx,0xc002c554
c002567c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025680:	89 10                	mov    DWORD PTR [eax],edx
c0025682:	a0 80 1c 03 c0       	mov    al,ds:0xc0031c80
c0025687:	83 f0 01             	xor    eax,0x1
c002568a:	84 c0                	test   al,al
c002568c:	0f 84 a1 00 00 00    	je     c0025733 <APIC::APIC()+0xd5>
c0025692:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025697:	a0 60 02 03 c0       	mov    al,ds:0xc0030260
c002569c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256a0:	0f 83 86 00 00 00    	jae    c002572c <APIC::APIC()+0xce>
c00256a6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256ae:	83 ec 0c             	sub    esp,0xc
c00256b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256b5:	e8 df 9e fe ff       	call   c000f599 <malloc>
c00256ba:	83 c4 10             	add    esp,0x10
c00256bd:	89 c3                	mov    ebx,eax
c00256bf:	83 ec 0c             	sub    esp,0xc
c00256c2:	53                   	push   ebx
c00256c3:	e8 6e ff ff ff       	call   c0025636 <IOAPIC::IOAPIC()>
c00256c8:	83 c4 10             	add    esp,0x10
c00256cb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00256cf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00256d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00256d8:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c00256df:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c00256e4:	40                   	inc    eax
c00256e5:	a3 40 1c 03 c0       	mov    ds:0xc0031c40,eax
c00256ea:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c00256ef:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00256f5:	83 ec 08             	sub    esp,0x8
c00256f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256fc:	50                   	push   eax
c00256fd:	e8 e2 e3 fe ff       	call   c0013ae4 <Device::addChild(Device*)>
c0025702:	83 c4 10             	add    esp,0x10
c0025705:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025709:	8b 00                	mov    eax,DWORD PTR [eax]
c002570b:	83 c0 08             	add    eax,0x8
c002570e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025710:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025715:	6a 00                	push   0x0
c0025717:	6a 00                	push   0x0
c0025719:	52                   	push   edx
c002571a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002571e:	ff d0                	call   eax
c0025720:	83 c4 10             	add    esp,0x10
c0025723:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025727:	e9 6b ff ff ff       	jmp    c0025697 <APIC::APIC()+0x39>
c002572c:	c6 05 80 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c80,0x1
c0025733:	90                   	nop
c0025734:	83 c4 18             	add    esp,0x18
c0025737:	5b                   	pop    ebx
c0025738:	c3                   	ret    
c0025739:	90                   	nop

c002573a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002573a:	55                   	push   ebp
c002573b:	89 e5                	mov    ebp,esp
c002573d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025740:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025746:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025749:	72 1d                	jb     c0025768 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002574b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002574e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025757:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002575d:	01 d0                	add    eax,edx
c002575f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025762:	73 04                	jae    c0025768 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025764:	b0 01                	mov    al,0x1
c0025766:	eb 02                	jmp    c002576a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025768:	b0 00                	mov    al,0x0
c002576a:	5d                   	pop    ebp
c002576b:	c3                   	ret    

c002576c <IOAPIC::read(int)>:
c002576c:	55                   	push   ebp
c002576d:	89 e5                	mov    ebp,esp
c002576f:	83 ec 10             	sub    esp,0x10
c0025772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025775:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002577b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002577e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025781:	0f b6 d0             	movzx  edx,al
c0025784:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025787:	89 10                	mov    DWORD PTR [eax],edx
c0025789:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002578c:	83 c0 10             	add    eax,0x10
c002578f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025791:	c9                   	leave  
c0025792:	c3                   	ret    
c0025793:	90                   	nop

c0025794 <IOAPIC::open(int, int, void*)>:
c0025794:	55                   	push   ebp
c0025795:	89 e5                	mov    ebp,esp
c0025797:	57                   	push   edi
c0025798:	56                   	push   esi
c0025799:	53                   	push   ebx
c002579a:	83 ec 0c             	sub    esp,0xc
c002579d:	83 ec 0c             	sub    esp,0xc
c00257a0:	68 a7 c4 02 c0       	push   0xc002c4a7
c00257a5:	e8 01 cf fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c00257aa:	83 c4 10             	add    esp,0x10
c00257ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00257b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257bc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257c2:	8b 14 85 a0 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfd60]
c00257c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257cc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00257d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257db:	8b 14 85 20 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfce0]
c00257e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00257eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ee:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00257f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257fd:	0f b6 f8             	movzx  edi,al
c0025800:	89 d0                	mov    eax,edx
c0025802:	ba 00 00 00 00       	mov    edx,0x0
c0025807:	89 c1                	mov    ecx,eax
c0025809:	80 e5 ff             	and    ch,0xff
c002580c:	89 cb                	mov    ebx,ecx
c002580e:	0f b6 f2             	movzx  esi,dl
c0025811:	89 d8                	mov    eax,ebx
c0025813:	89 f2                	mov    edx,esi
c0025815:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025818:	8d 5f 08             	lea    ebx,[edi+0x8]
c002581b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002581f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025823:	83 e0 00             	and    eax,0x0
c0025826:	09 d0                	or     eax,edx
c0025828:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002582f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025835:	8d 50 01             	lea    edx,[eax+0x1]
c0025838:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002583b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025841:	0f b6 d0             	movzx  edx,al
c0025844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025847:	83 c2 08             	add    edx,0x8
c002584a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002584e:	0f b6 c9             	movzx  ecx,cl
c0025851:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025857:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002585b:	83 ec 08             	sub    esp,0x8
c002585e:	6a 01                	push   0x1
c0025860:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025863:	e8 04 ff ff ff       	call   c002576c <IOAPIC::read(int)>
c0025868:	83 c4 10             	add    esp,0x10
c002586b:	c1 f8 10             	sar    eax,0x10
c002586e:	0f b6 c0             	movzx  eax,al
c0025871:	8d 50 01             	lea    edx,[eax+0x1]
c0025874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025877:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002587d:	b8 00 00 00 00       	mov    eax,0x0
c0025882:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025885:	5b                   	pop    ebx
c0025886:	5e                   	pop    esi
c0025887:	5f                   	pop    edi
c0025888:	5d                   	pop    ebp
c0025889:	c3                   	ret    

c002588a <IOAPIC::write(int, int)>:
c002588a:	55                   	push   ebp
c002588b:	89 e5                	mov    ebp,esp
c002588d:	83 ec 10             	sub    esp,0x10
c0025890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025893:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025899:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002589c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002589f:	0f b6 d0             	movzx  edx,al
c00258a2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258a5:	89 10                	mov    DWORD PTR [eax],edx
c00258a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258aa:	8d 50 10             	lea    edx,[eax+0x10]
c00258ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258b0:	89 02                	mov    DWORD PTR [edx],eax
c00258b2:	90                   	nop
c00258b3:	c9                   	leave  
c00258b4:	c3                   	ret    
c00258b5:	90                   	nop

c00258b6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00258b6:	55                   	push   ebp
c00258b7:	89 e5                	mov    ebp,esp
c00258b9:	53                   	push   ebx
c00258ba:	83 ec 2c             	sub    esp,0x2c
c00258bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258c0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00258c3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00258c6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00258c9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00258cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258cf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00258d2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258d5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258d8:	88 d8                	mov    al,bl
c00258da:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00258dd:	88 c8                	mov    al,cl
c00258df:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258e2:	88 d0                	mov    al,dl
c00258e4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00258e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258eb:	83 c0 08             	add    eax,0x8
c00258ee:	01 c0                	add    eax,eax
c00258f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00258f3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258f7:	83 c0 08             	add    eax,0x8
c00258fa:	01 c0                	add    eax,eax
c00258fc:	40                   	inc    eax
c00258fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025900:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025903:	50                   	push   eax
c0025904:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025907:	e8 60 fe ff ff       	call   c002576c <IOAPIC::read(int)>
c002590c:	83 c4 08             	add    esp,0x8
c002590f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025912:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025919:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002591c:	c1 e0 18             	shl    eax,0x18
c002591f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025922:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025925:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025928:	52                   	push   edx
c0025929:	50                   	push   eax
c002592a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002592d:	e8 58 ff ff ff       	call   c002588a <IOAPIC::write(int, int)>
c0025932:	83 c4 0c             	add    esp,0xc
c0025935:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025938:	50                   	push   eax
c0025939:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002593c:	e8 2b fe ff ff       	call   c002576c <IOAPIC::read(int)>
c0025941:	83 c4 08             	add    esp,0x8
c0025944:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025947:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002594e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025955:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002595c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025960:	74 09                	je     c002596b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025962:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025969:	eb 07                	jmp    c0025972 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002596b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025972:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025976:	74 09                	je     c0025981 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025978:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002597f:	eb 07                	jmp    c0025988 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025981:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025988:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002598f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025993:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025996:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025999:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002599c:	52                   	push   edx
c002599d:	50                   	push   eax
c002599e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259a1:	e8 e4 fe ff ff       	call   c002588a <IOAPIC::write(int, int)>
c00259a6:	83 c4 0c             	add    esp,0xc
c00259a9:	90                   	nop
c00259aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259ad:	c9                   	leave  
c00259ae:	c3                   	ret    
c00259af:	90                   	nop

c00259b0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00259b0:	55                   	push   ebp
c00259b1:	89 e5                	mov    ebp,esp
c00259b3:	57                   	push   edi
c00259b4:	56                   	push   esi
c00259b5:	53                   	push   ebx
c00259b6:	83 ec 2c             	sub    esp,0x2c
c00259b9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259bc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259bf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00259c3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00259c7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259cb:	74 5a                	je     c0025a27 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259cd:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00259d1:	7f 44                	jg     c0025a17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00259d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259d6:	05 40 cb 02 c0       	add    eax,0xc002cb40
c00259db:	8a 00                	mov    al,BYTE PTR [eax]
c00259dd:	0f b6 c0             	movzx  eax,al
c00259e0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00259e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259e6:	66 8b 84 00 40 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfdc0]
c00259ee:	0f b7 c0             	movzx  eax,ax
c00259f1:	83 e0 02             	and    eax,0x2
c00259f4:	85 c0                	test   eax,eax
c00259f6:	74 04                	je     c00259fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00259f8:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00259fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259ff:	66 8b 84 00 40 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfdc0]
c0025a07:	0f b7 c0             	movzx  eax,ax
c0025a0a:	83 e0 08             	and    eax,0x8
c0025a0d:	85 c0                	test   eax,eax
c0025a0f:	74 16                	je     c0025a27 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a11:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a15:	eb 10                	jmp    c0025a27 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a17:	83 ec 0c             	sub    esp,0xc
c0025a1a:	68 b8 c4 02 c0       	push   0xc002c4b8
c0025a1f:	e8 f3 43 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0025a24:	83 c4 10             	add    esp,0x10
c0025a27:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a2b:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0025a30:	83 ec 08             	sub    esp,0x8
c0025a33:	50                   	push   eax
c0025a34:	68 f0 c4 02 c0       	push   0xc002c4f0
c0025a39:	e8 6d cc fe ff       	call   c00126ab <Dbg::kprintf(char const*, ...)>
c0025a3e:	83 c4 10             	add    esp,0x10
c0025a41:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a48:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0025a4d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a50:	7d 67                	jge    c0025ab9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a52:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a55:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c0025a5c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a5f:	83 ec 08             	sub    esp,0x8
c0025a62:	52                   	push   edx
c0025a63:	50                   	push   eax
c0025a64:	e8 d1 fc ff ff       	call   c002573a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025a69:	83 c4 10             	add    esp,0x10
c0025a6c:	84 c0                	test   al,al
c0025a6e:	74 44                	je     c0025ab4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025a70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a73:	8b 1c 85 60 1c 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce3a0]
c0025a7a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025a7e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a81:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025a85:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a88:	83 c0 20             	add    eax,0x20
c0025a8b:	0f b6 f0             	movzx  esi,al
c0025a8e:	b8 00 00 00 00       	mov    eax,0x0
c0025a93:	99                   	cdq    
c0025a94:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025a97:	0f b6 c9             	movzx  ecx,cl
c0025a9a:	83 ec 04             	sub    esp,0x4
c0025a9d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025aa0:	57                   	push   edi
c0025aa1:	56                   	push   esi
c0025aa2:	52                   	push   edx
c0025aa3:	50                   	push   eax
c0025aa4:	51                   	push   ecx
c0025aa5:	53                   	push   ebx
c0025aa6:	e8 0b fe ff ff       	call   c00258b6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025aab:	83 c4 20             	add    esp,0x20
c0025aae:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025ab2:	eb 05                	jmp    c0025ab9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ab4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025ab7:	eb 8f                	jmp    c0025a48 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025ab9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025abc:	83 f0 01             	xor    eax,0x1
c0025abf:	84 c0                	test   al,al
c0025ac1:	74 10                	je     c0025ad3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025ac3:	83 ec 0c             	sub    esp,0xc
c0025ac6:	68 07 c5 02 c0       	push   0xc002c507
c0025acb:	e8 47 43 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0025ad0:	83 c4 10             	add    esp,0x10
c0025ad3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025ad7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025ade:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025ae2:	7f 65                	jg     c0025b49 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025aea:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025af1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025af4:	01 ca                	add    edx,ecx
c0025af6:	83 c2 54             	add    edx,0x54
c0025af9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025afd:	85 c0                	test   eax,eax
c0025aff:	75 43                	jne    c0025b44 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b04:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b07:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b0e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b11:	01 ca                	add    edx,ecx
c0025b13:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b16:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b19:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b23:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b2a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b2d:	01 ca                	add    edx,ecx
c0025b2f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b35:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b38:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b3f:	83 e8 20             	sub    eax,0x20
c0025b42:	eb 1a                	jmp    c0025b5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b44:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b47:	eb 95                	jmp    c0025ade <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b49:	83 ec 0c             	sub    esp,0xc
c0025b4c:	68 14 c5 02 c0       	push   0xc002c514
c0025b51:	e8 c1 42 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0025b56:	83 c4 10             	add    esp,0x10
c0025b59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b5e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b61:	5b                   	pop    ebx
c0025b62:	5e                   	pop    esi
c0025b63:	5f                   	pop    edi
c0025b64:	5d                   	pop    ebp
c0025b65:	c3                   	ret    

c0025b66 <PIC::disable()>:
c0025b66:	55                   	push   ebp
c0025b67:	89 e5                	mov    ebp,esp
c0025b69:	83 ec 10             	sub    esp,0x10
c0025b6c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025b72:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025b76:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b79:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025b7d:	ee                   	out    dx,al
c0025b7e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025b84:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025b88:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b8b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025b8f:	ee                   	out    dx,al
c0025b90:	90                   	nop
c0025b91:	c9                   	leave  
c0025b92:	c3                   	ret    
c0025b93:	90                   	nop

c0025b94 <PIC::close(int, int, void*)>:
c0025b94:	55                   	push   ebp
c0025b95:	89 e5                	mov    ebp,esp
c0025b97:	83 ec 08             	sub    esp,0x8
c0025b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b9f:	83 c0 3c             	add    eax,0x3c
c0025ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ba4:	83 ec 0c             	sub    esp,0xc
c0025ba7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025baa:	ff d0                	call   eax
c0025bac:	83 c4 10             	add    esp,0x10
c0025baf:	b8 00 00 00 00       	mov    eax,0x0
c0025bb4:	c9                   	leave  
c0025bb5:	c3                   	ret    

c0025bb6 <PIC::PIC()>:
c0025bb6:	83 ec 0c             	sub    esp,0xc
c0025bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bbd:	83 ec 08             	sub    esp,0x8
c0025bc0:	68 c0 c5 02 c0       	push   0xc002c5c0
c0025bc5:	50                   	push   eax
c0025bc6:	e8 87 e8 fe ff       	call   c0014452 <InterruptController::InterruptController(char const*)>
c0025bcb:	83 c4 10             	add    esp,0x10
c0025bce:	ba ec c5 02 c0       	mov    edx,0xc002c5ec
c0025bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd7:	89 10                	mov    DWORD PTR [eax],edx
c0025bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bdd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025be3:	0f b6 d0             	movzx  edx,al
c0025be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bea:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bfb:	0f b6 d0             	movzx  edx,al
c0025bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c02:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c11:	8d 50 01             	lea    edx,[eax+0x1]
c0025c14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c18:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c1e:	0f b6 d0             	movzx  edx,al
c0025c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c25:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c29:	83 e1 3f             	and    ecx,0x3f
c0025c2c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c3a:	0f b6 d0             	movzx  edx,al
c0025c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c41:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c52:	0f b6 d0             	movzx  edx,al
c0025c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c68:	8d 50 01             	lea    edx,[eax+0x1]
c0025c6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c6f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c75:	0f b6 d0             	movzx  edx,al
c0025c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c7c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c80:	83 e1 3f             	and    ecx,0x3f
c0025c83:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c87:	90                   	nop
c0025c88:	83 c4 0c             	add    esp,0xc
c0025c8b:	c3                   	ret    

c0025c8c <PIC::ioWait()>:
c0025c8c:	eb 00                	jmp    c0025c8e <PIC::ioWait()+0x2>
c0025c8e:	eb 00                	jmp    c0025c90 <PIC::ioWait()+0x4>
c0025c90:	90                   	nop
c0025c91:	c3                   	ret    

c0025c92 <PIC::getIRQReg(int)>:
c0025c92:	55                   	push   ebp
c0025c93:	89 e5                	mov    ebp,esp
c0025c95:	83 ec 10             	sub    esp,0x10
c0025c98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c9b:	0f b6 c0             	movzx  eax,al
c0025c9e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ca4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ca7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025caa:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cae:	ee                   	out    dx,al
c0025caf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cb2:	0f b6 c0             	movzx  eax,al
c0025cb5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cbb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025cbe:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025cc1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025cc5:	ee                   	out    dx,al
c0025cc6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025ccc:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025cd0:	89 c2                	mov    edx,eax
c0025cd2:	ec                   	in     al,dx
c0025cd3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025cd6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025cd9:	0f b6 c0             	movzx  eax,al
c0025cdc:	c1 e0 08             	shl    eax,0x8
c0025cdf:	89 c1                	mov    ecx,eax
c0025ce1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025ce7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ceb:	89 c2                	mov    edx,eax
c0025ced:	ec                   	in     al,dx
c0025cee:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025cf1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025cf4:	0f b6 c0             	movzx  eax,al
c0025cf7:	09 c8                	or     eax,ecx
c0025cf9:	c9                   	leave  
c0025cfa:	c3                   	ret    
c0025cfb:	90                   	nop

c0025cfc <PIC::eoi(unsigned char)>:
c0025cfc:	55                   	push   ebp
c0025cfd:	89 e5                	mov    ebp,esp
c0025cff:	83 ec 14             	sub    esp,0x14
c0025d02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d05:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d08:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d0c:	75 1e                	jne    c0025d2c <PIC::eoi(unsigned char)+0x30>
c0025d0e:	6a 0b                	push   0xb
c0025d10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d13:	e8 7a ff ff ff       	call   c0025c92 <PIC::getIRQReg(int)>
c0025d18:	83 c4 08             	add    esp,0x8
c0025d1b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d1f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d23:	25 80 00 00 00       	and    eax,0x80
c0025d28:	85 c0                	test   eax,eax
c0025d2a:	74 5f                	je     c0025d8b <PIC::eoi(unsigned char)+0x8f>
c0025d2c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d30:	75 2d                	jne    c0025d5f <PIC::eoi(unsigned char)+0x63>
c0025d32:	6a 0b                	push   0xb
c0025d34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d37:	e8 56 ff ff ff       	call   c0025c92 <PIC::getIRQReg(int)>
c0025d3c:	83 c4 08             	add    esp,0x8
c0025d3f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d43:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d46:	66 85 c0             	test   ax,ax
c0025d49:	78 14                	js     c0025d5f <PIC::eoi(unsigned char)+0x63>
c0025d4b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d51:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d55:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d58:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d5c:	ee                   	out    dx,al
c0025d5d:	eb 2d                	jmp    c0025d8c <PIC::eoi(unsigned char)+0x90>
c0025d5f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d63:	76 12                	jbe    c0025d77 <PIC::eoi(unsigned char)+0x7b>
c0025d65:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d6b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025d6f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d72:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d76:	ee                   	out    dx,al
c0025d77:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d7d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025d81:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d84:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d88:	ee                   	out    dx,al
c0025d89:	eb 01                	jmp    c0025d8c <PIC::eoi(unsigned char)+0x90>
c0025d8b:	90                   	nop
c0025d8c:	c9                   	leave  
c0025d8d:	c3                   	ret    

c0025d8e <PIC::remap()>:
c0025d8e:	55                   	push   ebp
c0025d8f:	89 e5                	mov    ebp,esp
c0025d91:	83 ec 48             	sub    esp,0x48
c0025d94:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025d9b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025da2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025da8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025dab:	89 c2                	mov    edx,eax
c0025dad:	ec                   	in     al,dx
c0025dae:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025db1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025db4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025db7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025dbd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025dc0:	89 c2                	mov    edx,eax
c0025dc2:	ec                   	in     al,dx
c0025dc3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025dc6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025dc9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025dcc:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025dd2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025dd6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025dd9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025ddc:	ee                   	out    dx,al
c0025ddd:	83 ec 0c             	sub    esp,0xc
c0025de0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de3:	e8 a4 fe ff ff       	call   c0025c8c <PIC::ioWait()>
c0025de8:	83 c4 10             	add    esp,0x10
c0025deb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025df1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025df5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025df8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025dfb:	ee                   	out    dx,al
c0025dfc:	83 ec 0c             	sub    esp,0xc
c0025dff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e02:	e8 85 fe ff ff       	call   c0025c8c <PIC::ioWait()>
c0025e07:	83 c4 10             	add    esp,0x10
c0025e0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e0d:	0f b6 c0             	movzx  eax,al
c0025e10:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e16:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e19:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e1c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e1f:	ee                   	out    dx,al
c0025e20:	83 ec 0c             	sub    esp,0xc
c0025e23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e26:	e8 61 fe ff ff       	call   c0025c8c <PIC::ioWait()>
c0025e2b:	83 c4 10             	add    esp,0x10
c0025e2e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e31:	0f b6 c0             	movzx  eax,al
c0025e34:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e3a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e3d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e40:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e43:	ee                   	out    dx,al
c0025e44:	83 ec 0c             	sub    esp,0xc
c0025e47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e4a:	e8 3d fe ff ff       	call   c0025c8c <PIC::ioWait()>
c0025e4f:	83 c4 10             	add    esp,0x10
c0025e52:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e58:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e5c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e5f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025e62:	ee                   	out    dx,al
c0025e63:	83 ec 0c             	sub    esp,0xc
c0025e66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e69:	e8 1e fe ff ff       	call   c0025c8c <PIC::ioWait()>
c0025e6e:	83 c4 10             	add    esp,0x10
c0025e71:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025e77:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025e7b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025e7e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e81:	ee                   	out    dx,al
c0025e82:	83 ec 0c             	sub    esp,0xc
c0025e85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e88:	e8 ff fd ff ff       	call   c0025c8c <PIC::ioWait()>
c0025e8d:	83 c4 10             	add    esp,0x10
c0025e90:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025e96:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025e9a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025e9d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ea0:	ee                   	out    dx,al
c0025ea1:	83 ec 0c             	sub    esp,0xc
c0025ea4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea7:	e8 e0 fd ff ff       	call   c0025c8c <PIC::ioWait()>
c0025eac:	83 c4 10             	add    esp,0x10
c0025eaf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025eb5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025eb9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025ebc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ebf:	ee                   	out    dx,al
c0025ec0:	83 ec 0c             	sub    esp,0xc
c0025ec3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec6:	e8 c1 fd ff ff       	call   c0025c8c <PIC::ioWait()>
c0025ecb:	83 c4 10             	add    esp,0x10
c0025ece:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025ed2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025ed8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025edb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025ede:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ee1:	ee                   	out    dx,al
c0025ee2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025ee6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025eec:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025eef:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025ef2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025ef5:	ee                   	out    dx,al
c0025ef6:	90                   	nop
c0025ef7:	c9                   	leave  
c0025ef8:	c3                   	ret    
c0025ef9:	90                   	nop

c0025efa <PIC::open(int, int, void*)>:
c0025efa:	55                   	push   ebp
c0025efb:	89 e5                	mov    ebp,esp
c0025efd:	83 ec 18             	sub    esp,0x18
c0025f00:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f06:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f0a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f0d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f11:	ee                   	out    dx,al
c0025f12:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f18:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f1c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f1f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f23:	ee                   	out    dx,al
c0025f24:	83 ec 0c             	sub    esp,0xc
c0025f27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f2a:	e8 5f fe ff ff       	call   c0025d8e <PIC::remap()>
c0025f2f:	83 c4 10             	add    esp,0x10
c0025f32:	b8 00 00 00 00       	mov    eax,0x0
c0025f37:	c9                   	leave  
c0025f38:	c3                   	ret    
c0025f39:	90                   	nop

c0025f3a <APICTimer::close(int, int, void*)>:
c0025f3a:	b8 00 00 00 00       	mov    eax,0x0
c0025f3f:	c3                   	ret    

c0025f40 <apicTimerHandler(regs*, void*)>:
c0025f40:	83 ec 0c             	sub    esp,0xc
c0025f43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f47:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f49:	99                   	cdq    
c0025f4a:	52                   	push   edx
c0025f4b:	50                   	push   eax
c0025f4c:	6a 00                	push   0x0
c0025f4e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f53:	e8 8c 07 00 00       	call   c00266e4 <__udivdi3>
c0025f58:	83 c4 10             	add    esp,0x10
c0025f5b:	83 ec 08             	sub    esp,0x8
c0025f5e:	52                   	push   edx
c0025f5f:	50                   	push   eax
c0025f60:	e8 44 06 ff ff       	call   c00165a9 <timerHandler(unsigned long long)>
c0025f65:	83 c4 10             	add    esp,0x10
c0025f68:	90                   	nop
c0025f69:	83 c4 0c             	add    esp,0xc
c0025f6c:	c3                   	ret    
c0025f6d:	90                   	nop

c0025f6e <APICTimer::write(int)>:
c0025f6e:	53                   	push   ebx
c0025f6f:	83 ec 28             	sub    esp,0x28
c0025f72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f76:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025f7a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025f80:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0025f85:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025f8b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025f91:	83 ec 0c             	sub    esp,0xc
c0025f94:	50                   	push   eax
c0025f95:	e8 de f4 ff ff       	call   c0025478 <APIC::getBase()>
c0025f9a:	83 c4 10             	add    esp,0x10
c0025f9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025fa1:	a1 50 df 02 c0       	mov    eax,ds:0xc002df50
c0025fa6:	8b 15 54 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df54
c0025fac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025fb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fb8:	05 e0 03 00 00       	add    eax,0x3e0
c0025fbd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fc7:	05 80 03 00 00       	add    eax,0x380
c0025fcc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025fd2:	fb                   	sti    
c0025fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025fdb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025fe0:	83 d2 00             	adc    edx,0x0
c0025fe3:	89 c1                	mov    ecx,eax
c0025fe5:	89 d3                	mov    ebx,edx
c0025fe7:	a1 50 df 02 c0       	mov    eax,ds:0xc002df50
c0025fec:	8b 15 54 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df54
c0025ff2:	39 c8                	cmp    eax,ecx
c0025ff4:	89 d0                	mov    eax,edx
c0025ff6:	19 d8                	sbb    eax,ebx
c0025ff8:	73 02                	jae    c0025ffc <APICTimer::write(int)+0x8e>
c0025ffa:	eb d7                	jmp    c0025fd3 <APICTimer::write(int)+0x65>
c0025ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026000:	05 20 03 00 00       	add    eax,0x320
c0026005:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002600b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002600f:	05 90 03 00 00       	add    eax,0x390
c0026014:	8b 00                	mov    eax,DWORD PTR [eax]
c0026016:	f7 d0                	not    eax
c0026018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002601c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026024:	ba 00 00 00 00       	mov    edx,0x0
c0026029:	f7 f3                	div    ebx
c002602b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002602f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026033:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026039:	0d 00 00 02 00       	or     eax,0x20000
c002603e:	89 c2                	mov    edx,eax
c0026040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026044:	05 20 03 00 00       	add    eax,0x320
c0026049:	89 10                	mov    DWORD PTR [eax],edx
c002604b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002604f:	05 e0 03 00 00       	add    eax,0x3e0
c0026054:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002605a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002605e:	05 80 03 00 00       	add    eax,0x380
c0026063:	89 c2                	mov    edx,eax
c0026065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026069:	89 02                	mov    DWORD PTR [edx],eax
c002606b:	90                   	nop
c002606c:	83 c4 28             	add    esp,0x28
c002606f:	5b                   	pop    ebx
c0026070:	c3                   	ret    
c0026071:	90                   	nop

c0026072 <APICTimer::open(int, int, void*)>:
c0026072:	57                   	push   edi
c0026073:	56                   	push   esi
c0026074:	53                   	push   ebx
c0026075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026079:	8b 00                	mov    eax,DWORD PTR [eax]
c002607b:	83 c0 24             	add    eax,0x24
c002607e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026080:	83 ec 08             	sub    esp,0x8
c0026083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026087:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002608b:	ff d0                	call   eax
c002608d:	83 c4 10             	add    esp,0x10
c0026090:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0026095:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002609b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260a1:	83 ec 0c             	sub    esp,0xc
c00260a4:	50                   	push   eax
c00260a5:	e8 ce f3 ff ff       	call   c0025478 <APIC::getBase()>
c00260aa:	83 c4 10             	add    esp,0x10
c00260ad:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00260b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260bd:	0f b6 f8             	movzx  edi,al
c00260c0:	89 d0                	mov    eax,edx
c00260c2:	ba 00 00 00 00       	mov    edx,0x0
c00260c7:	89 c1                	mov    ecx,eax
c00260c9:	80 e5 ff             	and    ch,0xff
c00260cc:	89 cb                	mov    ebx,ecx
c00260ce:	0f b6 f2             	movzx  esi,dl
c00260d1:	89 d8                	mov    eax,ebx
c00260d3:	89 f2                	mov    edx,esi
c00260d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260d9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00260dc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00260e0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00260e4:	83 e0 00             	and    eax,0x0
c00260e7:	09 d0                	or     eax,edx
c00260e9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00260ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260f7:	8d 50 01             	lea    edx,[eax+0x1]
c00260fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260fe:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026104:	0f b6 d0             	movzx  edx,al
c0026107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002610b:	83 c2 08             	add    edx,0x8
c002610e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026112:	0f b6 c9             	movzx  ecx,cl
c0026115:	81 c9 00 00 01 00    	or     ecx,0x10000
c002611b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002611f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026123:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026127:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002612d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026131:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026135:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002613b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002613f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026145:	83 ec 0c             	sub    esp,0xc
c0026148:	51                   	push   ecx
c0026149:	6a 01                	push   0x1
c002614b:	68 40 5f 02 c0       	push   0xc0025f40
c0026150:	52                   	push   edx
c0026151:	50                   	push   eax
c0026152:	e8 05 d9 fe ff       	call   c0013a5c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026157:	83 c4 20             	add    esp,0x20
c002615a:	89 c2                	mov    edx,eax
c002615c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026160:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026166:	b8 00 00 00 00       	mov    eax,0x0
c002616b:	5b                   	pop    ebx
c002616c:	5e                   	pop    esi
c002616d:	5f                   	pop    edi
c002616e:	c3                   	ret    
c002616f:	90                   	nop

c0026170 <APICTimer::APICTimer()>:
c0026170:	83 ec 0c             	sub    esp,0xc
c0026173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026177:	83 ec 08             	sub    esp,0x8
c002617a:	68 2c c6 02 c0       	push   0xc002c62c
c002617f:	50                   	push   eax
c0026180:	e8 95 03 ff ff       	call   c001651a <Timer::Timer(char const*)>
c0026185:	83 c4 10             	add    esp,0x10
c0026188:	ba 40 c6 02 c0       	mov    edx,0xc002c640
c002618d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026191:	89 10                	mov    DWORD PTR [eax],edx
c0026193:	90                   	nop
c0026194:	83 c4 0c             	add    esp,0xc
c0026197:	c3                   	ret    

c0026198 <PIT::write(int)>:
c0026198:	83 ec 10             	sub    esp,0x10
c002619b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002619f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261ad:	a3 84 1c 03 c0       	mov    ds:0xc0031c84,eax
c00261b2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00261b7:	99                   	cdq    
c00261b8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00261bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261c0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00261c7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00261cc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00261d0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00261d5:	ee                   	out    dx,al
c00261d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261da:	0f b6 c0             	movzx  eax,al
c00261dd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00261e4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00261e8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00261ec:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00261f1:	ee                   	out    dx,al
c00261f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261f6:	c1 f8 08             	sar    eax,0x8
c00261f9:	0f b6 c0             	movzx  eax,al
c00261fc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026203:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026207:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002620b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026210:	ee                   	out    dx,al
c0026211:	90                   	nop
c0026212:	83 c4 10             	add    esp,0x10
c0026215:	c3                   	ret    

c0026216 <pitHandler(regs*, void*)>:
c0026216:	83 ec 0c             	sub    esp,0xc
c0026219:	a1 84 1c 03 c0       	mov    eax,ds:0xc0031c84
c002621e:	99                   	cdq    
c002621f:	52                   	push   edx
c0026220:	50                   	push   eax
c0026221:	6a 00                	push   0x0
c0026223:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026228:	e8 b7 04 00 00       	call   c00266e4 <__udivdi3>
c002622d:	83 c4 10             	add    esp,0x10
c0026230:	83 ec 08             	sub    esp,0x8
c0026233:	52                   	push   edx
c0026234:	50                   	push   eax
c0026235:	e8 6f 03 ff ff       	call   c00165a9 <timerHandler(unsigned long long)>
c002623a:	83 c4 10             	add    esp,0x10
c002623d:	90                   	nop
c002623e:	83 c4 0c             	add    esp,0xc
c0026241:	c3                   	ret    

c0026242 <PIT::open(int, int, void*)>:
c0026242:	83 ec 0c             	sub    esp,0xc
c0026245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026249:	8b 00                	mov    eax,DWORD PTR [eax]
c002624b:	83 c0 24             	add    eax,0x24
c002624e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026250:	83 ec 08             	sub    esp,0x8
c0026253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002625b:	ff d0                	call   eax
c002625d:	83 c4 10             	add    esp,0x10
c0026260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026264:	83 ec 0c             	sub    esp,0xc
c0026267:	6a 00                	push   0x0
c0026269:	6a 01                	push   0x1
c002626b:	68 16 62 02 c0       	push   0xc0026216
c0026270:	6a 00                	push   0x0
c0026272:	50                   	push   eax
c0026273:	e8 e4 d7 fe ff       	call   c0013a5c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026278:	83 c4 20             	add    esp,0x20
c002627b:	89 c2                	mov    edx,eax
c002627d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026281:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026287:	b8 00 00 00 00       	mov    eax,0x0
c002628c:	83 c4 0c             	add    esp,0xc
c002628f:	c3                   	ret    

c0026290 <PIT::close(int, int, void*)>:
c0026290:	83 ec 0c             	sub    esp,0xc
c0026293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026297:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a5:	6a 01                	push   0x1
c00262a7:	68 16 62 02 c0       	push   0xc0026216
c00262ac:	6a 00                	push   0x0
c00262ae:	50                   	push   eax
c00262af:	e8 f2 d7 fe ff       	call   c0013aa6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00262b4:	83 c4 10             	add    esp,0x10
c00262b7:	b8 00 00 00 00       	mov    eax,0x0
c00262bc:	83 c4 0c             	add    esp,0xc
c00262bf:	c3                   	ret    

c00262c0 <PIT::PIT()>:
c00262c0:	83 ec 0c             	sub    esp,0xc
c00262c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c7:	83 ec 08             	sub    esp,0x8
c00262ca:	68 68 c6 02 c0       	push   0xc002c668
c00262cf:	50                   	push   eax
c00262d0:	e8 45 02 ff ff       	call   c001651a <Timer::Timer(char const*)>
c00262d5:	83 c4 10             	add    esp,0x10
c00262d8:	ba 90 c6 02 c0       	mov    edx,0xc002c690
c00262dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e1:	89 10                	mov    DWORD PTR [eax],edx
c00262e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262ed:	0f b6 d0             	movzx  edx,al
c00262f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00262fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026305:	0f b6 d0             	movzx  edx,al
c0026308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026315:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002631b:	8d 50 01             	lea    edx,[eax+0x1]
c002631e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026322:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026328:	0f b6 d0             	movzx  edx,al
c002632b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026333:	83 e1 3f             	and    ecx,0x3f
c0026336:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002633a:	90                   	nop
c002633b:	83 c4 0c             	add    esp,0xc
c002633e:	c3                   	ret    
c002633f:	90                   	nop

c0026340 <avxDetect>:
c0026340:	b8 00 00 00 00       	mov    eax,0x0
c0026345:	c3                   	ret    

c0026346 <avxSave>:
c0026346:	c3                   	ret    

c0026347 <avxLoad>:
c0026347:	c3                   	ret    

c0026348 <avxInit>:
c0026348:	c3                   	ret    

c0026349 <avxClose>:
c0026349:	c3                   	ret    

c002634a <wouldSheSayYes>:
c002634a:	c3                   	ret    
c002634b:	49                   	dec    ecx
c002634c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026350:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026354:	75 20                	jne    c0026376 <sseDetect.noSSE+0x1>
c0026356:	4e                   	dec    esi
c0026357:	79 61                	jns    c00263ba <x87Detect+0x14>
c0026359:	68 2e 2e 2e 00       	push   0x2e2e2e
c002635e:	66 90                	xchg   ax,ax

c0026360 <absolutelyNoChanceInHell>:
c0026360:	b8 01 00 00 00       	mov    eax,0x1
c0026365:	0f a2                	cpuid  
c0026367:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002636d:	74 06                	je     c0026375 <sseDetect.noSSE>
c002636f:	b8 01 00 00 00       	mov    eax,0x1
c0026374:	c3                   	ret    

c0026375 <sseDetect.noSSE>:
c0026375:	31 c0                	xor    eax,eax
c0026377:	c3                   	ret    

c0026378 <sseSave>:
c0026378:	0f ae 44 24 04       	fxsave [esp+0x4]
c002637d:	c3                   	ret    

c002637e <sseLoad>:
c002637e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026383:	c3                   	ret    

c0026384 <sseInit>:
c0026384:	e8 49 00 00 00       	call   c00263d2 <x87Init>
c0026389:	0f 20 e0             	mov    eax,cr4
c002638c:	66 0d 00 06          	or     ax,0x600
c0026390:	0f 22 e0             	mov    cr4,eax
c0026393:	c3                   	ret    

c0026394 <sseClose>:
c0026394:	c3                   	ret    
c0026395:	66 90                	xchg   ax,ax
c0026397:	66 90                	xchg   ax,ax
c0026399:	66 90                	xchg   ax,ax
c002639b:	66 90                	xchg   ax,ax
c002639d:	66 90                	xchg   ax,ax
c002639f:	90                   	nop

c00263a0 <value_37F>:
c00263a0:	7f 03                	jg     c00263a5 <value_37A+0x1>

c00263a2 <value_37E>:
c00263a2:	7e 03                	jle    c00263a7 <x87Detect+0x1>

c00263a4 <value_37A>:
c00263a4:	7a 03                	jp     c00263a9 <x87Detect+0x3>

c00263a6 <x87Detect>:
c00263a6:	b8 01 00 00 00       	mov    eax,0x1
c00263ab:	0f a2                	cpuid  
c00263ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00263b3:	74 06                	je     c00263bb <x87Detect.nox87>
c00263b5:	b8 01 00 00 00       	mov    eax,0x1
c00263ba:	c3                   	ret    

c00263bb <x87Detect.nox87>:
c00263bb:	b8 00 00 00 00       	mov    eax,0x0
c00263c0:	c3                   	ret    

c00263c1 <x87Save>:
c00263c1:	55                   	push   ebp
c00263c2:	89 e5                	mov    ebp,esp
c00263c4:	9b dd 75 08          	fsave  [ebp+0x8]
c00263c8:	c9                   	leave  
c00263c9:	c3                   	ret    

c00263ca <x87Load>:
c00263ca:	55                   	push   ebp
c00263cb:	89 e5                	mov    ebp,esp
c00263cd:	dd 65 08             	frstor [ebp+0x8]
c00263d0:	c9                   	leave  
c00263d1:	c3                   	ret    

c00263d2 <x87Init>:
c00263d2:	9b db e3             	finit  
c00263d5:	0f 20 c0             	mov    eax,cr0
c00263d8:	66 25 fb ff          	and    ax,0xfffb
c00263dc:	66 0d 22 00          	or     ax,0x22
c00263e0:	0f 22 c0             	mov    cr0,eax
c00263e3:	0f 06                	clts   
c00263e5:	d9 2d a4 63 02 c0    	fldcw  WORD PTR ds:0xc00263a4
c00263eb:	c3                   	ret    

c00263ec <x87Close>:
c00263ec:	c3                   	ret    
c00263ed:	66 90                	xchg   ax,ax
c00263ef:	90                   	nop

c00263f0 <__do_global_ctors_aux>:
c00263f0:	a1 e4 8f 02 c0       	mov    eax,ds:0xc0028fe4
c00263f5:	83 f8 ff             	cmp    eax,0xffffffff
c00263f8:	74 1a                	je     c0026414 <__do_global_ctors_aux+0x24>
c00263fa:	55                   	push   ebp
c00263fb:	89 e5                	mov    ebp,esp
c00263fd:	53                   	push   ebx
c00263fe:	52                   	push   edx
c00263ff:	bb e4 8f 02 c0       	mov    ebx,0xc0028fe4
c0026404:	ff d0                	call   eax
c0026406:	83 eb 04             	sub    ebx,0x4
c0026409:	8b 03                	mov    eax,DWORD PTR [ebx]
c002640b:	83 f8 ff             	cmp    eax,0xffffffff
c002640e:	75 f4                	jne    c0026404 <__do_global_ctors_aux+0x14>
c0026410:	58                   	pop    eax
c0026411:	5b                   	pop    ebx
c0026412:	5d                   	pop    ebp
c0026413:	c3                   	ret    
c0026414:	c3                   	ret    
c0026415:	66 90                	xchg   ax,ax
c0026417:	90                   	nop

c0026418 <__divdi3>:
c0026418:	55                   	push   ebp
c0026419:	57                   	push   edi
c002641a:	56                   	push   esi
c002641b:	53                   	push   ebx
c002641c:	83 ec 1c             	sub    esp,0x1c
c002641f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026423:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026427:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002642a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002642e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026432:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026436:	85 db                	test   ebx,ebx
c0026438:	0f 88 8e 00 00 00    	js     c00264cc <__divdi3+0xb4>
c002643e:	89 dd                	mov    ebp,ebx
c0026440:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026448:	89 d3                	mov    ebx,edx
c002644a:	85 d2                	test   edx,edx
c002644c:	79 0d                	jns    c002645b <__divdi3+0x43>
c002644e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026452:	f7 d8                	neg    eax
c0026454:	83 d2 00             	adc    edx,0x0
c0026457:	f7 da                	neg    edx
c0026459:	89 d3                	mov    ebx,edx
c002645b:	89 c7                	mov    edi,eax
c002645d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026460:	85 db                	test   ebx,ebx
c0026462:	75 48                	jne    c00264ac <__divdi3+0x94>
c0026464:	39 ef                	cmp    edi,ebp
c0026466:	76 24                	jbe    c002648c <__divdi3+0x74>
c0026468:	89 ea                	mov    edx,ebp
c002646a:	f7 f7                	div    edi
c002646c:	89 c1                	mov    ecx,eax
c002646e:	31 f6                	xor    esi,esi
c0026470:	89 c8                	mov    eax,ecx
c0026472:	89 f2                	mov    edx,esi
c0026474:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026478:	85 c9                	test   ecx,ecx
c002647a:	74 07                	je     c0026483 <__divdi3+0x6b>
c002647c:	f7 d8                	neg    eax
c002647e:	83 d2 00             	adc    edx,0x0
c0026481:	f7 da                	neg    edx
c0026483:	83 c4 1c             	add    esp,0x1c
c0026486:	5b                   	pop    ebx
c0026487:	5e                   	pop    esi
c0026488:	5f                   	pop    edi
c0026489:	5d                   	pop    ebp
c002648a:	c3                   	ret    
c002648b:	90                   	nop
c002648c:	85 ff                	test   edi,edi
c002648e:	75 0b                	jne    c002649b <__divdi3+0x83>
c0026490:	b8 01 00 00 00       	mov    eax,0x1
c0026495:	31 d2                	xor    edx,edx
c0026497:	f7 f3                	div    ebx
c0026499:	89 c7                	mov    edi,eax
c002649b:	31 d2                	xor    edx,edx
c002649d:	89 e8                	mov    eax,ebp
c002649f:	f7 f7                	div    edi
c00264a1:	89 c6                	mov    esi,eax
c00264a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264a6:	f7 f7                	div    edi
c00264a8:	89 c1                	mov    ecx,eax
c00264aa:	eb c4                	jmp    c0026470 <__divdi3+0x58>
c00264ac:	39 eb                	cmp    ebx,ebp
c00264ae:	77 3c                	ja     c00264ec <__divdi3+0xd4>
c00264b0:	0f bd f3             	bsr    esi,ebx
c00264b3:	83 f6 1f             	xor    esi,0x1f
c00264b6:	75 40                	jne    c00264f8 <__divdi3+0xe0>
c00264b8:	39 eb                	cmp    ebx,ebp
c00264ba:	72 09                	jb     c00264c5 <__divdi3+0xad>
c00264bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00264bf:	0f 87 97 00 00 00    	ja     c002655c <__divdi3+0x144>
c00264c5:	b9 01 00 00 00       	mov    ecx,0x1
c00264ca:	eb a4                	jmp    c0026470 <__divdi3+0x58>
c00264cc:	f7 d9                	neg    ecx
c00264ce:	83 d3 00             	adc    ebx,0x0
c00264d1:	f7 db                	neg    ebx
c00264d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00264d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00264da:	89 dd                	mov    ebp,ebx
c00264dc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00264e4:	e9 5f ff ff ff       	jmp    c0026448 <__divdi3+0x30>
c00264e9:	8d 76 00             	lea    esi,[esi+0x0]
c00264ec:	31 f6                	xor    esi,esi
c00264ee:	31 c9                	xor    ecx,ecx
c00264f0:	e9 7b ff ff ff       	jmp    c0026470 <__divdi3+0x58>
c00264f5:	8d 76 00             	lea    esi,[esi+0x0]
c00264f8:	b8 20 00 00 00       	mov    eax,0x20
c00264fd:	29 f0                	sub    eax,esi
c00264ff:	89 f1                	mov    ecx,esi
c0026501:	d3 e3                	shl    ebx,cl
c0026503:	89 fa                	mov    edx,edi
c0026505:	88 c1                	mov    cl,al
c0026507:	d3 ea                	shr    edx,cl
c0026509:	09 da                	or     edx,ebx
c002650b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002650f:	89 f1                	mov    ecx,esi
c0026511:	d3 e7                	shl    edi,cl
c0026513:	89 eb                	mov    ebx,ebp
c0026515:	88 c1                	mov    cl,al
c0026517:	d3 eb                	shr    ebx,cl
c0026519:	89 f1                	mov    ecx,esi
c002651b:	d3 e5                	shl    ebp,cl
c002651d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026520:	88 c1                	mov    cl,al
c0026522:	d3 ea                	shr    edx,cl
c0026524:	09 d5                	or     ebp,edx
c0026526:	89 e8                	mov    eax,ebp
c0026528:	89 da                	mov    edx,ebx
c002652a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002652e:	89 d3                	mov    ebx,edx
c0026530:	89 c5                	mov    ebp,eax
c0026532:	f7 e7                	mul    edi
c0026534:	39 d3                	cmp    ebx,edx
c0026536:	72 18                	jb     c0026550 <__divdi3+0x138>
c0026538:	74 0a                	je     c0026544 <__divdi3+0x12c>
c002653a:	89 e9                	mov    ecx,ebp
c002653c:	31 f6                	xor    esi,esi
c002653e:	e9 2d ff ff ff       	jmp    c0026470 <__divdi3+0x58>
c0026543:	90                   	nop
c0026544:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026547:	89 f1                	mov    ecx,esi
c0026549:	d3 e7                	shl    edi,cl
c002654b:	39 c7                	cmp    edi,eax
c002654d:	73 eb                	jae    c002653a <__divdi3+0x122>
c002654f:	90                   	nop
c0026550:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026553:	31 f6                	xor    esi,esi
c0026555:	e9 16 ff ff ff       	jmp    c0026470 <__divdi3+0x58>
c002655a:	66 90                	xchg   ax,ax
c002655c:	31 c9                	xor    ecx,ecx
c002655e:	e9 0d ff ff ff       	jmp    c0026470 <__divdi3+0x58>
c0026563:	90                   	nop

c0026564 <__moddi3>:
c0026564:	55                   	push   ebp
c0026565:	57                   	push   edi
c0026566:	56                   	push   esi
c0026567:	53                   	push   ebx
c0026568:	83 ec 2c             	sub    esp,0x2c
c002656b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002656f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026573:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026577:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002657b:	85 db                	test   ebx,ebx
c002657d:	0f 88 85 00 00 00    	js     c0026608 <__moddi3+0xa4>
c0026583:	89 de                	mov    esi,ebx
c0026585:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002658d:	89 d7                	mov    edi,edx
c002658f:	85 d2                	test   edx,edx
c0026591:	79 09                	jns    c002659c <__moddi3+0x38>
c0026593:	f7 d8                	neg    eax
c0026595:	83 d2 00             	adc    edx,0x0
c0026598:	f7 da                	neg    edx
c002659a:	89 d7                	mov    edi,edx
c002659c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265a0:	89 cd                	mov    ebp,ecx
c00265a2:	85 ff                	test   edi,edi
c00265a4:	75 52                	jne    c00265f8 <__moddi3+0x94>
c00265a6:	89 c3                	mov    ebx,eax
c00265a8:	39 f0                	cmp    eax,esi
c00265aa:	76 24                	jbe    c00265d0 <__moddi3+0x6c>
c00265ac:	89 c8                	mov    eax,ecx
c00265ae:	89 f2                	mov    edx,esi
c00265b0:	f7 f3                	div    ebx
c00265b2:	89 d6                	mov    esi,edx
c00265b4:	89 f0                	mov    eax,esi
c00265b6:	31 d2                	xor    edx,edx
c00265b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265bc:	85 c9                	test   ecx,ecx
c00265be:	74 07                	je     c00265c7 <__moddi3+0x63>
c00265c0:	f7 d8                	neg    eax
c00265c2:	83 d2 00             	adc    edx,0x0
c00265c5:	f7 da                	neg    edx
c00265c7:	83 c4 2c             	add    esp,0x2c
c00265ca:	5b                   	pop    ebx
c00265cb:	5e                   	pop    esi
c00265cc:	5f                   	pop    edi
c00265cd:	5d                   	pop    ebp
c00265ce:	c3                   	ret    
c00265cf:	90                   	nop
c00265d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00265d4:	85 db                	test   ebx,ebx
c00265d6:	75 0d                	jne    c00265e5 <__moddi3+0x81>
c00265d8:	b8 01 00 00 00       	mov    eax,0x1
c00265dd:	31 d2                	xor    edx,edx
c00265df:	f7 f7                	div    edi
c00265e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265e5:	89 f0                	mov    eax,esi
c00265e7:	31 d2                	xor    edx,edx
c00265e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00265ed:	f7 f7                	div    edi
c00265ef:	89 e8                	mov    eax,ebp
c00265f1:	f7 f7                	div    edi
c00265f3:	89 d6                	mov    esi,edx
c00265f5:	eb bd                	jmp    c00265b4 <__moddi3+0x50>
c00265f7:	90                   	nop
c00265f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00265fc:	39 f7                	cmp    edi,esi
c00265fe:	76 20                	jbe    c0026620 <__moddi3+0xbc>
c0026600:	89 c8                	mov    eax,ecx
c0026602:	89 f2                	mov    edx,esi
c0026604:	eb b2                	jmp    c00265b8 <__moddi3+0x54>
c0026606:	66 90                	xchg   ax,ax
c0026608:	f7 d9                	neg    ecx
c002660a:	83 d3 00             	adc    ebx,0x0
c002660d:	f7 db                	neg    ebx
c002660f:	89 de                	mov    esi,ebx
c0026611:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026619:	e9 6f ff ff ff       	jmp    c002658d <__moddi3+0x29>
c002661e:	66 90                	xchg   ax,ax
c0026620:	0f bd c7             	bsr    eax,edi
c0026623:	83 f0 1f             	xor    eax,0x1f
c0026626:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002662a:	75 24                	jne    c0026650 <__moddi3+0xec>
c002662c:	39 f7                	cmp    edi,esi
c002662e:	72 06                	jb     c0026636 <__moddi3+0xd2>
c0026630:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026634:	77 0c                	ja     c0026642 <__moddi3+0xde>
c0026636:	89 e9                	mov    ecx,ebp
c0026638:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002663c:	19 fe                	sbb    esi,edi
c002663e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026646:	89 f2                	mov    edx,esi
c0026648:	e9 6b ff ff ff       	jmp    c00265b8 <__moddi3+0x54>
c002664d:	8d 76 00             	lea    esi,[esi+0x0]
c0026650:	b8 20 00 00 00       	mov    eax,0x20
c0026655:	89 c2                	mov    edx,eax
c0026657:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002665b:	29 da                	sub    edx,ebx
c002665d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026661:	88 d9                	mov    cl,bl
c0026663:	d3 e7                	shl    edi,cl
c0026665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026669:	88 d1                	mov    cl,dl
c002666b:	d3 e8                	shr    eax,cl
c002666d:	09 c7                	or     edi,eax
c002666f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026673:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026677:	89 d8                	mov    eax,ebx
c0026679:	88 d9                	mov    cl,bl
c002667b:	d3 e7                	shl    edi,cl
c002667d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026681:	89 f3                	mov    ebx,esi
c0026683:	88 d1                	mov    cl,dl
c0026685:	d3 eb                	shr    ebx,cl
c0026687:	89 c7                	mov    edi,eax
c0026689:	88 c1                	mov    cl,al
c002668b:	d3 e6                	shl    esi,cl
c002668d:	89 e8                	mov    eax,ebp
c002668f:	88 d1                	mov    cl,dl
c0026691:	d3 e8                	shr    eax,cl
c0026693:	09 f0                	or     eax,esi
c0026695:	89 f9                	mov    ecx,edi
c0026697:	d3 e5                	shl    ebp,cl
c0026699:	89 da                	mov    edx,ebx
c002669b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002669f:	89 d3                	mov    ebx,edx
c00266a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266a5:	89 c6                	mov    esi,eax
c00266a7:	89 d1                	mov    ecx,edx
c00266a9:	39 d3                	cmp    ebx,edx
c00266ab:	72 27                	jb     c00266d4 <__moddi3+0x170>
c00266ad:	74 21                	je     c00266d0 <__moddi3+0x16c>
c00266af:	29 f5                	sub    ebp,esi
c00266b1:	19 cb                	sbb    ebx,ecx
c00266b3:	89 de                	mov    esi,ebx
c00266b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00266b9:	d3 e6                	shl    esi,cl
c00266bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00266bf:	89 f9                	mov    ecx,edi
c00266c1:	d3 ed                	shr    ebp,cl
c00266c3:	09 ee                	or     esi,ebp
c00266c5:	89 f0                	mov    eax,esi
c00266c7:	d3 eb                	shr    ebx,cl
c00266c9:	89 da                	mov    edx,ebx
c00266cb:	e9 e8 fe ff ff       	jmp    c00265b8 <__moddi3+0x54>
c00266d0:	39 c5                	cmp    ebp,eax
c00266d2:	73 db                	jae    c00266af <__moddi3+0x14b>
c00266d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00266d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00266dc:	89 d1                	mov    ecx,edx
c00266de:	89 c6                	mov    esi,eax
c00266e0:	eb cd                	jmp    c00266af <__moddi3+0x14b>
c00266e2:	66 90                	xchg   ax,ax

c00266e4 <__udivdi3>:
c00266e4:	55                   	push   ebp
c00266e5:	57                   	push   edi
c00266e6:	56                   	push   esi
c00266e7:	53                   	push   ebx
c00266e8:	83 ec 1c             	sub    esp,0x1c
c00266eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00266ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00266f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00266f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266fb:	85 d2                	test   edx,edx
c00266fd:	75 41                	jne    c0026740 <__udivdi3+0x5c>
c00266ff:	39 f7                	cmp    edi,esi
c0026701:	76 15                	jbe    c0026718 <__udivdi3+0x34>
c0026703:	89 e8                	mov    eax,ebp
c0026705:	89 f2                	mov    edx,esi
c0026707:	f7 f7                	div    edi
c0026709:	31 db                	xor    ebx,ebx
c002670b:	89 da                	mov    edx,ebx
c002670d:	83 c4 1c             	add    esp,0x1c
c0026710:	5b                   	pop    ebx
c0026711:	5e                   	pop    esi
c0026712:	5f                   	pop    edi
c0026713:	5d                   	pop    ebp
c0026714:	c3                   	ret    
c0026715:	8d 76 00             	lea    esi,[esi+0x0]
c0026718:	89 f9                	mov    ecx,edi
c002671a:	85 ff                	test   edi,edi
c002671c:	75 0b                	jne    c0026729 <__udivdi3+0x45>
c002671e:	b8 01 00 00 00       	mov    eax,0x1
c0026723:	31 d2                	xor    edx,edx
c0026725:	f7 f7                	div    edi
c0026727:	89 c1                	mov    ecx,eax
c0026729:	31 d2                	xor    edx,edx
c002672b:	89 f0                	mov    eax,esi
c002672d:	f7 f1                	div    ecx
c002672f:	89 c3                	mov    ebx,eax
c0026731:	89 e8                	mov    eax,ebp
c0026733:	f7 f1                	div    ecx
c0026735:	89 da                	mov    edx,ebx
c0026737:	83 c4 1c             	add    esp,0x1c
c002673a:	5b                   	pop    ebx
c002673b:	5e                   	pop    esi
c002673c:	5f                   	pop    edi
c002673d:	5d                   	pop    ebp
c002673e:	c3                   	ret    
c002673f:	90                   	nop
c0026740:	39 f2                	cmp    edx,esi
c0026742:	77 1c                	ja     c0026760 <__udivdi3+0x7c>
c0026744:	0f bd da             	bsr    ebx,edx
c0026747:	83 f3 1f             	xor    ebx,0x1f
c002674a:	75 24                	jne    c0026770 <__udivdi3+0x8c>
c002674c:	39 f2                	cmp    edx,esi
c002674e:	72 08                	jb     c0026758 <__udivdi3+0x74>
c0026750:	39 ef                	cmp    edi,ebp
c0026752:	0f 87 84 00 00 00    	ja     c00267dc <__udivdi3+0xf8>
c0026758:	b8 01 00 00 00       	mov    eax,0x1
c002675d:	eb ac                	jmp    c002670b <__udivdi3+0x27>
c002675f:	90                   	nop
c0026760:	31 db                	xor    ebx,ebx
c0026762:	31 c0                	xor    eax,eax
c0026764:	89 da                	mov    edx,ebx
c0026766:	83 c4 1c             	add    esp,0x1c
c0026769:	5b                   	pop    ebx
c002676a:	5e                   	pop    esi
c002676b:	5f                   	pop    edi
c002676c:	5d                   	pop    ebp
c002676d:	c3                   	ret    
c002676e:	66 90                	xchg   ax,ax
c0026770:	b8 20 00 00 00       	mov    eax,0x20
c0026775:	29 d8                	sub    eax,ebx
c0026777:	88 d9                	mov    cl,bl
c0026779:	d3 e2                	shl    edx,cl
c002677b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002677f:	89 fa                	mov    edx,edi
c0026781:	88 c1                	mov    cl,al
c0026783:	d3 ea                	shr    edx,cl
c0026785:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026789:	09 d1                	or     ecx,edx
c002678b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002678f:	88 d9                	mov    cl,bl
c0026791:	d3 e7                	shl    edi,cl
c0026793:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026797:	89 f7                	mov    edi,esi
c0026799:	88 c1                	mov    cl,al
c002679b:	d3 ef                	shr    edi,cl
c002679d:	88 d9                	mov    cl,bl
c002679f:	d3 e6                	shl    esi,cl
c00267a1:	89 ea                	mov    edx,ebp
c00267a3:	88 c1                	mov    cl,al
c00267a5:	d3 ea                	shr    edx,cl
c00267a7:	09 d6                	or     esi,edx
c00267a9:	89 f0                	mov    eax,esi
c00267ab:	89 fa                	mov    edx,edi
c00267ad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267b1:	89 d7                	mov    edi,edx
c00267b3:	89 c6                	mov    esi,eax
c00267b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267b9:	39 d7                	cmp    edi,edx
c00267bb:	72 13                	jb     c00267d0 <__udivdi3+0xec>
c00267bd:	74 09                	je     c00267c8 <__udivdi3+0xe4>
c00267bf:	89 f0                	mov    eax,esi
c00267c1:	31 db                	xor    ebx,ebx
c00267c3:	e9 43 ff ff ff       	jmp    c002670b <__udivdi3+0x27>
c00267c8:	88 d9                	mov    cl,bl
c00267ca:	d3 e5                	shl    ebp,cl
c00267cc:	39 c5                	cmp    ebp,eax
c00267ce:	73 ef                	jae    c00267bf <__udivdi3+0xdb>
c00267d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00267d3:	31 db                	xor    ebx,ebx
c00267d5:	e9 31 ff ff ff       	jmp    c002670b <__udivdi3+0x27>
c00267da:	66 90                	xchg   ax,ax
c00267dc:	31 c0                	xor    eax,eax
c00267de:	e9 28 ff ff ff       	jmp    c002670b <__udivdi3+0x27>
c00267e3:	90                   	nop

c00267e4 <__umoddi3>:
c00267e4:	55                   	push   ebp
c00267e5:	57                   	push   edi
c00267e6:	56                   	push   esi
c00267e7:	53                   	push   ebx
c00267e8:	83 ec 1c             	sub    esp,0x1c
c00267eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00267ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00267f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00267fb:	89 da                	mov    edx,ebx
c00267fd:	85 c0                	test   eax,eax
c00267ff:	75 37                	jne    c0026838 <__umoddi3+0x54>
c0026801:	39 df                	cmp    edi,ebx
c0026803:	76 13                	jbe    c0026818 <__umoddi3+0x34>
c0026805:	89 f0                	mov    eax,esi
c0026807:	f7 f7                	div    edi
c0026809:	89 d0                	mov    eax,edx
c002680b:	31 d2                	xor    edx,edx
c002680d:	83 c4 1c             	add    esp,0x1c
c0026810:	5b                   	pop    ebx
c0026811:	5e                   	pop    esi
c0026812:	5f                   	pop    edi
c0026813:	5d                   	pop    ebp
c0026814:	c3                   	ret    
c0026815:	8d 76 00             	lea    esi,[esi+0x0]
c0026818:	89 fd                	mov    ebp,edi
c002681a:	85 ff                	test   edi,edi
c002681c:	75 0b                	jne    c0026829 <__umoddi3+0x45>
c002681e:	b8 01 00 00 00       	mov    eax,0x1
c0026823:	31 d2                	xor    edx,edx
c0026825:	f7 f7                	div    edi
c0026827:	89 c5                	mov    ebp,eax
c0026829:	89 d8                	mov    eax,ebx
c002682b:	31 d2                	xor    edx,edx
c002682d:	f7 f5                	div    ebp
c002682f:	89 f0                	mov    eax,esi
c0026831:	f7 f5                	div    ebp
c0026833:	89 d0                	mov    eax,edx
c0026835:	eb d4                	jmp    c002680b <__umoddi3+0x27>
c0026837:	90                   	nop
c0026838:	89 f1                	mov    ecx,esi
c002683a:	39 d8                	cmp    eax,ebx
c002683c:	76 0a                	jbe    c0026848 <__umoddi3+0x64>
c002683e:	89 f0                	mov    eax,esi
c0026840:	83 c4 1c             	add    esp,0x1c
c0026843:	5b                   	pop    ebx
c0026844:	5e                   	pop    esi
c0026845:	5f                   	pop    edi
c0026846:	5d                   	pop    ebp
c0026847:	c3                   	ret    
c0026848:	0f bd e8             	bsr    ebp,eax
c002684b:	83 f5 1f             	xor    ebp,0x1f
c002684e:	75 1c                	jne    c002686c <__umoddi3+0x88>
c0026850:	39 d8                	cmp    eax,ebx
c0026852:	72 04                	jb     c0026858 <__umoddi3+0x74>
c0026854:	39 f7                	cmp    edi,esi
c0026856:	77 08                	ja     c0026860 <__umoddi3+0x7c>
c0026858:	89 da                	mov    edx,ebx
c002685a:	29 fe                	sub    esi,edi
c002685c:	19 c2                	sbb    edx,eax
c002685e:	89 f1                	mov    ecx,esi
c0026860:	89 c8                	mov    eax,ecx
c0026862:	83 c4 1c             	add    esp,0x1c
c0026865:	5b                   	pop    ebx
c0026866:	5e                   	pop    esi
c0026867:	5f                   	pop    edi
c0026868:	5d                   	pop    ebp
c0026869:	c3                   	ret    
c002686a:	66 90                	xchg   ax,ax
c002686c:	ba 20 00 00 00       	mov    edx,0x20
c0026871:	29 ea                	sub    edx,ebp
c0026873:	89 e9                	mov    ecx,ebp
c0026875:	d3 e0                	shl    eax,cl
c0026877:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002687b:	89 f8                	mov    eax,edi
c002687d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026881:	88 d1                	mov    cl,dl
c0026883:	d3 e8                	shr    eax,cl
c0026885:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026889:	09 c1                	or     ecx,eax
c002688b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002688f:	89 e9                	mov    ecx,ebp
c0026891:	d3 e7                	shl    edi,cl
c0026893:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026897:	89 d8                	mov    eax,ebx
c0026899:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002689d:	88 d1                	mov    cl,dl
c002689f:	d3 e8                	shr    eax,cl
c00268a1:	89 c7                	mov    edi,eax
c00268a3:	89 e9                	mov    ecx,ebp
c00268a5:	d3 e3                	shl    ebx,cl
c00268a7:	89 f0                	mov    eax,esi
c00268a9:	88 d1                	mov    cl,dl
c00268ab:	d3 e8                	shr    eax,cl
c00268ad:	09 d8                	or     eax,ebx
c00268af:	89 e9                	mov    ecx,ebp
c00268b1:	d3 e6                	shl    esi,cl
c00268b3:	89 f3                	mov    ebx,esi
c00268b5:	89 fa                	mov    edx,edi
c00268b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268bb:	89 d1                	mov    ecx,edx
c00268bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268c1:	89 c6                	mov    esi,eax
c00268c3:	89 d7                	mov    edi,edx
c00268c5:	39 d1                	cmp    ecx,edx
c00268c7:	72 27                	jb     c00268f0 <__umoddi3+0x10c>
c00268c9:	74 21                	je     c00268ec <__umoddi3+0x108>
c00268cb:	89 ca                	mov    edx,ecx
c00268cd:	29 f3                	sub    ebx,esi
c00268cf:	19 fa                	sbb    edx,edi
c00268d1:	89 d0                	mov    eax,edx
c00268d3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00268d7:	d3 e0                	shl    eax,cl
c00268d9:	89 e9                	mov    ecx,ebp
c00268db:	d3 eb                	shr    ebx,cl
c00268dd:	09 d8                	or     eax,ebx
c00268df:	d3 ea                	shr    edx,cl
c00268e1:	83 c4 1c             	add    esp,0x1c
c00268e4:	5b                   	pop    ebx
c00268e5:	5e                   	pop    esi
c00268e6:	5f                   	pop    edi
c00268e7:	5d                   	pop    ebp
c00268e8:	c3                   	ret    
c00268e9:	8d 76 00             	lea    esi,[esi+0x0]
c00268ec:	39 c3                	cmp    ebx,eax
c00268ee:	73 db                	jae    c00268cb <__umoddi3+0xe7>
c00268f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00268f4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00268f8:	89 d7                	mov    edi,edx
c00268fa:	89 c6                	mov    esi,eax
c00268fc:	eb cd                	jmp    c00268cb <__umoddi3+0xe7>

c00268fe <__addsf3>:
c00268fe:	55                   	push   ebp
c00268ff:	89 e5                	mov    ebp,esp
c0026901:	57                   	push   edi
c0026902:	56                   	push   esi
c0026903:	53                   	push   ebx
c0026904:	83 ec 08             	sub    esp,0x8
c0026907:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002690a:	89 fa                	mov    edx,edi
c002690c:	89 f8                	mov    eax,edi
c002690e:	c1 f8 17             	sar    eax,0x17
c0026911:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026914:	c1 e2 08             	shl    edx,0x8
c0026917:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002691d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026920:	89 de                	mov    esi,ebx
c0026922:	c1 fe 17             	sar    esi,0x17
c0026925:	c1 e3 08             	shl    ebx,0x8
c0026928:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002692e:	31 f0                	xor    eax,esi
c0026930:	0f 88 3b 01 00 00    	js     c0026a71 <__addsf3+0x173>
c0026936:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026939:	29 f1                	sub    ecx,esi
c002693b:	85 c9                	test   ecx,ecx
c002693d:	7e 54                	jle    c0026993 <__addsf3+0x95>
c002693f:	89 f0                	mov    eax,esi
c0026941:	84 c0                	test   al,al
c0026943:	75 10                	jne    c0026955 <__addsf3+0x57>
c0026945:	85 db                	test   ebx,ebx
c0026947:	0f 84 aa 02 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c002694d:	49                   	dec    ecx
c002694e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026951:	74 38                	je     c002698b <__addsf3+0x8d>
c0026953:	eb 13                	jmp    c0026968 <__addsf3+0x6a>
c0026955:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026958:	f7 d0                	not    eax
c002695a:	84 c0                	test   al,al
c002695c:	0f 84 95 02 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026962:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026968:	83 f9 1f             	cmp    ecx,0x1f
c002696b:	0f 8f 86 02 00 00    	jg     c0026bf7 <__addsf3+0x2f9>
c0026971:	89 de                	mov    esi,ebx
c0026973:	d3 ee                	shr    esi,cl
c0026975:	b8 20 00 00 00       	mov    eax,0x20
c002697a:	29 c8                	sub    eax,ecx
c002697c:	89 c1                	mov    ecx,eax
c002697e:	d3 e3                	shl    ebx,cl
c0026980:	31 c0                	xor    eax,eax
c0026982:	85 db                	test   ebx,ebx
c0026984:	0f 95 c0             	setne  al
c0026987:	09 f0                	or     eax,esi
c0026989:	01 d0                	add    eax,edx
c002698b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002698e:	e9 b6 00 00 00       	jmp    c0026a49 <__addsf3+0x14b>
c0026993:	74 5c                	je     c00269f1 <__addsf3+0xf3>
c0026995:	89 f1                	mov    ecx,esi
c0026997:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002699a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002699d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269a1:	75 14                	jne    c00269b7 <__addsf3+0xb9>
c00269a3:	85 d2                	test   edx,edx
c00269a5:	0f 84 4c 02 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c00269ab:	49                   	dec    ecx
c00269ac:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269af:	0f 84 94 00 00 00    	je     c0026a49 <__addsf3+0x14b>
c00269b5:	eb 12                	jmp    c00269c9 <__addsf3+0xcb>
c00269b7:	89 f0                	mov    eax,esi
c00269b9:	f7 d0                	not    eax
c00269bb:	84 c0                	test   al,al
c00269bd:	0f 84 34 02 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c00269c3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269c9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269cc:	83 f9 1f             	cmp    ecx,0x1f
c00269cf:	0f 8f 22 02 00 00    	jg     c0026bf7 <__addsf3+0x2f9>
c00269d5:	89 d7                	mov    edi,edx
c00269d7:	d3 ef                	shr    edi,cl
c00269d9:	b8 20 00 00 00       	mov    eax,0x20
c00269de:	29 c8                	sub    eax,ecx
c00269e0:	89 c1                	mov    ecx,eax
c00269e2:	d3 e2                	shl    edx,cl
c00269e4:	31 c0                	xor    eax,eax
c00269e6:	85 d2                	test   edx,edx
c00269e8:	0f 95 c0             	setne  al
c00269eb:	09 f8                	or     eax,edi
c00269ed:	01 d8                	add    eax,ebx
c00269ef:	eb 58                	jmp    c0026a49 <__addsf3+0x14b>
c00269f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269f4:	8d 70 01             	lea    esi,[eax+0x1]
c00269f7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00269fd:	75 32                	jne    c0026a31 <__addsf3+0x133>
c00269ff:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a03:	75 1f                	jne    c0026a24 <__addsf3+0x126>
c0026a05:	85 d2                	test   edx,edx
c0026a07:	0f 84 e0 01 00 00    	je     c0026bed <__addsf3+0x2ef>
c0026a0d:	85 db                	test   ebx,ebx
c0026a0f:	0f 84 e2 01 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026a15:	89 d0                	mov    eax,edx
c0026a17:	01 d8                	add    eax,ebx
c0026a19:	0f 89 a9 01 00 00    	jns    c0026bc8 <__addsf3+0x2ca>
c0026a1f:	e9 9d 01 00 00       	jmp    c0026bc1 <__addsf3+0x2c3>
c0026a24:	85 d2                	test   edx,edx
c0026a26:	0f 85 cb 01 00 00    	jne    c0026bf7 <__addsf3+0x2f9>
c0026a2c:	e9 bc 01 00 00       	jmp    c0026bed <__addsf3+0x2ef>
c0026a31:	31 c0                	xor    eax,eax
c0026a33:	89 f1                	mov    ecx,esi
c0026a35:	f7 d1                	not    ecx
c0026a37:	84 c9                	test   cl,cl
c0026a39:	0f 84 90 01 00 00    	je     c0026bcf <__addsf3+0x2d1>
c0026a3f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a42:	d1 e8                	shr    eax,1
c0026a44:	e9 86 01 00 00       	jmp    c0026bcf <__addsf3+0x2d1>
c0026a49:	85 c0                	test   eax,eax
c0026a4b:	0f 89 7e 01 00 00    	jns    c0026bcf <__addsf3+0x2d1>
c0026a51:	46                   	inc    esi
c0026a52:	89 f2                	mov    edx,esi
c0026a54:	f7 d2                	not    edx
c0026a56:	84 d2                	test   dl,dl
c0026a58:	0f 84 6f 01 00 00    	je     c0026bcd <__addsf3+0x2cf>
c0026a5e:	89 c2                	mov    edx,eax
c0026a60:	83 e2 01             	and    edx,0x1
c0026a63:	d1 e8                	shr    eax,1
c0026a65:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026a6a:	09 d0                	or     eax,edx
c0026a6c:	e9 5e 01 00 00       	jmp    c0026bcf <__addsf3+0x2d1>
c0026a71:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026a75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026a78:	89 f0                	mov    eax,esi
c0026a7a:	0f b6 c0             	movzx  eax,al
c0026a7d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a80:	29 c1                	sub    ecx,eax
c0026a82:	85 c9                	test   ecx,ecx
c0026a84:	7e 55                	jle    c0026adb <__addsf3+0x1dd>
c0026a86:	85 c0                	test   eax,eax
c0026a88:	75 11                	jne    c0026a9b <__addsf3+0x19d>
c0026a8a:	85 db                	test   ebx,ebx
c0026a8c:	0f 84 65 01 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026a92:	49                   	dec    ecx
c0026a93:	75 19                	jne    c0026aae <__addsf3+0x1b0>
c0026a95:	89 d0                	mov    eax,edx
c0026a97:	29 d8                	sub    eax,ebx
c0026a99:	eb 38                	jmp    c0026ad3 <__addsf3+0x1d5>
c0026a9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a9e:	f7 d0                	not    eax
c0026aa0:	84 c0                	test   al,al
c0026aa2:	0f 84 4f 01 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026aa8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026aae:	83 f9 1f             	cmp    ecx,0x1f
c0026ab1:	0f 8f 40 01 00 00    	jg     c0026bf7 <__addsf3+0x2f9>
c0026ab7:	89 de                	mov    esi,ebx
c0026ab9:	d3 ee                	shr    esi,cl
c0026abb:	b8 20 00 00 00       	mov    eax,0x20
c0026ac0:	29 c8                	sub    eax,ecx
c0026ac2:	89 c1                	mov    ecx,eax
c0026ac4:	d3 e3                	shl    ebx,cl
c0026ac6:	31 c0                	xor    eax,eax
c0026ac8:	85 db                	test   ebx,ebx
c0026aca:	0f 95 c0             	setne  al
c0026acd:	09 f0                	or     eax,esi
c0026acf:	29 c2                	sub    edx,eax
c0026ad1:	89 d0                	mov    eax,edx
c0026ad3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ad6:	e9 af 00 00 00       	jmp    c0026b8a <__addsf3+0x28c>
c0026adb:	74 5c                	je     c0026b39 <__addsf3+0x23b>
c0026add:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026ae0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ae3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ae7:	75 14                	jne    c0026afd <__addsf3+0x1ff>
c0026ae9:	85 d2                	test   edx,edx
c0026aeb:	0f 84 06 01 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026af1:	48                   	dec    eax
c0026af2:	75 1b                	jne    c0026b0f <__addsf3+0x211>
c0026af4:	89 d8                	mov    eax,ebx
c0026af6:	29 d0                	sub    eax,edx
c0026af8:	e9 8d 00 00 00       	jmp    c0026b8a <__addsf3+0x28c>
c0026afd:	89 f1                	mov    ecx,esi
c0026aff:	f7 d1                	not    ecx
c0026b01:	84 c9                	test   cl,cl
c0026b03:	0f 84 ee 00 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026b09:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b0f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b12:	83 f8 1f             	cmp    eax,0x1f
c0026b15:	0f 8f dc 00 00 00    	jg     c0026bf7 <__addsf3+0x2f9>
c0026b1b:	89 d7                	mov    edi,edx
c0026b1d:	88 c1                	mov    cl,al
c0026b1f:	d3 ef                	shr    edi,cl
c0026b21:	b9 20 00 00 00       	mov    ecx,0x20
c0026b26:	29 c1                	sub    ecx,eax
c0026b28:	d3 e2                	shl    edx,cl
c0026b2a:	31 c0                	xor    eax,eax
c0026b2c:	85 d2                	test   edx,edx
c0026b2e:	0f 95 c0             	setne  al
c0026b31:	09 f8                	or     eax,edi
c0026b33:	29 c3                	sub    ebx,eax
c0026b35:	89 d8                	mov    eax,ebx
c0026b37:	eb 51                	jmp    c0026b8a <__addsf3+0x28c>
c0026b39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b3c:	40                   	inc    eax
c0026b3d:	a8 fe                	test   al,0xfe
c0026b3f:	75 3d                	jne    c0026b7e <__addsf3+0x280>
c0026b41:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b45:	0f 85 a7 00 00 00    	jne    c0026bf2 <__addsf3+0x2f4>
c0026b4b:	85 d2                	test   edx,edx
c0026b4d:	75 12                	jne    c0026b61 <__addsf3+0x263>
c0026b4f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b52:	85 db                	test   ebx,ebx
c0026b54:	0f 85 9d 00 00 00    	jne    c0026bf7 <__addsf3+0x2f9>
c0026b5a:	31 ff                	xor    edi,edi
c0026b5c:	e9 96 00 00 00       	jmp    c0026bf7 <__addsf3+0x2f9>
c0026b61:	85 db                	test   ebx,ebx
c0026b63:	0f 84 8e 00 00 00    	je     c0026bf7 <__addsf3+0x2f9>
c0026b69:	89 d0                	mov    eax,edx
c0026b6b:	29 d8                	sub    eax,ebx
c0026b6d:	79 06                	jns    c0026b75 <__addsf3+0x277>
c0026b6f:	89 d8                	mov    eax,ebx
c0026b71:	29 d0                	sub    eax,edx
c0026b73:	eb 5a                	jmp    c0026bcf <__addsf3+0x2d1>
c0026b75:	bf 00 00 00 00       	mov    edi,0x0
c0026b7a:	74 7b                	je     c0026bf7 <__addsf3+0x2f9>
c0026b7c:	eb 4a                	jmp    c0026bc8 <__addsf3+0x2ca>
c0026b7e:	89 d0                	mov    eax,edx
c0026b80:	29 d8                	sub    eax,ebx
c0026b82:	79 12                	jns    c0026b96 <__addsf3+0x298>
c0026b84:	89 d8                	mov    eax,ebx
c0026b86:	29 d0                	sub    eax,edx
c0026b88:	eb 09                	jmp    c0026b93 <__addsf3+0x295>
c0026b8a:	85 c0                	test   eax,eax
c0026b8c:	79 41                	jns    c0026bcf <__addsf3+0x2d1>
c0026b8e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b93:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026b96:	31 f6                	xor    esi,esi
c0026b98:	85 c0                	test   eax,eax
c0026b9a:	74 33                	je     c0026bcf <__addsf3+0x2d1>
c0026b9c:	0f bd c8             	bsr    ecx,eax
c0026b9f:	83 f1 1f             	xor    ecx,0x1f
c0026ba2:	d3 e0                	shl    eax,cl
c0026ba4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ba8:	39 ca                	cmp    edx,ecx
c0026baa:	7f 10                	jg     c0026bbc <__addsf3+0x2be>
c0026bac:	29 d1                	sub    ecx,edx
c0026bae:	41                   	inc    ecx
c0026baf:	d3 e8                	shr    eax,cl
c0026bb1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bb4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026bba:	eb 13                	jmp    c0026bcf <__addsf3+0x2d1>
c0026bbc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bbf:	29 ce                	sub    esi,ecx
c0026bc1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bc6:	eb 07                	jmp    c0026bcf <__addsf3+0x2d1>
c0026bc8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bcb:	eb 02                	jmp    c0026bcf <__addsf3+0x2d1>
c0026bcd:	31 c0                	xor    eax,eax
c0026bcf:	89 c2                	mov    edx,eax
c0026bd1:	c1 ea 08             	shr    edx,0x8
c0026bd4:	a8 7f                	test   al,0x7f
c0026bd6:	0f 95 c1             	setne  cl
c0026bd9:	09 d1                	or     ecx,edx
c0026bdb:	83 e1 01             	and    ecx,0x1
c0026bde:	c1 e8 07             	shr    eax,0x7
c0026be1:	21 c8                	and    eax,ecx
c0026be3:	c1 e6 17             	shl    esi,0x17
c0026be6:	09 d6                	or     esi,edx
c0026be8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026beb:	eb 0a                	jmp    c0026bf7 <__addsf3+0x2f9>
c0026bed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bf0:	eb 05                	jmp    c0026bf7 <__addsf3+0x2f9>
c0026bf2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026bf7:	89 f8                	mov    eax,edi
c0026bf9:	5a                   	pop    edx
c0026bfa:	59                   	pop    ecx
c0026bfb:	5b                   	pop    ebx
c0026bfc:	5e                   	pop    esi
c0026bfd:	5f                   	pop    edi
c0026bfe:	5d                   	pop    ebp
c0026bff:	c3                   	ret    

c0026c00 <__subsf3>:
c0026c00:	55                   	push   ebp
c0026c01:	89 e5                	mov    ebp,esp
c0026c03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c06:	05 00 00 00 80       	add    eax,0x80000000
c0026c0b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c0e:	5d                   	pop    ebp
c0026c0f:	e9 ea fc ff ff       	jmp    c00268fe <__addsf3>

c0026c14 <__negsf2>:
c0026c14:	55                   	push   ebp
c0026c15:	89 e5                	mov    ebp,esp
c0026c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c1a:	05 00 00 00 80       	add    eax,0x80000000
c0026c1f:	5d                   	pop    ebp
c0026c20:	c3                   	ret    

c0026c21 <__mulsf3>:
c0026c21:	55                   	push   ebp
c0026c22:	89 e5                	mov    ebp,esp
c0026c24:	57                   	push   edi
c0026c25:	56                   	push   esi
c0026c26:	53                   	push   ebx
c0026c27:	83 ec 1c             	sub    esp,0x1c
c0026c2a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c2d:	89 f0                	mov    eax,esi
c0026c2f:	89 f1                	mov    ecx,esi
c0026c31:	c1 f9 17             	sar    ecx,0x17
c0026c34:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c37:	c1 e0 08             	shl    eax,0x8
c0026c3a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c3f:	89 c1                	mov    ecx,eax
c0026c41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c44:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c47:	89 c7                	mov    edi,eax
c0026c49:	c1 ff 17             	sar    edi,0x17
c0026c4c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c50:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c53:	89 f8                	mov    eax,edi
c0026c55:	0f b6 c0             	movzx  eax,al
c0026c58:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c5b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c5f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c62:	42                   	inc    edx
c0026c63:	80 e2 fe             	and    dl,0xfe
c0026c66:	75 7b                	jne    c0026ce3 <__mulsf3+0xc2>
c0026c68:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c6c:	74 54                	je     c0026cc2 <__mulsf3+0xa1>
c0026c6e:	85 c9                	test   ecx,ecx
c0026c70:	0f 85 64 01 00 00    	jne    c0026dda <__mulsf3+0x1b9>
c0026c76:	8d 57 01             	lea    edx,[edi+0x1]
c0026c79:	80 e2 fe             	and    dl,0xfe
c0026c7c:	75 1f                	jne    c0026c9d <__mulsf3+0x7c>
c0026c7e:	85 c0                	test   eax,eax
c0026c80:	b8 00 00 00 00       	mov    eax,0x0
c0026c85:	74 29                	je     c0026cb0 <__mulsf3+0x8f>
c0026c87:	53                   	push   ebx
c0026c88:	53                   	push   ebx
c0026c89:	50                   	push   eax
c0026c8a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c8d:	e8 96 05 00 00       	call   c0027228 <__nesf2>
c0026c92:	83 c4 10             	add    esp,0x10
c0026c95:	85 c0                	test   eax,eax
c0026c97:	0f 85 3a 01 00 00    	jne    c0026dd7 <__mulsf3+0x1b6>
c0026c9d:	85 ff                	test   edi,edi
c0026c9f:	0f 89 35 01 00 00    	jns    c0026dda <__mulsf3+0x1b9>
c0026ca5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026cab:	e9 2a 01 00 00       	jmp    c0026dda <__mulsf3+0x1b9>
c0026cb0:	51                   	push   ecx
c0026cb1:	51                   	push   ecx
c0026cb2:	50                   	push   eax
c0026cb3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cb6:	e8 6d 05 00 00       	call   c0027228 <__nesf2>
c0026cbb:	83 c4 10             	add    esp,0x10
c0026cbe:	85 c0                	test   eax,eax
c0026cc0:	eb 15                	jmp    c0026cd7 <__mulsf3+0xb6>
c0026cc2:	85 c9                	test   ecx,ecx
c0026cc4:	74 0b                	je     c0026cd1 <__mulsf3+0xb0>
c0026cc6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026cc9:	01 c9                	add    ecx,ecx
c0026ccb:	78 16                	js     c0026ce3 <__mulsf3+0xc2>
c0026ccd:	89 d3                	mov    ebx,edx
c0026ccf:	eb f5                	jmp    c0026cc6 <__mulsf3+0xa5>
c0026cd1:	89 f8                	mov    eax,edi
c0026cd3:	f7 d0                	not    eax
c0026cd5:	84 c0                	test   al,al
c0026cd7:	75 c4                	jne    c0026c9d <__mulsf3+0x7c>
c0026cd9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026cde:	e9 f7 00 00 00       	jmp    c0026dda <__mulsf3+0x1b9>
c0026ce3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026ce6:	c1 e6 08             	shl    esi,0x8
c0026ce9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026cef:	8d 57 01             	lea    edx,[edi+0x1]
c0026cf2:	80 e2 fe             	and    dl,0xfe
c0026cf5:	75 63                	jne    c0026d5a <__mulsf3+0x139>
c0026cf7:	85 c0                	test   eax,eax
c0026cf9:	74 2f                	je     c0026d2a <__mulsf3+0x109>
c0026cfb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026cff:	0f 89 d2 00 00 00    	jns    c0026dd7 <__mulsf3+0x1b6>
c0026d05:	52                   	push   edx
c0026d06:	52                   	push   edx
c0026d07:	6a 00                	push   0x0
c0026d09:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d0c:	e8 dc 04 00 00       	call   c00271ed <__eqsf2>
c0026d11:	83 c4 10             	add    esp,0x10
c0026d14:	85 c0                	test   eax,eax
c0026d16:	0f 85 bb 00 00 00    	jne    c0026dd7 <__mulsf3+0x1b6>
c0026d1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d1f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d25:	e9 b0 00 00 00       	jmp    c0026dda <__mulsf3+0x1b9>
c0026d2a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d2d:	50                   	push   eax
c0026d2e:	50                   	push   eax
c0026d2f:	6a 00                	push   0x0
c0026d31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d34:	e8 b4 04 00 00       	call   c00271ed <__eqsf2>
c0026d39:	83 c4 10             	add    esp,0x10
c0026d3c:	85 c0                	test   eax,eax
c0026d3e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d41:	75 0c                	jne    c0026d4f <__mulsf3+0x12e>
c0026d43:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d47:	0f 89 8a 00 00 00    	jns    c0026dd7 <__mulsf3+0x1b6>
c0026d4d:	eb cd                	jmp    c0026d1c <__mulsf3+0xfb>
c0026d4f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d52:	01 f6                	add    esi,esi
c0026d54:	78 04                	js     c0026d5a <__mulsf3+0x139>
c0026d56:	89 c3                	mov    ebx,eax
c0026d58:	eb f5                	jmp    c0026d4f <__mulsf3+0x12e>
c0026d5a:	89 c8                	mov    eax,ecx
c0026d5c:	0d 00 00 00 80       	or     eax,0x80000000
c0026d61:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d67:	f7 e6                	mul    esi
c0026d69:	85 c0                	test   eax,eax
c0026d6b:	0f 95 c0             	setne  al
c0026d6e:	0f b6 c0             	movzx  eax,al
c0026d71:	09 c2                	or     edx,eax
c0026d73:	78 03                	js     c0026d78 <__mulsf3+0x157>
c0026d75:	01 d2                	add    edx,edx
c0026d77:	4b                   	dec    ebx
c0026d78:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026d7e:	7f 22                	jg     c0026da2 <__mulsf3+0x181>
c0026d80:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026d86:	85 db                	test   ebx,ebx
c0026d88:	7f 23                	jg     c0026dad <__mulsf3+0x18c>
c0026d8a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026d8d:	7c 1a                	jl     c0026da9 <__mulsf3+0x188>
c0026d8f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d95:	b9 01 00 00 00       	mov    ecx,0x1
c0026d9a:	29 d9                	sub    ecx,ebx
c0026d9c:	d3 ea                	shr    edx,cl
c0026d9e:	31 db                	xor    ebx,ebx
c0026da0:	eb 0b                	jmp    c0026dad <__mulsf3+0x18c>
c0026da2:	bb ff 00 00 00       	mov    ebx,0xff
c0026da7:	eb 02                	jmp    c0026dab <__mulsf3+0x18a>
c0026da9:	31 db                	xor    ebx,ebx
c0026dab:	31 d2                	xor    edx,edx
c0026dad:	89 d0                	mov    eax,edx
c0026daf:	c1 e8 08             	shr    eax,0x8
c0026db2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026db5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026dbb:	09 fb                	or     ebx,edi
c0026dbd:	c1 e3 17             	shl    ebx,0x17
c0026dc0:	09 c3                	or     ebx,eax
c0026dc2:	f6 c2 7f             	test   dl,0x7f
c0026dc5:	0f 95 c1             	setne  cl
c0026dc8:	09 c8                	or     eax,ecx
c0026dca:	83 e0 01             	and    eax,0x1
c0026dcd:	c1 ea 07             	shr    edx,0x7
c0026dd0:	21 c2                	and    edx,eax
c0026dd2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026dd5:	eb 03                	jmp    c0026dda <__mulsf3+0x1b9>
c0026dd7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026dda:	89 f0                	mov    eax,esi
c0026ddc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026ddf:	5b                   	pop    ebx
c0026de0:	5e                   	pop    esi
c0026de1:	5f                   	pop    edi
c0026de2:	5d                   	pop    ebp
c0026de3:	c3                   	ret    

c0026de4 <__divsf3>:
c0026de4:	55                   	push   ebp
c0026de5:	89 e5                	mov    ebp,esp
c0026de7:	57                   	push   edi
c0026de8:	56                   	push   esi
c0026de9:	53                   	push   ebx
c0026dea:	83 ec 1c             	sub    esp,0x1c
c0026ded:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026df0:	89 d8                	mov    eax,ebx
c0026df2:	89 d9                	mov    ecx,ebx
c0026df4:	c1 f9 17             	sar    ecx,0x17
c0026df7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026dfa:	c1 e0 08             	shl    eax,0x8
c0026dfd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e02:	89 c1                	mov    ecx,eax
c0026e04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e07:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e0a:	89 c7                	mov    edi,eax
c0026e0c:	c1 ff 17             	sar    edi,0x17
c0026e0f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e13:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e16:	89 f8                	mov    eax,edi
c0026e18:	0f b6 c0             	movzx  eax,al
c0026e1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e1e:	29 c6                	sub    esi,eax
c0026e20:	83 c6 7f             	add    esi,0x7f
c0026e23:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e26:	42                   	inc    edx
c0026e27:	80 e2 fe             	and    dl,0xfe
c0026e2a:	0f 85 9c 00 00 00    	jne    c0026ecc <__divsf3+0xe8>
c0026e30:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e34:	74 33                	je     c0026e69 <__divsf3+0x85>
c0026e36:	85 c9                	test   ecx,ecx
c0026e38:	0f 85 c7 01 00 00    	jne    c0027005 <__divsf3+0x221>
c0026e3e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e41:	80 e2 fe             	and    dl,0xfe
c0026e44:	75 2f                	jne    c0026e75 <__divsf3+0x91>
c0026e46:	85 c0                	test   eax,eax
c0026e48:	74 2b                	je     c0026e75 <__divsf3+0x91>
c0026e4a:	51                   	push   ecx
c0026e4b:	51                   	push   ecx
c0026e4c:	6a 00                	push   0x0
c0026e4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e51:	e8 d2 03 00 00       	call   c0027228 <__nesf2>
c0026e56:	83 c4 10             	add    esp,0x10
c0026e59:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e5c:	85 c0                	test   eax,eax
c0026e5e:	0f 85 a1 01 00 00    	jne    c0027005 <__divsf3+0x221>
c0026e64:	e9 92 01 00 00       	jmp    c0026ffb <__divsf3+0x217>
c0026e69:	85 c9                	test   ecx,ecx
c0026e6b:	75 1b                	jne    c0026e88 <__divsf3+0xa4>
c0026e6d:	8d 57 01             	lea    edx,[edi+0x1]
c0026e70:	80 e2 fe             	and    dl,0xfe
c0026e73:	74 1e                	je     c0026e93 <__divsf3+0xaf>
c0026e75:	85 ff                	test   edi,edi
c0026e77:	0f 89 88 01 00 00    	jns    c0027005 <__divsf3+0x221>
c0026e7d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026e83:	e9 7d 01 00 00       	jmp    c0027005 <__divsf3+0x221>
c0026e88:	8d 56 ff             	lea    edx,[esi-0x1]
c0026e8b:	01 c9                	add    ecx,ecx
c0026e8d:	78 3d                	js     c0026ecc <__divsf3+0xe8>
c0026e8f:	89 d6                	mov    esi,edx
c0026e91:	eb f5                	jmp    c0026e88 <__divsf3+0xa4>
c0026e93:	85 c0                	test   eax,eax
c0026e95:	b8 00 00 00 00       	mov    eax,0x0
c0026e9a:	74 18                	je     c0026eb4 <__divsf3+0xd0>
c0026e9c:	52                   	push   edx
c0026e9d:	52                   	push   edx
c0026e9e:	50                   	push   eax
c0026e9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ea2:	e8 81 03 00 00       	call   c0027228 <__nesf2>
c0026ea7:	83 c4 10             	add    esp,0x10
c0026eaa:	85 c0                	test   eax,eax
c0026eac:	0f 85 50 01 00 00    	jne    c0027002 <__divsf3+0x21e>
c0026eb2:	eb c1                	jmp    c0026e75 <__divsf3+0x91>
c0026eb4:	56                   	push   esi
c0026eb5:	56                   	push   esi
c0026eb6:	50                   	push   eax
c0026eb7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eba:	e8 69 03 00 00       	call   c0027228 <__nesf2>
c0026ebf:	83 c4 10             	add    esp,0x10
c0026ec2:	85 c0                	test   eax,eax
c0026ec4:	0f 84 31 01 00 00    	je     c0026ffb <__divsf3+0x217>
c0026eca:	eb a9                	jmp    c0026e75 <__divsf3+0x91>
c0026ecc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026ecf:	c1 e3 08             	shl    ebx,0x8
c0026ed2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ed8:	8d 57 01             	lea    edx,[edi+0x1]
c0026edb:	80 e2 fe             	and    dl,0xfe
c0026ede:	75 71                	jne    c0026f51 <__divsf3+0x16d>
c0026ee0:	85 c0                	test   eax,eax
c0026ee2:	ba 00 00 00 00       	mov    edx,0x0
c0026ee7:	74 2f                	je     c0026f18 <__divsf3+0x134>
c0026ee9:	51                   	push   ecx
c0026eea:	51                   	push   ecx
c0026eeb:	52                   	push   edx
c0026eec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eef:	e8 f9 02 00 00       	call   c00271ed <__eqsf2>
c0026ef4:	83 c4 10             	add    esp,0x10
c0026ef7:	85 c0                	test   eax,eax
c0026ef9:	0f 85 03 01 00 00    	jne    c0027002 <__divsf3+0x21e>
c0026eff:	31 d2                	xor    edx,edx
c0026f01:	89 d3                	mov    ebx,edx
c0026f03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f06:	31 f8                	xor    eax,edi
c0026f08:	0f 89 f7 00 00 00    	jns    c0027005 <__divsf3+0x221>
c0026f0e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f13:	e9 ed 00 00 00       	jmp    c0027005 <__divsf3+0x221>
c0026f18:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f1b:	50                   	push   eax
c0026f1c:	50                   	push   eax
c0026f1d:	52                   	push   edx
c0026f1e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f21:	e8 c7 02 00 00       	call   c00271ed <__eqsf2>
c0026f26:	83 c4 10             	add    esp,0x10
c0026f29:	85 c0                	test   eax,eax
c0026f2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f2e:	75 16                	jne    c0026f46 <__divsf3+0x162>
c0026f30:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f33:	31 fb                	xor    ebx,edi
c0026f35:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f3b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f41:	e9 bf 00 00 00       	jmp    c0027005 <__divsf3+0x221>
c0026f46:	8d 46 01             	lea    eax,[esi+0x1]
c0026f49:	01 db                	add    ebx,ebx
c0026f4b:	78 04                	js     c0026f51 <__divsf3+0x16d>
c0026f4d:	89 c6                	mov    esi,eax
c0026f4f:	eb f5                	jmp    c0026f46 <__divsf3+0x162>
c0026f51:	89 c8                	mov    eax,ecx
c0026f53:	0d 00 00 00 80       	or     eax,0x80000000
c0026f58:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f5e:	31 d2                	xor    edx,edx
c0026f60:	39 d8                	cmp    eax,ebx
c0026f62:	72 07                	jb     c0026f6b <__divsf3+0x187>
c0026f64:	29 d8                	sub    eax,ebx
c0026f66:	ba 01 00 00 00       	mov    edx,0x1
c0026f6b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026f72:	01 d2                	add    edx,edx
c0026f74:	89 c1                	mov    ecx,eax
c0026f76:	01 c0                	add    eax,eax
c0026f78:	85 c9                	test   ecx,ecx
c0026f7a:	78 04                	js     c0026f80 <__divsf3+0x19c>
c0026f7c:	39 c3                	cmp    ebx,eax
c0026f7e:	77 05                	ja     c0026f85 <__divsf3+0x1a1>
c0026f80:	29 d8                	sub    eax,ebx
c0026f82:	83 ca 01             	or     edx,0x1
c0026f85:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026f88:	75 e8                	jne    c0026f72 <__divsf3+0x18e>
c0026f8a:	85 c0                	test   eax,eax
c0026f8c:	0f 95 c0             	setne  al
c0026f8f:	0f b6 c0             	movzx  eax,al
c0026f92:	c1 e2 06             	shl    edx,0x6
c0026f95:	09 c2                	or     edx,eax
c0026f97:	78 03                	js     c0026f9c <__divsf3+0x1b8>
c0026f99:	01 d2                	add    edx,edx
c0026f9b:	4e                   	dec    esi
c0026f9c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026fa2:	7f 22                	jg     c0026fc6 <__divsf3+0x1e2>
c0026fa4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026faa:	85 f6                	test   esi,esi
c0026fac:	7f 23                	jg     c0026fd1 <__divsf3+0x1ed>
c0026fae:	83 fe e9             	cmp    esi,0xffffffe9
c0026fb1:	7c 1a                	jl     c0026fcd <__divsf3+0x1e9>
c0026fb3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fb9:	b9 01 00 00 00       	mov    ecx,0x1
c0026fbe:	29 f1                	sub    ecx,esi
c0026fc0:	d3 ea                	shr    edx,cl
c0026fc2:	31 f6                	xor    esi,esi
c0026fc4:	eb 0b                	jmp    c0026fd1 <__divsf3+0x1ed>
c0026fc6:	be ff 00 00 00       	mov    esi,0xff
c0026fcb:	eb 02                	jmp    c0026fcf <__divsf3+0x1eb>
c0026fcd:	31 f6                	xor    esi,esi
c0026fcf:	31 d2                	xor    edx,edx
c0026fd1:	89 d0                	mov    eax,edx
c0026fd3:	c1 e8 08             	shr    eax,0x8
c0026fd6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026fd9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026fdf:	09 fe                	or     esi,edi
c0026fe1:	c1 e6 17             	shl    esi,0x17
c0026fe4:	09 c6                	or     esi,eax
c0026fe6:	f6 c2 7f             	test   dl,0x7f
c0026fe9:	0f 95 c1             	setne  cl
c0026fec:	09 c8                	or     eax,ecx
c0026fee:	83 e0 01             	and    eax,0x1
c0026ff1:	c1 ea 07             	shr    edx,0x7
c0026ff4:	21 c2                	and    edx,eax
c0026ff6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026ff9:	eb 0a                	jmp    c0027005 <__divsf3+0x221>
c0026ffb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027000:	eb 03                	jmp    c0027005 <__divsf3+0x221>
c0027002:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027005:	89 d8                	mov    eax,ebx
c0027007:	8d 65 f4             	lea    esp,[ebp-0xc]
c002700a:	5b                   	pop    ebx
c002700b:	5e                   	pop    esi
c002700c:	5f                   	pop    edi
c002700d:	5d                   	pop    ebp
c002700e:	c3                   	ret    

c002700f <__floatsisf>:
c002700f:	55                   	push   ebp
c0027010:	89 e5                	mov    ebp,esp
c0027012:	53                   	push   ebx
c0027013:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027016:	85 d2                	test   edx,edx
c0027018:	7e 2b                	jle    c0027045 <__floatsisf+0x36>
c002701a:	0f bd ca             	bsr    ecx,edx
c002701d:	83 f1 1f             	xor    ecx,0x1f
c0027020:	d3 e2                	shl    edx,cl
c0027022:	89 d0                	mov    eax,edx
c0027024:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027029:	89 c3                	mov    ebx,eax
c002702b:	c1 eb 08             	shr    ebx,0x8
c002702e:	80 e2 7f             	and    dl,0x7f
c0027031:	0f 95 c2             	setne  dl
c0027034:	09 da                	or     edx,ebx
c0027036:	83 e2 01             	and    edx,0x1
c0027039:	c1 e8 07             	shr    eax,0x7
c002703c:	21 c2                	and    edx,eax
c002703e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027043:	eb 32                	jmp    c0027077 <__floatsisf+0x68>
c0027045:	b8 00 00 00 00       	mov    eax,0x0
c002704a:	74 34                	je     c0027080 <__floatsisf+0x71>
c002704c:	f7 da                	neg    edx
c002704e:	0f bd ca             	bsr    ecx,edx
c0027051:	83 f1 1f             	xor    ecx,0x1f
c0027054:	d3 e2                	shl    edx,cl
c0027056:	89 d0                	mov    eax,edx
c0027058:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002705d:	89 c3                	mov    ebx,eax
c002705f:	c1 eb 08             	shr    ebx,0x8
c0027062:	80 e2 7f             	and    dl,0x7f
c0027065:	0f 95 c2             	setne  dl
c0027068:	09 da                	or     edx,ebx
c002706a:	83 e2 01             	and    edx,0x1
c002706d:	c1 e8 07             	shr    eax,0x7
c0027070:	21 c2                	and    edx,eax
c0027072:	b8 9e 01 00 00       	mov    eax,0x19e
c0027077:	29 c8                	sub    eax,ecx
c0027079:	c1 e0 17             	shl    eax,0x17
c002707c:	09 d8                	or     eax,ebx
c002707e:	01 d0                	add    eax,edx
c0027080:	5b                   	pop    ebx
c0027081:	5d                   	pop    ebp
c0027082:	c3                   	ret    

c0027083 <__floatunsisf>:
c0027083:	55                   	push   ebp
c0027084:	89 e5                	mov    ebp,esp
c0027086:	53                   	push   ebx
c0027087:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002708a:	31 c0                	xor    eax,eax
c002708c:	85 d2                	test   edx,edx
c002708e:	74 32                	je     c00270c2 <__floatunsisf+0x3f>
c0027090:	0f bd ca             	bsr    ecx,edx
c0027093:	83 f1 1f             	xor    ecx,0x1f
c0027096:	d3 e2                	shl    edx,cl
c0027098:	89 d0                	mov    eax,edx
c002709a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002709f:	89 c3                	mov    ebx,eax
c00270a1:	c1 eb 08             	shr    ebx,0x8
c00270a4:	80 e2 7f             	and    dl,0x7f
c00270a7:	0f 95 c2             	setne  dl
c00270aa:	09 da                	or     edx,ebx
c00270ac:	83 e2 01             	and    edx,0x1
c00270af:	c1 e8 07             	shr    eax,0x7
c00270b2:	21 c2                	and    edx,eax
c00270b4:	b8 9e 00 00 00       	mov    eax,0x9e
c00270b9:	29 c8                	sub    eax,ecx
c00270bb:	c1 e0 17             	shl    eax,0x17
c00270be:	09 d8                	or     eax,ebx
c00270c0:	01 d0                	add    eax,edx
c00270c2:	5b                   	pop    ebx
c00270c3:	5d                   	pop    ebp
c00270c4:	c3                   	ret    

c00270c5 <__fixsfsi>:
c00270c5:	55                   	push   ebp
c00270c6:	89 e5                	mov    ebp,esp
c00270c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270cb:	89 d1                	mov    ecx,edx
c00270cd:	c1 e1 08             	shl    ecx,0x8
c00270d0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00270d6:	c1 fa 17             	sar    edx,0x17
c00270d9:	78 1c                	js     c00270f7 <__fixsfsi+0x32>
c00270db:	83 ea 7f             	sub    edx,0x7f
c00270de:	31 c0                	xor    eax,eax
c00270e0:	83 fa 1e             	cmp    edx,0x1e
c00270e3:	77 40                	ja     c0027125 <__fixsfsi+0x60>
c00270e5:	89 c8                	mov    eax,ecx
c00270e7:	0d 00 00 00 80       	or     eax,0x80000000
c00270ec:	b9 1f 00 00 00       	mov    ecx,0x1f
c00270f1:	29 d1                	sub    ecx,edx
c00270f3:	d3 e8                	shr    eax,cl
c00270f5:	eb 2e                	jmp    c0027125 <__fixsfsi+0x60>
c00270f7:	31 c0                	xor    eax,eax
c00270f9:	81 c2 81 00 00 00    	add    edx,0x81
c00270ff:	78 24                	js     c0027125 <__fixsfsi+0x60>
c0027101:	83 fa 1e             	cmp    edx,0x1e
c0027104:	7e 09                	jle    c002710f <__fixsfsi+0x4a>
c0027106:	83 fa 1f             	cmp    edx,0x1f
c0027109:	75 18                	jne    c0027123 <__fixsfsi+0x5e>
c002710b:	85 c9                	test   ecx,ecx
c002710d:	75 14                	jne    c0027123 <__fixsfsi+0x5e>
c002710f:	89 c8                	mov    eax,ecx
c0027111:	0d 00 00 00 80       	or     eax,0x80000000
c0027116:	b9 1f 00 00 00       	mov    ecx,0x1f
c002711b:	29 d1                	sub    ecx,edx
c002711d:	d3 e8                	shr    eax,cl
c002711f:	f7 d8                	neg    eax
c0027121:	eb 02                	jmp    c0027125 <__fixsfsi+0x60>
c0027123:	31 c0                	xor    eax,eax
c0027125:	5d                   	pop    ebp
c0027126:	c3                   	ret    

c0027127 <__fixunssfsi>:
c0027127:	55                   	push   ebp
c0027128:	89 e5                	mov    ebp,esp
c002712a:	53                   	push   ebx
c002712b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002712e:	89 d3                	mov    ebx,edx
c0027130:	c1 fb 17             	sar    ebx,0x17
c0027133:	83 eb 7f             	sub    ebx,0x7f
c0027136:	31 c0                	xor    eax,eax
c0027138:	83 fb 1f             	cmp    ebx,0x1f
c002713b:	77 18                	ja     c0027155 <__fixunssfsi+0x2e>
c002713d:	89 d0                	mov    eax,edx
c002713f:	c1 e0 08             	shl    eax,0x8
c0027142:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027147:	0d 00 00 00 80       	or     eax,0x80000000
c002714c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027151:	29 d9                	sub    ecx,ebx
c0027153:	d3 e8                	shr    eax,cl
c0027155:	5b                   	pop    ebx
c0027156:	5d                   	pop    ebp
c0027157:	c3                   	ret    

c0027158 <__cmpsf2>:
c0027158:	55                   	push   ebp
c0027159:	89 e5                	mov    ebp,esp
c002715b:	57                   	push   edi
c002715c:	56                   	push   esi
c002715d:	53                   	push   ebx
c002715e:	83 ec 24             	sub    esp,0x24
c0027161:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027164:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027167:	e8 4f 10 00 00       	call   c00281bb <__truncdfsf2>
c002716c:	5a                   	pop    edx
c002716d:	59                   	pop    ecx
c002716e:	89 c3                	mov    ebx,eax
c0027170:	c1 e8 17             	shr    eax,0x17
c0027173:	0f b6 f0             	movzx  esi,al
c0027176:	89 d8                	mov    eax,ebx
c0027178:	c1 e8 1f             	shr    eax,0x1f
c002717b:	31 c6                	xor    esi,eax
c002717d:	c1 e3 08             	shl    ebx,0x8
c0027180:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027183:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027186:	e8 30 10 00 00       	call   c00281bb <__truncdfsf2>
c002718b:	83 c4 10             	add    esp,0x10
c002718e:	89 c1                	mov    ecx,eax
c0027190:	c1 e9 17             	shr    ecx,0x17
c0027193:	0f b6 c9             	movzx  ecx,cl
c0027196:	89 c7                	mov    edi,eax
c0027198:	c1 ef 1f             	shr    edi,0x1f
c002719b:	89 ca                	mov    edx,ecx
c002719d:	31 fa                	xor    edx,edi
c002719f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271a2:	c1 e0 08             	shl    eax,0x8
c00271a5:	89 c2                	mov    edx,eax
c00271a7:	89 d8                	mov    eax,ebx
c00271a9:	09 d0                	or     eax,edx
c00271ab:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271b0:	09 f0                	or     eax,esi
c00271b2:	75 08                	jne    c00271bc <__cmpsf2+0x64>
c00271b4:	31 c0                	xor    eax,eax
c00271b6:	39 f9                	cmp    ecx,edi
c00271b8:	75 0c                	jne    c00271c6 <__cmpsf2+0x6e>
c00271ba:	eb 29                	jmp    c00271e5 <__cmpsf2+0x8d>
c00271bc:	b8 01 00 00 00       	mov    eax,0x1
c00271c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271c4:	7f 1f                	jg     c00271e5 <__cmpsf2+0x8d>
c00271c6:	83 c8 ff             	or     eax,0xffffffff
c00271c9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271cc:	7c 17                	jl     c00271e5 <__cmpsf2+0x8d>
c00271ce:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271d4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00271da:	b8 01 00 00 00       	mov    eax,0x1
c00271df:	39 d3                	cmp    ebx,edx
c00271e1:	77 02                	ja     c00271e5 <__cmpsf2+0x8d>
c00271e3:	19 c0                	sbb    eax,eax
c00271e5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271e8:	5b                   	pop    ebx
c00271e9:	5e                   	pop    esi
c00271ea:	5f                   	pop    edi
c00271eb:	5d                   	pop    ebp
c00271ec:	c3                   	ret    

c00271ed <__eqsf2>:
c00271ed:	55                   	push   ebp
c00271ee:	89 e5                	mov    ebp,esp
c00271f0:	83 ec 24             	sub    esp,0x24
c00271f3:	6a 01                	push   0x1
c00271f5:	83 ec 0c             	sub    esp,0xc
c00271f8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271fb:	e8 df 10 00 00       	call   c00282df <__extendsfdf2>
c0027200:	83 c4 10             	add    esp,0x10
c0027203:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027206:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027209:	52                   	push   edx
c002720a:	50                   	push   eax
c002720b:	50                   	push   eax
c002720c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002720f:	e8 cb 10 00 00       	call   c00282df <__extendsfdf2>
c0027214:	59                   	pop    ecx
c0027215:	59                   	pop    ecx
c0027216:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027219:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002721c:	52                   	push   edx
c002721d:	50                   	push   eax
c002721e:	e8 35 ff ff ff       	call   c0027158 <__cmpsf2>
c0027223:	83 c4 20             	add    esp,0x20
c0027226:	c9                   	leave  
c0027227:	c3                   	ret    

c0027228 <__nesf2>:
c0027228:	eb c3                	jmp    c00271ed <__eqsf2>

c002722a <__gtsf2>:
c002722a:	55                   	push   ebp
c002722b:	89 e5                	mov    ebp,esp
c002722d:	83 ec 24             	sub    esp,0x24
c0027230:	6a ff                	push   0xffffffff
c0027232:	83 ec 0c             	sub    esp,0xc
c0027235:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027238:	e8 a2 10 00 00       	call   c00282df <__extendsfdf2>
c002723d:	83 c4 10             	add    esp,0x10
c0027240:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027243:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027246:	52                   	push   edx
c0027247:	50                   	push   eax
c0027248:	50                   	push   eax
c0027249:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002724c:	e8 8e 10 00 00       	call   c00282df <__extendsfdf2>
c0027251:	59                   	pop    ecx
c0027252:	59                   	pop    ecx
c0027253:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027256:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027259:	52                   	push   edx
c002725a:	50                   	push   eax
c002725b:	e8 f8 fe ff ff       	call   c0027158 <__cmpsf2>
c0027260:	83 c4 20             	add    esp,0x20
c0027263:	c9                   	leave  
c0027264:	c3                   	ret    

c0027265 <__gesf2>:
c0027265:	eb c3                	jmp    c002722a <__gtsf2>

c0027267 <__ltsf2>:
c0027267:	eb 84                	jmp    c00271ed <__eqsf2>

c0027269 <__lesf2>:
c0027269:	eb 82                	jmp    c00271ed <__eqsf2>

c002726b <__adddf3>:
c002726b:	55                   	push   ebp
c002726c:	89 e5                	mov    ebp,esp
c002726e:	57                   	push   edi
c002726f:	56                   	push   esi
c0027270:	53                   	push   ebx
c0027271:	83 ec 24             	sub    esp,0x24
c0027274:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027277:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002727a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002727d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027280:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027283:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027286:	89 c8                	mov    eax,ecx
c0027288:	89 ce                	mov    esi,ecx
c002728a:	c1 fe 14             	sar    esi,0x14
c002728d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027290:	89 fb                	mov    ebx,edi
c0027292:	89 fa                	mov    edx,edi
c0027294:	c1 e2 0b             	shl    edx,0xb
c0027297:	c1 e0 0b             	shl    eax,0xb
c002729a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002729f:	c1 eb 15             	shr    ebx,0x15
c00272a2:	09 d8                	or     eax,ebx
c00272a4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272a7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272aa:	c1 fe 14             	sar    esi,0x14
c00272ad:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272b0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272b3:	89 f3                	mov    ebx,esi
c00272b5:	c1 e3 0b             	shl    ebx,0xb
c00272b8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00272bb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00272be:	c1 e3 0b             	shl    ebx,0xb
c00272c1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00272c7:	c1 ee 15             	shr    esi,0x15
c00272ca:	09 f3                	or     ebx,esi
c00272cc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00272cf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272d2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00272d5:	0f 88 5f 02 00 00    	js     c002753a <__adddf3+0x2cf>
c00272db:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272de:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00272e1:	85 db                	test   ebx,ebx
c00272e3:	0f 8e c7 00 00 00    	jle    c00273b0 <__adddf3+0x145>
c00272e9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00272f0:	75 1a                	jne    c002730c <__adddf3+0xa1>
c00272f2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00272f5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00272f8:	0f 84 b2 05 00 00    	je     c00278b0 <__adddf3+0x645>
c00272fe:	4b                   	dec    ebx
c00272ff:	75 23                	jne    c0027324 <__adddf3+0xb9>
c0027301:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027304:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027307:	e9 99 00 00 00       	jmp    c00273a5 <__adddf3+0x13a>
c002730c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002730f:	f7 d6                	not    esi
c0027311:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027317:	0f 84 93 05 00 00    	je     c00278b0 <__adddf3+0x645>
c002731d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027324:	83 fb 1f             	cmp    ebx,0x1f
c0027327:	7e 42                	jle    c002736b <__adddf3+0x100>
c0027329:	83 fb 3f             	cmp    ebx,0x3f
c002732c:	0f 8f 7e 05 00 00    	jg     c00278b0 <__adddf3+0x645>
c0027332:	83 e3 1f             	and    ebx,0x1f
c0027335:	89 d9                	mov    ecx,ebx
c0027337:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002733a:	d3 ef                	shr    edi,cl
c002733c:	31 db                	xor    ebx,ebx
c002733e:	85 c9                	test   ecx,ecx
c0027340:	74 15                	je     c0027357 <__adddf3+0xec>
c0027342:	be 20 00 00 00       	mov    esi,0x20
c0027347:	29 ce                	sub    esi,ecx
c0027349:	89 f1                	mov    ecx,esi
c002734b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002734e:	d3 e6                	shl    esi,cl
c0027350:	31 db                	xor    ebx,ebx
c0027352:	85 f6                	test   esi,esi
c0027354:	0f 95 c3             	setne  bl
c0027357:	31 c9                	xor    ecx,ecx
c0027359:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002735d:	0f 95 c1             	setne  cl
c0027360:	09 cf                	or     edi,ecx
c0027362:	09 fb                	or     ebx,edi
c0027364:	01 da                	add    edx,ebx
c0027366:	83 d0 00             	adc    eax,0x0
c0027369:	eb 3a                	jmp    c00273a5 <__adddf3+0x13a>
c002736b:	bf 20 00 00 00       	mov    edi,0x20
c0027370:	29 df                	sub    edi,ebx
c0027372:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027375:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027378:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002737b:	d3 e6                	shl    esi,cl
c002737d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027380:	88 d9                	mov    cl,bl
c0027382:	d3 ef                	shr    edi,cl
c0027384:	09 fe                	or     esi,edi
c0027386:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027389:	88 d9                	mov    cl,bl
c002738b:	d3 ef                	shr    edi,cl
c002738d:	89 fb                	mov    ebx,edi
c002738f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027392:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027395:	d3 e7                	shl    edi,cl
c0027397:	85 ff                	test   edi,edi
c0027399:	0f 95 c1             	setne  cl
c002739c:	0f b6 c9             	movzx  ecx,cl
c002739f:	09 ce                	or     esi,ecx
c00273a1:	01 f2                	add    edx,esi
c00273a3:	11 d8                	adc    eax,ebx
c00273a5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273ab:	e9 52 01 00 00       	jmp    c0027502 <__adddf3+0x297>
c00273b0:	0f 84 d5 00 00 00    	je     c002748b <__adddf3+0x220>
c00273b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273b9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00273bc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273bf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00273c2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273c9:	75 20                	jne    c00273eb <__adddf3+0x180>
c00273cb:	89 d6                	mov    esi,edx
c00273cd:	09 c6                	or     esi,eax
c00273cf:	0f 84 db 04 00 00    	je     c00278b0 <__adddf3+0x645>
c00273d5:	4b                   	dec    ebx
c00273d6:	75 29                	jne    c0027401 <__adddf3+0x196>
c00273d8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273de:	01 d1                	add    ecx,edx
c00273e0:	11 c6                	adc    esi,eax
c00273e2:	89 f0                	mov    eax,esi
c00273e4:	89 ca                	mov    edx,ecx
c00273e6:	e9 17 01 00 00       	jmp    c0027502 <__adddf3+0x297>
c00273eb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00273ee:	f7 d6                	not    esi
c00273f0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00273f6:	0f 84 b4 04 00 00    	je     c00278b0 <__adddf3+0x645>
c00273fc:	0d 00 00 00 80       	or     eax,0x80000000
c0027401:	83 fb 1f             	cmp    ebx,0x1f
c0027404:	7e 48                	jle    c002744e <__adddf3+0x1e3>
c0027406:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027409:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002740c:	83 fb 3f             	cmp    ebx,0x3f
c002740f:	0f 8f 9b 04 00 00    	jg     c00278b0 <__adddf3+0x645>
c0027415:	83 e3 1f             	and    ebx,0x1f
c0027418:	89 d9                	mov    ecx,ebx
c002741a:	89 c7                	mov    edi,eax
c002741c:	d3 ef                	shr    edi,cl
c002741e:	31 db                	xor    ebx,ebx
c0027420:	85 c9                	test   ecx,ecx
c0027422:	74 12                	je     c0027436 <__adddf3+0x1cb>
c0027424:	be 20 00 00 00       	mov    esi,0x20
c0027429:	29 ce                	sub    esi,ecx
c002742b:	89 f1                	mov    ecx,esi
c002742d:	d3 e0                	shl    eax,cl
c002742f:	31 db                	xor    ebx,ebx
c0027431:	85 c0                	test   eax,eax
c0027433:	0f 95 c3             	setne  bl
c0027436:	31 c0                	xor    eax,eax
c0027438:	85 d2                	test   edx,edx
c002743a:	0f 95 c0             	setne  al
c002743d:	09 c7                	or     edi,eax
c002743f:	09 fb                	or     ebx,edi
c0027441:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027444:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027447:	01 da                	add    edx,ebx
c0027449:	83 d6 00             	adc    esi,0x0
c002744c:	eb 39                	jmp    c0027487 <__adddf3+0x21c>
c002744e:	be 20 00 00 00       	mov    esi,0x20
c0027453:	29 de                	sub    esi,ebx
c0027455:	89 c7                	mov    edi,eax
c0027457:	89 f1                	mov    ecx,esi
c0027459:	d3 e7                	shl    edi,cl
c002745b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002745e:	89 d7                	mov    edi,edx
c0027460:	88 d9                	mov    cl,bl
c0027462:	d3 ef                	shr    edi,cl
c0027464:	89 f9                	mov    ecx,edi
c0027466:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027469:	09 cf                	or     edi,ecx
c002746b:	88 d9                	mov    cl,bl
c002746d:	d3 e8                	shr    eax,cl
c002746f:	89 f1                	mov    ecx,esi
c0027471:	d3 e2                	shl    edx,cl
c0027473:	85 d2                	test   edx,edx
c0027475:	0f 95 c2             	setne  dl
c0027478:	0f b6 d2             	movzx  edx,dl
c002747b:	09 d7                	or     edi,edx
c002747d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027480:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027483:	01 fa                	add    edx,edi
c0027485:	11 c6                	adc    esi,eax
c0027487:	89 f0                	mov    eax,esi
c0027489:	eb 77                	jmp    c0027502 <__adddf3+0x297>
c002748b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002748e:	46                   	inc    esi
c002748f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027492:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027498:	75 41                	jne    c00274db <__adddf3+0x270>
c002749a:	89 d3                	mov    ebx,edx
c002749c:	09 c3                	or     ebx,eax
c002749e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274a5:	75 27                	jne    c00274ce <__adddf3+0x263>
c00274a7:	85 db                	test   ebx,ebx
c00274a9:	0f 84 fb 03 00 00    	je     c00278aa <__adddf3+0x63f>
c00274af:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274b2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274b5:	0f 84 f5 03 00 00    	je     c00278b0 <__adddf3+0x645>
c00274bb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274be:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274c1:	85 c0                	test   eax,eax
c00274c3:	0f 89 91 03 00 00    	jns    c002785a <__adddf3+0x5ef>
c00274c9:	e9 85 03 00 00       	jmp    c0027853 <__adddf3+0x5e8>
c00274ce:	85 db                	test   ebx,ebx
c00274d0:	0f 85 da 03 00 00    	jne    c00278b0 <__adddf3+0x645>
c00274d6:	e9 cf 03 00 00       	jmp    c00278aa <__adddf3+0x63f>
c00274db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274e1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00274e4:	f7 d1                	not    ecx
c00274e6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00274ec:	0f 84 70 03 00 00    	je     c0027862 <__adddf3+0x5f7>
c00274f2:	d1 ea                	shr    edx,1
c00274f4:	89 c1                	mov    ecx,eax
c00274f6:	c1 e1 1f             	shl    ecx,0x1f
c00274f9:	09 ca                	or     edx,ecx
c00274fb:	d1 e8                	shr    eax,1
c00274fd:	e9 6f 03 00 00       	jmp    c0027871 <__adddf3+0x606>
c0027502:	85 c0                	test   eax,eax
c0027504:	0f 89 67 03 00 00    	jns    c0027871 <__adddf3+0x606>
c002750a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002750d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027510:	f7 d1                	not    ecx
c0027512:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027518:	0f 84 44 03 00 00    	je     c0027862 <__adddf3+0x5f7>
c002751e:	89 d1                	mov    ecx,edx
c0027520:	d1 e9                	shr    ecx,1
c0027522:	83 e2 01             	and    edx,0x1
c0027525:	09 ca                	or     edx,ecx
c0027527:	89 c1                	mov    ecx,eax
c0027529:	c1 e1 1f             	shl    ecx,0x1f
c002752c:	09 ca                	or     edx,ecx
c002752e:	d1 e8                	shr    eax,1
c0027530:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027535:	e9 37 03 00 00       	jmp    c0027871 <__adddf3+0x606>
c002753a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002753d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027543:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027546:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027549:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002754f:	29 de                	sub    esi,ebx
c0027551:	85 f6                	test   esi,esi
c0027553:	0f 8e bd 00 00 00    	jle    c0027616 <__adddf3+0x3ab>
c0027559:	85 db                	test   ebx,ebx
c002755b:	75 17                	jne    c0027574 <__adddf3+0x309>
c002755d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027560:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027563:	0f 84 47 03 00 00    	je     c00278b0 <__adddf3+0x645>
c0027569:	4e                   	dec    esi
c002756a:	75 20                	jne    c002758c <__adddf3+0x321>
c002756c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002756f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027572:	eb 5b                	jmp    c00275cf <__adddf3+0x364>
c0027574:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027577:	f7 d3                	not    ebx
c0027579:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002757f:	0f 84 2b 03 00 00    	je     c00278b0 <__adddf3+0x645>
c0027585:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002758c:	83 fe 1f             	cmp    esi,0x1f
c002758f:	7e 49                	jle    c00275da <__adddf3+0x36f>
c0027591:	83 fe 3f             	cmp    esi,0x3f
c0027594:	0f 8f 16 03 00 00    	jg     c00278b0 <__adddf3+0x645>
c002759a:	83 e6 1f             	and    esi,0x1f
c002759d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275a0:	89 f1                	mov    ecx,esi
c00275a2:	d3 ef                	shr    edi,cl
c00275a4:	31 db                	xor    ebx,ebx
c00275a6:	85 f6                	test   esi,esi
c00275a8:	74 13                	je     c00275bd <__adddf3+0x352>
c00275aa:	b9 20 00 00 00       	mov    ecx,0x20
c00275af:	29 f1                	sub    ecx,esi
c00275b1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275b4:	d3 e6                	shl    esi,cl
c00275b6:	31 db                	xor    ebx,ebx
c00275b8:	85 f6                	test   esi,esi
c00275ba:	0f 95 c3             	setne  bl
c00275bd:	31 c9                	xor    ecx,ecx
c00275bf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275c3:	0f 95 c1             	setne  cl
c00275c6:	09 cf                	or     edi,ecx
c00275c8:	09 fb                	or     ebx,edi
c00275ca:	29 da                	sub    edx,ebx
c00275cc:	83 d8 00             	sbb    eax,0x0
c00275cf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275d5:	e9 aa 01 00 00       	jmp    c0027784 <__adddf3+0x519>
c00275da:	bf 20 00 00 00       	mov    edi,0x20
c00275df:	29 f7                	sub    edi,esi
c00275e1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275e4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275e7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275ea:	d3 e3                	shl    ebx,cl
c00275ec:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275ef:	89 f1                	mov    ecx,esi
c00275f1:	d3 ef                	shr    edi,cl
c00275f3:	09 fb                	or     ebx,edi
c00275f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275f8:	89 f1                	mov    ecx,esi
c00275fa:	d3 ef                	shr    edi,cl
c00275fc:	89 fe                	mov    esi,edi
c00275fe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027601:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027604:	d3 e7                	shl    edi,cl
c0027606:	85 ff                	test   edi,edi
c0027608:	0f 95 c1             	setne  cl
c002760b:	0f b6 c9             	movzx  ecx,cl
c002760e:	09 cb                	or     ebx,ecx
c0027610:	29 da                	sub    edx,ebx
c0027612:	19 f0                	sbb    eax,esi
c0027614:	eb b9                	jmp    c00275cf <__adddf3+0x364>
c0027616:	0f 84 cd 00 00 00    	je     c00276e9 <__adddf3+0x47e>
c002761c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002761f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027622:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027625:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027629:	75 1b                	jne    c0027646 <__adddf3+0x3db>
c002762b:	89 d6                	mov    esi,edx
c002762d:	09 c6                	or     esi,eax
c002762f:	0f 84 7b 02 00 00    	je     c00278b0 <__adddf3+0x645>
c0027635:	4b                   	dec    ebx
c0027636:	75 24                	jne    c002765c <__adddf3+0x3f1>
c0027638:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002763b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002763e:	29 d1                	sub    ecx,edx
c0027640:	19 c6                	sbb    esi,eax
c0027642:	89 ca                	mov    edx,ecx
c0027644:	eb 61                	jmp    c00276a7 <__adddf3+0x43c>
c0027646:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027649:	f7 d6                	not    esi
c002764b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027651:	0f 84 59 02 00 00    	je     c00278b0 <__adddf3+0x645>
c0027657:	0d 00 00 00 80       	or     eax,0x80000000
c002765c:	83 fb 1f             	cmp    ebx,0x1f
c002765f:	7e 4d                	jle    c00276ae <__adddf3+0x443>
c0027661:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027664:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027667:	83 fb 3f             	cmp    ebx,0x3f
c002766a:	0f 8f 40 02 00 00    	jg     c00278b0 <__adddf3+0x645>
c0027670:	83 e3 1f             	and    ebx,0x1f
c0027673:	89 d9                	mov    ecx,ebx
c0027675:	89 c7                	mov    edi,eax
c0027677:	d3 ef                	shr    edi,cl
c0027679:	31 db                	xor    ebx,ebx
c002767b:	85 c9                	test   ecx,ecx
c002767d:	74 12                	je     c0027691 <__adddf3+0x426>
c002767f:	be 20 00 00 00       	mov    esi,0x20
c0027684:	29 ce                	sub    esi,ecx
c0027686:	89 f1                	mov    ecx,esi
c0027688:	d3 e0                	shl    eax,cl
c002768a:	31 db                	xor    ebx,ebx
c002768c:	85 c0                	test   eax,eax
c002768e:	0f 95 c3             	setne  bl
c0027691:	31 c0                	xor    eax,eax
c0027693:	85 d2                	test   edx,edx
c0027695:	0f 95 c0             	setne  al
c0027698:	09 c7                	or     edi,eax
c002769a:	09 fb                	or     ebx,edi
c002769c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002769f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276a2:	29 da                	sub    edx,ebx
c00276a4:	83 de 00             	sbb    esi,0x0
c00276a7:	89 f0                	mov    eax,esi
c00276a9:	e9 d6 00 00 00       	jmp    c0027784 <__adddf3+0x519>
c00276ae:	be 20 00 00 00       	mov    esi,0x20
c00276b3:	29 de                	sub    esi,ebx
c00276b5:	89 c7                	mov    edi,eax
c00276b7:	89 f1                	mov    ecx,esi
c00276b9:	d3 e7                	shl    edi,cl
c00276bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276be:	89 d7                	mov    edi,edx
c00276c0:	88 d9                	mov    cl,bl
c00276c2:	d3 ef                	shr    edi,cl
c00276c4:	89 f9                	mov    ecx,edi
c00276c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c9:	09 cf                	or     edi,ecx
c00276cb:	88 d9                	mov    cl,bl
c00276cd:	d3 e8                	shr    eax,cl
c00276cf:	89 f1                	mov    ecx,esi
c00276d1:	d3 e2                	shl    edx,cl
c00276d3:	85 d2                	test   edx,edx
c00276d5:	0f 95 c2             	setne  dl
c00276d8:	0f b6 d2             	movzx  edx,dl
c00276db:	09 d7                	or     edi,edx
c00276dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276e3:	29 fa                	sub    edx,edi
c00276e5:	19 c6                	sbb    esi,eax
c00276e7:	eb be                	jmp    c00276a7 <__adddf3+0x43c>
c00276e9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c00276ef:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00276f5:	75 6a                	jne    c0027761 <__adddf3+0x4f6>
c00276f7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00276fb:	75 58                	jne    c0027755 <__adddf3+0x4ea>
c00276fd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027700:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027703:	89 d6                	mov    esi,edx
c0027705:	09 c6                	or     esi,eax
c0027707:	75 17                	jne    c0027720 <__adddf3+0x4b5>
c0027709:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002770c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002770f:	85 db                	test   ebx,ebx
c0027711:	0f 85 99 01 00 00    	jne    c00278b0 <__adddf3+0x645>
c0027717:	31 ff                	xor    edi,edi
c0027719:	31 c9                	xor    ecx,ecx
c002771b:	e9 90 01 00 00       	jmp    c00278b0 <__adddf3+0x645>
c0027720:	85 db                	test   ebx,ebx
c0027722:	0f 84 88 01 00 00    	je     c00278b0 <__adddf3+0x645>
c0027728:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002772b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002772e:	85 c0                	test   eax,eax
c0027730:	79 10                	jns    c0027742 <__adddf3+0x4d7>
c0027732:	31 c9                	xor    ecx,ecx
c0027734:	f7 da                	neg    edx
c0027736:	0f 95 c1             	setne  cl
c0027739:	01 c8                	add    eax,ecx
c002773b:	f7 d8                	neg    eax
c002773d:	e9 2f 01 00 00       	jmp    c0027871 <__adddf3+0x606>
c0027742:	31 ff                	xor    edi,edi
c0027744:	31 c9                	xor    ecx,ecx
c0027746:	89 c3                	mov    ebx,eax
c0027748:	09 d3                	or     ebx,edx
c002774a:	0f 84 60 01 00 00    	je     c00278b0 <__adddf3+0x645>
c0027750:	e9 05 01 00 00       	jmp    c002785a <__adddf3+0x5ef>
c0027755:	31 ff                	xor    edi,edi
c0027757:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002775c:	e9 4f 01 00 00       	jmp    c00278b0 <__adddf3+0x645>
c0027761:	89 c1                	mov    ecx,eax
c0027763:	89 d0                	mov    eax,edx
c0027765:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027768:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002776b:	89 ca                	mov    edx,ecx
c002776d:	85 c9                	test   ecx,ecx
c002776f:	79 2c                	jns    c002779d <__adddf3+0x532>
c0027771:	31 c9                	xor    ecx,ecx
c0027773:	f7 d8                	neg    eax
c0027775:	0f 95 c1             	setne  cl
c0027778:	01 ca                	add    edx,ecx
c002777a:	f7 da                	neg    edx
c002777c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002777f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027782:	eb 19                	jmp    c002779d <__adddf3+0x532>
c0027784:	85 c0                	test   eax,eax
c0027786:	0f 89 e5 00 00 00    	jns    c0027871 <__adddf3+0x606>
c002778c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027791:	89 c1                	mov    ecx,eax
c0027793:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027796:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027799:	89 d0                	mov    eax,edx
c002779b:	89 ca                	mov    edx,ecx
c002779d:	85 d2                	test   edx,edx
c002779f:	74 59                	je     c00277fa <__adddf3+0x58f>
c00277a1:	0f bd da             	bsr    ebx,edx
c00277a4:	83 f3 1f             	xor    ebx,0x1f
c00277a7:	88 d9                	mov    cl,bl
c00277a9:	d3 e2                	shl    edx,cl
c00277ab:	bf 20 00 00 00       	mov    edi,0x20
c00277b0:	89 f9                	mov    ecx,edi
c00277b2:	29 d9                	sub    ecx,ebx
c00277b4:	89 c6                	mov    esi,eax
c00277b6:	d3 ee                	shr    esi,cl
c00277b8:	09 d6                	or     esi,edx
c00277ba:	88 d9                	mov    cl,bl
c00277bc:	d3 e0                	shl    eax,cl
c00277be:	89 c2                	mov    edx,eax
c00277c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277c3:	25 ff 07 00 00       	and    eax,0x7ff
c00277c8:	39 d8                	cmp    eax,ebx
c00277ca:	7f 22                	jg     c00277ee <__adddf3+0x583>
c00277cc:	29 c3                	sub    ebx,eax
c00277ce:	43                   	inc    ebx
c00277cf:	88 d9                	mov    cl,bl
c00277d1:	d3 ea                	shr    edx,cl
c00277d3:	29 df                	sub    edi,ebx
c00277d5:	89 f9                	mov    ecx,edi
c00277d7:	89 f0                	mov    eax,esi
c00277d9:	d3 e0                	shl    eax,cl
c00277db:	09 c2                	or     edx,eax
c00277dd:	89 f0                	mov    eax,esi
c00277df:	88 d9                	mov    cl,bl
c00277e1:	d3 e8                	shr    eax,cl
c00277e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277e6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00277ec:	eb 6f                	jmp    c002785d <__adddf3+0x5f2>
c00277ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277f1:	29 d8                	sub    eax,ebx
c00277f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277f6:	89 f0                	mov    eax,esi
c00277f8:	eb 59                	jmp    c0027853 <__adddf3+0x5e8>
c00277fa:	85 c0                	test   eax,eax
c00277fc:	74 6a                	je     c0027868 <__adddf3+0x5fd>
c00277fe:	0f bd c8             	bsr    ecx,eax
c0027801:	83 f1 1f             	xor    ecx,0x1f
c0027804:	d3 e0                	shl    eax,cl
c0027806:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027809:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002780f:	83 c1 20             	add    ecx,0x20
c0027812:	39 cb                	cmp    ebx,ecx
c0027814:	7f 35                	jg     c002784b <__adddf3+0x5e0>
c0027816:	29 d9                	sub    ecx,ebx
c0027818:	8d 71 01             	lea    esi,[ecx+0x1]
c002781b:	83 fe 1f             	cmp    esi,0x1f
c002781e:	7e 09                	jle    c0027829 <__adddf3+0x5be>
c0027820:	83 e9 1f             	sub    ecx,0x1f
c0027823:	d3 e8                	shr    eax,cl
c0027825:	89 c3                	mov    ebx,eax
c0027827:	eb 11                	jmp    c002783a <__adddf3+0x5cf>
c0027829:	b9 20 00 00 00       	mov    ecx,0x20
c002782e:	29 f1                	sub    ecx,esi
c0027830:	89 c3                	mov    ebx,eax
c0027832:	d3 e3                	shl    ebx,cl
c0027834:	89 f1                	mov    ecx,esi
c0027836:	d3 e8                	shr    eax,cl
c0027838:	89 c2                	mov    edx,eax
c002783a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002783d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027842:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027845:	89 d0                	mov    eax,edx
c0027847:	89 da                	mov    edx,ebx
c0027849:	eb 26                	jmp    c0027871 <__adddf3+0x606>
c002784b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002784e:	29 cf                	sub    edi,ecx
c0027850:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027853:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027858:	eb 17                	jmp    c0027871 <__adddf3+0x606>
c002785a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002785d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027860:	eb 0f                	jmp    c0027871 <__adddf3+0x606>
c0027862:	31 d2                	xor    edx,edx
c0027864:	31 c0                	xor    eax,eax
c0027866:	eb 09                	jmp    c0027871 <__adddf3+0x606>
c0027868:	89 c2                	mov    edx,eax
c002786a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027871:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027874:	c1 e1 14             	shl    ecx,0x14
c0027877:	89 c3                	mov    ebx,eax
c0027879:	c1 eb 0b             	shr    ebx,0xb
c002787c:	09 d9                	or     ecx,ebx
c002787e:	89 d3                	mov    ebx,edx
c0027880:	c1 eb 0b             	shr    ebx,0xb
c0027883:	c1 e0 15             	shl    eax,0x15
c0027886:	09 d8                	or     eax,ebx
c0027888:	89 c7                	mov    edi,eax
c002788a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027890:	0f 95 c0             	setne  al
c0027893:	89 c6                	mov    esi,eax
c0027895:	09 f3                	or     ebx,esi
c0027897:	83 e3 01             	and    ebx,0x1
c002789a:	c1 ea 0a             	shr    edx,0xa
c002789d:	21 da                	and    edx,ebx
c002789f:	89 f8                	mov    eax,edi
c00278a1:	01 d0                	add    eax,edx
c00278a3:	83 d1 00             	adc    ecx,0x0
c00278a6:	89 c7                	mov    edi,eax
c00278a8:	eb 06                	jmp    c00278b0 <__adddf3+0x645>
c00278aa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278b0:	89 f8                	mov    eax,edi
c00278b2:	89 ca                	mov    edx,ecx
c00278b4:	83 c4 24             	add    esp,0x24
c00278b7:	5b                   	pop    ebx
c00278b8:	5e                   	pop    esi
c00278b9:	5f                   	pop    edi
c00278ba:	5d                   	pop    ebp
c00278bb:	c3                   	ret    

c00278bc <__subdf3>:
c00278bc:	55                   	push   ebp
c00278bd:	89 e5                	mov    ebp,esp
c00278bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00278c5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278cb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00278ce:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00278d1:	5d                   	pop    ebp
c00278d2:	e9 94 f9 ff ff       	jmp    c002726b <__adddf3>

c00278d7 <__negdf2>:
c00278d7:	55                   	push   ebp
c00278d8:	89 e5                	mov    ebp,esp
c00278da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00278dd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00278e0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278e6:	5d                   	pop    ebp
c00278e7:	c3                   	ret    

c00278e8 <__muldf3>:
c00278e8:	55                   	push   ebp
c00278e9:	89 e5                	mov    ebp,esp
c00278eb:	57                   	push   edi
c00278ec:	56                   	push   esi
c00278ed:	53                   	push   ebx
c00278ee:	83 ec 24             	sub    esp,0x24
c00278f1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00278f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278fd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027900:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027903:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027906:	89 c8                	mov    eax,ecx
c0027908:	c1 f8 14             	sar    eax,0x14
c002790b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002790e:	89 f8                	mov    eax,edi
c0027910:	89 fb                	mov    ebx,edi
c0027912:	c1 e3 0b             	shl    ebx,0xb
c0027915:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027918:	c1 e1 0b             	shl    ecx,0xb
c002791b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027921:	c1 e8 15             	shr    eax,0x15
c0027924:	09 c1                	or     ecx,eax
c0027926:	89 d6                	mov    esi,edx
c0027928:	89 d0                	mov    eax,edx
c002792a:	c1 f8 14             	sar    eax,0x14
c002792d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027930:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027933:	89 c3                	mov    ebx,eax
c0027935:	c1 e3 0b             	shl    ebx,0xb
c0027938:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002793b:	c1 e6 0b             	shl    esi,0xb
c002793e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027944:	c1 e8 15             	shr    eax,0x15
c0027947:	09 c6                	or     esi,eax
c0027949:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002794c:	25 ff 07 00 00       	and    eax,0x7ff
c0027951:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027954:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027957:	25 ff 07 00 00       	and    eax,0x7ff
c002795c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002795f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027962:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027965:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002796c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002796f:	40                   	inc    eax
c0027970:	a9 fe 07 00 00       	test   eax,0x7fe
c0027975:	0f 85 8d 00 00 00    	jne    c0027a08 <__muldf3+0x120>
c002797b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002797e:	09 c8                	or     eax,ecx
c0027980:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027984:	74 44                	je     c00279ca <__muldf3+0xe2>
c0027986:	85 c0                	test   eax,eax
c0027988:	0f 85 31 02 00 00    	jne    c0027bbf <__muldf3+0x2d7>
c002798e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027991:	40                   	inc    eax
c0027992:	a9 fe 07 00 00       	test   eax,0x7fe
c0027997:	75 13                	jne    c00279ac <__muldf3+0xc4>
c0027999:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002799c:	09 f1                	or     ecx,esi
c002799e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279a2:	74 22                	je     c00279c6 <__muldf3+0xde>
c00279a4:	85 c9                	test   ecx,ecx
c00279a6:	0f 85 0d 02 00 00    	jne    c0027bb9 <__muldf3+0x2d1>
c00279ac:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00279b0:	0f 89 09 02 00 00    	jns    c0027bbf <__muldf3+0x2d7>
c00279b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279b9:	05 00 00 00 80       	add    eax,0x80000000
c00279be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279c1:	e9 f9 01 00 00       	jmp    c0027bbf <__muldf3+0x2d7>
c00279c6:	85 c9                	test   ecx,ecx
c00279c8:	eb 2e                	jmp    c00279f8 <__muldf3+0x110>
c00279ca:	85 c0                	test   eax,eax
c00279cc:	74 20                	je     c00279ee <__muldf3+0x106>
c00279ce:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00279d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279d4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279d7:	c1 ef 1f             	shr    edi,0x1f
c00279da:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00279dd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00279e0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00279e3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279e6:	09 f9                	or     ecx,edi
c00279e8:	78 1e                	js     c0027a08 <__muldf3+0x120>
c00279ea:	89 c3                	mov    ebx,eax
c00279ec:	eb e0                	jmp    c00279ce <__muldf3+0xe6>
c00279ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279f1:	f7 d0                	not    eax
c00279f3:	a9 ff 07 00 00       	test   eax,0x7ff
c00279f8:	75 b2                	jne    c00279ac <__muldf3+0xc4>
c00279fa:	31 ff                	xor    edi,edi
c00279fc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a03:	e9 b7 01 00 00       	jmp    c0027bbf <__muldf3+0x2d7>
c0027a08:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a0b:	40                   	inc    eax
c0027a0c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a11:	75 57                	jne    c0027a6a <__muldf3+0x182>
c0027a13:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a16:	09 f0                	or     eax,esi
c0027a18:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a1c:	74 23                	je     c0027a41 <__muldf3+0x159>
c0027a1e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a22:	0f 89 91 01 00 00    	jns    c0027bb9 <__muldf3+0x2d1>
c0027a28:	85 c0                	test   eax,eax
c0027a2a:	0f 85 89 01 00 00    	jne    c0027bb9 <__muldf3+0x2d1>
c0027a30:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a33:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a39:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a3c:	e9 7e 01 00 00       	jmp    c0027bbf <__muldf3+0x2d7>
c0027a41:	85 c0                	test   eax,eax
c0027a43:	75 0c                	jne    c0027a51 <__muldf3+0x169>
c0027a45:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a49:	0f 89 6a 01 00 00    	jns    c0027bb9 <__muldf3+0x2d1>
c0027a4f:	eb df                	jmp    c0027a30 <__muldf3+0x148>
c0027a51:	01 f6                	add    esi,esi
c0027a53:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a56:	c1 ea 1f             	shr    edx,0x1f
c0027a59:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a5c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a62:	09 d6                	or     esi,edx
c0027a64:	78 04                	js     c0027a6a <__muldf3+0x182>
c0027a66:	89 c3                	mov    ebx,eax
c0027a68:	eb e7                	jmp    c0027a51 <__muldf3+0x169>
c0027a6a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027a70:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a76:	89 c8                	mov    eax,ecx
c0027a78:	f7 e6                	mul    esi
c0027a7a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027a7d:	89 c7                	mov    edi,eax
c0027a7f:	89 c8                	mov    eax,ecx
c0027a81:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027a84:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027a87:	89 c1                	mov    ecx,eax
c0027a89:	89 f0                	mov    eax,esi
c0027a8b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027a8e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027a91:	89 c6                	mov    esi,eax
c0027a93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a96:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027a99:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a9c:	31 c0                	xor    eax,eax
c0027a9e:	01 f1                	add    ecx,esi
c0027aa0:	0f 92 c0             	setb   al
c0027aa3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027aa6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027aa9:	83 d6 00             	adc    esi,0x0
c0027aac:	01 c7                	add    edi,eax
c0027aae:	83 d6 00             	adc    esi,0x0
c0027ab1:	01 ca                	add    edx,ecx
c0027ab3:	0f 92 c1             	setb   cl
c0027ab6:	0f b6 c9             	movzx  ecx,cl
c0027ab9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027abc:	83 d6 00             	adc    esi,0x0
c0027abf:	01 cf                	add    edi,ecx
c0027ac1:	83 d6 00             	adc    esi,0x0
c0027ac4:	31 c9                	xor    ecx,ecx
c0027ac6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ac9:	0f 95 c1             	setne  cl
c0027acc:	09 cf                	or     edi,ecx
c0027ace:	85 f6                	test   esi,esi
c0027ad0:	78 0c                	js     c0027ade <__muldf3+0x1f6>
c0027ad2:	01 f6                	add    esi,esi
c0027ad4:	89 f8                	mov    eax,edi
c0027ad6:	c1 e8 1f             	shr    eax,0x1f
c0027ad9:	09 c6                	or     esi,eax
c0027adb:	01 ff                	add    edi,edi
c0027add:	4b                   	dec    ebx
c0027ade:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ae4:	0f 8f 85 00 00 00    	jg     c0027b6f <__muldf3+0x287>
c0027aea:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027af0:	85 db                	test   ebx,ebx
c0027af2:	0f 8f 84 00 00 00    	jg     c0027b7c <__muldf3+0x294>
c0027af8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027afb:	7c 79                	jl     c0027b76 <__muldf3+0x28e>
c0027afd:	ba 01 00 00 00       	mov    edx,0x1
c0027b02:	29 da                	sub    edx,ebx
c0027b04:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b0a:	83 fa 1f             	cmp    edx,0x1f
c0027b0d:	7e 30                	jle    c0027b3f <__muldf3+0x257>
c0027b0f:	83 fa 20             	cmp    edx,0x20
c0027b12:	75 0b                	jne    c0027b1f <__muldf3+0x237>
c0027b14:	31 c0                	xor    eax,eax
c0027b16:	85 ff                	test   edi,edi
c0027b18:	0f 95 c0             	setne  al
c0027b1b:	89 c7                	mov    edi,eax
c0027b1d:	eb 1a                	jmp    c0027b39 <__muldf3+0x251>
c0027b1f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b22:	89 f0                	mov    eax,esi
c0027b24:	d3 e0                	shl    eax,cl
c0027b26:	09 f8                	or     eax,edi
c0027b28:	0f 95 c0             	setne  al
c0027b2b:	0f b6 c0             	movzx  eax,al
c0027b2e:	89 c7                	mov    edi,eax
c0027b30:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b35:	29 d9                	sub    ecx,ebx
c0027b37:	d3 ee                	shr    esi,cl
c0027b39:	09 f7                	or     edi,esi
c0027b3b:	31 db                	xor    ebx,ebx
c0027b3d:	eb 3b                	jmp    c0027b7a <__muldf3+0x292>
c0027b3f:	83 c3 1f             	add    ebx,0x1f
c0027b42:	89 f0                	mov    eax,esi
c0027b44:	88 d9                	mov    cl,bl
c0027b46:	d3 e0                	shl    eax,cl
c0027b48:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b4b:	89 f8                	mov    eax,edi
c0027b4d:	88 d1                	mov    cl,dl
c0027b4f:	d3 e8                	shr    eax,cl
c0027b51:	89 c1                	mov    ecx,eax
c0027b53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b56:	09 c8                	or     eax,ecx
c0027b58:	88 d9                	mov    cl,bl
c0027b5a:	d3 e7                	shl    edi,cl
c0027b5c:	31 db                	xor    ebx,ebx
c0027b5e:	85 ff                	test   edi,edi
c0027b60:	0f 95 c3             	setne  bl
c0027b63:	89 df                	mov    edi,ebx
c0027b65:	09 c7                	or     edi,eax
c0027b67:	88 d1                	mov    cl,dl
c0027b69:	d3 ee                	shr    esi,cl
c0027b6b:	31 db                	xor    ebx,ebx
c0027b6d:	eb 0d                	jmp    c0027b7c <__muldf3+0x294>
c0027b6f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027b74:	eb 02                	jmp    c0027b78 <__muldf3+0x290>
c0027b76:	31 db                	xor    ebx,ebx
c0027b78:	31 ff                	xor    edi,edi
c0027b7a:	31 f6                	xor    esi,esi
c0027b7c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b7f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027b82:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b87:	09 c3                	or     ebx,eax
c0027b89:	c1 e3 14             	shl    ebx,0x14
c0027b8c:	89 f0                	mov    eax,esi
c0027b8e:	c1 e8 0b             	shr    eax,0xb
c0027b91:	09 c3                	or     ebx,eax
c0027b93:	89 f8                	mov    eax,edi
c0027b95:	c1 e8 0b             	shr    eax,0xb
c0027b98:	c1 e6 15             	shl    esi,0x15
c0027b9b:	09 c6                	or     esi,eax
c0027b9d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ba3:	0f 95 c1             	setne  cl
c0027ba6:	09 c8                	or     eax,ecx
c0027ba8:	83 e0 01             	and    eax,0x1
c0027bab:	c1 ef 0a             	shr    edi,0xa
c0027bae:	21 c7                	and    edi,eax
c0027bb0:	01 f7                	add    edi,esi
c0027bb2:	83 d3 00             	adc    ebx,0x0
c0027bb5:	89 da                	mov    edx,ebx
c0027bb7:	eb 03                	jmp    c0027bbc <__muldf3+0x2d4>
c0027bb9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bbc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027bbf:	89 f8                	mov    eax,edi
c0027bc1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027bc4:	83 c4 24             	add    esp,0x24
c0027bc7:	5b                   	pop    ebx
c0027bc8:	5e                   	pop    esi
c0027bc9:	5f                   	pop    edi
c0027bca:	5d                   	pop    ebp
c0027bcb:	c3                   	ret    

c0027bcc <__divdf3>:
c0027bcc:	55                   	push   ebp
c0027bcd:	89 e5                	mov    ebp,esp
c0027bcf:	57                   	push   edi
c0027bd0:	56                   	push   esi
c0027bd1:	53                   	push   ebx
c0027bd2:	83 ec 2c             	sub    esp,0x2c
c0027bd5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bd8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bdb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bde:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027be1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027be4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027be7:	89 ce                	mov    esi,ecx
c0027be9:	89 c8                	mov    eax,ecx
c0027beb:	c1 f8 14             	sar    eax,0x14
c0027bee:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027bf1:	89 f8                	mov    eax,edi
c0027bf3:	89 fb                	mov    ebx,edi
c0027bf5:	c1 e3 0b             	shl    ebx,0xb
c0027bf8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027bfb:	c1 e6 0b             	shl    esi,0xb
c0027bfe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c04:	c1 e8 15             	shr    eax,0x15
c0027c07:	09 c6                	or     esi,eax
c0027c09:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c0c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c0f:	89 c2                	mov    edx,eax
c0027c11:	c1 fa 14             	sar    edx,0x14
c0027c14:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c17:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c1a:	89 de                	mov    esi,ebx
c0027c1c:	c1 e6 0b             	shl    esi,0xb
c0027c1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c22:	c1 e0 0b             	shl    eax,0xb
c0027c25:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c2a:	c1 eb 15             	shr    ebx,0x15
c0027c2d:	09 d8                	or     eax,ebx
c0027c2f:	89 c2                	mov    edx,eax
c0027c31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c34:	25 ff 07 00 00       	and    eax,0x7ff
c0027c39:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c3c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c3f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c45:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c48:	29 d8                	sub    eax,ebx
c0027c4a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c4f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c52:	46                   	inc    esi
c0027c53:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c59:	0f 85 a5 00 00 00    	jne    c0027d04 <__divdf3+0x138>
c0027c5f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c62:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027c65:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027c69:	74 2a                	je     c0027c95 <__divdf3+0xc9>
c0027c6b:	85 f6                	test   esi,esi
c0027c6d:	0f 85 cc 02 00 00    	jne    c0027f3f <__divdf3+0x373>
c0027c73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c76:	40                   	inc    eax
c0027c77:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c7c:	75 26                	jne    c0027ca4 <__divdf3+0xd8>
c0027c7e:	85 db                	test   ebx,ebx
c0027c80:	74 22                	je     c0027ca4 <__divdf3+0xd8>
c0027c82:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c85:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c88:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c8b:	09 d0                	or     eax,edx
c0027c8d:	0f 85 ac 02 00 00    	jne    c0027f3f <__divdf3+0x373>
c0027c93:	eb 63                	jmp    c0027cf8 <__divdf3+0x12c>
c0027c95:	85 f6                	test   esi,esi
c0027c97:	75 22                	jne    c0027cbb <__divdf3+0xef>
c0027c99:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c9c:	40                   	inc    eax
c0027c9d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ca2:	74 36                	je     c0027cda <__divdf3+0x10e>
c0027ca4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ca8:	0f 89 91 02 00 00    	jns    c0027f3f <__divdf3+0x373>
c0027cae:	89 f8                	mov    eax,edi
c0027cb0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cb6:	e9 80 02 00 00       	jmp    c0027f3b <__divdf3+0x36f>
c0027cbb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cbe:	01 f6                	add    esi,esi
c0027cc0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cc3:	c1 ef 1f             	shr    edi,0x1f
c0027cc6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cc9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027ccc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027ccf:	09 f7                	or     edi,esi
c0027cd1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027cd4:	78 2e                	js     c0027d04 <__divdf3+0x138>
c0027cd6:	89 c8                	mov    eax,ecx
c0027cd8:	eb e1                	jmp    c0027cbb <__divdf3+0xef>
c0027cda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cdd:	09 d0                	or     eax,edx
c0027cdf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ce3:	74 0f                	je     c0027cf4 <__divdf3+0x128>
c0027ce5:	85 c0                	test   eax,eax
c0027ce7:	74 bb                	je     c0027ca4 <__divdf3+0xd8>
c0027ce9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cec:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027cef:	e9 4b 02 00 00       	jmp    c0027f3f <__divdf3+0x373>
c0027cf4:	85 c0                	test   eax,eax
c0027cf6:	75 ac                	jne    c0027ca4 <__divdf3+0xd8>
c0027cf8:	31 ff                	xor    edi,edi
c0027cfa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027cff:	e9 3b 02 00 00       	jmp    c0027f3f <__divdf3+0x373>
c0027d04:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d07:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d0a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d10:	75 6b                	jne    c0027d7d <__divdf3+0x1b1>
c0027d12:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d15:	09 d6                	or     esi,edx
c0027d17:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d1b:	74 28                	je     c0027d45 <__divdf3+0x179>
c0027d1d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d20:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d23:	85 f6                	test   esi,esi
c0027d25:	0f 85 14 02 00 00    	jne    c0027f3f <__divdf3+0x373>
c0027d2b:	31 ff                	xor    edi,edi
c0027d2d:	31 c9                	xor    ecx,ecx
c0027d2f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d32:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d35:	0f 89 04 02 00 00    	jns    c0027f3f <__divdf3+0x373>
c0027d3b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d40:	e9 fa 01 00 00       	jmp    c0027f3f <__divdf3+0x373>
c0027d45:	85 f6                	test   esi,esi
c0027d47:	75 1b                	jne    c0027d64 <__divdf3+0x198>
c0027d49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d4c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d4f:	25 00 00 00 80       	and    eax,0x80000000
c0027d54:	31 c9                	xor    ecx,ecx
c0027d56:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d5b:	89 cf                	mov    edi,ecx
c0027d5d:	89 c1                	mov    ecx,eax
c0027d5f:	e9 db 01 00 00       	jmp    c0027f3f <__divdf3+0x373>
c0027d64:	01 d2                	add    edx,edx
c0027d66:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d69:	c1 eb 1f             	shr    ebx,0x1f
c0027d6c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d6f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027d72:	8d 48 01             	lea    ecx,[eax+0x1]
c0027d75:	09 da                	or     edx,ebx
c0027d77:	78 04                	js     c0027d7d <__divdf3+0x1b1>
c0027d79:	89 c8                	mov    eax,ecx
c0027d7b:	eb e7                	jmp    c0027d64 <__divdf3+0x198>
c0027d7d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d80:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d86:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d8c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027d8f:	39 d6                	cmp    esi,edx
c0027d91:	77 0d                	ja     c0027da0 <__divdf3+0x1d4>
c0027d93:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027d96:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027d99:	72 1b                	jb     c0027db6 <__divdf3+0x1ea>
c0027d9b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027d9e:	75 16                	jne    c0027db6 <__divdf3+0x1ea>
c0027da0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027da3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027da6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027da9:	83 de 00             	sbb    esi,0x0
c0027dac:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027daf:	ba 01 00 00 00       	mov    edx,0x1
c0027db4:	eb 02                	jmp    c0027db8 <__divdf3+0x1ec>
c0027db6:	31 d2                	xor    edx,edx
c0027db8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027dbf:	31 ff                	xor    edi,edi
c0027dc1:	01 ff                	add    edi,edi
c0027dc3:	89 d1                	mov    ecx,edx
c0027dc5:	c1 e9 1f             	shr    ecx,0x1f
c0027dc8:	09 cf                	or     edi,ecx
c0027dca:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027dcd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027dd0:	89 da                	mov    edx,ebx
c0027dd2:	89 f3                	mov    ebx,esi
c0027dd4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027dd7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dda:	c1 e9 1f             	shr    ecx,0x1f
c0027ddd:	09 ce                	or     esi,ecx
c0027ddf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027de2:	01 c9                	add    ecx,ecx
c0027de4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027de7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027dea:	85 db                	test   ebx,ebx
c0027dec:	78 29                	js     c0027e17 <__divdf3+0x24b>
c0027dee:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027df1:	72 07                	jb     c0027dfa <__divdf3+0x22e>
c0027df3:	75 3c                	jne    c0027e31 <__divdf3+0x265>
c0027df5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027df8:	77 37                	ja     c0027e31 <__divdf3+0x265>
c0027dfa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027dfd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e00:	31 d2                	xor    edx,edx
c0027e02:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e05:	0f 97 c2             	seta   dl
c0027e08:	29 d6                	sub    esi,edx
c0027e0a:	89 d9                	mov    ecx,ebx
c0027e0c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e0f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e12:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e15:	eb 17                	jmp    c0027e2e <__divdf3+0x262>
c0027e17:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e1a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e1d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e20:	0f 97 c1             	seta   cl
c0027e23:	0f b6 c9             	movzx  ecx,cl
c0027e26:	29 ce                	sub    esi,ecx
c0027e28:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e2b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e2e:	83 ca 01             	or     edx,0x1
c0027e31:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e34:	75 8b                	jne    c0027dc1 <__divdf3+0x1f5>
c0027e36:	c1 e7 09             	shl    edi,0x9
c0027e39:	89 d1                	mov    ecx,edx
c0027e3b:	c1 e9 17             	shr    ecx,0x17
c0027e3e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e41:	09 f3                	or     ebx,esi
c0027e43:	0f 95 c3             	setne  bl
c0027e46:	0f b6 db             	movzx  ebx,bl
c0027e49:	c1 e2 09             	shl    edx,0x9
c0027e4c:	09 d3                	or     ebx,edx
c0027e4e:	89 ca                	mov    edx,ecx
c0027e50:	09 fa                	or     edx,edi
c0027e52:	78 0c                	js     c0027e60 <__divdf3+0x294>
c0027e54:	01 d2                	add    edx,edx
c0027e56:	89 d9                	mov    ecx,ebx
c0027e58:	c1 e9 1f             	shr    ecx,0x1f
c0027e5b:	09 ca                	or     edx,ecx
c0027e5d:	01 db                	add    ebx,ebx
c0027e5f:	48                   	dec    eax
c0027e60:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027e65:	0f 8f 83 00 00 00    	jg     c0027eee <__divdf3+0x322>
c0027e6b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027e71:	85 c0                	test   eax,eax
c0027e73:	0f 8f 82 00 00 00    	jg     c0027efb <__divdf3+0x32f>
c0027e79:	83 f8 cc             	cmp    eax,0xffffffcc
c0027e7c:	7c 77                	jl     c0027ef5 <__divdf3+0x329>
c0027e7e:	be 01 00 00 00       	mov    esi,0x1
c0027e83:	29 c6                	sub    esi,eax
c0027e85:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027e8b:	83 fe 1f             	cmp    esi,0x1f
c0027e8e:	7e 2f                	jle    c0027ebf <__divdf3+0x2f3>
c0027e90:	83 fe 20             	cmp    esi,0x20
c0027e93:	75 0a                	jne    c0027e9f <__divdf3+0x2d3>
c0027e95:	85 db                	test   ebx,ebx
c0027e97:	0f 95 c3             	setne  bl
c0027e9a:	0f b6 db             	movzx  ebx,bl
c0027e9d:	eb 1a                	jmp    c0027eb9 <__divdf3+0x2ed>
c0027e9f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ea2:	89 d7                	mov    edi,edx
c0027ea4:	d3 e7                	shl    edi,cl
c0027ea6:	89 f9                	mov    ecx,edi
c0027ea8:	09 d9                	or     ecx,ebx
c0027eaa:	0f 95 c3             	setne  bl
c0027ead:	0f b6 db             	movzx  ebx,bl
c0027eb0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027eb5:	29 c1                	sub    ecx,eax
c0027eb7:	d3 ea                	shr    edx,cl
c0027eb9:	09 d3                	or     ebx,edx
c0027ebb:	31 c0                	xor    eax,eax
c0027ebd:	eb 3a                	jmp    c0027ef9 <__divdf3+0x32d>
c0027ebf:	83 c0 1f             	add    eax,0x1f
c0027ec2:	89 d7                	mov    edi,edx
c0027ec4:	88 c1                	mov    cl,al
c0027ec6:	d3 e7                	shl    edi,cl
c0027ec8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ecb:	89 df                	mov    edi,ebx
c0027ecd:	89 f1                	mov    ecx,esi
c0027ecf:	d3 ef                	shr    edi,cl
c0027ed1:	89 f9                	mov    ecx,edi
c0027ed3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ed6:	09 cf                	or     edi,ecx
c0027ed8:	88 c1                	mov    cl,al
c0027eda:	d3 e3                	shl    ebx,cl
c0027edc:	85 db                	test   ebx,ebx
c0027ede:	0f 95 c3             	setne  bl
c0027ee1:	0f b6 db             	movzx  ebx,bl
c0027ee4:	09 fb                	or     ebx,edi
c0027ee6:	89 f1                	mov    ecx,esi
c0027ee8:	d3 ea                	shr    edx,cl
c0027eea:	31 c0                	xor    eax,eax
c0027eec:	eb 0d                	jmp    c0027efb <__divdf3+0x32f>
c0027eee:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027ef3:	eb 02                	jmp    c0027ef7 <__divdf3+0x32b>
c0027ef5:	31 c0                	xor    eax,eax
c0027ef7:	31 db                	xor    ebx,ebx
c0027ef9:	31 d2                	xor    edx,edx
c0027efb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027efe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f01:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f07:	09 c8                	or     eax,ecx
c0027f09:	c1 e0 14             	shl    eax,0x14
c0027f0c:	89 d1                	mov    ecx,edx
c0027f0e:	c1 e9 0b             	shr    ecx,0xb
c0027f11:	09 c8                	or     eax,ecx
c0027f13:	89 c6                	mov    esi,eax
c0027f15:	89 d9                	mov    ecx,ebx
c0027f17:	c1 e9 0b             	shr    ecx,0xb
c0027f1a:	c1 e2 15             	shl    edx,0x15
c0027f1d:	09 ca                	or     edx,ecx
c0027f1f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f25:	0f 95 c0             	setne  al
c0027f28:	09 c1                	or     ecx,eax
c0027f2a:	83 e1 01             	and    ecx,0x1
c0027f2d:	c1 eb 0a             	shr    ebx,0xa
c0027f30:	21 cb                	and    ebx,ecx
c0027f32:	01 d3                	add    ebx,edx
c0027f34:	89 d8                	mov    eax,ebx
c0027f36:	83 d6 00             	adc    esi,0x0
c0027f39:	89 f2                	mov    edx,esi
c0027f3b:	89 c7                	mov    edi,eax
c0027f3d:	89 d1                	mov    ecx,edx
c0027f3f:	89 f8                	mov    eax,edi
c0027f41:	89 ca                	mov    edx,ecx
c0027f43:	83 c4 2c             	add    esp,0x2c
c0027f46:	5b                   	pop    ebx
c0027f47:	5e                   	pop    esi
c0027f48:	5f                   	pop    edi
c0027f49:	5d                   	pop    ebp
c0027f4a:	c3                   	ret    

c0027f4b <__floatsidf>:
c0027f4b:	55                   	push   ebp
c0027f4c:	89 e5                	mov    ebp,esp
c0027f4e:	56                   	push   esi
c0027f4f:	53                   	push   ebx
c0027f50:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f53:	85 db                	test   ebx,ebx
c0027f55:	7e 15                	jle    c0027f6c <__floatsidf+0x21>
c0027f57:	0f bd cb             	bsr    ecx,ebx
c0027f5a:	83 f1 1f             	xor    ecx,0x1f
c0027f5d:	d3 e3                	shl    ebx,cl
c0027f5f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f65:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f6a:	eb 21                	jmp    c0027f8d <__floatsidf+0x42>
c0027f6c:	b8 00 00 00 00       	mov    eax,0x0
c0027f71:	ba 00 00 00 00       	mov    edx,0x0
c0027f76:	74 2a                	je     c0027fa2 <__floatsidf+0x57>
c0027f78:	f7 db                	neg    ebx
c0027f7a:	0f bd cb             	bsr    ecx,ebx
c0027f7d:	83 f1 1f             	xor    ecx,0x1f
c0027f80:	d3 e3                	shl    ebx,cl
c0027f82:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f88:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027f8d:	29 c8                	sub    eax,ecx
c0027f8f:	c1 e0 14             	shl    eax,0x14
c0027f92:	89 c1                	mov    ecx,eax
c0027f94:	89 de                	mov    esi,ebx
c0027f96:	c1 ee 0b             	shr    esi,0xb
c0027f99:	09 f1                	or     ecx,esi
c0027f9b:	89 ca                	mov    edx,ecx
c0027f9d:	c1 e3 15             	shl    ebx,0x15
c0027fa0:	89 d8                	mov    eax,ebx
c0027fa2:	5b                   	pop    ebx
c0027fa3:	5e                   	pop    esi
c0027fa4:	5d                   	pop    ebp
c0027fa5:	c3                   	ret    

c0027fa6 <__floatunsidf>:
c0027fa6:	55                   	push   ebp
c0027fa7:	89 e5                	mov    ebp,esp
c0027fa9:	56                   	push   esi
c0027faa:	53                   	push   ebx
c0027fab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fae:	85 db                	test   ebx,ebx
c0027fb0:	74 2a                	je     c0027fdc <__floatunsidf+0x36>
c0027fb2:	0f bd cb             	bsr    ecx,ebx
c0027fb5:	83 f1 1f             	xor    ecx,0x1f
c0027fb8:	d3 e3                	shl    ebx,cl
c0027fba:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fc0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027fc5:	29 c8                	sub    eax,ecx
c0027fc7:	c1 e0 14             	shl    eax,0x14
c0027fca:	89 c1                	mov    ecx,eax
c0027fcc:	89 de                	mov    esi,ebx
c0027fce:	c1 ee 0b             	shr    esi,0xb
c0027fd1:	09 f1                	or     ecx,esi
c0027fd3:	89 ca                	mov    edx,ecx
c0027fd5:	c1 e3 15             	shl    ebx,0x15
c0027fd8:	89 d8                	mov    eax,ebx
c0027fda:	eb 04                	jmp    c0027fe0 <__floatunsidf+0x3a>
c0027fdc:	31 c0                	xor    eax,eax
c0027fde:	31 d2                	xor    edx,edx
c0027fe0:	5b                   	pop    ebx
c0027fe1:	5e                   	pop    esi
c0027fe2:	5d                   	pop    ebp
c0027fe3:	c3                   	ret    

c0027fe4 <__fixdfsi>:
c0027fe4:	55                   	push   ebp
c0027fe5:	89 e5                	mov    ebp,esp
c0027fe7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027fea:	89 d1                	mov    ecx,edx
c0027fec:	c1 e1 0b             	shl    ecx,0xb
c0027fef:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027ff8:	c1 e8 15             	shr    eax,0x15
c0027ffb:	09 c1                	or     ecx,eax
c0027ffd:	c1 fa 14             	sar    edx,0x14
c0028000:	78 1f                	js     c0028021 <__fixdfsi+0x3d>
c0028002:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028008:	31 c0                	xor    eax,eax
c002800a:	83 fa 1e             	cmp    edx,0x1e
c002800d:	77 40                	ja     c002804f <__fixdfsi+0x6b>
c002800f:	89 c8                	mov    eax,ecx
c0028011:	0d 00 00 00 80       	or     eax,0x80000000
c0028016:	b9 1f 00 00 00       	mov    ecx,0x1f
c002801b:	29 d1                	sub    ecx,edx
c002801d:	d3 e8                	shr    eax,cl
c002801f:	eb 2e                	jmp    c002804f <__fixdfsi+0x6b>
c0028021:	31 c0                	xor    eax,eax
c0028023:	81 c2 01 04 00 00    	add    edx,0x401
c0028029:	78 24                	js     c002804f <__fixdfsi+0x6b>
c002802b:	83 fa 1e             	cmp    edx,0x1e
c002802e:	7e 09                	jle    c0028039 <__fixdfsi+0x55>
c0028030:	83 fa 1f             	cmp    edx,0x1f
c0028033:	75 18                	jne    c002804d <__fixdfsi+0x69>
c0028035:	85 c9                	test   ecx,ecx
c0028037:	75 14                	jne    c002804d <__fixdfsi+0x69>
c0028039:	89 c8                	mov    eax,ecx
c002803b:	0d 00 00 00 80       	or     eax,0x80000000
c0028040:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028045:	29 d1                	sub    ecx,edx
c0028047:	d3 e8                	shr    eax,cl
c0028049:	f7 d8                	neg    eax
c002804b:	eb 02                	jmp    c002804f <__fixdfsi+0x6b>
c002804d:	31 c0                	xor    eax,eax
c002804f:	5d                   	pop    ebp
c0028050:	c3                   	ret    

c0028051 <__fixunsdfsi>:
c0028051:	55                   	push   ebp
c0028052:	89 e5                	mov    ebp,esp
c0028054:	53                   	push   ebx
c0028055:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028058:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002805b:	89 d3                	mov    ebx,edx
c002805d:	c1 fb 14             	sar    ebx,0x14
c0028060:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028066:	31 c0                	xor    eax,eax
c0028068:	83 fb 1f             	cmp    ebx,0x1f
c002806b:	77 1d                	ja     c002808a <__fixunsdfsi+0x39>
c002806d:	89 d0                	mov    eax,edx
c002806f:	c1 e0 0b             	shl    eax,0xb
c0028072:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028077:	c1 e9 15             	shr    ecx,0x15
c002807a:	09 c8                	or     eax,ecx
c002807c:	0d 00 00 00 80       	or     eax,0x80000000
c0028081:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028086:	29 d9                	sub    ecx,ebx
c0028088:	d3 e8                	shr    eax,cl
c002808a:	5b                   	pop    ebx
c002808b:	5d                   	pop    ebp
c002808c:	c3                   	ret    

c002808d <__cmpdf2>:
c002808d:	55                   	push   ebp
c002808e:	89 e5                	mov    ebp,esp
c0028090:	57                   	push   edi
c0028091:	56                   	push   esi
c0028092:	53                   	push   ebx
c0028093:	83 ec 0c             	sub    esp,0xc
c0028096:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028099:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002809c:	89 ca                	mov    edx,ecx
c002809e:	c1 ea 14             	shr    edx,0x14
c00280a1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280a7:	89 cb                	mov    ebx,ecx
c00280a9:	c1 fb 1f             	sar    ebx,0x1f
c00280ac:	31 da                	xor    edx,ebx
c00280ae:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280b1:	89 df                	mov    edi,ebx
c00280b3:	c1 e7 0b             	shl    edi,0xb
c00280b6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280b9:	c1 e1 0b             	shl    ecx,0xb
c00280bc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280c2:	c1 eb 15             	shr    ebx,0x15
c00280c5:	09 d9                	or     ecx,ebx
c00280c7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00280ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00280cd:	89 ce                	mov    esi,ecx
c00280cf:	c1 ee 14             	shr    esi,0x14
c00280d2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280d8:	89 cb                	mov    ebx,ecx
c00280da:	c1 fb 1f             	sar    ebx,0x1f
c00280dd:	31 de                	xor    esi,ebx
c00280df:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00280e2:	89 df                	mov    edi,ebx
c00280e4:	c1 e7 0b             	shl    edi,0xb
c00280e7:	c1 e1 0b             	shl    ecx,0xb
c00280ea:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280f0:	c1 eb 15             	shr    ebx,0x15
c00280f3:	09 d9                	or     ecx,ebx
c00280f5:	89 d3                	mov    ebx,edx
c00280f7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00280fd:	43                   	inc    ebx
c00280fe:	83 fb 01             	cmp    ebx,0x1
c0028101:	77 08                	ja     c002810b <__cmpdf2+0x7e>
c0028103:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028106:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028109:	75 68                	jne    c0028173 <__cmpdf2+0xe6>
c002810b:	89 f3                	mov    ebx,esi
c002810d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028113:	43                   	inc    ebx
c0028114:	83 fb 01             	cmp    ebx,0x1
c0028117:	77 06                	ja     c002811f <__cmpdf2+0x92>
c0028119:	89 fb                	mov    ebx,edi
c002811b:	09 cb                	or     ebx,ecx
c002811d:	75 54                	jne    c0028173 <__cmpdf2+0xe6>
c002811f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028122:	09 f8                	or     eax,edi
c0028124:	09 c8                	or     eax,ecx
c0028126:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028129:	75 12                	jne    c002813d <__cmpdf2+0xb0>
c002812b:	8d 42 01             	lea    eax,[edx+0x1]
c002812e:	83 f8 01             	cmp    eax,0x1
c0028131:	77 0a                	ja     c002813d <__cmpdf2+0xb0>
c0028133:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028136:	31 c0                	xor    eax,eax
c0028138:	83 fb 01             	cmp    ebx,0x1
c002813b:	76 36                	jbe    c0028173 <__cmpdf2+0xe6>
c002813d:	b8 01 00 00 00       	mov    eax,0x1
c0028142:	39 f2                	cmp    edx,esi
c0028144:	7f 2d                	jg     c0028173 <__cmpdf2+0xe6>
c0028146:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002814b:	7c 26                	jl     c0028173 <__cmpdf2+0xe6>
c002814d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028150:	77 07                	ja     c0028159 <__cmpdf2+0xcc>
c0028152:	72 16                	jb     c002816a <__cmpdf2+0xdd>
c0028154:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028157:	76 0a                	jbe    c0028163 <__cmpdf2+0xd6>
c0028159:	89 d0                	mov    eax,edx
c002815b:	c1 f8 1f             	sar    eax,0x1f
c002815e:	83 c8 01             	or     eax,0x1
c0028161:	eb 10                	jmp    c0028173 <__cmpdf2+0xe6>
c0028163:	b8 00 00 00 00       	mov    eax,0x0
c0028168:	73 09                	jae    c0028173 <__cmpdf2+0xe6>
c002816a:	89 d0                	mov    eax,edx
c002816c:	c1 f8 1f             	sar    eax,0x1f
c002816f:	83 e0 02             	and    eax,0x2
c0028172:	48                   	dec    eax
c0028173:	83 c4 0c             	add    esp,0xc
c0028176:	5b                   	pop    ebx
c0028177:	5e                   	pop    esi
c0028178:	5f                   	pop    edi
c0028179:	5d                   	pop    ebp
c002817a:	c3                   	ret    

c002817b <__eqdf2>:
c002817b:	55                   	push   ebp
c002817c:	89 e5                	mov    ebp,esp
c002817e:	50                   	push   eax
c002817f:	6a 01                	push   0x1
c0028181:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028184:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028187:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002818a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002818d:	e8 fb fe ff ff       	call   c002808d <__cmpdf2>
c0028192:	83 c4 18             	add    esp,0x18
c0028195:	c9                   	leave  
c0028196:	c3                   	ret    

c0028197 <__nedf2>:
c0028197:	eb e2                	jmp    c002817b <__eqdf2>

c0028199 <__gtdf2>:
c0028199:	55                   	push   ebp
c002819a:	89 e5                	mov    ebp,esp
c002819c:	50                   	push   eax
c002819d:	6a ff                	push   0xffffffff
c002819f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281a2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281ab:	e8 dd fe ff ff       	call   c002808d <__cmpdf2>
c00281b0:	83 c4 18             	add    esp,0x18
c00281b3:	c9                   	leave  
c00281b4:	c3                   	ret    

c00281b5 <__gedf2>:
c00281b5:	eb e2                	jmp    c0028199 <__gtdf2>

c00281b7 <__ltdf2>:
c00281b7:	eb c2                	jmp    c002817b <__eqdf2>

c00281b9 <__ledf2>:
c00281b9:	eb c0                	jmp    c002817b <__eqdf2>

c00281bb <__truncdfsf2>:
c00281bb:	55                   	push   ebp
c00281bc:	89 e5                	mov    ebp,esp
c00281be:	57                   	push   edi
c00281bf:	56                   	push   esi
c00281c0:	53                   	push   ebx
c00281c1:	83 ec 0c             	sub    esp,0xc
c00281c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281c7:	89 d1                	mov    ecx,edx
c00281c9:	c1 f9 14             	sar    ecx,0x14
c00281cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281cf:	89 df                	mov    edi,ebx
c00281d1:	c1 e7 0b             	shl    edi,0xb
c00281d4:	89 d0                	mov    eax,edx
c00281d6:	c1 e0 0b             	shl    eax,0xb
c00281d9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281de:	c1 eb 15             	shr    ebx,0x15
c00281e1:	09 d8                	or     eax,ebx
c00281e3:	89 cb                	mov    ebx,ecx
c00281e5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00281eb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00281f1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00281f7:	0f 86 9e 00 00 00    	jbe    c002829b <__truncdfsf2+0xe0>
c00281fd:	85 db                	test   ebx,ebx
c00281ff:	75 0a                	jne    c002820b <__truncdfsf2+0x50>
c0028201:	c1 fa 17             	sar    edx,0x17
c0028204:	30 d2                	xor    dl,dl
c0028206:	e9 84 00 00 00       	jmp    c002828f <__truncdfsf2+0xd4>
c002820b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028211:	83 fe 83             	cmp    esi,0xffffff83
c0028214:	7d 4b                	jge    c0028261 <__truncdfsf2+0xa6>
c0028216:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002821b:	29 f1                	sub    ecx,esi
c002821d:	83 f9 1f             	cmp    ecx,0x1f
c0028220:	7f 6b                	jg     c002828d <__truncdfsf2+0xd2>
c0028222:	0d 00 00 00 80       	or     eax,0x80000000
c0028227:	89 c3                	mov    ebx,eax
c0028229:	d3 eb                	shr    ebx,cl
c002822b:	be 01 00 00 00       	mov    esi,0x1
c0028230:	d3 e6                	shl    esi,cl
c0028232:	4e                   	dec    esi
c0028233:	21 f0                	and    eax,esi
c0028235:	09 f8                	or     eax,edi
c0028237:	0f 95 c0             	setne  al
c002823a:	0f b6 c0             	movzx  eax,al
c002823d:	09 c3                	or     ebx,eax
c002823f:	89 d9                	mov    ecx,ebx
c0028241:	c1 e9 08             	shr    ecx,0x8
c0028244:	f6 c3 7f             	test   bl,0x7f
c0028247:	0f 95 c0             	setne  al
c002824a:	09 c8                	or     eax,ecx
c002824c:	83 e0 01             	and    eax,0x1
c002824f:	c1 eb 07             	shr    ebx,0x7
c0028252:	21 c3                	and    ebx,eax
c0028254:	81 e2 00 00 00 80    	and    edx,0x80000000
c002825a:	09 d1                	or     ecx,edx
c002825c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002825f:	eb 76                	jmp    c00282d7 <__truncdfsf2+0x11c>
c0028261:	83 c6 80             	add    esi,0xffffff80
c0028264:	7e 1d                	jle    c0028283 <__truncdfsf2+0xc8>
c0028266:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002826c:	75 0b                	jne    c0028279 <__truncdfsf2+0xbe>
c002826e:	09 f8                	or     eax,edi
c0028270:	74 09                	je     c002827b <__truncdfsf2+0xc0>
c0028272:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028277:	eb 02                	jmp    c002827b <__truncdfsf2+0xc0>
c0028279:	31 c0                	xor    eax,eax
c002827b:	c1 fa 17             	sar    edx,0x17
c002827e:	80 ca ff             	or     dl,0xff
c0028281:	eb 0e                	jmp    c0028291 <__truncdfsf2+0xd6>
c0028283:	c1 fa 1f             	sar    edx,0x1f
c0028286:	c1 e2 08             	shl    edx,0x8
c0028289:	09 ca                	or     edx,ecx
c002828b:	eb 04                	jmp    c0028291 <__truncdfsf2+0xd6>
c002828d:	31 d2                	xor    edx,edx
c002828f:	31 c0                	xor    eax,eax
c0028291:	c1 e2 17             	shl    edx,0x17
c0028294:	c1 e8 08             	shr    eax,0x8
c0028297:	09 d0                	or     eax,edx
c0028299:	eb 3c                	jmp    c00282d7 <__truncdfsf2+0x11c>
c002829b:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282a1:	89 ca                	mov    edx,ecx
c00282a3:	c1 fa 0b             	sar    edx,0xb
c00282a6:	c1 e2 08             	shl    edx,0x8
c00282a9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282ac:	31 db                	xor    ebx,ebx
c00282ae:	85 ff                	test   edi,edi
c00282b0:	0f 95 c3             	setne  bl
c00282b3:	09 d8                	or     eax,ebx
c00282b5:	89 c3                	mov    ebx,eax
c00282b7:	c1 eb 08             	shr    ebx,0x8
c00282ba:	a8 7f                	test   al,0x7f
c00282bc:	0f 95 c2             	setne  dl
c00282bf:	89 d6                	mov    esi,edx
c00282c1:	09 de                	or     esi,ebx
c00282c3:	83 e6 01             	and    esi,0x1
c00282c6:	c1 e8 07             	shr    eax,0x7
c00282c9:	21 f0                	and    eax,esi
c00282cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282ce:	09 ca                	or     edx,ecx
c00282d0:	c1 e2 17             	shl    edx,0x17
c00282d3:	09 da                	or     edx,ebx
c00282d5:	01 d0                	add    eax,edx
c00282d7:	83 c4 0c             	add    esp,0xc
c00282da:	5b                   	pop    ebx
c00282db:	5e                   	pop    esi
c00282dc:	5f                   	pop    edi
c00282dd:	5d                   	pop    ebp
c00282de:	c3                   	ret    

c00282df <__extendsfdf2>:
c00282df:	55                   	push   ebp
c00282e0:	89 e5                	mov    ebp,esp
c00282e2:	57                   	push   edi
c00282e3:	56                   	push   esi
c00282e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00282e7:	89 d1                	mov    ecx,edx
c00282e9:	c1 f9 17             	sar    ecx,0x17
c00282ec:	c1 e2 08             	shl    edx,0x8
c00282ef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00282f5:	89 c8                	mov    eax,ecx
c00282f7:	80 e4 f8             	and    ah,0xf8
c00282fa:	8d 71 01             	lea    esi,[ecx+0x1]
c00282fd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028303:	75 27                	jne    c002832c <__extendsfdf2+0x4d>
c0028305:	81 e1 ff 00 00 00    	and    ecx,0xff
c002830b:	75 18                	jne    c0028325 <__extendsfdf2+0x46>
c002830d:	85 d2                	test   edx,edx
c002830f:	74 20                	je     c0028331 <__extendsfdf2+0x52>
c0028311:	41                   	inc    ecx
c0028312:	01 d2                	add    edx,edx
c0028314:	79 fb                	jns    c0028311 <__extendsfdf2+0x32>
c0028316:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002831c:	29 c8                	sub    eax,ecx
c002831e:	05 81 03 00 00       	add    eax,0x381
c0028323:	eb 0c                	jmp    c0028331 <__extendsfdf2+0x52>
c0028325:	05 00 07 00 00       	add    eax,0x700
c002832a:	eb 05                	jmp    c0028331 <__extendsfdf2+0x52>
c002832c:	05 80 03 00 00       	add    eax,0x380
c0028331:	c1 e0 14             	shl    eax,0x14
c0028334:	89 c1                	mov    ecx,eax
c0028336:	89 d0                	mov    eax,edx
c0028338:	c1 e8 0b             	shr    eax,0xb
c002833b:	09 c1                	or     ecx,eax
c002833d:	c1 e2 15             	shl    edx,0x15
c0028340:	89 d0                	mov    eax,edx
c0028342:	89 ca                	mov    edx,ecx
c0028344:	5e                   	pop    esi
c0028345:	5f                   	pop    edi
c0028346:	5d                   	pop    ebp
c0028347:	c3                   	ret    
c0028348:	66 90                	xchg   ax,ax
c002834a:	66 90                	xchg   ax,ax
c002834c:	66 90                	xchg   ax,ax
c002834e:	66 90                	xchg   ax,ax

c0028350 <fabs>:
c0028350:	83 ec 0c             	sub    esp,0xc
c0028353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028357:	89 04 24             	mov    DWORD PTR [esp],eax
c002835a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002835e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028363:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028367:	dd 04 24             	fld    QWORD PTR [esp]
c002836a:	83 c4 0c             	add    esp,0xc
c002836d:	c3                   	ret    
c002836e:	66 90                	xchg   ax,ax

c0028370 <lrint>:
c0028370:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028374:	83 ec 04             	sub    esp,0x4
c0028377:	db 1c 24             	fistp  DWORD PTR [esp]
c002837a:	58                   	pop    eax
c002837b:	c3                   	ret    

c002837c <lrintf>:
c002837c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028380:	83 ec 04             	sub    esp,0x4
c0028383:	db 1c 24             	fistp  DWORD PTR [esp]
c0028386:	58                   	pop    eax
c0028387:	c3                   	ret    

Disassembly of section .init:

c0028388 <_init>:
c0028388:	55                   	push   ebp
c0028389:	89 e5                	mov    ebp,esp
c002838b:	e8 88 7d fd ff       	call   c0000118 <frame_dummy>
c0028390:	e8 5b e0 ff ff       	call   c00263f0 <__do_global_ctors_aux>
c0028395:	5d                   	pop    ebp
c0028396:	c3                   	ret    

Disassembly of section .fini:

c0028397 <_fini>:
c0028397:	55                   	push   ebp
c0028398:	89 e5                	mov    ebp,esp
c002839a:	e8 09 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002839f:	5d                   	pop    ebp
c00283a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283a2 <Computer::~Computer()>:
c00283a2:	83 ec 0c             	sub    esp,0xc
c00283a5:	ba 1c 9f 02 c0       	mov    edx,0xc0029f1c
c00283aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ae:	89 10                	mov    DWORD PTR [eax],edx
c00283b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b4:	83 ec 0c             	sub    esp,0xc
c00283b7:	50                   	push   eax
c00283b8:	e8 f5 b5 fe ff       	call   c00139b2 <Device::~Device()>
c00283bd:	83 c4 10             	add    esp,0x10
c00283c0:	90                   	nop
c00283c1:	83 c4 0c             	add    esp,0xc
c00283c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00283c6 <Computer::~Computer()>:
c00283c6:	83 ec 0c             	sub    esp,0xc
c00283c9:	83 ec 0c             	sub    esp,0xc
c00283cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283d0:	e8 cd ff ff ff       	call   c00283a2 <Computer::~Computer()>
c00283d5:	83 c4 10             	add    esp,0x10
c00283d8:	83 ec 08             	sub    esp,0x8
c00283db:	68 ec 01 00 00       	push   0x1ec
c00283e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283e4:	e8 ea a1 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c00283e9:	83 c4 10             	add    esp,0x10
c00283ec:	83 c4 0c             	add    esp,0xc
c00283ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00283f0 <idleCommon()>:
c00283f0:	83 ec 0c             	sub    esp,0xc
c00283f3:	fa                   	cli    
c00283f4:	ff 05 08 0e 03 c0    	inc    DWORD PTR ds:0xc0030e08
c00283fa:	e8 a2 55 ff ff       	call   c001d9a1 <schedule()>
c00283ff:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0028404:	48                   	dec    eax
c0028405:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c002840a:	75 01                	jne    c002840d <idleCommon()+0x1d>
c002840c:	fb                   	sti    
c002840d:	83 c4 0c             	add    esp,0xc
c0028410:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028412 <LinkedList<UnixFile>::~LinkedList()>:
c0028412:	90                   	nop
c0028413:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028414 <LinkedList<UnixFile>::LinkedList()>:
c0028414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028418:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002841e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028422:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002842d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028438:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002843e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028442:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028449:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002844d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028454:	90                   	nop
c0028455:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028456 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028456:	83 ec 0c             	sub    esp,0xc
c0028459:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002845e:	75 10                	jne    c0028470 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028460:	83 ec 0c             	sub    esp,0xc
c0028463:	68 58 a1 02 c0       	push   0xc002a158
c0028468:	e8 aa 19 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c002846d:	83 c4 10             	add    esp,0x10
c0028470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028474:	8b 00                	mov    eax,DWORD PTR [eax]
c0028476:	85 c0                	test   eax,eax
c0028478:	74 34                	je     c00284ae <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002847a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028481:	85 c0                	test   eax,eax
c0028483:	74 29                	je     c00284ae <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002848c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028490:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028497:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002849b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002849e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284ac:	eb 65                	jmp    c0028513 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284b4:	85 c0                	test   eax,eax
c00284b6:	75 4b                	jne    c0028503 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284bf:	85 c0                	test   eax,eax
c00284c1:	75 40                	jne    c0028503 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284cb:	89 10                	mov    DWORD PTR [eax],edx
c00284cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284ed:	85 c0                	test   eax,eax
c00284ef:	74 22                	je     c0028513 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284f1:	83 ec 0c             	sub    esp,0xc
c00284f4:	68 7a a1 02 c0       	push   0xc002a17a
c00284f9:	e8 19 19 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00284fe:	83 c4 10             	add    esp,0x10
c0028501:	eb 10                	jmp    c0028513 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028503:	83 ec 0c             	sub    esp,0xc
c0028506:	68 84 a1 02 c0       	push   0xc002a184
c002850b:	e8 07 19 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0028510:	83 c4 10             	add    esp,0x10
c0028513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002851a:	8d 50 01             	lea    edx,[eax+0x1]
c002851d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028521:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028524:	90                   	nop
c0028525:	83 c4 0c             	add    esp,0xc
c0028528:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002852a <LinkedList<UnixFile>::getFirstElement()>:
c002852a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002852e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028530:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028532 <LinkedList<UnixFile>::removeFirst()>:
c0028532:	83 ec 0c             	sub    esp,0xc
c0028535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028539:	8b 00                	mov    eax,DWORD PTR [eax]
c002853b:	85 c0                	test   eax,eax
c002853d:	75 12                	jne    c0028551 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002853f:	83 ec 0c             	sub    esp,0xc
c0028542:	68 90 a1 02 c0       	push   0xc002a190
c0028547:	e8 cb 18 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c002854c:	83 c4 10             	add    esp,0x10
c002854f:	eb 7e                	jmp    c00285cf <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028555:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028558:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002855b:	85 c0                	test   eax,eax
c002855d:	74 10                	je     c002856f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002855f:	83 ec 0c             	sub    esp,0xc
c0028562:	68 db a1 02 c0       	push   0xc002a1db
c0028567:	e8 ab 18 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c002856c:	83 c4 10             	add    esp,0x10
c002856f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028573:	8b 00                	mov    eax,DWORD PTR [eax]
c0028575:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028578:	85 c0                	test   eax,eax
c002857a:	75 33                	jne    c00285af <LinkedList<UnixFile>::removeFirst()+0x7d>
c002857c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028580:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002858a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028595:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028598:	83 f8 01             	cmp    eax,0x1
c002859b:	74 21                	je     c00285be <LinkedList<UnixFile>::removeFirst()+0x8c>
c002859d:	83 ec 0c             	sub    esp,0xc
c00285a0:	68 b4 a1 02 c0       	push   0xc002a1b4
c00285a5:	e8 6d 18 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00285aa:	83 c4 10             	add    esp,0x10
c00285ad:	eb 0f                	jmp    c00285be <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285b5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00285b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bc:	89 10                	mov    DWORD PTR [eax],edx
c00285be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285c5:	8d 50 ff             	lea    edx,[eax-0x1]
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285cf:	83 c4 0c             	add    esp,0xc
c00285d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00285d4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00285d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00285d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285db:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00285dc <DriverlessDevice::~DriverlessDevice()>:
c00285dc:	ba 1c aa 02 c0       	mov    edx,0xc002aa1c
c00285e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285e5:	89 10                	mov    DWORD PTR [eax],edx
c00285e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285eb:	50                   	push   eax
c00285ec:	e8 c1 b3 fe ff       	call   c00139b2 <Device::~Device()>
c00285f1:	83 c4 04             	add    esp,0x4
c00285f4:	90                   	nop
c00285f5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00285f6 <DriverlessDevice::~DriverlessDevice()>:
c00285f6:	83 ec 0c             	sub    esp,0xc
c00285f9:	83 ec 0c             	sub    esp,0xc
c00285fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028600:	e8 d7 ff ff ff       	call   c00285dc <DriverlessDevice::~DriverlessDevice()>
c0028605:	83 c4 10             	add    esp,0x10
c0028608:	83 ec 08             	sub    esp,0x8
c002860b:	68 58 01 00 00       	push   0x158
c0028610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028614:	e8 ba 9f fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028619:	83 c4 10             	add    esp,0x10
c002861c:	83 c4 0c             	add    esp,0xc
c002861f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028620 <LinkedList<Device>::addElement(Device*)>:
c0028620:	83 ec 0c             	sub    esp,0xc
c0028623:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028628:	75 10                	jne    c002863a <LinkedList<Device>::addElement(Device*)+0x1a>
c002862a:	83 ec 0c             	sub    esp,0xc
c002862d:	68 58 a1 02 c0       	push   0xc002a158
c0028632:	e8 e0 17 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0028637:	83 c4 10             	add    esp,0x10
c002863a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028640:	85 c0                	test   eax,eax
c0028642:	74 3a                	je     c002867e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002864b:	85 c0                	test   eax,eax
c002864d:	74 2f                	je     c002867e <LinkedList<Device>::addElement(Device*)+0x5e>
c002864f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028653:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002865a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028668:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002866b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028672:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002867c:	eb 68                	jmp    c00286e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002867e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028682:	8b 00                	mov    eax,DWORD PTR [eax]
c0028684:	85 c0                	test   eax,eax
c0028686:	75 4e                	jne    c00286d6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002868f:	85 c0                	test   eax,eax
c0028691:	75 43                	jne    c00286d6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028697:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002869b:	89 10                	mov    DWORD PTR [eax],edx
c002869d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286af:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286c0:	85 c0                	test   eax,eax
c00286c2:	74 22                	je     c00286e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286c4:	83 ec 0c             	sub    esp,0xc
c00286c7:	68 7a a1 02 c0       	push   0xc002a17a
c00286cc:	e8 46 17 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00286d1:	83 c4 10             	add    esp,0x10
c00286d4:	eb 10                	jmp    c00286e6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286d6:	83 ec 0c             	sub    esp,0xc
c00286d9:	68 84 a1 02 c0       	push   0xc002a184
c00286de:	e8 34 17 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00286e3:	83 c4 10             	add    esp,0x10
c00286e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286ed:	8d 50 01             	lea    edx,[eax+0x1]
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286f7:	90                   	nop
c00286f8:	83 c4 0c             	add    esp,0xc
c00286fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00286fc <LinkedList<Device>::LinkedList()>:
c00286fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028700:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002870a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028715:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028720:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002872a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028731:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028735:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002873c:	90                   	nop
c002873d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002873e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002873e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028742:	8b 00                	mov    eax,DWORD PTR [eax]
c0028744:	85 c0                	test   eax,eax
c0028746:	75 0e                	jne    c0028756 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002874c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002874f:	85 c0                	test   eax,eax
c0028751:	75 03                	jne    c0028756 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028753:	b0 01                	mov    al,0x1
c0028755:	c3                   	ret    
c0028756:	b0 00                	mov    al,0x0
c0028758:	90                   	nop
c0028759:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002875a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002875a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002875e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028760:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028762 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028762:	83 ec 0c             	sub    esp,0xc
c0028765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028769:	8b 00                	mov    eax,DWORD PTR [eax]
c002876b:	85 c0                	test   eax,eax
c002876d:	75 15                	jne    c0028784 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002876f:	83 ec 0c             	sub    esp,0xc
c0028772:	68 90 a1 02 c0       	push   0xc002a190
c0028777:	e8 9b 16 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c002877c:	83 c4 10             	add    esp,0x10
c002877f:	e9 88 00 00 00       	jmp    c002880c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028788:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002878b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002878e:	85 c0                	test   eax,eax
c0028790:	0f 95 c0             	setne  al
c0028793:	84 c0                	test   al,al
c0028795:	74 10                	je     c00287a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028797:	83 ec 0c             	sub    esp,0xc
c002879a:	68 db a1 02 c0       	push   0xc002a1db
c002879f:	e8 73 16 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00287a4:	83 c4 10             	add    esp,0x10
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287b0:	85 c0                	test   eax,eax
c00287b2:	0f 94 c0             	sete   al
c00287b5:	84 c0                	test   al,al
c00287b7:	74 33                	je     c00287ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00287b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d5:	83 f8 01             	cmp    eax,0x1
c00287d8:	74 21                	je     c00287fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00287da:	83 ec 0c             	sub    esp,0xc
c00287dd:	68 b4 a1 02 c0       	push   0xc002a1b4
c00287e2:	e8 30 16 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00287e7:	83 c4 10             	add    esp,0x10
c00287ea:	eb 0f                	jmp    c00287fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00287ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00287f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00287f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f9:	89 10                	mov    DWORD PTR [eax],edx
c00287fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028802:	8d 50 ff             	lea    edx,[eax-0x1]
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002880c:	83 c4 0c             	add    esp,0xc
c002880f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028810 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028818:	75 10                	jne    c002882a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	68 58 a1 02 c0       	push   0xc002a158
c0028822:	e8 f0 15 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0028827:	83 c4 10             	add    esp,0x10
c002882a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028830:	85 c0                	test   eax,eax
c0028832:	74 34                	je     c0028868 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028838:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883b:	85 c0                	test   eax,eax
c002883d:	74 29                	je     c0028868 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002883f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028843:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028846:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002884a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002884d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028855:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028866:	eb 65                	jmp    c00288cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886c:	8b 00                	mov    eax,DWORD PTR [eax]
c002886e:	85 c0                	test   eax,eax
c0028870:	75 4b                	jne    c00288bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	85 c0                	test   eax,eax
c002887b:	75 40                	jne    c00288bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028885:	89 10                	mov    DWORD PTR [eax],edx
c0028887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002888f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028899:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a7:	85 c0                	test   eax,eax
c00288a9:	74 22                	je     c00288cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288ab:	83 ec 0c             	sub    esp,0xc
c00288ae:	68 7a a1 02 c0       	push   0xc002a17a
c00288b3:	e8 5f 15 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00288b8:	83 c4 10             	add    esp,0x10
c00288bb:	eb 10                	jmp    c00288cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288bd:	83 ec 0c             	sub    esp,0xc
c00288c0:	68 84 a1 02 c0       	push   0xc002a184
c00288c5:	e8 4d 15 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00288ca:	83 c4 10             	add    esp,0x10
c00288cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d4:	8d 50 01             	lea    edx,[eax+0x1]
c00288d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288de:	90                   	nop
c00288df:	83 c4 0c             	add    esp,0xc
c00288e2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00288e4 <ACPI::~ACPI()>:
c00288e4:	83 ec 0c             	sub    esp,0xc
c00288e7:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c00288ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f0:	89 10                	mov    DWORD PTR [eax],edx
c00288f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f6:	83 ec 0c             	sub    esp,0xc
c00288f9:	50                   	push   eax
c00288fa:	e8 b3 b0 fe ff       	call   c00139b2 <Device::~Device()>
c00288ff:	83 c4 10             	add    esp,0x10
c0028902:	90                   	nop
c0028903:	83 c4 0c             	add    esp,0xc
c0028906:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028908 <ACPI::~ACPI()>:
c0028908:	83 ec 0c             	sub    esp,0xc
c002890b:	83 ec 0c             	sub    esp,0xc
c002890e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028912:	e8 cd ff ff ff       	call   c00288e4 <ACPI::~ACPI()>
c0028917:	83 c4 10             	add    esp,0x10
c002891a:	83 ec 08             	sub    esp,0x8
c002891d:	68 64 12 00 00       	push   0x1264
c0028922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028926:	e8 a8 9c fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c002892b:	83 c4 10             	add    esp,0x10
c002892e:	83 c4 0c             	add    esp,0xc
c0028931:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028932 <LinkedList<Device>::~LinkedList()>:
c0028932:	90                   	nop
c0028933:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028934 <LinkedList<Device>::isEmpty()>:
c0028934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028938:	8b 00                	mov    eax,DWORD PTR [eax]
c002893a:	85 c0                	test   eax,eax
c002893c:	75 0e                	jne    c002894c <LinkedList<Device>::isEmpty()+0x18>
c002893e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028942:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028945:	85 c0                	test   eax,eax
c0028947:	75 03                	jne    c002894c <LinkedList<Device>::isEmpty()+0x18>
c0028949:	b0 01                	mov    al,0x1
c002894b:	c3                   	ret    
c002894c:	b0 00                	mov    al,0x0
c002894e:	90                   	nop
c002894f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028950 <LinkedList<Device>::getFirstElement()>:
c0028950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028954:	8b 00                	mov    eax,DWORD PTR [eax]
c0028956:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028958 <LinkedList<Device>::removeFirst()>:
c0028958:	83 ec 0c             	sub    esp,0xc
c002895b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028961:	85 c0                	test   eax,eax
c0028963:	75 15                	jne    c002897a <LinkedList<Device>::removeFirst()+0x22>
c0028965:	83 ec 0c             	sub    esp,0xc
c0028968:	68 90 a1 02 c0       	push   0xc002a190
c002896d:	e8 a5 14 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0028972:	83 c4 10             	add    esp,0x10
c0028975:	e9 87 00 00 00       	jmp    c0028a01 <LinkedList<Device>::removeFirst()+0xa9>
c002897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028981:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028987:	85 c0                	test   eax,eax
c0028989:	74 10                	je     c002899b <LinkedList<Device>::removeFirst()+0x43>
c002898b:	83 ec 0c             	sub    esp,0xc
c002898e:	68 db a1 02 c0       	push   0xc002a1db
c0028993:	e8 7f 14 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c0028998:	83 c4 10             	add    esp,0x10
c002899b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899f:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289a7:	85 c0                	test   eax,eax
c00289a9:	75 33                	jne    c00289de <LinkedList<Device>::removeFirst()+0x86>
c00289ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289c7:	83 f8 01             	cmp    eax,0x1
c00289ca:	74 24                	je     c00289f0 <LinkedList<Device>::removeFirst()+0x98>
c00289cc:	83 ec 0c             	sub    esp,0xc
c00289cf:	68 b4 a1 02 c0       	push   0xc002a1b4
c00289d4:	e8 3e 14 ff ff       	call   c0019e17 <Krnl::panic(char const*)>
c00289d9:	83 c4 10             	add    esp,0x10
c00289dc:	eb 12                	jmp    c00289f0 <LinkedList<Device>::removeFirst()+0x98>
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00289ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ee:	89 10                	mov    DWORD PTR [eax],edx
c00289f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289f7:	8d 50 ff             	lea    edx,[eax-0x1]
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a01:	83 c4 0c             	add    esp,0xc
c0028a04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a06 <CPU::~CPU()>:
c0028a06:	83 ec 0c             	sub    esp,0xc
c0028a09:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	89 10                	mov    DWORD PTR [eax],edx
c0028a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a18:	83 ec 0c             	sub    esp,0xc
c0028a1b:	50                   	push   eax
c0028a1c:	e8 91 af fe ff       	call   c00139b2 <Device::~Device()>
c0028a21:	83 c4 10             	add    esp,0x10
c0028a24:	90                   	nop
c0028a25:	83 c4 0c             	add    esp,0xc
c0028a28:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a2a <CPU::~CPU()>:
c0028a2a:	83 ec 0c             	sub    esp,0xc
c0028a2d:	83 ec 0c             	sub    esp,0xc
c0028a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a34:	e8 cd ff ff ff       	call   c0028a06 <CPU::~CPU()>
c0028a39:	83 c4 10             	add    esp,0x10
c0028a3c:	83 ec 08             	sub    esp,0x8
c0028a3f:	68 98 11 00 00       	push   0x1198
c0028a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a48:	e8 86 9b fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028a4d:	83 c4 10             	add    esp,0x10
c0028a50:	83 c4 0c             	add    esp,0xc
c0028a53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a54:	90                   	nop
c0028a55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a56 <ThreadControlBlock::ThreadControlBlock()>:
c0028a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a5a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a65:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028a6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a70:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028a77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a7b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a86:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a91:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028a95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a99:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028a9d:	90                   	nop
c0028a9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028aa0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ab5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ace:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ae0:	90                   	nop
c0028ae1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028ae2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028ae2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ae6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ae9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028aea <Vm::_FPUState::_FPUState()>:
c0028aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aee:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028af5:	90                   	nop
c0028af6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028af8 <PCI::~PCI()>:
c0028af8:	83 ec 0c             	sub    esp,0xc
c0028afb:	ba 04 c0 02 c0       	mov    edx,0xc002c004
c0028b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b04:	89 10                	mov    DWORD PTR [eax],edx
c0028b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0a:	83 ec 0c             	sub    esp,0xc
c0028b0d:	50                   	push   eax
c0028b0e:	e8 6f a8 fe ff       	call   c0013382 <Bus::~Bus()>
c0028b13:	83 c4 10             	add    esp,0x10
c0028b16:	90                   	nop
c0028b17:	83 c4 0c             	add    esp,0xc
c0028b1a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b1c <PCI::~PCI()>:
c0028b1c:	83 ec 0c             	sub    esp,0xc
c0028b1f:	83 ec 0c             	sub    esp,0xc
c0028b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b26:	e8 cd ff ff ff       	call   c0028af8 <PCI::~PCI()>
c0028b2b:	83 c4 10             	add    esp,0x10
c0028b2e:	83 ec 08             	sub    esp,0x8
c0028b31:	68 5c 01 00 00       	push   0x15c
c0028b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b3a:	e8 94 9a fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028b3f:	83 c4 10             	add    esp,0x10
c0028b42:	83 c4 0c             	add    esp,0xc
c0028b45:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b46 <IDE::~IDE()>:
c0028b46:	83 ec 0c             	sub    esp,0xc
c0028b49:	ba b8 c0 02 c0       	mov    edx,0xc002c0b8
c0028b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b52:	89 10                	mov    DWORD PTR [eax],edx
c0028b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b58:	83 ec 0c             	sub    esp,0xc
c0028b5b:	50                   	push   eax
c0028b5c:	e8 67 b3 fe ff       	call   c0013ec8 <HardDiskController::~HardDiskController()>
c0028b61:	83 c4 10             	add    esp,0x10
c0028b64:	90                   	nop
c0028b65:	83 c4 0c             	add    esp,0xc
c0028b68:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028b6a <IDE::~IDE()>:
c0028b6a:	83 ec 0c             	sub    esp,0xc
c0028b6d:	83 ec 0c             	sub    esp,0xc
c0028b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b74:	e8 cd ff ff ff       	call   c0028b46 <IDE::~IDE()>
c0028b79:	83 c4 10             	add    esp,0x10
c0028b7c:	83 ec 08             	sub    esp,0x8
c0028b7f:	68 70 02 00 00       	push   0x270
c0028b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b88:	e8 46 9a fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028b8d:	83 c4 10             	add    esp,0x10
c0028b90:	83 c4 0c             	add    esp,0xc
c0028b93:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028b94 <SATABus::~SATABus()>:
c0028b94:	83 ec 0c             	sub    esp,0xc
c0028b97:	ba 30 c1 02 c0       	mov    edx,0xc002c130
c0028b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba0:	89 10                	mov    DWORD PTR [eax],edx
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	83 ec 0c             	sub    esp,0xc
c0028ba9:	50                   	push   eax
c0028baa:	e8 19 b3 fe ff       	call   c0013ec8 <HardDiskController::~HardDiskController()>
c0028baf:	83 c4 10             	add    esp,0x10
c0028bb2:	90                   	nop
c0028bb3:	83 c4 0c             	add    esp,0xc
c0028bb6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028bb8 <SATABus::~SATABus()>:
c0028bb8:	83 ec 0c             	sub    esp,0xc
c0028bbb:	83 ec 0c             	sub    esp,0xc
c0028bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc2:	e8 cd ff ff ff       	call   c0028b94 <SATABus::~SATABus()>
c0028bc7:	83 c4 10             	add    esp,0x10
c0028bca:	83 ec 08             	sub    esp,0x8
c0028bcd:	68 64 01 00 00       	push   0x164
c0028bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd6:	e8 f8 99 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028bdb:	83 c4 10             	add    esp,0x10
c0028bde:	83 c4 0c             	add    esp,0xc
c0028be1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028be2 <ATA::~ATA()>:
c0028be2:	83 ec 0c             	sub    esp,0xc
c0028be5:	ba 7c c1 02 c0       	mov    edx,0xc002c17c
c0028bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bee:	89 10                	mov    DWORD PTR [eax],edx
c0028bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf4:	83 ec 0c             	sub    esp,0xc
c0028bf7:	50                   	push   eax
c0028bf8:	e8 ad b3 fe ff       	call   c0013faa <PhysicalDisk::~PhysicalDisk()>
c0028bfd:	83 c4 10             	add    esp,0x10
c0028c00:	90                   	nop
c0028c01:	83 c4 0c             	add    esp,0xc
c0028c04:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c06 <ATA::~ATA()>:
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	83 ec 0c             	sub    esp,0xc
c0028c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c10:	e8 cd ff ff ff       	call   c0028be2 <ATA::~ATA()>
c0028c15:	83 c4 10             	add    esp,0x10
c0028c18:	83 ec 08             	sub    esp,0x8
c0028c1b:	68 7c 01 00 00       	push   0x17c
c0028c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c24:	e8 aa 99 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028c29:	83 c4 10             	add    esp,0x10
c0028c2c:	83 c4 0c             	add    esp,0xc
c0028c2f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c30 <ATAPI::~ATAPI()>:
c0028c30:	83 ec 0c             	sub    esp,0xc
c0028c33:	ba b4 c1 02 c0       	mov    edx,0xc002c1b4
c0028c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3c:	89 10                	mov    DWORD PTR [eax],edx
c0028c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c42:	83 ec 0c             	sub    esp,0xc
c0028c45:	50                   	push   eax
c0028c46:	e8 5f b3 fe ff       	call   c0013faa <PhysicalDisk::~PhysicalDisk()>
c0028c4b:	83 c4 10             	add    esp,0x10
c0028c4e:	90                   	nop
c0028c4f:	83 c4 0c             	add    esp,0xc
c0028c52:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c54 <ATAPI::~ATAPI()>:
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	83 ec 0c             	sub    esp,0xc
c0028c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c5e:	e8 cd ff ff ff       	call   c0028c30 <ATAPI::~ATAPI()>
c0028c63:	83 c4 10             	add    esp,0x10
c0028c66:	83 ec 08             	sub    esp,0x8
c0028c69:	68 80 01 00 00       	push   0x180
c0028c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c72:	e8 5c 99 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028c77:	83 c4 10             	add    esp,0x10
c0028c7a:	83 c4 0c             	add    esp,0xc
c0028c7d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028c7e <SATA::~SATA()>:
c0028c7e:	83 ec 0c             	sub    esp,0xc
c0028c81:	ba 68 c2 02 c0       	mov    edx,0xc002c268
c0028c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8a:	89 10                	mov    DWORD PTR [eax],edx
c0028c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c90:	83 ec 0c             	sub    esp,0xc
c0028c93:	50                   	push   eax
c0028c94:	e8 11 b3 fe ff       	call   c0013faa <PhysicalDisk::~PhysicalDisk()>
c0028c99:	83 c4 10             	add    esp,0x10
c0028c9c:	90                   	nop
c0028c9d:	83 c4 0c             	add    esp,0xc
c0028ca0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ca2 <SATA::~SATA()>:
c0028ca2:	83 ec 0c             	sub    esp,0xc
c0028ca5:	83 ec 0c             	sub    esp,0xc
c0028ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cac:	e8 cd ff ff ff       	call   c0028c7e <SATA::~SATA()>
c0028cb1:	83 c4 10             	add    esp,0x10
c0028cb4:	83 ec 08             	sub    esp,0x8
c0028cb7:	68 7c 01 00 00       	push   0x17c
c0028cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc0:	e8 0e 99 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028cc5:	83 c4 10             	add    esp,0x10
c0028cc8:	83 c4 0c             	add    esp,0xc
c0028ccb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ccc <SATAPI::~SATAPI()>:
c0028ccc:	83 ec 0c             	sub    esp,0xc
c0028ccf:	ba 44 c3 02 c0       	mov    edx,0xc002c344
c0028cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd8:	89 10                	mov    DWORD PTR [eax],edx
c0028cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cde:	83 ec 0c             	sub    esp,0xc
c0028ce1:	50                   	push   eax
c0028ce2:	e8 c3 b2 fe ff       	call   c0013faa <PhysicalDisk::~PhysicalDisk()>
c0028ce7:	83 c4 10             	add    esp,0x10
c0028cea:	90                   	nop
c0028ceb:	83 c4 0c             	add    esp,0xc
c0028cee:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028cf0 <SATAPI::~SATAPI()>:
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	83 ec 0c             	sub    esp,0xc
c0028cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cfa:	e8 cd ff ff ff       	call   c0028ccc <SATAPI::~SATAPI()>
c0028cff:	83 c4 10             	add    esp,0x10
c0028d02:	83 ec 08             	sub    esp,0x8
c0028d05:	68 80 01 00 00       	push   0x180
c0028d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0e:	e8 c0 98 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028d13:	83 c4 10             	add    esp,0x10
c0028d16:	83 c4 0c             	add    esp,0xc
c0028d19:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d1a <AVX::~AVX()>:
c0028d1a:	83 ec 0c             	sub    esp,0xc
c0028d1d:	ba 84 c3 02 c0       	mov    edx,0xc002c384
c0028d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d26:	89 10                	mov    DWORD PTR [eax],edx
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	83 ec 0c             	sub    esp,0xc
c0028d2f:	50                   	push   eax
c0028d30:	e8 f9 b2 fe ff       	call   c001402e <FPU::~FPU()>
c0028d35:	83 c4 10             	add    esp,0x10
c0028d38:	90                   	nop
c0028d39:	83 c4 0c             	add    esp,0xc
c0028d3c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d3e <AVX::~AVX()>:
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	83 ec 0c             	sub    esp,0xc
c0028d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d48:	e8 cd ff ff ff       	call   c0028d1a <AVX::~AVX()>
c0028d4d:	83 c4 10             	add    esp,0x10
c0028d50:	83 ec 08             	sub    esp,0x8
c0028d53:	68 58 01 00 00       	push   0x158
c0028d58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5c:	e8 72 98 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028d61:	83 c4 10             	add    esp,0x10
c0028d64:	83 c4 0c             	add    esp,0xc
c0028d67:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028d68 <MMX::~MMX()>:
c0028d68:	83 ec 0c             	sub    esp,0xc
c0028d6b:	ba c4 c3 02 c0       	mov    edx,0xc002c3c4
c0028d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d74:	89 10                	mov    DWORD PTR [eax],edx
c0028d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	50                   	push   eax
c0028d7e:	e8 ab b2 fe ff       	call   c001402e <FPU::~FPU()>
c0028d83:	83 c4 10             	add    esp,0x10
c0028d86:	90                   	nop
c0028d87:	83 c4 0c             	add    esp,0xc
c0028d8a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028d8c <MMX::~MMX()>:
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	83 ec 0c             	sub    esp,0xc
c0028d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d96:	e8 cd ff ff ff       	call   c0028d68 <MMX::~MMX()>
c0028d9b:	83 c4 10             	add    esp,0x10
c0028d9e:	83 ec 08             	sub    esp,0x8
c0028da1:	68 58 01 00 00       	push   0x158
c0028da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028daa:	e8 24 98 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028daf:	83 c4 10             	add    esp,0x10
c0028db2:	83 c4 0c             	add    esp,0xc
c0028db5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028db6 <SSE::~SSE()>:
c0028db6:	83 ec 0c             	sub    esp,0xc
c0028db9:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c0028dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc2:	89 10                	mov    DWORD PTR [eax],edx
c0028dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc8:	83 ec 0c             	sub    esp,0xc
c0028dcb:	50                   	push   eax
c0028dcc:	e8 5d b2 fe ff       	call   c001402e <FPU::~FPU()>
c0028dd1:	83 c4 10             	add    esp,0x10
c0028dd4:	90                   	nop
c0028dd5:	83 c4 0c             	add    esp,0xc
c0028dd8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028dda <SSE::~SSE()>:
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	83 ec 0c             	sub    esp,0xc
c0028de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de4:	e8 cd ff ff ff       	call   c0028db6 <SSE::~SSE()>
c0028de9:	83 c4 10             	add    esp,0x10
c0028dec:	83 ec 08             	sub    esp,0x8
c0028def:	68 58 01 00 00       	push   0x158
c0028df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df8:	e8 d6 97 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028dfd:	83 c4 10             	add    esp,0x10
c0028e00:	83 c4 0c             	add    esp,0xc
c0028e03:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e04 <x87::~x87()>:
c0028e04:	83 ec 0c             	sub    esp,0xc
c0028e07:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0028e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e10:	89 10                	mov    DWORD PTR [eax],edx
c0028e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	50                   	push   eax
c0028e1a:	e8 0f b2 fe ff       	call   c001402e <FPU::~FPU()>
c0028e1f:	83 c4 10             	add    esp,0x10
c0028e22:	90                   	nop
c0028e23:	83 c4 0c             	add    esp,0xc
c0028e26:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e28 <x87::~x87()>:
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	83 ec 0c             	sub    esp,0xc
c0028e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e32:	e8 cd ff ff ff       	call   c0028e04 <x87::~x87()>
c0028e37:	83 c4 10             	add    esp,0x10
c0028e3a:	83 ec 08             	sub    esp,0x8
c0028e3d:	68 58 01 00 00       	push   0x158
c0028e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e46:	e8 88 97 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028e4b:	83 c4 10             	add    esp,0x10
c0028e4e:	83 c4 0c             	add    esp,0xc
c0028e51:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e52 <IOAPIC::~IOAPIC()>:
c0028e52:	83 ec 0c             	sub    esp,0xc
c0028e55:	ba 9c c5 02 c0       	mov    edx,0xc002c59c
c0028e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5e:	89 10                	mov    DWORD PTR [eax],edx
c0028e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	50                   	push   eax
c0028e68:	e8 45 ab fe ff       	call   c00139b2 <Device::~Device()>
c0028e6d:	83 c4 10             	add    esp,0x10
c0028e70:	90                   	nop
c0028e71:	83 c4 0c             	add    esp,0xc
c0028e74:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028e76 <IOAPIC::~IOAPIC()>:
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	83 ec 0c             	sub    esp,0xc
c0028e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e80:	e8 cd ff ff ff       	call   c0028e52 <IOAPIC::~IOAPIC()>
c0028e85:	83 c4 10             	add    esp,0x10
c0028e88:	83 ec 08             	sub    esp,0x8
c0028e8b:	68 68 01 00 00       	push   0x168
c0028e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e94:	e8 3a 97 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028e99:	83 c4 10             	add    esp,0x10
c0028e9c:	83 c4 0c             	add    esp,0xc
c0028e9f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028ea0 <APIC::~APIC()>:
c0028ea0:	83 ec 0c             	sub    esp,0xc
c0028ea3:	ba 54 c5 02 c0       	mov    edx,0xc002c554
c0028ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eac:	89 10                	mov    DWORD PTR [eax],edx
c0028eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	50                   	push   eax
c0028eb6:	e8 3d b6 fe ff       	call   c00144f8 <InterruptController::~InterruptController()>
c0028ebb:	83 c4 10             	add    esp,0x10
c0028ebe:	90                   	nop
c0028ebf:	83 c4 0c             	add    esp,0xc
c0028ec2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028ec4 <APIC::~APIC()>:
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	83 ec 0c             	sub    esp,0xc
c0028eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ece:	e8 cd ff ff ff       	call   c0028ea0 <APIC::~APIC()>
c0028ed3:	83 c4 10             	add    esp,0x10
c0028ed6:	83 ec 08             	sub    esp,0x8
c0028ed9:	68 58 21 00 00       	push   0x2158
c0028ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee2:	e8 ec 96 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028ee7:	83 c4 10             	add    esp,0x10
c0028eea:	83 c4 0c             	add    esp,0xc
c0028eed:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028eee <PIC::~PIC()>:
c0028eee:	83 ec 0c             	sub    esp,0xc
c0028ef1:	ba ec c5 02 c0       	mov    edx,0xc002c5ec
c0028ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efa:	89 10                	mov    DWORD PTR [eax],edx
c0028efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	50                   	push   eax
c0028f04:	e8 ef b5 fe ff       	call   c00144f8 <InterruptController::~InterruptController()>
c0028f09:	83 c4 10             	add    esp,0x10
c0028f0c:	90                   	nop
c0028f0d:	83 c4 0c             	add    esp,0xc
c0028f10:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f12 <PIC::~PIC()>:
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	83 ec 0c             	sub    esp,0xc
c0028f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1c:	e8 cd ff ff ff       	call   c0028eee <PIC::~PIC()>
c0028f21:	83 c4 10             	add    esp,0x10
c0028f24:	83 ec 08             	sub    esp,0x8
c0028f27:	68 58 21 00 00       	push   0x2158
c0028f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f30:	e8 9e 96 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028f35:	83 c4 10             	add    esp,0x10
c0028f38:	83 c4 0c             	add    esp,0xc
c0028f3b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f3c <APICTimer::~APICTimer()>:
c0028f3c:	83 ec 0c             	sub    esp,0xc
c0028f3f:	ba 40 c6 02 c0       	mov    edx,0xc002c640
c0028f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f48:	89 10                	mov    DWORD PTR [eax],edx
c0028f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4e:	83 ec 0c             	sub    esp,0xc
c0028f51:	50                   	push   eax
c0028f52:	e8 f9 d5 fe ff       	call   c0016550 <Timer::~Timer()>
c0028f57:	83 c4 10             	add    esp,0x10
c0028f5a:	90                   	nop
c0028f5b:	83 c4 0c             	add    esp,0xc
c0028f5e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028f60 <APICTimer::~APICTimer()>:
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	83 ec 0c             	sub    esp,0xc
c0028f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6a:	e8 cd ff ff ff       	call   c0028f3c <APICTimer::~APICTimer()>
c0028f6f:	83 c4 10             	add    esp,0x10
c0028f72:	83 ec 08             	sub    esp,0x8
c0028f75:	68 60 01 00 00       	push   0x160
c0028f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7e:	e8 50 96 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	83 c4 0c             	add    esp,0xc
c0028f89:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028f8a <PIT::~PIT()>:
c0028f8a:	83 ec 0c             	sub    esp,0xc
c0028f8d:	ba 90 c6 02 c0       	mov    edx,0xc002c690
c0028f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f96:	89 10                	mov    DWORD PTR [eax],edx
c0028f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	50                   	push   eax
c0028fa0:	e8 ab d5 fe ff       	call   c0016550 <Timer::~Timer()>
c0028fa5:	83 c4 10             	add    esp,0x10
c0028fa8:	90                   	nop
c0028fa9:	83 c4 0c             	add    esp,0xc
c0028fac:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028fae <PIT::~PIT()>:
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	83 ec 0c             	sub    esp,0xc
c0028fb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb8:	e8 cd ff ff ff       	call   c0028f8a <PIT::~PIT()>
c0028fbd:	83 c4 10             	add    esp,0x10
c0028fc0:	83 ec 08             	sub    esp,0x8
c0028fc3:	68 5c 01 00 00       	push   0x15c
c0028fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fcc:	e8 02 96 fe ff       	call   c00125d3 <operator delete(void*, unsigned long)>
c0028fd1:	83 c4 10             	add    esp,0x10
c0028fd4:	83 c4 0c             	add    esp,0xc
c0028fd7:	c3                   	ret    
